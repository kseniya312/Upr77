////////////////////////////////////////////////////////////////////////////////
// ГЛОБАЛЬНЫЕ ПЕРЕМЕННЫЕ
//
// Глобальные переменные необходимые для стандартных отчетов
Перем глРасшифровка     Экспорт;
Перем глФлагРасшифровки Экспорт;
Перем глТаблица         Экспорт;
Перем глОбновить        Экспорт;

// Глобальные переменные для множественного фильтра отчетов и обработок
Перем глУсловие1  Экспорт;
Перем глУсловие2  Экспорт;
Перем глУсловие3  Экспорт;
Перем глУсловие4  Экспорт;
Перем глУсловие5  Экспорт;                                       
Перем глУсловие6  Экспорт;
Перем глУсловие7  Экспорт;
Перем глУсловие8  Экспорт;
Перем глУсловие9  Экспорт;
Перем глУсловие10 Экспорт;
Перем глУсловие11 Экспорт;
Перем глУсловие12 Экспорт; 
Перем глУсловие13 Экспорт;
Перем СкладДляВыбора Экспорт;

// Глобальная переменная текущего пользователя
Перем глПользователь    Экспорт;

Перем глЧислоСтрок      Экспорт;

// идентификаторы опций печати 
Перем ПарСтрДок         Экспорт;

Перем глРубли           Экспорт;        
Перем глДоллары         Экспорт;        

// (ссылка на перечисление.КодыОпераций) - чтобы в модулях не писать
Перем глКО Экспорт;              
// (ссылка на перечисление.СтатусыПартий) - чтобы в модулях не писать
Перем глСП Экспорт;
// (ссылка на перечисление.ВидыДолга) - чтобы в модулях не писать
Перем глВД Экспорт;     

// Переменные для обработок ввода адреса.
Перем глСписокУлиц Экспорт;
Перем глВладелецСпискаУлиц Экспорт;

// Переменная каталога внешних печатных форм
Перем глКаталогПечФорм Экспорт;  

//++Ерошенко 20.03.2007
// добавлено для работы с Formex.dll
Перем ЗагруженFormex Экспорт;
//--Ерошенко
              
//++Ерошенко 07.05.2007
// добавлено для определения периферийной базы.. 
Перем ЭтоЦентральнаяБаза Экспорт;
//--Ерошенко  
// Дата вступления в силу (01.01.2008) Приказу Минфина РФ №147н от 25.12.07, определяющего новый
// порядок переоценки активов и обязательств в части авансов
Перем глДатаПоПриказу147 Экспорт;
//******************************************************************************
//Задумин TerminalSleep
var vk_sleep Экспорт;

//******************************************************************************
// настройки торгового оборудования
// префиксы для формирования штрихкода товара
Перем глПрефиксВесовогоШтрихкода Экспорт;
Перем глПрефиксШтучногоШтрихкода Экспорт;
Перем глКаталогОписаний          Экспорт;

//******************************************************************************
// сканер штрихкода

Перем глСканерВкл              Экспорт;
Перем глСканер                 Экспорт;

Перем глСканерМодель           Экспорт;
Перем глСканерОбработка        Экспорт;
Перем глСканерКомпонента       Экспорт;
Перем глСканерПрогИд           Экспорт;

Перем глСканерПрефикс          Экспорт;
Перем глСканерЕстьПрефикс      Экспорт;

//******************************************************************************
// фискальный регистратор

Перем глФРВкл                  Экспорт;
Перем глФР                     Экспорт;

Перем глФРМодель               Экспорт;
Перем глФРОбработка            Экспорт;
Перем глФРКомпонента           Экспорт;
Перем глФРПрогИд               Экспорт;

Перем глФРПарольАдминистратора Экспорт;
Перем глФРПарольПользователя   Экспорт;

//******************************************************************************
// дисплей покупателя

Перем глДПВкл                  Экспорт;
Перем глДП                     Экспорт;

Перем глДПМодель               Экспорт;
Перем глДПОбработка            Экспорт;
Перем глДПКомпонента           Экспорт;
Перем глДППрогИд               Экспорт;

Перем глДПБегСтрока            Экспорт;

Перем глДПРежим                Экспорт; // текущий режим работы сканера
Перем глДПРежимБегСтроки       Экспорт;
Перем глДПРежимВыводаСтрок     Экспорт;

//******************************************************************************
// терминал сбора данных

Перем глТерминалВкл            Экспорт;
Перем глТерминал               Экспорт;

Перем глТерминалМодель         Экспорт;
Перем глТерминалОбработка      Экспорт;
Перем глТерминалКомпонента     Экспорт;
Перем глТерминалПрогИд         Экспорт;

//******************************************************************************
// электронные весы

Перем глВесыВкл                Экспорт;
Перем глВесы                   Экспорт;

Перем глВесыМодель             Экспорт;
Перем глВесыОбработка          Экспорт;
Перем глВесыКомпонента         Экспорт;
Перем глВесыПрогИд             Экспорт;

//******************************************************************************
// ККМ

Перем глККМOffLine             Экспорт;
Перем глККМOnLine              Экспорт;
Перем глЧековыйБуферККМOnLine  Экспорт;

// Универсальный механизм "Комментирование выполняемых действий"
Перем глРежимТрассировки Экспорт; // 0/1 - определяет, используется ли при расчете режим трассировки хода расчета
Перем глСообщенияТрассировки Экспорт; // список сообщений, описывающих ход расчета     

// Дата изменения порядка отражения в книге продаж и книге покупок погашения авансов покупателей
Перем глДатаИзмененияПорядкаВычетаНДССАвансов Экспорт;

//******************************************************************************
// Картридер
Перем Scaner Экспорт;  //Переменная для работы со сканером 

//******************************************************************************
//КОНТРОЛЬНЫЕ ЗНАЧЕНИЯ
Перем глКонтроль				Экспорт;

Перем глПроведениеСтрокиВыписки Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ГЛОБАЛЬНОГО МОДУЛЯ
//
Процедура глОбработкаРасшифровки(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт Далее
Процедура глЗаполнитьШапкуНаОсн(Конт, ДокОсн,  ВидОперации = "") Экспорт Далее
Функция   глФирмаДляОстатковТМЦ (Фирма)                                      Экспорт Далее
Функция   глСоздатьТрассировку(Описание)                                     Экспорт Далее
Процедура глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения=0, ИзменениеУровняСообщения=0, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", Знач _П04="", _П04Формат="",Форма="",Объект="",Контрол="") Экспорт Далее
Процедура глПоказатьТрассировку(Трассировка) Экспорт  Далее
Процедура глСообщениеПроведения(ТекстСообщения, Док, ТипСообщения=-1,ПроводимыйДок="",ВыводитьВТаблицу=1) Экспорт Далее
//Сл. функция была добавлена 09/07/2004 г. by ГАВ
Функция глСклонение(Ном,Довесок1,Довесок2,Довесок3) Экспорт Далее
Функция глПолучитьПроцентпоАкции(ТекущаяНоменклатура, ТекущаяДатаОтбора) Экспорт Далее  
Функция глПолучитьФиксированнуюСкидку(ТекДокумент) Экспорт Далее
Функция глПолучитьЗаявку(ТекущийДокумент) Экспорт Далее               
Функция глПроверитьОтгрузкуПоАналитике(Аналитика, ДокПроверки) Экспорт Далее 
Процедура глОбновитьСчетПоДаннымЗаявки(ТекДокумент) Экспорт Далее    
Функция глУЗаявкиЕстьСчет(ТекДокумент) Экспорт Далее
Функция глПроверитьОплату(ТекДокумент) Экспорт Далее 
Функция глПолучитьОплатуПоАналитике(Аналитика, ДокОснованиеПроверки) Экспорт Далее
Функция глПолучитьАналитику(ДокументАналитики, ВыбиратьВручную = "") Экспорт Далее
Функция глПолучитьНачисленныйПроцентПоАналитике(Аналитика, ДокПроверки) Экспорт Далее 
Функция глПолучитьНачисленуюОтгрузкуПоАналитике(Аналитика, ДокПроверки) Экспорт Далее    
Функция глПолучитьПродажиПоАналитике(Аналитика, ТекДата) Экспорт Далее
Функция глПолучитьНачисленныйБонусПоАналитике(Аналитика, ДокПроверки, ТекКонтекст) Экспорт Далее 
Функция  ПроверитьСкидкуПоОграничениюНаБонусы(Знач ДокКонтекст, Знач ПоделеннаяПриоритетнаяСкидка) Далее
Функция глПолучитьОснование(Основание) Экспорт Далее
Функция глПолучитьСклад(СкладМол) Экспорт Далее
Процедура глПересчетТаблЧасти(Конт,ИмяРеквизита, ПараметрыРозничнойЦены = 0) Экспорт  Далее	   
          
Процедура глЗакрытьРезервы(ТекДок) Экспорт
	Если ПустоеЗначение(ТекДок.ДокОснование)=0 Тогда   
		ТекОснование = "";
		ТекОснование = глПолучитьЗаявку(ТекДок);
		
		//Если ТекДок.ДокОснование.Вид()="СчетБнРозница" Тогда  
		//	Если (ПустоеЗначение(ТекДок.ДокОснование.ДокОснование)=0) и (ТекДок.ДокОснование.ДокОснование.Вид()="ЗаявкаКлиентаРозница") Тогда
		//		ТекОснование = ТекДок.ДокОснование.ДокОснование;
		//	КонецЕсли;
		//ИначеЕсли ТекДок.ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда 
		//	ТекОснование = ТекДок.ДокОснование;   
		//КонецЕсли;
		
		Если ПустоеЗначение(ТекОснование)=0 Тогда
			//Сначала проверим на резервы по складу и если они есть по этой заявке, то спишем их
			Если ТекОснование.флРезервировать=1 Тогда	//Были резервы
				ВремРегистры 					= СоздатьОбъект("Регистры");
				ВремРезервыТМЦ2  				= ВремРегистры.РезервыТМЦ2;
				
				Если ТекДок.ИтогиАктуальны()=0 Тогда
					ВремРегистры.Актуальность(1);
					ВремРегистры.РассчитатьРегистрыНа(ТекДок.ТекущийДокумент());
				КонецЕсли;    
				
				ТЗ = СоздатьОбъект("ТаблицаЗначений");
				ВремРезервыТМЦ2.УстановитьФильтр(,,ТекОснование);
				ВремРезервыТМЦ2.ВыгрузитьИтоги(ТЗ,1,1);  
				
				РезервыТМЦ2 = ТекДок.Регистр.РезервыТМЦ2;
				
				ТекДок.ВыбратьСтроки();
				Пока ТекДок.ПолучитьСтроку()=1 Цикл
					ТекНоменк	= ТекДок.Номенклатура;
					х			= ПолучитьПустоеЗначение(х);
					у			= 1;
					Если ТЗ.НайтиЗначение(ТекНоменк,х,"Номенклатура")=1 Тогда
						//т.к. все итоги свёрнуты, то можно утверждать, что строка с одинаковым наименованием 
						//товара только одна. Но все кол-ва в ней
						//Значит можно включать в запись регистра
						Колво = ТЗ.ПолучитьЗначение(х,"Количество");
						Если Колво>=ТекДок.Количество Тогда	//Уберём то что уже включили (кол-во)
							КоличествоРезерв	= ТекДок.Количество;
							ТЗ.УстановитьЗначение(х,"Количество",Колво-ТекДок.Количество);
						иначе
							КоличествоРезерв = Колво;
							ТЗ.УстановитьЗначение(х,"Количество",0);
						КонецЕсли;
						
						Если (КоличествоРезерв)>0 Тогда
							РезервыТМЦ2.Номенклатура 	= ТекДок.Номенклатура;
							РезервыТМЦ2.Склад		 	= ТекДок.Склад;
							РезервыТМЦ2.Заявка		 	= ТекОснование.ТекущийДокумент();
							РезервыТМЦ2.Количество	 	= КоличествоРезерв; 
							РезервыТМЦ2.ФирмаОстатков 	= ТЗ.ПолучитьЗначение(х,"ФирмаОстатков");//глПолучитьФирмуОстатков(ТекДок.ДокОснование.Проект);
							РезервыТМЦ2.ДвижениеРасходВыполнить();	 
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры	

Функция глПокажиОстаткиПоФирмам(ТекДок, ТЗ_ОстатокПоФирмам, СтараяНоменклатураФирм) Экспорт  
	Если СтараяНоменклатураФирм = ТекДок.Номенклатура Тогда
		Возврат "";
	Иначе
		СтараяНоменклатураФирм = ТекДок.Номенклатура;
	КонецЕсли;	
	
	ТЗ_ОстатокПоФирмам.Очистить();
	
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Фирма","Справочник",,,,15);
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Количество","число",15,2,"Кол-во",10);
	ТЗ_ОстатокПоФирмам.НоваяКолонка("КоличествоРез","число",15,2,"рез.",10);
	
	Если ПустоеЗначение(ТекДок.Номенклатура) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	//ВыбСкладМол = ВыбСклад.МОЛ;
	ТекНоменклатура = ТекДок.Номенклатура;
	ТекМол 			= ТекДок.Склад.МОЛ; 
	Если ТекДок.Вид() = "Реализация" Тогда
		ВыбНачПериода 	= ТекДок.ПолучитьПозицию();  
	Иначе
		ВыбНачПериода 	= ПолучитьПозициюТА();
	КонецЕсли;	
	
	//Если ВыбНачПериода > ПолучитьДатуТА() Тогда
	//	ВыбНачПериода = ПолучитьДатуТА();
	//	//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	//КонецЕсли;
	
	Если ВыбНачПериода > ПолучитьПозициюТА() Тогда
		ВыбНачПериода = ПолучитьПозициюТА();
		//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура		= Регистр.ПартииНаличие.Номенклатура, Регистр.РезервыТМЦ2.Номенклатура;
	|МОЛ				= Регистр.ПартииНаличие.МОЛ, Регистр.РезервыТМЦ2.Склад.МОЛ;
	//|Партия				= Регистр.ПартииНаличие.Партия;
	|ФирмаОст			= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков, Регистр.РезервыТМЦ2.ФирмаОстатков;
	|Количество			= Регистр.ПартииНаличие.Количество;
	|КоличествоРез		= Регистр.РезервыТМЦ2.Количество;
	|Функция ТекОстаток 	= КонОст(Количество);
	|Функция ТекОстатокРез 	= КонОст(КоличествоРез);
	|Группировка ФирмаОст без групп;
	|Группировка МОЛ без групп;
	|Группировка Номенклатура без групп;
	|Условие(Номенклатура = ТекНоменклатура); 
	//|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТаблицаФилиалов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаФилиалов.НоваяКолонка("Склад","Справочник");
	ТаблицаФилиалов.НоваяКолонка("Фирма","Справочник");
	ТаблицаФилиалов.НоваяКолонка("Количество","Число",15,3,,10);
	//ТаблицаФилиалов.НоваяКолонка("КоличествоРез","Число",15,3,"рез.",10);
	   
	СпрФирмыОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
	СпрФирмыОст.НайтиПоКоду("3"); 
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Пока Запрос.Группировка(2) = 1 Цикл  
			Пока Запрос.Группировка(3) = 1 Цикл    
				ТекСклад = глПолучитьСклад(Запрос.МОЛ);
				
				Если ПустоеЗначение(Запрос.ФирмаОст) = 1 Тогда  
					ТЗ_ОстатокПоФирмам.НоваяСтрока(); 
					ТЗ_ОстатокПоФирмам.Количество 	=  Запрос.ТекОстаток;
					ТЗ_ОстатокПоФирмам.Фирма 		= СпрФирмыОст.ТекущийЭлемент(); 
					ТЗ_ОстатокПоФирмам.КоличествоРез 	= Запрос.ТекОстатокРез;
					
					ТаблицаФилиалов.НоваяСтрока(); 
					ТаблицаФилиалов.Склад 		= ТекСклад;
					Если ТекСклад = ТекДок.Склад Тогда
						ТаблицаФилиалов.Количество 	= Запрос.ТекОстаток;  
					Иначе
						ТаблицаФилиалов.Количество 	= Запрос.ТекОстаток-Запрос.ТекОстатокРез;
					КонецЕсли;	
					//ТаблицаФилиалов.КоличествоРез = Запрос.ТекОстатокРез;
					ТаблицаФилиалов.Фирма 			= СпрФирмыОст.ТекущийЭлемент();
					
				Иначе
					//Если ПустоеЗначение(Запрос.Партия.ПриходныйДокумент) = 1 Тогда
					//	ТЗ_ОстатокПоФирмам.НоваяСтрока(); 
					//	ТЗ_ОстатокПоФирмам.Количество = Запрос.ТекОстаток; 
					//	ТЗ_ОстатокПоФирмам.Фирма 	= СпрФирмыОст.ТекущийЭлемент(); 
					//	
					//	ТаблицаФилиалов.НоваяСтрока(); 
					//	ТаблицаФилиалов.Склад = глПолучитьСклад(Запрос.МОЛ);
					//	ТаблицаФилиалов.Количество = Запрос.ТекОстаток; 
					//	ТаблицаФилиалов.Фирма 		=  СпрФирмыОст.ТекущийЭлемент();
					//Иначе
					//	Если ПустоеЗначение(Запрос.Партия.ПриходныйДокумент.Проект) = 1 Тогда
					//		ТЗ_ОстатокПоФирмам.НоваяСтрока(); 
					//		ТЗ_ОстатокПоФирмам.Количество =  Запрос.ТекОстаток;
					//		ТЗ_ОстатокПоФирмам.Фирма 	= СпрФирмыОст.ТекущийЭлемент(); 
					//		
					//		ТаблицаФилиалов.НоваяСтрока(); 
					//		ТаблицаФилиалов.Склад = глПолучитьСклад(Запрос.МОЛ);
					//		ТаблицаФилиалов.Количество = Запрос.ТекОстаток;
					//		ТаблицаФилиалов.Фирма 		= СпрФирмыОст.ТекущийЭлемент();
					//	Иначе
							ТЗ_ОстатокПоФирмам.НоваяСтрока();
							//ТЗ_ОстатокПоФирмам.Фирма 		= Запрос.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
							ТЗ_ОстатокПоФирмам.Фирма 			= Запрос.ФирмаОст;
							ТЗ_ОстатокПоФирмам.Количество 		= Запрос.ТекОстаток;      
							ТЗ_ОстатокПоФирмам.КоличествоРез 	= Запрос.ТекОстатокРез;
							
							ТаблицаФилиалов.НоваяСтрока(); 
							ТаблицаФилиалов.Склад 		= ТекСклад;
							Если ТекСклад = ТекДок.Склад Тогда
								ТаблицаФилиалов.Количество 	= Запрос.ТекОстаток;  
							Иначе
								ТаблицаФилиалов.Количество 	= Запрос.ТекОстаток-Запрос.ТекОстатокРез;
							КонецЕсли;	
							//ТаблицаФилиалов.КоличествоРез 	= Запрос.ТекОстатокРез;
							//ТаблицаФилиалов.Фирма 	= Запрос.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
							ТаблицаФилиалов.Фирма 		= Запрос.ФирмаОст;
						//КонецЕсли;
					//КонецЕсли;	
				КонецЕсли;
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;    
	
    //ТаблицаФилиалов.Свернуть("Фирма,Склад","Количество");
	ТЗ_ОстатокПоФирмам.Свернуть("Фирма","Количество,КоличествоРез"); 
	
	ВремТаблицаФилиалов = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаФилиалов.Выгрузить(ВремТаблицаФилиалов);
	ВремТаблицаФилиалов.Свернуть("Склад","Количество");   
	
	КолонкиСверт = "";
	ВремТаблицаФилиалов.ВыбратьСтроки();
	Пока ВремТаблицаФилиалов.ПолучитьСтроку() = 1 Цикл  
		ИмяКолонки = СокрЛП(ВремТаблицаФилиалов.Склад); 
		ИмяКолонки = СтрЗаменить(ИмяКолонки," ","");
		ИмяКолонки = СтрЗаменить(ИмяКолонки,"-","");
		ЗаголКолонки = Лев(""+ВремТаблицаФилиалов.Склад,3)+"-"+Прав(""+ВремТаблицаФилиалов.Склад,3);
		ТЗ_ОстатокПоФирмам.НоваяКолонка(ИмяКолонки,"Число",15,3,ЗаголКолонки,10);
		КолонкиСверт = КолонкиСверт + ","+ИмяКолонки;
	КонецЦикла;      
	ТЗ_ОстатокПоФирмам.НоваяКолонка("пустая","Число",15,3);         
	
	ТаблицаФилиалов.Сортировать("Фирма,Склад");
	
	ТЗ_ОстатокПоФирмам.ВыбратьСтроки();
	Пока ТЗ_ОстатокПоФирмам.ПолучитьСтроку() = 1 Цикл
		ТекФирма = "";
		ТаблицаФилиалов.ВыбратьСтроки();
		Пока ТаблицаФилиалов.ПолучитьСтроку() = 1 Цикл
			Если (ТаблицаФилиалов.Фирма <> ТЗ_ОстатокПоФирмам.Фирма) Тогда    
				Если Не (ТекФирма = "") Тогда     
					Прервать;  
				КонецЕсли;	
			Иначе
				ТекФирма = ТаблицаФилиалов.Фирма;     
				ИмяКолонки = СокрЛП(ТаблицаФилиалов.Склад); 
				ИмяКолонки = СтрЗаменить(ИмяКолонки," ","");
				ИмяКолонки = СтрЗаменить(ИмяКолонки,"-","");
				ТекЗначение = ТЗ_ОстатокПоФирмам.ПолучитьЗначение(ТЗ_ОстатокПоФирмам.НомерСтроки,ИмяКолонки);   
				ТекЗначение = ТекЗначение + ТаблицаФилиалов.Количество;
				ТЗ_ОстатокПоФирмам.УстановитьЗначение(ТЗ_ОстатокПоФирмам.НомерСтроки,ИмяКолонки,ТекЗначение);
			КонецЕсли;
		КонецЦикла;			
	КонецЦикла;	
	
	ТЗ_ОстатокПоФирмам.Свернуть("Фирма","Количество,КоличествоРез"+КолонкиСверт);
	
	Возврат "";
КонецФункции
      
Функция глПолучитьРезервыПоФирмам(СписокНомен, ВыбНачПериода, ТекФирмаОст) 
	ТаблицаРезультат = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРезультат.НоваяКолонка("Филиал","Справочник");
	ТаблицаРезультат.НоваяКолонка("Номенклатура","Справочник");
	ТаблицаРезультат.НоваяКолонка("Количество","число",15,2,);
	//ТаблицаРезультат.НоваяКолонка("ФирмаОстатков","Справочник",1);

	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура		= Регистр.РезервыТМЦ2.Номенклатура;
	|Филиал				= Регистр.РезервыТМЦ2.Склад;
	|ФирмаОст			= Регистр.РезервыТМЦ2.ФирмаОстатков;
	|Количество			= Регистр.РезервыТМЦ2.Количество;
	|Функция ТекОстаток = КонОст(Количество);
	|Группировка Номенклатура без групп;
	|Группировка МОЛ без групп;
	|Условие(ФирмаОст = ТекФирмаОст);
	|Условие(Номенклатура В СписокНомен); 
	//|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	   
	Пока Запрос.Группировка(1) = 1 Цикл	
		Пока Запрос.Группировка(2) = 1 Цикл
			ТаблицаРезультат.НоваяСтрока();
			ТаблицаРезультат.Филиал 			= Запрос.Филиал; 
			ТаблицаРезультат.КоличествоФилиала 	= Запрос.ТекОстаток;
			ТаблицаРезультат.Номенклатура 		= Запрос.Номенклатура;	
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаРезультат;
КонецФункции	

Функция  глПолучитьНедостающиеОстатки(ТекДок, флНаДатуДокумента = 0, ТекПроект = "") Экспорт
	СписокНомен = СоздатьОбъект("СписокЗначений");
	       
	ТаблицаРезультат = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРезультат.НоваяКолонка("Филиал","Справочник");
	ТаблицаРезультат.НоваяКолонка("Номенклатура","Справочник");
	ТаблицаРезультат.НоваяКолонка("Количество","число",15,2,);
	ТаблицаРезультат.НоваяКолонка("ПриоритетФилиала","число",1);
	ТаблицаРезультат.НоваяКолонка("КоличествоФилиала","число",15,2);
	
	ТекДок.ВыбратьСтроки();
	Пока ТекДок.ПолучитьСтроку() = 1 Цикл
		СписокНомен.ДобавитьЗначение(ТекДок.Номенклатура);	
	КонецЦикла;	
	 
	ТекМол 			= ТекДок.Склад.МОЛ; 
	Если ПустоеЗначение(ТекПроект) = 0 Тогда
		ТекФирмаОст 	= ТекПроект.ФирмаОстатков;
	ИначеЕсли ПустоеЗначение(ТекДок.Проект) = 1 Тогда
	    СпрФирмаОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
		СпрФирмаОст.НайтиПоКоду("3");
		ТекФирмаОст = СпрФирмаОст.ТекущийЭлемент();
	Иначе	
		ТекФирмаОст 	= ТекДок.Проект.ФирмаОстатков; 
	КонецЕсли; 
	
	Если (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1) Тогда
		ВыбНачПериода 	= ТекДок.ПолучитьПозицию();  
	Иначе
		ВыбНачПериода 	= ПолучитьПозициюТА();
	КонецЕсли;	
	
	//Если ВыбНачПериода > ПолучитьДатуТА() Тогда
	//	ВыбНачПериода = ПолучитьДатуТА();
	//	//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	//КонецЕсли;
	 
	Если ВыбНачПериода > ПолучитьПозициюТА() Тогда
		ВыбНачПериода = ПолучитьПозициюТА();
		//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура		= Регистр.ПартииНаличие.Номенклатура, Регистр.РезервыТМЦ2.Номенклатура;
	|МОЛ				= Регистр.ПартииНаличие.МОЛ, Регистр.РезервыТМЦ2.Склад.МОЛ;
	//|Партия				= Регистр.ПартииНаличие.Партия;
	|ФирмаОст			= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков, Регистр.РезервыТМЦ2.ФирмаОстатков;
	|Количество			= Регистр.ПартииНаличие.Количество;
	|КоличествоРез		= Регистр.РезервыТМЦ2.Количество;
	|Функция ТекОстаток 	= КонОст(Количество);
	|Функция ТекОстатокРез 	= КонОст(КоличествоРез);
	|Группировка Номенклатура без групп;
	|Группировка МОЛ без групп;
	|Условие(ФирмаОст = ТекФирмаОст);
	|Условие(Номенклатура В СписокНомен); 
	//|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	   
	//ТаблицаРезервов = глПолучитьРезервыПоФирмам(СписокНомен, ВыбНачПериода, ТекФирмаОст);	
	
	Пока Запрос.Группировка(1) = 1 Цикл	
		Пока Запрос.Группировка(2) = 1 Цикл  
			ТекСклад = глПолучитьСклад(Запрос.МОЛ);
			Если (ТекДок.Склад.Магазин = 1) и (ТекСклад.Магазин = 1) Тогда //или (ТекСклад.Код = "00013")) Тогда  //добавим полюстровский
			ИначеЕсли (ТекДок.Склад.Магазин = 0) Тогда	
			Иначе
				Продолжить;				
			КонецЕсли;     
			   
			//Стро =  "";  
			//Если ТаблицаРезервов.НайтиЗначение(ТаблицаДокумента.Номенклатура,Стро,"Номенклатура") = 1 Тогда
			//	ТекОст = ТЗ.ПолучитьЗначение(Стро,"КолОст");
			//
			//Если ТаблицаРезервов.Найти Тогда
			//	
			//КонецЕсли;	
			
			ТекФилиал = глПолучитьСклад(Запрос.МОЛ);
			
			Если ТекФилиал <> ТекДок.Склад  Тогда
				ТекКоличество = Запрос.ТекОстаток - Запрос.ТекОстатокРез;  
			Иначе
				ТекКоличество = Запрос.ТекОстаток;
			КонецЕсли;	
			     
			Если ТекКоличество > 0 Тогда
				ТаблицаРезультат.НоваяСтрока();
				ТаблицаРезультат.Филиал 			= ТекФилиал; 
				ТаблицаРезультат.КоличествоФилиала 	= ТекКоличество;
				ТаблицаРезультат.Номенклатура 		= Запрос.Номенклатура;
				Если ТаблицаРезультат.Филиал = ТекДок.Склад Тогда
					ТаблицаРезультат.ПриоритетФилиала 	= 0; 
				ИначеЕсли ТаблицаРезультат.Филиал.Код = "" Тогда
					ТаблицаРезультат.ПриоритетФилиала 	= 2;
				Иначе
					ТаблицаРезультат.ПриоритетФилиала 	= 1;  
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;	
	     
	Если (ТекДок.Проведен() = 1) Тогда      
		ТекДок = ТекДок.ТекущийДокумент();
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с ВыбНачПериода по ВыбНачПериода;
		|Номенклатура	= Регистр.ПартииНаличие.Номенклатура;
		|МОЛ			= Регистр.ПартииНаличие.МОЛ;
		//|Партия			= Регистр.ПартииНаличие.Партия;
		|ФирмаОст		= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
		|Количество		= Регистр.ПартииНаличие.Количество;
		|ТекущийДокумент= Регистр.ПартииНаличие.ТекущийДокумент; 
		|Функция ТекКолРасход = Расход(Количество) когда (ФирмаОст = ТекФирмаОст);
		|Функция ТекОстаток = КонОст(Количество) когда (ФирмаОст = ТекФирмаОст);
		|Группировка ТекущийДокумент;
		|Группировка МОЛ без групп;  
		|Условие(МОЛ = ТекМол); 
		|Условие(ТекущийДокумент = ТекДок);
		|Условие(ФирмаОст = ТекФирмаОст);
		|Условие(Номенклатура В СписокНомен); 
		//|Условие(МОЛ = ТекМол);  
		|"//}}ЗАПРОС
		;   
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		//ТекКоличество = Количество;
		
		Пока Запрос.Группировка(1) = 1 Цикл	
			Пока Запрос.Группировка(2) = 1 Цикл
				Если Запрос.ТекОстаток < 0 Тогда
					Продолжить;
				КонецЕсли;	
				
				ТаблицаРезультат.НоваяСтрока();
				ТаблицаРезультат.Филиал 			= ТекДок.Склад; 
				ТаблицаРезультат.КоличествоФилиала 	= Запрос.ТекКолРасход;
				ТаблицаРезультат.Номенклатура 		= Запрос.Номенклатура;
				ТаблицаРезультат.ПриоритетФилиала 	= 0; 
							
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРезультат.Свернуть("Номенклатура,Филиал,ПриоритетФилиала","КоличествоФилиала,Количество");
	
	Возврат ТаблицаРезультат;
КонецФункции
         
Процедура глЗаписатьПеремещения(ДокПеремещения, ДокПеремещенияОбратно, ТекДок, флНаДатуДокумента)
	ДокВремя = СоздатьОбъект("Документ");
	
	ДокПеремещения.Записать();       
	Сообщить("Создано перемещение: "+ДокПеремещения.ТекущийДокумент()); 
	Если (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1) Тогда
		ДокВремя.НайтиДокумент(ТекДок.ТекущийДокумент());
		час=0;минуты=0;сек=0;
		ДокВремя.ПолучитьВремя(час,минуты,сек); 
		Если сек > 1 Тогда
			сек = сек-1;
		ИначеЕсли минуты > 1 Тогда
			минуты = минуты - 1;
			сек = 59;
		Иначе
			час = час - 1;
			минуты = 59;
			сек = 59;
		КонецЕсли;
		ДокПеремещения.УстановитьВремя(час,минуты,сек);  
	КонецЕсли; 
	
	ДокПеремещения.Провести();
	Если ДокПеремещения.Проведен() = 0 Тогда
		Сообщить("Не провелся: "+ДокПеремещения.ТекущийДокумент(),"!!!");
	КонецЕсли;
	
	ВернутьКонстанту = 0;
	Если Константа.ПроверкаОстатковПеремещениеТМЦРозница = 1 Тогда
		Константа.ПроверкаОстатковПеремещениеТМЦРозница = 0;
		ВернутьКонстанту = 1;
	КонецЕсли;
	
	ДокПеремещенияОбратно.Записать();    
	Сообщить("Создано перемещение: "+ДокПеремещенияОбратно.ТекущийДокумент());
	Если (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1) Тогда
		ДокПеремещенияОбратно.УстановитьВремя(час,минуты,сек);  
	КонецЕсли;       
	
	Если ДокПеремещения.Проведен() = 1 Тогда
		ДокПеремещенияОбратно.Провести();    
		Если ДокПеремещенияОбратно.Проведен() = 0 Тогда
			Сообщить("Не провелся: "+ДокПеремещенияОбратно.ТекущийДокумент(),"!!!");   
			ДокПеремещения.СделатьНеПроведенным();
			Если ДокПеремещенияОбратно.Проведен() = 0 Тогда
				Сообщить("Отменено проведение встречного: "+ДокПеремещенияОбратно.ТекущийДокумент(),"!!!");
			КонецЕсли;	
		КонецЕсли; 
	Иначе
		Сообщить("Не провелся: "+ДокПеремещенияОбратно.ТекущийДокумент(),"!!!");
	КонецЕсли;	
	
	Если ВернутьКонстанту = 1 Тогда
		Константа.ПроверкаОстатковПеремещениеТМЦРозница = 1;    
	КонецЕсли;
КонецПроцедуры	

Процедура глПрибратьПартии(ТекДок, флНаДатуДокумента = 0, ТекПроект = "") Экспорт     
	//Проверить записать документ
	Если (ТекДок.Выбран()=0) Тогда
		Предупреждение("Документ не записан! Сначала следует записать документ!", 60);
		Возврат;
	//ИначеЕсли  ТекДок.Модифицированность() = 1 Тогда
	//	Предупреждение("Документ был изменен! Сначала следует записать документ!", 60);
	//	Возврат;
	КонецЕсли;      
	
	Если (флНаДатуДокумента = 0) Тогда
		Если Вопрос("Будут созданы документы перемещения. Продолжить?", "Да+Нет") = "Да" Тогда
		Иначе	
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//таблица фирма количество нужно кол фил[i] 
	//получаем недостающее количество по фирмам  
	ТаблицаНужныхОстатков = глПолучитьНедостающиеОстатки(ТекДок, флНаДатуДокумента, ТекПроект);
	//получаем остатки у других филиалов по недостающей фирме
	//ЗаполнитьТаблицуОстаткамиФилиалов(ТаблицаНужныхОстатков); 
	//проверяем возможность списания данной фирмы у филиалов  
	//ПроверитьВозможностьСписанияФилиалов(ТаблицаНужныхОстатков);
	//формируем перемещения 
	ВремТабл = СоздатьОбъект("ТаблицаЗначений");
	ТекДок.ВыгрузитьТабличнуюЧасть(ВремТабл);
	
	ТаблицаНужныхОстатков.Сортировать("Номенклатура,+ПриоритетФилиала,Филиал");  
	ТекНоменклатура = "";	
	ТаблицаНужныхОстатков.ВыбратьСтроки();
	Пока ТаблицаНужныхОстатков.ПолучитьСтроку() = 1 Цикл      
	     
		Если ТекНоменклатура <> ТаблицаНужныхОстатков.Номенклатура Тогда
			стр = "";
			Если ВремТабл.НайтиЗначение(ТаблицаНужныхОстатков.Номенклатура,стр,"Номенклатура") = 1 Тогда
				КоличествоНадо 	= ВремТабл.ПолучитьЗначение(стр,"Количество");  
				ТекНоменклатура = ТаблицаНужныхОстатков.Номенклатура;
			Иначе
				КоличествоНадо 	= 0;  
				ТекНоменклатура = ТаблицаНужныхОстатков.Номенклатура;
			КонецЕсли;
		КонецЕсли;
		
        Если КоличествоНадо = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если КоличествоНадо >= ТаблицаНужныхОстатков.КоличествоФилиала Тогда
			ТаблицаНужныхОстатков.Количество = ТаблицаНужныхОстатков.КоличествоФилиала;	
			КоличествоНадо = КоличествоНадо - ТаблицаНужныхОстатков.КоличествоФилиала;
		ИначеЕсли КоличествоНадо < ТаблицаНужныхОстатков.КоличествоФилиала Тогда
			ТаблицаНужныхОстатков.Количество = КоличествоНадо;	
			КоличествоНадо = 0;
		КонецЕсли;	
	КонецЦикла;	
	
	ТаблицаНужныхОстатков.Сортировать("Филиал,ПриоритетФилиала");
	ТекФилиал = "";   
	
	ДокПеремещения = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ДокПеремещенияОбратно = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	ДокВремя = СоздатьОбъект("Документ");
	
	ТаблицаНужныхОстатков.ВыбратьСтроки();
	Пока ТаблицаНужныхОстатков.ПолучитьСтроку() = 1 Цикл 
		Если  (ТаблицаНужныхОстатков.Филиал = ТекДок.Склад)
			или (ТаблицаНужныхОстатков.Количество = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекФилиал <> ТаблицаНужныхОстатков.Филиал Тогда
			Если ТекФилиал <> "" Тогда 
				глЗаписатьПеремещения(ДокПеремещения, ДокПеремещенияОбратно, ТекДок, флНаДатуДокумента);
			КонецЕсли;
			
			ДокПеремещения.Новый();
			ДокПеремещения.ДокОснование 	= ТекДок.ТекущийДокумент(); 
			Если (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1) Тогда
				ДокПеремещения.ДатаДок			= ТекДок.ДатаДок;
			КонецЕсли;
			ДокПеремещения.Склад 			= ТекДок.Склад;
			ДокПеремещения.УстановитьНовыйНомер("ПРВ-"); 
			 
			Если ПустоеЗначение(ТекПроект) = 0 Тогда
				Если ТекПроект.ФирмаОстатков.Код <> "1" Тогда
					СпрПроект = СоздатьОбъект("Справочник.Проекты");
					СпрПроект.НайтиПоКоду("00030");
					ДокПеремещения.Проект = СпрПроект.ТекущийЭлемент();
				КонецЕсли; 		
			ИначеЕсли ТекДок.Проект.Выбран() = 1 Тогда    
				ТекПроект = ТекДок.Проект;
				//если фирма остатков не эталон ставим проект Эталона
				//что бы отгрущить партии эталона
				Если ТекДок.Проект.ФирмаОстатков.Код <> "1" Тогда
					СпрПроект = СоздатьОбъект("Справочник.Проекты");
					СпрПроект.НайтиПоКоду("00030");
					ДокПеремещения.Проект = СпрПроект.ТекущийЭлемент();
				КонецЕсли;	
			Иначе	
				//если проект не выбран, значит это эксперт, ставим проект Эталона
				//что бы отгрущить партии эталона
				СпрПроект = СоздатьОбъект("Справочник.Проекты");
				СпрПроект.НайтиПоКоду("00030");
				ДокПеремещения.Проект = СпрПроект.ТекущийЭлемент();
			КонецЕсли;
			
			ДокПеремещения.СкладПолучатель 	= ТаблицаНужныхОстатков.Филиал; 
			ДокПеремещения.Комментарий		= "Создано автоматически";
			ДокПеремещения.Валюта			= глРубли;
			ДокПеремещения.Курс				= 1;    
			ДокПеремещения.Фирма			= ТекДок.Фирма;
			ДокПеремещения.ФирмаПолучатель	= ТекДок.Фирма;
			ДокПеремещения.УчитыватьНДС		= 1;
			ДокПеремещения.СуммаВклНДС		= 1;
			ДокПеремещения.УчитыватьНП		= 1;
			ДокПеремещения.СуммаВклНП		= 1;
			ДокПеремещения.Набран			= 1; 
			ДокПеремещения.Принят_к_учету	= глПользователь;
			
			ДокПеремещенияОбратно.Новый();
			ДокПеремещенияОбратно.ДокОснование 		= ТекДок.ТекущийДокумент(); 
			Если  (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1)  Тогда
				ДокПеремещенияОбратно.ДатаДок			= ТекДок.ДатаДок;
			КонецЕсли;
			ДокПеремещенияОбратно.Проект            = ТекПроект;
			ДокПеремещенияОбратно.Склад 			= ТаблицаНужныхОстатков.Филиал;
			ДокПеремещенияОбратно.УстановитьНовыйНомер("ПРВ-");
			ДокПеремещенияОбратно.СкладПолучатель 	= ТекДок.Склад;   
			ДокПеремещенияОбратно.Комментарий		= "Создано автоматически";
			ДокПеремещенияОбратно.Валюта			= глРубли;
			ДокПеремещенияОбратно.Курс				= 1;    
			ДокПеремещенияОбратно.Фирма				= ТекДок.Фирма;
			ДокПеремещенияОбратно.ФирмаПолучатель	= ТекДок.Фирма;
			ДокПеремещенияОбратно.УчитыватьНДС		= 1;
			ДокПеремещенияОбратно.СуммаВклНДС		= 1;
			ДокПеремещенияОбратно.УчитыватьНП		= 1;
			ДокПеремещенияОбратно.СуммаВклНП		= 1;
			ДокПеремещенияОбратно.Набран			= 1; 
			ДокПеремещенияОбратно.Принят_к_учету	= глПользователь;
			
			ТекФилиал = ТаблицаНужныхОстатков.Филиал;
		КонецЕсли;
		
		ДокПеремещения.НоваяСтрока();
		ДокПеремещения.Номенклатура = ТаблицаНужныхОстатков.Номенклатура;
		ДокПеремещения.Количество 	= ТаблицаНужныхОстатков.Количество;
		ДокПеремещения.Количество2 	= ТаблицаНужныхОстатков.Количество;
		ДокПеремещения.Единица      = ТаблицаНужныхОстатков.Номенклатура.ОсновнаяЕдиница;
		ДокПеремещения.Коэффициент = 1;
		глПересчетТаблЧасти(ДокПеремещения, "Количество");
		СпрНом.ИспользоватьДату(ДокПеремещения.ДатаДок);
		СпрНом.НайтиЭлемент(ДокПеремещения.Номенклатура);
		ДокПеремещения.Цена = СпрНом.ПоследняяЦенаПрихода;
		ДокПеремещения.Сумма = ДокПеремещения.Количество*ДокПеремещения.Цена;  
		
		
		ДокПеремещенияОбратно.НоваяСтрока();
		ДокПеремещенияОбратно.Номенклатура = ТаблицаНужныхОстатков.Номенклатура;
		ДокПеремещенияОбратно.Количество 	= ТаблицаНужныхОстатков.Количество;  
		ДокПеремещенияОбратно.Количество2 	= ТаблицаНужныхОстатков.Количество;
		ДокПеремещенияОбратно.Единица      = ТаблицаНужныхОстатков.Номенклатура.ОсновнаяЕдиница;
		ДокПеремещенияОбратно.Коэффициент = 1;
		глПересчетТаблЧасти(ДокПеремещения, "Количество");  
		СпрНом.ИспользоватьДату(ДокПеремещенияОбратно.ДатаДок);
		СпрНом.НайтиЭлемент(ДокПеремещенияОбратно.Номенклатура);
		ДокПеремещенияОбратно.Цена = СпрНом.ПоследняяЦенаПрихода;
		ДокПеремещенияОбратно.Сумма = ДокПеремещенияОбратно.Количество*ДокПеремещенияОбратно.Цена;
	КонецЦикла;	   
	
	Если ТекФилиал <> "" Тогда 
		глЗаписатьПеремещения(ДокПеремещения, ДокПеремещенияОбратно, ТекДок, флНаДатуДокумента);	
	КонецЕсли;
КонецПроцедуры
            
Функция ПолучитьОстаткиПоСкладуИФирме(ТекДок)
	СписокНомен = СоздатьОбъект("СписокЗначений");
	       
	ТаблицаРезультат = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРезультат.НоваяКолонка("Номенклатура","Справочник");
	ТаблицаРезультат.НоваяКолонка("КоличествоОст","число",15,2,);
	
	ТекДок.ВыбратьСтроки();
	Пока ТекДок.ПолучитьСтроку() = 1 Цикл
		СписокНомен.ДобавитьЗначение(ТекДок.Номенклатура);	
	КонецЦикла;	
	 
	ТекМол 		= ТекДок.Склад.МОЛ; 
	//ТекФирмаОст = СоздатьОбъект("СписокЗначений");
	Если ПустоеЗначение(ТекДок.Проект) = 1 Тогда
	    СпрФирмаОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
		СпрФирмаОст.НайтиПоКоду("3");
		ТекФирмаОст = СпрФирмаОст.ТекущийЭлемент();
	
	Иначе	
		ТекФирмаОст 	= ТекДок.Проект.ФирмаОстатков; 
	КонецЕсли; 
	
	//Если (ТекДок.Вид() = "Реализация") или (флНаДатуДокумента = 1) Тогда
		ВыбНачПериода 	= ТекДок.ПолучитьПозицию();  
	//Иначе
	//	ВыбНачПериода 	= ПолучитьПозициюТА();
	//КонецЕсли;	
	
	//Если ВыбНачПериода > ПолучитьДатуТА() Тогда
	//	ВыбНачПериода = ПолучитьДатуТА();
	//	//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	//КонецЕсли;
	 
	Если ВыбНачПериода > ПолучитьПозициюТА() Тогда
		ВыбНачПериода = ПолучитьПозициюТА();
		//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура		= Регистр.ПартииНаличие.Номенклатура, Регистр.РезервыТМЦ2.Номенклатура;
	|МОЛ				= Регистр.ПартииНаличие.МОЛ, Регистр.РезервыТМЦ2.Склад.МОЛ;
	//|Партия				= Регистр.ПартииНаличие.Партия;
	|ФирмаОст			= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков, Регистр.РезервыТМЦ2.ФирмаОстатков;
	|Количество			= Регистр.ПартииНаличие.Количество;
	|КоличествоРез		= Регистр.РезервыТМЦ2.Количество;
	|Функция ТекОстаток 	= КонОст(Количество);
	|Функция ТекОстатокРез 	= КонОст(КоличествоРез);
	|Группировка Номенклатура без групп;
	//|Группировка МОЛ без групп;
	|Условие(ФирмаОст = ТекФирмаОст);
	|Условие(Номенклатура В СписокНомен); 
	|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	   
	//ТаблицаРезервов = глПолучитьРезервыПоФирмам(СписокНомен, ВыбНачПериода, ТекФирмаОст);	
	
	Пока Запрос.Группировка(1) = 1 Цикл	
		//Пока Запрос.Группировка(2) = 1 Цикл  
			ТекКоличество = Запрос.ТекОстаток - Запрос.ТекОстатокРез;  
			     
			Если ТекКоличество > 0 Тогда
				ТаблицаРезультат.НоваяСтрока();
				ТаблицаРезультат.КоличествоОст 	= ТекКоличество;
				ТаблицаРезультат.Номенклатура 	= Запрос.Номенклатура;
			КонецЕсли;
		//КонецЦикла;
	КонецЦикла;	
	 
	Возврат ТаблицаРезультат;
КонецФункции	

Процедура глОчиститьСтрокиПоОстаткам(ТекДок)
	ТаблицаОстатков = ПолучитьОстаткиПоСкладуИФирме(ТекДок);  
	
	//СтрокиНаУдаление = СоздатьОбъект("СписокЗначений");
	
	ТекНомерСтроки = ТекДок.КоличествоСтрок();
	Пока ТекНомерСтроки > 0 Цикл
		ТекДок.ПолучитьСтрокуПоНомеру(ТекНомерСтроки);        
		Стр = "";
		Если ТаблицаОстатков.НайтиЗначение(ТекДок.Номенклатура,Стр,"Номенклатура") = 1 Тогда
			ТаблицаОстатков.ПолучитьСтрокуПоНомеру(Стр);  
			Если ТекДок.Количество = ТаблицаОстатков.КоличествоОст Тогда
				ТаблицаОстатков.УдалитьСтроку();                     
			ИначеЕсли ТаблицаОстатков.КоличествоОст <= 0 Тогда
				ТекДок.УдалитьСтроку();
			ИначеЕсли ТекДок.Количество > ТаблицаОстатков.КоличествоОст Тогда
				ТекДок.Количество = ТаблицаОстатков.КоличествоОст;
				ТаблицаОстатков.УдалитьСтроку();
			Иначе
				ТаблицаОстатков.КоличествоОст = ТаблицаОстатков.КоличествоОст - ТекДок.Количество;
			КонецЕсли;	
		Иначе
			ТекДок.УдалитьСтроку();
		КонецЕсли;	
		
		ТекНомерСтроки = ТекНомерСтроки - 1; 
	КонецЦикла;	
	
КонецПроцедуры	

Функция глНетОстаткаПоФирме(ТекДок, ТекПроект = "") Экспорт 
	ТекМол 			= ТекДок.Склад.МОЛ;      
    
	Если ПустоеЗначение(ТекПроект) = 0 Тогда
		ТекФирмаОст 	= ТекПроект.ФирмаОстатков;
	ИначеЕсли ПустоеЗначение(ТекДок.Проект) = 1 Тогда
	    СпрФирмаОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
		СпрФирмаОст.НайтиПоКоду("3");
		ТекФирмаОст = СпрФирмаОст.ТекущийЭлемент();
	Иначе	
		ТекФирмаОст 	= ТекДок.Проект.ФирмаОстатков; 
	КонецЕсли;
	
	Если ТекДок.Вид() = "Реализация" Тогда
		ВыбНачПериода 	= ТекДок.ПолучитьПозицию();
	Иначе
		ВыбНачПериода 	= ПолучитьПозициюТА();
	КонецЕсли;	             

	ТекНоменклатура = ТекДок.Номенклатура;
	
	//Если ВыбНачПериода > ПолучитьДатуТА() Тогда
	//	ВыбНачПериода = ПолучитьДатуТА();
	//	//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	//КонецЕсли;
	 
	Если ВыбНачПериода > ПолучитьПозициюТА() Тогда
		ВыбНачПериода = ПолучитьПозициюТА();
		//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура		= Регистр.ПартииНаличие.Номенклатура, Регистр.РезервыТМЦ2.Номенклатура;
	|МОЛ				= Регистр.ПартииНаличие.МОЛ, Регистр.РезервыТМЦ2.Склад.МОЛ;
	//|Партия				= Регистр.ПартииНаличие.Партия;
	|ФирмаОст			= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков, Регистр.РезервыТМЦ2.ФирмаОстатков;
	|Количество			= Регистр.ПартииНаличие.Количество;
	|КоличествоРез		= Регистр.РезервыТМЦ2.Количество;
	|Функция ТекОстаток 	= КонОст(Количество);
	|Функция ТекОстатокРез 	= КонОст(КоличествоРез);
	|Группировка Номенклатура без групп;
	|Группировка МОЛ без групп;  
	//|Условие(МОЛ = ТекМол);
	|Условие(ФирмаОст = ТекФирмаОст);
	|Условие(Номенклатура = ТекНоменклатура); 
	//|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;
	      
	ТекКоличество 			= ТекДок.Количество;
	КоличествоДругиеСклады 	= 0;  
	
	Пока Запрос.Группировка(1) = 1 Цикл	
		Пока Запрос.Группировка(2) = 1 Цикл
			Если Запрос.МОЛ = ТекМол Тогда
				ТекКоличество 			= ТекКоличество - Запрос.ТекОстаток;         
			Иначе     
				ТекСклад = глПолучитьСклад(Запрос.МОЛ);
				Если (ТекДок.Склад.Магазин = 1) и (ТекСклад.Магазин = 1) Тогда //или (ТекСклад.Код = "00013")) Тогда  //добавим полюстровский
					КоличествоДругиеСклады 	= КоличествоДругиеСклады + Запрос.ТекОстаток-Запрос.ТекОстатокРез;
				ИначеЕсли (ТекДок.Склад.Магазин = 0) Тогда	
					КоличествоДругиеСклады 	= КоличествоДругиеСклады + Запрос.ТекОстаток-Запрос.ТекОстатокРез;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;   
	   
	Если (ТекДок.Проведен() = 1) и (ТекКоличество>0) Тогда      
		ТекДок = ТекДок.ТекущийДокумент();
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с ВыбНачПериода по ВыбНачПериода;
		|Номенклатура	= Регистр.ПартииНаличие.Номенклатура;
		|МОЛ			= Регистр.ПартииНаличие.МОЛ;
		|Партия			= Регистр.ПартииНаличие.Партия;
		|ФирмаОст		= Регистр.ПартииНаличие.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
		|Количество		= Регистр.ПартииНаличие.Количество;
		|ТекущийДокумент= Регистр.ПартииНаличие.ТекущийДокумент; 
		|Функция ТекКолРасход = Расход(Количество) когда (ФирмаОст = ТекФирмаОст); 
		|Функция ТекОстаток = КонОст(Количество) когда (ФирмаОст = ТекФирмаОст);
		|Группировка ТекущийДокумент;
		|Группировка МОЛ без групп;  
		|Условие(МОЛ = ТекМол); 
		|Условие(ТекущийДокумент = ТекДок);
		|Условие(ФирмаОст = ТекФирмаОст);
		|Условие(Номенклатура = ТекНоменклатура); 
		//|Условие(МОЛ = ТекМол);  
		|"//}}ЗАПРОС
		;   
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат "";
		КонецЕсли;
		
		//ТекКоличество = Количество;
		
		Пока Запрос.Группировка(1) = 1 Цикл	
			Пока Запрос.Группировка(2) = 1 Цикл
				Если Запрос.ТекОстаток < 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ТекКоличество = ТекКоличество - Запрос.ТекКолРасход;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
	           
	Если (ТекКоличество > 0) и (КоличествоДругиеСклады >= ТекКоличество) и (КоличествоДругиеСклады > 0) Тогда 
		Возврат 3; 
	ИначеЕсли ТекКоличество > 0 Тогда
		Возврат 2;
	Иначе	
		Возврат 0;
	КонецЕсли;	
КонецФункции

Процедура глОтразитьНеобходимыйТоварПоФирмам(ТекДок, ТаблСписПартий) Экспорт      
	    
	Если ТекДок.ДатаДок < Дата("01.07.2017") Тогда
		Возврат;
	КонецЕсли;	
	  
	ФНеПишем = 0; 
	ФЭНеПишем = 0;
	
	Если ТекДок.Проект.Выбран() = 1 Тогда
		ТекФирмаОтстатков = ТекДок.Проект.ФирмаОстатков;
	Иначе        
		Если ТекДок.Вид() = "РасходнаяНакладнаяРозница" Тогда
			СпрФирмаОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
			СпрФирмаОст.НайтиПоКоду("3");
			ТекФирмаОтстатков = СпрФирмаОст.ТекущийЭлемент(); 
		КонецЕсли;
	КонецЕсли;	
	   
	//Если ТекФирмаОтстатков.Код = 1 Тогда
	//	ФНеПишем = 1;
	//ИначеЕсли ТекФирмаОтстатков.Код = 2 Тогда	
	//    ФЭНеПишем = 1;
	//КонецЕсли;
	
	НеобходимыйТоварПоФирмам = ТекДок.Регистр.НеобходимыйТоварПоФирмам;
	
	ТаблСписПартий.ВыбратьСтроки();
	Пока ТаблСписПартий.ПолучитьСтроку() = 1 Цикл
		Если (ПустоеЗначение(ТаблСписПартий.Партия.ПриходныйДокумент) = 0) Тогда
			Если ПустоеЗначение(ТаблСписПартий.Партия.ПриходныйДокумент.Проект) = 0 Тогда   
				Если (ТаблСписПартий.Партия.ПриходныйДокумент.Проект.ФирмаОстатков <> ТекФирмаОтстатков) Тогда
					
					//Если (ТаблСписПартий.Партия.ПриходныйДокумент.Проект.ФирмаОстатков.Код = 1) и (ФЭНеПишем = 1) Тогда
					//	Продолжить;
					//КонецЕсли;
					
					НеобходимыйТоварПоФирмам.Номенклатура			= ТаблСписПартий.Номенклатура;
					НеобходимыйТоварПоФирмам.Склад					= глПолучитьСклад(ТаблСписПартий.МОЛ);
					НеобходимыйТоварПоФирмам.ФирмаОстатков			= ТекФирмаОтстатков; 
					НеобходимыйТоварПоФирмам.ФирмаСписанныхОстатков	= ТаблСписПартий.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
					НеобходимыйТоварПоФирмам.Количество				= ТаблСписПартий.Количество; 
					НеобходимыйТоварПоФирмам.ДвижениеВыполнить();	
				КонецЕсли;	
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры	

Функция глПолучитьСклад(СкладМол) Экспорт  
	ТекРезультат = ПолучитьПустоеЗначение("Справочник.Склады");
	
	спрСклад = СоздатьОбъект("Справочник.Склады");	
	спрСклад.ВыбратьЭлементы();
	Пока спрСклад.ПолучитьЭлемент() = 1 Цикл
		Если спрСклад.МОЛ = СкладМол Тогда
			ТекРезультат = спрСклад.ТекущийЭлемент();
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	 
	Возврат ТекРезультат;	
КонецФункции

Функция глПроверитьОплату(ТекДокумент) Экспорт
	суммаОпДог = глПолучитьОплатуПоАналитике(ТекДокумент.АналитикаСчетБезналПроценты, ТекДокумент);
	Если суммаОпДог = 0 тогда  
		Возврат 0;
	Иначе	      
		Возврат 1;
	КонецЕсли;	
КонецФункции	
             
Процедура глПровестиЗачетАвансов(ДокКонтекст) Экспорт
	Если ДокКонтекст.Вид()="Реализация" Тогда
		ВремРегистры = СоздатьОбъект("Регистры");
		
		ВремПокупатели_розница          = ВремРегистры.Взаиморасчеты2;
		ВремПокупатели_розница.ВременныйРасчет(1);	
		Если ВремРегистры.Актуальность() = 0 Тогда
			ВремРегистры.Актуальность(1);
			Если ПолучитьПозициюТА() > ДокКонтекст.ПолучитьПозицию() Тогда
				ВремРегистры.РассчитатьРегистрыНа(ДокКонтекст.ТекущийДокумент());
				ТекДата = ДокКонтекст.ПолучитьПозицию();
			Иначе
				ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА()); 
				ТекДата = ПолучитьПозициюТА();
			КонецЕсли;
		КонецЕсли;
		
		ТекКонтр 	= ДокКонтекст.Контрагент;
		//ТекДата 	= ДокКонтекст.ДатаДок;
		Запрос 		= СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с ТекДата по ТекДата;
		|Контрагент 		= Регистр.Взаиморасчеты2.Контрагент;
		|Валюта 			= Регистр.Взаиморасчеты2.Валюта;
		|ВидОплаты 			= Регистр.Взаиморасчеты2.ВидОплаты;
		|ДокументРасчета 	= Регистр.Взаиморасчеты2.ДокументРасчета;
		|Склад 				= Регистр.Взаиморасчеты2.Склад;
		|Долг			 	= Регистр.Взаиморасчеты2.Долг;
		|Функция СуммаРубКонОст = КонОст(Долг);
		|Группировка Контрагент;
		|Группировка Валюта;
		|Группировка ВидОплаты;
		|Группировка Склад;
		|Группировка ДокументРасчета;
		|Условие(Контрагент 		= ТекКонтр);
		|";//}}ЗАПРОС
		
		// Если ошибка в запросе, то выход из процедуры
		СуммаСписания = ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"));
		
		Взаиморасчеты2 = ДокКонтекст.Регистр.Взаиморасчеты2;
		
		Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
			Пока Запрос.Группировка(1) = 1 Цикл
				Пока Запрос.Группировка(2) = 1 Цикл 
					Пока Запрос.Группировка(3) = 1 Цикл 
						Пока Запрос.Группировка(4) = 1 Цикл
							Пока Запрос.Группировка(5) = 1 Цикл
								Если Не (Запрос.СуммаРубКонОст < 0) Тогда
									Продолжить;   
								КонецЕсли;
								
								Если СуммаСписания <= 0 Тогда 
									Прервать;
								КонецЕсли;
								           
								ТекОстаток = -Запрос.СуммаРубКонОст;
								
								Если ТекОстаток >= СуммаСписания Тогда   
									ТекСумма = СуммаСписания;
									СуммаСписания = 0;
								Иначе      
									ТекСумма = ТекОстаток;
									СуммаСписания = СуммаСписания - ТекОстаток;
								КонецЕсли;
								
								Взаиморасчеты2.Контрагент				= Запрос.Контрагент;
								Взаиморасчеты2.Валюта					= Запрос.Валюта;
								Взаиморасчеты2.ВидОплаты				= Запрос.ВидОплаты;
								Взаиморасчеты2.ДокументРасчета			= Запрос.ДокументРасчета.ТекущийДокумент(); 
								Взаиморасчеты2.Склад 					= Запрос.Склад;
								Взаиморасчеты2.Долг						= ТекСумма;
									
								
								Взаиморасчеты2.ДвижениеПриходВыполнить();
								
								Взаиморасчеты2.Контрагент 	= ДокКонтекст.Контрагент;
								Взаиморасчеты2.Склад 		= ДокКонтекст.Склад;   
								Взаиморасчеты2.Долг			= ТекСумма;
								Взаиморасчеты2.Скидка		= 0;
								Взаиморасчеты2.Валюта		= ДокКонтекст.Валюта;
								Если ПустоеЗначение(ДокКонтекст.ДокОснование) = 1 Тогда
									Взаиморасчеты2.ДокументРасчета	= ДокКонтекст.ТекущийДокумент();
								Иначе
									Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(ДокКонтекст.ТекущийДокумент());
								КонецЕсли;
								
								Если ДокКонтекст.Проект.ВидОплаты=глКО.Наличные Тогда
									Взаиморасчеты2.ВидОплаты= глКО.Наличные;
									Взаиморасчеты2.ДвижениеРасходВыполнить();
								ИначеЕсли ДокКонтекст.Проект.ВидОплаты=глКО.Безнал Тогда
									Взаиморасчеты2.ВидОплаты= глКО.Безнал;
									Взаиморасчеты2.ДвижениеРасходВыполнить();
								ИначеЕсли ДокКонтекст.Проект.ВидОплаты=глКО.Прочее Тогда
									Взаиморасчеты2.ВидОплаты= глКО.Прочее;
									Взаиморасчеты2.ДвижениеРасходВыполнить();
								ИначеЕсли ДокКонтекст.Проект.ВидОплаты=глКО.СтарыеДанные Тогда
									Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
									Взаиморасчеты2.ДвижениеРасходВыполнить();
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Функция глПолучитьКоличествоНачиляемыхБонусовПроцентов(ДокКонтекст) Экспорт
	флОтгрузкаВДолг = 0;
	
	
	Если ДокКонтекст.Вид() = "ЗаявкаКлиентаРозница" Тогда
		ВсегоОплатить				= ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"));
		ВсегоОплачено   			= ДокКонтекст.Оплачено + ДокКонтекст.ОплаченоБонусом;
	ИначеЕсли ДокКонтекст.Вид() = "Реализация" Тогда 
		ВсегоОплатить = ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"));
		ВсегоОплачено = ВсегоОплатить;
	Иначе
		ВсегоОплатить				= ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС")) - ДокКонтекст.залог;
		ВсегоОплачено   			= ДокКонтекст.Оплачено + ДокКонтекст.залог + ДокКонтекст.ОплаченоБонусом;
	КонецЕсли;	
	
	
	
	
	Если ((ВсегоОплатить - ВсегоОплачено) > 0) Тогда
		флОтгрузкаВДолг = 1;
	КонецЕсли;
	
	Если ((ВсегоОплатить - ВсегоОплачено) > 0) и (ДокКонтекст.ДатаДок >= Дата("01.02.17"))  и (ДокКонтекст.ДатаДок <= Дата("24.04.17")) Тогда
		флОтгрузкаВДолг = 0; //делаем потомучто были начисления бонусов и потом их списние отменять нельзя
	КонецЕсли;
	
	//++Валерйи МЭТР: механизм деления скидки
	//++Валерий МЭТР: повышение 
	Если ДокКонтекст.Вид() = "Реализация" Тогда     
		СкидкаКонтрагента 	= ДокКонтекст.ДокОснование.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДатаДок);
	Иначе	
		СкидкаКонтрагента 	= ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДатаДок);
	КонецЕсли;	
	ПовышениеСкидки 	= 0;  
	Если (ДокКонтекст.Вид() <> "ЗаявкаКлиентаРозница") и (ДокКонтекст.Вид() <> "Реализация") Тогда
		Если ДокКонтекст.Повышение = 1 Тогда
			ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
			СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
		КонецЕсли;               
	КонецЕсли;
	//--Валерий МЭТР: повышение	 
	Если ДокКонтекст.Вид() = "Реализация" Тогда
		ТекСкидка=ДокКонтекст.ДокОснование.Скидка;
		Если ДокКонтекст.ВыданоСоСкидкой = 0 Тогда
			ТекСкидка = 0;
		КонецЕсли;	
		СкидкаНакопление = СкидкаКонтрагента - ТекСкидка;
	Иначе	
		Если ДокКонтекст.ВыданоСоСкидкой = 0 Тогда
			ДокКонтекст.Скидка = 0;
		КонецЕсли;	
		СкидкаНакопление = СкидкаКонтрагента - ДокКонтекст.Скидка;
	КонецЕсли;
	
	флФиксСкидка 		= 0;
	флОтгрузкаПрошла    = 0;
	
	Если (ДокКонтекст.ДокОснование.Выбран() = 1) Тогда
		ТемпФиксСкидка 	= глПолучитьФиксированнуюСкидку(ДокКонтекст);
		
		Если (ПустоеЗначение(ТемпФиксСкидка) = 0) и (флОтгрузкаВДолг = 0) Тогда
			СкидкаНакопление = ТемпФиксСкидка; 
			флФиксСкидка = 1;
			ТекЗаявка 		= глПолучитьЗаявку(ДокКонтекст);
			ОтгрузкаПрошла 	= глПроверитьОтгрузкуПоАналитике(ТекЗаявка, ДокКонтекст);
			Если (ОтгрузкаПрошла > 0) или (ДокКонтекст.ДатаДок <= Дата("28.05.2016")) тогда
				флОтгрузкаПрошла    = 1;
			КонецЕсли;	                              
		КонецЕсли;	
	КонецЕсли;	
	  
	Если ДокКонтекст.Вид() = "Реализация" Тогда     
		флБонусы = ДокКонтекст.ДокОснование.флНачислитьБонусы;
	Иначе
		флБонусы = ДокКонтекст.флНачислитьБонусы;
	КонецЕсли;   
	
	//Если ВыданоСоСкидкой = 0 Тогда	//Запишем в копилку
	Если (СкидкаНакопление > 0) 
	и (
	(ДокКонтекст.Контрагент.НеНачислятьПроценты = 0) 
	или (ДокКонтекст.ДатаДок <= Дата("28.05.2016"))
	) 
	и (
	(флФиксСкидка = 0)
	или (флОтгрузкаПрошла    = 1)
	) Тогда
		
		_Итог	= 0;
		
		//Валерий МЭТР: деление скидки
		//Если ДатаДок >= Дата("27.04.10") Тогда
		ДокКонтекст.ВыбратьСтроки();
		
		Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
			ПроцентПоАкции		= глПолучитьПроцентпоАкции(ДокКонтекст.Номенклатура, ДокКонтекст.ДатаДок);
			Если флФиксСкидка = 1 Тогда
				_СуммаСкидки	= 0;
				_Итог			= СкидкаНакопление;
			ИначеЕсли ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) = 0 Тогда
				//СкидкаКарта
				Если флБонусы = 1 Тогда   
					ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
				Иначе
					ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
				КонецЕсли;    
				Если (ДокКонтекст.Вид() = "ЗаявкаКлиентаРозница") Тогда
					_ЦенаСоСкидкой	= ДокКонтекст.ЦенаСоСкидкой-ДокКонтекст.ЦенаСоСкидкой*((ТекПроцентСкидки)/100);  
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.ЦенаСоСкидкой;
				Иначе
					_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);  
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;  
				КонецЕсли;
				_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
				_ЦенаСоСкидкой	= _ЦенаСоСкидкой;	
			ИначеЕсли СкидкаКонтрагента >= ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) Тогда
				//СкидкаТовар
				
				//++Валерий МЭТР: механизм деления скидки
				ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) + ПовышениеСкидки;  
				Если (ДокКонтекст.Вид() <> "ЗаявкаКлиентаРозница") и (ДокКонтекст.Вид() <> "Реализация") Тогда
					Если ДокКонтекст.Повышение = 0 Тогда
						Если СкидкаКонтрагента <> 0 Тогда
							ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
						КонецЕсли; 
					КонецЕсли;     
				КонецЕсли;
				ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст, ПоделеннаяПриоритетнаяСкидка);
				//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);   
				Если (ДокКонтекст.Вид() = "ЗаявкаКлиентаРозница") Тогда  
					_ЦенаСоСкидкой	= ДокКонтекст.ЦенаСоСкидкой-ДокКонтекст.ЦенаСоСкидкой*(ПоделеннаяПриоритетнаяСкидка/100);
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.ЦенаСоСкидкой;
				Иначе	
					_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
				КонецЕсли;
				_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
				_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
				
			ИначеЕсли СкидкаКонтрагента < ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) Тогда
				Если (ДокКонтекст.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
					//СкидкаТовар
					
					//++Валерий МЭТР: механизм деления скидки
					ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) + ПовышениеСкидки; 
					Если ДокКонтекст.Вид() <> "ЗаявкаКлиентаРозница" Тогда
						Если ДокКонтекст.Повышение = 0 Тогда
							Если СкидкаКонтрагента <> 0 Тогда
								ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
							КонецЕсли; 
						КонецЕсли;                                            
					КонецЕсли;
					ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст, ПоделеннаяПриоритетнаяСкидка);
					//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
					Если (ДокКонтекст.Вид() = "ЗаявкаКлиентаРозница") Тогда  
						_ЦенаСоСкидкой	= ДокКонтекст.ЦенаСоСкидкой-ДокКонтекст.ЦенаСоСкидкой*((ПоделеннаяПриоритетнаяСкидка+ПроцентПоАкции)/100);
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.ЦенаСоСкидкой;
					Иначе	
						_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*((ПоделеннаяПриоритетнаяСкидка+ПроцентПоАкции)/100);
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
					КонецЕсли;
					_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
					_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
				Иначе
					//СкидкаКарта  
					Если флБонусы = 1 Тогда   
						ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
					Иначе
						ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
					КонецЕсли;
					Если (ДокКонтекст.Вид() = "ЗаявкаКлиентаРозница") Тогда
						_ЦенаСоСкидкой	= ДокКонтекст.ЦенаСоСкидкой-ДокКонтекст.ЦенаСоСкидкой*((ТекПроцентСкидки)/100);  
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.ЦенаСоСкидкой;
					Иначе
						_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);  
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;  
					КонецЕсли;
					_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
					_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
				КонецЕсли;
			КонецЕсли;
			
			_Итог=_СуммаСкидки+_Итог;
			Если (глПользователь.Код="Кожемякин") Тогда
				Сообщить(""+ДокКонтекст.НомерСтроки+" "+_СуммаСкидки);	
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат _Итог;
КонецФункции

Функция глУЗаявкиЕстьСчет(ТекДокумент) Экспорт
	текПроверка = 0;
	
	ПодчДокументы = СоздатьОбъект("Документ");	
	ПодчДокументы.ВыбратьПодчиненныеДокументы(,,ТекДокумент); 
	Пока ПодчДокументы.ПолучитьДокумент() = 1 Цикл
		Если (ПодчДокументы.Вид() = "СчетБнРозница") Тогда
			текПроверка = 1;
			Прервать;
		КонецЕсли;	
	КонецЦикла;

	Возврат текПроверка;	
КонецФункции	

Процедура глОбновитьСчетПоДаннымЗаявки(ТекДокумент) Экспорт
	Если (ТекДокумент.ДокОснование.Выбран() = 1) Тогда
		Если ТекДокумент.ДокОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
			Если ТекДокумент.Контрагент <> ТекДокумент.ДокОснование.Контрагент Тогда
				ТекДокумент.Контрагент = ТекДокумент.ДокОснование.Контраген;
			КонецЕсли;	
			Если ТекДокумент.ВыданоСоСкидкой <> ТекДокумент.ДокОснование.ВыданоСоСкидкой Тогда
				ТекДокумент.ВыданоСоСкидкой = ТекДокумент.ДокОснование.ВыданоСоСкидкой
			КонецЕсли;
			//ИначеЕсли ТекДокумент.Оплачено <> ТекДокумент.ДокОснование.Оплачено Тогда 
			//текПроверка = 0;
			//ИначеЕсли ТекДокумент.Скидка <> ТекДокумент.ДокОснование.Скидка Тогда
			//текПроверка = 0;
			Если ТекДокумент.Склад <> ТекДокумент.ДокОснование.Склад Тогда
				ТекДокумент.Склад = ТекДокумент.ДокОснование.Склад; 
			КонецЕсли;
			//ИначеЕсли ТекДокумент.РучнаяНаценка <> ТекДокумент.ДокОснование.РучнаяНаценка Тогда
			//текПроверка = 0;
			//ИначеЕсли ТекДокумент.ФиксСкидка <> ТекДокумент.ДокОснование.ФиксСкидка Тогда
			//текПроверка = 0;
			Если ТекДокумент.КонтрагентЮЛ <> ТекДокумент.ДокОснование.КонтрагентЮЛ Тогда
				ТекДокумент.КонтрагентЮЛ = ТекДокумент.ДокОснование.КонтрагентЮЛ;
			КонецЕсли;   
			
			Если ТекДокумент.Проект <> ТекДокумент.ДокОснование.Проект Тогда
				ТекДокумент.Проект = ТекДокумент.ДокОснование.Проект;
			КонецЕсли;
		
			Если ТекДокумент.флНачислитьБонусы <> ТекДокумент.ДокОснование.флНачислитьБонусы Тогда
				ТекДокумент.флНачислитьБонусы = ТекДокумент.ДокОснование.флНачислитьБонусы;
			КонецЕсли;
			//Если ТекДокумент.ОплаченоБонусом <> ТекДокумент.ДокОснование.ОплаченоБонусом Тогда
			//	текПроверка = 0;  
			//	РеквизитыДлаПроверки.ДобавитьЗначение("Оплачено бонусами");
			//КонецЕсли;
			ТекДокумент.УдалитьСтроки();
			ТекДокумент.ДокОснование.ВыбратьСтроки();
			Пока ТекДокумент.ДокОснование.ПолучитьСтроку() = 1 Цикл
				ТекДокумент.НоваяСтрока();
				ТекДокумент.Номенклатура 	= ТекДокумент.ДокОснование.Номенклатура;
				ТекДокумент.Количество 		= ТекДокумент.ДокОснование.Количество;
				ТекДокумент.Единица			= ТекДокумент.ДокОснование.Единица;
				ТекДокумент.Коэффициент		= ТекДокумент.ДокОснование.Коэффициент;
				ТекДокумент.Цена 			= ТекДокумент.ДокОснование.Цена;
				ТекДокумент.ЦенаСоСкидкой	= ТекДокумент.ДокОснование.ЦенаСоСкидкой;
				ТекДокумент.Сумма			= ТекДокумент.ДокОснование.Сумма;
				ТекДокумент.СтавкаНДС		= ТекДокумент.ДокОснование.СтавкаНДС;
				ТекДокумент.СуммаНДС		= ТекДокумент.ДокОснование.СуммаНДС;
				ТекДокумент.СтавкаНП		= ТекДокумент.ДокОснование.СтавкаНП;
				ТекДокумент.СуммаНП			= ТекДокумент.ДокОснование.СуммаНП;
				ТекДокумент.СуммаСкидки		= ТекДокумент.ДокОснование.СуммаСкидки;
				ТекДокумент.СуммаБезСкидки	= ТекДокумент.ДокОснование.СуммаБезСкидки;
				ТекДокумент.СуммаНДСбезСкидки = ТекДокумент.ДокОснование.СуммаНДСбезСкидки;
			КонецЦикла;
		КонецЕсли;	
	КонецЕсли;		
КонецПроцедуры	

Функция глПроверитьСовпадениеРеквизитовСчетаСЗаявкой(ТекДокумент, РеквизитыДлаПроверки) Экспорт
	текПроверка = 1;
	
	Если (ТекДокумент.ДокОснование.Выбран() = 1) и (ТекДокумент.ДатаДок >= Дата("01.04.2017")) Тогда
		Если ТекДокумент.ДокОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
			Если ТекДокумент.Контрагент <> ТекДокумент.ДокОснование.Контрагент Тогда
				текПроверка = 0;
				РеквизитыДлаПроверки.ДобавитьЗначение("Покупатель");
			КонецЕсли;	
			Если ТекДокумент.ВыданоСоСкидкой <> ТекДокумент.ДокОснование.ВыданоСоСкидкой Тогда
				текПроверка = 0;    
				РеквизитыДлаПроверки.ДобавитьЗначение("Выдано со скидкой");
			КонецЕсли;
			//ИначеЕсли ТекДокумент.Оплачено <> ТекДокумент.ДокОснование.Оплачено Тогда 
				//текПроверка = 0;
			//ИначеЕсли ТекДокумент.Скидка <> ТекДокумент.ДокОснование.Скидка Тогда
				//текПроверка = 0;
			Если ТекДокумент.Склад <> ТекДокумент.ДокОснование.Склад Тогда
				текПроверка = 0;  
				РеквизитыДлаПроверки.ДобавитьЗначение("Склад");
			КонецЕсли; 
			//Если ТекДокумент.Проект <> ТекДокумент.ДокОснование.Проект Тогда
			//	текПроверка = 0;  
			//	РеквизитыДлаПроверки.ДобавитьЗначение("Проект");
			//КонецЕсли;
			//ИначеЕсли ТекДокумент.РучнаяНаценка <> ТекДокумент.ДокОснование.РучнаяНаценка Тогда
				//текПроверка = 0;
			//ИначеЕсли ТекДокумент.ФиксСкидка <> ТекДокумент.ДокОснование.ФиксСкидка Тогда
				//текПроверка = 0;
			Если ТекДокумент.КонтрагентЮЛ <> ТекДокумент.ДокОснование.КонтрагентЮЛ Тогда
				текПроверка = 0;
				РеквизитыДлаПроверки.ДобавитьЗначение("Контрагент");
			КонецЕсли;
			Если ТекДокумент.флНачислитьБонусы <> ТекДокумент.ДокОснование.флНачислитьБонусы Тогда
				текПроверка = 0;
				РеквизитыДлаПроверки.ДобавитьЗначение("Флаг начислить бонусы");
			КонецЕсли;
			//Если ТекДокумент.ОплаченоБонусом <> ТекДокумент.ДокОснование.ОплаченоБонусом Тогда
			//	текПроверка = 0;  
			//	РеквизитыДлаПроверки.ДобавитьЗначение("Оплачено бонусами");
			//КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	       
	Возврат текПроверка;
КонецФункции	

Функция  ПроверитьСкидкуПоОграничениюНаБонусы(Знач ДокКонтекст, Знач ПоделеннаяПриоритетнаяСкидка) 
	Если ДокКонтекст.Вид() = "Реализация" Тогда
		Если ДокКонтекст.ДокОснование.флНачислитьБонусы = 1 Тогда 
			Если ПоделеннаяПриоритетнаяСкидка <= 7 Тогда
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением7;	
			ИначеЕсли (ПоделеннаяПриоритетнаяСкидка >= 10) и (ПоделеннаяПриоритетнаяСкидка <= 12) Тогда          
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением1012;	
			Иначе	
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением;	
			КонецЕсли;	
		КонецЕсли;
	Иначе	
		Если ДокКонтекст.флНачислитьБонусы = 1 Тогда 
			Если ПоделеннаяПриоритетнаяСкидка <= 7 Тогда
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением7;	
			ИначеЕсли (ПоделеннаяПриоритетнаяСкидка >= 10) и (ПоделеннаяПриоритетнаяСкидка <= 12) Тогда          
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением1012;	
			Иначе	
				ПоделеннаяПриоритетнаяСкидка = ПоделеннаяПриоритетнаяСкидка + Константа.ПроцентБонусаПоТоварамСОграничением;	
			КонецЕсли;	
		КонецЕсли;    
	КонецЕсли;
	Возврат ПоделеннаяПриоритетнаяСкидка;
КонецФункции						
                
Функция глПолучитьОплатуПродажи(Знач ДокПродажи, бонусы = 0) Экспорт   
	Если бонусы = 0 Тогда
		//Оплачено = ДокПродажи.Оплачено - ДокПродажи.ОплаченоБонусом; 
		Оплачено = ДокПродажи.Оплачено;
	Иначе
		Оплачено = ДокПродажи.ОплаченоБонусом;
	КонецЕсли;	     
	
	Возврат Оплачено;
КонецФункции	

Функция глПолучитьДанныеБалловДляЧека(ДокКонтекст) Экспорт
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Бонусы;
	
	//ВремРегистры = СоздатьОбъект("Регистры");
	//
	//Если ДокКонтекст.ИтогиАктуальны()=0 Тогда 
	//	ВремРегистры.Актуальность(1);
	//	ВремРегистры.РассчитатьРегистрыНа(ДокКонтекст.ТекущийДокумент());
	//КонецЕсли;
	    
	ОтборДок = ДокКонтекст.ТекущийДокумент();
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	//|Период с ДатаДок по ДатаДок;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
	|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Группировка ТекущийДокумент;
	|Условие(ТекущийДокумент 	= ОтборДок);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|";//}}ЗАПРОС
	
	БалловНачислено = 0;
	БалловПотрачено = 0;
	БалловВсего = 0;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл  
			БалловНачислено = Запрос.СуммаРубПриход;
			БалловПотрачено = Запрос.СуммаРубРасход;
			БалловВсего 	= Запрос.СуммаРубКонОст;	
		КонецЦикла;
	КонецЕсли;	
	
	ПараметрыБонуса = СоздатьОбъект("СписокЗначений");
	ПараметрыБонуса.Установить("БалловНачислено"    , БалловНачислено);
	ПараметрыБонуса.Установить("БалловПотрачено"    , БалловПотрачено);
	ПараметрыБонуса.Установить("БалловВсего"        , БалловВсего);
	
	Возврат ПараметрыБонуса;
КонецФункции
                    
Процедура глПолучитьАналитикуПриЗаписи(ДокКонтекст) Экспорт 
	Если (ДокКонтекст.Вид() = "СтрокаВыпискиПриход") Тогда
	    Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			Если ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница" Тогда 
				ДокКонтекст.АналитикаСчетБезналПроценты = ДокКонтекст.ДокОснование.АналитикаСчетБезналПроценты;
				
				Если ПустоеЗначение(ДокКонтекст.АналитикаСчетБезналПроценты) = 1 Тогда
					ДокКонтекст.АналитикаСчетБезналПроценты = глПолучитьАналитику(ДокКонтекст, "АналитикаСчетБезналПроценты")
				КонецЕсли;
			ИначеЕсли ДокКонтекст.ДокОснование.Вид() = "Реализация" Тогда 
				Если ДокКонтекст.ДокОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда 
					ДокКонтекст.АналитикаСчетБезналПроценты = ДокКонтекст.ДокОснование.АналитикаСчетБезналПроценты;
					
					Если ПустоеЗначение(ДокКонтекст.АналитикаСчетБезналПроценты) = 1 Тогда
						ДокКонтекст.АналитикаСчетБезналПроценты = глПолучитьАналитику(ДокКонтекст, "АналитикаСчетБезналПроценты")
					КонецЕсли;		
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ((ДокКонтекст.Вид() = "ПолучениеЗалога_Розница") и (ДокКонтекст.ДатаДок >= Дата("01.04.2017"))) Тогда
		Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			Если ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница" Тогда 
				ДокКонтекст.ВыбратьСтроки();
				Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
					ДокКонтекст.АналитикаСчетБезнал = ДокКонтекст.ДокОснование.АналитикаСчетБезналПроценты;
					
					Если ПустоеЗначение(ДокКонтекст.АналитикаСчетБезнал) = 1 Тогда
						ДокКонтекст.АналитикаСчетБезнал = глПолучитьАналитику(ДокКонтекст.ДокОснование, "АналитикаСчетБезналПроценты")
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры	
      
Функция глПолучитьЗалогКОплатеПоАналитике(Аналитика, ДокОснованиеПроверки) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремЗалогиОплатаВозврат          = ВремРегистры.ЗалогиОплатаВозврат;
	ВремЗалогиОплатаВозврат.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокОснованиеПроверки.ПолучитьПозицию() Тогда
			ВремРегистры.РассчитатьРегистрыНа(ДокОснованиеПроверки.ТекущийДокумент());
		Иначе
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
		КонецЕсли;
	КонецЕсли;
	
	ТекущийЗалог = ВремЗалогиОплатаВозврат.СводныйОстаток(Аналитика,Перечисление.СтатусыЗалога.КОплате,"Сумма");
	
	Возврат ТекущийЗалог;

КонецФункции

Процедура глДвижениеЗалогиОплатаВозврат(ДокКонтекст) Экспорт   
	Если (ДокКонтекст.Вид() = "ПолучениеЗалога_Розница")
	и (ДокКонтекст.ДатаДок >= Дата("01.04.2017")) Тогда	
		Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			Если (ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница") Тогда	
				
				ЗалогиОплатаВозврат = ДокКонтекст.Регистр.ЗалогиОплатаВозврат;
				Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
				
				ДокКонтекст.ВыбратьСтроки();
				Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл 
					
					//ТекСумма = глПолучитьЗалогКОплатеПоАналитике(ДокКонтекст.АналитикаСчетБезнал, ДокКонтекст);
					//
					//ТекСумма = 0 - ТекСумма;
					
					ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КОплате;
					ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезнал; 
					ЗалогиОплатаВозврат.Сумма 		 			= ДокКонтекст.Сумма;
					ЗалогиОплатаВозврат.ДвижениеПриходВыполнить();
					
					//Если ТекСумма <= 0 Тогда
					//	Продолжить;
					//КонецЕсли;	
					//
					//ТекСуммаЗалога = ДокКонтекст.Сумма;
					//
					//Если ТекСуммаЗалога > ТекСумма Тогда
					//	СуммаЗалога 	= ТекСумма;
					//	ТекСумма  		= 0;
					//ИначеЕсли ТекСуммаЗалога <= ТекСумма Тогда
					//	СуммаЗалога 	= ТекСуммаЗалога;
					//	ТекСумма  		= 0;
					//КонецЕсли;
					//
					//ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КВозврату;
					//ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезнал; 
					//ЗалогиОплатаВозврат.Сумма 		 			= СуммаЗалога;
					//ЗалогиОплатаВозврат.ДвижениеПриходВыполнить();
					//
					//Покупатели_Розница.Контрагент				= ДокКонтекст.Контрагент;
					//Покупатели_розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Залоги;
					//Покупатели_Розница.Магазин					= ДокКонтекст.Склад_получения;
					//Покупатели_Розница.КредДокумент				= ДокКонтекст.Документ_;
					//Покупатели_Розница.СуммаРуб					= СуммаЗалога;
					//Покупатели_розница.АналитикаПродажи 		= "";
					//Покупатели_розница.АналитикаСчетБезнал 		= "";
					//Покупатели_Розница.ДвижениеПриходВыполнить();
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;	 
	ИначеЕсли (ДокКонтекст.Вид() = "СтрокаВыпискиПриход") 
	и (ДокКонтекст.ДатаДок >= Дата("01.04.2017")) Тогда	
		Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			Если (ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница") или (ДокКонтекст.ДокОснование.Вид() = "Реализация") Тогда
				ЗалогиОплатаВозврат = ДокКонтекст.Регистр.ЗалогиОплатаВозврат;
				Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
				
				ТекСуммаОплаты = ДокКонтекст.Сумма;
				
				//ТекСумма = глПолучитьЗалогКОплатеПоАналитике(ДокКонтекст.АналитикаСчетБезналПроценты, ДокКонтекст);
				
				ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КОплате;
				ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезналПроценты; 
				ЗалогиОплатаВозврат.Сумма 		 			= ТекСуммаОплаты;
				ЗалогиОплатаВозврат.ДвижениеРасходВыполнить();
				
				//Если ТекСуммаОплаты > ТекСумма Тогда
				//	СуммаЗалога 	= ТекСумма;
				//	ТекСуммаОплаты  = ТекСуммаОплаты - ТекСумма;
				//ИначеЕсли ТекСуммаОплаты <= ТекСумма Тогда
				//	СуммаЗалога 	= ТекСуммаОплаты;
				//	ТекСуммаОплаты  = 0;
				//КонецЕсли;
				//
				//Если СуммаЗалога > 0 Тогда
				//	ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КВозврату;
				//	ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезналПроценты; 
				//	ЗалогиОплатаВозврат.Сумма 		 			= СуммаЗалога;
				//	ЗалогиОплатаВозврат.ДвижениеПриходВыполнить(); 
				//	
				//	Покупатели_Розница.Контрагент				= ДокКонтекст.АналитикаСчетБезналПроценты.КонтрагентЮЛ;
				//	Покупатели_розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Залоги;
				//	Покупатели_Розница.Магазин					= ДокКонтекст.АналитикаСчетБезналПроценты.Магазин;
				//	Покупатели_Розница.КредДокумент				= ДокКонтекст.ДокОснование;
				//	Покупатели_Розница.СуммаРуб					= СуммаЗалога;
				//	Покупатели_розница.АналитикаПродажи 		= "";
				//	Покупатели_розница.АналитикаСчетБезнал 	    = "";
				//	Покупатели_Розница.ДвижениеПриходВыполнить();
				//КонецЕсли;  
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДокКонтекст.Вид() = "ВозвратЗалога_Розница" Тогда   
		//ЗалогиОплатаВозврат = ДокКонтекст.Регистр.ЗалогиОплатаВозврат;
		//
		//ДокКонтекст.ВыбратьСтроки();
		//Пока ДокКонтекст.ПолучитьСтроку()=1 Цикл  
		//	Если ДокКонтекст.ВозвратЗалога = 1 Тогда
		//		ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КВозврату;
		//		ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезнал; 
		//		ЗалогиОплатаВозврат.Сумма 		 			= ДокКонтекст.Сумма;
		//		ЗалогиОплатаВозврат.ДвижениеРасходВыполнить();
		//	КонецЕсли;
		//	Если ДокКонтекст.ВозвратКоплате = 1 Тогда
		//		ЗалогиОплатаВозврат.Статус					= Перечисление.СтатусыЗалога.КОплате;
		//		ЗалогиОплатаВозврат.АналитикаСчетБезнал		= ДокКонтекст.АналитикаСчетБезнал; 
		//		ЗалогиОплатаВозврат.Сумма 		 			= ДокКонтекст.Сумма;
		//		ЗалогиОплатаВозврат.ДвижениеРасходВыполнить();
		//	КонецЕсли;
		//КонецЦикла;
	КонецЕсли;	
КонецПроцедуры	

Процедура глПровестиПриходОплаты(ДокКонтекст) Экспорт 
	
	Если ДокКонтекст.Вид() = "СтрокаВыпискиПриход" Тогда
		ТекСумма = ДокКонтекст.Сумма;  
		
		Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
		
		Покупатели_Розница.Контрагент		 			= ДокКонтекст.АналитикаСчетБезналПроценты.Контрагент;
		Покупатели_розница.ВидВзаимодействия 			= Перечисление.ВидВзаимодействия.Оплата;
		Покупатели_Розница.Магазин			 			= ДокКонтекст.АналитикаСчетБезналПроценты.Магазин;
		Покупатели_Розница.АналитикаСчетБезнал		 	= ДокКонтекст.АналитикаСчетБезналПроценты; 
		Покупатели_Розница.КредДокумент		 			= ""; 
		Покупатели_Розница.АналитикаПродажи				= "";
		Покупатели_Розница.СуммаРуб 		 			= ТекСумма;
		Покупатели_Розница.ДвижениеРасходВыполнить();
		
	ИначеЕсли (ДокКонтекст.Вид() = "ПолучениеЗалога_Розница")
	и (ДокКонтекст.ДатаДок >= Дата("01.04.2017")) Тогда	
		Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			Если ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница" Тогда	
				Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
				
				ДокКонтекст.ВыбратьСтроки();
				Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
					ТекСумма = ДокКонтекст.Сумма;
					
					Покупатели_Розница.Контрагент		 			= ДокКонтекст.АналитикаСчетБезнал.Контрагент;
					Покупатели_розница.ВидВзаимодействия 			= Перечисление.ВидВзаимодействия.Оплата;
					Покупатели_Розница.Магазин			 			= ДокКонтекст.АналитикаСчетБезнал.Магазин;
					Покупатели_Розница.АналитикаСчетБезнал		 	= ДокКонтекст.АналитикаСчетБезнал; 
					Покупатели_Розница.КредДокумент		 			= ""; 
					Покупатели_Розница.АналитикаПродажи				= "";
					Покупатели_Розница.СуммаРуб 		 			= ТекСумма;
					Покупатели_Розница.ДвижениеРасходВыполнить();
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли (ДокКонтекст.Вид() = "ВозвратЗалога_Розница")
	и (ДокКонтекст.ДатаДок >= Дата("01.04.2017")) Тогда	
		//Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
			//Если ДокКонтекст.ДокОснование.Вид() = "СчетБнРозница" Тогда	
				Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
				
				ДокКонтекст.ВыбратьСтроки();
				Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
					Если ДокКонтекст.ВозвратЗалога = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ТекСумма = ДокКонтекст.Сумма;
					
					Покупатели_Розница.Контрагент		 			= ДокКонтекст.АналитикаСчетБезнал.Контрагент;
					Покупатели_розница.ВидВзаимодействия 			= Перечисление.ВидВзаимодействия.Оплата;
					Покупатели_Розница.Магазин			 			= ДокКонтекст.АналитикаСчетБезнал.Магазин;
					Покупатели_Розница.АналитикаСчетБезнал		 	= ДокКонтекст.АналитикаСчетБезнал; 
					Покупатели_Розница.КредДокумент		 			= ""; 
					Покупатели_Розница.АналитикаПродажи				= "";
					Покупатели_Розница.СуммаРуб 		 			= ТекСумма;
					Покупатели_Розница.ДвижениеПриходВыполнить();
				КонецЦикла;	
			//КонецЕсли;
		//КонецЕсли;
	Иначе
		ТекСумма = 0;
	КонецЕсли;	
	
	Если ТекСумма <> 0 Тогда
		 
	КонецЕсли;
	
КонецПроцедуры	

Процедура глПровестиЗачетБонуса(ДокКонтекст, СписаноЗалогов = 0, ЕстьОшибки) Экспорт
	Если ДокКонтекст.Вид()="РасходнаяНакладнаяРозница" Тогда
		Если ДокКонтекст.ОплаченоБонусом <> 0 Тогда
			ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Бонусы;
			
			ВремРегистры = СоздатьОбъект("Регистры");
			
			ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
			ВремПокупатели_розница.ВременныйРасчет(1);	
			Если ВремРегистры.Актуальность() = 0 Тогда
				ВремРегистры.Актуальность(1);
				Если ПолучитьПозициюТА() > ДокКонтекст.ПолучитьПозицию() Тогда
					ВремРегистры.РассчитатьРегистрыНа(ДокКонтекст.ТекущийДокумент());
				Иначе
					ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
				КонецЕсли;
			КонецЕсли;
			
			ТекКонтр 	= ДокКонтекст.Контрагент;
			ТекДата 	= ДокКонтекст.ДатаДок;
			Запрос 		= СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(Сформировать)
			|Период с ТекДата по ТекДата;
			|Контрагент 		= Регистр.Покупатели_розница.Контрагент;
			|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
			|Магазин 			= Регистр.Покупатели_розница.Магазин;
			|КредДокумент 		= Регистр.Покупатели_розница.КредДокумент;
			|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
			//|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
			|АналитикаПродажи 	= Регистр.Покупатели_розница.АналитикаПродажи;
			|АналитикаСчетБезнал 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;
			|Функция СуммаРубКонОст = КонОст(СуммаРуб);
			|Группировка Магазин;
			|Группировка КредДокумент;
			|Группировка АналитикаПродажи;
			|Условие(Контрагент 		= ТекКонтр);
			|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
			|";//}}ЗАПРОС
			
			// Если ошибка в запросе, то выход из процедуры
			//СуммаСписанияБонусов = Мин(ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"))-СписаноЗалогов,ДокКонтекст.ОплаченоБонусом);  
			СуммаСписанияБонусов = ДокКонтекст.ОплаченоБонусом;
			
			Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
			
			Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
				Пока Запрос.Группировка(1) = 1 Цикл
					Пока Запрос.Группировка(2) = 1 Цикл 
						Пока Запрос.Группировка(3) = 1 Цикл
							Если (Запрос.СуммаРубКонОст <= 0) или (ПустоеЗначение(Запрос.КредДокумент) = 1) Тогда
								Продолжить;   
							КонецЕсли;
							
							Если СуммаСписанияБонусов <= 0 Тогда 
								Прервать;
							КонецЕсли;
							
							Покупатели_Розница.Контрагент				= Запрос.Контрагент;
							Покупатели_Розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Бонусы;
							Покупатели_Розница.Магазин					= Запрос.Магазин;
							Покупатели_Розница.КредДокумент				= Запрос.КредДокумент.ТекущийДокумент(); 
							Покупатели_Розница.АналитикаПродажи 		= Запрос.АналитикаПродажи;
							Покупатели_Розница.АналитикаСчетБезнал 		= Запрос.АналитикаСчетБезнал; 
							Покупатели_Розница.ФормаОплаты 				= "";
							Если Запрос.СуммаРубКонОст >= СуммаСписанияБонусов Тогда
								Покупатели_Розница.СуммаРуб	= СуммаСписанияБонусов;
								СуммаСписанияБонусов = 0;
							Иначе 
								Покупатели_Розница.СуммаРуб	= Запрос.СуммаРубКонОст;
								СуммаСписанияБонусов = СуммаСписанияБонусов - Запрос.СуммаРубКонОст;
							КонецЕсли;	
							
							Покупатели_Розница.ДвижениеРасходВыполнить(); 
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
			Если СуммаСписанияБонусов > 0 Тогда
				ЕстьОшибки = 1;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	
   
Функция глПровестиЗачетЗалогаИюль(ДокКонтекст)  
	мЗаявкаКлиента = "";
	Если ДокКонтекст.ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда
		мЗаявкаКлиента	= ДокКонтекст.ДокОснование;
	Иначе
		мЗаявкаКлиента 	= глПолучитьЗаявку(ДокКонтекст);
	КонецЕсли;    
	     
	Если (ДокКонтекст.Вид()="РасходнаяНакладнаяРозница") Тогда
		Если (ДокКонтекст.ДатаДок >= Дата("01.07.2017")) Тогда 
			Если ПустоеЗначение(мЗаявкаКлиента) = 1 Тогда 
				Возврат 0;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Залоги;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	
	Если ДокКонтекст.ИтогиАктуальны()=0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ДокКонтекст.ТекущийДокумент());
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	//|Период с ДатаДок по ДатаДок;
	|Контрагент 		= Регистр.Покупатели_розница.Контрагент;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Магазин 			= Регистр.Покупатели_розница.Магазин;
	|КредДокумент 		= Регистр.Покупатели_розница.КредДокумент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;   
	|ФормаОплаты        = Регистр.Покупатели_розница.ФормаОплаты;
	|АналитикаСчетБезнал        = Регистр.Покупатели_розница.АналитикаСчетБезнал;
	|АналитикаПродажи        = Регистр.Покупатели_розница.АналитикаПродажи;
	//|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	//|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	//|Функция СуммаРубПриход = Приход(СуммаРуб);
	//|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Группировка Магазин;
	|Группировка КредДокумент;
	|Группировка АналитикаСчетБезнал;
	|Группировка АналитикаПродажи;
	|Группировка ФормаОплаты;
	//|Без итогов;
	//|Условие(Контрагент 		= Контрагент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|Условие(КредДокумент 		= мЗаявкаКлиента);
	|";//}}ЗАПРОС
	
	// Если ошибка в запросе, то выход из процедуры
	СуммаСписанияЗалогов = ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"));  
	СписаноЗалогов = 0;            
	Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл
			Пока Запрос.Группировка(2) = 1 Цикл 
				Пока Запрос.Группировка(3) = 1 Цикл
					Пока Запрос.Группировка(4) = 1 Цикл
						Пока Запрос.Группировка(5) = 1 Цикл
							Если Запрос.СуммаРубКонОст <= 0 Тогда
								Продолжить;   
							КонецЕсли;
							
							Если СуммаСписанияЗалогов <= 0 Тогда 
								Прервать;
							КонецЕсли;
							
							
							
							Покупатели_Розница.Контрагент				= Запрос.Контрагент;
							Покупатели_Розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Залоги;
							Покупатели_Розница.Магазин					= Запрос.Магазин;
							Покупатели_Розница.КредДокумент				= мЗаявкаКлиента; 
							Покупатели_Розница.АналитикаПродажи 		= "";
							Покупатели_Розница.АналитикаСчетБезнал 		= ""; 
							Покупатели_Розница.ФормаОплаты 				= Запрос.ФормаОплаты;
							Если Запрос.СуммаРубКонОст >= СуммаСписанияЗалогов Тогда
								Покупатели_Розница.СуммаРуб	= СуммаСписанияЗалогов;
								СписаноЗалогов = СуммаСписанияЗалогов;
								СуммаСписанияЗалогов = 0;
							Иначе 
								Покупатели_Розница.СуммаРуб	= Запрос.СуммаРубКонОст;
								СуммаСписанияЗалогов 	= СуммаСписанияЗалогов 	- Запрос.СуммаРубКонОст;
								СписаноЗалогов 			= СписаноЗалогов 		+ Запрос.СуммаРубКонОст;
							КонецЕсли;	
							
							Покупатели_Розница.ДвижениеРасходВыполнить();
						КонецЦикла;
					КонецЦикла;	
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписаноЗалогов;
	//Если (Залог)>0 Тогда	//Значит есть некоторый залог и его надо погасить
	//	Регистр.Покупатели_Розница.Контрагент			= Контрагент;
	//	Регистр.Покупатели_Розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Залоги;
	//	Регистр.Покупатели_Розница.Магазин				= Склад;
	//	Регистр.Покупатели_Розница.КредДокумент			= ДокОснование.ТекущийДокумент();
	//	Регистр.Покупатели_Розница.АналитикаПродажи 	= "";
	//	Регистр.Покупатели_Розница.АналитикаСчетБезнал 	= "";
	//	Регистр.Покупатели_Розница.СуммаРуб				= Залог;
	//	Регистр.Покупатели_Розница.ДвижениеРасходВыполнить();
	//КонецЕсли;
КонецФункции

Функция глПровестиЗачетЗалога(ДокКонтекст) Экспорт 
	
	Если (ДокКонтекст.ДатаДок >= Дата("01.07.2017")) Тогда 
		Возврат глПровестиЗачетЗалогаИюль(ДокКонтекст);	
	КонецЕсли; 
	
	мЗаявкаКлиента = "";
	Если ДокКонтекст.ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда
		мЗаявкаКлиента	= ДокКонтекст.ДокОснование;
	Иначе
		мЗаявкаКлиента 	= глПолучитьЗаявку(ДокКонтекст);
	КонецЕсли;    
	     
	Если (ДокКонтекст.Вид()="РасходнаяНакладнаяРозница") Тогда
		Если (ДокКонтекст.ДатаДок >= Дата("01.09.2017")) Тогда 
			Если ПустоеЗначение(мЗаявкаКлиента) = 1 Тогда 
				Возврат 0;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Залоги;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	
	Если ДокКонтекст.ИтогиАктуальны()=0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ДокКонтекст.ТекущийДокумент());
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	//|Период с ДатаДок по ДатаДок;
	|Контрагент 		= Регистр.Покупатели_розница.Контрагент;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Магазин 			= Регистр.Покупатели_розница.Магазин;
	|КредДокумент 		= Регистр.Покупатели_розница.КредДокумент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
	//|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	//|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	//|Функция СуммаРубПриход = Приход(СуммаРуб);
	//|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Группировка Магазин;
	//|Без итогов;
	//|Группировка КредДокумент;
	|Условие(Контрагент 		= Контрагент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|Условие(КредДокумент 		= мЗаявкаКлиента);
	|";//}}ЗАПРОС
	
	// Если ошибка в запросе, то выход из процедуры
	СуммаСписанияЗалогов = ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС"));  
	СписаноЗалогов = 0;            
	Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл
			//Пока Запрос.Группировка(2) = 1 Цикл
				Если Запрос.СуммаРубКонОст <= 0 Тогда
					Продолжить;   
				КонецЕсли;
				
				Если СуммаСписанияЗалогов <= 0 Тогда 
					Прервать;
				КонецЕсли;
				          
				
				
				Покупатели_Розница.Контрагент				= Запрос.Контрагент;
				Покупатели_Розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Залоги;
				Покупатели_Розница.Магазин					= Запрос.Магазин;
				Покупатели_Розница.КредДокумент				= мЗаявкаКлиента; 
				Покупатели_Розница.АналитикаПродажи 		= "";
				Покупатели_Розница.АналитикаСчетБезнал 		= "";
				Если Запрос.СуммаРубКонОст >= СуммаСписанияЗалогов Тогда
					Покупатели_Розница.СуммаРуб	= СуммаСписанияЗалогов;
					СписаноЗалогов = СуммаСписанияЗалогов;
					СуммаСписанияЗалогов = 0;
				Иначе 
					Покупатели_Розница.СуммаРуб	= Запрос.СуммаРубКонОст;
					СуммаСписанияЗалогов 	= СуммаСписанияЗалогов 	- Запрос.СуммаРубКонОст;
					СписаноЗалогов 			= СписаноЗалогов 		+ Запрос.СуммаРубКонОст;
				КонецЕсли;	
				
				Покупатели_Розница.ДвижениеРасходВыполнить();
			//КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписаноЗалогов;
	//Если (Залог)>0 Тогда	//Значит есть некоторый залог и его надо погасить
	//	Регистр.Покупатели_Розница.Контрагент			= Контрагент;
	//	Регистр.Покупатели_Розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Залоги;
	//	Регистр.Покупатели_Розница.Магазин				= Склад;
	//	Регистр.Покупатели_Розница.КредДокумент			= ДокОснование.ТекущийДокумент();
	//	Регистр.Покупатели_Розница.АналитикаПродажи 	= "";
	//	Регистр.Покупатели_Розница.АналитикаСчетБезнал 	= "";
	//	Регистр.Покупатели_Розница.СуммаРуб				= Залог;
	//	Регистр.Покупатели_Розница.ДвижениеРасходВыполнить();
	//КонецЕсли;
КонецФункции	
              
Процедура глВернутьОплаченныеБонусы(ДокКонтекст)     
	Если ДокКонтекст.ВернутьБонусов <> 0 Тогда 
		Покупатели_Розница 					= ДокКонтекст.Регистр.Покупатели_Розница;
		Покупатели_Розница.Контрагент		= ДокКонтекст.Контрагент;  
		Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Бонусы;
		Покупатели_Розница.Магазин			= ДокКонтекст.Склад;
		Покупатели_Розница.КредДокумент		= ДокКонтекст.ТекущийДокумент();
		Покупатели_Розница.АналитикаПродажи = ДокКонтекст.АналитикаПроценты; 
		Покупатели_Розница.СуммаРуб			= ДокКонтекст.ВернутьБонусов;   
		Покупатели_Розница.ДвижениеПриходВыполнить();
	КонецЕсли;	
КонецПроцедуры	

Процедура глОтразитьПроцентыИБонусы(ДокКонтекст, флНВБ = 0) Экспорт 
	Если ДокКонтекст.Вид() = "ВозвратОтПокупателя_Розница" Тогда
		Если ДокКонтекст.ДокОснование.Вид()="РасходнаяНакладнаяРозница" тогда
			  
			глВернутьОплаченныеБонусы(ДокКонтекст);
			    
			Если флНВБ = 1 Тогда
				Возврат;
			КонецЕсли;
			
			ВсегоОплатить				= ДокКонтекст.ДокОснование.Итог("Сумма")+?(ДокКонтекст.ДокОснование.СуммаВклНП=1,0,ДокКонтекст.ДокОснование.Итог("СуммаНП"))+?(ДокКонтекст.ДокОснование.СуммаВклНДС=1,0,ДокКонтекст.ДокОснование.Итог("СуммаНДС")) - ДокКонтекст.ДокОснование.залог;
			ВсегоОплачено   			= ДокКонтекст.ДокОснование.Оплачено + ДокКонтекст.ДокОснование.залог + ДокКонтекст.ДокОснование.ОплаченоБонусом;
			
			Если ((ВсегоОплатить - ВсегоОплачено) > 0) и (ДокКонтекст.ДокОснование.ДатаДок >= Дата("01.02.17")) и (ДокКонтекст.ДатаДок <= Дата("24.04.17")) Тогда
				Возврат;
			КонецЕсли;	
			      
			ПроцентовНачислено 	= глПолучитьНачисленныйПроцентПоАналитике(ДокКонтекст.ДокОснование.АналитикаПроценты, ДокКонтекст.ДокОснование);
			ОтгрузкиНачислено 	= глПолучитьНачисленуюОтгрузкуПоАналитике(ДокКонтекст.ДокОснование.АналитикаПроценты, ДокКонтекст.ДокОснование); 
			БонусовНачислено 	= глПолучитьНачисленныйБонусПоАналитике(ДокКонтекст.ДокОснование.АналитикаПроценты, ДокКонтекст.ДокОснование, ДокКонтекст);
			
			Если ((ПроцентовНачислено = 0) и (ОтгрузкиНачислено = 0) и (БонусовНачислено = 0)) и (ДокКонтекст.ДатаДок >= Дата("24.04.17")) Тогда
				Возврат;
			КонецЕсли;
			
			Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
			//Тут спишем процент, если уже была выдача, то мы спишем остаток.
			//Если ПустоеЗначение(АналитикаПроценты) = 0 Тогда
			//	ЕстьПроценты = глБылиПроцентыПоАналитике(АналитикаПроценты);
			//КонецЕсли;    
			Если ДокКонтекст.ДатаДок < Дата("25.10.16") Тогда
				Если ((ДокКонтекст.ДокОснование.ВыданоСоСкидкой = 0) и (ДокКонтекст.ДокОснование.Проведен() = 1)) 
				и 	 (ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДокОснование.ДатаДок)<>0) Тогда
					//ВремКредиты.УстановитьЗначениеФильтра("КредДокумент",ДокКонтекст.ДокОснование);
					//ОстПроцента = ВремКредиты.СводнсыйОстаток(Контрагент,Перечисление.ВидВзаимодействия.Проценты,Склад,ДокОснование.ТекущийДокумент(),"СуммаРуб");	//Остаток процентов по накладной
					//Если ОстПроцента>0 Тогда	//Спишем из копилки данные, т.к. товар возвращается нам
					ОбщПроцент	= ДокКонтекст.итог("Сумма")/100*ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДокОснование.ДатаДок);
					Покупатели_Розница.Контрагент			= ДокКонтекст.Контрагент;
					Покупатели_Розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Проценты;
					Если ДокКонтекст.ДатаДок >= Дата("01.07.2017") Тогда
						Покупатели_Розница.Магазин				= ДокКонтекст.ДокОснование.Склад;
					Иначе
						Покупатели_Розница.Магазин				= ДокКонтекст.Склад;
					КонецЕсли;
					Покупатели_Розница.КредДокумент			= ДокКонтекст.ДокОснование.ТекущийДокумент();
					Покупатели_Розница.СуммаРуб				= ОбщПроцент;//?(ОстПроцента-ОбщПроцент>0,ОбщПроцент,ОстПроцента);
					Покупатели_розница.АналитикаПродажи		= ДокКонтекст.АналитикаПроценты;
					//Покупатели_Розница.ДвижениеРасходВыполнить();
					//КонецЕсли;
				ИначеЕсли ПустоеЗначение(ДокКонтекст.АналитикаПроценты) = 0 Тогда
					Если (ДокКонтекст.АналитикаПроценты.ВыданоСоСкидкой = 0) и (ДокКонтекст.АналитикаПроценты.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДокОснование.ДатаДок)<>0) Тогда
						ОбщПроцент	= ДокКонтекст.итог("Сумма")/100*ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДокОснование.ДатаДок);
						Покупатели_Розница.Контрагент			= ДокКонтекст.Контрагент;
						Покупатели_Розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Проценты;
						Если ДокКонтекст.ДатаДок >= Дата("01.07.2017") Тогда
							Покупатели_Розница.Магазин				= ДокКонтекст.ДокОснование.Склад;
						Иначе
							Покупатели_Розница.Магазин				= ДокКонтекст.Склад;
						КонецЕсли;
						Покупатели_Розница.КредДокумент			= ДокКонтекст.ДокОснование.ТекущийДокумент();
						Покупатели_Розница.СуммаРуб				= ОбщПроцент;//?(ОстПроцента-ОбщПроцент>0,ОбщПроцент,ОстПроцента);
						Покупатели_розница.АналитикаПродажи		= ДокКонтекст.АналитикаПроценты;
						//Покупатели_Розница.ДвижениеРасходВыполнить();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		           
			//++Валерйи МЭТР: механизм деления скидки
			//++Валерий МЭТР: повышение
			СкидкаКонтрагента = ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДатаДок);
			ПовышениеСкидки = 0;
			Если ДокКонтекст.ДокОснование.Повышение = 1 Тогда
				ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
				СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
			КонецЕсли;
			//--Валерий МЭТР: повышение	
			Если ДокКонтекст.ДокОснование.ВыданоСоСкидкой = 0 Тогда
				ДокКонтекст.Скидка = 0;
			КонецЕсли;
			
			Попытка 
				СкидкаНакопление = СкидкаКонтрагента - ДокКонтекст.ДокОснование.Скидка;
			Исключение
				СкидкаНакопление = СкидкаКонтрагента - ДокКонтекст.Скидка;
			КонецПопытки;	
			
			
			флФиксСкидка = 0;
			Если ДокКонтекст.ДокОснование.Выбран() = 1 Тогда
				ТемпФиксСкидка = глПолучитьФиксированнуюСкидку(ДокКонтекст.ДокОснование);
				
				Если ПустоеЗначение(ТемпФиксСкидка) = 0 Тогда
					СкидкаНакопление = ТемпФиксСкидка; 
					флФиксСкидка = 1;
				КонецЕсли;	
			КонецЕсли;	
			                        
			
			//Если ВыданоСоСкидкой = 0 Тогда	//Запишем в копилку
			Если СкидкаНакопление > 0 Тогда
				//--Валерйи МЭТР: механизм деления скидки
				Если ДокКонтекст.ДатаДок >= Дата("25.10.16") Тогда
					Покупатели_Розница.Контрагент		= ДокКонтекст.Контрагент;  
					Если ((ПроцентовНачислено = 0) и (ОтгрузкиНачислено <> 0)) Тогда
			    		Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Отгрузка;
					ИначеЕсли ДокКонтекст.ДокОснование.флНачислитьБонусы = 1 Тогда 
						Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Бонусы;
					Иначе						
						Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Проценты;
					КонецЕсли;
					Если ДокКонтекст.ДатаДок >= Дата("01.07.2017") Тогда
						Покупатели_Розница.Магазин				= ДокКонтекст.ДокОснование.Склад;
					Иначе
						Покупатели_Розница.Магазин				= ДокКонтекст.Склад;
					КонецЕсли;
					Покупатели_Розница.КредДокумент		= ДокКонтекст.ДокОснование.ТекущийДокумент();
					Покупатели_Розница.АналитикаПродажи = ДокКонтекст.АналитикаПроценты; 
				КонецЕсли;
				////**********
				// сообщить("Скидка="+Скидка);
				
				//Валерйи МЭТР: закомментировано
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);		 
				
				_Итог	= 0;
				
				//Валерий МЭТР: деление скидки
				//Если ДатаДок >= Дата("27.04.10") Тогда
				ДокКонтекст.ВыбратьСтроки();
				
				Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
					ПроцентПоАкции		= глПолучитьПроцентпоАкции(ДокКонтекст.Номенклатура, ДокКонтекст.ДокОснование.ДатаДок);
					Если флФиксСкидка = 1 Тогда
						//_ЦенаСоСкидкой	= Цена-Цена*((СкидкаНакопление)/100);  
						//_Сумма 			= _ЦенаСоСкидкой*Количество;
						//_СуммаБезСкидки = Количество*Цена;
						//_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
						_СуммаСкидки	= 0;
						//_Итог			= (СкидкаНакопление / (100 - СкидкаНакопление)) * ((ДокКонтекст.итог("Сумма") * (100 - СкидкаНакопление)) / ДокКонтекст.ДокОснование.Итог("Сумма")); 
						_Итог			= (СкидкаНакопление / 100) * ((ДокКонтекст.итог("Сумма") * 100) / ДокКонтекст.ДокОснование.Итог("Сумма"));
						//_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
					ИначеЕсли ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок) = 0 Тогда
						//СкидкаКарта          
						Если ДокКонтекст.ДокОснование.флНачислитьБонусы = 1 Тогда   
							ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
						Иначе
							ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
						КонецЕсли;
						
						_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);//(100 - (ТекПроцентСкидки)));  
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
						_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;	
					ИначеЕсли СкидкаКонтрагента >= ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок) Тогда
						//СкидкаТовар
						
						
						//++Валерий МЭТР: механизм деления скидки
						ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок) + ПовышениеСкидки;
						Если ДокКонтекст.ДокОснование.Повышение = 0 Тогда
							Если СкидкаКонтрагента <> 0 Тогда
								ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
							КонецЕсли; 
						КонецЕсли;  
						
						ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст.ДокОснование, ПоделеннаяПриоритетнаяСкидка);
						
						//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
						_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*(ПоделеннаяПриоритетнаяСкидка/100);//(100 - ПоделеннаяПриоритетнаяСкидка));
						//--Валерий МЭТР: механизм деления скидки					
						
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
						_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
						
					ИначеЕсли СкидкаКонтрагента < ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок) Тогда
						Если (ДокКонтекст.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
							//СкидкаТовар
							
							//++Валерий МЭТР: механизм деления скидки
							ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДокОснование.ДатаДок) + ПовышениеСкидки;
							Если ДокКонтекст.ДокОснование.Повышение = 0 Тогда
								Если СкидкаКонтрагента <> 0 Тогда
									ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
								КонецЕсли; 
							КонецЕсли;                                
							ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст.ДокОснование, ПоделеннаяПриоритетнаяСкидка);
							//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
							_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*((ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)/100);//(100 - (ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)));
							//--Валерий МЭТР: механизм деления скидки
							
							_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
							_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
							_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
							_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
						Иначе
							//СкидкаКарта 
							Если ДокКонтекст.ДокОснование.флНачислитьБонусы = 1 Тогда   
								ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
							Иначе
								ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
							КонецЕсли;
							
							_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);//(100 - (ТекПроцентСкидки)));  
							_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
							_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
							_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
							_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
						КонецЕсли;
					КонецЕсли;
					
					_Итог=_СуммаСкидки+_Итог;			
				КонецЦикла;
				
				Покупатели_Розница.СуммаРуб	=_итог;   
				
				
				//	нов  Покупатели_Розница.СуммаРуб	= итог("СуммаСкидки");
				//Покупатели_Розница.СуммаРуб			= итог("Сумма")/100*Контрагент.Скидка_Розница.Получить(ДатаДок); 
				Покупатели_Розница.ФормаОплаты 				= "";
				Покупатели_Розница.ДвижениеРасходВыполнить();
				
			КонецЕсли;
		КонецЕсли;	   
	ИначеЕсли ДокКонтекст.Вид() = "ВозвратДолгов_Розница" Тогда	 
		Если ДокКонтекст.ДатаДок >= Дата("24.04.17") Тогда 
			Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
			ДокКонтекст.ВыбратьСтроки();
			Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл    
				Если ПустоеЗначение(ДокКонтекст.АналитикаПроценты) = 1 Тогда
					Продолжить;
				КонецЕсли;	
				
				//суммаОпДог = глПолучитьОплатуПоАналитике(ДокКонтекст.АналитикаПроценты, Контекст);
				//если суммаОпДог > 0 тогда	
					СписокРеализаций = глПолучитьПродажиПоАналитике(ДокКонтекст.АналитикаПроценты, ДокКонтекст.ДатаДок);
					Для НомерРеализации = 1 по СписокРеализаций.КоличествоСтрок() Цикл
						//Покупатели_Розница.Контрагент		 	= ДокКонтекст.АналитикаПроценты.Контрагент; 
						Покупатели_Розница.Контрагент		 	= ДокКонтекст.Контрагент;
						Покупатели_розница.ВидВзаимодействия 	= Перечисление.ВидВзаимодействия.Отгрузка;
						Покупатели_Розница.Магазин			 	= ДокКонтекст.АналитикаПроценты.Магазин;
						Покупатели_Розница.КредДокумент		 	= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "КредДокумент");
						Покупатели_Розница.АналитикаСчетБезнал	= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "АналитикаСчетБезнал");
						Покупатели_Розница.АналитикаПродажи		= ДокКонтекст.АналитикаПроценты;
						Покупатели_Розница.СуммаРуб 		 	= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "ОстатокПроценты");
						Покупатели_Розница.ФормаОплаты 				= "";
						Покупатели_Розница.ДвижениеРасходВыполнить();
						
						//Покупатели_Розница.Контрагент		 	= ДокКонтекст.АналитикаПроценты.Контрагент;
						Покупатели_Розница.Контрагент		 	= ДокКонтекст.Контрагент;
						
						ДокФлагБонус = СписокРеализаций.ПолучитьЗначение(НомерРеализации, "КредДокумент");
						
						Если ДокФлагБонус.флНачислитьБонусы = 1 Тогда
							Покупатели_розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Бонусы;
						Иначе
							Покупатели_розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Проценты;
						КонецЕсли;
						
						Покупатели_Розница.Магазин			 	= ДокКонтекст.АналитикаПроценты.Магазин;
						Покупатели_Розница.КредДокумент			= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "КредДокумент"); 
						Покупатели_Розница.АналитикаСчетБезнал	= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "АналитикаСчетБезнал");
						Покупатели_Розница.АналитикаПродажи		= ДокКонтекст.АналитикаПроценты;
						Покупатели_Розница.СуммаРуб 		 	= СписокРеализаций.ПолучитьЗначение(НомерРеализации, "ОстатокПроценты");
						Покупатели_Розница.ФормаОплаты 				= "";
						Покупатели_Розница.ДвижениеПриходВыполнить();
					КонецЦикла;
				//КонецЕсли;    
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ДокКонтекст.Вид() = "РасходнаяНакладнаяРозница" Тогда
		
		флОтгрузкаВДолг = 0;
		
		ВсегоОплатить				= ДокКонтекст.Итог("Сумма")+?(ДокКонтекст.СуммаВклНП=1,0,ДокКонтекст.Итог("СуммаНП"))+?(ДокКонтекст.СуммаВклНДС=1,0,ДокКонтекст.Итог("СуммаНДС")) - ДокКонтекст.залог;
		ВсегоОплачено   			= ДокКонтекст.Оплачено + ДокКонтекст.залог + ДокКонтекст.ОплаченоБонусом;
		
		Если ((ВсегоОплатить - ВсегоОплачено) > 0) Тогда
			флОтгрузкаВДолг = 1;
		КонецЕсли;
		
		Если ((ВсегоОплатить - ВсегоОплачено) > 0) и (ДокКонтекст.ДатаДок >= Дата("01.02.17"))  и (ДокКонтекст.ДатаДок <= Дата("24.04.17")) Тогда
			флОтгрузкаВДолг = 0; //делаем потомучто были начисления бонусов и потом их списние отменять нельзя
		КонецЕсли;
			
		Покупатели_Розница = ДокКонтекст.Регистр.Покупатели_Розница;
		//++Валерйи МЭТР: механизм деления скидки
		//++Валерий МЭТР: повышение
		СкидкаКонтрагента 	= ДокКонтекст.Контрагент.Скидка_Розница.Получить(ДокКонтекст.ДатаДок);
		ПовышениеСкидки 	= 0;
		Если ДокКонтекст.Повышение = 1 Тогда
			ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
			СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
		КонецЕсли;
		//--Валерий МЭТР: повышение	
		Если ДокКонтекст.ВыданоСоСкидкой = 0 Тогда
			ДокКонтекст.Скидка = 0;
		КонецЕсли;	
		СкидкаНакопление = СкидкаКонтрагента - ДокКонтекст.Скидка;
		
		
		флФиксСкидка 		= 0;
		флОтгрузкаПрошла    = 0;
		
		Если (ДокКонтекст.ДокОснование.Выбран() = 1) Тогда
			ТемпФиксСкидка 	= глПолучитьФиксированнуюСкидку(ДокКонтекст);
			
			Если (ПустоеЗначение(ТемпФиксСкидка) = 0) и (флОтгрузкаВДолг = 0) Тогда
				СкидкаНакопление = ТемпФиксСкидка; 
				флФиксСкидка = 1;
				ТекЗаявка 		= глПолучитьЗаявку(ДокКонтекст);
				ОтгрузкаПрошла 	= глПроверитьОтгрузкуПоАналитике(ТекЗаявка, ДокКонтекст);
				Если (ОтгрузкаПрошла > 0) или (ДокКонтекст.ДатаДок <= Дата("28.05.2016")) тогда
					флОтгрузкаПрошла    = 1;
				КонецЕсли;	                              
				Покупатели_Розница.Контрагент		  	= ДокКонтекст.Контрагент;
				Покупатели_Розница.ВидВзаимодействия 	= Перечисление.ВидВзаимодействия.Отгрузка;
				Покупатели_Розница.Магазин			  	= ДокКонтекст.Склад;
				Покупатели_Розница.КредДокумент	  		= ТекЗаявка;
				Покупатели_Розница.СуммаРуб		  		= ДокКонтекст.Итог("Сумма");  
				Покупатели_Розница.ФормаОплаты 				= "";
				Покупатели_Розница.ДвижениеРасходВыполнить();
			КонецЕсли;	
		КонецЕсли;	
		              
			
		//Если ВыданоСоСкидкой = 0 Тогда	//Запишем в копилку
		Если (СкидкаНакопление > 0) 
			и (
				(ДокКонтекст.Контрагент.НеНачислятьПроценты = 0) 
				или (ДокКонтекст.ДатаДок <= Дата("28.05.2016"))
				) 
			и (
				(флФиксСкидка = 0)
				или (флОтгрузкаПрошла    = 1)
				) Тогда
			//--Валерйи МЭТР: механизм деления скидки
			
			Покупатели_Розница.Контрагент		= ДокКонтекст.Контрагент;
			Если (флФиксСкидка = 0) 
				и (флОтгрузкаВДолг = 1) Тогда
			    Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Отгрузка;
			Иначе
				Если ДокКонтекст.флНачислитьБонусы = 1 Тогда
					Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Бонусы;
				Иначе	
					Покупатели_Розница.ВидВзаимодействия= Перечисление.ВидВзаимодействия.Проценты;
				КонецЕсли;	
			КонецЕсли;
			
			Покупатели_Розница.Магазин			= ДокКонтекст.Склад;
			Покупатели_Розница.КредДокумент		= ДокКонтекст.ТекущийДокумент();
			Покупатели_Розница.АналитикаПродажи = ДокКонтекст.АналитикаПроценты;
			////**********
			// сообщить("Скидка="+Скидка);
			
			//Валерйи МЭТР: закомментировано
			//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);		 
			
			_Итог	= 0;
			
			//Валерий МЭТР: деление скидки
			//Если ДатаДок >= Дата("27.04.10") Тогда
			ДокКонтекст.ВыбратьСтроки();
			
			Пока ДокКонтекст.ПолучитьСтроку() = 1 Цикл
				ПроцентПоАкции		= глПолучитьПроцентпоАкции(ДокКонтекст.Номенклатура, ДокКонтекст.ДатаДок);
				Если флФиксСкидка = 1 Тогда
					//_ЦенаСоСкидкой	= Цена-Цена*((СкидкаНакопление)/100);  
					//_Сумма 			= _ЦенаСоСкидкой*Количество;
					//_СуммаБезСкидки = Количество*Цена;
					//_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
					_СуммаСкидки	= 0;
					_Итог			= СкидкаНакопление;
					//_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
				ИначеЕсли ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) = 0 Тогда
					//СкидкаКарта
					Если ДокКонтекст.флНачислитьБонусы = 1 Тогда   
						ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
					Иначе
						ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
					КонецЕсли;
					_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);  
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
					_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
					_ЦенаСоСкидкой	= _ЦенаСоСкидкой;	
				ИначеЕсли СкидкаКонтрагента >= ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) Тогда
					//СкидкаТовар
					
					//++Валерий МЭТР: механизм деления скидки
					ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) + ПовышениеСкидки;
					Если ДокКонтекст.Повышение = 0 Тогда
						Если СкидкаКонтрагента <> 0 Тогда
							ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
						КонецЕсли; 
					КонецЕсли;   
					ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст, ПоделеннаяПриоритетнаяСкидка);
					//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
					_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
					//--Валерий МЭТР: механизм деления скидки					
					
					_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
					_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
					_СуммаСкидки	= ДокКонтекст.СуммаБезСкидки - _Сумма;
					_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
					
				ИначеЕсли СкидкаКонтрагента < ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) Тогда
					Если (ДокКонтекст.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
						//СкидкаТовар
						
						//++Валерий МЭТР: механизм деления скидки
						ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок) + ПовышениеСкидки;
						Если ДокКонтекст.Повышение = 0 Тогда
							Если СкидкаКонтрагента <> 0 Тогда
								ПоделеннаяПриоритетнаяСкидка = ДокКонтекст.Номенклатура.Скидка.Получить(ДокКонтекст.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
							КонецЕсли; 
						КонецЕсли;
						ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(ДокКонтекст, ПоделеннаяПриоритетнаяСкидка);
						//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
						_ЦенаСоСкидкой		= ДокКонтекст.Цена-ДокКонтекст.Цена*((ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)/100);
						//--Валерий МЭТР: механизм деления скидки
						
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
						_СуммаСкидки	= ДокКонтекст.СуммаБезСкидки - _Сумма;
						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
					Иначе
						//СкидкаКарта  
						Если ДокКонтекст.флНачислитьБонусы = 1 Тогда   
							ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции + Константа.ПроцентБонусаПоТоварамБезОграничения;
						Иначе
							ТекПроцентСкидки = СкидкаНакопление + ПроцентПоАкции;
						КонецЕсли;
						_ЦенаСоСкидкой	= ДокКонтекст.Цена-ДокКонтекст.Цена*((ТекПроцентСкидки)/100);  
						_Сумма 			= _ЦенаСоСкидкой*ДокКонтекст.Количество;
						_СуммаБезСкидки = ДокКонтекст.Количество*ДокКонтекст.Цена;
						_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
					КонецЕсли;
				КонецЕсли;
				
				_Итог=_СуммаСкидки+_Итог;			
			КонецЦикла;
			
			Покупатели_Розница.СуммаРуб	=_итог;
				
			//	нов  Покупатели_Розница.СуммаРуб	= итог("СуммаСкидки");
			//Покупатели_Розница.СуммаРуб			= итог("Сумма")/100*Контрагент.Скидка_Розница.Получить(ДатаДок); 
			Покупатели_Розница.ФормаОплаты 				= "";
			Покупатели_Розница.ДвижениеПриходВыполнить();
			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры	

Функция глПолучитьБонусыКлиента(Знач мКлиент, ДатаОтбор, флПозиция = 0) Экспорт
	Перем Запрос, ТекстЗапроса;       
	
	ВремРегистры = СоздатьОбъект("Регистры");
	ВремПокупатели_розница=ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если флПозиция = 1 Тогда
			Если ПолучитьПозициюТА() > ДатаОтбор Тогда 
				мТекДата = ДатаОтбор;
				ВремРегистры.РассчитатьРегистрыНа(ДатаОтбор);
			Иначе                                                    
				мТекДата = ПолучитьПозициюТА();
				ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
			КонецЕсли;
		Иначе
			Если ПолучитьДатуТА() > ДатаОтбор Тогда 
				мТекДата = ДатаОтбор;
				ВремРегистры.РассчитатьРегистрыНа(ДатаОтбор);
			Иначе                                                    
				мТекДата = ПолучитьДатуТА();
				ВремРегистры.РассчитатьРегистрыНа(ПолучитьДатуТА());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	Запрос 	= СоздатьОбъект("Запрос");
	мРезультат = 0;
	Состояние("Расчёт таблицы текущих бонусов...");
	ВЗ		= Перечисление.ВидВзаимодействия.Бонусы;
	ТекстЗапроса = 
	"//{{ЗАПРОС(ТекущиеБонусы) 
	|Период с мТекДата по мТекДата;
	|Без итогов;
	|Клиент 			= Регистр.Покупатели_розница.Контрагент;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|СуммаРуб 				= Регистр.Покупатели_розница.СуммаРуб;
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Группировка Клиент без групп;
	|Условие(Клиент = мКлиент);
	|Условие(ВидВзаимодействия = ВЗ);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Состояние("Обрабатываем информацию о текущих бонусах...");
	Пока Запрос.Группировка() = 1 Цикл
		мРезультат = Запрос.СуммаРубКонОст;
		Прервать;
	КонецЦикла;	
	
	Возврат мРезультат;
КонецФункции	

Функция глПолучитьГруппуНоменклатуры(ТекНоменклатура, ТекСклад) Экспорт  
	Результат = ""; 
	
	Если ТекНоменклатура.ЭтоГруппа() = 0 Тогда
		
		СпрГруппыАВС = СоздатьОбъект("Справочник.АВСГруппа");
		СпрГруппыАВС.ИспользоватьВладельца(ТекНоменклатура.ТекущийЭлемент());
		СпрГруппыАВС.ИспользоватьДату(ТекущаяДата());
		СпрГруппыАВС.ВыбратьЭлементы();
		Пока СпрГруппыАВС.ПолучитьЭлемент() = 1 Цикл
			Если СпрГруппыАВС.Склад = ТекСклад Тогда
				Результат = СпрГруппыАВС.Группа; 
				Прервать;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат; 
КонецФункции

//++Ерошенко 05.06.2007
//*******************************************
// функция определяет кратность одного числа другому,
// при этом, если числа кратны, то функция
// возвращает 0, а иначе, если остаток меньше половины
// кратного числа, то 1, если больше - то 2..  
// Передаваемые аргументы:
// 	Числ - число, которое проверяем
//	Кратн - коэффициент, на кратность которому проверяем
//
Функция глНеКратно(Числ,Кратн) Экспорт
	
	Ост = (Числ / Кратн) - Цел(Числ / Кратн);
	Если Ост = 0 Тогда
		Ит = 0;
	Иначе  
		Если Ост < (Кратн / 2) Тогда
			Ит = 1;
		Иначе
			Ит = 2;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ит;
	
КонецФункции  
//--Ерошенко   

//++Ерошенко 06.06.2007
//*******************************************
// функция позволяет округлить количество товара до
// числа, кратного количеству в упаковке (реквизит 
// справочника "Номенклатура".. 
//
Функция глОкрДоУпаковки(Номенклатура,ТекКоличество) Экспорт
	
	КоличВУпаковке = Номенклатура.КоличествоВУпаковке;   
	Если КоличВУпаковке = 0 Тогда
		Ит = ТекКоличество;
	Иначе
		Если ТекКоличество = КоличВУпаковке Тогда
			Ит = ТекКоличество;
		ИначеЕсли ТекКоличество < КоличВУпаковке Тогда
			Ит = КоличВУпаковке;
		ИначеЕсли ТекКоличество > КоличВУпаковке Тогда  
			КоэффПревышения = Окр(Цел(ТекКоличество / КоличВУпаковке),0,1);// сколько целых упаковок уже есть в набранном количестве.. 
			РабочееЧисло = ТекКоличество - (КоличВУпаковке * КоэффПревышения);
			Ит = 0;   
			Пока РабочееЧисло <> КоличВУпаковке Цикл
				Ит = Ит + 1;
				РабочееЧисло = РабочееЧисло + 1;
			КонецЦикла;
			Ит = Ит + ТекКоличество;  
		КонецЕсли;   
	КонецЕсли;
	
	Возврат Ит;
	
КонецФункции
//--Ерошенко


//++Ерошенко 04.05.2007     
//*******************************************
// функция определяет, есть ли у ТекущегоПользователя 
// право на пользование передаваемым объектом..
// Передаваемые аргументы: 
//	ТекОбъект - объект доступа
//	СтрНазв - Полное название объекта в Конфигураторе  
//
Функция ЕстьДоступКОбъекту(ТекОбъект,СтрНазв) Экспорт 
    
	Если ТекОбъект <> "" Тогда
		Предст = ""+ТипЗначенияСтр(ТекОбъект)+"."+ТекОбъект.Вид();  
	Иначе
		Предст = СокрЛП(СтрНазв);
	КонецЕсли;
	
	Ит = 0;        
	          
	Спр = СоздатьОбъект("Справочник.ГруппыДоступа");
	Спр.ИспользоватьВладельца(глПользователь);
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если СокрЛП(Спр.ОбъектМетаданных) = Предст Тогда
			Ит = Спр.Доступ;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ит;       
	
КонецФункции
//--Ерошенко
              
//++Ерошенко 03.05.2007   
//*******************************************
// процедура выставляет значение периодического реквизита
// "Продажа за два месяца". Реквизит служит для ускоренного 
// отображения продаж в форме списка справочника "Номенклатура"
//
Процедура ПересчитатьПродажиТоваровЗаДваМесяца() Экспорт           
    
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	СписНом = СоздатьОбъект("СписокЗначений"); 
	СпрНом.ВыбратьЭлементы();
	Пока СпрНом.ПолучитьЭлемент() = 1 Цикл
		Если СпрНом.ЭтоГруппа() = 1 Тогда
			Продолжить;
		КонецЕсли;
		ТекСв = СокрЛП(СпрНом.ОсновноеСвойство.ЗначениеСвойства);
		Если (ТекСв = "A") ИЛИ (ТекСв = "B") Тогда       
			СписНом.ДобавитьЗначение(СпрНом.ТекущийЭлемент());  
		КонецЕсли;
	КонецЦикла;
	
	ДатаПо = ПолучитьДатуТА();
	ДатаС =  ДатаПо - 60;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|Период с ДатаС по ДатаПо;
	|Без Итогов;   
	|Номенклатура = Регистр.ОстаткиТМЦ.Номенклатура;
	|Количество =   Регистр.ОстаткиТМЦ.Количество;
	|Внутреннее =   Регистр.ОстаткиТМЦ.Внутреннее;
	|Функция КоличествоРасход = Расход(Количество);
	|Группировка Номенклатура Без Групп;  
	|Условие(Номенклатура в СписНом);
	|Условие(Внутреннее = 0);
	|Без Итогов;";
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ); 
	
	ТЗ.ВыбратьСтроки();     
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		Если СпрНом.НайтиЭлемент(ТЗ.Номенклатура) = 1 Тогда
			СпрНом.ПроданоЗаДваМесяца.Установить(ДатаПо,ТЗ.КоличествоРасход);
			СпрНом.Записать(); 
		Иначе
			Сообщить("Не отработан товар '"+ТЗ.Номенклатура+"'");  
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры   
//--Ерошенко  

//++Ерошенко 03.05.2007 
//*******************************************
// процедура вызывает пересчёт продаж, процедуру,
// заявленную выше.
//
Процедура ИнициироватьПересчётПродажЗаДваМесяца()
	
	Перем Ч,М,С;
	ТекущееВремя(Ч,М,С);   
	Если Число(Ч) = 22 Тогда
		Если Число(М) = 30 Тогда
			ПересчитатьПродажиТоваровЗаДваМесяца();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//--Ерошенко    

//++Ерошенко 10.05.2007    
//*******************************************
// процедура инициирует запуск того или иного объекта конфигурации
// по условию. 
// Параметры:
// Реж - режим запуска. Если 1 - при начале работы, если 2 - при завершении
// Врем - время запуска. Число, показывающее, в котором часу следует
// инициировать запуск объекта. 
//
Процедура ОтработатьПланировщик(Реж,Врем) Экспорт
	
	СпрПольз = СоздатьОбъект("Справочник.Пользователи"); 
	СпрПлан =  СоздатьОбъект("Справочник.Планировщик");
	Если СпрПольз.НайтиЭлемент(глПользователь) = 1 Тогда
		СпрПлан.ИспользоватьВладельца(СпрПольз.ТекущийЭлемент());
		СпрПлан.ВыбратьЭлементы();
		Пока СпрПлан.ПолучитьЭлемент() = 1 Цикл
			Если (Реж = 1) ИЛИ (Реж = 2) Тогда // при начале работы системы
				Если СпрПлан.Доступ = Реж Тогда
					ОткрытьФорму(""+СокрЛП(СпрПлан.ОбъектМетаданных));   
				КонецЕсли; 
			Иначе
				Если СокрЛП(Врем) = СокрЛП(СпрПлан.ВремяЗапуска) Тогда
					ОткрытьФорму(""+СокрЛП(СпрПлан.ОбъектМетаданных));      
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры
//--Ерошенко

//++Ерошенко 11.05.2007  
//*******************************************
// процедура инициирует запуск планировщика, предварительно
// сгенерировав строку - текущий час. 
//
Процедура ПодключитьВременнойПланировщик()
	
	ТВ = "" + Лев(ТекущееВремя(),2) + ":00";
	ОтработатьПланировщик(3,ТВ);
	
КонецПроцедуры
//--Ерошенко

//++Ерошенко 21.05.2007 
//*******************************************
// процедура служит для комплексной инициации объектов, для которых
// должна быть отработана обработка ожидания.. 
//
Процедура ПроверкаОбработкиОжидания() Экспорт
	
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Если Спр.НайтиЭлемент(глПользователь) = 1 Тогда
		Тек = Спр.ТекущийЭлемент();
		Если Тек.ЗапускатьОбщение = 1 Тогда
			Если Тек.ЗапущеноОбщение <> 1 Тогда
				ОткрытьФорму("Обработка.Общение");  
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьВременнойПланировщик();
	
	//++Ерошенко 11.05.2007     
	ПодключитьВременнойПланировщик();
	//--Ерошенко 
	
	//++Ерошенко 03.05.2007  
	Если СокрЛП(глПользователь) = "Администратор" Тогда
		ИнициироватьПересчётПродажЗаДваМесяца();   
	КонецЕсли;
	//--Ерошенко 
	
КонецПроцедуры
//--Ерошенко

//*******************************************
// процедура определяет, какие поля в карточке контрагента, обязательные
// к заполнению, не заполнены.. 
//
Процедура ПроверкаПолейКонтрагента(Контрагент,Телефоны,ФактАдрес,Предупр) Экспорт
	
	Если Контрагент.ЕстьПаспортныеДанные = 1 Тогда
		Если СокрЛП(Контрагент.ПаспортныеДанные) = "" Тогда
			Предупр = Предупр + "
			|Не заполнены паспортные данные контрагента.";  
		КонецЕсли;
	КонецЕсли;
	Если СокрЛП(Контрагент.ШтрихКарта) = "" Тогда
		Предупр = Предупр + "
		|Не заполнен номер карточки контрагента.";
	КонецЕсли;
	Если СокрЛП(Контрагент.ФИО) = "" Тогда
		Предупр = Предупр + "
		|Не заполнены Фамилия, Имя, Отчество контрагента.";
	КонецЕсли;  
	Если СокрЛП(Телефоны) = "" Тогда
		Предупр = Предупр + "
		|Не заполнены телефоны контрагента.";
	КонецЕсли; 
	Если СокрЛП(ФактАдрес) = "" Тогда
		Предупр = Предупр + "
		|Не заполнен фактический адрес контрагента.";
	КонецЕсли;  
	Если ПустоеЗначение(Контрагент.ДеньРождения) = 1 Тогда
		Предупр = Предупр + "
		|Не указан день рождения контрагента.";
	КонецЕсли;
	
КонецПроцедуры 

//********************************************************
// процедура выводит предупреждение в том случае, если в карточке контрагента
// не заполнены необходимые поля.. 
//
Процедура ПроверитьКонтрагентаВДокументе(Контрагент) Экспорт
	 
	Предупр =   "";   
	Телефоны =  Контрагент.ЮрФизЛицо.Телефоны;
	ФактАдрес = Контрагент.ЮрФизЛицо.ФактАдрес;
	ПроверкаПолейКонтрагента(Контрагент,Телефоны,ФактАдрес,Предупр);
	Если СокрЛП(Предупр) <> "" Тогда
		Предупр = "ОБРАТИТЕ ВНИМАНИЕ!"+"
		|"+Предупр+" 
		|";
		Предупреждение(Предупр);
	КонецЕсли; 
	
КонецПроцедуры

//********************************************************   

Процедура глПроверкаРезирвирования(Конт)   Экспорт
	
	
	Если Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная тогда
		__Док = СоздатьОбъект("Документ");
		Док = Конт.ТекущийДокумент();
		Если __Док.НайтиПоНомеру(Конт.НомерДок,,Конт.Вид()) = 1  тогда
			__Док.ВыбратьПодчиненныеДокументы(,,Док);
			Пока __Док.ПолучитьДокумент() = 1 Цикл
				Если __Док.Вид() = "ЗаявкаПокупателя" Тогда
					Если __Док.флРезервировать = 1 Тогда
						Предупреждение("Товар по заявке уже зарезервирован ");
						Конт.флРезервировать = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	иначе
		Если Конт.ДокОснование.флРезервировать = 1  Тогда 
			Предупреждение("Товар по заявке уже зарезервирован ");
			Конт.флРезервировать = 0;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ
//
//******************************************************************************


// глБратьСуммыИзУчета(ДатаОперации)
//
// Параметры: 
// 	ДатаОперации - дата, дата операции, отражаемой в печатной форме
//
// Возвращаемое значение:
// 	Число, 1 - брать суммы из учета, 0 - брать суммы из табличной части
//
// Описание:
//  Возвращает режим формирования печатных форм - по суммам из табличной
//  части и по суммам, отраженным в учете. До начала действия приказа № 147
//  всегда возвращается 0, так как разница в режимах проявляется только
//  для операций, на которые распространяется действие данного приказа
//  (фактически 1 января 2008 года и позднее).
//
Функция глБратьСуммыИзУчета(ДатаОперации, КодОперации = "") Экспорт
        
	Если ДатаОперации < глДатаПоПриказу147 Тогда
	    Возврат 0;
		
	ИначеЕсли (КодОперации = Перечисление.КодыОпераций.ВозвратОтРеализатора)
	      ИЛИ (КодОперации = Перечисление.КодыОпераций.ВозвратКомитенту)
	      ИЛИ (КодОперации = Перечисление.КодыОпераций.ПриемНаРеализацию)
	      ИЛИ (КодОперации = Перечисление.КодыОпераций.ПриемНаРеализациюРозница)
	      ИЛИ (КодОперации = Перечисление.КодыОпераций.ПередачаНаРеализацию) Тогда
	    Возврат 0;
	
	Иначе
		Возврат Константа.СуммыВПечатныхФормахПоУчету;
		
	КонецЕсли;    
	
КонецФункции // глБратьСуммыИзУчета()


//++Ерошенко 20.03.2007
// добавлено для работы с Formex.dll
Функция ПолучитьЦвет(Красный = 0,Зеленый = 0,Синий = 0) Экспорт
	// функция для формирования значения цвета из составляющих (RGB)
	Возврат Макс(0,Синий)*65536 + Макс(0,Зеленый)*256 + Макс(0,Красный);
	
КонецФункции
//--Ерошенко


// глЗначениеПоУмолчанию(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита - текстовая строка с именем реквизита
//
// Возвращаемое значение: 
//  Значение по умолчанию для требуемого реквизита
//
// Описание: 
//  Функция определяет значение атрибута справочника "Пользователи",
//  идентификатор которого совпадает с переданным в качестве параметра,
//  для текущего пользователя (хранится в глобальной переменной глПользователь)
//
Функция глЗначениеПоУмолчанию(ИмяРеквизита) Экспорт
	
	Перем Значение;
	
	// глПользователь всегда должен иметь тип "Справочник.Пользователи"
	Если ПустоеЗначение(глПользователь.ПользовательДляНастроек) = 1 Тогда
		// Настройки по умолчанию задаются в текущем  элементе справочника "Пользователи"
		Значение = глПользователь.ПолучитьАтрибут(ИмяРеквизита);
	Иначе
		// Настройки по умолчанию задаются в другом элементе справочника "Пользователи"
		Значение = глПользователь.ПользовательДляНастроек.ПолучитьАтрибут(ИмяРеквизита);
	КонецЕсли;
	
	Возврат Значение;
	
	
КонецФункции // глЗначениеПоУмолчанию()    

//******************************************************************************
// глПолучитьПолномочие(ИмяПолномочия)
//
// Параметры: 
//  ИмяПолномочия - строка наименования полномочия
//
// Возвращаемое значение:
//  Значение полномочия, если не задано, то возвращает 0
//
// Описание:
//  Определяет и возвращает полномочие текущего пользователя с переданным наименованием.
//  Полномочия пользователя определяются выбранным для него элементом справочника "ПолномочияПользователей"
//
Функция глПолучитьПолномочие(ИмяПолномочия)  Экспорт
	
	Полномочие = глПользователь.Полномочия;
	Если ПустоеЗначение(Полномочие) = 1 Тогда
		Возврат 0;
	Иначе
		Возврат Полномочие.ПолучитьАтрибут(ИмяПолномочия);
		
	КонецЕсли;
	
КонецФункции // глПолучитьПолномочие()

//******************************************************************************
// глОкруглить(Числ, ПорядокОкругления)
//
// Параметры:
//  Числ              - исходное число
//  ПорядокОкругления - элемент перечисления Порядки окгугления: 
//  "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
// Описание:
//  Округляет число вверх по заданному порядку. Т.е число 123.37 при порядке
//  округление 0.5 превратиться в 123.50, а число 0.1 при порядке округления
//  5 станет равным 5.
//  Если значение перечисления ОкрТочно, то округляет арифметически до 0.01
//
Функция глОкруглить(Числ, ПорядокОкругления) Экспорт
	Перем Рез;
	
	Если ПорядокОкругления = Перечисление.ПорядкиОкругления.ОкрТочно Тогда
		
		// арифметическое округление до 2-х знаков после запятой
		Рез = Окр(Числ, 2);
	Иначе
		// округление к верхней границе по заданному порядку
		
		// преобразуем порядок округления число
		Порядок			= Число(Строка(ПорядокОкругления));
		
		// вычислим количество интервалов, входящих в число
		КолвоИнтервал	= Числ / Порядок;
		
		// вычислим целое количество интервалов.
		КолвоИнтервалЦел= Цел(КолвоИнтервал);
		
		Если КолвоИнтервал = КолвоИнтервалЦел Тогда
			// Числа поделились нацело. Округлять не нужно.
			Рез	= Числ;
		Иначе
			Рез	= Порядок * (КолвоИнтервалЦел + 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глОкруглить()

//******************************************************************************                  
// глДополнитьСтрокуЛ(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение: 
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  слева
//
Функция глДополнитьСтрокуЛ(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Добавок+Стр;
КонецФункции //глДополнитьСтрокуЛ()

//******************************************************************************                  
// глДополнитьСтрокуП(Стр,Чем,Длина)
//
// Параметры:
//  Стр   - исходная строка
//  Чем   - символ, которым дополняем строку
//  Длина - длина, до которой заполняем строку
//
// Возвращаемое значение: 
//  Результирующая строка
//
// Описание:
//  Дополняет передаваемую строку Стр символами Чем до строки длиной Длина
//  справа
//
Функция глДополнитьСтрокуП(Стр,Чем,Длина) Экспорт
	Добавить=Длина-СтрДлина(Стр);
	Добавок="";
	Для Сч = 1 По Добавить  Цикл
		Добавок=Добавок+Чем;
	КонецЦикла;
	Возврат Стр+Добавок;
КонецФункции //глДополнитьСтрокуП()



//******************************************************************************
//  глФРМ(ЧислЗнач, Валюта="", ВыводНулевого=0, РаздТриад="'")
//
// Параметры:
//  ЧислЗнач		- число, которое мы хотим форматировать
//  Валюта			- валюта (элемент справочника "Валюты") или пустое 
//                    значение
//  ВыводНулевого	- строка, режим вывода нулевых значений. Возможные значения:
//  				  "0" - подавить вывод нулевых значений (по умолчанию)
//	 			       ""  - вывод нулевых.
//	РаздТриад		- разделитель триад.
//
// Возвращаемое значение: 
//  Отформатированная строка
//
// Описание:
// 	Это процедура стандартного для данной конфигурации форматирования цен и сумм.
// 	По умолчанию не выводит нулевые значения и разделяет триады символом "'".
//  Для вывода нулевых значений в параметр ВыводНулевого нужно передать пустую 
//  строку. В параметр РаздТриад можно передать символ, разделитель триад. 
//  Если триады разделять не нужно, то в этот параметр нужно передать пустую 
//  строку.
//
Функция глФРМ(ЧислЗнач, Валюта="", ВыводНулевого="0", РаздТриад="'") Экспорт
	Перем РезСтрока, ФрмСтрока;
	
	РезСтрока = СокрЛ(Формат(ЧислЗнач, "Ч" + ВыводНулевого + "15.2." + РаздТриад));
	
	Если (ПустоеЗначение(РезСтрока) = 0) И (ПустоеЗначение(Валюта) = 0) Тогда
		РезСтрока = РезСтрока + " " + СокрП(Валюта.Наименование);
	КонецЕсли;
	
	Возврат РезСтрока;
	
КонецФункции // глФРМ() 

//******************************************************************************
// глСтрокаСкидки(Конт, РаздТриад)
//
//  Конт      - контекст документа,
//	РаздТриад - разделитель триад
//
// Возвращаемое значение:
//  Строковое представление о скидке по текущей строке спецификации документа
//
// Вызывается из формул элементов диалога
//  Формула колонки "Скидка" табличной части документа
//
// Описание:
//  Служит для формирования строкового представления о скидке 
//  по текущей строке табличной части документа 
//
Функция глСтрокаСкидки(Конт, РаздТриад = "'") Экспорт                           
	
	
	
	Возврат глФрм(Окр(Конт.Цена*Конт.Количество,2,1)-Конт.Сумма,,,РаздТриад);	
КонецФункции // глСтрокаСкидки()


//******************************************************************************
//  глФРМКоличество(Знач ЧислЗнач,Единица="", РаздТриад=" ") 
//
// Параметры:
//  ЧислЗнач  - число, которое мы хотим форматировать,
//  Единица   - единица измерения,
//	РаздТриад - разделитель триад, по умолчанию - пробел.
//
// Возвращаемое значение: 
//  Отформатированная строка
//
// Описание:
//  Это процедура стандартного для данной конфигурации форматирования количества.
//
Функция глФРМКоличество(Знач ЧислЗнач,Единица="", РаздТриад=" ") Экспорт
	
	Если ПустоеЗначение(Единица)=0 Тогда
		ЧислЗнач = ?(Единица.Коэффициент=0,0,ЧислЗнач / Единица.Коэффициент);
	КонецЕсли;
	Стр=СокрЛ(Формат(ЧислЗнач,"Ч015.3." +  РаздТриад));
	Возврат Стр;
	
КонецФункции //глФРМКоличество() 

//******************************************************************************
//  глСуммаПрописью(Сумма, Валюта) 
//
// Параметры:
//  Сумма  - число, на основе которого формируется сумма
//  Валюта - элемент справочника Валюты
//
// Возвращаемое значение: 
//  Сумма прописью
//
// Описание:
//  Формирует сумму прописью в соответствии с файлом прописи, заданным в валюте
//
Функция глСуммаПрописью(Сумма, Валюта) Экспорт
	
	Если Валюта <> глРубли Тогда
		
		Если ФС.СуществуетФайл(КаталогИБ() + Валюта.ИмяФайлаПрописи) = 1 Тогда
			Пропись(Валюта.ИмяФайлаПрописи);
		Иначе
			Сообщить("Для валюты " + Валюта + " отсутствует файл прописей." +
			РазделительСтрок +
			"Сумма прописью сформирована в национальной валюте.");
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаСуммы	= Формат(Сумма, "ЧПДС");
	
	// установим пропись по умолчанию
	Пропись("");
	Возврат СтрокаСуммы;
	
КонецФункции // глСуммаПрописью()

//******************************************************************************
// глДобавитьРеквизит(Стр, Предлог, Реквизит) 
//
// Параметры:
//  Стр      - исходная строка
//  Предлог  - разделитель (строка)
//  Реквизит - строка, которая добавляется
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Вспомогательная процедура, добавляет строку "Реквизит"
//  к исходной "Стр" через "Предлог"
//
Процедура глДобавитьРеквизит(Стр, Предлог, Реквизит) Экспорт
	Если ПустоеЗначение(Реквизит) = 0 Тогда
		Стр = Стр + Предлог + СокрП(Реквизит);
	КонецЕсли;
КонецПроцедуры //глДобавитьРеквизит

//******************************************************************************
// глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента)
//
// Параметры:
//  ИмяРеквизита - имя реквизита (строка)
//  ВидДокумента - вид документа (строка)
//
// Возвращаемое значение: 
//  0 - нет реквизита,
//  1 - есть реквизит
//
// Описание: 
//  Проверяет, есть ли в структуре метаданных документа указанного вида
// 	реквизит шапки с указанным названием
//
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт     
	
	
	Если ПустоеЗначение(ИмяРеквизита) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.ОбщийРеквизитДокумента(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	ИначеЕсли ПустоеЗначение(ВидДокумента) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции //глЕстьРеквизитШапки()

//******************************************************************************
// глЕстьРеквизитМнЧ(ИмяРеквизита, ВидДокумента)
//
// Параметры:
//  ИмяРеквизита - имя реквизита (строка)
//  ВидДокумента - вид документа (строка)
//
// Возвращаемое значение: 
//  0 - нет реквизита,
//  1 - есть реквизит
//
// Описание: 
//  Проверяет, есть ли в структуре метаданных документа указанного вида
//	реквизит многострочной части с указанным названием
//
Функция глЕстьРеквизитМнЧ(ИмяРеквизита,ВидДокумента) Экспорт
	Перем Реквизит;    
	Если (ПустоеЗначение(ВидДокумента) = 1) ИЛИ
	(ПустоеЗначение(ИмяРеквизита) = 1) Тогда
		Возврат 0;
	КонецЕсли;
	Реквизит=Метаданные.Документ(ВидДокумента).РеквизитТабличнойЧасти(ИмяРеквизита);
	Возврат Реквизит.Выбран();
КонецФункции //глЕстьРеквизитМнЧ()

//******************************************************************************
// глВзятьКонтекст(Конт)
//
// Параметры:
//  Конт - значение типа "Контекст"
//
// Возвращаемое значение: 
//  Переданный контекст
//
// Описание: 
// 	Функция возвращает переданное значение параметра (для получения Контекста)
//
Функция глВзятьКонтекст(Конт) Экспорт
	Возврат Конт;
КонецФункции // глВзятьКонтекст()

//******************************************************************************
// глСоздатьСписокЗначПеречисления(ИдПеречисления, СписокИдЗначений = "") Экспорт
//
// Параметры:
//  ИдПеречисления - строка, идентификатор перечисления.
//  ИдЗначения     - строка, идентификаторы значений перечисления через запятую
//
// Возвращаемое значение:
//  список, список значений перечиления.
//  
// Описание:
//  Формирует список значений перечисления, переданных в виде строки в 
// которой перечиленны требуемые идентификаторы значений через запятую.
//  Если СписокИдЗначений пустая строка, формируется список из всех значений перечисления.
//
Функция глСоздатьСписокЗначПеречисления(ИдПеречисления, СписокИдЗначений = "") Экспорт
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Если Метаданные.Перечисление(ИдПеречисления).Выбран() = 1 Тогда
		
		Если ПустаяСтрока(СписокИдЗначений) = 1 Тогда
			Для Номер = 1 По Метаданные.Перечисление(ИдПеречисления).Значение() Цикл
				Список.ДобавитьЗначение(Перечисление.ПолучитьАтрибут(ИдПеречисления).ЗначениеПоНомеру(Номер));
			КонецЦикла;
			
		Иначе
			Пока СтрДлина(СписокИдЗначений)>0 Цикл
				
				ПозЗапятой = Найти (СписокИдЗначений,",");
				Если ПозЗапятой = 0 Тогда
					ИдЗначения       = СписокИдЗначений;
					СписокИдЗначений = "";
				Иначе
					ИдЗначения       = Сред(СписокИдЗначений, 1, ПозЗапятой - 1);
					СписокИдЗначений = Сред(СписокИдЗначений, ПозЗапятой + 1);
				КонецЕсли;
				
				Если Метаданные.Перечисление(ИдПеречисления).Значение(ИдЗначения).Выбран() = 1 Тогда
					Список.ДобавитьЗначение(Перечисление.ПолучитьАтрибут(ИдПеречисления).ЗначениеПоИдентификатору(ИдЗначения));
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // глСоздатьСписокЗначПеречисления()

//******************************************************************************
// глСравнитьЭлементыСправочника(Элемент1, Элемент2)
//
// Параметры:
//  Элемент1 - первый элемент для сравнения,
//  Элемент2 - второй элемент
//
// Возвращаемое значение:
//  0 - элементы идентичны, 
//  1 - различны
//
// Описание:
//  Сравнивает все реквизиты (кроме периодических) переданных элементов 
//
Функция глСравнитьЭлементыСправочника(Элемент1, Элемент2) Экспорт
	
	Перем Рез;
	
	Рез = 0;
	
	
	Если Элемент1 <> Элемент2 Тогда
		Рез = 1;
	Иначе
		
		// сначала проверим код и наименование 
		Если Элемент1.Код <> Элемент2.Код Тогда
			Рез = 1;
		Иначе
			
			Если Элемент1.Наименование <> Элемент2.Наименование Тогда
				Рез = 1;
			Иначе
				
				Для Индекс = 1 По Метаданные.Справочник(Элемент2.Вид()).Реквизит() Цикл
					Реквизит = Метаданные.Справочник(Элемент2.Вид()).Реквизит(Индекс).Идентификатор;
					
					Если Метаданные.Справочник(Элемент2.Вид()).Реквизит(Индекс).Периодический = 0 Тогда
						
						Если Элемент1.ПолучитьАтрибут(Реквизит) <> Элемент2.ПолучитьАтрибут(Реквизит) Тогда
							// В случае если в переданном контексте происходило обращение
							// к реквизиту "Имя", то СтарыйРеквизит.ПолучитьАтрибут("Имя")
							// вернет старое значение.
							Рез = 1;
							Прервать;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // глСравнитьЭлементыСрпавочника()

//******************************************************************************
// глОживить(ДобСтрок)
//
// Параметры:
//  ДобСтрок - число, сколько строк добавлено в отчет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
// 	Процедура предназначена для отображения в строке состояния о ходе выполнения 
// 	отчета
//
Процедура глОживить(ДобСтрок) Экспорт
	глЧислоСтрок=глЧислоСтрок+ДобСтрок;
	Состояние("В отчет выведено "+глЧислоСтрок+" строк.");
КонецПроцедуры // глОживить()

//******************************************************************************
// глКурсДляВалюты(Валюта,ДатаКурса)
//
// Параметры:
//  Валюта    - Валюта (элемент справочника "Валюты")
//  ДатаКурса - Дата, на которую следует получить курс
//
// Возвращаемое значение: 
//  Курс, с учетом кратности
//
// Описание: 
//  Возвращает курс валюты на дату
//
Функция глКурсДляВалюты(Валюта,ДатаКурса) Экспорт
	Кратность=Валюта.Кратность.Получить(ДатаКурса);
	Возврат Валюта.Курс.Получить(ДатаКурса)/?(Кратность=0,1,Кратность);
КонецФункции  // глКурсДляВалюты()

//******************************************************************************
// глКонтрольныйСимволEAN(ШтрКод, Тип)
//
// Параметры:
//  ШтрКод - 12-символьный штрих-код (без контрольной цифры)
//  Тип    - тип штрихкода: 13 - EAN13, 8 - EAN8
//
// Возвращаемое значение: 
//  Контрольный символ 
//
// Описание: 
//  Функция вычисляет контрольный символ кода EAN
//
Функция глКонтрольныйСимволEAN(ШтрКод, Тип) Экспорт
	
	Четн = 0;
	Нечетн = 0;
	
	Если Тип = 13 Тогда
		КолвоИтераций = 6;
	Иначе
		КолвоИтераций = 4;
	КонецЕсли;
	
	Для Индекс = 1 По КолвоИтераций Цикл
		Четн = Четн + Сред(ШтрКод, 2 * Индекс, 1);
		Нечетн = Нечетн + Сред(ШтрКод, 2 * Индекс - 1, 1);
	КонецЦикла;
	
	Если Тип = 13 Тогда
		Четн = Четн * 3;
	Иначе
		Нечетн = Нечетн * 3;
	КонецЕсли;
	
	КонтЦифра = 10 - (Четн + Нечетн) % 10;
	
	Возврат ?(КонтЦифра = 10, "0", Строка(КонтЦифра));
	
КонецФункции // глКонтрольныйСимволEAN()

//******************************************************************************
// СтрокаВЦифры(Стр)
//
// Параметры:
//  Стр - строка символов
//
// Возвращаемое значение:
//  Строку, сосотоящую только из символов цифр
//
// Описание:
//  Из исходной строки переносит в результирующую строку символы, при этом,
//  если символ не является цифровым, то в результирующую строку переносится
//  символ цифры, который является самым правым в коде символа исходной строки
//
Функция СимволыВЦифры(СтрСимв) 
	
	СтрЦифр = "";
	
	Для Индекс = 1 По СтрДлина(СтрСимв) Цикл
		ТекСимв = Сред(СтрСимв, Индекс, 1);
		
		Если Найти("1234567890", ТекСимв) = 0 Тогда
			// преобразуем символ
			ТекСимв = Строка(КодСимв(ТекСимв) % 10);
		КонецЕсли;
		
		СтрЦифр = СтрЦифр + ТекСимв;
	КонецЦикла;
	
	Возврат СтрЦифр;
	
КонецФункции // СтрокаВЦифры()

//******************************************************************************
// глСформироватьШтрихкод(Префикс, ПредвКод, ТипКода=13)
//
// Параметры:
//  Префикс  - префикс штрихкода (строка из 2-х символов)
//  ПредвКод - строка, содержащая символы из которых нужно сформировать штрих-код
//	ТипКода  - тип формируемого штрихкода. Возможные значения:
//		       13 - для формирования EAN 13 (по умолчанию)
//		        8  - для формирования EAN 8
// Возвращаемое значение:
//  Нет                 
//
// Описание:
//  На основании кода Номенклатуры и кода ОКЕИ формирует штрихкод в формате EAN
//
Функция глСформироватьШтрихкод(Префикс, ПредвКод, ТипКода=13) Экспорт
	
	Если ТипКода = 13 Тогда
		ИспКолво = 10;
	Иначе
		ИспКолво = 6;
	КонецЕсли;
	
	Штрихкод = СимволыВЦифры(Прав(СокрЛП(ПредвКод), ИспКолво));
	Штрихкод = Префикс + глДополнитьСтрокуЛ(Штрихкод, "0", ИспКолво);
	
	Возврат Штрихкод + глКонтрольныйСимволEAN(Штрихкод, ТипКода);
	
КонецФункции // глСформироватьШтрихкод()

//******************************************************************************
// глКомплектуется(ТМЦ)
//
// Параметры: 
//  ТМЦ - элемент справочника Номенклатура, для которого надо определить наличие комплектующих
//
// Возвращаемое значение:
//  "Комплектуется" - если есть комлектующие
//  Пустая строка   - иначе
//
// Описание:
//  Определяет наличие комплектующих у данной ТМЦ
//
Функция глКомплектуется(ТМЦ) Экспорт
	
	Рез = 0;
	
	Если ТМЦ.Выбран() = 1 Тогда
		
		СпрКомплекты = СоздатьОбъект("Справочник.Комплектация");
		СпрКомплекты.ИспользоватьВладельца(ТМЦ);
		Рез = СпрКомплекты.ВыбратьЭлементы();
		
	КонецЕсли;
	
	Возврат ?(Рез = 1,"Комплектуется","");
	
КонецФункции // глКомплектуется()

//******************************************************************************
// глНомерРелиза()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Номер релиза текущей ИБ
//
// Описание:
//   Редактировать содержимое функции глНомерРелиза()запрещено!!!
//
Функция глНомерРелиза () Экспорт
	
	Возврат Константа.НомерРелиза;
	
КонецФункции // глНомерРелиза()

//******************************************************************************
// глИдентификаторКонфигурации()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Идентификатор конфигурации для Интернет-поддержки пользователей
//
// Описание:
//  Редактировать содержимое функции глИдентификаторКонфигурации()запрещено!!!
//
Функция глИдентификаторКонфигурации() Экспорт            
	
	Возврат "OUTK";
	
КонецФункции // глИдентификаторКонфигурации()   

//******************************************************************************
// глСоздатьИдентификатор()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Идентификатор (строка GUID)
//
// Описание:
//  Возвращает новый Идентификатор (GUID)
//
Функция глСоздатьИдентификатор()	Экспорт 
	
	Если ЗагрузитьВнешнююКомпоненту("V7Plus.dll") <> 1 Тогда
		Сообщить("Ошибка загрузки компоненты V7+");
		Возврат "";
	КонецЕсли;                                        
	
	НТТРСистИнформ = СоздатьОбъект("AddIn.V7SysInfo");
	
	Возврат СокрЛП(НТТРСистИнформ.СоздатьGUID());
	
КонецФункции	// глСоздатьИдентификатор()

//******************************************************************************
//	Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт
//
//	Параметры: 
//		Стр - 			строка, которую необходимо разложить на подстроки. 
//						Параметр передается по значению.
//		Разделитель - 	строка-разделитель, по умолчанию - запятая.
//
//
//	Возвращаемое значение:
//		список значений, элементы которого - подстроки
//
//	Описание:
//		Функция "расщепляет" строку на подстроки, используя заданный 
//		разделитель. Разделитель может иметь любую длину. 
//		Если в качестве разделителя задан пробел, рядом стоящие пробелы 
//		считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//		игнорируются.
//		Например, 
//		глРазложить(",ку,,,му", ",") возвратит список значений из пяти элементов, 
//		три из которых - пустые строки, а 
//		глРазложить(" ку   му", " ") возвратит список значений из двух элементов
//		
Функция глРазложить(Знач Стр, Разделитель = ",") Экспорт
	СЗ = СоздатьОбъект("СписокЗначений");
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(Лев(Стр,Поз-1));
			Стр = СокрЛ(Сред(Стр,Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1=1 Цикл
			Поз = Найти(Стр,Разделитель);
			Если Поз=0 Тогда
				СЗ.ДобавитьЗначение(Стр);
				Возврат СЗ;
			КонецЕсли;
			СЗ.ДобавитьЗначение(Лев(Стр,Поз-1));
			Стр = Сред(Стр,Поз+ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
КонецФункции // глРазложить

//******************************************************************************
//	глРазложитьДокУдостоверяющийЛичность(Стр)
//
//	Параметры: 
//		Стр - 			строка, описывающая документ, удостоверяющий личность
//
//	Возвращаемое значение:
//		список значений, элементы которого - подстроки
//
//	Описание:
//		Функция "расщепляет" строку на подстроки, описывающие 
//		реквизиты документа, удостоверяющий личность
//		
Функция глРазложитьДокУдостоверяющийЛичность(Знач Стр) Экспорт
	// в самой строке в качестве разделителя используется ","
	// поэтому для одного из документов придется сделать обход
	Стр1 = Стр;
	Стр = СтрЗаменить(Стр,"Иные документы, выдаваемые","Иные документы выдаваемые");
	Стр = СтрЗаменить(Стр,"Военный билет солдата (матроса, сержанта, старшины)","Военный билет солдата (матроса сержанта старшины)");
	СЗ = глРазложить(Стр);
	Если Найти(Стр1,"Иные документы, выдаваемые")>0 тогда 
		СЗ.УдалитьЗначение(1);
		СЗ.ВставитьЗначение(1,"Иные документы, выдаваемые органами МВД")
	КонецЕсли;
	Если Найти(Стр1,"Военный билет солдата")>0 тогда 
		СЗ.УдалитьЗначение(1);
		СЗ.ВставитьЗначение(1,"Военный билет солдата (матроса, сержанта, старшины)")
	КонецЕсли;
	Возврат СЗ;
	
КонецФункции // глРазложитьДокУдостоверяющийЛичность

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С БАНКОВСКИМИ СЧЕТАМИ
//
//******************************************************************************
// глПроверкаНомераСчета(НомерСчета, БИК, КоррСчет="")
//
// Параметры:
//  НомерСчета - "строка" - номер банковского счета или корр. счета.
//  БИК        - "строка" - БИК банка.
//  КоррСчет   - "строка" - корр. счет банка в РКЦ.
//
// Возвращаемое значение:
//  1 - если номер счета правильный, 0 - иначе.
//
// Описание:
//  Функция проверяет правильность указания номера банковского или корр. счета
//  по алгоритму расчета контрольного ключа.
//
Функция глПроверкаНомераСчета(НомерСчета, БИК, КоррСчет="") Экспорт
	
	Если ПустаяСтрока(КоррСчет)=0 Тогда
		// это кредитная организация
		Номер = СтрЗаменить(Прав(БИК, 3)        + НомерСчета, " ", "");
	Иначе
		// это РКЦ
		Номер = СтрЗаменить("0"+Сред(БИК, 5, 2) + НомерСчета, " ", "");
	КонецЕсли;
	
	Если СтрДлина(Номер) < 23 Тогда
		Возврат 0;
	КонецЕсли;
	
	// Весовые коэффициенты
	Вес        = "71371371371371371371371";
	КонтрСумма = 0;
	
	Для Индекс = 1 По 23 Цикл
		Произв        = Число(Сред(Номер, Индекс, 1)) * Число(Сред(Вес, Индекс, 1));
		МладшийРазряд = Число(Прав(Строка(Произв), 1));
		КонтрСумма    = КонтрСумма + МладшийРазряд;
	КонецЦикла;
	
	Если КонтрСумма / 10 - Цел(КонтрСумма / 10) <> 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // глПроверкаНомераСчета()

//******************************************************************************
// глБанковскаяДата(НачДата,КолвоДней)
//
// Параметры: 
//  НачДата   - дата, от которой считаем,  
//  КолвоДней - количество дней, котрое надо отсчитать
//
// Возвращаемое значение: 
//  Дата, через заданное кол-во дней
//
// Описание: 
//  Функция возвращает дату через заданное количество рабочих дней, т.е.
//  без суббот и воскресений.
//
Функция глБанковскаяДата(НачДата,КолвоДней)  Экспорт
	Перем БанковскихДней, ОбычныхДней, ДеньНедели;
	
	БанковскихДней = 0;
	ОбычныхДней    = 0;
	Пока БанковскихДней < КолвоДней Цикл 
		ОбычныхДней = ОбычныхДней+ 1;
		
		// определим день недели
		ДеньНедели=НомерДняНедели(НачДата+ОбычныхДней);
		
		// если не выходной, то прошел еще один банковский день
		Если ДеньНедели < 6 Тогда
			БанковскихДней=БанковскихДней+1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (НачДата + ОбычныхДней);
	
КонецФункции // глБанковскаяДата()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ СО СТОИМОСТНЫМИ РЕКВИЗИТАМИ
//
//******************************************************************************
//  глПересчет(Сумма,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон)
//
// Параметры:      
//	Сумма            - сумма, которую следует пересчитать
// 	ВалютаНач        - валюта (элемент справочника "Валюты"), из которой считаем
// 	ВалютаКон        - валюта (элемент справочника "Валюты"), в которую считаем
// 	ПоКурсуВалютыНач - курс или дата курса валюты нач
// 	ПоКурсуВалютыКон - курс или дата курса валюты кон
//
// Возвращаемое значение: 
//  Сумма, пересчитанная в другую валюту
//
// Описание: 
// 	Эта функция пересчитывает сумму из ВалютаНач и возвращает значение Сумма в 
// 	ВалютаКон в параметрах ПоКурсуВалютыНач и ПоКурсуВалютыКон могут передаваться
// 	либо сами курсы либо даты
//
Функция глПересчет(Сумма,ВалютаНач,ПоКурсуВалютыНач,ВалютаКон,ПоКурсуВалютыКон) Экспорт
	
	Если ВалютаНач = ВалютаКон Тогда
		// ну, тут и считать нечего...
		Возврат Сумма;
	КонецЕсли;
	
	ТипЗн=ТипЗначенияСтр(ПоКурсуВалютыНач);
	
	Если ТипЗн = "Число" Тогда
		КурсВалютыНач=ПоКурсуВалютыНач;
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыНач = глКурсДляВалюты(ВалютаНач,ПоКурсуВалютыНач);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыНач!");
		Возврат Сумма;
		
	КонецЕсли;
	
	ТипЗн = ТипЗначенияСтр(ПоКурсуВалютыКон);
	
	Если ТипЗн = "Число" Тогда
		КурсВалютыКон = ПоКурсуВалютыКон;
		
	ИначеЕсли ТипЗн = "Дата" Тогда
		КурсВалютыКон = глКурсДляВалюты(ВалютаКон,ПоКурсуВалютыКон);
		
	Иначе
		Сообщить("глПересчет():Неверный тип параметра ПоКурсуВалютыКон!");
		Возврат Сумма;
		
	КонецЕсли;
	
	Если (КурсВалютыНач = 0) 
	ИЛИ (КурсВалютыКон = 0) Тогда
		Сообщить("При пересчете валюты обнаружен нулевой курс валюты "
		+?(КурсВалютыНач = 0,ВалютаНач,ВалютаКон));
		Возврат Сумма;
	КонецЕсли;
	
	Возврат Сумма * КурсВалютыНач / КурсВалютыКон;
	
КонецФункции // глПересчет()

//******************************************************************************
//  глНачисляемыйНДС(Ставка)
// 
// Параметры: 
// 	Ставка - значение типа "Перечисление.СтавкиНДС".
//
// Возвращаемое значение: 
//  Числовой коэффициент НДС.
//
// Описание:
// 	По ставке НДС (Перечисление) получаем числовой коэффициент НДС, на который
//  необходимо умножить число при начислении НДС сверху для получения суммы НДС.
//  
Функция глНачисляемыйНДС(Ставка) Экспорт
	Если ПустоеЗначение(Ставка)=1 Тогда
		Возврат 0;
	ИначеЕсли(Ставка=Перечисление.СтавкиНДС.БезНДС) Тогда
		Возврат 0;
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС10) Тогда
		Возврат 0.1;
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС20) Тогда
		Возврат 0.2; 
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС18) Тогда
		Возврат 0.18;
	
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС9_09) Тогда
		Возврат 0.09998900010999890001099989000 // Это 0.0909/0.9091;
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС16_67) Тогда
		Возврат 0.20004800192007680307212288492 // Это 0.1667/0.8333, только более точно в последнем знаке;
	Иначе
		Сообщить("Функция глНачисляемыйНДС(Ставка): неверная ставка");
		Возврат 0;
	КонецЕсли;
КонецФункции //глНачисляемыйНДС()

//******************************************************************************
//  глВыделяемыйНДС(Ставка)
//
// Параметры: 
// 	Ставка - значение типа "Перечисление.СтавкиНДС"
//
// Возвращаемое значение: 
//  Числовой коэффициент НДС.
//
// Описание:
// 	По ставке НДС (Перечисление) получаем числовой коэффициент НДС, на который
//  необходимо умножить число при выделении НДС (если НДС включен в сумму) для 
//  получения суммы НДС.
//
Функция глВыделяемыйНДС(Ставка)   Экспорт
	Если ПустоеЗначение(Ставка)=1 Тогда
		Возврат 0;
	ИначеЕсли(Ставка=Перечисление.СтавкиНДС.БезНДС) Тогда
		Возврат 0;
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС10) 
	или (Ставка=Перечисление.СтавкиНДС.НДС10_110) Тогда
		Возврат  0.09090909090909090909090909091; // Это 1/11, только точнее
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС20) 
	или (Ставка=Перечисление.СтавкиНДС.НДС20_120) Тогда
		Возврат 0.166666666666666666666666666667; // Это 1/6, только точнее
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС9_09) Тогда
		Возврат 0.0909;
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС16_67) Тогда
		Возврат  0.1667; 
	ИначеЕсли (Ставка=Перечисление.СтавкиНДС.НДС18) Тогда
	    Возврат  0.15254237288;
	Иначе
		Сообщить("Функция глВыделяемыйНДС(Ставка): неверная ставка");
		Возврат 0;
	КонецЕсли;
КонецФункции //глВыделяемыйНДС()
//******************************************************************************
// глСтавкаНДСАванса(СтавкаНДС)
//
// Параметры:
//  СтавкаНДС - значение перечисления ставки НДС
//
// Возвращаемое значение:
//  Ставка НДС (значение перечисления)
//
// Описание:
//  Для авансов выбираем ставку НДС: если не выбрана, то 16.67, а иначе 
//	выбранную в документе (соответствующую ей расчетную).
//
Функция глСтавкаНДСАванса(пСтавкаНДС) Экспорт
	Если ПустоеЗначение(пСтавкаНДС)=0 Тогда
		Если  пСтавкаНДС = Перечисление.СтавкиНДС.НДС10 Тогда
			Возврат Перечисление.СтавкиНДС.НДС9_09;
		ИначеЕсли  пСтавкаНДС = Перечисление.СтавкиНДС.НДС20 Тогда
			Возврат Перечисление.СтавкиНДС.НДС16_67;
		Иначе
			Возврат пСтавкаНДС;
		КонецЕсли;
	Иначе     
		Возврат Перечисление.СтавкиНДС.НДС16_67;
	КонецЕсли;
КонецФункции // глСтавкаНДСАванса()

//******************************************************************************
//  глРасчетНалога(Конт,ВидНалога) 
//
// Параметры: 
// 	Конт      - контекст документа
//  ВидНалога - строка "НДС" или "НП"
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Рассчитываем сумму налога, подставляем ее в документ
//
Процедура глРасчетНалога(Конт,ВидНалога) Экспорт
	
	ЕстьНП		= глЕстьРеквизитМнЧ("СуммаНП",Конт.Вид());
	СтНП=0;
	Если ЕстьНП=1 Тогда
		СтНП	=?(Конт.УчитыватьНП	=1,Конт.СтавкаНП.Ставка/100,0);
	КонецЕсли;
	СтавкаНДС	=?(Конт.УчитыватьНДС=1,Конт.СтавкаНДС,Перечисление.СтавкиНДС.БезНДС);
	
	Если Врег(ВидНалога)="НДС" Тогда
		//Расчёт без скидки
		БазаНалога=Конт.Сумма;
		Если ЕстьНП=1 Тогда
			Если Конт.СуммаВклНП=1 Тогда
				БазаНалога=Конт.Сумма/(1+СтНП);
			КонецЕсли;	
		КонецЕсли;
		Если Конт.СуммаВклНДС=1 Тогда
			Конт.СуммаНДС=БазаНалога*глВыделяемыйНДС(СтавкаНДС);//0.1667, 0.16666(6),...
		Иначе
			Конт.СуммаНДС=БазаНалога*глНачисляемыйНДС(СтавкаНДС);//0.20, 0.20004...
		КонецЕсли;
		
		//Расчёт для НДС под скидку
		Если глЕстьРеквизитМнЧ("СуммаНДСбезСкидки",конт.Вид())=1 Тогда
			
			БазаНалога=Конт.СуммаБезСкидки;
			Если ЕстьНП=1 Тогда
				Если Конт.СуммаВклНП=1 Тогда
					БазаНалога=Конт.СуммаБезСкидки/(1+СтНП);
				КонецЕсли;	
			КонецЕсли;
			Если Конт.СуммаВклНДС=1 Тогда
				Конт.СуммаНДСбезСкидки=БазаНалога*глВыделяемыйНДС(СтавкаНДС);//0.1667, 0.16666(6),...
			Иначе
				Конт.СуммаНДСбезСкидки=БазаНалога*глНачисляемыйНДС(СтавкаНДС);//0.20, 0.20004...
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Врег(ВидНалога)="НП" Тогда
		Если Конт.СуммаВклНДС=1 Тогда
			БазаНалога=Конт.Сумма;
		Иначе     
			БазаНалога=Конт.Сумма*(1+глНачисляемыйНДС(СтавкаНДС));
		КонецЕсли;
		Если Конт.СуммаВклНП=1 Тогда
			Конт.СуммаНП=БазаНалога*СтНП/(1+СтНП);
		Иначе     
			Конт.СуммаНП=БазаНалога*СтНП;
		КонецЕсли;             
	Иначе
		Сообщить("РасчетНалога(ВидНалога):неверный вид налога: "+ВидНалога,"i");
	КонецЕсли;     
	
КонецПроцедуры //глРасчетНалога()      

//******************************************************************************
//  глРасчетНалога(Конт,ВидНалога) 
//
// Параметры: 
// 	Конт      - контекст документа
//  ВидНалога - строка "НДС" или "НП"
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Рассчитываем сумму налога, подставляем ее в документ
//
Функция глРасчитатьНалог(Сумма,ВидНалога,СуммаВклНДС,СуммаВклНП) Экспорт
	
	
	Если Врег(ВидНалога)="НДС" Тогда
		Если СуммаВклНДС=1 Тогда
			Возврат Сумма*0.1667;//0.1667, 0.16666(6),...
		Иначе
			Возврат Сумма*0.20;//0.20, 0.20004...
		КонецЕсли;
		
	ИначеЕсли Врег(ВидНалога)="НП" Тогда
		
		Если СуммаВклНДС=1 Тогда
			БазаНалога=Сумма;
		Иначе     
			БазаНалога=Сумма - глРасчитатьНалог(Сумма,"НДС",СуммаВклНДС,СуммаВклНДС);
		КонецЕсли;
		
		Если СуммаВклНП=1 Тогда
			Возврат БазаНалога*0.05/1.05;
		Иначе     
			Возврат БазаНалога*0.05;
		КонецЕсли;             
	Иначе
		Сообщить("РасчетНалога(ВидНалога):неверный вид налога: "+ВидНалога,"i");
	КонецЕсли;     
	
КонецФункции //глРасчетНалога()      


//******************************************************************************
// глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены, ЦенаЦены, ЕдЦены, ВалЦены, НаценкаЦены, НайденнаяЦена) 
//
// Параметры: 
//  Номенклатура  - элемент справочника "Номенклатура"
//  ТипЦены       - элемент справочника "ТипыЦен"
//  ДатаЦены      - дата, на которую надо получить цену
//  ЦенаЦены      - переменная, которую надо заполнитиь значением (число) полученной цены
//  ЕдЦены        - переменная, которую надо заполнитиь значением 
//                  (элемент справочника Единицы) единицы, за которую дается цена
//  ВалЦены       - переменная, которую надо заполнитить значением валюты, в которой выражена цена 
//  НайденнаяЦена - переменная, которую надо заполнить найденным элементом справочника цен
//
// Возвращаемое значение:
//  1 - если есть такая цена, пераметры цены заполнены
//  0 - нет такой цены
// -1 - есть только цены, помеченные на удаление
//
// Описание:
//  Формирует ценовые характеристики номенклатурной единицы по заданному типу цен. 
//
Функция глВернутьЦену(Номенклатура, ТипЦены, ДатаЦены = 0, ЦенаЦены = 0, ЕдЦены = 0, ВалЦены = 0, НаценкаЦены = 0, НайденнаяЦена = 0) Экспорт
	Перем ЦеныНоменклатуры;
	Перем Рассчетная;
	Перем НужныйТипЦен;
	Перем ЕстьУдаленные;
	
	
	Рез = 1;
	НайденнаяЦена = ПолучитьПустоеЗначение("Справочник.Цены");
	
	Если ПустоеЗначение(ДатаЦены) = 1 Тогда
		ДатаЦены = РабочаяДата();
	КонецЕсли;
	
	// Найдет или нужную цену в справочнике
	// если она рассчитывается, то найдем базовую цену 
	Рассчетная		= ТипЦены.Рассчитывается;
	НужныйТипЦен	= ?(ПустоеЗначение(Рассчетная) = 1, ТипЦены, ТипЦены.БазовыйТипЦен);
	
	ЦеныНоменклатуры= СоздатьОбъект("Справочник.Цены");
	ЦеныНоменклатуры.ИспользоватьВладельца(Номенклатура); 
	ЦеныНоменклатуры.ВыбратьЭлементы();
	
	Пока ЦеныНоменклатуры.ПолучитьЭлемент()  = 1 Цикл    
		Если ЦеныНоменклатуры.ТипЦен <> НужныйТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		НайденнаяЦена = ЦеныНоменклатуры.ТекущийЭлемент();
		
		Если ЦеныНоменклатуры.ПометкаУдаления() = 1 Тогда
			Рез = - 1; // Цена есть, но помечена на удаление
			Продолжить;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;       
	
	Если ПустоеЗначение(НайденнаяЦена) = 1 Тогда
		
		// Нет такой цены
		Возврат 0;
	КонецЕсли;
	
	// Заполним все ценовые характериситики 
	
	// если не задана единица цены на эту дату, то потом придется обрабатывать случай нулевого коэффициента у  пустой единицы
	ЕдЦены		= НайденнаяЦена.Единица.Получить(ДатаЦены); 
	
	Если ПустоеЗначение(Рассчетная) = 1 Тогда
		
		//Если цена не рассчитывается
		ЦенаЦены	= НайденнаяЦена.Цена.Получить(ДатаЦены);
		
		// элемент справочника существует Валюту и Наценку возьмем из него
		ВалЦены		= НайденнаяЦена.Валюта;
		НаценкаЦены	= НайденнаяЦена.Процент;
	Иначе
		
		//Если цена рассчитывается
		БазоваяЦена 	= НайденнаяЦена.Цена.Получить(ДатаЦены);
		БазоваяВалюта	= НайденнаяЦена.Валюта;
		
		// Цены у базового типа могут отличаться
		ЦенаЦены    = глПересчет(БазоваяЦена, БазоваяВалюта, ДатаЦены, ТипЦены.Валюта, ДатаЦены);
		ЦенаЦены    = глОкруглить(ЦенаЦены * (100 + ТипЦены.Процент) / 100, ТипЦены.ПорядокОкругления);
		
		// элемент справочника Цены не существует (расчетный). Валюту и Наценку возьмем из типа цены
		ВалЦены		= ТипЦены.Валюта;
		НаценкаЦены	= ТипЦены.Процент;
	КонецЕсли;   
	
	//=================================================
	//  Выбираем скидку исходя из выбранной цены
	//=================================================
	
	//Если Номенклатура.Родитель.Скидка <> 0 Тогда
	//    ЦенаЦены = ЦенаЦены * ( 100 - Номенклатура.Родитель.Скидка ) / 100 ;
	//КонецЕсли;
	Возврат Рез;
КонецФункции // глВернутьЦену()

//******************************************************************************
// глПолучитьЦену(Номенклатура, Тип, НаДату, Единица, Валюта)
//
// Параметры: 
//  Номенклатура	- элемент справочника Номенклатура.
//  Тип				- элемент справочника ТипыЦен
//  НаДату			- дата, на которую берется цена
//  Единица			- элемент справочника Единицы
//  Валюта			- элемент справочника Валюты
//  Курс			- курс или дата курса
//
// Возвращаемое значение:
//  цену номенклатуры
//
// Описание:
//  Функция возвращает цену номенклатуры в указанном типе цен Тип, на дату НаДату,
//  за единицу измерения Единица, пересчитанную в валюту Валюта по курсу Курс
//
Функция глПолучитьЦену(Номенклатура, Тип, НаДату, Единица=0, Валюта=0, Курс=0) Экспорт
	Перем ЦенаЦены, ЕдЦены, ВалЦены;
	
	ЦенаЦены	= 0;
	
	Если глВернутьЦену(Номенклатура, Тип, НаДату, ЦенаЦены, ЕдЦены, ВалЦены) = 1 Тогда
		
		Если ПустоеЗначение(Единица) = 0 Тогда
			Если ЕдЦены <> Единица Тогда
				// единица цены отличается от единицы, в которой нужно вернуть цену
				ЦенаЦены	= ?(ПустоеЗначение(ЕдЦены.Коэффициент) = 1,0,ЦенаЦены * Единица.Коэффициент / ЕдЦены.Коэффициент);
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(Валюта) = 0 Тогда
			ЦенаЦены	= глПересчет(ЦенаЦены, ВалЦены, НаДату, Валюта, ?(ПустоеЗначение(Курс) = 1, НаДату, Курс));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЦенаЦены;
	
КонецФункции // глПолучитьЦену()

//******************************************************************************
// глПересчетРегистров(Конт, СписокПараметров, БезРасчетаРегистров)
//
// Параметры:
//  Конт                - контекст розничного документа,
//  СписокПараметров    - список параметров пересчета,
//  БезРасчетаРегистров - флаг, запрещающий пересчет регистров, не обязательный параметр,
//                        если пусто, то необходимость расчета определяестя по контексту.
//
// Возвращаемое значение:
//  1 - пересчет произведен, 0 - нет
//
// Описание:
// 	Производит пересчет регистра остатков ТМЦ и опционально резервов ТМЦ 
//  в соответствии с выбранными значениями фильтра.
//
Функция глПересчетРегистров(Конт, СписокПараметров, БезРасчетаРегистров = 0) Экспорт
	
	ОбщРег               = СписокПараметров.Получить("ОбщРег");
	ОстаткиТМЦ           = СписокПараметров.Получить("ОстаткиТМЦ");
	РезервыТМЦ           = СписокПараметров.Получить("РезервыТМЦ");
	ФильтрПоСкладу       = СписокПараметров.Получить("ФильтрПоСкладу");
	ФильтрПоФирме        = СписокПараметров.Получить("ФильтрПоФирме");
	ПозицияРегистра      = СписокПараметров.Получить("ПозицияРегистра");
	
	// Если прошлое значение фильтра не совпадает с текущим значением реквизита
	// то надо поменять фильтр
	Склад = Конт.Склад;
	Если ФильтрПоСкладу <> Склад Тогда
		ПозицияРегистра = ПолучитьПустоеЗначение("Дата"); // Надо пересчитывать регистры
		Если ПустоеЗначение(Склад) = 0 Тогда
			ОстаткиТМЦ.УстановитьЗначениеФильтра("Склад",Склад,1);
			Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
				РезервыТМЦ.УстановитьЗначениеФильтра("Склад",Склад,1);
			КонецЕсли;
			ФильтрПоСкладу  = Склад;
		Иначе     
			ОстаткиТМЦ.УстановитьЗначениеФильтра("Склад",,0);
			Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
				РезервыТМЦ.УстановитьЗначениеФильтра("Склад",,0);
			КонецЕсли;
			ФильтрПоСкладу  = ПолучитьПустоеЗначение("Справочник.Склады");
		КонецЕсли;               
	КонецЕсли;
	
	// Если прошлое значение фильтра не совпадает с текущим значением реквизита
	// то надо поменять фильтр
	Фирма = Конт.Фирма;
	Если ФильтрПоФирме <> Фирма Тогда
		ПозицияРегистра = ПолучитьПустоеЗначение("Дата"); // Надо пересчитывать регистры
		Если ПустоеЗначение(Фирма) = 0 Тогда  
			ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
			ОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ, 2);
			Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
				РезервыТМЦ.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ, 2);
			КонецЕсли;
			ФильтрПоФирме   = Фирма;
		Иначе     
			ОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",, 0);
			Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
				РезервыТМЦ.УстановитьЗначениеФильтра("Фирма",, 0);
			КонецЕсли;
			ФильтрПоФирме   = ПолучитьПустоеЗначение("Справочник.Фирмы");
		КонецЕсли;             
	КонецЕсли;                    
	
	// Определим необходимость расчета
	Если ПустоеЗначение(БезРасчетаРегистров) = 1  Тогда
		
		ГраницаРасчета = ПозицияРегистра;
		СпособРасчета  = "По";
		Если Конт.Выбран() = 0 Тогда
			Если Конт.ДатаДок < ПолучитьДатуТА() Тогда
				ГраницаРасчета = Конт.ДатаДок;      
			Иначе             
				ГраницаРасчета = ПолучитьПозициюТА();
			КонецЕсли;
		Иначе
			ПозДок = Конт.ПолучитьПозицию();
			Если ПозДок < ПолучитьПозициюТА() Тогда
				ГраницаРасчета = ПозДок; 
				СпособРасчета  = "На";
			Иначе             
				ГраницаРасчета = ПолучитьПозициюТА();
			КонецЕсли;
		КонецЕсли;
		Если ГраницаРасчета <> ПозицияРегистра Тогда
			
			//Снимаем фильтр по номенклатуре и пересчитываем
			ОстаткиТМЦ.УстановитьЗначениеФильтра("Номенклатура",,0);
			ОстаткиТМЦ.ВременныйРасчет();
			Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
				РезервыТМЦ.УстановитьЗначениеФильтра("Номенклатура",,0);
				РезервыТМЦ.ВременныйРасчет();
			КонецЕсли;
			Если СпособРасчета = "По" Тогда
				ОбщРег.РассчитатьРегистрыПо(ГраницаРасчета);
			Иначе
				ОбщРег.РассчитатьРегистрыНа(ГраницаРасчета);
			КонецЕсли;
			ПозицияРегистра = ГраницаРасчета; 
		КонецЕсли;
	КонецЕсли;
	
	
	СписокПараметров.Установить("ОбщРег"              , ОбщРег);
	СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
	
	Если ПустоеЗначение(РезервыТМЦ) = 0 Тогда
		СписокПараметров.Установить("РезервыТМЦ"      , РезервыТМЦ);
	КонецЕсли;
	
	СписокПараметров.Установить("ФильтрПоСкладу"      , ФильтрПоСкладу);
	СписокПараметров.Установить("ФильтрПоФирме"       , ФильтрПоФирме);
	СписокПараметров.Установить("ПозицияРегистра"     , ПозицияРегистра);
	
	Возврат 1;
	
КонецФункции // глПересчетРегистров()

//******************************************************************************
// глПолучитьРозничныйОстатокЦену(Номенклатура, Ед, ОстаткиТМЦ, ВозврОстаток, ВозврЦена)
//
// Параметры:
//  Номенклатура - элемент справочника номенклатура, для которого надо получить отстатки,
//  Ед           - элемент справочика единицы, за которую надо получать остатки и цены
//  ОстаткиТМЦ   - регистр остатки ТМЦ, расчитанный и отфильтрованный должным обраром,
//  ВозврОстаток - переменная (строка), в которую возвращаются остатки 
//                 (список значений через "значение в строку"), 
//  ВозврЦена    - переменная (строка), в которую возвращаются цены остатков 
//                 (список значений через "значение в строку"). 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Определяет по заранее рассчитанному и отфильтрованному (например, по складу и фирме) 
//  регистру "ОстаткиТМЦ" остатки затребованной ТМЦ в разрезе розничных цен,
//  и возвращает через параметры процедуры найденные списки остатков и их цен.
//
Процедура глПолучитьРозничныйОстатокЦену(Номенклатура, Ед, ОстаткиТМЦ, ВозврОстаток, ВозврЦена) Экспорт
	Перем ТаблОстатков;
	
	СписОстаток	= СоздатьОбъект("СписокЗначений");
	СписЦена	= СоздатьОбъект("СписокЗначений");
	
	ОстаткиТМЦ.УстановитьЗначениеФильтра("Номенклатура", Номенклатура, 1);
	
	ОстаткиТМЦ.ВыгрузитьИтоги(ТаблОстатков);
	ТаблОстатков.Свернуть("Номенклатура, ЦенаПрод", "Количество");
	ТаблОстатков.ВыбратьСтроки();
	
	Коэфф = Ед.Коэффициент;
	Пока ТаблОстатков.ПолучитьСтроку() = 1 Цикл
		НайденнаяЦена    = ТаблОстатков.ЦенаПрод   * Коэфф;
		НайденныйОстаток = ТаблОстатков.Количество / Коэфф;
		
		СписОстаток.ДобавитьЗначение(НайденныйОстаток);     
		
		// в представление каждой цены добавим еще и остаток (в скобках)
		СписЦена.ДобавитьЗначение(НайденнаяЦена, глФРМ(НайденнаяЦена) + 
		" (" + глФРМКоличество(НайденныйОстаток) + " " + Ед + ")");
	КонецЦикла;
	
	ВозврОстаток	= ЗначениеВстроку(СписОстаток);
	ВозврЦена		= ЗначениеВстроку(СписЦена);
	
КонецПроцедуры // глПолучитьРозничныйОстатокЦену()

//******************************************************************************
// глПересчитатьЦенуВДокументе(КонтекстДокумента, ЕстьНП, ЕстьНДС, Цена, 
//                             ВалютаЦены, ЦенаВклНП, ЦенаВклНДС, СтавкиНалоговИзДокумента = 0)
//
// Параметры: 
//  КонтекстДокумента        - контекст Документа,
//  ЕстьНП                   - если не пусто, то надо анализировать флаги включения НП в документе и в цене
//                             и пересчитывать НП при их несовпадении,
//  ЕстьНДС                  - если не пусто, то надо анализировать флаги включения НДС в документе и в цене
//                             и пересчитывать НДС при их несовпадении, 
//  Цена                     - новое зачение цены, 
//  ВалютаЦены               - валюта новой цены,
//  ЦенаВклНП                - флаг, определяющий что в новую цену включен НП,
//  ЦенаВклНДС               - флаг, определяющий что в новую цену включен НДС
//  СтавкиНалоговИзДокумента - флаг, определяющий откуда брать ставки налогов при пересчете,
//                             1 - из документа. 0 - из справочника.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет новое значение цены в текущей строке документа
//
Процедура глПересчитатьЦенуВДокументе(КонтекстДокумента, ЕстьНП, ЕстьНДС, Цена, 
	ВалютаЦены, ЦенаВклНП, ЦенаВклНДС, СтавкиНалоговИзДокумента = 0) Экспорт
	
	// Учитываем флаги включения налогов
	// Если в документе флаг "Учитывать налог" выключен, 
	// то цены должны браться напрямую из справочника.
	// Если же флаг включен, то цены должны пересчитываться при подстановке в документ: 
	// налог должен включаться или исключаться…
	НадоВключитьНП   = 0;
	НадоИсключитьНП  = 0;
	НадоВключитьНДС  = 0;
	НадоИсключитьНДС = 0;               
	СтавкаНПТМЦ      = 0;
	СтавкаНДСТМЦ     = 0;
	
	Если СтавкиНалоговИзДокумента = 1 Тогда 
		Если глЕстьРеквизитМнЧ("СтавкаНП", КонтекстДокумента.Вид()) = 1 Тогда
			СтавкаНПТМЦ      = КонтекстДокумента.СтавкаНП.Ставка;
		Иначе
			СтавкаНПТМЦ      = 0;
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("СтавкаНДС", КонтекстДокумента.Вид()) = 1 Тогда
			СтавкаНДСТМЦ     = КонтекстДокумента.СтавкаНДС;
		Иначе
			СтавкаНДСТМЦ      = 0;
		КонецЕсли;
	Иначе
		Если глЕстьРеквизитМнЧ("Номенклатура", КонтекстДокумента.Вид()) = 1 Тогда
			ТекТМЦ       = КонтекстДокумента.Номенклатура;
			СтавкаНПТМЦ  = ТекТМЦ.СтавкаНП.Ставка;
			СтавкаНДСТМЦ = ТекТМЦ.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьНП = 1 Тогда
		СтавкаНПКонт = КонтекстДокумента.СтавкаНП.Ставка;
		Если (КонтекстДокумента.СуммаВклНП = 1)
		И (ЦенаВклНП = 0) Тогда
			
			// Надо добавлять НП       
			НадоВключитьНП = 1;
		ИначеЕсли (КонтекстДокумента.СуммаВклНП = 0)
		И (ЦенаВклНП = 1) Тогда
			
			// Надо исключать НП       
			НадоИсключитьНП = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьНДС = 1 Тогда
		СтавкаНДСКонт = КонтекстДокумента.СтавкаНДС;
		Если (КонтекстДокумента.СуммаВклНДС = 1)
		И (ЦенаВклНДС = 0 ) Тогда
			
			// Надо добавлять НДС       
			НадоВключитьНДС = 1;
		ИначеЕсли (КонтекстДокумента.СуммаВклНДС = 0)
		И (ЦенаВклНДС = 1 ) Тогда
			
			// Надо исключать НДС       
			НадоИсключитьНДС = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если НадоИсключитьНП = 1 Тогда
		Цена = (Цена*100)/(100+ СтавкаНПТМЦ);
	КонецЕсли;
	
	Если НадоИсключитьНДС = 1 Тогда
		Цена = Цена - Цена*глВыделяемыйНДС(СтавкаНДСТМЦ);
	КонецЕсли;
	
	Если НадоВключитьНДС = 1 Тогда
		Цена = Цена + Цена*глНачисляемыйНДС(СтавкаНДСКонт);
	КонецЕсли;     
	
	Если НадоВключитьНП = 1 Тогда
		Цена = (Цена*(100+ СтавкаНПКонт))/100;
	КонецЕсли;
	
	// Пересчет валюты
	КонтекстДокумента.Цена = глПересчет(Цена,ВалютаЦены, КонтекстДокумента.ДатаДок,КонтекстДокумента.Валюта, КонтекстДокумента.Курс);
	
	// Если есть розничная цена, то расчитаем ее из наценки розничного типа цены
	Если (глЕстьРеквизитМнЧ("РозничнаяЦена", КонтекстДокумента.Вид()) = 1)
	И (глЕстьРеквизитМнЧ("РозничнаяНаценка", КонтекстДокумента.Вид()) = 1) Тогда
		
		// Розничная цена идет со всеми налогами
		РознЦена = КонтекстДокумента.Цена;                                                   
		Если ЕстьНДС = 1 Тогда
			Если КонтекстДокумента.СуммаВклНДС = 0 Тогда // Надо включить НДС
				РознЦена= РознЦена + РознЦена * глНачисляемыйНДС(СтавкаНДСКонт);
			КонецЕсли;
		КонецЕсли;
		Если ЕстьНП = 1 Тогда
			Если КонтекстДокумента.СуммаВклНП = 0 Тогда // Надо включить НП
				РознЦена = (РознЦена*(100+ СтавкаНПКонт))/100;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитаем в глРубли
		Если глЕстьРеквизитШапки("Валюта", КонтекстДокумента.Вид()) = 1 Тогда
			РознЦена = глПересчет(РознЦена, КонтекстДокумента.Валюта, КонтекстДокумента.Курс, глРубли, 1);
		КонецЕсли;
		
		// Наценим и округлим
		ПорядокОкругления = 0.01;
		Если Константа.РозничныйТипЦен.Выбран() = 1 Тогда
			ПорядокОкругления = Константа.РозничныйТипЦен.ПорядокОкругления;			    
		КонецЕсли;
		КонтекстДокумента.РозничнаяЦена= глОкруглить(РознЦена * (100 + КонтекстДокумента.РозничнаяНаценка) / 100, ПорядокОкругления);
		
	КонецЕсли;
	
	Если (глЕстьРеквизитМнЧ("ЦенаСоСкидкой", КонтекстДокумента.Вид()) = 1) Тогда
		КонтекстДокумента.ЦенаСоСкидкой = глПересчет(Цена,ВалютаЦены, КонтекстДокумента.ДатаДок,КонтекстДокумента.Валюта, КонтекстДокумента.Курс);
	КонецЕсли;
	
КонецПроцедуры // глПересчитатьЦенуВДокументе()

//******************************************************************************
// глПересчетТаблЧасти(Конт,ИмяРеквизита, ПараметрыРозничнойЦены)
//
// Параметры:                
// 	Конт                   - контекст документа,
//	ИмяРеквизита           - идентификатор текущей колонки табличной части,
//  ПараметрыРозничнойЦены - список значений для получения розничной цены из регистра остатков, если 
//                           не задан, то цена берется из справочника цен, если нужно.
//          
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Производится пересчет зависимых реквизитов при редактировании реквизита 
//  табличной части в документах, имеющих сумму и налоги в табличной части, 
//  однако не во всех. В некоторых документах (Например, Поступление ТМЦ Импорт) 
//  не используется  в связи со специфичностью пересчета.
//
Процедура глПересчетТаблЧасти(Конт,ИмяРеквизита, ПараметрыРозничнойЦены = 0) Экспорт  
	
	Перем ВремКоэфф, ВремЦена, НоваяНоменклатура;
	Перем ЕстьСкидка;    // 1 - в документе есть скидка, 0 - скидки нет
	Перем ПроцентСкидки;
	Перем ЕстьНДС, ЕстьНП, УчитыватьНДС, УчитыватьНП;
	Перем ЦенаЦены, ЕдЦены, ВалютаЦены;
	Перем ПорядокОкрРозничнойЦены; // порядок округления розничной цены
	
	ДатаДок	= Конт.ДатаДок;
	
	ЕстьТипЦен	= глЕстьРеквизитШапки("ТипЦен",Конт.Вид());
	ЕстьСкидка	= глЕстьРеквизитШапки("Скидка",Конт.Вид());
	ЕстьНДС		= глЕстьРеквизитМнЧ("СуммаНДС",Конт.Вид());
	ЕстьНП		= глЕстьРеквизитМнЧ("СуммаНП", Конт.Вид());
	
	Если ЕстьСкидка=1 Тогда
		ПроцентСкидки=Конт.Скидка;
	Иначе                                 
		ПроцентСкидки=0;
	КонецЕсли;
	
	
	
	ПорядокОкрРозничнойЦены = 0.01;
	Если Константа.РозничныйТипЦен.Выбран() = 1 Тогда
		ПорядокОкрРозничнойЦены = Константа.РозничныйТипЦен.ПорядокОкругления;			    
	КонецЕсли;
	
	Если ИмяРеквизита = "Номенклатура" Тогда
		Номенклатура=Конт.Номенклатура;
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			
			// Очистили Номенклатуру
			Конт.Единица 		= 0;
			Если глЕстьРеквизитМнЧ("Партия",Конт.Вид())=1 Тогда
				Конт.Партия		= 0;
			КонецЕсли;
			Конт.Коэффициент 	= 0;                  
			Конт.Цена			= 0;
			Конт.Количество 	= 0;
			Конт.Сумма 			= 0;     
			Если ЕстьНДС = 1 Тогда
				Конт.СуммаНДС	= 0;
			КонецЕсли;
			Если ЕстьНП = 1 Тогда
				Конт.СуммаНП	= 0;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// Определим, поменяли ли Номенклатуру?
		НоваяНоменклатура = 0;
		Если ПустоеЗначение(Конт.Единица) = 1 Тогда
			НоваяНоменклатура = 1;
		ИначеЕсли Номенклатура <> Конт.Единица.Владелец Тогда
			НоваяНоменклатура = 1;
		КонецЕсли;
		
		Если НоваяНоменклатура = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// проверим основную единицу товара
		Если Номенклатура <> Номенклатура.ОсновнаяЕдиница.Владелец Тогда
			Предупреждение("Для позиции номенклатуры """ + СокрЛП(Номенклатура) + 
			"""  указана основная единица измерения, принадлежащая другому элементу справочника Номенклатура.", 60);
			Возврат;
		КонецЕсли;
		
		// заполняем единицу
		Конт.Единица 		= Номенклатура.ОсновнаяЕдиница;
		Конт.Коэффициент 	= Конт.Единица.Коэффициент;    
		Если глЕстьРеквизитМнЧ("Партия",Конт.Вид())=1 Тогда
			// очистка партии, поскольку она принадлежит другой номенклатуре.
			Конт.Партия		= "";
		КонецЕсли;
		
		// Заполним ставки налогов 
		Если ЕстьНДС = 1 Тогда
			Конт.СтавкаНДС 	= Номенклатура.СтавкаНДС;		
		КонецЕсли;
		Если ЕстьНП = 1 Тогда
			Конт.СтавкаНП 	= Номенклатура.СтавкаНП;
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("РозничнаяНаценка",  Конт.Вид()) = 1 Тогда
			Если Конт.РозничнаяНаценка = 0 Тогда
				// получим наценку из розничной цены
				РознНаценка	= 0;
				глВернутьЦену(Номенклатура, Константа.РозничныйТипЦен, Конт.ДатаДок, , , , РознНаценка, );
				Если РознНаценка = 0 Тогда
					Конт.РозничнаяНаценка	= Константа.РозничныйТипЦен.Процент;
				Иначе
					Конт.РозничнаяНаценка	= РознНаценка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;                                                                     
		
		Если ПустоеЗначение(ПараметрыРозничнойЦены) = 0 Тогда 
			
			// цену надо взять розничную из регистра. Кроме услуг.
			Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда  
				
				// Для услуг берем цену типа, заданную в константе
				ТипЦен = Константа.РозничныйТипЦен;
				
				// нет типа цен, нет и цены
				Если ПустоеЗначение(ТипЦен) = 1 Тогда
					Возврат;
				КонецЕсли;
				
				Валюта	= Конт.Валюта;
				Курс	= Конт.Курс;
				
				// получим параметры цены
				Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
					Возврат; // для товара цены нет
				КонецЕсли;
				
				УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
				УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
				
				// В документе хочется видеть цену за ту единицу, за которую цена задана.
				Конт.Единица 		= ЕдЦены;
				Конт.Коэффициент 	= ЕдЦены.Коэффициент;    
				
				глПересчитатьЦенуВДокументе(Конт, УчитыватьНП, УчитыватьНДС, ЦенаЦены, ВалютаЦены, 
				ТипЦен.ЦенаВклНП, ТипЦен.ЦенаВклНДС);  
				
			Иначе // не услуга, нужна розничная цена
				
				// м.б. надо рассчитать регистры
				Если глПересчетРегистров(Конт, ПараметрыРозничнойЦены) = 0 Тогда
					Возврат;
				КонецЕсли;
				ТовЦена = "";
				глПолучитьРозничныйОстатокЦену(Конт.Номенклатура, Конт.Единица, ПараметрыРозничнойЦены.Получить("ОстаткиТМЦ"), , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				Если СписокЦен.РазмерСписка() = 0 Тогда
					Конт.Цена = 0;
				Иначе
					Конт.Цена = СписокЦен.ПолучитьЗначение(1);
				КонецЕсли;
			КонецЕсли; // Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга 
			
		Иначе // цены нужно брать из справочника
			Если ЕстьТипЦен = 1 Тогда
				
				// нет типа цен, нет и цены
				Если ПустоеЗначение(Конт.ТипЦен) = 1 Тогда
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
			
			Валюта	= Конт.Валюта;
			Курс	= Конт.Курс;
			
			// получим параметры цены
			Если глВернутьЦену(Номенклатура, Конт.ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
				Возврат; // для товара цены нет
			КонецЕсли;
			
			УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
			УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
			
			// В документе хочется видеть цену за ту единицу, за которую цена задана.
			Конт.Единица 		= ЕдЦены;
			Конт.Коэффициент 	= ЕдЦены.Коэффициент;    
			
			глПересчитатьЦенуВДокументе(Конт, УчитыватьНП, УчитыватьНДС, ЦенаЦены, ВалютаЦены, 
			Конт.ТипЦен.ЦенаВклНП, Конт.ТипЦен.ЦенаВклНДС);
			
		КонецЕсли; // ПустоеЗначение(ПараметрыРозничнойЦены) = 0
		
		
		__Количество  = Конт.Количество;
		Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
			Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
				__Количество  = Конт.ВНаличии;
			КонецЕсли;
		КонецЕсли;
		__СуммаСкидки = Конт.Цена*__Количество;
		Конт.Сумма = ?(100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
		Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
			Если Конт.Мультик = 1 Тогда
				Конт.Сумма = ?(Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма<>0,( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма),Конт.Сумма) ;
			иначе
				Конт.Сумма = ?(Конт.Скидка/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество);
			КонецЕсли;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Если (Конт.Вид() = "ЗаявкаПокупателя") и (__Количество > 0) Тогда
				Конт.ЦенаСоСкидкой = (Конт.Сумма - Конт.СуммаСкидки) / __Количество;
			КонецЕсли;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		
		//работа с новым типом документов - тут не нужны "мультиплексоры"
		Если Конт.Вид() = "ЗаявкаСССервис" Тогда
			Конт.Сумма = ?(Конт.Скидка/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество);
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;  
	
		//++Ирина МЭТР 
		Конт.АртикулИМ = Конт.Номенклатура.АртикулИМ;
		//--Ирина МЭТР
	ИначеЕсли ( ИмяРеквизита = "Количество" )  ИЛИ  ( ИмяРеквизита = "ВНаличии" ) Тогда
		
		__Количество  = Конт.Количество;
		Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
			Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
				__Количество  = Конт.ВНаличии;
			КонецЕсли;
		КонецЕсли;
		
		если (конт.Вид()="ПоступлениеТМЦ") или (конт.Вид()="ПеремещениеТМЦ_Розница") Тогда
			если конт.набран=0 тогда
				Конт.Количество2=__Количество;
			КонецЕсли;
		КонецЕсли;
		__СуммаСкидки = Конт.Цена*__Количество;
		Конт.Сумма = ?(100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
		Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
			Если Конт.Мультик = 1 Тогда
				Конт.Сумма = ?(Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма<>0,( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма),Конт.Сумма) ;
			иначе
				Конт.Сумма = ?(ПроцентСкидки/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			КонецЕсли;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Если Конт.Вид() = "ЗаявкаПокупателя" Тогда
				Конт.ЦенаСоСкидкой = (Конт.Сумма - Конт.СуммаСкидки) / __Количество;
			КонецЕсли;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		//работа с новым типом документов - тут не нужны "мультиплексоры"
		Если Конт.Вид() = "ЗаявкаСССервис" Тогда
			Конт.Сумма = ?(ПроцентСкидки/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Единица" Тогда	
		
		// сохраним старый коэффициент
		ВремКоэфф = Конт.Коэффициент;
		
		// заполним коэффициент в документе из единицы
		Конт.Коэффициент = Конт.Единица.Коэффициент;
		Если ВремКоэфф <> 0 Тогда
			
			// цена была за другой коэффициент. Пересчитываем
			ВремЦена = Конт.Цена * Конт.Коэффициент / ВремКоэфф;         
			
			Если (глЕстьРеквизитМнЧ("РозничнаяЦена", Конт.Вид()) = 1) Тогда
				
				// Пересчитаем и округлим розничную цену
				Конт.РозничнаяЦена = глОкруглить(Конт.РозничнаяЦена * Конт.Коэффициент / ВремКоэфф, ПорядокОкрРозничнойЦены);
			КонецЕсли;
			
		КонецЕсли;
		Конт.Цена  = ВремЦена;            
		__Количество  = Конт.Количество;
		
		Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
			Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
				__Количество  = Конт.ВНаличии;
			КонецЕсли;
			
		КонецЕсли;
		__СуммаСкидки = Конт.Цена*__Количество;
		Конт.Сумма = ?(ПроцентСкидки/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
		Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
			Если Конт.Мультик = 1 Тогда
				Конт.Сумма = ?(Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма<>0,( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма),Конт.Сумма) ;
			иначе
				Конт.Сумма = ?(ПроцентСкидки/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			КонецЕсли;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Если Конт.Вид() = "ЗаявкаПокупателя" Тогда
				Конт.ЦенаСоСкидкой = (Конт.Сумма - Конт.СуммаСкидки) / __Количество;
			КонецЕсли;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		//работа с новым типом документов - тут не нужны "мультиплексоры"
		Если Конт.Вид() = "ЗаявкаСССервис" Тогда
			Конт.Сумма = ?(ПроцентСкидки/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		КонецЕсли;
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Цена" Тогда
		__Количество  = Конт.Количество;
		Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
			Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
				__Количество  = Конт.ВНаличии;
			КонецЕсли;
		КонецЕсли;
		__СуммаСкидки = Конт.Цена*__Количество;
		Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
			Конт.Сумма = ?(Конт.Скидка/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			Если Конт.Мультик = 1 Тогда
				Конт.Сумма = ?(Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма<>0,( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма),Конт.Сумма ) ;
			иначе
				Конт.Сумма = ?(Конт.Скидка/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			КонецЕсли;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Если Конт.Вид() = "ЗаявкаПокупателя" Тогда
				Конт.ЦенаСоСкидкой = (Конт.Сумма - Конт.СуммаСкидки) / __Количество;
			КонецЕсли;	
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		иначеЕсли (Конт.Вид() = "ЗаявкаСССервис") Тогда
			Конт.Сумма = ?(Конт.Скидка/100*Конт.Цена*__Количество<>0,( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество),Конт.Цена*__Количество) ;
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		иначе
			Конт.Сумма = Конт.Цена*__Количество;
		КонецЕсли;
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;
		
		// Если есть розничная цена, то расчитаем ее из наценки розничного типа цены
		Если (глЕстьРеквизитМнЧ("РозничнаяЦена", Конт.Вид()) = 1) И (глЕстьРеквизитМнЧ("РозничнаяНаценка", Конт.Вид()) = 1) Тогда
			
			УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
			УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
			
			// Розничная цена идет со всеми налогами
			РознЦена = Конт.Цена;
			Если УчитыватьНДС > 0 Тогда
				Если Конт.СуммаВклНДС = 0 Тогда // Надо включить НДС
					РознЦена= РознЦена + РознЦена * глНачисляемыйНДС(Конт.СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
			Если УчитыватьНП > 0 Тогда
				Если Конт.СуммаВклНП = 0 Тогда // Надо включить НП
					РознЦена = (РознЦена*(100+ Конт.СтавкаНП.Ставка))/100;
				КонецЕсли;
			КонецЕсли;
			
			// Пересчитаем в глРубли
			Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = 1 Тогда
				РознЦена = глПересчет(РознЦена, Конт.Валюта, Конт.Курс, глРубли, 1);
			КонецЕсли;
			
			// Наценим и округлим
			Конт.РозничнаяЦена= глОкруглить(РознЦена * (100 + Конт.РозничнаяНаценка) / 100, ПорядокОкрРозничнойЦены);
		КонецЕсли;
		
	ИначеЕсли (ИмяРеквизита = "РозничнаяЦена") И (глЕстьРеквизитМнЧ("РозничнаяНаценка", Конт.Вид()) = 1) Тогда
		УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
		УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
		// Розничная цена идет со всеми налогами
		ЦенаСНалогами = Конт.Цена;
		Если УчитыватьНДС > 0 Тогда
			Если Конт.СуммаВклНДС = 0 Тогда // Надо включить НДС
				ЦенаСНалогами= ЦенаСНалогами + ЦенаСНалогами * глНачисляемыйНДС(Конт.СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		Если УчитыватьНП > 0 Тогда
			Если Конт.СуммаВклНП = 0 Тогда // Надо включить НП
				ЦенаСНалогами = (ЦенаСНалогами*(100+ Конт.СтавкаНП.Ставка))/100;
			КонецЕсли;
		КонецЕсли;
		
		// Для вычисления наценки пересчитаем из глРубли в валюту документа
		Если ЦенаСНалогами <> 0 Тогда                                                     
			РознЦена = Конт.РозничнаяЦена;
			Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = 1 Тогда
				РознЦена = глПересчет(Конт.РозничнаяЦена, глРубли, 1, Конт.Валюта, Конт.Курс);
			КонецЕсли;
			Конт.РозничнаяНаценка = (РознЦена - ЦенаСНалогами) / ЦенаСНалогами * 100;    
		Иначе
			Конт.РозничнаяНаценка = 0;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "РозничнаяНаценка" Тогда
		УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
		УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
		// Розничная цена идет со всеми налогами
		ЦенаСНалогами = Конт.Цена;
		Если УчитыватьНДС > 0 Тогда
			Если Конт.СуммаВклНДС = 0 Тогда // Надо включить НДС
				ЦенаСНалогами= ЦенаСНалогами + ЦенаСНалогами * глНачисляемыйНДС(Конт.СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		Если УчитыватьНП > 0 Тогда
			Если Конт.СуммаВклНП = 0 Тогда // Надо включить НП
				ЦенаСНалогами = (ЦенаСНалогами*(100+ Конт.СтавкаНП.Ставка))/100;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитаем в глРубли
		Если глЕстьРеквизитШапки("Валюта", Конт.Вид()) = 1 Тогда
			ЦенаСНалогами = глПересчет(ЦенаСНалогами, Конт.Валюта, Конт.Курс, глРубли, 1);
		КонецЕсли;
		
		// Наценим и округлим
		Конт.РозничнаяЦена= глОкруглить(ЦенаСНалогами * (100 + Конт.РозничнаяНаценка) / 100, ПорядокОкрРозничнойЦены);
		
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;    
		
		Если Конт.Вид() <> "ПоступлениеДопРасходы" Тогда
			Если Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок) <> 0 Тогда
				Конт.Цена = Конт.Цена * ( 100 - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок) ) / 100 ;
			КонецЕсли;        
		КонецЕсли;
		//=================================================
		
		Если (ЕстьСкидка=1) Тогда
			Если Конт.Скидка  > 0 Тогда
				Конт.Цена = ?(Конт.Количество = 0, 0, ?(Конт.Цена=0,Конт.Сумма/Конт.Количество,Конт.Цена));
			Иначе     
				Конт.Цена = ?(Конт.Количество = 0, 0, Конт.Сумма/Конт.Количество);
			КонецЕсли;
		Иначе
			Конт.Цена = ?(Конт.Количество = 0, 0, Конт.Сумма/Конт.Количество);
		КонецЕсли;
		
	ИначеЕсли (ИмяРеквизита = "СтавкаНДС") или (ИмяРеквизита = "СтавкаНП") Тогда
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;
	//иначеесли Конт.Вид() = "ЗаявкаСССервис" тогда	//Чтобы пересчитывала скидку, если все остальные условия сбиты
	//	Конт.СуммаСкидки=окр(Конт.Цена*Конт.Количество,2,1)-Конт.Сумма;
	КонецЕсли;
	
КонецПроцедуры // глПересчетТаблЧасти()

//******************************************************************************
// глПересчетТаблЧасти(Конт,ИмяРеквизита)
//
// Параметры:                
// 	Конт                   - контекст документа,
//	ИмяРеквизита           - идентификатор текущей колонки табличной части,
//          
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Производится пересчет зависимых реквизитов при редактировании реквизита 
//  табличной части в документах, имеющих сумму и налоги в табличной части, 
//  Учавствует в розничных документах, т.к. охота всю розницу
//	выделить в отдельный блок расчётов, с независимыми модулями расчётов
Процедура глПересчетТЧ_розница(Конт,ИмяРеквизита, ДатаЦены = "") Экспорт
	Перем ВремКоэфф, ВремЦена, НоваяНоменклатура;
	Перем ЕстьСкидка;    // 1 - в документе есть скидка, 0 - скидки нет
	Перем ПроцентСкидки;
	Перем ЕстьНДС, ЕстьНП, УчитыватьНДС, УчитыватьНП;
	Перем ЦенаЦены, ЕдЦены, ВалютаЦены;
	Перем ПорядокОкрРозничнойЦены; // порядок округления розничной цены
	
	Если ДатаЦены = "" Тогда 
		ДатаДок	= Конт.ДатаДок;
	Иначе
		ДатаДок	= ДатаЦены;
	КонецЕсли;	
	
	ЕстьТипЦен	= глЕстьРеквизитШапки("ТипЦен",Конт.Вид());
	ЕстьСкидка	= глЕстьРеквизитШапки("Скидка",Конт.Вид());
	ЕстьНДС		= глЕстьРеквизитМнЧ("СуммаНДС",Конт.Вид());
	ЕстьНП		= глЕстьРеквизитМнЧ("СуммаНП", Конт.Вид());
	
	Если ЕстьСкидка = 1 Тогда
		Если глЕстьРеквизитШапки("ВыданоСоСкидкой",Конт.Вид())=1 Тогда
			Если Конт.ВыданоСоСкидкой = 0 Тогда
				ПроцентСкидки = 0;
			Иначе
				ПроцентСкидки = Конт.Скидка;
			КонецЕсли;
		КонецЕсли;
	Иначе                                 
		ПроцентСкидки=0;
	КонецЕсли;
	
	//Если ПустоеЗначение(Конт.Номенклатура) = 0 Тогда
	//	ПроцентПоАкции = глПолучитьПроцентпоАкции(Конт.Номенклатура, Конт.ДатаДок);
	//Иначе
	//	ПроцентПоАкции = 0;
	//КонецЕсли;
	
	
	
	ПорядокОкрРозничнойЦены = 0.01;
	Если Константа.РозничныйТипЦен.Выбран() = 1 Тогда
		ПорядокОкрРозничнойЦены = Константа.РозничныйТипЦен.ПорядокОкругления;			    
	КонецЕсли;

	Если (ИмяРеквизита = "Номенклатура") 
	или (ИмяРеквизита = "ТипЦен") Тогда
		Номенклатура=Конт.Номенклатура;
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			
			// Очистили Номенклатуру
			Конт.Единица 			= 0;
			Если глЕстьРеквизитМнЧ("Партия",Конт.Вид())=1 Тогда
				Конт.Партия			= 0;
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("СуммаСкидки",Конт.Вид())=1 Тогда
				Конт.СуммаСкидки	= 0;
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("СуммаБезСкидки",Конт.Вид())=1 Тогда
				Конт.СуммаБезСкидки	= 0;
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("ЦенаСоСкидкой",Конт.Вид())=1 Тогда
				Конт.ЦенаСоСкидкой	= 0;
			КонецЕсли;
			Если глЕстьРеквизитМнЧ("СуммаНДСБезСкидки",Конт.Вид())=1 Тогда
				Конт.СуммаНДСБезСкидки= 0;
			КонецЕсли;
			
			//++Валерий МЭТР: повышение
			Если глЕстьРеквизитМнЧ("ЦенаБезПовышения",Конт.Вид())=1 Тогда
				Конт.ЦенаБезПовышения = 0;
			КонецЕсли;
			//--Валерий МЭТР: повышение 
			
			Конт.Коэффициент 	= 0;                  
			Конт.Цена			= 0;
			Конт.Количество 	= 0;
			Конт.Сумма 			= 0;     
			Если ЕстьНДС = 1 Тогда
				Конт.СуммаНДС	= 0;
			КонецЕсли;
			Если ЕстьНП = 1 Тогда
				Конт.СуммаНП	= 0;
			КонецЕсли;
			Возврат;
		КонецЕсли;
		
		// Определим, поменяли ли Номенклатуру?
		НоваяНоменклатура = 0;
		Если ПустоеЗначение(Конт.Единица) = 1 Тогда
			НоваяНоменклатура = 1;
		ИначеЕсли Номенклатура <> Конт.Единица.Владелец Тогда
			НоваяНоменклатура = 1;
		КонецЕсли;
		
		Если (НоваяНоменклатура = 0) 
		 и (ИмяРеквизита <> "ТипЦен") Тогда
			Возврат;
		КонецЕсли;
		
		// проверим основную единицу товара
		Если Номенклатура <> Номенклатура.ОсновнаяЕдиница.Владелец Тогда
			Предупреждение("Для позиции номенклатуры """ + СокрЛП(Номенклатура) + 
			"""  указана основная единица измерения, принадлежащая другому элементу справочника Номенклатура.", 60);
			Возврат;
		КонецЕсли;
		
		// заполняем единицу
		Конт.Единица 		= Номенклатура.ОсновнаяЕдиница;
		Конт.Коэффициент 	= Конт.Единица.Коэффициент;    
		Если глЕстьРеквизитМнЧ("Партия",Конт.Вид())=1 Тогда
			// очистка партии, поскольку она принадлежит другой номенклатуре.
			Конт.Партия		= "";
		КонецЕсли;
		
		// Заполним ставки налогов 
		Если ЕстьНДС = 1 Тогда
			Конт.СтавкаНДС 	= Номенклатура.СтавкаНДС;		
		КонецЕсли;
		Если ЕстьНП = 1 Тогда
			Конт.СтавкаНП 	= Номенклатура.СтавкаНП;
		КонецЕсли;
		
		Если ЕстьТипЦен = 1 Тогда
			
			// нет типа цен, нет и цены
			Если ПустоеЗначение(Конт.ТипЦен) = 1 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		Валюта	= Конт.Валюта;
		Курс	= Конт.Курс;
		
		// получим параметры цены
		Если глВернутьЦену(Номенклатура, Конт.ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
			Возврат; // для товара цены нет
		КонецЕсли;
		
		УчитыватьНП  = ?(ЕстьНП  = 1,Конт.УчитыватьНП,  0);
		УчитыватьНДС = ?(ЕстьНДС = 1,Конт.УчитыватьНДС, 0);
		
		// В документе хочется видеть цену за ту единицу, за которую цена задана.
		Конт.Единица 		= ЕдЦены;
		Конт.Коэффициент 	= ЕдЦены.Коэффициент;    
		
		глПересчитатьЦенуВДокументе(Конт, УчитыватьНП, УчитыватьНДС, ЦенаЦены, ВалютаЦены, 
		Конт.ТипЦен.ЦенаВклНП, Конт.ТипЦен.ЦенаВклНДС);
		
		//++Валерий МЭТР: повышение
		Если глЕстьРеквизитМнЧ("ЦенаБезПовышения",Конт.Вид())=1 Тогда
			Конт.ЦенаБезПовышения = Конт.Цена;
		КонецЕсли;
		//--Валерий МЭТР: повышение 
			
		//Если Конт.Вид() = "ЗаявкаКлиентаРозница" Тогда
		//	Конт.Цен = Окр(Конт.Цен,1);
		//КонецЕсли;	
		
		__Количество  		= Конт.Количество;
		
		Если ПроцентСкидки <> 0 тогда
			//Если ПроцентПоАкции <> 0 Тогда
			//	__ЦенаСоСкидкой		= ?((Конт.Скидка + ПроцентПоАкции)/100*Конт.Цена<>0,глОкруглить((Конт.Цена-(Конт.Скидка + ПроцентПоАкции)/100*Конт.Цена),ПорядокОкрРозничнойЦены),Конт.Цена);
			//Иначе	
				__ЦенаСоСкидкой		= ?(Конт.Скидка/100*Конт.Цена<>0,глОкруглить((Конт.Цена-Конт.Скидка/100*Конт.Цена),ПорядокОкрРозничнойЦены),Конт.Цена);
			//КонецЕсли;
		Иначе
			//Если ПроцентПоАкции <> 0 Тогда
			//	__ЦенаСоСкидкой		= ?(ПроцентПоАкции/100*Конт.Цена<>0,глОкруглить((Конт.Цена-ПроцентПоАкции/100*Конт.Цена),ПорядокОкрРозничнойЦены),Конт.Цена);
			//Иначе
				__ЦенаСоСкидкой		= Конт.Цена ;
			//КонецЕсли;	
		КонецЕсли; 
		
		Если Конт.Вид() = "ЗаявкаКлиентаРозница" Тогда
			__ЦенаСоСкидкой = Окр(__ЦенаСоСкидкой,1);
		КонецЕсли;
		
		Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
		Конт.СуммаБезСкидки = __Количество*Конт.Цена;
		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
		Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
		
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;  
		
		//++Ирина МЭТР 
		Попытка
			Конт.АртикулИМ = Конт.Номенклатура.АртикулИМ;
		Исключение
		КонецПопытки;
		//--Ирина МЭТР

	ИначеЕсли (ИмяРеквизита = "Количество") или (ИмяРеквизита = "Цена") Тогда
	
		//++Валерий МЭТР: повышение
		Если ИмяРеквизита = "Цена" Тогда
			Если глЕстьРеквизитМнЧ("ЦенаБезПовышения",Конт.Вид())=1 Тогда
				Конт.ЦенаБезПовышения = Конт.Цена;
			КонецЕсли;   
		КонецЕсли;
		//--Валерий МЭТР: повышение
		
		__Количество		= Конт.Количество;
		
		Если ПроцентСкидки <> 0 тогда
			//Если ПроцентПоАкции <> 0 Тогда
			//	__ЦенаСоСкидкой		= глОкруглить(Конт.Цена*(100-(Конт.Скидка + ПроцентПоАкции))/100,ПорядокОкрРозничнойЦены);
			//Иначе	
				__ЦенаСоСкидкой		= глОкруглить(Конт.Цена*(100-Конт.Скидка)/100,ПорядокОкрРозничнойЦены);
			//КонецЕсли;
		Иначе
			//Если ПроцентПоАкции <> 0 Тогда
			//	__ЦенаСоСкидкой		= ?(ПроцентПоАкции/100*Конт.Цена<>0,глОкруглить((Конт.Цена-ПроцентПоАкции/100*Конт.Цена),ПорядокОкрРозничнойЦены),Конт.Цена);
			//Иначе
				__ЦенаСоСкидкой		= Конт.Цена ;
			//КонецЕсли;	
		КонецЕсли;
		    
		Если Конт.Вид() = "ЗаявкаКлиентаРозница" Тогда
			__ЦенаСоСкидкой = Окр(__ЦенаСоСкидкой,1);
		КонецЕсли;
		
		Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
		Конт.СуммаБезСкидки = __Количество*Конт.Цена;
		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
		Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
		
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;  
	ИначеЕсли ИмяРеквизита = "ЦенаСоСкидкой" Тогда		
		СкидкаКонтрагента 	= Конт.Контрагент.Скидка_Розница.Получить(Конт.ДатаДок); 
		Если Конт.Вид() = "РасходнаяНакладнаяРозница" Тогда
			Если Конт.Повышение = 1 Тогда
				ПовышениеСкидки 	= Константа.ПолучитьАтрибут("ПовышениеСкидки");
				СкидкаКонтрагента 	= СкидкаКонтрагента + ПовышениеСкидки;	
			КонецЕсли;
		КонецЕсли;
		
		//Если Конт.Вид() = "РасходнаяНакладнаяРозница" Тогда
		//	Если Конт.ЦенаБезПовышения = 0 Тогда
		//		Конт.ЦенаБезПовышения = Конт.Цена;
		//	КонецЕсли;
		//	
		//	Если Конт.Повышение = 1 Тогда
		//		ПовышениеЦены = Константа.ПолучитьАтрибут("ПовышениеЦены");
		//		Конт.Цена = Конт.ЦенаБезПовышения + Конт.ЦенаБезПовышения*ПовышениеЦены/100;
		//	Иначе
		//		Конт.Цена = Конт.ЦенаБезПовышения;
		//	КонецЕсли; 
		//КонецЕсли;
		//--Валерий МЭТР: повышение			
		
		//++Добавлено: Валерий МЭТР     
		Если ПроцентСкидки <> 0 Тогда
			Если СкидкаКонтрагента <= ПроцентСкидки Тогда
				ПроцентПоАкции = глПолучитьПроцентпоАкции(Конт.Номенклатура, Конт.ДатаДок);
			Иначе
				ПроцентПоАкции = 0;
			КонецЕсли;	
		Иначе
			ПроцентПоАкции = 0;
		КонецЕсли;
		
		__Количество		= Конт.Количество;
		Если ПроцентСкидки <> 0 Тогда
			Если СкидкаКонтрагента <= ПроцентСкидки Тогда
				ПроцентПоАкции = глПолучитьПроцентпоАкции(Конт.Номенклатура, Конт.ДатаДок);
			Иначе
				ПроцентПоАкции = 0;
			КонецЕсли;
			
			//++Валерий МЭТР: исправление расчета цены
			Сообщить("Внимание! Возможны ошибки округления при редактировании цены со скидкой!","!");
			//__Цена				= Конт.ЦенаСоСкидкой*(1+(Конт.Скидка/100));
			
			Если Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) = 0 Тогда			
				//СкидкаКарта
				__Цена = Конт.ЦенаСоСкидкой/(1-((ПроцентСкидки + ПроцентПоАкции)/100));
							
			ИначеЕсли СкидкаКонтрагента >= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) Тогда			
				//СкидкаТовар
				__Количество  		= Конт.Количество;  
				
				//++Валерий МЭТР: механизм деления скидки - приоритетная скидка делится пропорционально
				ПоделеннаяПриоритетнаяСкидка 		= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок);
				Если СкидкаКонтрагента <> 0 Тогда
					ПоделеннаяПриоритетнаяСкидка 	= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) * ПроцентСкидки / СкидкаКонтрагента; 
				КонецЕсли; 
				   
				__Цена = Конт.ЦенаСоСкидкой/(1-((ПоделеннаяПриоритетнаяСкидка)/100));
							
			ИначеЕсли СкидкаКонтрагента < Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) Тогда
				Если (Конт.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
					//++Валерий МЭТР: механизм деления скидки
					ПоделеннаяПриоритетнаяСкидка = Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок);
					Если СкидкаКонтрагента <> 0 Тогда
						ПоделеннаяПриоритетнаяСкидка = Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) * ПроцентСкидки / СкидкаКонтрагента; 
					КонецЕсли;
					
					__Цена = Конт.ЦенаСоСкидкой/(1-((ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)/100));
				Иначе
					//СкидкаКарта
					__Цена = Конт.ЦенаСоСкидкой/(1-((ПроцентСкидки + ПроцентПоАкции)/100));
				КонецЕсли;
			КонецЕсли;
			
			Если Конт.Скидка = 100 Тогда
				__Цена = Конт.ЦенаСоСкидкой;
			КонецЕсли;
			//--Валерий МЭТР: исправление расчета цен
		Иначе
			__Цена				= Конт.ЦенаСоСкидкой;
		КонецЕсли;
		
		//++Валерий МЭТР: повышение
		Если глЕстьРеквизитМнЧ("ЦенаБезПовышения",Конт.Вид())=1 Тогда
			__ЦенаБезПовышения = __Цена;
			Если Конт.Повышение = 1 Тогда
				ПовышениеЦены = Константа.ПолучитьАтрибут("ПовышениеЦены");
				Если ПовышениеЦены <> 100 Тогда
					__ЦенаБезПовышения = __Цена/(1+(ПовышениеЦены/100));
				КонецЕсли;
			КонецЕсли;			
			Конт.ЦенаБезПовышения = __ЦенаБезПовышения;
		КонецЕсли;
		//--Валерий МЭТР: повышение 
		
		Конт.Сумма 			= Конт.ЦенаСоСкидкой * __Количество;
		Конт.СуммаБезСкидки = __Количество * __Цена;
		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
		Конт.Цена			= __Цена;
		
		Если ЕстьНП = 1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если ЕстьНДС = 1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;  
	КонецЕсли;
	
	Если (глЕстьРеквизитШапки("Оплачено", Конт.Вид()) = 1)
		и (Конт.Вид() <> "ЗаявкаКлиентаРозница") Тогда
		Конт.Оплачено	= Конт.Итог("Сумма");
	КонецЕсли;


КонецПроцедуры // глПересчетТЧ_розница()

//******************************************************************************
// глПересчитатьНалоги(Конт, ЦенаВклНП, ЦенаВклНДС)
//
// Параметры: 
//  Конт       - контекст документа,
//  ЦенаВклНП  - цены были заданы с учетом НП, 
//  ЦенаВклНДС - цены были заданы с учетом НДС
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Пересчивает все строки документа при изменении параметров налогобложения
//
Процедура глПересчитатьНалоги(Конт, ЦенаВклНП, ЦенаВклНДС) Экспорт
	
	ВидДок = Конт.Вид();
	ЕстьУчитыватьНП		= глЕстьРеквизитШапки("УчитыватьНП", ВидДок);
	ЕстьУчитыватьНДС	= глЕстьРеквизитШапки("УчитыватьНДС",ВидДок);
	
	// если документ выписан с розничного склада, то пересчитывать цену не нужно
	ПересчитыватьЦену	= 1;
	ЕстьСклад			= глЕстьРеквизитШапки("Склад",ВидДок); 
	Если ЕстьСклад = 1 Тогда
		Если Конт.Склад.РозничныйСклад = 1 Тогда
			ПересчитыватьЦену	= 0;
		КонецЕсли;
	КонецЕсли;
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1 Цикл
		Если ПересчитыватьЦену = 1 Тогда
			глПересчитатьЦенуВДокументе(Конт, ЕстьУчитыватьНП, ЕстьУчитыватьНДС, Конт.Цена, Конт.Валюта,
			ЦенаВклНП, ЦенаВклНДС, 1);
		КонецЕсли;
		глПересчетТаблЧасти(Конт,"Цена");
	КонецЦикла;   
	
КонецПроцедуры // глПересчитатьНалоги()

//******************************************************************************
// глПересчитатьСтрокиДокумента(Конт, Валюта_Прежн, Курс_Прежн, ТипЦен = 0)
//
// Параметры: 
//  Конт - контекст документа
//  Валюта_Прежн      - прежняя валюта документа, из которой пересчитываем
//  Курс_Прежн        - прежний курс                        
//	ТипЦен			  - если не пустое значение, то все цены пересчитываются в соответствии с заданным типом
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Пересчитать цены и суммы по строкам спецификации, если они есть, при изменении 
//  валюты документа
//	
Процедура глПересчитатьСтрокиДокумента(Конт, Валюта_Прежн, Курс_Прежн, ТипЦен = 0) Экспорт
	Перем ВалютаЦены, ЦенаЦены, ЕдЦены;
	
	Если Конт.КоличествоСтрок()>0 Тогда
		
		ВидДок = Конт.Вид();
		
		ЕстьУчитыватьНП  = глЕстьРеквизитШапки("УчитыватьНП",ВидДок);
		ЕстьУчитыватьНДС = глЕстьРеквизитШапки("УчитыватьНДС", ВидДок);
		ЕстьСкидка       = глЕстьРеквизитШапки("Скидка", ВидДок);
		ЕстьТипЦен       = глЕстьРеквизитШапки("ТипЦен", ВидДок);
		
		Если ЕстьТипЦен = 1 Тогда
			ТипЦенДок = Конт.ТипЦен;
		Иначе
			ТипЦенДок = 0;
		КонецЕсли;
		       
	
		Если ЕстьСкидка=1 Тогда
			ПроцентСкидки=Конт.Скидка;
		Иначе                                 
			ПроцентСкидки=0;
		КонецЕсли;
		
		
		Конт.ВыбратьСтроки();
		Пока Конт.ПолучитьСтроку()>0 Цикл
			
			Если (Конт.Валюта=Валюта_Прежн) и ((ПустоеЗначение(ТипЦен) = 1) или (ТипЦенДок = 0)) Тогда                     
				// ничего не делаем  
			Иначе   // Поменялась валюта или тип цен
				
				// Если изменился тип цен, тогда изменим цены
				Если ПустоеЗначение(ТипЦен) = 0 Тогда                                       
					ЕдЦены = Конт.Единица;
					Если глВернутьЦену(Конт.Номенклатура, ТипЦен, Конт.ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) = 1 Тогда  
						глПересчитатьЦенуВДокументе(Конт, ЕстьУчитыватьНП, ЕстьУчитыватьНДС, ЦенаЦены, ВалютаЦены, ТипЦен.ЦенаВклНП, ТипЦен.ЦенаВклНДС);
					КонецЕсли;
				Иначе
					Конт.Цена=глПересчет(Конт.Цена,Валюта_Прежн,Курс_Прежн, Конт.Валюта,Конт.Курс);
				КонецЕсли;
				__Количество  = Конт.Количество;
				
				Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
					Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
						__Количество  = Конт.ВНаличии;
					КонецЕсли;
					
				КонецЕсли;
                Конт.Сумма = ( Конт.Цена*__Количество-ПроцентСкидки/100*Конт.Цена*__Количество) ;
         
				
			КонецЕсли;                                     
			
		
			
			Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
				
				__Количество  = Конт.Количество;
				
				Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
					Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
						__Количество  = Конт.ВНаличии;
					КонецЕсли;
					
				КонецЕсли;
				
				__СуммаСкидки = Конт.Цена*__Количество;
				
				
				Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
					
					Если Конт.Мультик = 1 Тогда
						Конт.Сумма = ( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма) ;
					Иначе
						Конт.Сумма = ( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество) ;
					КонецЕсли;
					Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
					Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
				КонецЕсли;
				
			иначе 
				Конт.Сумма=Конт.Цена*Конт.Количество;
				
				Если ЕстьСкидка=1 Тогда
					Конт.Сумма=Конт.Сумма - Конт.Сумма*ПроцентСкидки/100;
				КонецЕсли;
				
			КонецЕсли;
			
			
			
			
			
			Если ЕстьУчитыватьНП  = 1 Тогда
				глРасчетНалога(Конт,"НП");
			КонецЕсли;                  
			
			Если ЕстьУчитыватьНДС = 1 Тогда
				глРасчетНалога(Конт,"НДС");
			КонецЕсли;                  
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // глПересчитатьСтрокиДокумента()

//******************************************************************************
// глПересчитатьСкидки(Конт)
//
// Параметры: 
//  Конт - Контекст документа
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура пересчитывает спецификацию документа с учетом выбранной скидки
//
Процедура глПересчитатьСкидки(Конт) Экспорт
	
	Перем Скидка;
	
	Скидка = Конт.Скидка; 
	ВидДок = Конт.Вид();
	
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()=1 Цикл                                 
		Цена		= Конт.Цена;
		Количество	= Конт.Количество;
		
		Если (Конт.Вид() = "Реализация") ИЛИ (Конт.Вид() = "ЗаявкаПокупателя")  Тогда
			__Количество  = Конт.Количество;
			Если ( Конт.Вид() = "ЗаявкаПокупателя" ) тогда
				Если  (Конт.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад)  Тогда
					__Количество  = Конт.ВНаличии;
				КонецЕсли;
			КонецЕсли;
			__СуммаСкидки = Конт.Цена*__Количество;
			Конт.Сумма = ( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество) ;
			Если ( Конт.Вид() = "Реализация" ) ИЛИ ( Конт.Вид() = "ЗаявкаПокупателя" )  Тогда
				Если Конт.Мультик = 1 Тогда
					Конт.Сумма = ( Конт.Сумма - Конт.Номенклатура.Родитель.Скидка.Получить(Конт.ДатаДок)/100*Конт.Сумма) ;
				иначе
					Конт.Сумма = ( Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество) ;
				КонецЕсли;
				Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
				Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
			КонецЕсли;
		иначеесли Конт.Вид() = "ЗаявкаСССервис" тогда	//тут не нужны никакие модификаторы
			__Количество	= Конт.Количество;
			__СуммаСкидки	= Конт.Цена*__Количество;
			Конт.Сумма 		= (Конт.Цена*__Количество-Конт.Скидка/100*Конт.Цена*__Количество);
			Конт.СуммаСкидки = __СуммаСкидки - Конт.Сумма;
			Конт.СуммаБезСкидки = Конт.Цена*__Количество;  
		иначе 
			КоэффСкидки = 0;
			КоэффСкидки=Конт.Скидка/100;
			Конт.Сумма = Цена*Количество - Цена*Количество*КоэффСкидки;
		КонецЕсли;
		
		Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) =1 Тогда
			глРасчетНалога(Конт,"НП");
		КонецЕсли;
		Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) =1 Тогда
			глРасчетНалога(Конт,"НДС");
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры // глПересчитатьСкидки()

 //******************************************************************************
// глПересчитатьСкидкиРозница(Конт)
//
// Параметры: 
//  Конт - Контекст документа
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура пересчитывает спецификацию розничного документа с учетом выбранной скидки
//
Процедура глПересчитатьСкидкиРозница(Конт) Экспорт
	
	Перем Скидка;
	
	Скидка = Конт.Скидка; 
	ВидДок = Конт.Вид();
	
	//++Валерий МЭТР:
	СкидкаКонтрагента = Конт.Контрагент.Скидка_Розница.Получить(Конт.ДатаДок);
	//--Валерий МЭТР:
	
	Конт.ВыбратьСтроки();
	
	Если Конт.Вид() <> "РасходнаяНакладнаяРозницаБезнал" Тогда
		
		//++Валерий МЭТР: деление скидки и повышение
		Если Конт.Вид() = "РасходнаяНакладнаяРозница" Тогда
			
			Если Конт.Повышение = 1 Тогда
				ПовышениеСкидки 	= Константа.ПолучитьАтрибут("ПовышениеСкидки");
				СкидкаКонтрагента 	= СкидкаКонтрагента + ПовышениеСкидки;	
			КонецЕсли;	

			//Если Скидка > СкидкаКонтрагента Тогда
			//	Скидка = СкидкаКонтрагента;
			//КонецЕсли;  
			
		КонецЕсли;
		//--Валерий МЭТР: деление скидки и повышение		
		
		Пока Конт.ПолучитьСтроку() = 1 Цикл
		
			//++Удалено: Валерий МЭТР
			
			//++исправление обработки скидок
			//Если Конт.Номенклатура.скидка=0 Тогда // ограничений по величине скидки нет
			//		__Количество  = Конт.Количество;
			//		__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Скидка/100),1);  
			//		//__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Скидка/100),1); - оригинал
			//		Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
			//		Конт.СуммаБезСкидки = __Количество*Конт.Цена;
			//		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
			//		Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
			//		
			//		Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НП");
			//		КонецЕсли;
			//		Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НДС");
			//		КонецЕсли;
			//ИначеЕсли Конт.скидка<Конт.Номенклатура.скидка тогда  // величина скидки меньше разрешенной,ограничений по величине скидки нет
			//		__Количество  = Конт.Количество;
			//		__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Скидка/100),1);  
			//		//__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Скидка/100),1); - оригинал
			//		Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
			//		Конт.СуммаБезСкидки = __Количество*Конт.Цена;
			//		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
			//		Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
			//		
			//		Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НП");
			//		КонецЕсли;
			//		Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НДС");
			//		КонецЕсли;
			//Иначе         //величина скидки большеразрешенной, корректируем
			//      	__Количество  = Конт.Количество;
			//		__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Номенклатура.скидка/100),1);  
			//		//__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Скидка/100),1); - оригинал
			//		Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
			//		Конт.СуммаБезСкидки = __Количество*Конт.Цена;
			//		Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
			//		Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
			//		
			//		Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НП");
			//		КонецЕсли;
			//		Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1 Тогда
			//			глРасчетНалога(Конт,"НДС");
			//		КонецЕсли;
			//КонецЕсли;
			//--исправление обработки скидок
			
			//--Удалено: Валерий МЭТР
			
			//++Валерий МЭТР: повышение
			Если Конт.Вид() = "РасходнаяНакладнаяРозница" Тогда
				Если Конт.ЦенаБезПовышения = 0 Тогда
					Конт.ЦенаБезПовышения = Конт.Цена;
				КонецЕсли;
				
				Если Конт.Повышение = 1 Тогда
					ПовышениеЦены = Константа.ПолучитьАтрибут("ПовышениеЦены");
					Конт.Цена = Конт.ЦенаБезПовышения + Конт.ЦенаБезПовышения*ПовышениеЦены/100;
				Иначе
					Конт.Цена = Конт.ЦенаБезПовышения;
				КонецЕсли; 
			КонецЕсли;
			//--Валерий МЭТР: повышение			
			
			//++Добавлено: Валерий МЭТР     
			Если Скидка <> 0 Тогда
				Если СкидкаКонтрагента <= Скидка Тогда
					ПроцентПоАкции = глПолучитьПроцентпоАкции(Конт.Номенклатура, Конт.ДатаДок);
				Иначе
					ПроцентПоАкции = 0;
				КонецЕсли;	
			Иначе
				ПроцентПоАкции = 0;
			КонецЕсли;	
			//СкидкаКонтрагента   = СкидкаКонтрагентаБезАкции + ПроцентПоАкции;
			Если Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) = 0 Тогда			
				//СкидкаКарта
				
				__Количество  		= Конт.Количество;
				__ЦенаСоСкидкой		= окр(Конт.Цена			- Конт.Цена * ((Скидка + ПроцентПоАкции)/100),1);
				//__ЦенаСоСкидкой		= Конт.Цена			- Конт.Цена * ((Скидка + ПроцентПоАкции)/100);
				Конт.Сумма 			= __ЦенаСоСкидкой		* Конт.Количество;
				Конт.СуммаБезСкидки = __Количество			* Конт.Цена;
				Конт.СуммаСкидки	= Конт.СуммаБезСкидки 	- Конт.Сумма;
				Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;

			ИначеЕсли СкидкаКонтрагента >= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) Тогда			
				//СкидкаТовар
				__Количество  		= Конт.Количество;  
				
				//++Валерий МЭТР: механизм деления скидки - приоритетная скидка делится пропорционально
				ПоделеннаяПриоритетнаяСкидка 		= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок);
				Если СкидкаКонтрагента <> 0 Тогда
					ПоделеннаяПриоритетнаяСкидка 	= Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) * Скидка / СкидкаКонтрагента; 
				КонецЕсли; 
				//__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Номенклатура.Скидка/100),1); 
				__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(ПоделеннаяПриоритетнаяСкидка/100),1); 
				//__ЦенаСоСкидкой		= Конт.Цена-Конт.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
				//--Валерий МЭТР: механизм деления скидки    
				
				Конт.Сумма 			= __ЦенаСоСкидкой*Конт.Количество;
				Конт.СуммаБезСкидки = __Количество*Конт.Цена;
				Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
				Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
			
			ИначеЕсли СкидкаКонтрагента < Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) Тогда
				Если (Конт.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
					//СкидкаТовар
					__Количество  = Конт.Количество;
					
					//++Валерий МЭТР: механизм деления скидки
					ПоделеннаяПриоритетнаяСкидка = Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок);
					Если СкидкаКонтрагента <> 0 Тогда
						ПоделеннаяПриоритетнаяСкидка = Конт.Номенклатура.Скидка.Получить(Конт.ДатаДок) * Скидка / СкидкаКонтрагента; 
					КонецЕсли;
					//__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*(Конт.Номенклатура.Скидка/100),1); 
					__ЦенаСоСкидкой		= окр(Конт.Цена-Конт.Цена*((ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)/100),1);
					//__ЦенаСоСкидкой		= Конт.Цена-Конт.Цена*((ПоделеннаяПриоритетнаяСкидка + ПроцентПоАкции)/100);
					//--Валерий МЭТР: механизм деления скидки  
					
					Конт.Сумма 			= __ЦенаСоСкидкой		* Конт.Количество;
					Конт.СуммаБезСкидки = __Количество			* Конт.Цена;
					Конт.СуммаСкидки	= Конт.СуммаБезСкидки 	- Конт.Сумма;
					Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
				Иначе
					//СкидкаКарта
					__Количество  = Конт.Количество;
					__ЦенаСоСкидкой		= окр(Конт.Цена		- Конт.Цена * ((Скидка + ПроцентПоАкции)/100),1);
					//__ЦенаСоСкидкой		= Конт.Цена		- Конт.Цена * ((Скидка + ПроцентПоАкции)/100);
					Конт.Сумма 			= __ЦенаСоСкидкой	* Конт.Количество;
					Конт.СуммаБезСкидки = __Количество		* Конт.Цена;
					Конт.СуммаСкидки	= Конт.СуммаБезСкидки - Конт.Сумма;
					Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
				КонецЕсли;
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1 Тогда
				глРасчетНалога(Конт,"НП");
			КонецЕсли;
			Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1 Тогда
				глРасчетНалога(Конт,"НДС");
			КонецЕсли;
			
			//--Добавлено: Валерий МЭТР
			
		КонецЦикла;   
		
	Иначе
		Пока Конт.ПолучитьСтроку()=1 Цикл	//мы уже в счете указали нужную скидку
			
			__Количество  		= Конт.Количество;
			__ЦенаСоСкидкой		= Конт.Цена;
			Конт.Сумма 			= __ЦенаСоСкидкой		* Конт.Количество;
			Конт.СуммаБезСкидки = __Количество			* Конт.Цена;
			Конт.СуммаСкидки	= Конт.СуммаБезСкидки 	- Конт.Сумма;
			Конт.ЦенаСоСкидкой	= __ЦенаСоСкидкой;
			
			Если глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1 Тогда
				глРасчетНалога(Конт,"НП");
			КонецЕсли;
			Если глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1 Тогда
				глРасчетНалога(Конт,"НДС");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если (глЕстьРеквизитШапки("Оплачено", ВидДок) = 1)
		и (Конт.Вид() <> "ЗаявкаКлиентаРозница") Тогда
		Конт.Оплачено	= Конт.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры // глПересчитатьСкидкиРозница()

//======================================================================
Функция глПолучитьПроцентпоАкции(ТекущаяНоменклатура, ТекущаяДатаОтбора) Экспорт
	ПроцентПоАкции = 0;
	ПериодическийПроцентПоАкции = СоздатьОбъект("Периодический");
	ПериодическийПроцентПоАкции.ИспользоватьОбъект("ПроцентПоАкции",ТекущаяНоменклатура);
	ПроцентПоАкции = ПериодическийПроцентПоАкции.ЗначениеНаДату(ТекущаяДатаОтбора);
	Если (ПроцентПоАкции = 0) и (ПустоеЗначение(ТекущаяНоменклатура.Производитель) = 0) Тогда
		ПериодическийПроцентПоАкции.ИспользоватьОбъект("ПроцентПоАкции",ТекущаяНоменклатура.Производитель);
		ПроцентПоАкции = ПериодическийПроцентПоАкции.ЗначениеНаДату(ТекущаяДатаОтбора);
	КонецЕсли;
	Если (ПроцентПоАкции = 0) и (ПустоеЗначение(ТекущаяНоменклатура.Родитель) = 0) Тогда
		ПроцентПоАкции = глПолучитьПроцентпоАкции(ТекущаяНоменклатура.Родитель, ТекущаяДатаОтбора);
	КонецЕсли;
	Возврат	ПроцентПоАкции;
КонецФункции // гл

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ИСПОЛЬЗУЕМЫЕ В ДИАЛОГАХ 
//
//******************************************************************************
// глПоискПоПодстроке(Конт, СписокПолей = "")
//
// Параметры: 
//  Конт        - контекст формы списка справочника,
//  СписокПолей - необязательный параметр, строка, 
//                содержащая список идентификаторов строковых реквизитов ограниченной длины, 
//                по которым может осуществляться поиск, разделенных запятыми.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывает обработку поиска элемента справочника по подстроке,
//  если нашли, то или позиционирует форму списка на найденном элементе,
//  или если форма в режиме выбора, то производит выбор.
//
Процедура глПоискПоПодстроке(Конт, СписокПолей = "") Экспорт
	
	СписокПараметров = СоздатьОбъект("СписокЗначений"); 
	СписокПараметров.ДобавитьЗначение(Конт.Вид(), "Вид");
	СписокПараметров.ДобавитьЗначение(СписокПолей,"СписокПолей");
	ОткрытьФормуМодально("Обработка.ВыборИзСправочникаПоПодстроке", СписокПараметров);
	
	Если ТипЗначенияСтр(СписокПараметров)="Справочник" Тогда
		Если СписокПараметров.Вид() = Конт.Вид() Тогда
			Если Конт.Форма.РежимВыбора() = 1 Тогда
				Конт.Форма.ВыполнитьВыбор(СписокПараметров);
			Иначе
				Конт.АктивизироватьОбъект(СписокПараметров);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;       
	
КонецПроцедуры // глПоискПоПодстроке()

//******************************************************************************
// глОткрытьКарточкуРеквизита(Конт, ИмяРеквизита) Экспорт
//
// Параметры:
//  Конт (Глобальный контекст) - контекст формы.
//  ИдРеквизита (строка) - идентификатор реквизита.
//
// ВозвращаемоеЗначение:
//	0 - элемент не модифицирован
//  1 - элемент модифицирован
//
// Описание:
//  Если реквизит заполнен - открывает модально форму элемента справочника для 
//  редактирования.
//
Функция глОткрытьКарточкуРеквизита(Конт, ИдРеквизита) Экспорт
	
	СтарыйРеквизит = Конт.ПолучитьАтрибут(ИдРеквизита);
	
	Если СтарыйРеквизит.Выбран() = 1 Тогда
		ОткрытьФормуМодально(СтарыйРеквизит, , 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	НовыйРеквизит  = СтарыйРеквизит.ТекущийЭлемент();
	
	// если элемент изменился (его отредактировали), Контекст об этом не знает
	МодифицировалиЭлемент = глСравнитьЭлементыСправочника(НовыйРеквизит, СтарыйРеквизит);
	
	
	Если МодифицировалиЭлемент=1 Тогда
		// обновляем реквизит в форме
		Конт.УстановитьАтрибут(ИдРеквизита, "");
		Конт.ПолучитьАтрибут(ИдРеквизита);
		Конт.УстановитьАтрибут(ИдРеквизита, НовыйРеквизит);
	КонецЕсли;
	
	Возврат МодифицировалиЭлемент;
	
КонецФункции // глОткрытьКарточкуРеквизита()

//******************************************************************************
// глИзменитьСуммуВзаиморасчетов(Конт)
//
// Параметры: 
//  Конт - контекст документа
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Ручное изменение суммы взаиморасчетов в документе
//
Процедура глИзменитьСуммуВзаиморасчетов(Конт)   Экспорт
	
	СтараяСумма = Конт.СуммаВзаиморасчетов;
	НоваяСумма 	= СтараяСумма;            
	
	Если ВвестиЧисло(НоваяСумма, "Введите сумму док. в валюте расчетов",15,2) = 1 Тогда
		Если СтараяСумма <> НоваяСумма Тогда
			Конт.СуммаВзаиморасчетов =  НоваяСумма;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //глИзменитьСуммуВзаиморасчетов()

//*****************************************************************************
// глСтрокаОплаты(Конт)
//
// Параметры: 
// 	Конт - контекст формы документа
//
// Возвращаемое значение:
// 	Строковое представление информации
//
// Описание:
// 	Функция, формирующая информационную строку о ценах и порядке оплаты
//
Функция глСтрокаОплаты(Конт) Экспорт
	Перем ЕстьТипЦен, ЕстьСкидка, ЕстьВалюта, ЕстьУчитыватьНП,ЕстьУчитыватьНДС;
	Перем Результат, ВидДок;
	
	Результат = "";
	
	// Анализируем реквизиты документа
	ВидДок = Конт.Вид();
	
	ЕстьТипЦен 			= глЕстьРеквизитШапки("ТипЦен",ВидДок);
	ЕстьСкидка 			= глЕстьРеквизитШапки("Скидка",ВидДок);
	ЕстьУчитыватьНП 	= глЕстьРеквизитШапки("УчитыватьНП",ВидДок);
	ЕстьУчитыватьНДС	= глЕстьРеквизитШапки("УчитыватьНДС",ВидДок);
	ЕстьОблагаетсяЕНВД	= глЕстьРеквизитШапки("ОблагаетсяЕНВД",ВидДок);
	ЕстьВалюта		 	= глЕстьРеквизитШапки("Валюта",ВидДок);
	
	
	Если ЕстьТипЦен = 1 Тогда   
		Если ПустоеЗначение(Конт.ТипЦен) = 0 Тогда
			Результат = Результат + Конт.ТипЦен.Наименование;  
		Иначе
			//Результат = Результат + "< НЕ УКАЗАН ТИП ЦЕН >";
		КонецЕсли;
	КонецЕсли;    
	
	Если ЕстьСкидка = 1 Тогда
		Если ПустоеЗначение(Конт.Скидка) = 0 Тогда
			Результат = Результат + " (скидка: "+Конт.Скидка+"% )";  
		КонецЕсли;
	КонецЕсли;    
	
	Результат = Результат + ?(ПустоеЗначение(Результат)=1,"",", "+ РазделительСтрок);
	
	// Про валюту пишем, только если она задана    
	Если ЕстьВалюта = 1 Тогда
		Если ПустоеЗначение(Конт.Валюта) = 0 Тогда
			Результат = Результат + Конт.Валюта.Наименование;  
			Результат = Результат + " курс: " + 
			Строка(Конт.Курс) + " " + глРубли.Наименование;  
		Иначе
			Результат = Результат + "< НЕТ ВАЛЮТЫ >";
		КонецЕсли;
	КонецЕсли;     
	
	ОблагаетсяЕНВД = 0;	
	Если ЕстьОблагаетсяЕНВД = 1 Тогда
		Если Конт.ОблагаетсяЕНВД = 1 Тогда
			ОблагаетсяЕНВД = 1;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОблагаетсяЕНВД = 1 Тогда
		Результат = Результат + "<ПРОДАЖА, ОБЛАГАЕМАЯ ЕНВД>";
		
	Иначе
		Если ЕстьУчитыватьНДС = 1 Тогда
			Если ПустоеЗначение(Конт.УчитыватьНДС) = 1 Тогда
				Результат = Результат + ", < БЕЗ НДС >";  
			Иначе
				Результат = Результат + ", НДС";  
				Если глЕстьРеквизитШапки("СуммаВклНДС", ВидДок) = 1 Тогда
					Если Конт.СуммаВклНДС = 1 Тогда
						Результат = Результат + " - в сумме";
					Иначе                                    
						Результат = Результат + " - сверху";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьУчитыватьНП = 1 Тогда
			Если ПустоеЗначение(Конт.УчитыватьНП) = 1 Тогда
				Результат = Результат + ",< БЕЗ НП >";
			Иначе
				Результат = Результат + ", НП";  
				Если глЕстьРеквизитШапки("СуммаВклНП", ВидДок) = 1 Тогда
					Если Конт.СуммаВклНП = 1 Тогда
						Результат = Результат + " - в сумме";
					Иначе                                    
						Результат = Результат + " - сверху";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат(Результат);
	
КонецФункции //глСтрокаОплаты()

//******************************************************************************
//  глСтрокаКонтрагента(Конт) 
// 
// Параметры: 
// 	Конт - контекст формы документа
// 
// Возвращаемое значение:
// 	Строковое представление контрагента в документе
// 
// Описание:
// 	Функция, формирующая информационную строку о контрагенте
//
Функция глСтрокаКонтрагента(Конт) Экспорт
	
	Перем Результат;              
	
	Если Конт.Контрагент.Выбран()=1 Тогда
		Результат	=Конт.Контрагент.Наименование;
	Иначе
		Результат="НЕ ВЫБРАН КОНТРАГЕНТ";
	КонецЕсли;
	
	Возврат(Результат);
	
КонецФункции //глСтрокаКонтрагента()

//******************************************************************************
//  глСтрокаДоговора(Конт) 
// 
// Параметры: 
// 	Конт - контекст формы документа
// 
// Возвращаемое значение:
// 	Строковое представление договора в документе.
// 
// Описание:
// 	Функция, формирующая информационную строку о договоре.
//
Функция глСтрокаДоговора(Конт) Экспорт
	
	Перем Результат;              
	
	Договор		=Конт.Договор;
	Если ПустоеЗначение(Договор)=0 Тогда
		Результат=""+Договор.Наименование+" ("+Договор.ВалютаВзаиморасчетов.Наименование+")";
	Иначе
		Результат="НЕ ВЫБРАН ДОГОВОР";
	КонецЕсли;                                             
	
	Возврат(Результат);
	
КонецФункции //глСтрокаДоговора()

//******************************************************************************
//  глСтрокаСклада(Конт) 
// 
// Параметры: 
// 	Склад - элемент справочника "Склады"
// 
// Возвращаемое значение:
// 	Строковое представление склада
// 
// Описание:
// 	Функция, формирующая информационную строку о складе
//
Функция глСтрокаСклада(Склад) Экспорт
	Перем Результат;              
	
	Если ПустоеЗначение(Склад)=0 Тогда
		Результат=Склад.Наименование;
		Если ПустоеЗначение(Склад.МОЛ)=0 Тогда
			Результат=Результат+" ("+СокрП(Склад.МОЛ.Наименование)+")";
		КонецЕсли;                                             
	Иначе
		Результат="НЕ ВЫБРАН СКЛАД";
	КонецЕсли;
	
	Возврат(Результат);
КонецФункции  // глСтрокаСклада

//******************************************************************************
//  глСтрокаФирмы(Конт) 
// 
// Параметры: 
//	Конт - контекст формы документа
// 
// Возвращаемое значение:
// 	Строковое представление фирмы (Юр. и Упр. лица)
// 
// Описание:
// 	Функция, формирующая информационную строку о фирме
//
Функция глСтрокаФирмы(Конт) Экспорт
	Перем Результат;
	
	Результат = "";
	Если ПустоеЗначение(Конт.Фирма) = 0 Тогда
		Результат = Результат + Конт.Фирма.Наименование;  
	Иначе
		Результат = Результат + "НЕ ВЫБРАНА ФИРМА";  
	КонецЕсли;
	
	Возврат(Результат);
КонецФункции  // глСтрокаФирмы()

//******************************************************************************
// глСтрокаВидТМЦ(Конт)
//
// Параметры: 
//  Конт - контекст документа
//
// Возвращаемое значение:
//  Строковое представление вида ТМЦ текущей строки табличной части документа
//
// Вызывается из формул элементов диалога
//  Реквизита типа "Текст", в котором и отбражается
//  строковое представление вида ТМЦ текущей строки табличной части документа 
//
// Описание:
//  Служит для формирования строкового представления вида ТМЦ текущей строки 
//  табличной части документа 
//
Функция глСтрокаВидТМЦ(Конт)  Экспорт
	Возврат "" + Конт.Номенклатура.ВидНоменклатуры + ":";
КонецФункции // глСтрокаВидТМЦ()

//******************************************************************************
// глПолучитьОстаткиНоменклатуры(ФирмаДляОстатковТМЦ, Номенклатура, Единица, ОстаткиТМЦ, ОстатокНаСкладе, ОстатокПоФирме, Склад, 
//	                             РезервыТМЦ = 0, УчитыватьРезерв = 0, Договор = 0, Заявка = 0 , РузервПоФирме = 0 , РезервПоСкладу = 0 ) Экспорт
//
// Параметры:
//  ФирмаДляОстатковТМЦ - элемент справочника "Фирмы" или список таких элементов, для которого надо получить остаток,
//  Номенклатура    - элемент справочника "Номенклатура", для которого надо получить остаток,
//  Единица         - элемент справочника "Единицы", определяем в чем надо вернуть остаток,
//  ОстаткиТМЦ      - регистр "ОстаткиТМЦ", отфильтрованный и рассчитанный нужным образом,
//  ОстатокНаСкладе - возвращаемое значение, остаток на складе
//  ОстатокПоФирме  - возвращаемое значение, остаток по фирме
//  Склад           - элемент справочника "Склады", для которого надо получить остаток на складе
//  РезервыТМЦ      - регистр "РезервыТМЦ", отфильтрованный и рассчитанный нужным образом,
//                    необязателен, если не задан, то из остатка резерв не вычитается, 
//  УчитыватьРезерв - число, флаг учета резерва, если не пуст, то из остатка вычитается резерв,
//                    необязателен, по умолчанию 0.
//  Договор         - элемент справочника "Договора", определяет договор, 
//                    резервы по которому надо включить в остаток (не обязателен),
//  Заявка          - документ "Заявка", определяет заявку, 
//                    резервы по которой надо включить в остаток, 
//                    анализируется если не задан Договор (не обязателен).
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вычисляет остатки Номенклатуры на складе, по фирме, в соответствии с текущими установками фильтра.
//
Процедура глПолучитьОстаткиНоменклатуры(ФирмаДляОстатковТМЦ, Номенклатура, Единица, ОстаткиТМЦ, ОстатокНаСкладе, ОстатокПоФирме, Склад, 
	РезервыТМЦ = 0, УчитыватьРезерв = 0, Договор = 0, Заявка = 0 , РезервПоФирме ) Экспорт
	Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
		
		// Получим остаток.
		Если ПустоеЗначение(Склад) = 0 Тогда
			Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
				ОстатокНаСкладе = ОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,Склад,,"Количество"); 
				ОстатокПоФирме  = ОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,"Количество");
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
				ОстатокНаСкладе = 0;
				ОстатокПоФирме  = 0;
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
					ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
					ОстатокНаСкладе = ОстатокНаСкладе + ОстаткиТМЦ.СводныйОстаток(ТекФирма,Номенклатура,Склад,,"Количество"); 
					ОстатокПоФирме  = ОстатокПоФирме  + ОстаткиТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,"Количество");
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
				ОстатокНаСкладе = ОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,"Количество"); 
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
				ОстатокНаСкладе = 0;
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
					ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
					ОстатокНаСкладе = ОстатокНаСкладе + ОстаткиТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,"Количество"); 
				КонецЦикла;
			КонецЕсли;
			ОстатокПоФирме = ОстатокНаСкладе;
		КонецЕсли;
		
		РезервНаСкладе = 0;
		РезервПоФирме  = 0;
		Если (ПустоеЗначение(РезервыТМЦ) = 0)
		и (УчитыватьРезерв <> 0) Тогда
			
			// Получим резерв.
			Если ПустоеЗначение(Склад) = 0 Тогда
				Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
					РезервНаСкладе = РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,Склад,,,"Количество"); 
					РезервПоФирме  = РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,,"Количество");
					Если ПустоеЗначение(Договор) = 0 Тогда // Надо умеьшить резерв на резерв по этому договору
						РезервНаСкладе = РезервНаСкладе - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,Склад,Договор,,"Количество");
						РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,Договор,,"Количество");
					ИначеЕсли ПустоеЗначение(Заявка) = 0 Тогда // Надо умеьшить резерв на резерв по этой заявке
						РезервНаСкладе = РезервНаСкладе - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,Склад,,Заявка,"Количество");
						РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,Заявка,"Количество");
					КонецЕсли;
				ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
					СчетчикЦикла = 0;
					Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
						ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
						РезервНаСкладе = РезервНаСкладе + РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,Склад,,,"Количество"); 
						РезервПоФирме  = РезервПоФирме  + РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,,"Количество");
						Если ПустоеЗначение(Договор) = 0 Тогда // Надо умеьшить резерв на резерв по этому договору
							РезервНаСкладе = РезервНаСкладе - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,Склад,Договор,,"Количество");
							РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,Договор,,"Количество");
						ИначеЕсли ПустоеЗначение(Заявка) = 0 Тогда // Надо умеьшить резерв на резерв по этой заявке
							РезервНаСкладе = РезервНаСкладе - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,Склад,,Заявка,"Количество");
							РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,Заявка,"Количество");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
					РезервПоФирме = РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,,"Количество"); 
					Если ПустоеЗначение(Договор) = 0 Тогда // Надо умеьшить резерв на резерв по этому договору
						РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,Договор,,"Количество");
					ИначеЕсли ПустоеЗначение(Заявка) = 0 Тогда // Надо умеьшить резерв на резерв по этой заявке
						РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,Номенклатура,,,Заявка,"Количество");
					КонецЕсли;
				ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
					СчетчикЦикла = 0;
					Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
						ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
						РезервПоФирме = РезервПоФирме + РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,,"Количество"); 
						Если ПустоеЗначение(Договор) = 0 Тогда // Надо умеьшить резерв на резерв по этому договору
							РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,Договор,,"Количество");
						ИначеЕсли ПустоеЗначение(Заявка) = 0 Тогда // Надо умеьшить резерв на резерв по этой заявке
							РезервПоФирме  = РезервПоФирме  - РезервыТМЦ.СводныйОстаток(ТекФирма,Номенклатура,,,Заявка,"Количество");
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				РезервНаСкладе = РезервПоФирме;
			КонецЕсли;
		КонецЕсли;
		
		ОстатокНаСкладе = ОстатокНаСкладе - РезервНаСкладе;
		ОстатокПоФирме  = ОстатокПоФирме  - РезервПоФирме;
		
		Если Единица.Коэффициент > 0 Тогда
			ОстатокНаСкладе = ОстатокНаСкладе / Единица.Коэффициент;
			ОстатокПоФирме  = ОстатокПоФирме  / Единица.Коэффициент;
		КонецЕсли;
		
	КонецЕсли;           
	
КонецПроцедуры // глПолучитьОстаткиНоменклатуры()


//******************************************************************************
//  глСуммаДокументаВЖурнале(Док, ТипВозврата)
//
// Параметры:
//  Док 		- документ
//  ТипВозврата	- строка, тип возвращаемого значения. Может принимать значения:
//                "строка" - сумма по документу в виде отформатированной строки
//                "число"  - сумма по документу в виде числа
//
// Возвращаемое значение: 
//  Отформатированная сумма
//
// Описание:
//  Формирует сумму, которая отражается в журналах, реестрах для документа.
//  При формировании суммы по документам "Счет фактура полученный" и "Счет
//  фактура выданный" учитывается то, что в этих документах сумм нет, для них
//  отображается сумма документа - основания.
//
Функция глСуммаДокументаВЖурнале(Док, ТипВозврата="строка") Экспорт
	Перем Результат;
	Перем СуммаНДС;
	Перем СуммаНП;
	
	Результат	=0;
	СуммаНДС	=0;
	СуммаНП 	=0;
	
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	ВидДок=Док.Вид();
	
	Если ВидДок = "ОтчетКомитенту" Тогда // здесь тяжело считать сумму комиссионного вознаграждения, поэтому вернем пустоту 
		Возврат "";
	КонецЕсли;
	
	РеквСумма=Метаданные.Документ(ВидДок).РеквизитШапки("Сумма");
	
	Если (ВидДок = "СчетФактураВыданный")
	или  (ВидДок = "СчетФактураПолученный")
	Тогда        
		Если (Док.ДокОснование.Выбран() = 1) 
		и    (Док.КоличествоСтрок() = 0)
		Тогда
			Возврат (глСуммаДокументаВЖурнале(Док.ДокОснование, ТипВозврата));
		КонецЕсли;
	КонецЕсли;
	
	Если РеквСумма.Выбран()=1 Тогда
		Результат= Док.Сумма;
	Иначе
		
		Если "ВводОстатковТМЦ" = ВидДок Тогда
			Если Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров = Док.ВидОперации Тогда
				Результат=Док.Итог("ПродСтоимость");
			Иначе
				Результат=Док.Итог("СуммаРуб");
			КонецЕсли;
		//КАГ 23.09.09
		//добавлено для вывода суммы от реально выданной скидки
		ИначеЕсли ВидДок = "Реализация" Тогда
			Если Док.ВыданоСоСкидкой = 1 Тогда
				РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Сумма");
				Если РеквСумма.Выбран()=1 Тогда
					Если РеквСумма.ИтогПоКолонке=1 Тогда
						Результат=Док.Итог("Сумма");
					КонецЕсли;
				Иначе
					РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаРуб");
					Если РеквСумма.Выбран()=1 Тогда
						Если РеквСумма.ИтогПоКолонке=1 Тогда
							Результат=Док.Итог("СуммаРуб");
						КонецЕсли;                 
					КонецЕсли;
				КонецЕсли;
			Иначе
				РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаБезСкидки");
				Если РеквСумма.Выбран()=1 Тогда
					Если РеквСумма.ИтогПоКолонке=1 Тогда
						Результат=Док.Итог("СуммаБезСкидки");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		//----------------------------------------------------
		Иначе
			РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("Сумма");
			Если РеквСумма.Выбран()=1 Тогда
				Если РеквСумма.ИтогПоКолонке=1 Тогда
					Результат=Док.Итог("Сумма");
				КонецЕсли;
			Иначе
				РеквСумма=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаРуб");
				Если РеквСумма.Выбран()=1 Тогда
					Если РеквСумма.ИтогПоКолонке=1 Тогда
						Результат=Док.Итог("СуммаРуб");
					КонецЕсли;                 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		//КАГ 23.09.09
		//добавлено для вывода суммы от реально выданной скидки
		Если ВидДок = "Реализация" Тогда
			Если Док.ВыданоСоСкидкой = 1 Тогда
				РеквСуммаНДС=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНДС");
				Если РеквСуммаНДС.Выбран()=1 Тогда
					Если РеквСуммаНДС.ИтогПоКолонке=1 Тогда
						СуммаНДС=Док.Итог("СуммаНДС");
					КонецЕсли;                          
				КонецЕсли;
			Иначе
				РеквСуммаНДС=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНДСбезСкидки");
				Если РеквСуммаНДС.Выбран()=1 Тогда
					Если РеквСуммаНДС.ИтогПоКолонке=1 Тогда
						СуммаНДС=Док.Итог("СуммаНДСбезСкидки");
					КонецЕсли;                          
				КонецЕсли;
			КонецЕсли;
		Иначе
			РеквСуммаНДС=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНДС");
			Если РеквСуммаНДС.Выбран()=1 Тогда
				Если РеквСуммаНДС.ИтогПоКолонке=1 Тогда
					СуммаНДС=Док.Итог("СуммаНДС");
				КонецЕсли;                          
			КонецЕсли;
		КонецЕсли;	
		//----------------------------------------------------
				
		РеквСуммаВклНДС=Метаданные.Документ(ВидДок).РеквизитШапки("СуммаВклНДС");
		Если РеквСуммаВклНДС.Выбран()=1 Тогда
			Результат=Результат+?(Док.СуммаВклНДС=1,0,СуммаНДС);
		КонецЕсли;
		
		РеквСуммаНП=Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти("СуммаНП");
		Если РеквСуммаНП.Выбран()=1 Тогда
			Если РеквСуммаНП.ИтогПоКолонке=1 Тогда
				СуммаНП=Док.Итог("СуммаНП");
			КонецЕсли;                          
		КонецЕсли;
		
		РеквСуммаВклНП=Метаданные.Документ(ВидДок).РеквизитШапки("СуммаВклНП");
		Если РеквСуммаВклНП.Выбран()=1 Тогда
			Результат=Результат+?(Док.СуммаВклНП=1,0,СуммаНП);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипВозврата = "строка" Тогда
		Возврат глФрм(Результат);
	Иначе
		Возврат Результат;
	КонецЕсли;	
	
КонецФункции //глСуммаДокументаВЖурнале()   

//******************************************************************************
// глВалютаДокументаВжурнале(Док)
//
// Параметры: 
//  Док 		- документ
//
// Возвращаемое значение:
//  Валюту документа
//
// Описание:
//  Возвращает валюту документа для представления в журнале. Учитывает то, что
//  документы ЗаписьКнигиПокупок, ЗаписьКнигиПродаж, ПлатежноеПоручение всегда
//  выписываются в рублях
//
Функция глВалютаДокументаВжурнале(Док) Экспорт
	
	ВидДокумента	= Док.Вид();
	Если (ВидДокумента = "ЗаписьКнигиПокупок")
	ИЛИ (ВидДокумента = "ЗаписьКнигиПродаж")
	ИЛИ (ВидДокумента = "ПлатежноеПоручение")
	ИЛИ (ВидДокумента = "ВводОстатковКассаБанкПодотчетник")
	ИЛИ (ВидДокумента = "ВводОстатковПокупателя")
	ИЛИ (ВидДокумента = "ВводОстатковПоставщика")
	ИЛИ (ВидДокумента = "ВводОстатковТМЦ")
	Тогда
		Возврат глРубли;
	ИначеЕсли глЕстьРеквизитШапки("Валюта", ВидДокумента) = 1 Тогда
		Возврат Док.Валюта;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // глВалютаДокументаВжурнале()


//******************************************************************************
// глНазваниеДокументаВЖурнале(Док)
//
// Параметры:         
//  Док - документ
//
// Возвращаемое значение:
//  Строка  - представление документа
//
// Описание: 
//  Формирует представление документа в журнале. 
//
Функция глНазваниеДокументаВЖурнале(Док) Экспорт
	
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат("");
	КонецЕсли;
	
	ДокВид	= Док.Вид();
	
	//**** СНАЧАЛА ПРОПИШЕМ ДОКУМЕНТЫ РОЗНИЦЫ - А ПОТОМ ВСЁ ОСТАЛЬНОЕ
	Если ДокВид="РасходнаяНакладнаяРозница" Тогда
		Возврат "Продажа товара (розница)";
	ИначеЕсли ДокВид="ПеремещениеТМЦ_Розница" Тогда
		Возврат "Перемещение товара (розница)";
	ИначеЕсли ДокВид="ВозвратОтПокупателя_Розница" Тогда
		Возврат "Возврат товара от покупателя (розница)";
	ИначеЕсли ДокВид="ВыплатаПроцентов_Розница" Тогда
		Возврат "Выплата процентов (розница)";
	ИначеЕсли ДокВид="ВозвратДолгов_Розница" Тогда
		Возврат "Возврат долгов (розница)";
	ИначеЕсли ДокВид="ЗаявкаКлиентаРозница" Тогда
		Возврат "Заявка клиента на заказ товара (розница)";
	ИначеЕсли ДокВид="РабочийДень" Тогда
		Возврат "Рабочий день (розница)";
	ИначеЕсли ДокВид="Заявка" Тогда
		Возврат "Плановая заявка товара (розница)";
	ИначеЕсли ДокВид="СчетБнРозница" Тогда
		Возврат "Счет на безнал (розница)";
	ИначеЕсли ДокВид="РасходнаяНакладнаяРозницаБезнал" Тогда
		Возврат  "Продажа товара по безналу (магазин)";
		
	КонецЕсли;
	
	Если (глЕстьРеквизитШапки("КодОперации", ДокВид) = 1) 
	И (Найти("/ПКО/РКО/СтрокаВыпискиПриход/СтрокаВыпискиРасход/РеализацияРозница/", "/" + ДокВид + "/") = 0)
	Тогда
		Возврат Строка(Док.КодОперации);
	ИначеЕсли глЕстьРеквизитШапки("ВидОперации",ДокВид)=1 Тогда
		
		ДопСтрока	= "";
		Если "РеализацияРозница" = ДокВид Тогда
			Если Док.ОблагаетсяЕНВД = 1 Тогда
				ДопСтрока	= " (ЕНВД)";
			КонецЕсли;
		ИначеЕсли "ВводОстатковТМЦ" = ДокВид Тогда
			Если (Док.Склад.РозничныйСклад = 1) И (Док.ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ) Тогда
				ДопСтрока	= " (розница)";
			КонецЕсли;
		ИначеЕсли "ЗаявкаПокупателя" = ДокВид Тогда
			
			Если Док.флРезервировать = 1  Тогда
				Возврат Строка(Док.ВидОперации) + " ( Резерв )";
				
			Иначе
				Возврат Строка(Док.ВидОперации) + ДопСтрока;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат Строка(Док.ВидОперации) + ДопСтрока;
		
		
	Иначе
		Возврат Док.ПредставлениеВида();
	КонецЕсли;
	
КонецФункции // глНазваниеДокументаВЖурнале()

//******************************************************************************
// глИнформацияПоДокументуВЖурнале(Док)
//
// Параметры: 
//  Док - контекст документа.
//
// Возвращаемое значение:
//  Информационную строку по документу
//
// Описание:
//  Формирует информационную строку по документу
//  (контрагент или склад или и т.п.)
//
Функция глИнформацияПоДокументуВЖурнале(Док)    Экспорт
	
	Если ПустоеЗначение(Док)=1 Тогда
		Возврат("");
	КонецЕсли;
	
	ВидДок = Док.Вид();
	Если (ВидДок = "СтрокаАвансОтчетаТМЦ")
	или (ВидДок = "СтрокаАвансОтчетаОплата") 
	или (ВидДок = "СтрокаАвансОтчетаПрочее") Тогда
		Возврат Док.ФизЛицо;
		
	ИначеЕсли (ВидДок = "ЧекККМ") 
	или (ВидДок = "ОтчетККМ") Тогда
		Возврат Док.Касса;
		
	ИначеЕсли ВидДок = "ПеремещениеТМЦ"Тогда
		Возврат "с """ + Док.Склад + """ на """ + Док.СкладПолучатель + """";
		
	ИначеЕсли (ВидДок = "ИнвентаризацияТМЦ")
	или (ВидДок = "ПереоценкаРозница") Тогда
		Возврат Док.Склад;
		
	ИначеЕсли ВидДок = "Доверенность" Тогда
		Возврат Док.ДоверенноеЛицо;
		
	ИначеЕсли ВидДок = "КомплектацияТМЦ" Тогда
		Возврат Док.Комплект;
		
	ИначеЕсли ВидДок = "ПеремещениеДенегБанк" Тогда
		Возврат Док.БанковскийСчет;
		
	ИначеЕсли ВидДок = "ПеремещениеДенегКасса" Тогда
		Возврат Док.КассаПолучатель;
	ИначеЕсли ВидДок = "Сторно" Тогда
		Возврат Док.СторнируемыйДокумент;
		
	ИначеЕсли (ВидДок = "ОприходованиеТМЦ")
	или (ВидДок = "СписаниеТМЦ") Тогда
		Возврат Док.Счет;
		
	ИначеЕсли (ВидДок = "ПКО")
	или (ВидДок = "РКО") Тогда
		Если (Док.КодОперации = глКО.ВозвратПодотчетныхСумм)
		или (Док.КодОперации = глКО.ВыдачаПодотчет) 
		или (Док.КодОперации = глКО.ВыдачаПодотчетВал) Тогда
			Возврат Док.ФизЛицо;    
			
		ИначеЕсли (Док.КодОперации = глКО.Прочее) Тогда
			Возврат Док.Счет;
			
		Иначе    
			Возврат Док.Контрагент;
			
		КонецЕсли;
		
	ИначеЕсли (ВидДок = "СтрокаВыпискиПриход")
	или (ВидДок = "СтрокаВыпискиРасход") Тогда
		Если (Док.КодОперации = глКО.Прочее) Тогда
			Возврат Док.Счет;
			
		Иначе    
			Возврат Док.Контрагент;
			
		КонецЕсли;
		
	ИначеЕсли глЕстьРеквизитШапки("Контрагент",ВидДок) = 1 Тогда
		Возврат Док.Контрагент;
		
	Иначе
		Возврат "";
		
	КонецЕсли; // ВидДок = ...
	
КонецФункции // глИнформацияПоДокументуВЖурнале()

//******************************************************************************    
// глТекущийДолг(Фирма, Договор, Роль)
//
// Параметры:          
//	Фирма   - фирма, по которой происходит просмотр долга
//	Договор - договор
//  Роль    - строка, "поставщик", "покупатель", "все" (общие взаиморасчеты)
//
// Возвращаемое значение: 
//	Значение долга контрагента по договору и фирме на ТА.
//
// Описание: 
//	Возвращает долг контрагента по договору и фирме на ТА в зависимости от роли.
//
Функция глТекущийДолг(Фирма, Договор, Роль) Экспорт
	Перем Рез;
	
	Если (ПустоеЗначение(Фирма)  =1) или
	(ПустоеЗначение(Договор)=1) Тогда
		Рез = 0;
	Иначе
		
		Если нРег(Роль) = "поставщик" Тогда
			РабРег = Регистр.Поставщики;
			Рез    = РабРег.СводныйОстаток(Фирма, Договор, , , "СуммаВал");  
			
		ИначеЕсли нРег(Роль) = "покупатель" Тогда
			РабРег = Регистр.Покупатели;                                      
			Рез    = РабРег.СводныйОстаток(Фирма, Договор, , , ,"СуммаВал");
			
		ИначеЕсли нРег(Роль) = "все" Тогда
			РабРег = Регистр.Поставщики;
			Рез    =       РабРег.СводныйОстаток(Фирма, Договор, , ,  "СуммаВал");
			РабРег = Регистр.Покупатели;                                      
			Рез    = Рез + РабРег.СводныйОстаток(Фирма, Договор, , , ,"СуммаВал");
			
		Иначе
			Рез    = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // глТекущийДолг()

//******************************************************************************    
// глВзаиморасчеты(Фирма,Договор,Роль)
//
// Параметры:          
//	Фирма - фирма, в рамках которой происходит просмотр
//  Договор - договор контрагента
//	Роль - строка "Поставщик" или "Покупатель"
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Формирует отчет по взаиморасчетам с выбранным контрагентом по выбранному
//  договору с выбранной фирмой.
//
Процедура глВзаиморасчеты(Фирма,Договор,Роль) Экспорт
	
	Если (ПустоеЗначение(Договор)=1) Тогда
		Предупреждение("Не выбран договор контрагента!",60); 	
		Возврат ;
	КонецЕсли;
	
	Если (ПустоеЗначение(Фирма)=1) Тогда
		Предупреждение("Не выбрана фирма!",60);
		Возврат ;
	КонецЕсли;
	
	Группировки= СоздатьОбъект("СписокЗначений");	
	Группировки.ДобавитьЗначение("Фирма", "Фирма");
	Группировки.ДобавитьЗначение("Контрагент", "Контрагент");
	Группировки.ДобавитьЗначение("СвойствоКонтр", "Свойство контрагента");
	Группировки.ДобавитьЗначение("Договор", "Договор");
	Группировки.ДобавитьЗначение("ВидДолга", "Вид долга (бух. счет)");
	Группировки.ДобавитьЗначение("СтавкаНП", "Ставка НП");
	Группировки.ДобавитьЗначение("КредДокумент", "Кредитный документ");
	Группировки.ДобавитьЗначение("Документ", "Документы движения");
	
	Группировки.Пометка(4, 1);
	Группировки.Пометка(8, 1);
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "ВедомостьПоКонтрагентам");
	
	// все настройки помещаем в список
	ВыбДатаКонца  = ПолучитьДатуТА();
	ВыбДатаНачала = Мин(глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов"),ВыбДатаКонца);
	ВыбДатаНачала = ?(ПустоеЗначение(ВыбДатаНачала) = 1,ВыбДатаКонца,ВыбДатаНачала);
	
	Расшифровка.Установить("ДатаНачала", 	ВыбДатаНачала);
	Расшифровка.Установить("ДатаКонца", 	ВыбДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",Фирма);
	Расшифровка.Установить("ВыбРазделитель2","");
	Расшифровка.Установить("ВыбРазделитель3","");
	Расшифровка.Установить("ВидРазделителя",1);
	
	Расшифровка.Установить("ВыбКонтрагент", Договор.Владелец);
	Расшифровка.Установить("ВыбДоговор", 	Договор);
	Расшифровка.Установить("ПоОперациям", 0);
	Если Роль = "Поставщик" Тогда
		Расшифровка.Установить("СписокВидовОтчетов",2);
	ИначеЕсли Роль = "Покупатель" Тогда                
		Расшифровка.Установить("СписокВидовОтчетов",1); 
	КонецЕсли;
	Расшифровка.Установить("ВыбВидВалюты",	1); // бух учет
	
	Расшифровка.Установить("Долги", 1);
	Расшифровка.Установить("Просроченные", 0);
	
	Расшифровка.Установить("Группировки",	Группировки);  
	
	глОбработкаРасшифровки(Расшифровка,"","");
	
КонецПроцедуры // глВзаиморасчеты()

//******************************************************************************
// глНомерНаПечать(Документ, НеПечататьВходящийНомер = 0) Экспорт
//
// Параметры:
//  Документ                - документ, чей номер надо получить для печати.
//  НеПечататьВходящийНомер - Число, 0 - печатем входящий номер, если он есть,
//                                   1 - независимо ни от чего будем печатать номер документа
//
// Возвращаемое значение.
//  Строка - номер документа для печати
//
// Описание:
//  Процедура предназначена для преобразования номера документа.
//  Используется, например, при выводе номера документа на печать.
//
Функция глНомерНаПечать(Документ, НеПечататьВходящийНомер = 0) Экспорт
	
	Номер = "";
	
	Если ПустоеЗначение(Документ)= 0 Тогда 
		// Если документ имеет входящий номер, то печатать будем его.
		Если (глЕстьРеквизитШапки("НомерДокВходящий", Документ.Вид()) = 1) 
		и (НеПечататьВходящийНомер = 0) Тогда
			Номер=СокрЛП(Документ.НомерДокВходящий);        
		КонецЕсли; 
		
		// Если входящий номер пуст или его вообще нет, то печатаем номер документа
		Если ПустоеЗначение(Номер) = 1 Тогда
			Номер=СокрЛП(Документ.НомерДок);
			
			// назначенный документу префикс
			Префикс=СокрЛП(Константа.ПрефиксИБ)+ СокрЛП(Документ.Фирма.ЮрЛицо.ПрефиксНомеровДокументов);
			
			// удаление префикса из номера документа
			Если Найти(Номер, Префикс)=1 Тогда 
				Номер=Сред(Номер, СтрДлина(Префикс)+1);
			КонецЕсли;
			
			// в документах, перенессеных из старых редакций, может остаться "минус" впереди
			Если Лев(Номер, 1) = "-" Тогда                   
				Номер	= Сред(Номер, 2);
			КонецЕсли;
			
			// удаление ведущих нулей
			Пока Лев(Номер, 1)="0" Цикл
				Номер=Сред(Номер, 2);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Номер; 
	
КонецФункции // глНомерНаПечать()

//******************************************************************************
// глТекстНазначениеПлатежа(Конт)
//
// Параметры:                
//  Конт - контекст платежного документа
//
// Возвращаемое значение:
//  Строка - текст поля "Назначение платежа" платежного документа.
//
// Описание:
//  Формирует текст поля "Назначение платежа" платежного документа.
//
Функция глТекстНазначениеПлатежа(Конт) Экспорт
	
	// Алгоритм формирования такой же, как в обработке "ВводПлатежныхРеквизитов".
	
	Стр = СокрП(Конт.СчетКонтрагента.Назначение);
	
	Стр = Стр+" сумма "+СокрЛ(Формат(Конт.Сумма,"Ч15.2-"));
	
	Если глЕстьРеквизитШапки("СтавкаНДС", Конт.Вид()) = 1 Тогда
		Если глВыделяемыйНДС(Конт.СтавкаНДС) <> 0 Тогда
			СуммаНДС = Конт.Сумма * глВыделяемыйНДС(Конт.СтавкаНДС);
			Стр = Стр+РазделительСтрок+"в т.ч. НДС ("+Конт.СтавкаНДС+"): "+СокрЛ(Формат(СуммаНДС,"Ч15.2-"));
		Иначе
			Стр = Стр+РазделительСтрок+"без налога (НДС)";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛ(Стр);
	
КонецФункции // глТекстНазначениеПлатежа()

//******************************************************************************
// глПлатежныеРеквизиты(Счет, СтрОрганизация="", СтрБанк="", РасчСчет="", БИК="", КоррСчет="")
//
// Параметры:
//  Счет    - элемент справочника "Банковские счета".
//  СтрОрганизация, СтрБанк, РасчСчет, БИК, КоррСчет - переменные, в которые
//  передается результат.
//
// Описание:
//  Формирует банковские реквизиты платежного документа.
//
Процедура глПлатежныеРеквизиты(Счет, СтрОрганизация="", СтрБанк="", РасчСчет="", БИК="", КоррСчет="") Экспорт
	
	Если ПустоеЗначение(Счет.ЮрФизЛицо) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ЮрФизЛицо = Счет.ЮрФизЛицо;
	
	Организация = "";
	глДобавитьРеквизит(Организация, "ИНН ", ЮрФизЛицо.ИНН);
	глДобавитьРеквизит(Организация, " ", ЮрФизЛицо.ПолнНаименование);
	
	Если Счет.БанкДляРасчетов.Выбран() = 1 Тогда
		глДобавитьРеквизит(Организация, " р/с ", Счет.НомерСчета);
		глДобавитьРеквизит(Организация, " в ", Счет.Банк.Наименование);
		глДобавитьРеквизит(Организация, " ", Счет.Банк.Местонахождение);
		
		глДобавитьРеквизит(СтрБанк, "", Счет.БанкДляРасчетов.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.БанкДляРасчетов.Местонахождение);
		
		РасчСчет = Счет.Банк.КоррСчет;
		БИК = Счет.БанкДляРасчетов.Код;
		КоррСчет = Счет.БанкДляРасчетов.КоррСчет;
	Иначе
		глДобавитьРеквизит(СтрБанк, "", Счет.Банк.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.Банк.Местонахождение);
		
		РасчСчет = Счет.НомерСчета;
		БИК = Счет.Банк.Код;
		КоррСчет = Счет.Банк.КоррСчет;
	КонецЕсли;
	
	Если ПустаяСтрока(СтрОрганизация) = 1 Тогда
		СтрОрганизация = Организация;
	КонецЕсли;
	
КонецПроцедуры // глПлатежныеРеквизиты()  

//******************************************************************************
// глРеквизитыПлательщикаПолучателя(Парам)
//
// Параметры:
//  Парам    - "СписокЗначений", содержащий входные и выходные параметры.
//				(входные параметры 
//                 вариант 1: "БанковскийСчет"-обязательный, "Режим","РеквизитРезультата","Контекст"-необязательные
//                 вариант 2: "ИНН","НомерСчета","Банк","БанкДляРасчетов" - обязательные,  "Режим","РеквизитРезультата","Контекст"-необязательные
//               выходные параметры
//                 "Результат","СтрокаБанка","РасчетныСчет","БИК","КоррСчет"
// 
// Описание:
//  Формирует банковские реквизиты для форм банковских документов и форсм справочников "Контрагенты","Фирмы","БанковскиеСчета".
//  Исходными данными в варианте 1 является база данных 1С (реквизиты справочников)
//  Исходными данными в варианте 2 являются параметры задаваемые в списке значений (переменные или реквизиты диалога)
//
Процедура глРеквизитыПлательщикаПолучателя(Парам) Экспорт
	
	Перем Организация,Счет,ЮрФизЛицо,СтрБанк,ИсточникИБ;
	
	Если ПустоеЗначение(Парам.Получить("БанковскийСчет"))=0 Тогда
		
		// Формируем строку из ИБ на основании переданного расчетного счета Контрагента (иначе из параметров)
		ИсточникИБ        = 1;
		Счет      = Парам.Получить("БанковскийСчет");
		ЮрФизЛицо = Счет.ЮрФизЛицо;
	КонецЕсли;
	
	Организация = "";
	СтрБанк     = "";
	
	глДобавитьРеквизит(Организация, "", ?(ИсточникИБ=1,ЮрФизЛицо.ПолнНаименование,Парам.Получить("НаименованиеКонтрагента")));
	
	Если ИсточникИБ = 1 Тогда
		
		Если Счет.БанкДляРасчетов.Выбран() = 1 Тогда
			глДобавитьРеквизит(Организация, " р/с ", Счет.НомерСчета);
			глДобавитьРеквизит(Организация, " в ", Счет.Банк.Наименование);
			глДобавитьРеквизит(Организация, " ", Счет.Банк.Местонахождение);
			
			глДобавитьРеквизит(СтрБанк, "", Счет.БанкДляРасчетов.Наименование);
			глДобавитьРеквизит(СтрБанк, " ", Счет.БанкДляРасчетов.Местонахождение);
			
			РасчСчет = Счет.Банк.КоррСчет;
			БИК = Счет.БанкДляРасчетов.Код;
			КоррСчет = Счет.БанкДляРасчетов.КоррСчет;
		Иначе
			глДобавитьРеквизит(СтрБанк, "", Счет.Банк.Наименование);
			глДобавитьРеквизит(СтрБанк, " ", Счет.Банк.Местонахождение);
			
			РасчСчет = Счет.НомерСчета;
			БИК = Счет.Банк.Код;
			КоррСчет = Счет.Банк.КоррСчет;
		КонецЕсли;
		
		Если (ПустаяСтрока(Счет.РеквизитыПлательщикаИлиПолучателя)=0) И (Парам.Получить("Режим") = 1) Тогда
			//подмена значением из реквизита счета
			Организация = СокрЛП(Счет.РеквизитыПлательщикаИлиПолучателя);
		КонецЕсли;
		
	Иначе 
		
		Если (ПустоеЗначение(Парам.Получить("Банк"))=0) И
		(ПустоеЗначение(Парам.Получить("БанкДляРасчетов"))=0) Тогда
			
			глДобавитьРеквизит(Организация, " р/с ", Парам.Получить("НомерСчета"));
			глДобавитьРеквизит(Организация, " в ", Парам.Получить("Банк").Наименование);
			глДобавитьРеквизит(Организация, " ", Парам.Получить("Банк").Местонахождение);
			
			глДобавитьРеквизит(СтрБанк, "", Парам.Получить("БанкДляРасчетов").Наименование);
			глДобавитьРеквизит(СтрБанк, " ", Парам.Получить("БанкДляРасчетов").Местонахождение);
			
			РасчСчет = Парам.Получить("Банк").КоррСчет;
			БИК = Парам.Получить("БанкДляРасчетов").Код;
			КоррСчет = Парам.Получить("БанкДляРасчетов").КоррСчет;
			
		ИначеЕсли ПустоеЗначение(Парам.Получить("Банк"))=0 Тогда
			
			глДобавитьРеквизит(СтрБанк, "", Парам.Получить("Банк").Наименование);
			глДобавитьРеквизит(СтрБанк, " ",Парам.Получить("Банк").Местонахождение);
			
			РасчСчет = Парам.Получить("НомерСчета");
			БИК = Парам.Получить("Банк").Код;
			КоррСчет = Парам.Получить("Банк").КоррСчет;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Парам.Получить("Контекст"))="ГрупповойКонтекст" Тогда
		
		// В группе параметров передан контекст
		
		Если ПустаяСтрока(Парам.Получить("РеквизитРезультата"))=0  Тогда
			
			// В группе параметров передан реквизит формы, в который нужно записать результат
			Кнт = Парам.Получить("Контекст");
			Если ПустаяСтрока(Кнт.ПолучитьАтрибут(Парам.Получить("РеквизитРезультата"))) = 1 Тогда
				Кнт.УстановитьАтрибут(Парам.Получить("РеквизитРезультата"),Организация);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Парам.ДобавитьЗначение(Организация,"Результат");
	Парам.ДобавитьЗначение(СтрБанк,"СтрокаБанка");
	Парам.ДобавитьЗначение(РасчСчет,"РасчетныйСчет");
	Парам.ДобавитьЗначение(БИК,"БИК");
	Парам.ДобавитьЗначение(КоррСчет,"КоррСчет");
	
КонецПроцедуры // глРеквизитыПлательщикаПолучателя()
   
//Валерий МЭТР:проверка проекта интернет-магазина
Функция глПроектИнтернетМагазин(Проект) Экспорт  
	
	Если Найти(Проект.Наименование, "Инт. магазин") > 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;		
	КонецЕсли; 
	
КонецФункции

//Валерий МЭТР: заполнение реквизитов "Эксперт", "Инженерные системы XXI век"
Процедура глРеквизитыФирмы(ВыбЮЛ, Парам, ДатаРекв = "") Экспорт
	
	Если ВыбЮЛ = "Эксп" Тогда
		Если (ДатаРекв = "") Тогда
			Парам.ДобавитьЗначение("Общество с ограниченной ответственностью ""ЭКСПЕРТ""","ПолноеНаименованиеФирмы");
			Парам.ДобавитьЗначение("197082, г. Санкт-Петербург, ул. Туристская, дом 30, корп. 1, литер А, помещение 32Н","ПредставлениеЮрАдресаФирмы"); 
			Парам.ДобавитьЗначение("197082, г. Санкт-Петербург, ул. Туристская, дом 30, корп. 1, литер А, помещение 32Н","ПредставлениеЮрАдресаГрузоотправителя");
			Парам.ДобавитьЗначение("Филиал № 7806 ВТБ 24 (ПАО)","Банк");
			Парам.ДобавитьЗначение("40702810304060010682","РасчСчет");
			Парам.ДобавитьЗначение("044030811","БИК");
			Парам.ДобавитьЗначение("30101810300000000811","КоррСчет");
			Парам.ДобавитьЗначение("7806137596","ИНН");
			Парам.ДобавитьЗначение("781401001","КПП");
			Парам.ДобавитьЗначение("1037816008471","ОГРН");
			Парам.ДобавитьЗначение("13802439","ОКПО");
			Парам.ДобавитьЗначение("777-36-77","Телефон");
			Парам.ДобавитьЗначение("640-64-97","Факс");
			Парам.ДобавитьЗначение("Симоненко Н.В.","ГенДир");
			Парам.ДобавитьЗначение("Нещеретова О.Ю.","ГлавБух");
			Парам.ДобавитьЗначение("(ООО ""ЭКСПЕРТ"")","СокрНаименованиеФирмы");
		Иначе	
			Парам.ДобавитьЗначение("Общество с ограниченной ответственностью ""ЭКСПЕРТ""","ПолноеНаименованиеФирмы");
			Парам.ДобавитьЗначение("198099, г.Санкт-Петербург, ул.Гладкова, дом 10","ПредставлениеЮрАдресаФирмы"); 
			Парам.ДобавитьЗначение("198099, г.Санкт-Петербург, ул.Гладкова, дом 10","ПредставлениеЮрАдресаГрузоотправителя");
			Парам.ДобавитьЗначение("Филиал № 7806 ВТБ 24 (ПАО)","Банк");
			Парам.ДобавитьЗначение("40702810304060010682","РасчСчет");
			Парам.ДобавитьЗначение("044030811","БИК");
			Парам.ДобавитьЗначение("30101810300000000811","КоррСчет");
			Парам.ДобавитьЗначение("7806137596","ИНН");
			Парам.ДобавитьЗначение("780501001","КПП");
			Парам.ДобавитьЗначение("1037816008471","ОГРН");
			Парам.ДобавитьЗначение("13802439","ОКПО");
			Парам.ДобавитьЗначение("777-36-77","Телефон");
			Парам.ДобавитьЗначение("640-64-97","Факс");
			Парам.ДобавитьЗначение("Симоненко Н.В.","ГенДир");
			Парам.ДобавитьЗначение("Руколеева Л.Ю.","ГлавБух");
			Парам.ДобавитьЗначение("(ООО ""ЭКСПЕРТ"")","СокрНаименованиеФирмы"); 
		КонецЕсли;
	ИначеЕсли ВыбЮЛ = "Форсаж" Тогда
		Парам.ДобавитьЗначение("Общество с ограниченной ответственностью ""Форсаж""","ПолноеНаименованиеФирмы");
		Парам.ДобавитьЗначение("Россия,195197,Санкт-Петербург г, пр-кт.Полюстровский,дом 87","ПредставлениеЮрАдресаГрузоотправителя");
		Парам.ДобавитьЗначение("194356, г.Санкт-Петербург, пр.Энгельса, дом 128, лит.А, помещение 3-Н","ПредставлениеЮрАдресаФирмы");
		Парам.ДобавитьЗначение("ПАО ""Энергомашбанк""","Банк");
		Парам.ДобавитьЗначение("40702810801080096196","РасчСчет");
		Парам.ДобавитьЗначение("044030754","БИК");
		Парам.ДобавитьЗначение("30101810700000000754","КоррСчет");
		Парам.ДобавитьЗначение("7802519450","ИНН");
		Парам.ДобавитьЗначение("780445001","КПП");
		Парам.ДобавитьЗначение("1157847153310","ОГРН");
		Парам.ДобавитьЗначение("01235165","ОКПО");
		Парам.ДобавитьЗначение("777-36-77","Телефон");
		Парам.ДобавитьЗначение("640-64-97","Факс");
		Парам.ДобавитьЗначение("Николаева В.В.","ГенДир");
		Парам.ДобавитьЗначение("Самусева С.П.","ГлавБух");
		Парам.ДобавитьЗначение("(ООО ""Форсаж"")","СокрНаименованиеФирмы");
	ИначеЕсли ВыбЮЛ = "Эталон" Тогда
		Парам.ДобавитьЗначение("Общество с ограниченной ответственностью ""ЭТАЛОН""","ПолноеНаименованиеФирмы");
		Парам.ДобавитьЗначение("Россия,195197,Санкт-Петербург г, пр-кт.Полюстровский,дом 87","ПредставлениеЮрАдресаГрузоотправителя");
		Парам.ДобавитьЗначение("197082, Санкт-Петербург, Туристская улица, дом 30, корп.1, лит. А, помещение 32Н","ПредставлениеЮрАдресаФирмы");
		Парам.ДобавитьЗначение("Филиал № 7806 ВТБ 24 (ПАО)","Банк");
		Парам.ДобавитьЗначение("40702810227360002257","РасчСчет");
		Парам.ДобавитьЗначение("044030811","БИК");
		Парам.ДобавитьЗначение("30101810300000000811","КоррСчет");
		Парам.ДобавитьЗначение("7813360475","ИНН");
		Парам.ДобавитьЗначение("781401001","КПП");
		Парам.ДобавитьЗначение("5067847506656","ОГРН");
		Парам.ДобавитьЗначение("96814411","ОКПО");
		Парам.ДобавитьЗначение("777-36-77","Телефон");
		Парам.ДобавитьЗначение("640-64-97","Факс");
		Парам.ДобавитьЗначение("Симоненко Н.В.","ГенДир");
		Парам.ДобавитьЗначение("Нещеретова О.Ю.","ГлавБух");
		Парам.ДобавитьЗначение("(ООО ""ЭТАЛОН"")","СокрНаименованиеФирмы");
	Иначе
		Парам.ДобавитьЗначение("","ПолноеНаименованиеФирмы");
		Парам.ДобавитьЗначение("","ПредставлениеЮрАдресаФирмы");
		Парам.ДобавитьЗначение("","ПредставлениеЮрАдресаГрузоотправителя");
		Парам.ДобавитьЗначение("","Банк");
		Парам.ДобавитьЗначение("","РасчСчет");
		Парам.ДобавитьЗначение("","БИК");
		Парам.ДобавитьЗначение("","КоррСчет");
		Парам.ДобавитьЗначение("","ИНН");
		Парам.ДобавитьЗначение("","КПП");
		Парам.ДобавитьЗначение("","ОГРН");
		Парам.ДобавитьЗначение("","ОКПО");
		Парам.ДобавитьЗначение("","Телефон");
		Парам.ДобавитьЗначение("","Факс");
		Парам.ДобавитьЗначение("","ГенДир");
		Парам.ДобавитьЗначение("","ГлавБух");
		Парам.ДобавитьЗначение("","СокрНаименованиеФирмы");
	КонецЕсли;
		
КонецПроцедуры

//******************************************************************************
// глВыводДатыПлатежныхДокументов(ДатаДок, Счет)
//
// Параметры: 
//  ДатаДок - Дата платежа по документу.
//  Счет    - элемент справочника "Банковские счета".
//
// Возвращаемое значение:
//  Строка - дата платежного документа.
//
// Описание:
//  Формирует дату платежного документа с месяцем цифрами или прописью.
//
Функция глВыводДатыПлатежныхДокументов(ДатаДок, Счет) Экспорт
	
	Если ПустоеЗначение(Счет) = 1 Тогда
		Возврат Формат(ДатаДок, "Д ДДММГГГГ");
		
	ИначеЕсли Счет.МесяцПрописью = 0 Тогда
		Возврат Формат(ДатаДок, "Д ДДММГГГГ");
		
	Иначе
		Возврат НРег(Формат(ДатаДок,"Д (0)ДДММММГГГГ"));
	КонецЕсли;
	
КонецФункции // глВыводДатыПлатежныхДокументов()

//******************************************************************************
// глВыводСуммыПлатежныхДокументов(СуммаДок, Счет, Вариант = 0)
//		
// Параметры: 
//  СуммаДок - переменная типа число (Сумма платежа по документу).
//  Счет     - элемент справочника "Банковские счета".
//  Вариант  - формат возвращаемого значения: 1 - прописью, 0 - числом.
//
// Возвращаемое значение:
//  Строка - сумма платежа по платежному документу.
//
// Описание:
//  Формирует сумму платежного документа цифрой и прописью.
//
Функция глВыводСуммыПлатежныхДокументов(СуммаДок, Счет, Вариант = 0) Экспорт
	
	Если ПустоеЗначение(Счет) = 1 Тогда
		СуммаЧислом   = СокрЛ(Формат(СуммаДок,"Ч15.2-"));
		СуммаПрописью = Формат(СуммаДок,"ЧПДС");
		
	ИначеЕсли (Счет.СуммаБез00Копеек = 1) и (ПустоеЗначение(СуммаДок-Цел(СуммаДок))=1) Тогда 
		СуммаЧислом   = СокрЛ(Формат(СуммаДок,"Ч13"))+"=";
		СуммаПрописью = СтрЗаменить(Формат(СуммаДок,"ЧПДС"),"00 копеек","");
		
	Иначе
		СуммаЧислом   = СокрЛ(Формат(СуммаДок,"Ч15.2-"));
		СуммаПрописью = Формат(СуммаДок,"ЧПДС");
	КонецЕсли;
	
	Возврат ?(Вариант = 0, СуммаЧислом, СуммаПрописью);
	
КонецФункции // глВыводСуммыПлатежныхДокументов()

//******************************************************************************
// глСформироватьДвиженияДокумента(Док)
//
// Параметры:
//  Док - контекст документа
//
// Возвращаемое значение:
//  Нет
//
// Описание: 
//  Эта процедура формирует отчет о движениях регистров документа
//
Процедура глСформироватьДвиженияДокумента(Док)  Экспорт
	
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!", 60);
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Предупреждение("При вызове проц. глСформироватьДвиженияДокумента в параметре не передан Документ", 60);
		Возврат;
	КонецЕсли;
	
	Если Докум.Проведен()=0 Тогда
		Предупреждение("Документ не проведен!", 60);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДвиженияДокумента"+"#",Докум);
	
КонецПроцедуры //глСформироватьДвиженияДокумента()

//******************************************************************************
// глСформироватьДеревоДокументов(Док)
//
// Параметры:
// 	Док - контекст документа
//
// Возвращаемое значение:
//  Нет
//
// Описание: 
// Эта процедура формирует Дерево подчиненных документов
//
Процедура глСформироватьДеревоДокументов(Док)  Экспорт
	
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
		
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!", 60);
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
		
	Иначе
		Сообщить("Процедура глСформироватьДеревоДокументов: Не указан документ.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Отчет.ДеревоДокументов"+"#",Докум);
	
КонецПроцедуры   //глСформироватьДеревоДокументов()

//******************************************************************************
// глПолучитьСписокВводимыхНаОсновании(Конт)
//
// Параметры
//  Конт - документ или контекст формы документа, на основании которого будет
//           вводится новый документ
//
// Возвращаемое значение: 
//  Список значений, содержащий идентификаторы и 
//  представления видов документов
//
// Описание: 
//  На основе объекта "Метаданные" формируем список видов документов
// 	которые можно вводить на основании заданного
//
Функция глПолучитьСписокВводимыхНаОсновании(Конт) Экспорт
	Перем СписокВидов, ВидДок;
	Перем Счетчик, Позиция;
	Перем ИД, Представление;                      
	
	СписокВидов = СоздатьОбъект("СписокЗначений");
	
	ВидДок = Конт.Вид();
	Для Счетчик=1 По Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Количество() Цикл
		ИД = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Идентификатор;
		Представление = Метаданные.Документ(ВидДок).ВводимыеНаОснованииДокументы.Получить(Счетчик).Представление();
		СписокВидов.ДобавитьЗначение(ИД,Представление);
	КонецЦикла;
	
	Возврат СписокВидов;
КонецФункции // глПолучитьСписокВводимыхНаОсновании()

//******************************************************************************
// глВыписатьПодчиненныйДокумент(Конт) 
//
// Параметры:
// 	Конт - документ или контекст формы документа, на основании которого будет
//         вводится новый документ
//
// Возвращаемое значение:
//  Нет
//
// Описание:
// 	1) Формирует список документов, которые можно ввести на основании данного.
// 	2) Вводит на основании переданного новый документ выбранного вида
//
Процедура глВыписатьПодчиненныйДокумент(Конт) Экспорт
	Перем СписокВидов, ВидПодч;
	
	// ввод документа на основании
	Если НЕ((ТипЗначенияСтр(Конт) = "Документ") ИЛИ (ТипЗначенияСтр(Конт) = "ГрупповойКонтекст")) Тогда
		Сообщить("Ошибка: параметр должен иметь тип значения 'Документ' или 'ГрупповойКонтекст'");
		Возврат;
	Иначе
		Если Конт.Выбран() = 0 Тогда
			Предупреждение("Нельзя вводить на основании не сохраненного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокВидов = глПолучитьСписокВводимыхНаОсновании(Конт);
	Если СписокВидов.РазмерСписка() = 0 Тогда
		Предупреждение("Нельзя вводить на основании данного вида документа!", 60);
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Конт)="ГрупповойКонтекст" Тогда
		МожноЗаписывать = 1;
		//есть неподтвержденные заявки в которых при открытии заполняется колока количество факт
		//и если этот документ раньше последовательности лучше не перезаписывать
		//такие моменты возникают редко 1 раз в пол года
		Если Конт.Вид() = "ЗаявкаПокупателя" Тогда 
			ГП = Последовательность.ОсновнаяПоследовательность.ПолучитьДокумент();
			Если ПустоеЗначение(ГП) = 0 Тогда
				ГП = Последовательность.ОсновнаяПоследовательность.ПолучитьДату();
				Если ГП > Конт.ДатаДок Тогда
					МожноЗаписывать = 0;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		
		Если Конт.Модифицированность()=1 Тогда
			Если Вопрос("Изменения документа не записаны. Это может привести к некорректному"+РазделительСтрок+
			"заполнению вводимого на основании документа. Записать документ?","Да+Нет", 60) <> "Нет" Тогда
				Если МожноЗаписывать = 1 Тогда
					Конт.Записать();
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = 0;
	Если СписокВидов.ВыбратьЗначение(ВидПодч,"Выбор вида документа",Позиция) = 1 Тогда
		// Выбрали вид документа
		ОткрытьФорму("Документ."+ВидПодч,,Конт.ТекущийДокумент());
	КонецЕсли;
	
КонецПроцедуры // глВыписатьПодчиненныйДокумент()    

//******************************************************************************
// глСформироватьБухПроводкиДокумента(Док)
//
// Параметры:
//  Док - контекст документа.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует отчет по проводкам, которые будут сформированы документом
//  при экспорте проводок в бухгалтерию. 
//
Процедура глСформироватьБухПроводкиДокумента(Док)
	
	
	Если ПустоеЗначение(Док)=1 Тогда
		Предупреждение("Выберите документ!", 60);
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!", 60);
			Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗначенияСтр(Док) <> "Документ" Тогда
		Сообщить("При вызове проц. глСформироватьБухПроводкиДокумента в параметре не передан Документ","I");
		Возврат;
	КонецЕсли;
	
	Если Док.Проведен()=0 Тогда
		Предупреждение("Документ не проведен!", 60);
		Возврат;
	КонецЕсли;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "ПроводкиПоХозОперации");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ВыбДокумент", Док.ТекущийДокумент());
	глОбработкаРасшифровки(Расшифровка,0,0);
	
КонецПроцедуры // глСформироватьБухПроводкиДокумента()

//******************************************************************************
// ОтчетОСостоянииДокумента(Док,Отчет)
//
// Параметры:
//  Конт  - контекст документа "Заявка Покупателя"
//  Отчет - идентификатор отчета: "СостояниеЗаказа" или "СостояниеЗаявки"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирование отчета о состоянии заявки или заказа.
//
Процедура ОтчетОСостоянииДокумента(Док,Отчет)
	
	Если ПустоеЗначение(Док)=1 Тогда
		Предупреждение("Выберите документ!", 60);
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Докум=Док;
	ИначеЕсли ТипЗначенияСтр(Док)="ГрупповойКонтекст" Тогда
		Если Док.СравнитьТА()=-2 Тогда
			Предупреждение("Документ не записан!", 60);
			Возврат;
		Иначе
			Докум=Док.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Док.Проведен()=0 Тогда
		Предупреждение("Документ не проведен!", 60);
		Возврат;
	КонецЕсли;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	
	Расшифровка.Установить("Отчет", Отчет);
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаКонца",       ПолучитьДатуТА());
	Расшифровка.Установить("ВыбНоменклатура", "");    
	Расшифровка.Установить("ВыбДокумент",     Док.ТекущийДокумент());
	
	глОбработкаРасшифровки(Расшифровка,0,0);
	
КонецПроцедуры // ОтчетОСостоянииДокумента()

//******************************************************************************
// глВыгрузить(Конт)
//
// Параметры:
//  Конт - контекст формы документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обработка действия: "Выгрузить (отправить по эл.почте)"
//
Процедура глВыгрузить(Конт) Экспорт
	
	Если Конт.Выбран() = 0 Тогда
		Предупреждение("Перед выполнением данной операции необходимо сохранить документ!", 60);
		Возврат;
	ИначеЕсли Конт.Модифицированность() = 1 Тогда
		Предупреждение("Документ был изменен. Перед выгрузкой необходимо записать документ!", 60);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуМодально("Обработка.XMLВыгрузкаДокумента", Конт.ТекущийДокумент());
	
КонецПроцедуры	// глВыгрузить()
                    


Процедура глЗаполнитьПоПоследнемуПриходу(Конт) 
	     
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку() = 1  Цикл
	    
		__Товар = Конт.Номенклатура;
		
		Валюта2 = Конт.Валюта;
		Курс2	= Конт.Курс; 

		Валюта1 = Константа.ВалютаУпрУчета;
		Валюта1.ИспользоватьДату(Конт.ДатаДок);
		Курс1	= Валюта1.Курс; 

		Конт.Цена=  глПересчет(__Товар.ПоследняяЦенаПрихода.Получить(Конт.ДатаДок),Валюта1,Курс1,Валюта2,Курс2);
		
		Конт.Сумма = Конт.Цена*Конт.Количество;
	
		 Если Конт.Вид() <> "ОприходованиеТМЦ" Тогда
		глРасчетНалога(Конт,"НДС");
	    КонецЕсли;
	
		
	КонецЦикла;
	


	
КонецПроцедуры	

//++Ерошенко 31.05.2007
// процедура изменена по просьбе Ивановой, в виду некорректности заполнения.. 

//Процедура глПроставьГТД(конт)
//	конт.ВыбратьСтроки();
//	а=1;
//	пока конт.ПолучитьСтроку()=1 Цикл
//		если а=1 тогда 
//			ГТД=конт.партия.ГТД; 
//		КонецЕсли;
//		конт.партия.ГТД = ГТД;
//		а=а+1;
//	КонецЦикла;
//	Сообщить("Список ГТД изменён и установлен в соответствии с 1-ой строкой документа");
//КонецПроцедуры 

Процедура глПроставьГТД(Конт) 
	СпрПартии = СоздатьОбъект("Справочник.Партии");      
	СпрНом =    СоздатьОбъект("Справочник.Номенклатура");  
	
	Вып = 0;
	Конт.ВыбратьСтроки();
	а = 1;
	Пока Конт.ПолучитьСтроку()=1 Цикл
		Если а = 1 Тогда   
			Если Конт.Партия.ГТД.Выбран() = 0 Тогда
				Предупреждение("В первой строке не указан номер ГТД");
				Прервать;
			КонецЕсли;
			ГТД = Конт.Партия.ГТД; 
		Иначе 
			Если СпрПартии.НайтиЭлемент(Конт.Партия) = 1 Тогда 
//				Если СпрПартии.ГТД.Выбран() = 1 Тогда
//					Сообщить("По "+Конт.Номенклатура+" уже проставлен номер ГТД"); 
//				Иначе
					СпрПартии.ГТД = ГТД;
					СпрПартии.Записать();
					Конт.Партия.ГТД = ГТД;   
					Вып = 1;
//				КонецЕсли;
			Иначе
				Сообщить("Не смогли проставить номер ГТД в партию для "+Конт.Номенклатура);
			КонецЕсли;  
			
			// теперь по просьбе Ивановой добавляем ГТД в карточку номенклатуры.. 
			Если СпрНом.НайтиЭлемент(Конт.Номенклатура) = 1 Тогда
				СпрНом.НомерГТД = ГТД;
				СпрНом.Записать();
				Конт.Партия.ГТД = ГТД;
				Вып = 1;
			Иначе
				Сообщить("Не смогли проставить номер ГТД в карточку "+Конт.Номенклатура);	
			КонецЕсли;
		КонецЕсли;
		а = а + 1;
	КонецЦикла; 
	Если Вып = 0 Тогда
		Сообщить("Список ГТД не изменён");
	Иначе
		Сообщить("Список ГТД изменён и установлен в соответствии с 1-ой строкой документа");
	КонецЕсли;
КонецПроцедуры
//--Ерошенко

Процедура глПроставь2еКоличество(конт)
	конт.ВыбратьСтроки();
	пока конт.ПолучитьСтроку()=1 Цикл
		конт.Количество2 = конт.Количество;
	КонецЦикла;
	Сообщить("Колонки количества были успешно синхронизированы...");
КонецПроцедуры
               

Процедура глСформироватьЗаявкуНаСклад(Конт)
	ОткрытьФорму("Документ.ЗаявкаПокупателя",,Конт.ТекущийДокумент());
КонецПроцедуры	

Процедура глСформироватьРеализацию(Конт)
	ОткрытьФорму("Документ.Реализация",,Конт.ТекущийДокумент());
КонецПроцедуры	

//======================================================================
Процедура глСформироватьПеремещение(Конт)
	ОткрытьФорму("Документ.ПеремещениеТМЦ_Розница",,Конт.ТекущийДокумент());	
КонецПроцедуры // глСформироватьПеремещение

//****************************************************************************** 
// глДействия(Конт, СписокДействий) 
//
// Параметры:
//  Конт - контекст формы документа
//  СписокДействий - список значений, содержащий список возможных действий по документу
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//	вызывается по кнопке "Действия..." в документе и журнале
//
Процедура глДействия(Конт, СписокДействий) Экспорт
	Перем Действие;
	Перем ДокументЖурнала;
	
	Если СписокДействий.ВыбратьЗначение(Действие,,,,1)>0 Тогда
		Если Действие = "Отчет о движениях документа" Тогда
			глСформироватьДвиженияДокумента(Конт); 

		ИначеЕсли Действие = "Заполнить по последним приходам" Тогда
			глЗаполнитьПоПоследнемуПриходу(Конт); 
			
		ИначеЕсли Действие = "Обновление цен в справочнике" Тогда
			ОткрытьФорму("Обработка.ОбновлениеЦенИзДокумента",Конт);
			
		ИначеЕсли Действие = "Отчет о состоянии заявки" Тогда
			ОтчетОСостоянииДокумента(Конт,"СостояниеЗаявки");
			
		ИначеЕсли Действие = "Отчет о состоянии заказа" Тогда
			ОтчетОСостоянииДокумента(Конт,"СостояниеЗаказа");
			
		ИначеЕсли Действие = "Отчет о бухгалтерских проводках" Тогда
			глСформироватьБухПроводкиДокумента(Конт);
			
		ИначеЕсли Действие = "Структура подчиненности" Тогда
			глСформироватьДеревоДокументов(Конт);   
			
		ИначеЕсли Действие = "Ввести на основании" Тогда
			глВыписатьПодчиненныйДокумент(Конт); 
			
		ИначеЕсли Действие = "Скопировать в..." Тогда
			ОткрытьФорму("Обработка.КопированиеДокумента",Конт); 
			
		ИначеЕсли Действие = "Добавить из документа" Тогда
			Конт.ОткрытьПодбор("Обработка.ДобавитьИзДокумента",, Конт);
			
		ИначеЕсли Действие = "Изменить спецификацию" Тогда
			ОткрытьФормуМодально("Обработка.ГрупповаяОбработкаМнЧДокументов1",Конт);
			Конт.Форма.Обновить(0);
			
		ИначеЕсли Действие = "Выгрузить (отправить по эл.почте)" Тогда
			глВыгрузить(Конт);
		ИначеЕсли Действие = "Перейти в журнал" Тогда
			Если Конт.СравнитьТА()=-2 Тогда
				Предупреждение("Документ не записан!",60);
			Иначе
				ДокументЖурнала = Конт.ТекущийДокумент();
				
				Если глЗначениеПоУмолчанию("ЗакрыватьДокументПриПереходеВжурнал") = 1 Тогда
					Если Конт.Модифицированность() = 1 Тогда
						ТекстВопроса = "Сохранить документ?";
						Если (Конт.Проведен() = 1) и (Конт.ПриЗаписиПерепроводить() = 1) Тогда
							ТекстВопроса = ТекстВопроса + "
							|(Документ будет перепроведен)";
						КонецЕсли;
						
						ТекстОтвета = Вопрос(ТекстВопроса, "Да+Нет+Отмена", 60);
						
						Если ТекстОтвета = "Да" Тогда
							Конт.Записать();
							Конт.Форма.Закрыть();
							
						ИначеЕсли ТекстОтвета = "Нет" Тогда
							Конт.Форма.Закрыть(0);
							
						Иначе
							Возврат;
						КонецЕсли;
						
					Иначе
						Конт.Форма.Закрыть();
					КонецЕсли;                                                                                                  			
					
				КонецЕсли;
				ОткрытьФорму("Журнал.ЖурналОбщий.ФормаСписка",ДокументЖурнала);
			КонецЕсли;
		// тута мое уже
		ИначеЕсли Действие = "Проставь ГТД как 1-е" Тогда
			глПроставьГТД(конт);
		ИначеЕсли Действие = "Проставь 2-е количество" Тогда
			глПроставь2еКоличество(конт);
		ИначеЕсли Действие = "Сформировать заявку на склад"	Тогда
			глСформироватьЗаявкуНаСклад(Конт);
		ИначеЕсли Действие = "Сформировать реализацию" Тогда
			глСформироватьРеализацию(Конт);
		ИначеЕсли Действие = "Сформировать перемещение в магазин" Тогда
			глСформироватьПеремещение(Конт);
		ИначеЕсли Действие = "Очистить строки по остаткам" Тогда
			глОчиститьСтрокиПоОстаткам(Конт);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры // глДействия()

//******************************************************************************
// глПриИзмененииДаты(Конт)
//
// Параметры: 
//  Конт - контекст документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается при изменении даты документа, в котором есть табличная часть
//  с Номенклатурой, а также реквизиты шапки Валюта, Договор, Дата оплаты.
//
Процедура глПриИзмененииДаты(Конт)  Экспорт
	
	Перем Валюта, Курс, ДатаДокумента, Глубина;
	
	Валюта        = Конт.Валюта;
	Курс          = Конт.Курс; 
	ДатаДокумента = Конт.ДатаДок;
	Глубина       = Конт.Договор.ГлубинаКредита;
	
	
	// При изменении даты документа надо изменить дату оплаты
	// с учетом глубины кредита, заданной в договоре
	
	Если глЕстьРеквизитШапки("ДатаОплаты", Конт.Вид()) = 1 Тогда
		Конт.ДатаОплаты = глБанковскаяДата(ДатаДокумента, Глубина);
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("ДатаДокВходящий", Конт.Вид()) = 1 Тогда
		Конт.ДатаДокВходящий = ДатаДокумента;
	КонецЕсли;
	
	// При изменении даты документа нужно проверить не изменился ли курс валюты,
	// и если изменился, то предложить пересчитать документ
	Если Конт.Итог("Сумма") = 0 Тогда
		
		// Если выбрана валюта. то меняем ее курс
		Если ПустоеЗначение(Валюта) = 0 Тогда
			Конт.Курс   = глКурсДляВалюты(Валюта, ДатаДокумента);
		КонецЕсли;                                                    
		
	Иначе // Если документ уже заполнен, то предлагаем его пересчитать
		
		ПромКурс = глКурсДляВалюты(Валюта, ДатаДокумента);
		
		Если (	ПромКурс <> Курс ) Тогда
			Если Вопрос("На дату документа у валюты документа был задан другой курс.
			|Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
				
				КурсПрежн 	= Курс;
				Конт.Курс 	= глКурсДляВалюты(Валюта, ДатаДокумента);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // глПриИзмененииДаты()

//******************************************************************************
// глПриИзмененииФирмы(Конт)
//
// Параметры: 
//  Конт - текущий контекст документа    
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из форм документов при смене фирмы. 
//  Меняется номер документа и параметры налогобложения
//
Процедура глПриИзмененииФирмы(Конт, ВидОперации = "Опт")   Экспорт
	
	ЮрЛицоФирмы = Конт.Фирма.ЮрЛицо;
	
	Если ПустоеЗначение(ЮрЛицоФирмы) = 1 Тогда
		Возврат;  // Делать нечего
	КонецЕсли;
	
	
	ВидДок = Конт.Вид();
	
	ЕстьУчитыватьНДС	= глЕстьРеквизитШапки("УчитыватьНДС"	, ВидДок);
	ЕстьУчитыватьНП		= глЕстьРеквизитШапки("УчитыватьНП"		, ВидДок);
	
	Если глЕстьРеквизитШапки("ОблагаетсяЕНВД" , ВидДок) = 1 Тогда
		ОблагаетсяЕНВД	= Конт.ОблагаетсяЕНВД;
	Иначе
		ОблагаетсяЕНВД	= 0;
	КонецЕсли;
	
	// При изменении Юр.Лица надо изменить номер документа
	Если Конт.ЮрЛицо <> ЮрЛицоФирмы Тогда
		Конт.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(ЮрЛицоФирмы.ПрефиксНомеровДокументов));
		Конт.ЮрЛицо = ЮрЛицоФирмы;
	КонецЕсли;
	
	Если (ЕстьУчитыватьНДС = 1)
	и    (Конт.Вид() <> "ПереоценкаРозница")
	и    (Конт.Вид() <> "ПеремещениеТМЦ")
	и    (ОблагаетсяЕНВД = 0)
	Тогда
		
		//Проверим, не изменились ли параметры налогообложения для юр.лица
		Изменилось        = 0;
		НовоеУчитыватьНДС = ЮрЛицоФирмы.УчитыватьНДС;
		Изменилось        = ?(НовоеУчитыватьНДС = Конт.УчитыватьНДС, 0, 1);
		
		Если ЕстьУчитыватьНП = 1 Тогда    
			НовоеУчитыватьНП = ЮрЛицоФирмы.УчитыватьНП;
			Изменилось       = ?(НовоеУчитыватьНП = Конт.УчитыватьНП, Изменилось, 1);
		КонецЕсли;
		
		Если Изменилось = 1 Тогда
			
			// Есть что пересчитывать?
			Пересчитываем = 0;
			Если Конт.КоличествоСтрок() > 0 Тогда
				
				ТекстВопроса = "Для собственного юр. лица """ + ЮрЛицоФирмы.Наименование + 
				" порядок налогообложения по умолчанию отличается от установленного в документе.";
				
				Если (НовоеУчитыватьНДС <> Конт.УчитыватьНДС) Тогда
					ТекстВопроса = ТекстВопроса + РазделительСтрок+
					?(НовоеУчитыватьНДС=1,"  Не учитывать НДС -> учитывать НДС.","  УчитыватьНДС -> не учитывать НДС.")
				КонецЕсли;
				
				Если ЕстьУчитыватьНП = 1 Тогда    
					Если (НовоеУчитыватьНП <> Конт.УчитыватьНП) Тогда
						ТекстВопроса = ТекстВопроса + РазделительСтрок+
						?(НовоеУчитыватьНП=1,"  Не учитывать НП -> учитывать НП.","  Учитывать НП -> не учитывать НП.")
					КонецЕсли;
				КонецЕсли;
				
				ТекстВопроса = ТекстВопроса + РазделительСтрок+"Пересчитать суммы налогов в документе?";
				
				Ответ = Вопрос(ТекстВопроса ,"Да+Нет", 60); 
				
				Если Ответ = "Да" Тогда
					Пересчитываем = 1;
				Иначе
					// Юр. лицо все равно поменяем, но пересчитывать и менять параметры налогов не будем
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ВключаяНП  = 0;
			ВключаяНДС = 0;						
			Если ЕстьУчитыватьНДС = 1 Тогда
				Конт.УчитыватьНДС = НовоеУчитыватьНДС;
				ВключаяНДС        = Конт.СуммаВклНДС;
			КонецЕсли;
			
			Если ЕстьУчитыватьНП = 1 Тогда
				Конт.УчитыватьНП = НовоеУчитыватьНП;
				ВключаяНП        = Конт.СуммаВклНП;
			КонецЕсли;
			
			Если Пересчитываем = 1 Тогда
				глПересчитатьНалоги(Конт, ВключаяНП, ВключаяНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если нужен расчетный счет, то поставим его по умолчанию
	Если глЕстьРеквизитШапки("БанковскийСчет", ВидДок) = 1 Тогда
		
		Конт.БанковскийСчет = Конт.Фирма.ОсновнойСчет;
		
	КонецЕсли;  
	
КонецПроцедуры // глПриИзмененииФирмы()

//******************************************************************************
// глПриИзмененииДоговора(Конт) Экспорт
//
// Параметры: 
//  Конт       - контекст документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из модуля форм документов при смене договора
//
Процедура глПриИзмененииДоговора(Конт) Экспорт
	
	Перем Валюта, Курс, ДатаДокумента, Договор, Глубина, ТипЦен, Скидка;
	
	ВидДок = Конт.Вид();
	
	ЕстьСкидка       = глЕстьРеквизитШапки("Скидка",       ВидДок);
	ЕстьТипЦен       = глЕстьРеквизитШапки("ТипЦен",       ВидДок);
	ЕстьВалюта       = глЕстьРеквизитШапки("Валюта",       ВидДок);
	ЕстьСуммаВклНП	 = глЕстьРеквизитШапки("СуммаВклНП",   ВидДок);
	ЕстьСуммаВклНДС	 = глЕстьРеквизитШапки("СуммаВклНДС",  ВидДок);
	
	
	
	ДатаДокумента = Конт.ДатаДок;  
	Договор       = Конт.Договор;
	Глубина       = Договор.ГлубинаКредита;
	
	Если (ВидДок = "ВозвратОтПокупателя")
	или (ВидДок = "РеализацияРозница")
	или (ВидДок = "ОтчетККМ")Тогда
		Если Конт.Склад.РозничныйСклад = 1 Тогда               
			Если Договор.Выбран() = 1 Тогда
				Если Договор.ВалютаВзаиморасчетов  <> глРубли Тогда
					Предупреждение("Все операции розничного склада по продаже или возврату от покупателя могут осуществляться только по рублевым договорам!", 60); 
					Конт.Договор = "";    
					Возврат;
				КонецЕсли;                      
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Конт.Контрагент) = 1 Тогда
		Конт.Контрагент	= Договор.Владелец;
	КонецЕсли;
	
	// Меняем дату оплаты
	Если глЕстьРеквизитШапки("ДатаОплаты", ВидДок) = 1  Тогда     
		Конт.ДатаОплаты=глБанковскаяДата(ДатаДокумента,Глубина);	
	КонецЕсли;   
	
	
	Если ВидДок = "РеализацияРозница"  Тогда
		ЕстьВалюта = 0;
	КонецЕсли;
	
	Если ЕстьВалюта = 1 Тогда
		Валюта        = Конт.Валюта;
		Курс          = Конт.Курс; 
		ТипЦен        = ?(ЕстьТипЦен = 1,Конт.ТипЦен,ПолучитьПустоеЗначение("Справочник.ТипыЦен"));
		Скидка        = ?(ЕстьСкидка = 1,Конт.Скидка, Договор.Скидка);
		
		
		// Договор хранит параметры взаиморасчетов
		// Если документ еще не заполнен (сумма = 0), то надо установить
		// валюту, курс. тип цен, скидку в соответствии с договором
		НоваяВалюта = ?(ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=0,Договор.ВалютаВзаиморасчетов,Валюта);
		
		Если Конт.КоличествоСтрок() = 0 Тогда
			Конт.Валюта = НоваяВалюта;
			Конт.Курс   = глКурсДляВалюты(Конт.Валюта, ДатаДокумента);
			Если ЕстьТипЦен = 1 Тогда
				
				// Тип цен устанавливаем, только если он задан в договоре
				Если ПустоеЗначение(Договор.ТипЦен) = 0 Тогда
					Конт.ТипЦен = Договор.ТипЦен;
					
					// Флаги включения налогов в сумму устанавливаем в соответствии с типом цен
					Если ЕстьСуммаВклНДС = 1 Тогда
						Конт.СуммаВклНДС = Конт.ТипЦен.ЦенаВклНДС;
					КонецЕсли;
					Если ЕстьСуммаВклНП = 1 Тогда
						Конт.СуммаВклНП = Конт.ТипЦен.ЦенаВклНП;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;    
			
			Если ЕстьСкидка = 1 Тогда
				Конт.Скидка = Договор.Скидка;
			КонецЕсли;
		Иначе
			
			// Если заполнен и по другим параметрам, то предварительно спрашиваем
			Изменили = 0;
			ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
			|отличные от установленных в документе.";
			Если  Валюта  <> НоваяВалюта Тогда
				Изменили     = 1;
				ТекстВопроса = ТекстВопроса + РазделительСтрок + 
				"Валюта документа: """ + СокрЛП(Валюта) +
				""", договора: """ +  СокрЛП(НоваяВалюта) + """."
			КонецЕсли;	
			
			Если (ТипЦен  <> Договор.ТипЦен) И (ПустоеЗначение(Договор.ТипЦен) = 0 )  Тогда
				Изменили     = 1;
				ТекстВопроса = ТекстВопроса + РазделительСтрок + 
				"Тип цен документа: """ + СокрЛП(ТипЦен) +
				""", договора: """ +  СокрЛП(Договор.ТипЦен) + """."
			КонецЕсли;
			
			Если Скидка  <> Договор.Скидка Тогда
				Изменили     = 1;
				ТекстВопроса = ТекстВопроса + РазделительСтрок + 
				"Скидка по документу: """ + 
				?(ПустоеЗначение(Скидка) = 1,"Не задана",СокрЛП(Скидка)) +
				""",  по договору: """ +  
				?(ПустоеЗначение(Договор.Скидка) = 1,"Не задана",СокрЛП(Договор.Скидка)) +
				"""."
			КонецЕсли;         
			
			НовыйТипЦен = 0;
			Если Изменили = 1 Тогда
				Если Вопрос(ТекстВопроса + РазделительСтрок + 
				"Пересчитать документ в соответствии с договором?","Да+Нет",60) = "Да" Тогда
					
					ВалютаПрежн = Валюта;
					КурсПрежн   = Курс;
					
					Конт.Валюта = НоваяВалюта;
					Конт.Курс   = глКурсДляВалюты(Конт.Валюта, ДатаДокумента);
					Если ЕстьТипЦен = 1 Тогда
						Если ПустоеЗначение(Договор.ТипЦен) = 0 Тогда
							Конт.ТипЦен = Договор.ТипЦен;
							НовыйТипЦен = Договор.ТипЦен;
						КонецЕсли;
					КонецЕсли;
					Если ЕстьСкидка = 1 Тогда
						Если ПустоеЗначение(Договор.Скидка) = 0 Тогда
							Конт.Скидка = Договор.Скидка;
						КонецЕсли;
					КонецЕсли;
					глПересчитатьСтрокиДокумента(Конт, ВалютаПрежн, КурсПрежн, НовыйТипЦен);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // глПриИзмененииДоговора()

//******************************************************************************
// глПриИзмененииКонтрагента(Конт)
//
// Параметры: 
//  Конт - текущий контекст документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается при смене контрагента в форме документа
//
Процедура глПриИзмененииКонтрагента(Конт) Экспорт
	
	ВидДок     = Конт.Вид();
	Контрагент = Конт.Контрагент;
	
	// если сменили контрагента - надо назначить договор по умолчанию
	Конт.Договор = Контрагент.ОсновнойДоговор;
	
	// И выполнить действия при смене договора
	глПриИзмененииДоговора(Конт);
	
	//Если нужен расчетный счет, то его надо поставить по умолчанию
	Если глЕстьРеквизитШапки("СчетКонтрагента", ВидДок) = 1 Тогда
		
		Конт.СчетКонтрагента = Контрагент.ОсновнойСчет;
		
	КонецЕсли;
	
КонецПроцедуры // глПриИзмененииКонтрагента()

//******************************************************************************
// глНайтиСчетФактуру(Конт,ВидСФ,ВозврПомУд)
//
// Параметры:
// 	Конт		- текущий контекст формы документа
// 	ВидСФ		- (Строка) - название вида документа (счета фактуры)
//  ВозврПомУд	- 1 - возвращать и помеченный на удаление СФ, 0 - не возвращать.
//                Значение по умолчанию 1.
//
// Возвращаемое значение:  
//  Найденный счет-фактура или ""
//
// Описание:
// 	Функция ищет счет-фактуру документа среди подчиненных документов
//
Функция глНайтиСчетФактуру(Конт,ВидСФ,ВозврПомУд=1) Экспорт
	Перем ДокПодч;
	
	СФПомНаУд	= "";
	
	// проверяем чтобы был записан всегда!
	Если (Конт.Выбран() = 1) Тогда
		
		ДокПодч	= СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,Конт.ТекущийДокумент());
		
		Пока  ДокПодч.ПолучитьДокумент()=1 Цикл
			Если ДокПодч.Вид() = ВидСФ Тогда
				ТекСФ	= ДокПодч.ТекущийДокумент();
				
				Если ТекСФ.ПометкаУдаления() = 1 Тогда
					Если (ПустоеЗначение(СФПомНаУд) = 1) И (ВозврПомУд = 1) Тогда
						СФПомНаУд	= ТекСФ;
					КонецЕсли;
				Иначе
					Возврат ТекСФ;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СФПомНаУд;
	
КонецФункции // глНайтиСчетФактуру()

//******************************************************************************
// глПредставлениеДокумента(Документ)
//
// Параметры:
//	Документ - любой документ
//
// Возвращаемое значение:
//	Строка - представление документа
//
// Описание:
//	Возвращает представление документа: <Представление> №<НомерДок> от <ДатаДок>
//
Функция глПредставлениеДокумента(Документ) Экспорт
	
	Если (ТипЗначения(Документ)=12)
	и    (ПустоеЗначение(Документ)=0)
	Тогда   
		Представление = глНазваниеДокументаВЖурнале(Документ);
		Если глЕстьРеквизитШапки("НомерДокВходящий", Документ.Вид()) = 1 тогда
			
			Если ПустоеЗначение(Документ.НомерДокВходящий) = 0 Тогда
				Представление = Представление + " вх. № " + СокрЛП(Документ.НомерДокВходящий) +
				" от " + Документ.ДатаДокВходящий;
			Иначе
				Представление = Представление + " № " + СокрЛП(Документ.НомерДок) +
				" от " + Документ.ДатаДок;
			КонецЕсли;
		Иначе
			Представление = Представление + " № " + СокрЛП(Документ.НомерДок) 
			+ " от " + Документ.ДатаДок; 
		КонецЕсли;
		Возврат Представление;
	КонецЕсли;
	Возврат ""
	
КонецФункции	// глПредставлениеДокумента()

//******************************************************************************
// глПредставлениеСФ(СФ, ДляПечати)
//
// Параметры:
//  СФ        - документ (счет фактура полученный или выданный)
//  ДляПечати - флаг, если не пуст, то номер документа надо представить также,
//              как для печати (без префиксов и лидирующих нулей), не обязательный параметр
//
// Возвращаемое значение:
//  Строка - представление СФ в форме документа
//
// Описание:
//  Для полученных СФ представление - это номер и дата входящие,
// 	для выданных - НомерДок и ДатаДок.
//
Функция глПредставлениеСФ(СФ, ДляПечати = 0) Экспорт
	Перем СтрПредставлениеСФ;
	
	Если ПустоеЗначение(СФ) = 1 Тогда
		СтрПредставлениеСФ	= "";
	Иначе
		Если СФ.Вид() = "СчетФактураПолученный" Тогда
			СтрПредставлениеСФ	= " № " + СокрЛП(СФ.НомерДокВходящий)+" от "+СокрЛП(СФ.ДатаДокВходящий);
		ИначеЕсли СФ.Вид() = "ВозвратПоставщику" Тогда
			СтрПредставлениеСФ	= СФ.НомерДатаСФ;
		Иначе
			СтрПредставлениеСФ	= " № " + ?(ПустоеЗначение(ДляПечати) = 1, СокрЛП(СФ.НомерДок), глНомерНаПечать(СФ)) + " от " + СФ.ДатаДок;
		КонецЕсли;
		
		Если СФ.ПометкаУдаления() = 1 Тогда
			СтрПредставлениеСФ	= СтрПредставлениеСФ + " (Помечен на удаление!)";
		ИначеЕсли СФ.Проведен() = 0 Тогда
			СтрПредставлениеСФ	= СтрПредставлениеСФ + " (Не проведен!)";
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтрПредставлениеСФ;
	
КонецФункции // глПредставлениеСФ()

//******************************************************************************
// глВводСчетаФактуры(Конт,ВидСФ)
//
// Параметры:
// 	Конт - текущий контекст формы документа
// 	ВидСФ - (Строка) - название вида документа (счета фактуры)
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Счет-фактура" в документах.
// 	Производит ввод счета-фактуры, если она еще не введена, или открытие
// 	формы счета-фактуры, если она уже есть
//
Процедура глВводСчетаФактуры(Конт,ВидСФ) Экспорт
	Перем ФормаСчФ;
	//Если Конт.Проведен()=0  Тогда
	//	Предупреждение("Счет-фактуру нельзя вводить на основании не проведенного документа!", 60);
	//	Возврат;
	//КонецЕсли;
	Если конт.Выбран()=0 Тогда
		Предупреждение("Документ не записан! Сначала следует записать документ!", 60);
		Возврат;
	КонецЕсли;
	
	СчетФактура 	= глНайтиСчетФактуру(Конт,ВидСФ);
	ФормаНакладной 	= Конт;
	Если ПустоеЗначение(СчетФактура) = 1 Тогда
		Если Конт.Модифицированность() = 1 Тогда
			Предупреждение("Документ был изменен! Сначала следует записать документ!", 60);
			Возврат;
		КонецЕсли;
		ОткрытьФорму("Документ."+ВидСФ,ФормаНакладной,Конт.ТекущийДокумент());
	Иначе
		ОткрытьФорму(СчетФактура,ФормаНакладной);
	КонецЕсли;
КонецПроцедуры //глВводСчетаФактуры()

//******************************************************************************
// глСуммаСчетаФактуры(ДокСФ, СуммаНДС, СуммаНП)
//
// Параметры: 
//  ДокСФ    - Значение типа "Документ" (СчетФактураВыданный или СчетФактураПолученный)
//  СуммаНДС - Переменная, куда будет возвращена сумма НДС по СФ
//  СуммаНП  - Переменная, куда будет возвращена сумма НП  по СФ
//
// Возвращаемое значение:
//  Сумма всего по СФ
//
// Описание:
//  Возвращает полную сумму СФ, вычисляя ее из документа - основания. (Нужна,
//  поскольку в самом СФ никакие суммы не хранятся).
//
Функция глСуммаСчетаФактуры(ДокСФ, СуммаНДС, СуммаНП) Экспорт
	
	СуммаВсего = 0;                                 
	СуммаНДС   = 0;
	СуммаНП    = 0;
	
	Если (ДокСФ.ДокОснование.Выбран() = 1)
	и    (ДокСФ.КоличествоСтрок() = 0)
	Тогда
		ДокОснование = ДокСФ.ДокОснование;
	Иначе
		ДокОснование = ДокСФ;
	КонецЕсли;
	
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн = "ОтчетКомитенту")
	или  (ВидОсн = "ЗакрытиеМесяца")
	Тогда
		РегКнигаПродаж = СоздатьОбъект("Регистр.КнигаПродаж");
		
		РегКнигаПродаж.ВыбратьДвиженияДокумента(ДокОснование);
		Пока РегКнигаПродаж.ПолучитьДвижение() = 1 Цикл
			Если РегКнигаПродаж.Приход = 1 Тогда
				СуммаНДС     = СуммаНДС   + РегКнигаПродаж.СуммаНДС;
				СуммаНП      = СуммаНП    + РегКнигаПродаж.СуммаНП;
				СуммаВсего   = СуммаВсего + РегКнигаПродаж.СуммаРуб;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если (ВидОсн = "ВводОстатковПокупателя")
		или  (ВидОсн = "ВводОстатковПоставщика")   
		Тогда
			СуммаВсего   = ДокОснование.Итог("СуммаРуб");
		Иначе
			//КАГ 23.09.09
			//добавлено для вывода суммы счет фактуры от реально предоставленной скидки
			Если ВидОсн = "Реализация" Тогда
				Если ДокОснование.ВыданоСоСкидкой = 1 Тогда
					СуммаВсего   = ДокОснование.Итог("Сумма");
				Иначе
					СуммаВсего   = ДокОснование.Итог("СуммаБезСкидки");
				КонецЕсли;
			Иначе
				СуммаВсего   = ДокОснование.Итог("Сумма");
			КонецЕсли;
			//------------------------------------------------------------------------
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("СуммаНП", ВидОсн) = 1 Тогда          
			СуммаНП = ДокОснование.Итог("СуммаНП");
			Если глЕстьРеквизитШапки("СуммаВклНП", ВидОсн) = 1 Тогда
				СуммаВсего = СуммаВсего + ?(ДокОснование.СуммаВклНП = 1, 0, СуммаНП);
			КонецЕсли;
		КонецЕсли;
		
		Если ВидОсн = "ПоступлениеТМЦИмпорт" Тогда
			СуммаНДС = глПересчет(ДокОснование.Итог("СуммаНДСРуб"),Константа.ВалютаСчетовФактур, ДокОснование.ДатаДок, ДокОснование.Валюта, ДокОснование.Курс);
		Иначе
			//КАГ 23.09.09
			//добавлено для вывода суммы счет фактуры от реально предоставленной скидки
			Если ВидОсн = "Реализация" Тогда
				Если ДокОснование.ВыданоСоСкидкой = 1 Тогда
					Если глЕстьРеквизитМнЧ("СуммаНДС", ВидОсн) = 1 Тогда          
						СуммаНДС = ДокОснование.Итог("СуммаНДС");
						Если глЕстьРеквизитШапки("СуммаВклНДС", ВидОсн) = 1 Тогда
							СуммаВсего = СуммаВсего + ?(ДокОснование.СуммаВклНДС = 1, 0, СуммаНДС);
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если глЕстьРеквизитМнЧ("СуммаНДСБезСкидки", ВидОсн) = 1 Тогда          
						СуммаНДС = ДокОснование.Итог("СуммаНДСБезСкидки");
						Если глЕстьРеквизитШапки("СуммаНДСБезСкидки", ВидОсн) = 1 Тогда
							СуммаВсего = СуммаВсего + ?(ДокОснование.СуммаВклНДС = 1, 0, СуммаНДС);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если глЕстьРеквизитМнЧ("СуммаНДС", ВидОсн) = 1 Тогда          
					СуммаНДС = ДокОснование.Итог("СуммаНДС");
					Если глЕстьРеквизитШапки("СуммаВклНДС", ВидОсн) = 1 Тогда
						СуммаВсего = СуммаВсего + ?(ДокОснование.СуммаВклНДС = 1, 0, СуммаНДС);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			//------------------------------------------------------------------------
		КонецЕсли;
	КонецЕсли;
	   
	СуммаВсего	=  глПересчет(СуммаВсего,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);
	СуммаНДС	=  глПересчет(СуммаНДС,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);

	СуммаНП		=  глПересчет(СуммаНП,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);

	
	Возврат СуммаВсего;  
	
КонецФункции // глСуммаСчетаФактуры()

//******************************************************************************
// глСформироватьСписокОснований(Док)
//
// Параметры: 
//  Док - Контекст (формы) документа
//
// Возвращаемое значение: 
//  Строку списка через запятую идентификаторов документов, 
//  которые могут являться основанием для документа, 
//  переданного в виде параметра
//
// Описание: 
//  Функция формирует список документов, которые могут являться основанием
//  для документа, переданного в виде параметра, 
//
Функция глСформироватьСписокОснований(Док) Экспорт            
	
	Перем СтрокаВидов, ВидДокумента, Счетчик, СчетчикВложенный;
	Перем АнализДок, ВидАнализДок, ВводимыйДок;
	
	СтрокаВидов ="";
	ВидДокумента=Док.Вид();
	
	// нам нужно найти документы, на основании которых можно вводить наш документ
	Для Счетчик=1 По Метаданные.Документ() Цикл
		
		АнализДок 		= Метаданные.Документ(Счетчик);
		ВидАнализДок 	= АнализДок.Идентификатор;
		
		Для СчетчикВложенный =1 По АнализДок.ВводимыеНаОснованииДокументы.Количество() Цикл
			
			ВводимыйДок=АнализДок.ВводимыеНаОснованииДокументы.Получить(СчетчикВложенный);
			Если ВидДокумента = ВводимыйДок.Идентификатор Тогда
				// то есть наш документ вводится на основании анализируемого
				Если ПустаяСтрока(СтрокаВидов) = 0 Тогда
					СтрокаВидов = СтрокаВидов + ",";
				КонецЕсли;
				СтрокаВидов = СтрокаВидов + ВидАнализДок;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СтрокаВидов;
	
КонецФункции // глСформироватьСписокОснований()

//******************************************************************************
// глВыбратьОснование(Док)
//
// Параметры:
//  Док - Контекст (формы) документа
//
// Возвращаемое значение: 
//  Выбранный документ-основание, если не выбрали, то возвращает пустой документ
//
// Описание: 
//  Функция формирует список документов, которые могут являться основанием
//  для документа, переданного в виде параметра, открывает диалог выбора
//  Документа-основания и возвращает выбранный документ
//
Функция глВыбратьОснование(Док) Экспорт
	
	Перем Основание, СтрокаВидов;
	
	Если ПустоеЗначение(Док) = 1 Тогда
		// Ничего не передали
		Возврат "";
	КонецЕсли;
	
	Основание=СоздатьОбъект("Документ");   
	
	// Формируем список возможных оснований
	СтрокаВидов = глСформироватьСписокОснований(Док);
	
	Если ПустоеЗначение(СтрокаВидов) = 0 Тогда
		// есть документы, вводимые на основании вида текущего документа
		Основание.ВидыДляВыбора(СтрокаВидов);
		Если Основание.Выбрать("Выбор документа основания")=1 Тогда
			ДокОснование = Основание.ТекущийДокумент();
		КонецЕсли;
	Иначе           
		// Основания быть не может
		Предупреждение("У данного документа не может быть документа-основания.", 60);
	КонецЕсли;   
	
	Возврат Основание.ТекущийДокумент();
	
КонецФункции // глВыбратьОснование()

//******************************************************************************
// глАктивизироватьРеквизит(Конт)
//
// Параметры:
//  Конт - контекст формы документа.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Активизирует один из реквизитов при открытии документа.
//
Процедура глАктивизироватьРеквизит(Конт) Экспорт
	
	Перем ИмяРеквизита;
	
	// Список - порядок актиизации реквизитов.
	// В представлении - идентификатор теквизита.
	// В значении      - 0 - активизировать, если реквизит пустой
	//                   1 - активизировать всегда.
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Список.ДобавитьЗначение(0, "ВидДокВходящий");
	Список.ДобавитьЗначение(0, "НомерДокВходящий");
	Список.ДобавитьЗначение(0, "ДатаДокВходящий");
	Список.ДобавитьЗначение(0, "Фирма");
	Список.ДобавитьЗначение(1, "Склад");
	Список.ДобавитьЗначение(1, "БанковскийСчет");
	Список.ДобавитьЗначение(1, "Касса");
	Список.ДобавитьЗначение(1, "ФизЛицо");
	Список.ДобавитьЗначение(1, "Контрагент");
	
	Конт.Активизировать("ДатаДок");
	
	Для Номер = 1 По Список.РазмерСписка() Цикл
		Список.ПолучитьЗначение(Номер, ИмяРеквизита);
		
		Если глЕстьРеквизитШапки(ИмяРеквизита, Конт.Вид()) = 1 Тогда
			
			Если ПустоеЗначение(Конт.ПолучитьАтрибут(ИмяРеквизита)) = 1 Тогда
				Прервать;
			КонецЕсли;
			
			Конт.Активизировать(ИмяРеквизита);
			
			Если Список.ПолучитьЗначение(Номер, ИмяРеквизита) = 1 Тогда
				Прервать;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // глАктивизироватьРеквизит()

//******************************************************************************
// глЗаполнитьШапку(Конт, Скопирован, ВидОперации = "") Экспорт
//
// Параметры:
// 	Конт        - текущий контекст формы документа
//  Скопирован  - признак того, что документ скопирован
//  ВидОперации - необязаетельный, строка вида операции ("покупка" или "продажа"),
//                если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
// Возвращаемое значение:
// 	Нет
//
// Описание:
//	Процедура предназначена для заполняются общих реквизитов документов
//	Данная функция вызывается в предопределенных процедурах ВводНового() из
//	модулей форм всех документов. Процедура выполняет заполнение общих 
//	реквизитов новых документов.     
//
Процедура глЗаполнитьШапку(Конт, Скопирован, ВидОперации = "") Экспорт
	
	Конт.Автор	= глПользователь;  
	ВидДок	    = Конт.Вид();
	
	Если Скопирован  = 1 Тогда
		
		// если документ скопирован, то новый номер надо устанавливать с учетом всех префиксов на момент копирования
		Конт.УстановитьНовыйНомер( СокрЛП( Константа.ПрефиксИБ) + СокрЛП( Конт.ЮрЛицо.ПрефиксНомеровДокументов));
		
		// если документ скопирован, то дата Оплаты не может быть меньше даты документа
		Если глЕстьРеквизитШапки("ДатаОплаты",ВидДок) = 1 Тогда
			Если Конт.ДатаДок > Конт.ДатаОплаты Тогда
				
				Конт.ДатаОплаты  = Конт.ДатаДок; // по умолчанию ставим дату документа
				
				// если есть договор, то заполняем по договору
				Если глЕстьРеквизитШапки("Договор",ВидДок) = 1 Тогда
					Конт.ДатаОплаты=глБанковскаяДата(Конт.ДатаДок,Конт.Договор.ГлубинаКредита);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// если документ скопирован, то дата Отгрузки не может быть меньше даты документа
		Если глЕстьРеквизитШапки("ДатаОтгрузки",ВидДок) = 1 Тогда
			Если Конт.ДатаДок > Конт.ДатаОтгрузки Тогда
				Конт.ДатаОтгрузки = Конт.ДатаДок;
			КонецЕсли;
		КонецЕсли;
		
		Если глЕстьРеквизитШапки("Курс",ВидДок) = 1 Тогда
			// курс всегда устанавливается на дату документа
			Конт.Курс   = глКурсДляВалюты(Конт.Валюта,Конт.ДатаДок);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли; // Если Скопирован  = 1
	
	
	//Если (ПустоеЗначение(Конт.Проект) = 1)
	//	и (Конт.Вид() <> "ЗаявкаКлиентаРозница")
	//	и (Конт.Вид() <> "СчетБнРозница")
	//	и (Конт.Вид() <> "РасходнаяНакладнаяРозницаБезнал") Тогда
	//	Конт.Проект = глЗначениеПоУмолчанию("ОсновнойПроект");
	//КонецЕсли;   
	
	Если ПустоеЗначение(Конт.Фирма) = 1 Тогда
		
		Конт.Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
		
		Если ПустоеЗначение(Конт.Фирма) = 0 Тогда
			
			// Обычные действия при смене фирмы (надо поменять номер и пареметры налогообложения)
			глПриИзмененииФирмы(Конт);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// установим склад
	Если глЕстьРеквизитШапки("Склад",ВидДок) = 1 Тогда
		
		// в документе есть реквизит склад
		Если ПустоеЗначение(Конт.Склад) = 1 Тогда 
			Конт.Склад	= глЗначениеПоУмолчанию("ОсновнойСклад");
		КонецЕсли;
	КонецЕсли;
	
	// установим контрагента
	Если глЕстьРеквизитШапки("Контрагент",ВидДок) = 1 Тогда
		Если ПустоеЗначение(Конт.Контрагент) = 1 Тогда 
			// заполняем, если пустой
			Если Нрег(ВидОперации) = "покупка" Тогда
				Конт.Контрагент = глЗначениеПоУмолчанию("ОсновнойПоставщик");
				
			ИначеЕсли Нрег(ВидОперации) = "продажа" Тогда
				Конт.Контрагент = глЗначениеПоУмолчанию("ОсновнойПокупатель");
			КонецЕсли;
		КонецЕсли;
		
		Если глЕстьРеквизитШапки("Договор",ВидДок) = 1 Тогда
			// установим договор (есть контрагент, есть и договор)
			Если ПустоеЗначение(Конт.Договор) = 1 Тогда 
				Конт.Договор = Конт.Контрагент.ОсновнойДоговор; 
				
				// заполним реквизиты по документу в соответствии с договором
				глПриИзмененииДоговора(Конт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Валюта
	Если глЕстьРеквизитШапки("Валюта",ВидДок) = 1 Тогда
		Если ПустоеЗначение(Конт.Валюта) = 1 Тогда 
			
			// Валюта в документе есть, а контрагент, если и есть, то не выбран (у него есть основной договор)
			// Договор не выбран (там обязана быть валюта), ставим рубли
			Конт.Валюта = глРубли;
			Если глЕстьРеквизитШапки("Курс",ВидДок) = 1 Тогда
				Конт.Курс   = глКурсДляВалюты(глРубли,Конт.ДатаДок);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	// Дата Оплаты
	Если глЕстьРеквизитШапки("ДатаОплаты",ВидДок) = 1 Тогда
		Если ПустоеЗначение(Конт.ДатаОплаты) = 1 Тогда
			
			// Значит не выбран договор, ставим дату оплаты текущую
			Конт.ДатаОплаты  = Конт.ДатаДок; 
		КонецЕсли;
	КонецЕсли;
	
	// Дата отгрузки
	Если глЕстьРеквизитШапки("ДатаОтгрузки",ВидДок) = 1 Тогда
		Если ПустоеЗначение(Конт.ДатаОтгрузки) = 1 Тогда
			
			Конт.ДатаОтгрузки = Конт.ДатаДок;
		КонецЕсли;
	КонецЕсли;
	
	// ТипЦен
	Если глЕстьРеквизитШапки("ТипЦен",ВидДок) = 1 Тогда
		
		// если не определен тип цен, то ставим по умолчанию
		Если ПустоеЗначение(Конт.ТипЦен) = 1 Тогда 
			Если Нрег(ВидОперации) = "покупка" Тогда
				Конт.ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПокупки");
				
			ИначеЕсли Нрег(ВидОперации) = "продажа" Тогда
				Конт.ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
			КонецЕсли;
		КонецЕсли;
		
		// Если заполнили тип цен, то надо заполнить флаги включения налогов (документ новый)
		ТипЦен = Конт.ТипЦен;
		Если ПустоеЗначение(ТипЦен) = 0 Тогда 
			
			
			// Если цены выбранного типа расчетные, то флаги включения налогов надо брать из базовой цены
			Если ПустоеЗначение(ТипЦен.Рассчитывается) = 0 Тогда
				ТипЦен = ТипЦен.БазовыйТипЦен;
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("СуммаВклНДС", ВидДок) = 1 Тогда
				
				Конт.СуммаВклНДС = ТипЦен.ЦенаВклНДС;
				
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("СуммаВклНП", ВидДок) = 1 Тогда
				
				Если Конт.УчитыватьНП = 1 Тогда
					
					Конт.СуммаВклНП = ТипЦен.ЦенаВклНП;
					
				КонецЕсли;
			КонецЕсли;
		Иначе         
			Если глЕстьРеквизитШапки("СуммаВклНП", ВидДок) = 1 Тогда
				
				Конт.СуммаВклНП = Конт.УчитыватьНП;   
				
			КонецЕсли;
			
			Если глЕстьРеквизитШапки("СуммаВклНДС", ВидДок) = 1 Тогда
				
				Конт.СуммаВклНДС = Конт.УчитыватьНДС;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //глЗаполнитьШапку()

//******************************************************************************
// глЗаполнитьШапкуНаОсн(Конт, ДокОсн,  ВидОперации = "")
//
// Параметры:
// 	Конт - текущий контекст формы
// 	ДокОсн - документ, на основании которого вводится новый документ
//  ВидОперации - необязаетельный, строка вида операции ("покупка" или "продажа"),
//                если не передан, то реквизиты, зависящие от вида операции, не заполняются
//
// Возвращаемое значение:
// 	Нет
//
// Описание:
//	Процедура предназначена для заполнения общих реквизитов документов
//	Данная функция вызывается в предопределенных процедурах ВводНаОсновании() из
//	модулей форм всех документов. Процедура выполняет заполнение общих 
//	реквизитов новых документов при вводе на основании.
//
Процедура глЗаполнитьШапкуНаОсн(Конт, ДокОсн,  ВидОперации = "") Экспорт
	
	Конт.Автор=глПользователь;
	
	ВидДок=Конт.Вид();
	Если глЕстьРеквизитШапки("ДокОснование",ВидДок) = 1 Тогда
		Конт.ДокОснование = ДокОсн;	
	КонецЕсли;                      
	
	// вначале заполним значениями по умолчанию, 
	// а затем будем переписывать те реквизиты, которые есть у документа основания
	глЗаполнитьШапку(Конт, 0, ВидОперации);  
	
	// Юр. лицо и упр. аналитика
	Если (ПустоеЗначение(ДокОсн.Фирма) = 0) И
	(Конт.Фирма <> ДокОсн.Фирма) Тогда
		Конт.Фирма = ДокОсн.Фирма;
		глПриИзмененииФирмы(Конт);
	КонецЕсли;
	
	// Банковский счет
	Если глЕстьРеквизитШапки("БанковскийСчет",Конт.Вид()) = 1 Тогда
		Если глЕстьРеквизитШапки("БанковскийСчет",ДокОсн.Вид()) = 1 Тогда
			Конт.БанковскийСчет = ДокОсн.БанковскийСчет;
		КонецЕсли;
	КонецЕсли;
	
	// проект
	Если (ПустоеЗначение(ДокОсн.Проект) = 0) И
	(Конт.Проект <> ДокОсн.Проект) Тогда
		Конт.Проект = ДокОсн.Проект;
	КонецЕсли;
	
	Если глЕстьРеквизитШапки("Склад",Конт.Вид()) = 1 Тогда
		// установим склад
		Если глЕстьРеквизитШапки("Склад",ДокОсн.Вид()) =  1 Тогда
			// у документа основания есть реквизит Склад
			Если ПустоеЗначение(ДокОсн.Склад) = 0 Тогда
				Конт.Склад = ДокОсн.Склад;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// контрагент и договор.
	Если (глЕстьРеквизитШапки("Контрагент", ВидДок) = 1) И
	(глЕстьРеквизитШапки("Контрагент", ДокОсн.Вид()) = 1) Тогда
		Конт.Контрагент = ДокОсн.Контрагент;
		Если глЕстьРеквизитШапки("СчетКонтрагента",Конт.Вид()) = 1 Тогда
			Если ПустоеЗначение(Конт.Контрагент.ЮрФизЛицо) = 0 Тогда
				Конт.СчетКонтрагента = Конт.Контрагент.ОсновнойСчет;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
	
	Если (глЕстьРеквизитШапки("Договор", ВидДок) = 1) И
	(глЕстьРеквизитШапки("Договор", ДокОсн.Вид()) = 1) Тогда
		Конт.Договор = ДокОсн.Договор;
	КонецЕсли;
	
	// заполнение тип цен
	Если (глЕстьРеквизитШапки("ТипЦен", ВидДок) = 1) и
	(глЕстьРеквизитШапки("ТипЦен", ДокОсн.Вид()) = 1) Тогда
		Конт.ТипЦен = ДокОсн.ТипЦен;
	КонецЕсли;
	
	// заполнение скидка
	Если (глЕстьРеквизитШапки("Скидка", ВидДок) = 1) и
	(глЕстьРеквизитШапки("Скидка", ДокОсн.Вид()) = 1) Тогда
		Конт.Скидка = ДокОсн.Скидка;
	КонецЕсли;   
	
	// заполнение налогов
	Если (глЕстьРеквизитШапки("ОблагаетсяЕНВД", ВидДок) = 1) и
	(глЕстьРеквизитШапки("ОблагаетсяЕНВД", ДокОсн.Вид()) = 1) Тогда
		Конт.ОблагаетсяЕНВД = ДокОсн.ОблагаетсяЕНВД;
	КонецЕсли;   
	Если (глЕстьРеквизитШапки("УчитыватьНДС", ВидДок) = 1) и
	(глЕстьРеквизитШапки("УчитыватьНДС", ДокОсн.Вид()) = 1) Тогда
		Конт.УчитыватьНДС = ДокОсн.УчитыватьНДС;
	КонецЕсли;   
	Если (глЕстьРеквизитШапки("СуммаВклНДС", ВидДок) = 1) и
	(глЕстьРеквизитШапки("СуммаВклНДС", ДокОсн.Вид()) = 1) Тогда
		Конт.СуммаВклНДС = ДокОсн.СуммаВклНДС;
	КонецЕсли;   
	Если (глЕстьРеквизитШапки("УчитыватьНП", ВидДок) = 1) и
	(глЕстьРеквизитШапки("УчитыватьНП", ДокОсн.Вид()) = 1) Тогда
		Конт.УчитыватьНП = ДокОсн.УчитыватьНП;
	КонецЕсли;   
	Если (глЕстьРеквизитШапки("СуммаВклНП", ВидДок) = 1) и
	(глЕстьРеквизитШапки("СуммаВклНП", ДокОсн.Вид()) = 1) Тогда
		Конт.СуммаВклНП = ДокОсн.СуммаВклНП;
	КонецЕсли;   
	
КонецПроцедуры //глЗаполнитьШапкуНаОсн()

//******************************************************************************
// глВводАдреса(Адрес, ФорматАдреса = 0) 
//
// Параметры: 
//  Адрес (строка), адрес который необходимо отредактировать. 
//  ФорматАдреса (число) 1 - адрес может только вводится в формате МНС,
//                       0 - адрес может вводится в формате МНС и произвольном формат.
//                       иначе - адрес может вводится только в произвольном формат.
//
// Возвращаемое значение:
// 	Нет
//
// Описание:
//  Процедура открывает форму ввода (редактирования адреса).
//
Процедура глВводАдреса(Адрес, ФорматАдреса = 0) Экспорт
	
	Если ТипЗначенияСтр(Адрес) <> "Строка" Тогда
		Адрес = "";
	КонецЕсли;
	
	Если ФорматАдреса = 0 Тогда
		ОткрытьФормуМодально("Обработка.ВводАдреса", Адрес);
		
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Адрес",         Адрес);
		Параметры.Установить("Формат адреса", ФорматАдреса);
		ОткрытьФормуМодально("Обработка.ВводАдреса", Параметры);
		
		Если ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
			Если Адрес <> Параметры.Получить("Адрес") Тогда
				Адрес = Параметры.Получить("Адрес");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // глВводАдреса()

//******************************************************************************
// глАдресСоответствуетТребованиямМНС(Адрес) 
//
// Параметры:
//  Адрес (строка) - Адрес который проверяется на соответствие.
//
// Возвращаемое значение:
//  1 - соответствует требованиям МНС
//  0 - несоответствует требованиям МНС
//
// Описание:
//  Определяет соответствие основных параметров адреса требованиям МНС.
//
Функция глАдресСоответствуетТребованиямМНС(Адрес) Экспорт
	
	АдресСписком = глРазложить(Адрес);
	
	Если      СтрКоличествоСтрок(Адрес) <> 1 Тогда     // недолжно быть переводов строк
		Возврат 0;
	ИначеЕсли СтрЧислоВхождений(Адрес, ",") <> 9 Тогда // должно быть 9 запятых
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(1))  > 3  Тогда   // код страны не > 3 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(2))  > 6  Тогда   // индекс не > 6 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(3))  > 30 Тогда   // наим.региона не > 30 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(4))  > 35 Тогда   // наим.района не > 35 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(5))  > 35 Тогда   // наим.города не > 35 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(6))  > 45 Тогда   // наим.нас.пункта не > 45 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(7))  > 45 Тогда   // наим.улицы не > 45 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(8))  > 10  Тогда   // номер дома не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(9))  > 10  Тогда   // номер корпуса не > 10 символов
		Возврат 0;
	ИначеЕсли СтрДлина(АдресСписком.ПолучитьЗначение(10)) > 10  Тогда   // номер квартиры не > 10 символов
		Возврат 0;
		
	Иначе
		Возврат 1;
		
	КонецЕсли;
	
КонецФункции // глАдресСоответствуетТребованиямМНС()

//******************************************************************************
// глПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт
//
// Параметры: 
//  Адрес (строка), адрес представление которого нужно вернуть. 
//  Способ - способ представления адреса (если=1, то возвращает представление адреса без индекса)
//
// Возвращаемое значение:
//  Строку - представление адреса
//
// Описание:
//  Предназначена для формирования адресной строки в "удобочитаемом" виде
//  для отражения в формах.
//
Функция глПредставлениеАдреса(Знач Адрес, Способ = 0) Экспорт
	
	Если (глАдресСоответствуетТребованиямМНС(Адрес) = 1) Тогда
		
		АдресСписком = глРазложить(Адрес);
		Адрес = "";
		
		Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(1)) = 0 Тогда 
			
			Адрес = АдресСписком.ПолучитьЗначение(1);
			
			Если Метаданные.Справочник("ОКСМ").Выбран() = 1 Тогда 
				Объект = СоздатьОбъект("Справочник.ОКСМ");
				Если Объект.НайтиПоКоду(АдресСписком.ПолучитьЗначение(1)) = 1 Тогда
					Адрес = Объект.ТекущийЭлемент().Наименование;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Для Индекс = 2 + Способ По 10 Цикл
			Если ПустаяСтрока(АдресСписком.ПолучитьЗначение(Индекс)) = 0 Тогда 
				Адрес = Адрес + ?(ПустаяСтрока(Адрес) = 1, "", ", ") + 
				?(Индекс = 8, "д. ", ?(Индекс = 9, "кор. ", ?(Индекс = 10, "кв. ", ""))) + 
				АдресСписком.ПолучитьЗначение(Индекс);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Адрес = СтрЗаменить(Адрес, РазделительСтрок, ", ");
		
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции // глПредставлениеАдреса()

//******************************************************************************
//	глФамилияИмяОтчество(Объект,Фамилия,Имя,Отчество)
//
// Параметры:
//  Объект	 - элемент справочника Сотрудники или ФизЛицо
//			   или строка
//  Фамилия	 - в этот параметр будет записана фамилия сотрудника
//  Имя		 - в этот параметр будет записано имя сотрудника
//  Отчество - в этот параметр будет записано отчество сотрудника
//
// Возвращаемое значение:
//  Фамилия и инициалы сотрудника
//
// Описание:
//  Разбирает "наименование" сотрудника по Фамилия, Имя, Отчество
//  и возвращает фамилию и инициалы сотрудника
//
Функция глФамилияИмяОтчество(Объект, Фамилия="", Имя="", Отчество="") Экспорт
	
	ТипОбъекта = ТипЗначения(Объект);
	
	Если ТипЗначенияСтр(Объект) = "Строка" Тогда
		Список = глРазложить(Объект, " ");
		
	ИначеЕсли (ТипЗначенияСтр(Объект) = "Справочник") ИЛИ 
	(ТипЗначенияСтр(Объект) = "ГрупповойКонтекст") Тогда
		
		Если      Объект.Вид()="ФизЛица" Тогда
			Список = глРазложить(Объект.ПолнНаименование," ");
		ИначеЕсли Объект.Вид()="Сотрудники" Тогда
			Список = глРазложить(Объект.ФизЛицо.ПолнНаименование," ");
		КонецЕсли;
	КонецЕсли;
	
	Фамилия  = ?(0 < Список.РазмерСписка(), Список.ПолучитьЗначение(1), "");
	Имя		 = ?(1 < Список.РазмерСписка(), Список.ПолучитьЗначение(2), "");
	Отчество = ?(2 < Список.РазмерСписка(), Список.ПолучитьЗначение(3), "");
	
	Возврат Фамилия+?(ПустоеЗначение(Имя) = 0," "+Лев(Имя,1)+"."+?(ПустоеЗначение(Отчество) = 0, Лев(Отчество,1)+".", ""), "");
	
КонецФункции // глФамилияИмяОтчество()

//******************************************************************************
// глПредставлениеУдостоверения(Стр)
//
// Параметры:
//  Стр - строка - реквизиты удостоверения личности.
//
// Возвращаемое значение:
//  Строка - представление удостоверения личности.
//
// Описание:
//  Формирует представление удостоверения личности, для диалогов и печатных форм.
//
Функция глПредставлениеУдостоверения(Знач Стр) Экспорт
	
	Список = глРазложитьДокУдостоверяющийЛичность(Стр);
	
	Попытка
		Стр = Список.ПолучитьЗначение(1);
		глДобавитьРеквизит(Стр, " серия ", Список.ПолучитьЗначение(2));
		глДобавитьРеквизит(Стр, " № ",     Список.ПолучитьЗначение(3));
		глДобавитьРеквизит(Стр, " выдан ", Список.ПолучитьЗначение(4));
		глДобавитьРеквизит(Стр, " ",       Список.ПолучитьЗначение(5));
	Исключение
	КонецПопытки;
	
	Возврат СокрЛ(Стр);
	
КонецФункции // глПредставлениеУдостоверения()

//******************************************************************************
// глПодбор(Конт,Параметры)
//
// Параметры:
//  Конт      - контекст документа, в который осуществляется подбор
//  Параметры - список со значенями, которые передаются в форму подбора       
//              (необязательный параметр)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Универсальная процедура, которая инициирует механизм подбора
//  товара в документы.
//  (открывает форму списка справочник в режиме "ДляПодбора" )
//
Процедура глПодбор(Конт,Параметры="")  Экспорт
	
	Если ТипЗначенияСтр(Параметры) <> "СписокЗначений" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	// открываем форму подбора
	Конт.ОткрытьПодбор("Номенклатура", "ДляПодбора", Параметры);
	
КонецПроцедуры // глПодбор()   
//******************************************************************************
// глПодбор(Конт,Параметры)
//
// Параметры:
//  Конт      - контекст документа, в который осуществляется подбор
//  Параметры - список со значенями, которые передаются в форму подбора       
//              (необязательный параметр)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Универсальная процедура, которая инициирует механизм подбора
//  товара в документы.
//  (открывает форму списка справочник в режиме "ДляПодбора" )
//
Процедура глПодборРозница(Конт,Параметры="")  Экспорт
	
	Если ТипЗначенияСтр(Параметры) <> "СписокЗначений" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	// открываем форму подбора
	Конт.ОткрытьПодбор("Номенклатура", "ДляПодбораРозн", Параметры);
	
КонецПроцедуры // глПодбор()   
//******************************************************************************
// глОбработкаПодбора(Конт, ВыбЗнач, ЕстьНДС, ЕстьНП, ЕстьСкидка) 
//
// Параметры:
//  Конт       - контекст документа, в котором произошло событие "Обработка подбора"
//	ВыбЗнач    - выбранное значение (список параметров)
//  ЕстьНДС    - нужно заполнять при подборе ставку и сумму НДС,
//  ЕстьНП     - нужно заполнять при подборе ставку и сумму НП,
//  ЕстьСкидка - нужно заполнять при подборе сумму скидки,
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение табличной части документа переданными из формы подбора 
//	данными.
//
Процедура глОбработкаПодбора(Конт, ВыбЗнач, ЕстьНДС, ЕстьНП, ЕстьСкидка)  Экспорт
	
	Перем ТаблЧасть, ТаблицаПодбора;
	
	ТипЗнач		= ТипЗначенияСтр(ВыбЗнач);
	Если ТипЗнач = "СписокЗначений" Тогда
		
		ЕстьВидТМЦ   = ВыбЗнач.Получить("ЕстьВидТМЦ"); // нужно заполнять при подборе вид ТМЦ
		
		ЦенаВподборе = ВыбЗнач.Получить("ЦенаВподборе");
		Если (ЦенаВПодборе = "ИзСправочника") или (ЦенаВподборе = "Розница") Тогда
			ЕстьЦена = 1; // нужно заполнять при подборе цену ТМЦ
		Иначе
			
			// (ЦенаВподборе = "Нет") или (ПустоеЗначение(ЦенаВподборе) = 1)
			ЕстьЦена = 0;
		КонецЕсли;
		ТипЦен = ВыбЗнач.Получить("ТипЦен");
		
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
	Иначе
		
		// если не список ничего не делаем
		Возврат;
	КонецЕсли;	
	
	// Инициализация переменных
	ФлагиИзТипаЦен = 1;
	ЦенаВклНП      = 1;
	ЦенаВклНДС     = 1;
	УчитыватьНП    = ЕстьНП;
	УчитыватьНДС   = ЕстьНДС;
	
	Если ЕстьЦена = 1 Тогда
		
		// Флаги включения налогов в сумму определяеются типом цен, 
		// кроме случая перемещения из розницы (цены в этом случае берутся из регистра с налогами)
		Если ЦенаВподборе = "Розница" Тогда 
			ФлагиИзТипаЦен = 0;
		КонецЕсли;
		
		ФлагиИзТипаЦен = ФлагиИзТипаЦен * ?(ПустоеЗначение(ТипЦен) = 1, 0, 1);
		
		Если ФлагиИзТипаЦен  = 1 Тогда 
			
			// Подбирали по ценам с налогами, заданными в типе цен
			ЦенаВклНП  = ТипЦен.ЦенаВклНП;
			ЦенаВклНДС = ТипЦен.ЦенаВклНДС; 
		Иначе // считаем, что подбирали в соответствии с флагами в документе
			
			// По умолчанию считаем, что если нет в документе флагов учета налогов, 
			// то цена со всеми налогами (как в рознице)
			Если глЕстьРеквизитШапки("СуммаВклНП", Конт.Вид()) = 1 Тогда
				ЦенаВклНП   = Конт.СуммаВклНП;
			КонецЕсли;	
			
			Если глЕстьРеквизитШапки("СуммаВклНДС", Конт.Вид()) = 1 Тогда
				ЦенаВклНДС  = Конт.СуммаВклНДС;
			КонецЕсли;	
		КонецЕсли;	
		
		// Выкручивать или накручивать налоги надо только если они в документе учитываются
		Если глЕстьРеквизитШапки("УчитыватьНП", Конт.Вид()) = 1 Тогда
			УчитыватьНП = ЕстьНП * Конт.УчитыватьНП;
		КонецЕсли;	
		
		Если глЕстьРеквизитШапки("УчитыватьНДС", Конт.Вид()) = 1 Тогда
			УчитыватьНДС = ЕстьНДС * Конт.УчитыватьНДС;
		КонецЕсли;	
		
	КонецЕсли;
	
	ТипЗнач		= ТипЗначенияСтр(ТаблицаПодбора);
	Если ТипЗнач = "ТаблицаЗначений" Тогда
		
		РеквизитыТаблЧастиСтрока = "Единица, НомерСтроки";
		Если (ЦенаВподборе = "Розница") И (глЕстьРеквизитМнЧ("Цена", Конт.Вид()) = 1) Тогда
			РеквизитыТаблЧастиСтрока = РеквизитыТаблЧастиСтрока + ", Цена";
		КонецЕсли;
		
		Конт.ВыгрузитьТабличнуюЧасть(ТаблЧасть, РеквизитыТаблЧастиСтрока);
		
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() <> 0 Цикл
			Номенклатура	= ТаблицаПодбора.Номенклатура;
			Единица			= ТаблицаПодбора.Единица;
			
			Если Номенклатура <> Единица.Владелец Тогда
				Сообщить("В подборе выбрана единица другого элемента справочника Номенклатура.
				|Проверьте правильность указания базовой и основной единицы для элемента
				|""" + СокрЛП(Номенклатура) + """, а также правильность указания единиц измерения 
				|в справочниках единиц и цен для данной позиции номенклатуры." );
				//Валерий МЭТР: тест
				//Сообщить(Номенклатура.Код+"="+Единица.Владелец.Код);				
				Продолжить;
			КонецЕсли;
			
			// ищем номенклатуру среди подобранных
			Поз	= 0; 
			Если (ЦенаВподборе = "Розница") И (глЕстьРеквизитМнЧ("Цена", Конт.Вид()) = 1) Тогда
				// Для розницы ищем номенклатуру вместе с ценой
				ТаблЧасть.ВыбратьСтроки();
				Пока ТаблЧасть.ПолучитьСтроку() = 1 Цикл
					Если (ТаблЧасть.Цена = ТаблицаПодбора.Цена) И (ТаблЧасть.Единица = Единица) Тогда
						Поз = ТаблЧасть.НомерСтроки;
						Прервать;  // Нашли
					КонецЕсли;
				КонецЦикла;
			Иначе
				ТаблЧасть.НайтиЗначение(Единица, Поз, "Единица");
			КонецЕсли;
			
			Если (Поз > 0) и (глПользователь <> Константа.ПользовательПодборНовойПозиции)Тогда
				
				// нашли, увеличиваем количество
				Конт.ПолучитьСтрокуПоНомеру(Поз);
				Конт.Количество = Конт.Количество + ТаблицаПодбора.Количество;
				
				// Вызывать пересчет имеет смысл только если есть цена
				Если ЕстьЦена = 1 Тогда
					глПересчетТаблЧасти(Конт,"Количество");			
				КонецЕсли;
			Иначе
				
				// не нашли, добавляем новую строку
				Конт.НоваяСтрока();
				Если ЕстьВидТМЦ = 1 Тогда
					Конт.ВидТМЦ = ТаблицаПодбора.ВидТМЦ;
				КонецЕсли;
				
				Конт.Номенклатура = Номенклатура;
				
				Если Конт.Вид() = "ОприходованиеТМЦ" Тогда
					глПересчетТаблЧасти(Конт,"Номенклатура");   
				КонецЕсли;	
				
				//Для ИмпортЗаявкиИзРозницы2	************************************************************* (начало)
				Если глЕстьРеквизитМнЧ("Количество2",  Конт.Вид()) = 1 Тогда
					Конт.Количество  	= ТаблицаПодбора.Количество;
					Конт.Количество2   	= ТаблицаПодбора.Количество;
				иначеесли глЕстьРеквизитМнЧ("КолСклад",  Конт.Вид()) = 1 Тогда
					Конт.КолСклад		= ТаблицаПодбора.Количество;
					Конт.Производитель	= Номенклатура.Производитель;
					Конт.КодЭлемента	= Номенклатура.Код;
				иначеесли глЕстьРеквизитМнЧ("Количество", Конт.Вид()) =1 Тогда
					Конт.Количество   	= ТаблицаПодбора.Количество;
				КонецЕсли;
				//Для ИмпортЗаявкиИзРозницы2	************************************************************* (конец)
				
				Конт.Единица      = Единица;
				Конт.Коэффициент  = Единица.Коэффициент;    
				
				Если ЕстьНДС = 1 Тогда
					Конт.СтавкаНДС = Номенклатура.СтавкаНДС;
				КонецЕсли;	
				
				Если ЕстьНП= 1 Тогда
					Конт.СтавкаНП  = Номенклатура.СтавкаНП;
				КонецЕсли;	
				
				Если глЕстьРеквизитМнЧ("РозничнаяНаценка",  Конт.Вид()) = 1 Тогда
					Если Конт.РозничнаяНаценка = 0 Тогда
						// получим наценку из розничной цены
						РознНаценка	= 0;
						глВернутьЦену(Номенклатура, Константа.РозничныйТипЦен, Конт.ДатаДок, , , , РознНаценка, );
						Если РознНаценка = 0 Тогда
							Конт.РозничнаяНаценка	= Константа.РозничныйТипЦен.Процент;
						Иначе
							Конт.РозничнаяНаценка	= РознНаценка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;                                                                     
				
				Попытка
					Если ЕстьЦена = 1 Тогда
						глПересчитатьЦенуВДокументе(Конт, УчитыватьНП, УчитыватьНДС, ТаблицаПодбора.Цена, Конт.Валюта, 
						ЦенаВклНП, ЦенаВклНДС);
						глПересчетТаблЧасти(Конт,"Цена");			
					КонецЕсли; 
				Исключение
					//Сообщить("Не удалось пересчитать цену...");
				КонецПопытки; 
			КонецЕсли;
			
			Если (глЕстьРеквизитМнЧ("КоличествоФакт", Конт.Вид()) = 1) Тогда 
				Конт.КоличествоФакт = Конт.Количество;	
			КонецЕсли;
			
			Если (глЕстьРеквизитМнЧ("АртикулИМ", Конт.Вид()) = 1) Тогда 
				Конт.АртикулИМ = Конт.Номенклатура.АртикулИМ;	
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	Конт.Форма.Обновить(0);
	//Конт.Активизировать("Количество");
	//Конт.АктивизироватьСтроку();
	
КонецПроцедуры // глОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПЕРИОДИЧЕСКИМИ РЕКВИЗИТАМИ
//
//******************************************************************************
// глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0, 
//                                   ВидимыеРеквизиты=0, СвязьРеквизитов=0)
//
// Параметры:
//  КонтекстФормы    - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                     справочника, в котором редактируются периодические реквизиты.
//  НачальнаяДата    - "дата" - дата, с которой следует показвать значения реквизитов.
//                     если не передана, то '00.00.0000'.
//  КонечнаяДата     - "дата" - дата, по которую следует показвать значения реквизитов.
//                     если не передана, то '31.12.9999'.
//  ВидимыеРеквизиты - "строка" - идентификаторы периодических реквизитов,
//                     значения которых надо показать, разделенные запятыми;
//                     если не передана - показываются все реквизиты.
//  СвязьРеквизитов  - 0 - реквизиты нельзя редактировать независимо,
//                     1 - реквизиты можно редактировать независимо;
//                     если не передано - 0.
//
// Возвращаемое значение:
//  0                   - если обработка ЗначенияПериодическихРеквизитов не открыта.
//  "ГрупповойКонтекст" - контекст формы обработки ЗначенияПериодическихРеквизитов.
//
// Описание:
//  Функция предназначена для вызова из форм элементов и списков справочников, 
//  имеющих периодические реквизиты, по нажатию кнопки "История".
//  Вызывает обработку "ЗначенияПериодическихРеквизитов", в которой пользователь 
//  может просмотреть историю значений периодических реквизитов, удалить значения.
//  Из обработки можно так же открыть форму элемента на нужную дату просмотра и 
//  редактирования значений периодических реквизитов.
//
Функция глЗначенияПериодическихРеквизитов(КонтекстФормы, НачальнаяДата=0, КонечнаяДата=0, 
	ВидимыеРеквизиты=0, СвязьРеквизитов=0) Экспорт
	
	// Если элемент не записан, то вместо выбора даты вызывается запись.
	Если ПустоеЗначение(КонтекстФормы.ТекущийЭлемент()) = 1 Тогда
		КонтекстФормы.СтрокаДействийФормы = "# Записать?";
		Возврат 0;
	КонецЕсли;
	
	// Список параметров обработки ЗначенияПериодическихРеквизитов.
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.Установить("ТекущийОбъект",    КонтекстФормы.ТекущийЭлемент());
	Параметр.Установить("Текущая_Дата",     КонтекстФормы.ИспользоватьДату());
	Параметр.Установить("НачальнаяДата",    НачальнаяДата);
	Параметр.Установить("КонечнаяДата",     КонечнаяДата);
	Параметр.Установить("ВидимыеРеквизиты", ВидимыеРеквизиты);
	Параметр.Установить("СвязьРеквизитов",  СвязьРеквизитов);
	
	ОткрытьФорму("Обработка.ЗначенияПериодическихРеквизитов", Параметр);
	
	Если ТипЗначенияСтр(Параметр) <> "ГрупповойКонтекст" Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции // глЗначенияПериодическихРеквизитов()


//******************************************************************************
// глЗаписьПериодическихРеквизитов(КонтекстФормы, СписокРеквизитов=0, НоваяДата=0, 
//                                 ПерваяДата=0, СвязьРеквизитов=0, НеизменяемыеРеквизиты="") 
//
// Параметры:
//  КонтекстФормы    - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                     справочника, в котором редактируются периодические реквизиты.
//  СписокРеквизитов - "СписокЗначений" - список значений периодических реквизитов, 
//                     установленных в диалоге формы справочника:
//                     в представлении - идентификатор периодического реквизита
//                     в значении - значение периодического реквизита.
//  НоваяДата        - "дата" - дата, на которую следует записывать не впервые
//                     устанавливаемые значения периодических реквизитов.
//                     если не передана, то КонтекстФормы.ИспользоватьДату().
//  ПерваяДата       - "дата" - дата, на которую следует записывать впервые 
//                     устанавливаемые значения периодических реквизитов.
//                     если не передана, то КонтекстФормы.ИспользоватьДату().
//  СвязьРеквизитов  - 0 - реквизиты нельзя редактировать независимо,
//                     1 - реквизиты можно редактировать независимо;
//                     если не передано - 0.
//
//  НеизменяемыеРеквизиты - "строка" - строка, в которой через запятую перечислены 
//                     периодические реквизиты. редактирование которых вручную запрщено.
//                     Параметр не имеет значения, если не пуйстой список значений передан
//                     в параметре "СписокРеквизитов".
//
// Возвращаемое значение:
//  0 - периодические реквизиты не сохранены.
//  1 - периодические реквизиты сохранены.
//
// Описание:
//  Функция предназначена для вызова из форм элементов справочников, имеющих 
//  периодические реквизиты, из процедур ПриЗаписи().
//  Вызывает обработку "ЗаписьПериодическихРеквизитов", в которой пользователь 
//  может просмотреть список записываемых реквизитов, их значения, отменить запись 
//  некоторых (или всех) значений, изменить дату записи периодических реквизитов.
//
Функция глЗаписьПериодическихРеквизитов(КонтекстФормы, СписокРеквизитов=0, НоваяДата=0, 
	ПерваяДата=0, СвязьРеквизитов=0, НеизменяемыеРеквизиты="") Экспорт
	
	Если ТипЗначенияСтр(СписокРеквизитов) <> "СписокЗначений" Тогда
		СписокРеквизитов = СоздатьОбъект("СписокЗначений");
		
		МДСправочник = Метаданные.Справочник(КонтекстФормы.Вид());
		
		Сч = 1;
		
		Пока МДСправочник.Реквизит(Сч).Выбран() = 1 Цикл
			
			Если МДСправочник.Реквизит(Сч).Периодический = 1 Тогда 
				Идентификатор = МДСправочник.Реквизит(Сч).Идентификатор;
				Если Найти("," + НеизменяемыеРеквизиты + ",", "," + Идентификатор + ",") = 0  Тогда
					СписокРеквизитов.ДобавитьЗначение(КонтекстФормы.ПолучитьАтрибут(Идентификатор), Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла; 
	КонецЕсли;	
	
	// Список параметров обработки ЗаписьПериодическихРеквизитов.
	Параметр = СоздатьОбъект("СписокЗначений");
	Параметр.Установить("КонтекстФормы",    КонтекстФормы);
	Параметр.Установить("СписокРеквизитов", СписокРеквизитов);
	Параметр.Установить("НоваяДата",        НоваяДата);
	Параметр.Установить("ПерваяДата",       ПерваяДата);
	Параметр.Установить("СвязьРеквизитов",  СвязьРеквизитов);
	
	ОткрытьФормуМодально("Обработка.ЗаписьПериодическихРеквизитов", Параметр);
	
	Возврат Параметр;
	
КонецФункции // глЗаписьПериодическихРеквизитов()

//******************************************************************************
// глПолучитьДатуПериодическихРеквизитов(КонтекстФормы) 
//
// Параметры:
//  КонтекстФормы - "ГрупповойКонтекст" - контекст формы элемента справочника, 
//                  в котором редактируются периодические реквизиты.
//
// Возвращаемое значение:
//  0 - дата не назначена форме.
//  1 - дата назначена форме.
//
// Описание:
//  Функция предназначена для вызова из форм элементов справочников, имеющих 
//  периодические реквизиты, из процедур ПриОткрытии() и ПриПовторномОткрытии().
//  Если параметре при открытии формы элемента указана дата, на которую следует
//  просматривать и редактировать значения периодических реквизитов, эта дата 
//  назначается форме.
//
Функция глПолучитьДатуПериодическихРеквизитов(КонтекстФормы) Экспорт
	
	Если ТипЗначенияСтр(КонтекстФормы.Форма.Параметр) = "СписокЗначений" Тогда
		Текущая_Дата = Дата(КонтекстФормы.Форма.Параметр.Получить("ИспользоватьДату()"));
		
		Если Текущая_Дата <> '00.00.0000' Тогда
			КонтекстФормы.ИспользоватьДату(Текущая_Дата, 1); 
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // глПолучитьДатуПериодическихРеквизитов()

//******************************************************************************
// глВвестиДатуПериодическихРеквизитов(КонтекстФормы, ФормаЭлемента)
//
// Параметры:
//  КонтекстФормы - "ГрупповойКонтекст" - контекст формы элемента или списка 
//                  справочника.
//  ФормаЭлемента - 1 - функция вызвана из формы элемента,
//                  0 - функция вызвана из форы списка справочника.
//
// Возвращаемое значение:
//  0 - дата не назначена форме,
//  1 - дата назначена форме
//
// Описание:
//  Функция предназначена для вызова из форм элементов и списков справочников, 
//  имеющих периодические реквизиты, по нажатию кнопки выбора даты просмотра и
//  редактирования значений периодических реквизитов.
//
Функция глВвестиДатуПериодическихРеквизитов(КонтекстФормы, ФормаЭлемента) Экспорт
	
	Текущая_Дата = КонтекстФормы.ИспользоватьДату();
	
	Если ВвестиДату(Текущая_Дата, "Введите дату:", 60) = 1 Тогда
		Если ФормаЭлемента = 0 Тогда
			КонтекстФормы.ИспользоватьДату(Текущая_Дата);
		Иначе
			КонтекстФормы.ИспользоватьДату(Текущая_Дата, 1);
		КонецЕсли;
		
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // глВвестиДатуПериодическихРеквизитов()

//******************************************************************************
// глДатаПериодРеквизитов(Текущая_Дата)
//
// Параметры:
//  Текущая_Дата - дата, на которую отображаются и редактируются периодические 
//                 реквизиты в форме элемента или списка справочника.
//
// Возвращаемое значение:
//  "Строка" - информация о дате значения периодических реквизитов.
//
// Вызывается из формул элементов диалога:
//  Текст, информирующий о дате значения перидических реквизитов.
//
// Описание:
//  Формирует стандартный текст о дате значения периодических реквизитов,
//  показываемый в формах всех справочников, имеющих периодические реквизиты.
//
Функция глДатаПериодРеквизитов(Текущая_Дата) Экспорт
	
	Возврат "Значения периодических реквизитов указаны на "+
	Формат(Текущая_Дата, "ДДДММГГГГ");
	
КонецФункции // глДатаПериодРеквизитов()

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ОТЧЕТОВ
//
//******************************************************************************
// глОбработкаРасшифровки(Расшифровка, СтандартнаяОбработка, Таблица)
//
// Параметры:
//  Расшифровка          - список значений - расшифровка отчета
//  СтандартнаяОбработка - флаг стандартной обработки
//  Таблица              - таблица, из которой была вызвана расшифровка
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Производит обработку расшифровки отчетов
//
Процедура глОбработкаРасшифровки(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт
	
	Перем Отчет;
	
	Док 	= Расшифровка.Получить("Документ");
	Меню 	= Расшифровка.Получить("Меню");
	Если ТипЗначенияСтр(Меню) = "СписокЗначений" Тогда
		Если Меню.ВыбратьЗначение(Отчет, "",,, 1) = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Отчет = Расшифровка.Получить("Отчет");
	КонецЕсли;
	
	глРасшифровка = Расшифровка;
	глФлагРасшифровки = 1;
	глОбновить = Число(Расшифровка.Получить("Обновить"));
	Если глОбновить <> 0 Тогда
		глТаблица = Таблица;
	КонецЕсли;                                                  
	
	Попытка            
		Если ТипЗначенияСтр(Док) = "Документ" Тогда
			ОткрытьФорму(Док);
		ИначеЕсли ТипЗначенияСтр(Отчет) = "Документ" Тогда
			ОткрытьФорму(Отчет);
		ИначеЕсли Метаданные.Отчет(Отчет).Выбран() = 1 Тогда
			ОткрытьФорму("Отчет."+Отчет+"#");
		ИначеЕсли Метаданные.Обработка(Отчет).Выбран() = 1 Тогда
			ОткрытьФорму("Обработка."+Отчет+"#");
		ИначеЕсли ФС.СуществуетФайл(Отчет) = 1 Тогда
			ОткрытьФорму("Отчет#",, Отчет);
		КонецЕсли;
	Исключение   
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	глФлагРасшифровки = 0;
	глРасшифровка = 0;
	глОбновить = 0;
	
КонецПроцедуры	// глОбработкаРасшифровки()

//******************************************************************************
// глПроверкаДаты(ДатаНачала,ДатаКонца)
//
// Параметры: 
//  ДатаНачала - дата начала отчета (заданная в диалоге)
//  ДатаКонца  - дата конца  отчета (заданная в диалоге)
//
// Возвращаемое значение: 
//  0 - даты неверные, 
//  1 - даты верные
//
// Описание:
//  Проверка того, чтобы даты были введены, дата конца отчета не превышала 
//  точки актуальности, а дата начала не превышала дату конца

Функция глПроверкаДаты(ДатаНачала,ДатаКонца) Экспорт
	
	Если ПустоеЗначение(ДатаНачала)=1 Тогда
		Предупреждение("Необходимо задать дату начала!", 60);
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаКонца)=1 Тогда
		Предупреждение("Необходимо задать дату конца!", 60);
		Возврат 0;
	КонецЕсли;     
	
	Если ДатаКонца>ПолучитьДатуТА() Тогда
		Если Вопрос("Нельзя устанавливать дату больше Точки Актуальности!
		| Сформировать по Точку Актуальности ("+ПолучитьДатуТА()+")?","Да+Нет", 60) <> "Да" Тогда
			Возврат 0;
		Иначе
			ДатаКонца=ПолучитьДатуТА();
			ДатаНачала = Мин(ДатаНачала,ДатаКонца);
		КонецЕсли;
	КонецЕсли;                                 
	
	Если ДатаНачала>ДатаКонца Тогда
		Если Вопрос("Нельзя устанавливать дату начала больше даты конца!
		| Установить дату начала равной дате конца ("+ДатаКонца+")?","Да+Нет", 60) <> "Да" Тогда
			Возврат 0;
		Иначе
			ДатаНачала = ДатаКонца;
		КонецЕсли;
	КонецЕсли;	  
	
	Возврат 1;
	
КонецФункции   // глПроверкаДаты()     

//******************************************************************************
// глВосстановлениеПоследовательности(ВыбПоследовательность)
//
// Параметры: 
//  ВыбПоследовательность - значение типа "Последовательность".
//
// Возвращаемое значение: 
//  1 - удачно прошло восстановление, 
//  0 - ошибка
//
// Описание: 
//  Восстанавливает переданную последовательность
//
Функция глВосстановлениеПоследовательности(ВыбПоследовательность) Экспорт
	Перем СтараяПозицияТА;         
	
	СтараяПозицияТА = ПолучитьПозициюТА();
	БылиОшибкиПроведения = 0;
	
	Документ=СоздатьОбъект("Документ");
	Документ.ВыбратьДокументы(ВыбПоследовательность.ПолучитьПозицию(),);
	
	Пока (Документ.ПолучитьДокумент()>0) 
	и    (БылиОшибкиПроведения = 0)
	Цикл
		
		Если Документ.Проведен()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДок = Документ.ТекущийДокумент();
		
		Если МонопольныйРежим()>0 Тогда
			// если оперативный документ находится за ТА, то ТА надо передвинуть в любом случае
			Если (ТекДок.СравнитьТА()>0)
			или  (ВыбПоследовательность.ПринадлежитПоследовательности(ТекДок)>0) Тогда 
				БылаПозиция = ПолучитьПозициюТА();
				УстановитьТАНа(ТекДок);
				Если БылаПозиция = ПолучитьПозициюТА() Тогда
					// не удалось поменять (например, были открытые документы)
					БылиОшибкиПроведения = 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;   
		
		Если ВыбПоследовательность.ПринадлежитПоследовательности(ТекДок)>0 Тогда
			Объект=СоздатьОбъект("Документ");
			Объект.НайтиДокумент(ТекДок);
			
			Состояние("Восстановление последовательности: "+ТекДок.ДатаДок);
			
			Попытка                           
				Если Объект.Провести() = 0 Тогда
					БылиОшибкиПроведения = 1;
				КонецЕсли;	
			Исключение
				глСообщениеПроведения("Не удалось провести документ "+Строка(Объект)+"
				|Ошибка: "+ОписаниеОшибки(), Объект.ТекущийДокумент(),,,1);
				БылиОшибкиПроведения = 1;
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;    
	
	Если (МонопольныйРежим()>0)
	и    (СтараяПозицияТА <> ПолучитьПозициюТА())
	Тогда
		УстановитьТАПо(СтараяПозицияТА);
	КонецЕсли;
	
	Возврат ?(БылиОшибкиПроведения = 0,1,0);
	
КонецФункции	// глВосстановлениеПоследовательности()

//******************************************************************************
// глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,ВыбПоследовательность) 
//
// Параметры: 
//  ДатаНачала            - значения типа "Дата", дата начала интервала отчета 
//  ДатаКонца             - значения типа "Дата", дата конца интервала отчета
//  ВыбПоследовательность - значение типа "Последовательность" (которую проверяем)
//
// Возвращаемое значение: 
//  0 - отчет неактуален, 
//  1 - отчет актуален
//
// Описание: 
//  Если формируется отчет, который использует регистры, критичные к
//  последовательности проведения документов,
//  сравним установленные даты периода формируемого отчета с ГП
//
Функция глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,ВыбПоследовательность) Экспорт
	
	СтрСооб="отчет может быть неактуален. Возможно, следует восстановить последовательность. Для этого можно воспользоваться проведением документов (пункт меню ""Операции"") либо групповой обработкой документов. Восстановить последовательность сейчас (это может занять продолжительное время)?";
	
	ПозицияОтчета=?(ДатаКонца<ПолучитьДатуТА(),ДатаКонца,ПолучитьПозициюТА());
	
	Если ВыбПоследовательность.Проверить(ПозицияОтчета)=0 Тогда
		Результат = Вопрос("Дата конца отчета установлена после"+РазделительСтрок+"Границы последовательности документов ("
		+ВыбПоследовательность.Получить()+"), "+РазделительСтрок+СтрСооб,"Да+Нет+Отмена", 60);
		Если Результат="Отмена" Тогда
			Возврат 0;
		ИначеЕсли Результат="Таймаут" Тогда
			Возврат 0;
		ИначеЕсли Результат="Да" Тогда	
			Если глВосстановлениеПоследовательности(ВыбПоследовательность)=0 Тогда
				Если Вопрос("Не удалось восстановить последовательность. Продолжить выполнение отчета?","Да+Нет", 60) <> "Да" Тогда
					Возврат 0;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат 1;
КонецФункции // глПроверкаАктуальностиОтчета()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБСЛУЖИВАЮЩИЕ КОНСТАНТУ "ДатаЗапретаРедактирования"
//
//****************************************************************************** 
// глПроверкаРазрешенияРедактирования(Конт) 
//
// Параметры:
// 	Конт - текущий контекст формы
//
// Возвращаемое значение: 
//  1 - если редактирование разрешено, 
//  0 - если запрещено
//
// Описание:
//	Функция предназначена для обеспечения функциональности работы
//  с константой ДатаЗапретаРедактирования.
//  Данная функция вызывается в предопределенных процедурах ПриОткрытии() из
//  модулей форм всех документов. Функция выполняет проверку разрешения 
//  редактирования документа сравнивая дату документа и константу ДатаЗапретаРедактирования.
//  При необходимости форме документа устанавливается флажок ТолькоПросмотр(1)    
//  Кроме того, производится проверка прав пользователя, заданных в справочнике
// "Полномочия пользователей".
//
Функция глПроверкаРазрешенияРедактирования(Конт) Экспорт
	
	Конт.ПриЗаписиПерепроводить(1);
	Если Конт.Выбран() > 0  Тогда		 
		//++Валерий МЭТР: ДатаЗапретаРедактирования
		//Если (Конт.ДатаДок<=Константа.ДатаЗапретаРедактирования)
		Если (ПустоеЗначение(глПользователь) = 0) Тогда
			Если ПустоеЗначение(глПользователь.ДатаЗапретаРедактирования) = 0 Тогда
				Если (Конт.ДатаДок <= глПользователь.ДатаЗапретаРедактирования)
					И (Конт.Форма.ТолькоПросмотр() = 0) Тогда
						Если (Конт.Вид() = "ЗаявкаПокупателя") И (глПользователь.РедактироватьЗаявкуДоДатыЗапрета = 1) Тогда
							Возврат 1;
						КонецЕсли;
					Конт.Форма.ТолькоПросмотр(1);
					Предупреждение("Разрешен только просмотр документа!",4);
					Возврат 0;
				КонецЕсли;
			ИначеЕсли (Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования)
				И (Конт.Форма.ТолькоПросмотр() = 0) Тогда
					Если (Конт.Вид() = "ЗаявкаПокупателя") И (глПользователь.РедактироватьЗаявкуДоДатыЗапрета = 1) Тогда
						Возврат 1;
					КонецЕсли;
					
				Конт.Форма.ТолькоПросмотр(1);
				Предупреждение("Разрешен только просмотр документа!",4);
				Возврат 0;
			КонецЕсли;
		ИначеЕсли (Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования)
			И (Конт.Форма.ТолькоПросмотр() = 0) Тогда
			Конт.Форма.ТолькоПросмотр(1);
			Предупреждение("Разрешен только просмотр документа!",4);
			Возврат 0;
		КонецЕсли;		
		//--Валерий МЭТР: ДатаЗапретаРедактирования
	КонецЕсли;         
	
	// Если нет системного права на корректировку документа, то предупредим об этом
	Если ПравоДоступа("Корректировка", "Документ." + Конт.Вид() )  = 0 Тогда
		Предупреждение("Разрешен только просмотр документа!",4);
		Возврат 0;
	КонецЕсли;
	
	Попытка	
		// Если нет  полномочий (заданных в справочнике) редактировать цены,
		// то закроем доступ к соответствующим колонкам
		Если глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0 Тогда
			Если (глЕстьРеквизитМнЧ("Цена",         Конт.Вид()) = 1)
			и    (глЕстьРеквизитМнЧ("Номенклатура", Конт.Вид()) = 1)
			Тогда
				Конт.Форма.Цена.Доступность(0);
				// документы, в которых есть разные суммы, но нет цены 
				// (например, запись книги покупок и т.п.) не трогаем
				Если глЕстьРеквизитМнЧ("Сумма",   Конт.Вид()) = 1 Тогда
					Конт.Форма.Сумма.Доступность(0);
				КонецЕсли;
				Если глЕстьРеквизитМнЧ("СуммаНДС",Конт.Вид()) = 1 Тогда
					Конт.Форма.СуммаНДС.Доступность(0);
				КонецЕсли;
				Если глЕстьРеквизитМнЧ("СуммаНП", Конт.Вид()) = 1 Тогда
					Конт.Форма.СуммаНП.Доступность(0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции //глПроверкаРазрешенияРедактирования()

//******************************************************************************
// глМожноЗаписатьДокумент(Конт) 
// 
// Параметры:
// 	Конт - текущий контекст формы
//
// Возвращаемое значение: 
//  1 - если можно записывать документ, 
//  0 - если нельзя записывать документ
//
// Описание:
//	Функция предназначена для обеспечения функциональности работы
//	с константой ДатаЗапретаРедактирования.
//	Данная функция вызывается в предопределенных процедурах ПриЗаписи() из
//	модулей форм всех документов. Функция выполняет проверку разрешения 
//	записи документа сравнивая дату документа и константу ДатаЗапретаРедактирования. 
//
Функция глМожноЗаписатьДокумент(Конт) Экспорт
	//++Валерий МЭТР: ДатаЗапретаРедактирования
	//Если Конт.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
	//	Предупреждение("Нельзя записывать документы с датой, более ранней чем дата запрета редактирования документов!", 60);
	//	Возврат 0;
	//КонецЕсли;
	//Возврат 1;
	Если (ПустоеЗначение(глПользователь) = 0) Тогда
		Если ПустоеЗначение(глПользователь.ДатаЗапретаРедактирования) = 0 Тогда
			Если Конт.ДатаДок <= глПользователь.ДатаЗапретаРедактирования Тогда
					Если (Конт.Вид() = "ЗаявкаПокупателя") И (глПользователь.РедактироватьЗаявкуДоДатыЗапрета = 1) Тогда
						Возврат 1;
					КонецЕсли;
				Предупреждение("Нельзя записывать документы с датой, более ранней чем дата запрета редактирования документов!", 60);
				Возврат 0;
			КонецЕсли;
		ИначеЕсли Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
				Если (Конт.Вид() = "ЗаявкаПокупателя") И (глПользователь.РедактироватьЗаявкуДоДатыЗапрета = 1) Тогда
					Возврат 1;
				КонецЕсли;
			Предупреждение("Нельзя записывать документы с датой, более ранней чем дата запрета редактирования документов!", 60);
			Возврат 0;
		КонецЕсли;
	ИначеЕсли Конт.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя записывать документы с датой, более ранней чем дата запрета редактирования документов!", 60);
		Возврат 0;
	КонецЕсли;
	//--Валерий МЭТР: ДатаЗапретаРедактирования
КонецФункции // глМожноЗаписатьДокумент()

//******************************************************************************
// глКонтрольДатыДокумента(ПереданКонтекст, НачальнаяДатаДокумента)
//
// Параметры:
//  ПереданКонтекст        - контекст документа,из которого вызвана процедура 
//  НачальнаяДатаДокумента - дата документа до изменения. 
// 
// Возвращемое значение:
//  1 - если документу был присвоен новый номер;
//  0 - если документу не был присвоен новый номер.
//  
// Описание:
//  Функция определяет ситуацию, когда при изменении своей даты документ 
//  оказывается в другом периоде нумерации документов, проверяет уникальность 
//  номера документа, и, в противном случае, пытается присвоить документу 
//  новый уникальный номер.
//  Для работы функции должна быть объявлена глобальная переменная модуля 
//  формы документа НачальнаяДатаДокумента. В процедуре ПриОткрытии 
//  в эту переменную должна быть записана дата документа.
//  Функция глКонтрольДатыДокумента() вызывается из процедуры ПриЗаписи.
//  В процедуре ПриЗаписи проверяется возвращаемое значение, и, если
//  оно равно 1 (то есть, документу присвоен новый номер), статус возврата 
//  устанавливается в 0, то есть документ не записывается, а происходит возрат 
//  к редактированию документа.
//
Функция глКонтрольДатыДокумента(ПереданКонтекст, НачальнаяДатаДокумента) Экспорт
	Перем ФлагПрисвоенияНомера; // для возвращаемого значения
	
	ФлагПрисвоенияНомера=0;
	
	// Назначенную для данного вида документов периодичность смены номера
	// определяем из метаданных.
	ПериодСменыНомера = Метаданные.Документ(ПереданКонтекст.Вид()).ПериодичностьНомера;
	
	// В зависимости от установленной периодичности смены номеров,
	// определяем разность старой и новой датами документа.
	// В данном случае конкретная величина разности не важна, 
	// важен сам факт ее наличия.
	Если ПериодСменыНомера = "Год" Тогда
		РазностьДат = НачГода(НачальнаяДатаДокумента)-НачГода(ПереданКонтекст.ДатаДок);
		
	ИначеЕсли ПериодСменыНомера = "Квартал" Тогда
		РазностьДат = НачКвартала(НачальнаяДатаДокумента)-НачКвартала(ПереданКонтекст.ДатаДок);
		
	ИначеЕсли ПериодСменыНомера = "Месяц" Тогда
		РазностьДат = НачМесяца(НачальнаяДатаДокумента)-НачМесяца(ПереданКонтекст.ДатаДок);
		
	ИначеЕсли ПериодСменыНомера = "День" Тогда
		РазностьДат = НачальнаяДатаДокумента-ПереданКонтекст.ДатаДок;
	Иначе
		РазностьДат = 0;
	КонецЕсли;
	
	Если РазностьДат <> 0 Тогда
		// В результате изменения даты документ "ушел" в другой период
		// смены номера. Возможные ситуации:
		// 1) в этом периоде уже существуют документы, и номер документа 
		//    стал неуникален;
		// 2) номер документа - большой, и за-за этого в последовательности
		//    номеров образовалась дыра.
		
		// Все операции проверки номера выполняем с "копией" документа.
		Дубликат = СоздатьОбъект("Документ."+ПереданКонтекст.Вид());
		Дубликат.Новый();
		Дубликат.НомерДок	= ПереданКонтекст.НомерДок;
		Дубликат.ДатаДок	= ПереданКонтекст.ДатаДок;
		
		// Попробуем присвоить новый номер.
		// Вызов метода должен учитывать особенности нумерации 
		// конкретного вида
		Дубликат.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(ПереданКонтекст.ЮрЛицо.ПрефиксНомеровДокументов));
		
		// Если новый номер не равен старому, значит, 
		// назначение номера прошло успешно.
		Если ( Дубликат.НомерДок <> ПереданКонтекст.НомерДок ) Тогда
			
			// Запоминаем новый номер и проверяем его на уникальность
			НовыйНомерДок = Дубликат.НомерДок;
			Если Дубликат.НайтиПоНомеру(Дубликат.НомерДок,Дубликат.ДатаДок)=0 Тогда
				
				// Если номер уникальный, выдаем запрос о необходимости 
				// назначить документу новый номер
				Если Вопрос( "Дата документа была "+?(РазностьДат>0, "уменьшена", "увеличена") + " более чем на " + Нрег(ПериодСменыНомера)+"."+РазделительСтрок+
				"Для документов вида """+ПереданКонтекст.ПредставлениеВида()+""" каждый "+Нрег(ПериодСменыНомера)+" нумерация начинается заново."+РазделительСтрок+
				"Присвоить новый номер?","Да+Нет", 60) = "Да" Тогда
					ПереданКонтекст.НомерДок = НовыйНомерДок;
					
					// Новую дату документа запомнаем в качестве начальной даты - 
					// в случае возможных последующих проверок.
					НачальнаяДатаДокумента=ПереданКонтекст.ДатаДок;
					
					// Устанавливаем возвращаемое значение
					ФлагПрисвоенияНомера=1;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		// Активизируем номер докутента
		ПереданКонтекст.Активизировать("НомерДок");
	КонецЕсли;
	
	Возврат ФлагПрисвоенияНомера;
	
КонецФункции // глКонтрольДатыДокумента()

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ ПРОВЕДЕНИЯ
//
//******************************************************************************
// глНеПроводить(Конт,Сообщение) 
//
// Параметры:
//  Конт      - контекст документа
//  Сообщение - текст сообщения (почему, собственно, не проводится)
//
// Описание: 
//  вызывается из модулей проведения документов - отказ от проведения
//
Процедура глНеПроводить(Конт,Сообщение) Экспорт
	
	СтатусВозврата(0);   
	глСообщениеПроведения(Сообщение, Конт.ТекущийДокумент(), 1,,1);
	глСообщениеПроведения("Документ не проводится!", Конт.ТекущийДокумент(), 1,,1);
	глПоказатьТрассировку(глСообщенияТрассировки);  
	глСообщенияТрассировки = 0;
КонецПроцедуры // глНеПроводить()

//******************************************************************************
// глВсеРеквизитыДокументаЗаполнены(Конт,СписокРеквизитов)
//
// Параметры:
//  Конт             - групповой контекст (контекст документа)
//  СписокРеквизитов - строка, в которой через запятую перечислены идентификаторы 
//  реквизитов (шапки или общие реквизиты документа)
//
// Возвращаемое значение:
//  1 - если все реквизиты заполнены правильно.
//  0 - если какой либо обязательный реквизит не заполнен
//
// Описание:
//  Функция вызывается из модулей проведения документов и предназначена для 
//  проверки полноты заполнения обязательных реквизитов.
//
Функция глВсеРеквизитыДокументаЗаполнены(Конт,СписокРеквизитов) Экспорт
	
	Если Константа.РазрешитьПроводитьБудущейДатой = 0 Тогда
		Если Конт.ДатаДок>РабочаяДата() Тогда
			глНеПроводить(Конт,"Нельзя проводить документ будущей датой!");
			Возврат (0);
		КонецЕсли;                                             
	КонецЕсли;    
	
	Пока СтрДлина(СписокРеквизитов)>0 Цикл
		ПозЗапятой = Найти (СписокРеквизитов,",");
		Если ПозЗапятой = 0 Тогда
			ИдентРеквизита = СписокРеквизитов;
			СписокРеквизитов = "";
		Иначе
			ИдентРеквизита = Сред(СписокРеквизитов,1,ПозЗапятой-1);
			СписокРеквизитов = Сред(СписокРеквизитов,ПозЗапятой+1);
		КонецЕсли;
		Если ПустоеЗначение(Конт.ПолучитьАтрибут(ИдентРеквизита))=1 Тогда
			ВидДок = Конт.Вид();
			Если Метаданные.Документ(ВидДок).РеквизитШапки(ИдентРеквизита).Выбран()=1 Тогда
				Объект = Метаданные.Документ(ВидДок).РеквизитШапки(ИдентРеквизита);     
				
			ИначеЕсли Метаданные.ОбщийРеквизитДокумента(ИдентРеквизита).Выбран()=1 Тогда
				Объект = Метаданные.ОбщийРеквизитДокумента(ИдентРеквизита);
				
			ИначеЕсли Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(ИдентРеквизита).Выбран()=1 Тогда
				Объект = Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(ИдентРеквизита);
				
			Иначе
				глНеПроводить(Конт,"ВсеРеквизитыДокументаЗаполнены(): Неверный реквизит:"+ИдентРеквизита);
				Возврат (0);
			КонецЕсли;
			ПредставлениеРеквизита = ?(ПустоеЗначение(Объект.Синоним)=0,Объект.Синоним,Объект.Идентификатор);
			глНеПроводить(Конт,"Не заполнен реквизит """+ПредставлениеРеквизита+"""");
			Возврат (0);
		КонецЕсли;
	КонецЦикла;
	
	Возврат (1);
	
КонецФункции // глВсеРеквизитыДокументаЗаполнены()

//******************************************************************************
// глПодготовитьТаблицуДокумента(Конт, ВыделитьУслуги=0, ТаблицаУслуг=0)
//
// Параметры:  
//  Конт           - контекст документа. Может быть обработан документ,
//                   содержащий в табличной части поля "Количество", "Цена", "Сумма".
//                   и "Валюта", "Курс" в шапке. Другие поля - не обязательно.
//  ВыделитьУслуги - флаг, при установке его = 1 услуги будут отделены от ТМЦ в
//                   отдельную таблицу значений. Таким образом, будут возвращены 
//                   две таблицы значений - одна с ТМЦ, вторая - с Услугами.
//                   Флаг мождет быть обработан только при наличии реквизита "Номенклатура"
//                   в табличной части документа.
//  ТаблицаУслуг   - переменная в которую возвращается таблица услуг при установке
//                   флага "Выделить услуги"  = 1. 
//
// Возвращаемое значение: 
//  Таблица значений, готовая к проведению по регистрам. Если установлен флаг "Выделить
//  услуги" - возвращается таблица, содержащая только ТМЦ.
//
// Описание: 
//  Приводит таблицу документа к удобному для проведения виду.
//  Используется для того, чтобы разнородные документы привести к одному формату,
//  "понятному" для процедур проведения.
//  Если в шапке документа содержится реквизит "Сумма взаиморасчетов", его обработка
//  также производится в этой процедуре.
//  Формат таблицы: она обязательно содержит следующие поля:
// 	1) СуммаУпр   - (сумма со всеми налогами - упр учет)
// 	2) СуммаРуб   - (сумма со всеми налогами - бух учет)
// 	3) СкидкаРуб  - (скидка (в рублях), используется для розничных документов). Прибавив ее
//                  к СуммаРуб, получим сумму без скидки.
// 	4) Количество - в базовых единицах
// 	5) Сумма 	  - (сумма со всеми налогами - в валюте взаиморасчетов
// 	6) СуммаНДС   - в вал. бух Учета
// 	7) СуммаНП 	  - в вал. бух Учета
// 	8) СтавкаНП 
// 	9) СтавкаНДС 
// 10) ПродСтоимость - стоимость в продажных ценах для заполнения одноименного реквизита 
//					   регистра ПартииНаличие
// 11) ЦенаПрод  	 - продажная цена (для розничной торговли) 
//  Кроме того, в таблице остаются все реквизиты табличной части документа,
//  поскольку таблица не сворачивается при формировании. (Номенклатура, Счет, субконто,
//  вид ТМЦ и т.п.). 
//
Функция глПодготовитьТаблицуДокумента(Конт, ВыделитьУслуги=0, ТаблицаУслуг=0) Экспорт
	
	Перем ТаблНоменклатуры, ВидТекДок, ВидТМЦ, ЕстьНоменклатура, ЕстьКоэффициент;
	Перем УчитыватьНДС,УчитыватьНП,ЕстьСуммаВклНДС,ЕстьСуммаВклНП;
	Перем ВалютаВзаим, КурсВалютаВзаим;
	
	ТаблНоменклатуры = СоздатьОбъект("ТаблицаЗначений");
	
	ВидТекДок        = Конт.Вид();
	
	УчитыватьНДС = ?(глЕстьРеквизитШапки("УчитыватьНДС",ВидТекДок)=1,Конт.УчитыватьНДС,0);	
	УчитыватьНП  = ?(глЕстьРеквизитШапки("УчитыватьНП",	ВидТекДок)=1,Конт.УчитыватьНП,0);
	ЕстьСуммаВклНДС		= глЕстьРеквизитШапки("СуммаВклНДС",	ВидТекДок);
	ЕстьСуммаВклНП 		= глЕстьРеквизитШапки("СуммаВклНП" ,	ВидТекДок);
	ЕстьСклад	 		= глЕстьРеквизитШапки("Склад",			ВидТекДок);
	ЕстьНоменклатура 	= глЕстьРеквизитМнЧ	 ("Номенклатура",	ВидТекДок);
	ЕстьКоэффициент		= глЕстьРеквизитМнЧ	 ("Коэффициент",	ВидТекДок);
	ЕстьРозничнаяЦена	= глЕстьРеквизитМнЧ	 ("РозничнаяЦена",	ВидТекДок);
	ЕстьЦена			= глЕстьРеквизитМнЧ	 ("Цена",			ВидТекДок);
	
	Валюта	= Конт.Валюта;
	Курс	= Конт.Курс;
	ДатаДок = Конт.ДатаДок;
	
	КурсДоллара	= глКурсДляВалюты(глДоллары,ДатаДок);
	КурсРубля	= глКурсДляВалюты(глРубли,	ДатаДок);    
	
	СуммаДокументаВсего = Конт.Итог("Сумма");
	Если ЕстьСуммаВклНДС=1 Тогда
		Если Конт.СуммаВклНДС=0 Тогда    
			Если Конт.Вид() = "ПоступлениеТМЦИмпорт" Тогда
				СуммаДокументаВсего=СуммаДокументаВсего+Конт.Итог("СуммаНДСРуб");
			Иначе
				СуммаДокументаВсего=СуммаДокументаВсего+Конт.Итог("СуммаНДС");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСуммаВклНП=1 Тогда
		Если Конт.СуммаВклНП=0 Тогда
			СуммаДокументаВсего=СуммаДокументаВсего+Конт.Итог("СуммаНП");
		КонецЕсли;
	КонецЕсли;      
	
	Если глЕстьРеквизитШапки("СуммаВзаиморасчетов" ,ВидТекДок)=1 Тогда
		ВалютаВзаим	= Конт.Договор.ВалютаВзаиморасчетов;
		СуммаВзаим	= Конт.СуммаВзаиморасчетов;
		//////////////////////////////////
		//КоэффВзаим 	= ?(СуммаДокументаВсего=0,0,СуммаВзаим/СуммаДокументаВсего);
	Иначе
		ВалютаВзаим	= Конт.Валюта;
		СуммаВзаим	= СуммаДокументаВсего;
		//КоэффВзаим 	= 1;
	КонецЕсли;
	
	Конт.ВыгрузитьТабличнуюЧасть(ТаблНоменклатуры);
	
	ТаблНоменклатуры.НоваяКолонка("СуммаУпр");
	ТаблНоменклатуры.НоваяКолонка("СуммаРуб");
	ТаблНоменклатуры.НоваяКолонка("СкидкаРуб");
	ТаблНоменклатуры.НоваяКолонка("ПродСтоимость");
	ТаблНоменклатуры.НоваяКолонка("ЦенаПрод");
	ТаблНоменклатуры.НоваяКолонка("ЦенаПродПриход");
	
	Если глЕстьРеквизитМнЧ("СуммаНДС",ВидТекДок)=0 Тогда
		ТаблНоменклатуры.НоваяКолонка("СуммаНДС");
		ТаблНоменклатуры.НоваяКолонка("СтавкаНДС");
	КонецЕсли;
	Если глЕстьРеквизитМнЧ("СуммаНП",ВидТекДок)=0 Тогда
		ТаблНоменклатуры.НоваяКолонка("СуммаНП");  
		ТаблНоменклатуры.НоваяКолонка("СтавкаНП");
	КонецЕсли;
	
	Если (ЕстьНоменклатура <> 0) и (ВыделитьУслуги <> 0 ) Тогда
		ТаблНоменклатуры.НоваяКолонка("Вид"); // вид номенклатуры
	КонецЕсли;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
		
		Если ЕстьНоменклатура <> 0 Тогда
			Если ТаблНоменклатуры.Номенклатура.Выбран()=0 Тогда
				Сообщить("В строке "+ТаблНоменклатуры.НомерСтроки+" не выбрана номенклатура!","I");
			КонецЕсли;                                         
			Если (ВыделитьУслуги <> 0 ) Тогда
				ТаблНоменклатуры.Вид = ТаблНоменклатуры.Номенклатура.ВидНоменклатуры;
			КонецЕсли;
		КонецЕсли;       
		
		Скидка = ТаблНоменклатуры.Цена*ТаблНоменклатуры.Количество-ТаблНоменклатуры.Сумма;
 
		Коэффициент=?(ЕстьКоэффициент=1,ТаблНоменклатуры.Коэффициент,1);
		Если Коэффициент<>1 Тогда
			ТаблНоменклатуры.Количество=ТаблНоменклатуры.Количество*Коэффициент;
		КонецЕсли;
		
		Если ЕстьСуммаВклНДС=1 Тогда
			Если Конт.СуммаВклНДС=0 Тогда
				ТаблНоменклатуры.Сумма=ТаблНоменклатуры.Сумма+ТаблНоменклатуры.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьСуммаВклНП=1 Тогда
			Если Конт.СуммаВклНП=0 Тогда
				ТаблНоменклатуры.Сумма=ТаблНоменклатуры.Сумма+ТаблНоменклатуры.СуммаНП;
			КонецЕсли;
		КонецЕсли;                                                                    
		
		// если в документе не учитывается налог (НП, НДС) - обнулим ставку
		Если УчитыватьНДС 	= 0 Тогда
			ТаблНоменклатуры.СтавкаНДС = ПолучитьПустоеЗначение("Перечисление.СтавкиНДС");
		КонецЕсли;
		Если УчитыватьНП 	= 0 Тогда
			ТаблНоменклатуры.СтавкаНП = ПолучитьПустоеЗначение("Справочник.СтавкиНП");
		КонецЕсли;
		
		Если ТаблНоменклатуры.НомерСтроки=ТаблНоменклатуры.КоличествоСтрок() Тогда
			СуммаПоРасчетам = СуммаВзаим;
		Иначе     
			КоэффВзаим 	= ?(СуммаДокументаВсего=0,0,СуммаВзаим/СуммаДокументаВсего);
			СуммаПоРасчетам     = ОКР(ТаблНоменклатуры.Сумма*КоэффВзаим,2,1);
			СуммаВзаим		    = СуммаВзаим - СуммаПоРасчетам;
			СуммаДокументаВсего = СуммаДокументаВсего - ТаблНоменклатуры.Сумма;
		КонецЕсли;
		
		ТаблНоменклатуры.СуммаУпр	= ?(ВалютаВзаим=глДоллары,СуммаПоРасчетам,глПересчет(ТаблНоменклатуры.Сумма,Валюта,Курс,глДоллары,КурсДоллара));
		ТаблНоменклатуры.СуммаРуб	= ?(ВалютаВзаим=глРубли,СуммаПоРасчетам,глПересчет(ТаблНоменклатуры.Сумма,Валюта,Курс,глРубли,КурсРубля));
		ТаблНоменклатуры.СкидкаРуб 	= ?(ТаблНоменклатуры.Сумма=0,0,Скидка * ТаблНоменклатуры.СуммаРуб / ТаблНоменклатуры.Сумма);
		
		ТаблНоменклатуры.СуммаНДС	= глПересчет(ТаблНоменклатуры.СуммаНДС	,Валюта,Курс,глРубли,КурсРубля);
		ТаблНоменклатуры.СуммаНП	= глПересчет(ТаблНоменклатуры.СуммаНП	,Валюта,Курс,глРубли,КурсРубля);
		
		ТаблНоменклатуры.Сумма		= СуммаПоРасчетам;    
		ТаблНоменклатуры.ПродСтоимость = ТаблНоменклатуры.СуммаРуб;
		
		ТаблНоменклатуры.ЦенаПрод  		= 0;
		ТаблНоменклатуры.ЦенаПродПриход = 0;
		Если ЕстьСклад = 1 Тогда
			Если (Конт.Склад.РозничныйСклад = 1) Тогда
				Если ЕстьРозничнаяЦена = 1  Тогда  
					Если ТаблНоменклатуры.Коэффициент <> 0 Тогда
						ТаблНоменклатуры.ПродСтоимость = ТаблНоменклатуры.РозничнаяЦена * ТаблНоменклатуры.Количество / ТаблНоменклатуры.Коэффициент;	
						ТаблНоменклатуры.ЦенаПрод = ТаблНоменклатуры.РозничнаяЦена / ТаблНоменклатуры.Коэффициент;
					Иначе
						ТаблНоменклатуры.ПродСтоимость = 0;
						ТаблНоменклатуры.ЦенаПрод 	   = 0;
					КонецЕсли;
				ИначеЕсли (ЕстьЦена = 1) и (ЕстьКоэффициент = 1) Тогда
					ТаблНоменклатуры.ЦенаПрод = ?(ТаблНоменклатуры.Коэффициент = 0, 0, ТаблНоменклатуры.Цена / ТаблНоменклатуры.Коэффициент);
				Иначе
					ТаблНоменклатуры.ЦенаПрод = Окр((ТаблНоменклатуры.СуммаРуб+ТаблНоменклатуры.СкидкаРуб)/ТаблНоменклатуры.Количество,2,1);
				КонецЕсли;
			КонецЕсли;
			Если глЕстьРеквизитШапки("СкладПолучатель",			ВидТекДок) = 1 Тогда	
				Если (Конт.СкладПолучатель.РозничныйСклад = 1) Тогда
					ТаблНоменклатуры.ЦенаПродПриход = ТаблНоменклатуры.Цена / ТаблНоменклатуры.Коэффициент;
				КонецЕсли;                         
			Иначе
				ТаблНоменклатуры.ЦенаПродПриход = ТаблНоменклатуры.ЦенаПрод;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; 
	
	Если (ВыделитьУслуги <> 0 ) Тогда
		
		ТаблНоменклатуры.Сортировать("Вид");    
		
		НомСтр = 0;
		ТаблНоменклатуры.НайтиЗначение(Перечисление.ВидыНоменклатуры.Услуга,НомСтр,"Вид");
		Если НомСтр<>0 Тогда
			ТаблНоменклатуры.Выгрузить(ТаблицаУслуг,НомСтр,ТаблНоменклатуры.КоличествоСтрок());
			Для СчЦикла = НомСтр по ТаблНоменклатуры.КоличествоСтрок() Цикл
				ТаблНоменклатуры.УдалитьСтроку(НомСтр);// да, удаляем одну и ту же строку
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблНоменклатуры;     
	
КонецФункции // глПодготовитьТаблицуДокумента()

//******************************************************************************
// глПриходОстатковТМЦ(Конт, ТаблНоменклатуры, СписокПараметров)
//
// Параметры: 
//  Конт             - контекст проводимого документа.
//  ТаблНоменклатуры - таблица номенклатуры, должна обязательно содержать колонки
//      1) Номенклатура.
//      2) Количество.
//      3) СуммаРуб (для розничного склада).
//       
//  СписокПараметров - список параметров (используются "Фирма", "Склад", "КодОперации").
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Оприходование остатков ТМЦ по регистру "Остатки ТМЦ".
//
Функция глПриходОстатковТМЦ(Конт,ТаблНоменклатуры,СписокПараметров) Экспорт
	
	РегОстатки 		= Конт.Регистр.ОстаткиТМЦ;
	
	Фирма			= СписокПараметров.Получить("Фирма");
	Склад			= СписокПараметров.Получить("Склад");
	ТекДок			= СписокПараметров.Получить("ТекДок");
	
	КодОперации		= СписокПараметров.Получить("КодОперации");               
	
	ВнутреннееПеремещение = ?(((КодОперации = глКО.Перемещение) или (КодОперации = глКО.ПередачаВРозницу) 
	или (КодОперации = глКО.ВозвратИзРозницы)),1,0); 
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл                        
		
		Номенклатура =ТаблНоменклатуры.Номенклатура;
		
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		// измерения
		РегОстатки.Фирма			= Фирма;
		РегОстатки.Склад			= Склад;
		РегОстатки.Номенклатура		= ТаблНоменклатуры.Номенклатура;
		//ресурсы
		РегОстатки.Количество		= ТаблНоменклатуры.Количество;
		
		РегОстатки.ЦенаПрод		= ТаблНоменклатуры.ЦенаПродПриход;
		
		//реквизиты
		РегОстатки.Внутреннее		= ВнутреннееПеремещение;
		
		РегОстатки.ДвижениеПриходВыполнить();
		
	КонецЦикла;
	
	
	
КонецФункции // глПриходОстатковТМЦ()
      
Функция глПриходОстатковТМЦПоФирмам(Конт,ТаблНоменклатуры,СписокПараметров) Экспорт
	
	РегОстатки			= Конт.Регистр.ОстаткиТМЦПоФирмам;
	
	Фирма				= СписокПараметров.Получить("ФирмаОстатков");  
	Склад				= СписокПараметров.Получить("Склад");
	ТекДок				= СписокПараметров.Получить("ТекДок");
	
	Если Конт.ДатаДок < Дата("01.07.2017") Тогда
	  	Возврат 0;
	КонецЕсли;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
		
		Номенклатура = ТаблНоменклатуры.Номенклатура;
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		//измерения
		//РегОстатки.Фирма				= Фирма;
		РегОстатки.Склад				= Склад;
		РегОстатки.Номенклатура			= Номенклатура;
			  
		Если ПустоеЗначение(ТаблНоменклатуры.Партия) = 0 Тогда
			Если ПустоеЗначение(ТаблНоменклатуры.Партия.ПриходныйДокумент) = 0 Тогда 
				Если ПустоеЗначение(ТаблНоменклатуры.Партия.ПриходныйДокумент.Проект) = 0 Тогда   
					РегОстатки.Фирма = ТаблНоменклатуры.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		//ресурсы
		РегОстатки.Количество		= ТаблНоменклатуры.Количество;
		
		РегОстатки.ДвижениеПриходВыполнить();
		
	КонецЦикла;
	
КонецФункции // глПриходОстатковТМЦПоФирмам()

Функция глРасходОстатковТМЦПоФирмам(Конт,ТаблНоменклатуры,СписокПараметров) Экспорт
	
	РегОстатки			= Конт.Регистр.ОстаткиТМЦПоФирмам;
	
	Фирма				= СписокПараметров.Получить("ФирмаОстатков");  
	Склад				= СписокПараметров.Получить("Склад");
	ТекДок				= СписокПараметров.Получить("ТекДок");
	
	Если Конт.ДатаДок < Дата("01.07.2017") Тогда
	  	Возврат 0;
	КонецЕсли;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
		
		Номенклатура = ТаблНоменклатуры.Номенклатура;
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		//измерения
		//РегОстатки.Фирма				= Фирма;
		РегОстатки.Склад				= Склад;
		РегОстатки.Номенклатура			= Номенклатура;
			  
		Если ПустоеЗначение(ТаблНоменклатуры.Партия) = 0 Тогда
			Если ПустоеЗначение(ТаблНоменклатуры.Партия.ПриходныйДокумент) = 0 Тогда 
				Если ПустоеЗначение(ТаблНоменклатуры.Партия.ПриходныйДокумент.Проект) = 0 Тогда   
					РегОстатки.Фирма = ТаблНоменклатуры.Партия.ПриходныйДокумент.Проект.ФирмаОстатков;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		//ресурсы
		РегОстатки.Количество		= ТаблНоменклатуры.Количество;
		
		РегОстатки.ДвижениеРасходВыполнить();
		
	КонецЦикла;
	
КонецФункции // глПриходОстатковТМЦПоФирмам()

//******************************************************************************
// глФильтрОстатковТМЦ(Конт,ТаблНоменклатуры, СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)
//
// Параметры:
//  Конт             - контекст проводимого документа.
//  ТаблНоменклатуры - таблица номенклатуры (должна содержать колонку "Номенклатура")
//  СписокПараметров - список параметров (используется "Фирма")
//  ВремОстаткиТМЦ   - Регистр "ОстаткиТМЦ", на который накладывается фильтр.
//  ВремРезервыТМЦ   - регистр "РезервыТМЦ", на который накладывается фильтр (не обязательный).
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Перед проведением документа по списанию остатков ТМЦ накладываем фильтры.
// В случае проведения задним числом - взводим флаг временного расчета.
//
Процедура глФильтрОстатковТМЦ(Конт,ТаблНоменклатуры, СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ = "") Экспорт
	
	ФирмаДляОстатковТМЦ = СписокПараметров.Получить("ФирмаДляОстатковТМЦ");                        
	//КАГ 29.09.09
	ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ,2);
	Если Константа.УбратьПоследниеИзменения = Перечисление.Булево.Нет Тогда
		ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Склад",Конт.Склад,1);
	КонецЕсли;
	
	Если (ТипЗначенияСтр(ВремРезервыТМЦ) = "Регистр") Тогда
		ВремРезервыТМЦ.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ,2);
		ВремРезервыТМЦ.УстановитьЗначениеФильтра("Склад",Конт.Склад,1);
	КонецЕсли;
	
	Если Конт.ИтогиАктуальны()=0 Тогда
		// подготовка фильтров
		СписокТМЦ		= СоздатьОбъект("СписокЗначений");
		ТаблНоменклатуры.Выгрузить(СписокТМЦ,,,"Номенклатура");
		
		// установка фильтров
		ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,2);
		ВремОстаткиТМЦ.ВременныйРасчет();
		
		Если (ТипЗначенияСтр(ВремРезервыТМЦ) = "Регистр") Тогда
			// установка фильтров
			//КАГ 29.09.09
			Если Константа.УбратьПоследниеИзменения = Перечисление.Булево.Нет Тогда
				ВремРезервыТМЦ.УстановитьЗначениеФильтра("Склад",Конт.Склад,1);
			КонецЕсли;
			ВремРезервыТМЦ.УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,2);
			ВремРезервыТМЦ.ВременныйРасчет();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ФильтрОстатковТМЦ()

//******************************************************************************
// глСписаниеОстатковТМЦ(Конт,ТаблНоменклатуры,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ = "")
//
// Параметры:
//  Конт             - контекст проводимого документа.
//  ТаблНоменклатуры - таблица номенклатуры (должна содержать колонки 
//                     1) "Номенклатура"
//                     2) "Количество"
//                     3) "СуммаРуб"  (для розничного склада)
//                     4) "СкидкаРуб" (для розничного склада)
//  СписокПараметров - список параметров 
//                    (используется "Фирма","Склад", "Договор", "КодОперации")
//  ВремОстаткиТМЦ   - Регистр "ОстаткиТМЦ", рассчитанный и с наложенными фильтрами.
//  ВремРезервыТМЦ   - регистр "РезервыТМЦ", рассчитанный и с наложенными фильтрами (не обязатльный).                     
//
// Возвращаемое значение:
//  1 - проведение выполнено;
//  0 - нет
//
// Описание:
//  Проведение списания остатков ТМЦ со склада по регистру "ОстаткиТМЦ".
//
Функция глСписаниеОстатковТМЦ(Конт,ТаблНоменклатуры,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ = "") Экспорт
	
	Перем КонтрольОстатков, КонтрольРезервов;
	
	РегОстатки 		    = Конт.Регистр.ОстаткиТМЦ;
	
	Фирма  			    = СписокПараметров.Получить("Фирма");
	ФирмаДляОстатковТМЦ = СписокПараметров.Получить("ФирмаДляОстатковТМЦ");
	Склад			    = СписокПараметров.Получить("Склад");
	ТекДок			    = СписокПараметров.Получить("ТекДок");
	Договор			    = СписокПараметров.Получить("Договор");
	КодОперации		    = СписокПараметров.Получить("КодОперации");  
	
	ВнутреннееПеремещение = ?(((КодОперации = глКО.Перемещение) или (КодОперации = глКО.ПередачаВРозницу) 
	или (КодОперации = глКО.ВозвратИзРозницы)),1,0); 
	
	КонтрольРезервов = 0;   
	Если Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать Тогда 
		КонтрольОстатков = 0; 
	Иначе
		КонтрольОстатков = 1; 
		Если глПолучитьПолномочие("РазрешитьПродаватьРезерв") = 0 Тогда
			КонтрольРезервов = 1;
		КонецЕсли;
		
	КонецЕсли;           
	
	Если (Склад.РозничныйСклад = 1) Тогда
		// розничный склад будем контролировать всегда, поскольку там идет 
		// учет в разрезе цен и работа задним числом сильно затруднена.
		КонтрольОстатков=1;
	КонецЕсли;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл                        
		
		ТекНоменклатура = ТаблНоменклатуры.Номенклатура;
		
		Если (ТекНоменклатура.ВидНоменклатуры 	= Перечисление.ВидыНоменклатуры.Услуга) или
		(ТаблНоменклатуры.Количество 	= 0) Тогда
			Продолжить;
		КонецЕсли;     
		
		Цена = ТаблНоменклатуры.ЦенаПрод;
		
		РезервНаСкладе = 0;
		РезервПоФирме  = 0;
		Если (ТипЗначенияСтр(ВремРезервыТМЦ) = "Регистр")
		и    (КонтрольРезервов = 1) 
		Тогда                      
			Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда // Фильтр по фирме не нужен
				
				РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,,"Количество"); 
				
				Если (ВнутреннееПеремещение   = 0) Тогда                                 
					
					// для внутренних перемещений не конролируем резерв по фирме в целом 
					// (поскольку он на самом деле не изменится)
					РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,,,,"Количество"); 
				КонецЕсли;
				
				Если (ПустоеЗначение(Договор) = 0) Тогда
					
					// вычтем резервы, которые сделал наш же покупатель
					РезервНаСкладе = РезервНаСкладе - 
					ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,Договор,,"Количество");
					Если (ВнутреннееПеремещение   = 0) Тогда				
						РезервПоФирме  = РезервПоФирме  - 
						ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,     ,Договор,,"Количество");
					КонецЕсли;  	
				КонецЕсли;  
				
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда // Нужны сводные остатки по нескольким фирмам
				
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
					
					ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
					РезервНаСкладе = РезервНаСкладе + 
					ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,,"Количество"); 
					Если (ВнутреннееПеремещение   = 0) Тогда
						РезервПоФирме  = РезервПоФирме + 
						ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,,,,"Количество"); 
					КонецЕсли;
					Если (ПустоеЗначение(Договор) = 0) Тогда
						
						// вычтем резервы, котрые сделал наш же покупатель
						РезервНаСкладе = РезервНаСкладе - 
						ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,Договор,,"Количество"); 
						Если (ВнутреннееПеремещение   = 0) Тогда				
							РезервПоФирме  = РезервПоФирме  - 
							ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,Договор,,"Количество");
						КонецЕсли;  	
					КонецЕсли;  
					
				КонецЦикла;
				
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
				
				РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,,"Количество"); 
				Если (ВнутреннееПеремещение   = 0) Тогда
					РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,,,"Количество"); 
				КонецЕсли;
				Если (ПустоеЗначение(Договор) = 0) Тогда
					// вычтем резервы, котрые сделал наш же покупатель
					РезервНаСкладе = РезервНаСкладе - 
					ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,Договор,,"Количество"); 
					Если (ВнутреннееПеремещение   = 0) Тогда				
						РезервПоФирме  = РезервПоФирме  - 
						ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,Договор,,"Количество");
					КонецЕсли;  	
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;                                                                        
		
		ОстатокНаСкладе = 0; 
		ОстатокПоФирме  = 0;
		Если КонтрольОстатков = 1 Тогда
			
			// остаток на складе
			Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда
				
				ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,"Количество"); 
				Если (ВнутреннееПеремещение = 0) Тогда
					ОстатокПоФирме = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,,,"Количество");
				КонецЕсли;	
				Если Склад.РозничныйСклад = 1 Тогда
					ОстатокНаСкладеЦ = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,Цена,"Количество");
				КонецЕсли;                                                                              
				
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда
				
				ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,"Количество"); 
				Если (ВнутреннееПеремещение = 0) Тогда
					ОстатокПоФирме = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,,,"Количество");
				КонецЕсли;	
				Если Склад.РозничныйСклад = 1 Тогда
					ОстатокНаСкладеЦ = ВремОстаткиТМЦ.Остаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,Цена,"Количество");
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
				
				СчетчикЦикла = 0;
				Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
					ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
					ОстатокНаСкладе = ОстатокНаСкладе + 
					ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,"Количество"); 
					Если (ВнутреннееПеремещение = 0) Тогда
						ОстатокПоФирме = ОстатокПоФирме + 
						ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,,,"Количество");
					КонецЕсли;	
					Если Склад.РозничныйСклад = 1 Тогда
						ОстатокНаСкладеЦ = ОстатокНаСкладеЦ + 
						ВремОстаткиТМЦ.Остаток(ТекФирма,ТекНоменклатура,Склад,Цена,"Количество");
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ОстатокНаСкладе = ТаблНоменклатуры.Количество;
			ОстатокПоФирме  = ТаблНоменклатуры.Количество;
		КонецЕсли; // КонтрольОстатков = 1 
		
		// проверка резерва на складе
		Если (ОстатокНаСкладе - РезервНаСкладе) < ТаблНоменклатуры.Количество Тогда
			глНеПроводить(Конт,"На складе нет нужного свободного количества ТМЦ "+ТекНоменклатура.Наименование
			+". "+РазделительСтрок+"    Всего осталось "+Строка(ОстатокНаСкладе)+" "+ТекНоменклатура.БазоваяЕдиница
			+?(РезервНаСкладе <> 0 ,". "+РазделительСтрок+"    Зарезервировано по выписанным Заявкам "+Строка(РезервНаСкладе) +" "+ТекНоменклатура.БазоваяЕдиница,"")
			+"."+РазделительСтрок+"Требуемое количество "+Строка(ТаблНоменклатуры.Количество)+" "+ТекНоменклатура.БазоваяЕдиница);
			Возврат (0);
		КонецЕсли;                 
		
		// а также по фирме в целом
		Если (ВнутреннееПеремещение   = 0) Тогда                                 
			Если (ОстатокПоФирме - РезервПоФирме) < ТаблНоменклатуры.Количество Тогда
				глНеПроводить(Конт,"На фирме в целом нет нужного свободного количества ТМЦ "+ТекНоменклатура.Наименование
				+". "+РазделительСтрок+"    Всего осталось "+Строка(ОстатокПоФирме)+" "+ТекНоменклатура.БазоваяЕдиница
				+?(РезервПоФирме<>0,". "+РазделительСтрок+"    Зарезервировано по выписанным Заявкам "+Строка(РезервПоФирме) +" "+ТекНоменклатура.БазоваяЕдиница,"")
				+"."+РазделительСтрок+"Требуемое количество "+Строка(ТаблНоменклатуры.Количество)+" "+ТекНоменклатура.БазоваяЕдиница);
				Возврат (0);
			КонецЕсли;
		КонецЕсли;                 
		
		// проверка цены реализации для розничного склада
		Если (Склад.РозничныйСклад = 1) Тогда   
			Если (ОстатокНаСкладеЦ) < ТаблНоменклатуры.Количество Тогда    
				глНеПроводить(Конт,"На розничном складе нет ТМЦ "+ТекНоменклатура.Наименование+" по указанной цене "+глФРМ(Цена)+" "+глРубли
				+". "+РазделительСтрок+"    Всего осталось по указанной цене "+Строка(ОстатокНаСкладеЦ)+" "+ТекНоменклатура.БазоваяЕдиница
				+"."+РазделительСтрок+"Требуемое количество "+Строка(ТаблНоменклатуры.Количество)+" "+ТекНоменклатура.БазоваяЕдиница);
				Возврат (0);
			КонецЕсли;                         
		КонецЕсли;
		
		// измерения
		РегОстатки.Фирма			= Фирма;
		РегОстатки.Склад			= Склад;
		РегОстатки.Номенклатура		= ТекНоменклатура;
		//ресурсы
		РегОстатки.Количество		= ТаблНоменклатуры.Количество;
		РегОстатки.ЦенаПрод			= Цена;
		
		//реквизиты
		РегОстатки.Внутреннее		= ВнутреннееПеремещение;
		
		РегОстатки.ДвижениеРасходВыполнить();
		
	КонецЦикла;
	
	Возврат (1);
	
КонецФункции // глСписаниеОстатковТМЦ()


//******************************************************************************
// глПолучитьСтатусПартииПрихода(ВидТМЦ,Номенклатура,КодОперации, Склад = 0)
//
// Параметры: 
//  ВидТМЦ       - вид ТМЦ      (Перечисление.ВидыТМЦ)
//  Номенклатура - номенклатура (элемент справочника Номенклатура)
//  КодОперации  - Код операции 
//  Склад 		 - склад, на который приходуется партия
//
// Возвращаемое значение:
//  Статус партии (перечисление СтатусыПартии)
//
// Описание:
//  Возвращает статус партии, по которому будет оприходован ТМЦ, в зависимости
//  от вида ТМЦ, вида номенклатуры и совершаемой хозяйственной операции.
//
Функция глПолучитьСтатусПартииПрихода(ВидТМЦ,Номенклатура,КодОперации, Склад = 0) Экспорт
	Перем Статус;
	
	Если ВидТМЦ=Перечисление.ВидыТМЦ.Товар Тогда
		Если (КодОперации=глКО.ПриемНаРеализацию) или 
		(КодОперации=глКО.ПриемНаРеализациюРозница) или	
		(КодОперации=глКО.ВозвратКомитенту) Тогда
			Статус = глСП.Т_Принятый;
		Иначе
			Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Тара Тогда
				Статус = глСП.Т_Тара;
			Иначе	
				Статус = глСП.Т_Купленный;
				Если ПустоеЗначение(Склад) = 0  Тогда
					Если Склад.РозничныйСклад = 1 Тогда
						Статус = глСП.Т_ВРознице;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;  
	ИначеЕсли ВидТМЦ=Перечисление.ВидыТМЦ.Материал Тогда
		Статус = глСП.ЗначениеПоИдентификатору("М_"+Номенклатура.ВидНоменклатуры.Идентификатор());
	Иначе // продукция     
		Статус = глСП.ЗначениеПоИдентификатору(ВидТМЦ.Идентификатор());
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции // глПолучитьСтатусПартииПрихода()

//******************************************************************************
//  глЗаполнитьПартию(СпрПартии,Партия,Поставщик,ДоговорПоставщика,ПриходныйДокумент)
//
// Параметры:  
//  СпрПартии         - справочник "партии" (не спозиционированный)
//  Партия            - элемент "Справочник.Партии"
//  Поставщик         - элемент справочника "Контрагенты"
//  ДоговорПоставщика - элемент справочника "Договоры"
//  ПриходныйДокумент - Приходный документ (документ любого вида)
//  Цена              - закупочная цена (число), в валюте взаиморасчетов поставщика
//
// Возвращаемое значение: 
//  Элемент справочника "Партии"
//
// Описание: 
//  Заполняет элемент справочника "Партии" и возвращает его
//
Функция глЗаполнитьПартию(СпрПартии,Партия,Поставщик,ДоговорПоставщика,ПриходныйДокумент,Цена) Экспорт
	
	Если (Партия.Поставщик<>Поставщик) или (Партия.ДоговорПоставщика<>ДоговорПоставщика) или
	(Партия.ПриходныйДокумент<>ПриходныйДокумент) или (Цена<>Партия.ЗакупочнаяЦена) Тогда
		
		Если СпрПартии.НайтиЭлемент(Партия)=0 Тогда
			Возврат ПолучитьПустоеЗначение("Справочник.Партии");
		КонецЕсли;
		
		СпрПартии.Поставщик			= Поставщик;
		СпрПартии.ДоговорПоставщика	= ДоговорПоставщика;
		СпрПартии.ПриходныйДокумент	= ПриходныйДокумент;
		СпрПартии.ЗакупочнаяЦена 	= Цена;
		СпрПартии.Записать();
	КонецЕсли;
	
	Возврат Партия;
	
КонецФункции //глЗаполнитьПартию()


//******************************************************************************
// глОприходованиеПартийТМЦ(Конт,ТаблНоменклатуры,СписокПараметров)
//
// Параметры:                                                     
//	Конт 			 - контекст проведения
//	ТаблицаДокумента - таблица документа. Должна содержать колонки:
//                         1) "Номенклатура"
//                         2) "Количество"
//                         3) "Сумма"       (в валюте взаиморасчетов)
//                         4) "СуммаУпр"    (в валюте управленческого учета)
//                         5) "СуммаРуб"    (в валюте бухгалтерского учета)
//                         6) "СуммаНДС"    (в валюте бухгалтерского учета)
//                         7) "Партия"      (в которую оприходовать)
//                         8) "ВидТМЦ"      (Вид ТМЦ, Перечисление.ВидыТМЦ)
//						Только для оприходования на розничный склад:
//						   9) "СуммаРозничная"
//	СписокПараметров - список доп параметров проведения
//   (используются: "Фирма", "Склад", "Контрагент", "Договор", "ТекДок", "КодОперации")
//
// Описание:
//   Производит оприходование ТМЦ по регистру "ПартииНаличие".
//
Процедура глОприходованиеПартийТМЦ(Конт,ТаблНоменклатуры,СписокПараметров) Экспорт
	
	СпрПартии			= СоздатьОбъект("Справочник.Партии");
	
	РегПартии			= Конт.Регистр.ПартииНаличие;
	
	Фирма				= СписокПараметров.Получить("Фирма");  
	Склад				= СписокПараметров.Получить("Склад");
	Поставщик			= СписокПараметров.Получить("Контрагент");
	ДоговорПоставщика	= СписокПараметров.Получить("Договор");
	ТекДок				= СписокПараметров.Получить("ТекДок");
	КодОперации			= СписокПараметров.Получить("КодОперации");
	
	УчПолитика 			= Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(Конт.ДатаДок);
	
	МОЛ					= Склад.МОЛ;                                              
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
		
		Номенклатура = ТаблНоменклатуры.Номенклатура;
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		//измерения
		РегПартии.Фирма				= Фирма;
		РегПартии.МОЛ				= МОЛ;
		РегПартии.Номенклатура		= Номенклатура;
		РегПартии.СтатусПартии		= глПолучитьСтатусПартииПрихода(ТаблНоменклатуры.ВидТМЦ,Номенклатура,КодОперации, Склад);
		Если (УчПолитика = Перечисление.МетодыРасчетаСебестоимости.FIFO)
		или (УчПолитика = Перечисление.МетодыРасчетаСебестоимости.LIFO)
		или (РегПартии.СтатусПартии = глСП.Т_Принятый) Тогда
			
			ЗакупочнаяЦена 			= ?(ТаблНоменклатуры.Количество=0,
			0,
			Окр(ТаблНоменклатуры.Сумма / ТаблНоменклатуры.Количество,2,1));
			РегПартии.Партия		= глЗаполнитьПартию(СпрПартии,  ТаблНоменклатуры.Партия,
			Поставщик,ДоговорПоставщика,ТекДок,ЗакупочнаяЦена);
			РегПартии.ДатаПартии	= ТекДок.ДатаДок;
			
		Иначе     
			РегПартии.Партия		= "";                
			РегПартии.ДатаПартии	= "";
		КонецЕсли;
		
		//ресурсы
		РегПартии.Количество		= ТаблНоменклатуры.Количество;
		РегПартии.СуммаУпр			= ТаблНоменклатуры.СуммаУпр;
		РегПартии.СуммаРуб			= ТаблНоменклатуры.СуммаРуб;
		РегПартии.СуммаБезНДС		= ТаблНоменклатуры.СуммаРуб-ТаблНоменклатуры.СуммаНДС;
		
		Если Склад.РозничныйСклад = 1  Тогда
			РегПартии.ПродСтоимость = ТаблНоменклатуры.ПродСтоимость;  
		КонецЕсли;
		РегПартии.ЦенаПрод = ТаблНоменклатуры.ЦенаПродПриход;
		
		//реквизиты      
		РегПартии.КодОперации 		= КодОперации;
		
		РегПартии.ПривязыватьСтроку(ТаблНоменклатуры.НомерСтрокиДокумента);
		
		РегПартии.ДвижениеПриходВыполнить();
		
	КонецЦикла;
	 
	
	глПриходОстатковТМЦПоФирмам(Конт,ТаблНоменклатуры,СписокПараметров); 
		
	
КонецПроцедуры // глОприходованиеПартийТМЦ()                                    

//******************************************************************************
// ЗапомнитьСписаннуюПартию(РегДвиж,ТаблСписПартий,СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СтавкаНДС,СтавкаНП, НомерСтрокиДокумента=0)
//
// Параметры: 
//  РегДвиж  	    	 - регистр, (Регистр.ПартииНаличие или Регистр.ПартииОтданные)
//  ТаблСписПартий		 - Таблица значений, в котрой накапливаются списанные партии
//  СуммаПрод       	 - сумма продажи в валюте взаимор. покупателя (м.б. равна 0 если не продажа, а списание и т.п.)
//  СуммаПродУпр    	 - сумма продажи в валюте упр. учета.
//  СуммаПродРуб    	 - сумма продажи в валюте бух. учета.
//  НДСПрод         	 - сумма НДС продажи в валюте бух. учета.
//  НППрод          	 - сумма НП продажи в валюте бух. учета.
//  СтавкаНДС       	 - ставка НДС продажи 
//  СтавкаНП        	 - ставка НП продажи 
//	НомерСтрокиДокумента - номер строки документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Запоминаем списанную при проведении партию с специальной таблице значений.
//  Используется при дальнейшем проведении по регистрам.
//
Процедура ЗапомнитьСписаннуюПартию(РегДвиж,ТаблСписПартий,СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СтавкаНДС,СтавкаНП, НомерСтрокиДокумента = 0, СкидкаРуб = 0, СуммаДокРуб = 0)
	
	ТаблСписПартий.НоваяСтрока();
	ТаблСписПартий.Фирма			= РегДвиж.Фирма;
	Если РегДвиж.Вид()="ПартииНаличие" Тогда
		ТаблСписПартий.МОЛ			= РегДвиж.МОЛ;
		ТаблСписПартий.ДатаПартии	= РегДвиж.ДатаПартии;
		ТаблСписПартий.ЦенаПрод 	= РегДвиж.ЦенаПрод;
	КонецЕсли;
	ТаблСписПартий.Номенклатура		= РегДвиж.Номенклатура;
	ТаблСписПартий.СтатусПартии		= РегДвиж.СтатусПартии;
	ТаблСписПартий.Партия			= РегДвиж.Партия;
	ТаблСписПартий.Количество		= РегДвиж.Количество;
	ТаблСписПартий.СуммаУпр			= РегДвиж.СуммаУпр;
	ТаблСписПартий.СуммаРуб			= РегДвиж.СуммаРуб;
	ТаблСписПартий.СуммаБезНДС		= РегДвиж.СуммаБезНДС;
	ТаблСписПартий.СтавкаНДС		= СтавкаНДС;
	ТаблСписПартий.СтавкаНП			= СтавкаНП;
	ТаблСписПартий.СуммаПрод		= СуммаПрод;
	ТаблСписПартий.СуммаПродРуб		= СуммаПродРуб;
	ТаблСписПартий.СуммаПродУпр		= СуммаПродУпр;
	ТаблСписПартий.СуммаДокРуб		= СуммаДокРуб;
	ТаблСписПартий.НДСПрод			= НДСПрод;
	ТаблСписПартий.НППрод			= НППрод;   
	ТаблСписПартий.НомерСтрокиДокумента = НомерСтрокиДокумента;
	ТаблСписПартий.СкидкаРуб		= СкидкаРуб;  
	Если РегДвиж.СтатусПартии=глСП.Т_Принятый Тогда
		ТаблСписПартий.ДоговорКомитента = ТаблСписПартий.Партия.ДоговорПоставщика;
	КонецЕсли;               
	
КонецПроцедуры  // ЗапомнитьСписаннуюПартию()

//******************************************************************************
// глВыяснитьПартииВозврата(ТаблНоменклатуры, ТекДок)
//
// Параметры: 
//  ТаблНоменклатуры -  таблица значений номенклатуры. Должна содержать колонки:
//                      1) "Номенклатура"
//                      2) "ВидСтатус"     (глСП.Т_Принятый или ВидТМЦ)
//                      3) "Партия"        (в которую возвращаем)
//                      4) "Количество"
//                      5) "Себестоимость" (в валюте бух. учета)
//  ТекДок           - текущий документ (документ возврата)
//
// Возвращаемое значение:
//  Таблица партий. 
//
// Описание:
//  Для документов возврата выясняем партии, в которые происходит возврат.
//  Если документ основание выбран - берем из его движений (списанные им партии). 
//  Если не выбран - все параметры возврата есть в самом документе возврата.
//
Функция глВыяснитьПартииВозврата(ТаблНоменклатуры, ТекДок)
	
	ТаблПартий=СоздатьОбъект("ТаблицаЗначений");
	
	ТаблПартий.НоваяКолонка("Номенклатура");
	ТаблПартий.НоваяКолонка("СтатусПартии");
	ТаблПартий.НоваяКолонка("Партия");
	ТаблПартий.НоваяКолонка("ДатаПартии");
	
	ТаблПартий.НоваяКолонка("Количество");
	ТаблПартий.НоваяКолонка("СуммаУпр");
	ТаблПартий.НоваяКолонка("СуммаРуб");
	ТаблПартий.НоваяКолонка("СуммаБезНДС");      
	
	Свернут = 0;                                                              
	Если ТекДок.ДокОснование.Выбран() = 1 Тогда
		Если глЕстьРеквизитШапки("ФлагСвертки", ТекДок.ДокОснование.Вид())=1 Тогда
			Если ТекДок.ДокОснование.ФлагСвертки = 1 Тогда	
				Свернут = 1;                                
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Если (ТекДок.ДокОснование.Выбран()=1) и (Свернут=0) Тогда
		РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");
		РегПартии.ВыбратьДвиженияДокумента(ТекДок.ДокОснование);
		Пока РегПартии.ПолучитьДвижение()=1 Цикл
			
			Номенклатура = РегПартии.Номенклатура;
			ЕстьТакойТМЦ = ТаблНоменклатуры.НайтиЗначение(Номенклатура,,"Номенклатура");
			Если (РегПартии.Расход=1) и (ЕстьТакойТМЦ = 1) Тогда
				
				ТаблПартий.НоваяСтрока();
				
				ТаблПартий.СтатусПартии		= РегПартии.СтатусПартии;
				ТаблПартий.Номенклатура		= Номенклатура;
				ТаблПартий.Партия			= РегПартии.Партия;
				ТаблПартий.ДатаПартии		= РегПартии.ДатаПартии;
				
				ТаблПартий.Количество		= РегПартии.Количество;
				ТаблПартий.СуммаУпр			= РегПартии.СуммаУпр;
				ТаблПартий.СуммаРуб			= РегПартии.СуммаРуб;
				ТаблПартий.СуммаБезНДС		= РегПартии.СуммаБезНДС;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе // документа основания нет - все параметры должны быть введены в документе
		КурсДоллара = глКурсДляВалюты(глДоллары, 	ТекДок.ДатаДок);
		КурсРубля 	= глКурсДляВалюты(глРубли, 		ТекДок.ДатаДок);
		СпрПартии   = СоздатьОбъект("Справочник.Партии");
		
		ТаблНоменклатуры.ВыбратьСтроки();
		Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
			
			ТаблПартий.НоваяСтрока();
			// Определим статус партии
			Если ТаблНоменклатуры.ВидСтатус = глСП.Т_Принятый Тогда
				СтатусПартии = ТаблНоменклатуры.ВидСтатус;
			Иначе
				СтатусПартии = глПолучитьСтатусПартииПрихода(ТаблНоменклатуры.ВидСтатус, ТаблНоменклатуры.Номенклатура, "", ТекДок.Склад);
			КонецЕсли;
			
			ТаблПартий.СтатусПартии		= СтатусПартии;
			ТаблПартий.Номенклатура		= ТаблНоменклатуры.Номенклатура;
			ТаблПартий.Количество		= ТаблНоменклатуры.Количество;
			ТаблПартий.СуммаБезНДС		= ТаблНоменклатуры.Себестоимость;
			ТаблПартий.СуммаРуб			= ТаблНоменклатуры.Себестоимость + ТаблНоменклатуры.СебестоимостьНДС;
			ТаблПартий.СуммаУпр			= глПересчет(ТаблПартий.СуммаРуб,глРубли,КурсРубля,глДоллары,КурсДоллара);
			
			// Основания нет, если не выбрана конкретная партия, надо заполнить партию по возврату
			ПрихДокПартии = ТаблНоменклатуры.Партия.ПриходныйДокумент;
			Если (ПустоеЗначение(ПрихДокПартии) = 1) 
			или (ПрихДокПартии = ТекДок ) Тогда
				ЗакупочнаяЦена = ?(ТаблПартий.Количество=0,0,Окр(ТаблПартий.СуммаРуб	/ ТаблПартий.Количество,2,1));
				ЗакупочнаяЦена = глПересчет(ЗакупочнаяЦена, глРубли, КурсРубля, ТекДок.Договор.ВалютаВзаиморасчетов, ТекДок.ДатаДок);           							
				ТаблНоменклатуры.Партия	= глЗаполнитьПартию(СпрПартии,  ТаблНоменклатуры.Партия,
				ТекДок.Контрагент,ТекДок.Договор,ТекДок,ЗакупочнаяЦена);
			КонецЕсли;
			ТаблПартий.Партия			= ТаблНоменклатуры.Партия;
			ТаблПартий.ДатаПартии		= ТекДок.ДатаДок;
			
		КонецЦикла;
	КонецЕсли; // есть или нет ДокОснование
	
	Возврат ТаблПартий;
	
КонецФункции // глВыяснитьПартииВозврата()

//******************************************************************************
// глОприходованиеПартийТМЦВозврат(Конт, ТаблНоменклатуры, СписокПараметров, ТаблСписПартий, ТаблСписПартийКом)
//
// Параметры:                                                     
//	Конт 			 - контекст документа
//	ТаблНоменклатуры - таблица номенклатуры
//                     Должна содержать колонки:
//                     1) "Номенклатура"
//                     2) "Количество"
//                     3) "Сумма"     (в валюте взаимор. покупателя)
//                     4) "СуммаРуб"  (сумма возврата в валюте бух учета)
//                     5) "СуммаУпр"  (сумма возврата в валюте упр учета)
//                     6) "СуммаНДС"  (сумма НДС возврата в валюте бух учета)
//                     7) "СуммаНП"   (сумма НП возврата в валюте бух учета)
//                     8) "СтавкаНДС" (возврата)
//                     9) "СтавкаНП"  (возврата)
//                     10)"ВидСтатус" (глСП.Т_Принятый или ВидТМЦ)
//                     11)"Партия"    (в которую возвращаем)
//                     12)"Себестоимость" (в валюте бух. учета)
//	СписокПараметров - доп. параметры проведения
//           (использ. "Фирма", "Склад", "Контрагент", "Договор", "ТекДок", "КодОперации")
//  ТаблСписПартий   - таблица списанных партий (всех). Состав колонок можно посмотреть 
//                     ниже при создании таблицы
//  ТаблСписПартийКом- таблица списанных партий принятого на комиссию товара. Состав колонок тот жет.
//
// Описание:                                   
//  Проведение по регистру "ПартииНаличие" документа возврата партий от покупателя.
//

Процедура глОприходованиеПартийТМЦВозврат(Конт,ТаблНоменклатуры,СписокПараметров,ТаблСписПартий="",ТаблСписПартийКом="") Экспорт
	
	ТаблСписПартий=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартий.НоваяКолонка("Фирма");
	ТаблСписПартий.НоваяКолонка("МОЛ");
	ТаблСписПартий.НоваяКолонка("Номенклатура");
	ТаблСписПартий.НоваяКолонка("СтатусПартии");
	ТаблСписПартий.НоваяКолонка("Партия");
	ТаблСписПартий.НоваяКолонка("ДатаПартии");
	ТаблСписПартий.НоваяКолонка("ЦенаПрод");
	ТаблСписПартий.НоваяКолонка("Количество");
	ТаблСписПартий.НоваяКолонка("СуммаУпр");
	ТаблСписПартий.НоваяКолонка("СуммаРуб");
	ТаблСписПартий.НоваяКолонка("СуммаДокРуб");
	ТаблСписПартий.НоваяКолонка("СуммаБезНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНП");
	ТаблСписПартий.НоваяКолонка("СуммаПрод");
	ТаблСписПартий.НоваяКолонка("СуммаПродРуб");
	ТаблСписПартий.НоваяКолонка("СуммаПродУпр");
	ТаблСписПартий.НоваяКолонка("НДСПрод");
	ТаблСписПартий.НоваяКолонка("НППрод");
	ТаблСписПартий.НоваяКолонка("ДоговорКомитента");
	ТаблСписПартий.НоваяКолонка("СкидкаРуб");
	ТаблСписПартий.НоваяКолонка("НомерСтрокиДокумента");
	
	ТаблСписПартийКом=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартийКом.Загрузить(ТаблСписПартий); // копируем структуру
	
	
	РегПартии			= Конт.Регистр.ПартииНаличие;
	
	Фирма 				= СписокПараметров.Получить("Фирма");
	Склад				= СписокПараметров.Получить("Склад");
	Поставщик			= СписокПараметров.Получить("Контрагент");
	ДоговорПоставщика	= СписокПараметров.Получить("Договор");
	ТекДок				= СписокПараметров.Получить("ТекДок");
	КодОперации			= СписокПараметров.Получить("КодОперации");
	
	МОЛ					= Склад.МОЛ;
	
	МетодРасчетаСебестоимости = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(Конт.ДатаДок);   
	
	ТаблПартий = глВыяснитьПартииВозврата(ТаблНоменклатуры, ТекДок);
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл   
		
		Номенклатура = ТаблНоменклатуры.Номенклатура;
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		ОстПогКоличество	= ТаблНоменклатуры.Количество;
		ОстПогСуммаПрод		= ТаблНоменклатуры.Сумма;
		ОстПогСуммаПродУпр	= ТаблНоменклатуры.СуммаУпр;
		ОстПогСуммаПродРуб	= ТаблНоменклатуры.СуммаРуб;
		ОстПогНДСПрод		= ТаблНоменклатуры.СуммаНДС;
		ОстПогНППрод		= ТаблНоменклатуры.СуммаНП;
		
		ТаблПартий.ВыбратьСтроки();
		Пока (ТаблПартий.ПолучитьСтроку()=1) и (ОстПогКоличество>0) Цикл  
			
			Если (ТаблПартий.Количество<=0) или (ТаблПартий.Номенклатура <> Номенклатура) Тогда
				Продолжить;
			КонецЕсли;                                    
			
			Если ТаблПартий.Количество>=ОстПогКоличество Тогда 
				// остаток партии больше, чем нам надо списать
				КоэффСписания=ОстПогКоличество/ТаблПартий.Количество;
			Иначе
				КоэффСписания=1;
			КонецЕсли;                          
			
			//измерения                         
			РегПартии.Фирма				= Фирма;
			РегПартии.МОЛ				= МОЛ;
			РегПартии.Номенклатура		= ТаблНоменклатуры.Номенклатура;
			РегПартии.СтатусПартии		= ТаблПартий.СтатусПартии; 
			Если Склад.РозничныйСклад = 1  Тогда
				РегПартии.ПродСтоимость = ТаблНоменклатуры.ПродСтоимость;  
			КонецЕсли;
			
			РегПартии.ЦенаПрод = ТаблНоменклатуры.ЦенаПрод;
			
			Если (МетодРасчетаСебестоимости <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			и (МетодРасчетаСебестоимости <> Перечисление.МетодыРасчетаСебестоимости.LIFO)
			и (РегПартии.СтатусПартии <> глСП.Т_Принятый) Тогда 
				РегПартии.Партия  		= ПолучитьПустоеЗначение("Справочник.Партии");
				РегПартии.ДатаПартии	= "";
			Иначе
				РегПартии.Партия			= ТаблПартий.Партия;
				РегПартии.ДатаПартии		= ТекДок.ДатаДок;
			КонецЕсли;
			
			//ресурсы
			РегПартии.Количество		= Окр(ТаблПартий.Количество	*КоэффСписания,5,1);
			РегПартии.СуммаУпр			= Окр(ТаблПартий.СуммаУпр	*КоэффСписания,2,1);
			РегПартии.СуммаРуб			= Окр(ТаблПартий.СуммаРуб	*КоэффСписания,2,1);
			РегПартии.СуммаБезНДС		= Окр(ТаблПартий.СуммаБезНДС*КоэффСписания,2,1);
			
			//реквизиты      
			РегПартии.КодОперации 		= КодОперации;
			
			КоэффПогашения = РегПартии.Количество/ОстПогКоличество;
			
			// корректировка остатка к списанию
			ОстПогКоличество=ОстПогКоличество-РегПартии.Количество;  
			
			ТаблПартий.Количество	= ТаблПартий.Количество - РегПартии.Количество;
			ТаблПартий.СуммаУпр		= ТаблПартий.СуммаУпр	- РегПартии.СуммаУпр;
			ТаблПартий.СуммаРуб		= ТаблПартий.СуммаРуб	- РегПартии.СуммаРуб;
			ТаблПартий.СуммаБезНДС	= ТаблПартий.СуммаБезНДС- РегПартии.СуммаБезНДС;			
			
			СписСуммаПрод	    = Окр(ОстПогСуммаПрод	*КоэффПогашения,2,1);
			СписСуммаПродУпр    = Окр(ОстПогСуммаПродУпр*КоэффПогашения,2,1);
			СписСуммаПродРуб    = Окр(ОстПогСуммаПродРуб*КоэффПогашения,2,1);
			СписНДСПрод		    = Окр(ОстПогНДСПрод		*КоэффПогашения,2,1);
			СписНППрод	 	    = Окр(ОстПогНППрод		*КоэффПогашения,2,1);
			
			ОстПогСуммаПрод		= ОстПогСуммаПрод		- СписСуммаПрод;
			ОстПогСуммаПродУпр 	= ОстПогСуммаПродУпр	- СписСуммаПродУпр;
			ОстПогСуммаПродРуб 	= ОстПогСуммаПродРуб	- СписСуммаПродРуб;
			ОстПогНДСПрод		= ОстПогНДСПрод 		- СписНДСПрод;
			ОстПогНППрод		= ОстПогНППрод	 		- СписНППрод;
			
			СтавкаНДС		= ТаблНоменклатуры.СтавкаНДС;
			СтавкаНП		= ТаблНоменклатуры.СтавкаНП;
			
			Если РегПартии.Вид() = "ПартииНаличие" Тогда
				РегПартии.ПродСтоимость	= СписСуммаПродРуб;
				
				// Выручку запишем как сумму продажи без налогов
				РегПартии.Выручка		= СписСуммаПродРуб - СписНДСПрод - СписНППрод;
				
			Иначе
				РегПартии.ПродСтоимость = СписСуммаПрод;				
			КонецЕсли;
			
			ЗапомнитьСписаннуюПартию(РегПартии,ТаблСписПартий,СписСуммаПрод,СписСуммаПродУпр,СписСуммаПродРуб,СписНДСПрод,СписНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента);
			
			Если РегПартии.СтатусПартии=глСП.Т_Принятый Тогда
				ЗапомнитьСписаннуюПартию(РегПартии,ТаблСписПартийКом,СписСуммаПрод,СписСуммаПродУпр,СписСуммаПродРуб,СписНДСПрод,СписНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента);
			КонецЕсли;
			
			РегПартии.ПривязыватьСтроку(ТаблНоменклатуры.НомерСтрокиДокумента);
			
			РегПартии.ДвижениеПриходВыполнить();	
		КонецЦикла;   // по таблице партий
		
		Если ОстПогКоличество>0 Тогда
			// возврат товара больше, чем было отпущено
			Если (Конт.ДокОснование.Вид() <> "РасходнаяНакладнаяРозницаБезнал") И (Конт.ДокОснование.Вид() <> "РасходнаяНакладнаяРозница") Тогда
				Если (Найти(Конт.ДокОснование.Комментарий,"Для ввода остатков") = 0) Тогда
					глНеПроводить(Конт,"на возврат указано больше ТМЦ "+СокрП(ТаблНоменклатуры.Номенклатура)+" чем было продано по Документу основания: "+Конт.ДокОснование+" !");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // глОприходованиеПартийТМЦВозврат()                                    

//******************************************************************************
// глФирмаДляОстатковТМЦ(Фирма)
//
// Параметры: 
//  Фирма - элемент справочника Фирмы
//
// Возвращаемое значение:
//  Список значений, содержащий элементы справочника Фирмы, или
//  один элемент справочника Фирмы
//
// Описание:
//  Подготавливает список фирм, в зависимости от настройки КонтрольОтрицательныхОстатков
//
Функция глФирмаДляОстатковТМЦ(Фирма) Экспорт
	
	Если Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоУпрАналитике  Тогда
		Объект     = Фирма.УпрАналитика;
		ИмяОбъекта = "УпрАналитика"; 
	ИначеЕсли Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоЮрЛицу   Тогда
		Объект     = Фирма.ЮрЛицо;
		ИмяОбъекта = "ЮрЛицо"; 
	ИначеЕсли Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоКомпании Тогда  
		СпрФирм  = СоздатьОбъект("Справочник.Фирмы");
		СписФирм = СоздатьОбъект("СписокЗначений"); 
		СпрФирм.ВыбратьЭлементы();
		Пока СпрФирм.ПолучитьЭлемент() = 1 Цикл
			СписФирм.ДобавитьЗначение(СпрФирм.ТекущийЭлемент());
		КонецЦикла;
		Возврат СписФирм;
	Иначе
		Возврат Фирма;
	КонецЕсли;
	
	СпрФирм  = СоздатьОбъект("Справочник.Фирмы");
	СписФирм = СоздатьОбъект("СписокЗначений"); 
	СпрФирм.ВыбратьЭлементы();
	Пока СпрФирм.ПолучитьЭлемент() = 1 Цикл
		Если СпрФирм.ПолучитьАтрибут(ИмяОбъекта)= Объект Тогда
			СписФирм.ДобавитьЗначение(СпрФирм.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписФирм;
	
КонецФункции // глФирмаДляОстатковТМЦ()

//******************************************************************************
// глФильтрПартийТМЦ(Конт, ТаблНоменклатуры, СписокПараметров, ВремПартии)
//
// Параметры:
//  Конт             - Контекст проводимого документа
//  ТаблНоменклатуры - Таблица номенклатуры. Должна содержать колонку "Номенклатура"
//  СписокПараметров - список параметров (использ. "Фирма", "Склад", "Договор","КодОперации")
//  ВремПартии       - регистр (Регистр.ПартииНаличие или Регистр.ПартииОтданные)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтра на регистр партий перед проведением документов списания.
//  В случае неактуальных итогов для регистра устанавливается флаг временного расчета.
//
Процедура глФильтрПартийТМЦ(Конт, ТаблНоменклатуры, СписокПараметров, ВремПартии) Экспорт
	
	РегистрУчета 	    = ВремПартии.Вид();
	ФирмаДляОстатковТМЦ = СписокПараметров.Получить("ФирмаДляОстатковТМЦ");
	Склад			    = СписокПараметров.Получить("Склад");
	Контрагент		    = СписокПараметров.Получить("Контрагент");
	Договор			    = СписокПараметров.Получить("Договор");
	КодОперации		    = СписокПараметров.Получить("КодОперации");
	
	Если РегистрУчета="ПартииНаличие" Тогда
		МОЛ			= Склад.МОЛ;
	КонецЕсли;
	
	// подготовка фильтров
	СписокТМЦ		= СоздатьОбъект("СписокЗначений");
	ТаблНоменклатуры.Выгрузить(СписокТМЦ,,,"Номенклатура");
	
	СписокСтатусов	= СоздатьОбъект("СписокЗначений"); 
	Если КодОперации = глКО.ВозвратКомитенту Тогда
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Принятый);
	ИначеЕсли   (КодОперации = глКО.ВозвратПоставщику) 
	или (КодОперации = глКО.ВозвратПоставщикуИзРозницы) Тогда     
		Если КодОперации = глКО.ВозвратПоставщику Тогда
			СписокСтатусов.ДобавитьЗначение(глСП.Т_Купленный);
		ИначеЕсли КодОперации = глКО.ВозвратПоставщикуИзРозницы Тогда
			СписокСтатусов.ДобавитьЗначение(глСП.Т_ВРознице);
		КонецЕсли;
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Запчасть);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Инвентарь);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Полуфабрикат);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Прочее);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Стройматериал);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Сырье);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Топливо);
	ИначеЕсли   (КодОперации = глКО.ВозвратКомитенту)
	или (КодОперации = глКО.ВозвратКомитентуИзРозницы) Тогда
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Принятый);
	ИначеЕсли КодОперации = глКО.Продажа Тогда
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Купленный);
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Принятый);
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Запчасть);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Инвентарь);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Полуфабрикат);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Прочее);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Стройматериал);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Сырье);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Топливо);
		СписокСтатусов.ДобавитьЗначение(глСП.Продукция);  
	ИначеЕсли (КодОперации = глКО.РозничнаяПродажа) 
	или (КодОперации = глКО.РозничнаяПродажаЕНВД) 
	или (КодОперации = глКО.ВозвратИзРозницы) 
	или (КодОперации = глКО.Списание) 
	или (КодОперации = глКО.Перемещение) 
	или (КодОперации = глКО.ПередачаВРозницу) Тогда
		Если ПустоеЗначение(Склад) = 0 Тогда
			Если Склад.РозничныйСклад = 1 Тогда
				СписокСтатусов.ДобавитьЗначение(глСП.Т_ВРознице);
			Иначе
				СписокСтатусов.ДобавитьЗначение(глСП.Т_Купленный);
			КонецЕсли;
		Иначе
			СписокСтатусов.ДобавитьЗначение(глСП.Т_Купленный);
		КонецЕсли;
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Принятый);
		СписокСтатусов.ДобавитьЗначение(глСП.Т_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Запчасть);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Инвентарь);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Полуфабрикат);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Прочее);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Стройматериал);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Сырье);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Тара);
		СписокСтатусов.ДобавитьЗначение(глСП.М_Топливо);
		СписокСтатусов.ДобавитьЗначение(глСП.Продукция);  
	КонецЕсли;
	
	// установка фильтров
	ВремПартии.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ,   2); 
	ВремПартии.УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,		2);   
	ВремПартии.УстановитьЗначениеФильтра("СтатусПартии",СписокСтатусов,	2);
	Если РегистрУчета="ПартииОтданные" Тогда
		ВремПартии.УстановитьЗначениеФильтра("Договор",Договор,1);
	ИначеЕсли РегистрУчета="ПартииНаличие" Тогда
		ВремПартии.УстановитьЗначениеФильтра("МОЛ",МОЛ,1);
	КонецЕсли;                        
	
	Если Конт.ИтогиАктуальны()=0 Тогда
		ВремПартии.ВременныйРасчет(1);
	КонецЕсли;                        
	
КонецПроцедуры // глФильтрПартийТМЦ()

//******************************************************************************
// ПодготовитьТаблИтогов(ТаблИтогов, Фирма)
//
// Параметры: 
//  ТаблИтогов - таблица значений итогов регистра партий, которую и надо преобразовать.
//  Фирма      - элемент справочника Фирмы, фирма, указанная в документе
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Преобразовывает для списания таблицу значений итогов регистра партий в зависимости
//  от настройки контроля остатков
//
Процедура ПодготовитьТаблИтогов(ТаблИтогов, Фирма)
	
	Если (Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме) 
	или (Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать) Тогда
		Возврат; // при такой настройке считаем ТЗ уже готовой к списанию
	КонецЕсли;
	
	// В цикле по ТЗ заменим значения всех фирм, кроме переданной, на пустое значение,
	// а для переданной, пустое значение значение проставим для отрицательных остатков
	ПустаяФирма = ПолучитьПустоеЗначение("Справочник.Фирмы");
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		Если ТаблИтогов.Фирма <> Фирма Тогда
			ТаблИтогов.Фирма = ПустаяФирма;
		ИначеЕсли ТаблИтогов.Количество < 0 Тогда
			ТаблИтогов.Фирма = ПустаяФирма;
		КонецЕсли;
	КонецЦикла;
	
	// Свернем таблицу по фирме и партии
	ТаблИтогов.Свернуть("Фирма,Партия,СтатусПартии,ДатаПартии,Номенклатура,МОЛ,Договор,ДокументПередачи,ДокПартии,ЦенаПрод", 
	"Количество,СуммаУпр,СуммаРуб,СуммаБезНДС,ПродСтоимость");
	
	// В цикле по ТЗ заменим для всех отрицательных остатков значения пустых фирм, на переданное значение
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		Если ТаблИтогов.Количество < 0 Тогда
			ТаблИтогов.Фирма = Фирма;
		КонецЕсли;
	КонецЦикла;
	
	// Свернем таблицу по фирме и партии
	ТаблИтогов.Свернуть("Фирма,Партия,СтатусПартии,ДатаПартии,Номенклатура,МОЛ,Договор,ДокументПередачи,ДокПартии,ЦенаПрод", 
	"Количество,СуммаУпр,СуммаРуб,СуммаБезНДС,ПродСтоимость");
	
КонецПроцедуры // ПодготовитьТаблИтогов()



//******************************************************************************
// глДвижениеПартийУслуг(Конт,ТаблицаУслуг, СписокПараметров) Экспорт
//
// Параметры: 
//  Конт             	- контекст проводимого документа
//  ТаблицаУслуг	  	- таблица номенклатуры, должна содержать колонки:
//                     1) "Номенклатура"
//                     4) "ПродСтоимость"  (сумма продажи в валюте бух учета)
//                     6) "СуммаНДС"  (сумма НДС продажи в валюте бух учета)
//                     7) "СуммаНП"   (сумма НП  продажи в валюте бух учета)
//  СписокПараметров  	- список параметров проведения (использ. "Фирма", "КодОперации")
//	Возвр				- 0 - реализация, 1 - возврат.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет движение регистру "ПартииНаличие" при продаже услуг, в котром заполнены только реквизиты
// регистра. Это движения необходимо для ведения налогового учета.
//

Процедура глДвижениеПартийУслуг(Конт, ТаблицаУслуг, СписокПараметров, Возвр = 0) Экспорт
	
	Фирма		    = СписокПараметров.Получить("Фирма");
	КодОперации		= СписокПараметров.Получить("КодОперации"); 
	
	РегПартии = Конт.Регистр.ПартииНаличие;
	
	ТаблицаУслуг.ВыбратьСтроки();
	Пока ТаблицаУслуг.ПолучитьСтроку() = 1 Цикл
		РегПартии.Фирма			= Фирма; 	
		РегПартии.Номенклатура	= ТаблицаУслуг.Номенклатура;
		РегПартии.МОЛ			= ПолучитьПустоеЗначение("Справочник.ФизЛица");
		РегПартии.СтатусПартии	= глСП.Услуга;
		РегПартии.Партия		= ПолучитьПустоеЗначение("Справочник.Партии");
		РегПартии.ДатаПартии	= ПолучитьПустоеЗначение("Дата");
		РегПартии.ЦенаПрод		= 0;
		РегПартии.Количество	= 0;
		РегПартии.СуммаУпр		= 0;
		РегПартии.СуммаРуб		= 0;
		РегПартии.СуммаБезНДС 	= 0;
		РегПартии.КодОперации	= КодОперации;
		РегПартии.ПродСтоимость = ТаблицаУслуг.ПродСтоимость;
		РегПартии.Выручка 		= РегПартии.ПродСтоимость - ТаблицаУслуг.СуммаНДС - ТаблицаУслуг.СуммаНП;
		
		РегПартии.ПривязыватьСтроку(ТаблицаУслуг.НомерСтрокиДокумента);
		
		Если Возвр = 1 Тогда
			РегПартии.ДвижениеПриходВыполнить();
		Иначе
			РегПартии.ДвижениеРасходВыполнить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // глДвижениеПартийУслуг()

//******************************************************************************
// глСписаниеПартийТМЦ(Конт,ТаблНоменклатуры,СписокПараметров,ВремПартии,ТаблСписПартий,ТаблСписПартийКом)
//
// Параметры: 
//  Конт              - контекст проводимого документа
//  ТаблНоменклатуры  - таблица номенклатуры, должна содержать колонки:
//                     1) "Номенклатура"
//                     2) "Количество"
//                     3) "Сумма"     (в валюте покупателя) м.б. = 0 если это не реализация
//                     4) "СуммаРуб"  (сумма продажи в валюте бух учета)
//                     5) "СуммаУпр"  (сумма продажи в валюте упр учета)
//                     6) "СуммаНДС"  (сумма НДС продажи в валюте бух учета)
//                     7) "СуммаНП"   (сумма НП  продажи в валюте бух учета)
//                     8) "СтавкаНДС" (продажи)
//                     9) "СтавкаНП"  (продажи)
//                     10)"Партия"    (опционально, если выбрана партия, которую списываем)
//  СписокПараметров  - список параметров проведения (использ. "Фирма", "Склад", "Договор", "КодОперации")
//  ВремПартии        - Регистр.ПартииНаличие или Регистр.ПартииОтданные
//  ТаблСписПартий    - таблица списанных партий (всех). Состав колонок можно посмотреть 
//                         ниже при создании таблицы
//  ТаблСписПартийКом - таблица списанных партий принятого на комиссию товара. Состав колонок тот жет.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит списание партий ТМЦ при проведении документов по регистру "ПартииНаличие"
//  и "ПартииОтданные".
//
Процедура глСписаниеПартийТМЦ(Конт,ТаблНоменклатуры,СписокПараметров,ВремПартии,ТаблСписПартий="",ТаблСписПартийКом="") Экспорт
	
	Перем ТаблИтогов; // ТЗ, в которую выгружаем итоги       
	Перем ОстПогКоличество, ОстПогСумма, ОстПогСуммаПродУпр, ОстПогСуммаПродРуб, ОстПогСуммаНДС, ОстПогСуммаНП;
	
	ТаблСписПартий=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартий.НоваяКолонка("Фирма");
	ТаблСписПартий.НоваяКолонка("МОЛ");
	ТаблСписПартий.НоваяКолонка("Номенклатура");
	ТаблСписПартий.НоваяКолонка("СтатусПартии");
	ТаблСписПартий.НоваяКолонка("Партия");
	ТаблСписПартий.НоваяКолонка("ДатаПартии");
	ТаблСписПартий.НоваяКолонка("ЦенаПрод");
	ТаблСписПартий.НоваяКолонка("Количество");
	ТаблСписПартий.НоваяКолонка("СуммаУпр");
	ТаблСписПартий.НоваяКолонка("СуммаРуб");
	ТаблСписПартий.НоваяКолонка("СуммаБезНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНП");
	ТаблСписПартий.НоваяКолонка("СуммаПрод");
	ТаблСписПартий.НоваяКолонка("СуммаПродРуб");
	ТаблСписПартий.НоваяКолонка("СуммаПродУпр");
	ТаблСписПартий.НоваяКолонка("СуммаДокРуб");
	ТаблСписПартий.НоваяКолонка("НДСПрод");
	ТаблСписПартий.НоваяКолонка("НППрод");
	ТаблСписПартий.НоваяКолонка("ДоговорКомитента");
	ТаблСписПартий.НоваяКолонка("НомерСтрокиДокумента");
	ТаблСписПартий.НоваяКолонка("СкидкаРуб");
	
	ТаблСписПартийКом=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартийКом.Загрузить(ТаблСписПартий); // копируем структуру
	
	РегистрУчета = ВремПартии.Вид();      
	
	Если РегистрУчета="ПартииНаличие" Тогда
		РегПартии	= Конт.Регистр.ПартииНаличие;
	Иначе    
		РегПартии	= Конт.Регистр.ПартииОтданные;
	КонецЕсли;
	
	Фирма		    = СписокПараметров.Получить("Фирма");
	Склад			= СписокПараметров.Получить("Склад");
	Договор			= СписокПараметров.Получить("Договор");
	КодОперации		= СписокПараметров.Получить("КодОперации"); 
	
	Если РегистрУчета="ПартииНаличие" Тогда
		МОЛ			= Склад.МОЛ;
	КонецЕсли;
	
	МетодРасчетаСебестоимости = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(Конт.ДатаДок);
	Если ПустоеЗначение(МетодРасчетаСебестоимости)=1 Тогда
		глНеПроводить(Конт,"Не определен метод расчета себестоимости для юр. лица """+Фирма.ЮрЛицо.Наименование+"""");
		Возврат;
	КонецЕсли;
	
	Если МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.FIFO Тогда
		ЗнакСортировки="+";
	Иначе     
		ЗнакСортировки="-";
	КонецЕсли;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл
		
		Номенклатура=ТаблНоменклатуры.Номенклатура;
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		ОстПогКоличество	= ТаблНоменклатуры.Количество;
		ОстПогСуммаПрод		= ТаблНоменклатуры.Сумма;
		ОстПогСуммаПродУпр	= ТаблНоменклатуры.СуммаУпр;
		ОстПогСуммаПродРуб	= ТаблНоменклатуры.ПродСтоимость;   
		ОстПогСуммаДокРуб	= ТаблНоменклатуры.СуммаРуб;
		ОстПогСкидкаРуб		= ТаблНоменклатуры.СкидкаРуб;   
		ОстПогНДСПрод		= ТаблНоменклатуры.СуммаНДС;
		ОстПогНППрод		= ТаблНоменклатуры.СуммаНП;
		
		ВремПартии.УстановитьЗначениеФильтра("Номенклатура",Номенклатура,1);
		Если ТаблНоменклатуры.Партия.Выбран()=1 Тогда
			// выбрана конкретная партия
			ВремПартии.УстановитьЗначениеФильтра("Партия",ТаблНоменклатуры.Партия,1);
		Иначе // снимем фильтр по партии
			ВремПартии.УстановитьЗначениеФильтра("Партия",,0);
		КонецЕсли;                  
		         
		
		Если РегистрУчета = "ПартииНаличие" Тогда
			Если Конт.ДатаДок < '08.12.2016' Тогда
				Цена = ТаблНоменклатуры.ЦенаПрод;
				ВремПартии.УстановитьЗначениеФильтра("ЦенаПрод", Цена);
			КонецЕсли;
		КонецЕсли;    
		
		
		ВремПартии.ВыгрузитьИтоги(ТаблИтогов,1,1);     
		
		ТаблИтогов.НоваяКолонка("ДокПартии", "Документ");
		ТаблИтогов.НоваяКолонка("КодПартии", "Строка");
		ТаблИтогов.НоваяКолонка("ПриоритетПартии", "Число");
		ТаблИтогов.ВыбратьСтроки();
		Пока ТаблИтогов.ПолучитьСтроку() = 1  Цикл 
			ТаблИтогов.КодПартии = ТаблИтогов.Партия.Код;
			ТаблИтогов.ДокПартии = ТаблИтогов.Партия.ПриходныйДокумент; 
			ТаблИтогов.ПриоритетПартии = 0;    
			Если Конт.ДатаДок >= Дата("01.07.2017") Тогда
				Если (Конт.Проект.Выбран() = 1) Тогда
					Если (ПустоеЗначение(ТаблИтогов.ДокПартии) = 0) Тогда
						Если ПустоеЗначение(ТаблИтогов.ДокПартии.Проект) = 0 Тогда
							Если Конт.Проект.ФирмаОстатков = ТаблИтогов.ДокПартии.Проект.ФирмаОстатков Тогда
								ТаблИтогов.ПриоритетПартии = 1;	
							КонецЕсли;	
						КонецЕсли; 
					КонецЕсли;
				Иначе
					Если (Конт.Вид() = "РасходнаяНакладнаяРозница") или (Конт.ДатаДок >= Дата("01.11.2017")) Тогда
						Если (ПустоеЗначение(ТаблИтогов.ДокПартии) = 0) Тогда
							Если ПустоеЗначение(ТаблИтогов.ДокПартии.Проект) = 0 Тогда
								Если СокрЛП(ТаблИтогов.ДокПартии.Проект.ФирмаОстатков) = "Эксперт" Тогда
									ТаблИтогов.ПриоритетПартии = 1;	
								КонецЕсли;	
							КонецЕсли; 
						КонецЕсли;	
					КонецЕсли;	
				КонецЕсли;	 
			КонецЕсли;
		КонецЦикла;
		
		// Подготовим таблицу итогов взависимости от настройки контроля остатков
		ПодготовитьТаблИтогов(ТаблИтогов, Фирма);
		
		Если РегистрУчета="ПартииНаличие" Тогда
			ТаблИтогов.Сортировать("-Фирма,-ПриоритетПартии,"+ЗнакСортировки+"ДатаПартии,"+ЗнакСортировки+"ДокПартии,"+ЗнакСортировки+"КодПартии",1);
		КонецЕсли;
		
		ТаблИтогов.ВыбратьСтроки();
		Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ОстПогКоличество>0) Цикл
			
			Если ТаблИтогов.Количество<=0 Тогда
				Продолжить;
			КонецЕсли;                                    
			
			Если КодОперации = глКО.ВозвратКомитенту Тогда
				
				// возвращаем товары комитенту - только его товары!
				Если ТаблИтогов.Партия.ДоговорПоставщика<>Договор Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;              
			
			Если ТаблИтогов.Количество>=ОстПогКоличество Тогда 
				
				// остаток партии больше, чем нам надо списать
				КоэффСписания=ОстПогКоличество/ТаблИтогов.Количество;
				
			Иначе
				КоэффСписания=1;
			КонецЕсли;
			
			//измерения
			РегПартии.Фирма				= Фирма;
			
			РегПартии.Номенклатура		= ТаблИтогов.Номенклатура;
			РегПартии.СтатусПартии		= ТаблИтогов.СтатусПартии;
			РегПартии.Партия			= ТаблИтогов.Партия;
			Если РегистрУчета="ПартииНаличие" Тогда
				РегПартии.ДатаПартии		= ТаблИтогов.ДатаПартии;
				РегПартии.МОЛ				= ТаблИтогов.МОЛ;       
				РегПартии.ЦенаПрод			= ТаблИтогов.ЦенаПрод;
			Иначе
				РегПартии.Договор			= ТаблИтогов.Договор;
				РегПартии.ДокументПередачи	= ТаблИтогов.ДокументПередачи;
			КонецЕсли;     
			
			//ресурсы
			РегПартии.Количество		= Окр(ТаблИтогов.Количество	*КоэффСписания,5,1);
			РегПартии.СуммаУпр			= Окр(ТаблИтогов.СуммаУпр	*КоэффСписания,2,1);
			РегПартии.СуммаРуб			= Окр(ТаблИтогов.СуммаРуб	*КоэффСписания,2,1);
			РегПартии.СуммаБезНДС		= Окр(ТаблИтогов.СуммаБезНДС*КоэффСписания,2,1);
			Если РегистрУчета="ПартииОтданные" Тогда 
				РегПартии.ПродСтоимость	= Окр(ТаблИтогов.ПродСтоимость*КоэффСписания,2,1);    
			КонецЕсли;
			
			//реквизиты
			РегПартии.КодОперации 		= КодОперации;
			
			КоэффПогашения = РегПартии.Количество/ОстПогКоличество;
			
			// корректировка остатка продажной стоимости к списанию
			ОстПогКоличество=ОстПогКоличество-РегПартии.Количество;
			
			СписСуммаПрод	= Окр(ОстПогСуммаПрод	*КоэффПогашения,2,1);
			СписСуммаПродУпр= Окр(ОстПогСуммаПродУпр*КоэффПогашения,2,1);
			СписСуммаПродРуб= Окр(ОстПогСуммаПродРуб*КоэффПогашения,2,1);
			СписСуммаДокРуб	= Окр(ОстПогСуммаДокРуб*КоэффПогашения,2,1);
			СписСкидкаРуб	= Окр(ОстПогСкидкаРуб 	*КоэффПогашения,2,1);
			СписНДСПрод		= Окр(ОстПогНДСПрод		*КоэффПогашения,2,1);
			СписНППрод	 	= Окр(ОстПогНППрод		*КоэффПогашения,2,1);
			
			ОстПогСуммаПрод		= ОстПогСуммаПрод	- СписСуммаПрод;
			ОстПогСуммаПродУпр 	= ОстПогСуммаПродУпр- СписСуммаПродУпр;
			ОстПогСуммаПродРуб 	= ОстПогСуммаПродРуб- СписСуммаПродРуб;
			ОстПогСуммаДокРуб 	= ОстПогСуммаДокРуб	- СписСуммаДокРуб;
			ОстПогСкидкаРуб 	= ОстПогСкидкаРуб	- СписСкидкаРуб;
			ОстПогНДСПрод		= ОстПогНДСПрод 	- СписНДСПрод;
			ОстПогНППрод		= ОстПогНППрод	 	- СписНППрод;
			
			СтавкаНДС		= ТаблНоменклатуры.СтавкаНДС;
			СтавкаНП		= ТаблНоменклатуры.СтавкаНП;
			
			Если РегистрУчета = "ПартииНаличие" Тогда   
				РегПартии.ПродСтоимость	= СписСуммаПродРуб;    
			КонецЕсли;
			
			Если (КодОперации <> глКО.Перемещение) и (КодОперации <> глКО.ПередачаВРозницу) и (КодОперации <> глКО.ВозвратИзРозницы)
			и (КодОперации <> глКО.ВозвратПоставщикуИзРозницы) Тогда
				РегПартии.Выручка	= Окр(РегПартии.ПродСтоимость - СписНДСПрод - СписНППрод, 2, 1);
				
			ИначеЕсли КодОперации = глКО.ВозвратПоставщикуИзРозницы Тогда
				РегПартии.Выручка	= Окр(СписСуммаДокРуб - СписНДСПрод - СписНППрод, 2, 1);
				
			Иначе
				РегПартии.Выручка	= 0;
			КонецЕсли;
			
			ЗапомнитьСписаннуюПартию(РегПартии,ТаблСписПартий,СписСуммаПрод,СписСуммаПродУпр,СписСуммаПродРуб,СписНДСПрод,СписНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента, СписСкидкаРуб, СписСуммаДокРуб);
			Если РегПартии.СтатусПартии=глСП.Т_Принятый Тогда
				ЗапомнитьСписаннуюПартию(РегПартии,ТаблСписПартийКом,СписСуммаПрод,СписСуммаПродУпр,СписСуммаПродРуб,СписНДСПрод,СписНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента, СписСкидкаРуб, СписСуммаДокРуб);
			КонецЕсли;
			
			РегПартии.ПривязыватьСтроку(ТаблНоменклатуры.НомерСтрокиДокумента);
			
			РегПартии.ДвижениеРасходВыполнить();
		КонецЦикла; // по строкам ТаблИтогов
		
		
		Если ОстПогКоличество>0 Тогда
			// значит мы расходуем Номенклатуру
			// а Партии, которые надо погашать исчерпаны,
			// значит надо выдать сообщение об этом инциденте
			// и записать текущий документ как Партию с отриц. знаком
			Если ПустоеЗначение(ТаблНоменклатуры.Партия)=1 Тогда
				глСообщениеПроведения ("При проведении партий ТМЦ по "+Конт.ТекущийДокумент()+" от "+Конт.ДатаДок+" по ТМЦ "
				+СокрЛП(Номенклатура)+" не распределилось по партиям "+ОстПогКоличество+" "+Номенклатура.БазоваяЕдиница, Конт.ТекущийДокумент(),,,1);
			Иначе 
				глСообщениеПроведения("По указанной к списанию партии ТМЦ """ + ТаблНоменклатуры.Партия.ПриходныйДокумент +
				""" по ТМЦ " +СокрЛП(Номенклатура) + 
				?(ПустоеЗначение(ТаблНоменклатуры.Партия.Свойство) = 1,"", 
				", (" +  
				СокрЛП(ТаблНоменклатуры.Партия.Свойство.Владелец) +  ": "  +
				СокрЛП(ТаблНоменклатуры.Партия.Свойство) +")"
				) +  
				" не распределилось  "+ОстПогКоличество+" "+Номенклатура.БазоваяЕдиница, Конт.ТекущийДокумент(),,,1);
			КонецЕсли;
			
			//измерения
			РегПартии.Фирма				= Фирма;
			РегПартии.Номенклатура		= Номенклатура;
			РегПартии.СтатусПартии		= глПолучитьСтатусПартииПрихода(Перечисление.ВидыТМЦ.Товар,Номенклатура,КодОперации, Склад);
			РегПартии.Партия			= ПолучитьПустоеЗначение("Справочник.Партии");
			Если РегистрУчета="ПартииНаличие" Тогда
				РегПартии.ДатаПартии	= "";
				РегПартии.МОЛ			= МОЛ;                    
				РегПартии.ЦенаПрод	= ТаблНоменклатуры.ЦенаПрод;
			Иначе
				РегПартии.Договор		= Договор;
				РегПартии.ДокументПередачи = "";
			КонецЕсли;
			
			//ресурсы
			РегПартии.Количество		= ОстПогКоличество;
			РегПартии.СуммаУпр			= 0;
			РегПартии.СуммаРуб			= 0;
			РегПартии.СуммаБезНДС		= 0;
			//т.к. уже не осталось у нас партий, то тупо хапаем всё что осталось
			РегПартии.ПродСтоимость		= ОстПогСуммаПрод;
			РегПартии.Выручка			= ОстПогСуммаПрод - ОстПогНДСПрод;
			Если РегистрУчета="ПартииОтданные" Тогда
				РегПартии.ПродСтоимость	= 0;
			КонецЕсли;
			
			//реквизиты   
			РегПартии.КодОперации 		= КодОперации;
			
			СтавкаНДС		= ТаблНоменклатуры.СтавкаНДС;
			СтавкаНП		= ТаблНоменклатуры.СтавкаНП;
			
			ЗапомнитьСписаннуюПартию       (РегПартии,ТаблСписПартий,ОстПогСуммаПрод,ОстПогСуммаПродУпр,ОстПогСуммаПродРуб,ОстПогНДСПрод,ОстПогНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента, ОстПогСкидкаРуб, ОстПогСуммаДокРуб);
			Если РегПартии.СтатусПартии=глСП.Т_Принятый Тогда
				ЗапомнитьСписаннуюПартию(РегПартии,ТаблСписПартийКом,ОстПогСуммаПрод,ОстПогСуммаПродУпр,ОстПогСуммаПродРуб,ОстПогНДСПрод,ОстПогНППрод,СтавкаНДС,СтавкаНП, ТаблНоменклатуры.НомерСтрокиДокумента, ОстПогСкидкаРуб, ОстПогСуммаДокРуб);
			КонецЕсли;          
			
			// все, погасили всю строку документа
			ОстПогКоличество= 0;
			ОстПогСуммаПрод	= 0;         
			ОстПогСуммаПродУпр	= 0;         
			ОстПогСуммаПродРуб	= 0;         
			ОстПогСкидкаРуб	= 0;         
			ОстПогНДСПрод	= 0;
			ОстПогНППрод	= 0;
			
			РегПартии.ПривязыватьСтроку(ТаблНоменклатуры.НомерСтрокиДокумента);
			
			РегПартии.ДвижениеРасходВыполнить();
		КонецЕсли;
		
	КонецЦикла; // по строкам ТаблНоменклатуры
	
	глРасходОстатковТМЦПоФирмам(Конт,ТаблСписПартий,СписокПараметров);
	
КонецПроцедуры // глСписаниеПартийТМЦ()                                                     

//******************************************************************************
// глПолучитьСписокВсехНП()
//
// Параметры: 
//   Нет
//
// Возвращаемое значение:
//  Список значений, содержащий все ставки НП.
//
// Описание:
//  Выгружает справочник ставок НП в список значений. Используется при наложении
//  фильтров.
//
Функция глПолучитьСписокВсехНП()
	
	Список = СоздатьОбъект("СписокЗначений");
	СпрНП  = СоздатьОбъект("Справочник.СтавкиНП");
	СпрНП.ВыбратьЭлементы();
	Пока СпрНП.ПолучитьЭлемент()=1 Цикл
		Список.ДобавитьЗначение(СпрНП.ТекущийЭлемент());
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции // глПолучитьСписокВсехНП()

//******************************************************************************
// глФильтрДолгов(Конт, Договор, СписокПараметров, ВремВзаим)
//
// Параметры:
//  Конт             - контекст проводимого документа
//  Договор          - договор с контрагентом
//  СписокПараметров - список параметров проведения (Использ. "Фирма")
//  ВремВзаим        - Регистр.Покупатели или Регистр.Поставщики
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтра на регистр взаиморасчетов перед проведением и временным расчетом.
//  Если итоги не актуальны, выставляется флаг временного расчета.
//
Процедура глФильтрДолгов(Конт, Договор, СписокПараметров, ВремВзаим) Экспорт
	
	Фирма  			= СписокПараметров.Получить("Фирма");
	
	ВремВзаим.УстановитьЗначениеФильтра("Фирма",		Фирма,	1); 
	ВремВзаим.УстановитьЗначениеФильтра("Договор",		Договор,1);
	
	Если Конт.ИтогиАктуальны()=0 Тогда
		ВремВзаим.ВременныйРасчет();
	КонецЕсли;                      
	
КонецПроцедуры // глФильтрДолгов()       

//******************************************************************************
// БезНП()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  СтавкаНП (Справочник.СтавкиНП).
//
// Описание:
//  Получение элемента справочника СтавкиНП, соответствующего нулевой ставке
//
Функция БезНП()
	Перем Рез;
	
	СпрНП=СоздатьОбъект("Справочник.СтавкиНП");
	СпрНП.ВыбратьЭлементы();
	
	Пока СпрНП.ПолучитьЭлемент() = 1 Цикл
		Если СпрНП.Ставка = 0 Тогда
			Рез = СпрНП.ТекущийЭлемент();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(Рез) = 1 Тогда
		// нулевая ставка не найдена;
		СпрНП.Новый();
		СпрНП.Наименование	= "Без налога (НП)";
		СпрНП.Ставка		= 0;
		СпрНП.Записать();
		Рез	= СпрНП.ТекущийЭлемент();
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // БезНП()

//******************************************************************************
// СтавкаНПОтгрузкиПокупателю(СтавкаНП, ОблагаетсяНП)
//
// Параметры:
//  СтавкаНП     - выбранная в документе ставка НП
//  ОблагаетсяНП - установленный в документе флаг учета НП
//
// Возвращаемое значение:
//  СтавкаНП  (Справочник.СтавкиНП)
//
// Описание:
//  Возвращает значение ставкиНП для занесения в регистр, в зависимости от ставки НП,
//  выбранной в документе и режима учета НП в дкументе. Если в документе не установлен
//  флаг учета НП, то долг будет записан по "пустой" ставке НП.
//
Функция СтавкаНПОтгрузкиПокупателю(СтавкаНП, ОблагаетсяНП)
	
	Если ОблагаетсяНП = 1 Тогда
		СтавкаНП		= ?(ПустоеЗначение(СтавкаНП) = 1, БезНП(), СтавкаНП);
	Иначе     
		СтавкаНП		= ПолучитьПустоеЗначение("Справочник.СтавкиНП");
	КонецЕсли;
	
	Возврат СтавкаНП;
	
	
КонецФункции // СтавкаНПОтгрузкиПокупателю()                    

//******************************************************************************
// ПредоплатаПоставщика(Знак, РегВзаим, ТаблДолгов, СуммаВал, СуммаУпр, СуммаРуб)
//
// Параметры:
//  Знак       - знак движения долга (+1 увеличение долга клиента, -1 уменьшение).
//  РегВзаим   - Регистр.Покупатели или Регистр.Поставщики
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма в валюте взаиморасчетов.
//  СуммаУпр   - сумма в валюте управленческого учета
//  СуммаРуб   - сумма в валюте бухгалтерского учета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Предоплата выплачена поставщику"
//
Процедура ПредоплатаПоставщика(Знак,РегВзаим, ТаблДолгов, СуммаВал, СуммаУпр, СуммаРуб)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал = СуммаВал;
	РегВзаим.СуммаУпр = СуммаУпр;
	РегВзаим.СуммаРуб = СуммаРуб;
	
	Если Знак=1 Тогда
		РегВзаим.ДвижениеПриходВыполнить();
	Иначе
		РегВзаим.ДвижениеРасходВыполнить();
	КонецЕсли;
	
КонецПроцедуры // ПредоплатаПоставщика()

//******************************************************************************
// ВозвратДенегОтПоставщика(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат денег от поставщика"
//
Процедура ВозвратДенегОтПоставщика(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	// реквизит
	РегВзаим.ДокументОплаты     = "";
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по курсу текущему 
	РегВзаим.СуммаРуб			= СуммаРуб; // по курсу текущему
	//РегВзаим.СуммаУпр			= ПогаситьУпр; // по курсу текущему 
	//РегВзаим.СуммаРуб			= ПогаситьРуб; // по курсу текущему
	
	РегВзаим.ДвижениеРасходВыполнить();
	
	СуммРазницаУпр = СуммаУпр - ПогаситьУпр;
	СуммРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// суммовая разница
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		ЗапомнимКО = РегВзаим.КодОперации; // запомним исходный КО
		
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеПриходВыполнить();
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратДенегОтПоставщика()

//******************************************************************************
// ПредоплатаПокупателя(Знак, РегВзаим,ТаблДолгов, СуммаВал, СуммаУпр, СуммаРуб)
//
// Параметры:
//  Знак       - знак движения долга (+1 увеличение долга клиента, -1 уменьшение).
//  РегВзаим   - Регистр.Покупатели или Регистр.Поставщики
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма в валюте взаиморасчетов.
//  СуммаУпр   - сумма в валюте управленческого учета
//  СуммаРуб   - сумма в валюте бухгалтерского учета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Предоплата от покупателя"
//
Процедура ПредоплатаПокупателя(Знак, РегВзаим,ТаблДолгов, СуммаВал, СуммаУпр, СуммаРуб)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;    
	
	ЮрЛицо  = РегВзаим.Фирма.ЮрЛицо;
	ДатаДок = ТаблДолгов.КредДокумент.ДатаДок;
	
	// ставка НП выбирается: если документ не облагается НП - пустая.
	// если документ облагается НП - из документа или из своего юрлица (если в докумене "авто")
	Если (ПустоеЗначение(ЮрЛицо)  = 0)
	и    (ПустоеЗначение(ДатаДок) = 0)
	и    (ТаблДолгов.ОблагаетсяНП <> 0)
	Тогда
		
		
		НПСАвансаЮрЛица = ЮрЛицо.СтавкаНПСАванса.Получить(ДатаДок);
	КонецЕсли;
	
	СтавкаНПсАванса = ?(ПустоеЗначение(ТаблДолгов.СтавкаНП) = 0, ТаблДолгов.СтавкаНП,НПСАвансаЮрЛица);
	СтавкаНПсАванса = СтавкаНПОтгрузкиПокупателю(СтавкаНПсАванса,ТаблДолгов.ОблагаетсяНП);
	
	РегВзаим.СтавкаНП		= СтавкаНПсАванса;
	
	РегВзаим.СуммаВал = СуммаВал;
	РегВзаим.СуммаУпр = СуммаУпр;
	РегВзаим.СуммаРуб = СуммаРуб;
	РегВзаим.Себестоимость = 0;   
	// если указана  ставка НП с аванса в своем юридическом лице - выделяем НП с аванса.
	Если (ПустоеЗначение(НПСАвансаЮрЛица) = 0) или (РегВзаим.КодОперации = глКО.РозничнаяВыручка) Тогда
		СтавкаНПЧислом     = РегВзаим.СтавкаНП.Ставка;
	Иначе     
		СтавкаНПЧислом     = 0;
	КонецЕсли;
	РегВзаим.СуммаНП       = РегВзаим.СуммаРуб / (100 + СтавкаНПЧислом) * СтавкаНПЧислом;
	
	РегВзаим.ДоговорКомитента	= "";
	
	Если Знак=1 Тогда
		РегВзаим.ДвижениеПриходВыполнить();
	Иначе
		РегВзаим.ДвижениеРасходВыполнить();
	КонецЕсли;
	
КонецПроцедуры // ПредоплатаПокупателя()

//******************************************************************************
// ВозвратДенегПокупателю(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
//
// Параметры:
//  РегВзаим      - Регистр.Покупатели
//  РегКнига      - Регистр.КнигаПродаж
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьНП    - сумма НП погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьСебестоимость - себестоимость погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат денег покупателю"
//
Процедура ВозвратДенегПокупателю(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	
	// установим общие для всех движений атрибуты
	РегВзаим.СтавкаНП 			= ТаблИтогов.СтавкаНП;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	// реквизит
	РегВзаим.ДоговорКомитента	= "";
	РегВзаим.ДокументОплаты     = "";
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по курсу по которому оплачиваем
	РегВзаим.СуммаРуб			= СуммаРуб; // по курсу по которому оплачиваем
	РегВзаим.Себестоимость		= ПогаситьСебестоимость; 
	РегВзаим.СуммаНП			= ПогаситьНП;
	
	РегВзаим.ДвижениеПриходВыполнить();
	
	СуммРазницаУпр = СуммаУпр - ПогаситьУпр;
	СуммРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// суммовая разница
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		ЗапомнимКО = РегВзаим.КодОперации; // запомним исходный КО
		
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		РегВзаим.Себестоимость	= 0; 
		РегВзаим.СуммаНП		= 0;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеРасходВыполнить();
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратДенегПокупателю()

//******************************************************************************
// ВозвратАвансаПокупателю(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
//
// Параметры:
//  РегВзаим      - Регистр.Покупатели
//  РегКнига      - Регистр.КнигаПродаж
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьНП    - сумма НП погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьСебестоимость - себестоимость погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат денег покупателю"
//
Процедура ВозвратАвансаПокупателю(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	
	// установим общие для всех движений атрибуты
	РегВзаим.СтавкаНП 			= ТаблИтогов.СтавкаНП;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	// реквизит
	РегВзаим.ДоговорКомитента	= "";
	РегВзаим.ДокументОплаты     = "";
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по курсу по которому оплачиваем
	РегВзаим.СуммаРуб			= СуммаРуб; // по курсу по которому оплачиваем
	РегВзаим.Себестоимость		= ПогаситьСебестоимость; 
	РегВзаим.СуммаНП			= ПогаситьНП;
	
	РегВзаим.ДвижениеРасходВыполнить();
	
	СуммРазницаУпр = СуммаУпр - ПогаситьУпр;
	СуммРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// суммовая разница
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		ЗапомнимКО = РегВзаим.КодОперации; // запомним исходный КО
		
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		РегВзаим.Себестоимость	= 0; 
		РегВзаим.СуммаНП		= 0;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеПриходВыполнить();
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратАвансаПокупателю()

//******************************************************************************
// ПолучениеОтПоставщика(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП)
//
// Параметры:
//  РегВзаим   - Регистр.Покупатели или Регистр.Поставщики
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма поставки в валюте взаиморасчетов.
//  СуммаУпр   - сумма поставки в валюте управленческого учета
//  СуммаРуб   - сумма поставки в валюте бухгалтерского учета
//  СуммаНДС   - сумма НДС поставки в валюте бухгалтерского учета
//  СуммаНП    - сумма НП  поставки в валюте бухгалтерского учета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Получение (закупка) у поставщика"
//
Процедура ПолучениеОтПоставщика(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр;
	РегВзаим.СуммаРуб 		= СуммаРуб;
	
	РегВзаим.ДвижениеРасходВыполнить();
	
	Если (ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятые)
	и (ТаблДолгов.ВидДолга <> глВД.ДолгВал)
	и (ТаблДолгов.ВидДолга <> глВД.ПрочееВал)
	и (РегВзаим.КодОперации<> глКО.ТаможенныеПлатежи)
	Тогда
		// если отражаем долг комитенту или нерезиденту - не заносим в КПокупок 
		РегКнига.КредДокумент	= ТаблДолгов.КредДокумент;
		РегКнига.ВидДолга		= ТаблДолгов.ВидДолга;
		РегКнига.СтавкаНДС		= ТаблДолгов.СтавкаНДС;   
		
		РегКнига.СуммаРуб       = СуммаРуб;
		РегКнига.СуммаНДС       = СуммаНДС;
		РегКнига.СуммаНП        = СуммаНП;
		
		РегКнига.КодОперации	= РегВзаим.КодОперации;
		
		РегКнига.ДвижениеРасходВыполнить();
	КонецЕсли;	
	
КонецПроцедуры // ПолучениеОтПоставщика()

//******************************************************************************
// ВозвратПоставщику(РегВзаим,РегКнигаПродаж,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП)
//
// Параметры:
//  РегВзаим   - Регистр.Поставщики         
//  РегКнигаПродаж - Регистр.КнигаПродаж
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма возврата в валюте взаиморасчетов.
//  СуммаУпр   - сумма возврата в валюте управленческого учета
//  СуммаРуб   - сумма возврата в валюте бухгалтерского учета
//  СуммаНДС   - сумма НДС возврата в валюте бухгалтерского учета
//  СуммаНП    - сумма НП  возврата в валюте бухгалтерского учета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат поставщику оплаченных ТМЦ"
//
Процедура ВозвратПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр;
	РегВзаим.СуммаРуб 		= СуммаРуб;
	
	РегВзаим.ДвижениеПриходВыполнить();
	
	Если (ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятые)
	и (ТаблДолгов.ВидДолга <> глВД.ДолгВал)
	и (ТаблДолгов.ВидДолга <> глВД.ПрочееВал)
	и (РегВзаим.КодОперации<> глКО.ТаможенныеПлатежи)
	Тогда
		// если отражаем долг комитенту или нерезиденту - не заносим в КПродаж
		РегКнигаПокупок.КредДокумент	= ТаблДолгов.КредДокумент;
		РегКнигаПокупок.ВидДолга		= ТаблДолгов.ВидДолга;
		РегКнигаПокупок.СтавкаНДС		= ТаблДолгов.СтавкаНДС;   
		
		РегКнигаПокупок.СуммаРуб		= - СуммаРуб;
		РегКнигаПокупок.СуммаНДС		= - СуммаНДС;
		РегКнигаПокупок.СуммаНП			= - СуммаНП;
		
		РегКнигаПокупок.КодОперации		= РегВзаим.КодОперации;
		
		РегКнигаПокупок.ДвижениеПриходВыполнить();
		
		РегКнигаПокупок.ДвижениеРасходВыполнить();
		
	КонецЕсли;	
	
КонецПроцедуры // ВозвратПоставщику()

//******************************************************************************
// ОтгрузкаПокупателю(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП,Себестоимость)
//
// Параметры:
//  РегВзаим   - Регистр.Покупатели
//  РегКнига   - Регистр.КнигаПродаж
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма отгрузки в валюте взаиморасчетов.
//  СуммаУпр   - сумма отгрузки в валюте управленческого учета
//  СуммаРуб   - сумма отгрузки в валюте бухгалтерского учета
//  СуммаНДС   - сумма НДС отгрузки в валюте бухгалтерского учета
//  СуммаНП    - сумма НП  отгрузки в валюте бухгалтерского учета
//  Себестоимость - сумма себестоимости отгруженных ТМЦ в валюте бух. учета.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Отгрузка покупателю ТМЦ"
//
Процедура ОтгрузкаПокупателю(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП,Себестоимость)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;
	РегВзаим.СтавкаНП		= СтавкаНПОтгрузкиПокупателю(ТаблДолгов.СтавкаНП, ТаблДолгов.ОблагаетсяНП);
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр;
	РегВзаим.СуммаРуб 		= СуммаРуб;
	РегВзаим.СуммаНП 		= СуммаНП; 
	РегВзаим.Себестоимость	= Себестоимость;
	
	РегВзаим.ДоговорКомитента	= ТаблДолгов.ДоговорКомитента;
	
	РегВзаим.ДвижениеПриходВыполнить();
	
	Если ((ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятые) и (ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятыеВРознице)) 
	и (РегВзаим.КодОперации <> глКо.РозничнаяПродажаЕНВД)  Тогда
		// если продаем принятые на комиссию товары - не заносим в КПродаж
		РегКнига.КредДокумент	= ТаблДолгов.КредДокумент;
		РегКнига.СтавкаНДС		= ТаблДолгов.СтавкаНДС;    
		РегКнига.ВидДолга		= ТаблДолгов.ВидДолга;
		
		РегКнига.СуммаРуб       = СуммаРуб;
		РегКнига.СуммаНДС       = СуммаНДС;
		РегКнига.СуммаНП        = СуммаНП;
		РегКнига.КодОперации 	= РегВзаим.КодОперации;
		РегКнига.СтавкаНП       = РегВзаим.СтавкаНП;   
		
		РегКнига.ДвижениеПриходВыполнить();                                     
		
	КонецЕсли;
	
КонецПроцедуры // ОтгрузкаПокупателю()

//******************************************************************************
// ВозвратОтПокупателя(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП,Себестоимость)
//
// Параметры:
//  РегВзаим   - Регистр.Покупатели
//  РегКнига   - Регистр.КнигаПродаж
//  ТаблДолгов - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  СуммаВал   - сумма возврата в валюте взаиморасчетов.
//  СуммаУпр   - сумма возврата в валюте управленческого учета
//  СуммаРуб   - сумма возврата в валюте бухгалтерского учета
//  СуммаНДС   - сумма НДС возврата в валюте бухгалтерского учета
//  СуммаНП    - сумма НП  возврата в валюте бухгалтерского учета
//  Себестоимость - сумма себестоимости возвращенных ТМЦ в валюте бух. учета.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат от покупателя неоплаченных ТМЦ"
//
Процедура ВозвратОтПокупателя(РегВзаим,РегКнига,ТаблДолгов,СуммаВал,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП,Себестоимость)
	
	РегВзаим.ВидДолга		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент	= ТаблДолгов.КредДокумент;
	РегВзаим.СтавкаНП		= СтавкаНПОтгрузкиПокупателю(ТаблДолгов.СтавкаНП, ТаблДолгов.ОблагаетсяНП);
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр;
	РегВзаим.СуммаРуб 		= СуммаРуб;
	РегВзаим.СуммаНП 		= СуммаНП; 
	РегВзаим.Себестоимость	= Себестоимость;
	
	РегВзаим.ДоговорКомитента	= ТаблДолгов.ДоговорКомитента;
	
	РегВзаим.ДвижениеРасходВыполнить();
	
	Если (ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятые) 
	и (РегВзаим.КодОперации <> глКо.ВозвратОтПокупателяЕНВД)  Тогда
		// если продаем принятые на комиссию товары - не заносим в КПродаж
		
		РегКнига.КредДокумент	= ТаблДолгов.КредДокумент;
		РегКнига.СтавкаНДС		= ТаблДолгов.СтавкаНДС;    
		РегКнига.ВидДолга		= ТаблДолгов.ВидДолга;
		
		РегКнига.СуммаРуб       = - СуммаРуб;
		РегКнига.СуммаНДС       = - СуммаНДС;
		РегКнига.СуммаНП        = - СуммаНП;
		
		РегКнига.КодОперации 	= РегВзаим.КодОперации;
		РегКнига.ДокументОплаты = ТаблДолгов.КредДокумент; // Для упорядочивания в книге продаж          
		РегКнига.СтавкаНП       = РегВзаим.СтавкаНП;
		
		РегКнига.ДвижениеПриходВыполнить();
		
		РегКнига.ДвижениеРасходВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратОтПокупателя()

//******************************************************************************
// ОплатаОтгрузкиПокупателем(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
//
// Параметры:
//  РегВзаим      - Регистр.Покупатели
//  РегКнига      - Регистр.КнигаПродаж
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа оплаты.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьНП    - сумма НП погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьСебестоимость - себестоимость погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Оплата отгрузки покупателем".
//
Процедура ОплатаОтгрузкиПокупателем(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	Себестоимость	= СписокПогСумм.Получить("Себестоимость");   
	
	// установим общие для всех движений атрибуты
	РегВзаим.СтавкаНП 			= ТаблИтогов.СтавкаНП;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	// реквизит
	РегВзаим.ДоговорКомитента	= "";
	
	СуммРазницаУпр = СуммаУпр - ПогаситьУпр;
	СуммРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// суммовая разница
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		Если СуммРазницаРуб<>0 Тогда
			ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
			ТаблДвижений.НоваяКолонка ("СтавкаНДС");
			ТаблДвижений.НоваяКолонка ("СтавкаНП");
			ТаблДвижений.НоваяКолонка ("СуммаРуб");
			ТаблДвижений.НоваяКолонка ("СуммаНДС");
			ТаблДвижений.НоваяКолонка ("СуммаНП");
			
			ВремКнига = СоздатьОбъект("Регистр.КнигаПродаж");
			ВремКнига.ВыбратьДвиженияДокумента(ТаблИтогов.КредДокумент);
			Пока ВремКнига.ПолучитьДвижение() = 1 Цикл
				Если (ВремКнига.Приход   = 1)
				и    (ВремКнига.КодОперации <> глКО.СуммоваяРазница)
				и    (ВремКнига.ВидДолга = ТаблИтогов.ВидДолга)
				и    (ВремКнига.СтавкаНП = ТаблИтогов.СтавкаНП)
				Тогда
					ТаблДвижений.НоваяСтрока();
					ТаблДвижений.СтавкаНДС = ВремКнига.СтавкаНДС;
					ТаблДвижений.СтавкаНП  = ВремКнига.СтавкаНП;
					ТаблДвижений.СуммаРуб  = ВремКнига.СуммаРуб;
					ТаблДвижений.СуммаНДС  = ВремКнига.СуммаНДС;
					ТаблДвижений.СуммаНП   = ВремКнига.СуммаНП;
				КонецЕсли;
			КонецЦикла;    
			КоэффСР   = ?(ТаблДвижений.Итог("СуммаРуб") = 0,0,СуммРазницаРуб/ТаблДвижений.Итог("СуммаРуб"));
			ОстатокСР = СуммРазницаРуб;
			
			ТаблДвижений.ВыбратьСтроки();
			Пока ТаблДвижений.ПолучитьСтроку() = 1 Цикл
				// отразим суммовую разницу в книге продаж
				// измерения
				РегКнига.ВидДолга	    = ТаблИтогов.ВидДолга;
				РегКнига.КредДокумент	= ТаблИтогов.КредДокумент;
				РегКнига.СтавкаНДС		= ТаблДвижений.СтавкаНДС;
				// ресурсы    
				Если ТаблДвижений.НомерСтроки = ТаблДвижений.КоличествоСтрок() Тогда
					РегКнига.СуммаРуб   = ОстатокСР;
				Иначе     
					РегКнига.СуммаРуб   = Окр(ТаблДвижений.СуммаРуб * КоэффСР,2,1);	
				КонецЕсли;
				РегКнига.СуммаНДС       = Окр(ТаблДвижений.СуммаНДС * КоэффСР,2,1);
				РегКнига.СуммаНП        = Окр(ТаблДвижений.СуммаНП  * КоэффСР,2,1);
				
				ОстатокСР = ОстатокСР - РегКнига.СуммаРуб;
				СуммаНПСР = СуммаНПСР + РегКнига.СуммаНП;
				// реквизиты                                                 
				РегКнига.СтавкаНП		= ТаблДвижений.СтавкаНП;
				РегКнига.КодОперации    = глКО.СуммоваяРазница;
				РегКнига.ДвижениеПриходВыполнить();
			КонецЦикла;
		КонецЕсли;
		
		ЗапомнимКО = РегВзаим.КодОперации;
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		РегВзаим.СуммаНП	= СуммаНПСР;
		РегВзаим.Себестоимость = 0;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеПриходВыполнить();
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по тек курсу, т.е. с учетом С.Разн.
	РегВзаим.СуммаРуб			= СуммаРуб; // по тек курсу, т.е. с учетом С.Разн.
	РегВзаим.Себестоимость		= ПогаситьСебестоимость; 
	РегВзаим.СуммаНП			= ПогаситьНП + СуммаНПСР;
	
	РегВзаим.ДвижениеРасходВыполнить();
	
КонецПроцедуры // ОплатаОтгрузкиПокупателем()

//******************************************************************************
// ПогашениеВозвратаПокупОтгрузкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ВозвратУпр,ВозвратРуб,ВозвратНП,ВозвратСебестоимость)
//
// Параметры:
//  РегВзаим             - Регистр.Покупатели
//  РегКнига             - Регистр.КнигаПродаж
//  ТаблДолгов           - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов           - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм        - список значений, списываемые суммы проводимого документа отгрузки.
//  ВозвратУпр           - сумма погашаемой части найденного аванса (в валюте упр. учета)
//  ВозвратРуб           - сумма погашаемой части найденного аванса (в валюте бух. учета)
//  ВозвратНП            - сумма НП погашаемой части найденного аванса (в валюте бух. учета)
//  ВозвратСебестоимость - себестоимость погашаемой части найденного аванса (в валюте бух. учета) (должна быть = 0)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Погашение возврата, полученного от покупателя, отгрузкой".
//
Процедура ПогашениеВозвратаПокупОтгрузкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ВозвратУпр,ВозвратРуб,ВозвратНП,ВозвратСебестоимость)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	Себестоимость	= СписокПогСумм.Получить("Себестоимость");   
	
	ЗапомнимКО       = РегВзаим.КодОперации; // запомним установленный код операции
	СтавкаНПОтгрузки = СтавкаНПОтгрузкиПокупателю(ТаблДолгов.СтавкаНП, ТаблДолгов.ОблагаетсяНП);
	
	// Общие атрибуты регистров
	РегВзаим.КредДокумент 	= ТаблДолгов.КредДокумент;
	РегВзаим.ВидДолга 		= ТаблДолгов.ВидДолга;
	РегВзаим.СтавкаНП		= СтавкаНПОтгрузки;
	
	// нужно сторно (возврата) и последующий зачет его
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр; 
	РегВзаим.СуммаРуб 		= СуммаРуб ;
	РегВзаим.СуммаНП  		= СуммаНП;
	РегВзаим.Себестоимость 	= Себестоимость;
	
	РегВзаим.ДоговорКомитента = ТаблДолгов.ДоговорКомитента;
	РегВзаим.ДокументОплаты   = ТаблИтогов.КредДокумент;
	РегВзаим.КодОперации	  = глКО.ЗачтенВозвратПокупателя;
	// здесь наоборот!
	РегВзаим.ДвижениеРасходВыполнить();
	
	// теперь сторно
	// установим общие для всех движений атрибуты
	РегВзаим.СтавкаНП 			= ТаблИтогов.СтавкаНП;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	
	// ресурсы
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ВозвратУпр; // по курсу, по которому был получен возврат
	РегВзаим.СуммаРуб			= ВозвратРуб; // по курсу, по которому был получен возврат
	РегВзаим.Себестоимость		= ВозвратСебестоимость; 
	РегВзаим.СуммаНП			= ВозвратНП;
	
	// реквизит
	РегВзаим.ДоговорКомитента	= "";
	РегВзаим.КодОперации		= глКО.СторнированВозврат;
	РегВзаим.ДокументОплаты 	= "";
	
	РегВзаим.ДвижениеПриходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
	
КонецПроцедуры // ПогашениеВозвратаПокупОтгрузкой()

//******************************************************************************
// ПогашениеАвансаПокупОтгрузкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,АвансУпр,АвансРуб,АвансНП,АвансСебестоимость,ТИКнигаПродаж)
//
// Параметры:
//  РегВзаим      - Регистр.Покупатели
//  РегКнига      - Регистр.КнигаПродаж
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа отгрузки.
//  АвансУпр      - сумма погашаемой части найденного аванса (в валюте упр. учета)
//  АвансРуб      - сумма погашаемой части найденного аванса (в валюте бух. учета)
//  АвансНП       - сумма НП погашаемой части найденного аванса (в валюте бух. учета)
//  АвансСебестоимость - себестоимость погашаемой части найденного аванса (в валюте бух. учета) (должна быть = 0)     
//	ТИКнигаПродаж - таблица значений с итогами по регистру "Книга продаж" для сторнирования аванса по книге продаж
// при зачете розничной выручки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Погашение аванса, полученного от покупателя, отгрузкой".
//
Процедура ПогашениеАвансаПокупОтгрузкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	АвансУпр,АвансРуб,АвансНП,АвансСебестоимость,ТИКнигаПродаж=0)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	Себестоимость	= СписокПогСумм.Получить("Себестоимость");   
	
	ЗапомнимКО       = РегВзаим.КодОперации; // запомним установленный код операции
	СтавкаНПОтгрузки = СтавкаНПОтгрузкиПокупателю(ТаблДолгов.СтавкаНП, ТаблДолгов.ОблагаетсяНП);
	
	СуммРазницаУпр  = АвансУпр - СуммаУпр;
	СуммРазницаРуб  = АвансРуб - СуммаРуб;
	
	// Общие атрибуты регистров
	РегВзаим.КредДокумент 	= ТаблДолгов.КредДокумент;
	РегВзаим.ВидДолга 		= ТаблДолгов.ВидДолга;
	РегВзаим.СтавкаНП		= СтавкаНПОтгрузки;
	
	СуммаНПСР = 0;
	// суммовая разница, возникает по текущей отгрузке, т.е. оплачиваем по курсу аванса!
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		// вычислим налоги с суммовой разницы
		ПроцентНП           = СтавкаНПОтгрузки.Ставка;
		СуммаНПСР			= Окр(СуммРазницаРуб * ПроцентНП / (ПроцентНП+100),2,1);
		СуммаНДССР			= глВыделяемыйНДС(ТаблДолгов.СтавкаНДС)*(СуммРазницаРуб - СуммаНПСР);
		
		// отразим во взаиморасчетах
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		РегВзаим.СуммаНП	= СуммаНПСР;
		РегВзаим.Себестоимость 	= 0;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеПриходВыполнить();
		
		Если (СуммРазницаРуб<>0) и (ТаблДолгов.ВидДолга<>глВД.ДолгЗаТоварыПринятые) Тогда
			// отразим суммовую разницу в книге продаж                                   
			// только если она возникла не по обязательствам за комисс. товары.
			РегКнига.КредДокумент	= ТаблДолгов.КредДокумент;
			РегКнига.СтавкаНДС		= ТаблДолгов.СтавкаНДС;
			РегКнига.ВидДолга		= ТаблДолгов.ВидДолга;
			
			РегКнига.СуммаРуб       = СуммРазницаРуб;
			РегКнига.СуммаНДС       = СуммаНДССР;
			РегКнига.СуммаНП        = СуммаНПСР;    
			
			РегКнига.КодОперации 	= глКО.СуммоваяРазница;
			РегКнига.ДокументОплаты = "";
			РегКнига.СтавкаНП       = СтавкаНПОтгрузки;
			
			РегКнига.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЕсли;
	
	// нужно сторно (аванса) и последующий зачет его
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= АвансУпр; 
	РегВзаим.СуммаРуб 		= АвансРуб;
	РегВзаим.СуммаНП  		= СуммаНП + СуммаНПСР;
	РегВзаим.Себестоимость 	= Себестоимость;
	
	РегВзаим.ДоговорКомитента = ТаблДолгов.ДоговорКомитента;
	РегВзаим.ДокументОплаты   = ТаблИтогов.КредДокумент;
	РегВзаим.КодОперации	  = глКО.ЗачтенАвансПокупателя;
	// здесь наоборот!
	РегВзаим.ДвижениеРасходВыполнить();
	
	// теперь сторно
	// установим общие для всех движений атрибуты
	РегВзаим.СтавкаНП 			= ТаблИтогов.СтавкаНП;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	
	// ресурсы
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= АвансУпр; // по курсу, по которому был получен аванс
	РегВзаим.СуммаРуб			= АвансРуб; // по курсу, по которому был получен аванс
	РегВзаим.Себестоимость		= АвансСебестоимость; 
	РегВзаим.СуммаНП			= АвансНП;
	
	// реквизит
	РегВзаим.ДоговорКомитента	= "";
	РегВзаим.КодОперации		= глКО.СторнированАванс;
	РегВзаим.ДокументОплаты 	= "";   
	
	// Если мы сторнируем розничную выручку - отразим это в книге продаж
	Если РегВзаим.ВидДолга 		= глВД.РозничнаяВыручка Тогда 
		ТИКнигаПродаж.ВыбратьСтроки();
		ОстПогСумма = АвансРуб;                                 
		Пока ТИКнигаПродаж.ПолучитьСтроку() = 1 Цикл 
			
			// В принципе, в данной таблице должна быть только одна строка, но на всякий случай подстрахуемся
			СуммаСписания = Мин(ОстПогСумма, -ТИКнигаПродаж.СуммаРуб);
			КоэффСписания = СуммаСписания / (-ТИКнигаПродаж.СуммаРуб);
			
			РегКнига.КредДокумент 	= РегВзаим.КредДокумент;  
			РегКнига.ВидДолга 		= глВД.РозничнаяВыручка;
			РегКнига.СтавкаНДС 		= ТИКнигаПродаж.СтавкаНДС;
			РегКнига.СтавкаНП 		= РегВзаим.СтавкаНП;
			РегКнига.СуммаНДС		= ТИКнигаПродаж.СуммаНДС * КоэффСписания;
			РегКнига.СуммаНП 		= ТИКнигаПродаж.СуммаНП * КоэффСписания; 
			РегКнига.СуммаРуб		= - СуммаСписания;
			РегКнига.ДокументОплаты = ТаблИтогов.КредДокумент; 
			РегКнига.КодОперации	= глКО.СторнированАванс;
			РегКнига.ДвижениеРасходВыполнить();
			
			Если ТаблДолгов.ВидДолга <> глВД.ДолгЗаТоварыПринятыеВРознице Тогда
				КоэффСписания = СуммаСписания / ТаблДолгов.СуммаРуб;
				РегКнига.КредДокумент 	= ТаблДолгов.КредДокумент;  
				РегКнига.ВидДолга 		= ТаблДолгов.ВидДолга;
				РегКнига.СтавкаНДС 		= ТаблДолгов.СтавкаНДС;
				РегКнига.СтавкаНП 		= ТаблДолгов.СтавкаНП;
				РегКнига.СуммаНДС		= ТаблДолгов.СуммаНДС * КоэффСписания;
				РегКнига.СуммаНП 		= ТаблДолгов.СуммаНП * КоэффСписания; 
				РегКнига.СуммаРуб		= СуммаСписания; 
				РегКнига.КодОперации 	= глКО.Прочее;
				РегКнига.ДвижениеРасходВыполнить();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РегВзаим.ДвижениеПриходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
	
КонецПроцедуры // ПогашениеАвансаПокупОтгрузкой()

//******************************************************************************
// ОплатаПоставкиПоставщику(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа оплаты.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Оплата поставки поставщику".
//
Процедура ОплатаПоставкиПоставщику(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	
	СуммРазницаУпр = СуммаУпр - ПогаситьУпр;
	СуммРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// суммовая разница
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		Если СуммРазницаРуб<>0 Тогда
			ТаблДвижений = СоздатьОбъект("ТаблицаЗначений");
			ТаблДвижений.НоваяКолонка ("СтавкаНДС");
			ТаблДвижений.НоваяКолонка ("СуммаРуб");
			ТаблДвижений.НоваяКолонка ("СуммаНДС");
			ТаблДвижений.НоваяКолонка ("СуммаНП");
			
			ВремКнига = СоздатьОбъект("Регистр.КнигаПокупок");
			ВремКнига.ВыбратьДвиженияДокумента(ТаблИтогов.КредДокумент);
			Пока ВремКнига.ПолучитьДвижение() = 1 Цикл
				Если (ВремКнига.Расход   = 1)
				и    (ВремКнига.КодОперации <> глКО.СуммоваяРазница)
				и    (ВремКнига.ВидДолга = ТаблИтогов.ВидДолга)
				Тогда
					ТаблДвижений.НоваяСтрока();
					ТаблДвижений.СтавкаНДС = ВремКнига.СтавкаНДС;
					ТаблДвижений.СуммаРуб  = ВремКнига.СуммаРуб;
					ТаблДвижений.СуммаНДС  = ВремКнига.СуммаНДС;
					ТаблДвижений.СуммаНП   = ВремКнига.СуммаНП;
				КонецЕсли;
			КонецЦикла;    
			КоэффСР   = ?(ТаблДвижений.Итог("СуммаРуб") = 0,0,СуммРазницаРуб/ТаблДвижений.Итог("СуммаРуб"));
			ОстатокСР = СуммРазницаРуб;
			
			ТаблДвижений.ВыбратьСтроки();
			Пока ТаблДвижений.ПолучитьСтроку() = 1 Цикл
				// отразим суммовую разницу в книге продаж
				// измерения
				РегКнига.ВидДолга	    = ТаблИтогов.ВидДолга;
				РегКнига.КредДокумент	= ТаблИтогов.КредДокумент;
				РегКнига.СтавкаНДС		= ТаблДвижений.СтавкаНДС;
				// ресурсы    
				Если ТаблДвижений.НомерСтроки = ТаблДвижений.КоличествоСтрок() Тогда
					РегКнига.СуммаРуб   = ОстатокСР;
				Иначе     
					РегКнига.СуммаРуб   = Окр(ТаблДвижений.СуммаРуб * КоэффСР,2,1);	
				КонецЕсли;
				РегКнига.СуммаНДС       = Окр(ТаблДвижений.СуммаНДС * КоэффСР,2,1);
				РегКнига.СуммаНП        = Окр(ТаблДвижений.СуммаНП  * КоэффСР,2,1);
				
				ОстатокСР = ОстатокСР - РегКнига.СуммаРуб;
				// реквизиты                                                 
				РегКнига.КодОперации    = глКО.СуммоваяРазница;
				РегКнига.ДвижениеРасходВыполнить();
			КонецЦикла;
		КонецЕсли;
		
		ЗапомнимКО = РегВзаим.КодОперации;
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеРасходВыполнить();
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по тек курсу, т.е. с учетом С.Разн.
	РегВзаим.СуммаРуб			= СуммаРуб; // по тек курсу, т.е. с учетом С.Разн.
	
	РегВзаим.ДвижениеПриходВыполнить();
	
КонецПроцедуры // ОплатаПоставкиПоставщику()

//******************************************************************************
// НеоплаченныйВозвратПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб)
//
// Параметры:
//  РегВзаим       - Регистр.Поставщики
//  РегКнигаПокупок- Регистр.КнигаПокупок
//  ТаблДолгов     - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов     - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм  - список значений, списываемые суммы проводимого документа возврата.
//  ПогаситьУпр    - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб    - сумма погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат поставщику неоплаченных ТМЦ".
//
Процедура НеоплаченныйВозвратПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ПогаситьУпр; // по курсу отгрузки
	РегВзаим.СуммаРуб			= ПогаситьРуб; // по курсу отгрузки
	
	РегВзаим.ДвижениеПриходВыполнить();  
	
	РегКнигаПокупок.КредДокумент = ТаблИтогов.КредДокумент;
	РегКнигаПокупок.СтавкаНДС    = ТаблДолгов.СтавкаНДС;
	РегКнигаПокупок.ВидДолга     = ТаблИтогов.ВидДолга;
	
	РегКнигаПокупок.СуммаРуб     = - ПогаситьРуб;
	РегКнигаПокупок.СуммаНДС     = - СуммаНДС;
	РегКнигаПокупок.СуммаНП      = - СуммаНП;
	
	РегКнигаПокупок.КодОперации  = РегВзаим.КодОперации;
	РегКнигаПокупок.ДокументОплаты = "";     
	
	РегКнигаПокупок.ДвижениеРасходВыполнить();
	
КонецПроцедуры // НеоплаченныйВозвратПоставщику()

//******************************************************************************
// ПогашениеДолгаПоставщикуВозвратом(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб)
//
// Параметры:
//  РегВзаим       - Регистр.Поставщики
//  РегКнигаПокупок- Регистр.КнигаПокупок
//  ТаблДолгов     - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов     - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм  - список значений, списываемые суммы проводимого документа возврата.
//  ПогаситьУпр    - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб    - сумма погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проводит погашение долга поставщику возвратом.
//
Процедура ПогашениеДолгаПоставщикуВозвратом(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб)
	
	ЗапомнимКО  	= РегВзаим.КодОперации;
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблДолгов.КредДокумент;
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ПогаситьУпр; 
	РегВзаим.СуммаРуб			= ПогаситьРуб; 
	
	РегВзаим.КодОперации 		= глКО.ВозвратПоставщику;
	РегВзаим.ДвижениеПриходВыполнить();                  
	РегВзаим.КодОперации		= глКО.СторнированВозврат;
	РегВзаим.ДвижениеРасходВыполнить();
	РегВзаим.КодОперации		= глКО.ЗачтенВозвратПоставщику; 
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДвижениеПриходВыполнить();      
	
	// Это оплаченный возврат, поэтому необходимо сделать движение по книге продаж
	РегКнигаПродаж.КредДокумент	= ТаблДолгов.КредДокумент;
	РегКнигаПродаж.ВидДолга 	= ТаблДолгов.ВидДолга;
	РегКнигаПродаж.СтавкаНДС 	= ТаблДолгов.СтавкаНДС;
	РегКнигаПродаж.СуммаРуб 	= ПогаситьРуб;
	РегКнигаПродаж.СуммаНДС 	= СуммаНДС;
	РегКнигаПродаж.СуммаНП 		= СуммаНП;
	РегКнигаПродаж.ДокументОплаты = ТаблДолгов.КредДокумент;	     
	РегКнигаПродаж.КодОперации 	= глКО.ВозвратПоставщику;
	РегКнигаПродаж.ДвижениеПриходВыполнить();
	РегКнигаПродаж.ДвижениеРасходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО;
	
КонецПроцедуры // ПогашениеДолгаПоставщикуВозвратом()

//******************************************************************************
// НеоплаченныйВозвратОтПокупателя(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
//
// Параметры:
//  РегВзаим       - Регистр.Покупатели
//  РегКнигаПродаж - Регистр.КнигаПродаж
//  ТаблДолгов     - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов     - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм  - список значений, списываемые суммы проводимого документа возврата.
//  ПогаситьУпр    - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб    - сумма погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьНП     - сумма НП погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьСебестоимость - себестоимость погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Возврат от покупателя неоплаченных ТМЦ".
//
Процедура НеоплаченныйВозвратОтПокупателя(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.СтавкаНП           = ТаблИтогов.СтавкаНП;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	//реквизиты
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	РегВзаим.ДоговорКомитента 	= ТаблДолгов.ДоговорКомитента;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ПогаситьУпр; // по курсу отгрузки
	РегВзаим.СуммаРуб			= ПогаситьРуб; // по курсу отгрузки
	РегВзаим.СуммаНП            = ПогаситьНП;
	РегВзаим.Себестоимость      = ПогаситьСебестоимость;
	
	РегВзаим.ДвижениеРасходВыполнить();  
	
	Если (ТаблИтогов.ВидДолга <> глВД.ДолгЗаТоварыПринятые) 
	и (РегВзаим.КодОперации <> глКо.ВозвратОтПокупателяЕНВД)  Тогда
		
		ЮрЛицо  = РегВзаим.Фирма.ЮрЛицо;                                          
		ДатаДок = ТаблИтогов.КредДокумент.ДатаДок;
		МетодОпределенияВыручки = ЮрЛицо.МетодОпределенияВыручки.Получить(ДатаДок);
		
		РегКнигаПродаж.КредДокумент = ТаблИтогов.КредДокумент;
		РегКнигаПродаж.СтавкаНДС    = ТаблДолгов.СтавкаНДС;
		РегКнигаПродаж.ВидДолга     = ТаблИтогов.ВидДолга;
		
		РегКнигаПродаж.СуммаРуб     = - СуммаРуб;
		РегКнигаПродаж.СуммаНДС     = - СуммаНДС;
		РегКнигаПродаж.СуммаНП      = - СуммаНП;
		
		РегКнигаПродаж.КодОперации    = РегВзаим.КодОперации;
		РегКнигаПродаж.ДокументОплаты = ТаблДолгов.КредДокумент; // Для упорядочивания в книге продаж         
		РегКнигаПродаж.СтавкаНП       = ТаблДолгов.СтавкаНП;
		
		РегКнигаПродаж.ДвижениеПриходВыполнить();
		
		Если МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
			// Если по отгрузке, то НДС уже был заненсен в книгу продаж,
			// поэтому в любом случае надо делать сторно
			РегКнигаПродаж.ДвижениеРасходВыполнить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НеоплаченныйВозвратОтПокупателя()

//******************************************************************************
// ПогашениеДолгаПокупателяВозвратом(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)
//
// Параметры:
//  РегВзаим       - Регистр.Покупатели
//  РегКнигаПродаж - Регистр.КнигаПродаж
//  ТаблДолгов     - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов     - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм  - список значений, списываемые суммы проводимого документа возврата.
//  ПогаситьУпр    - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб    - сумма погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьНП     - сумма НП погашаемой части найденного долга (в валюте бух. учета)
//  ПогаситьСебестоимость - себестоимость погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет погашение долга покупателя возвратом.
//
Процедура ПогашениеДолгаПокупателяВозвратом(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость)        
	
	ЗапомнимКО 		= РегВзаим.КодОперации;										  
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты    
	РегВзаим.КодОперации 		= глКО.ВозвратОтПокупателя;
	РегВзаим.ВидДолга			= ТаблДолгов.ВидДолга;
	РегВзаим.СтавкаНП           = ТаблДолгов.СтавкаНП;
	РегВзаим.КредДокумент		= ТаблДолгов.КредДокумент;
	//реквизиты
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	РегВзаим.ДоговорКомитента 	= ТаблДолгов.ДоговорКомитента;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ПогаситьУпр; // по курсу отгрузки
	РегВзаим.СуммаРуб			= ПогаситьРуб; // по курсу отгрузки
	РегВзаим.СуммаНП            = ПогаситьНП;
	РегВзаим.Себестоимость      = ПогаситьСебестоимость;  
	
	РегВзаим.ДвижениеРасходВыполнить();  
	
	
	РегВзаим.КодОперации 		= глКО.СторнированВозврат;
	РегВзаим.ДвижениеПриходВыполнить();  
	
	
	РегВзаим.КодОперации 		= глКО.ЗачтенВозвратПокупателя;
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.СтавкаНП           = ТаблИтогов.СтавкаНП;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДвижениеРасходВыполнить();  
	
	Если (ТаблИтогов.ВидДолга <> глВД.ДолгЗаТоварыПринятые) 
	и (РегВзаим.КодОперации <> глКо.ВозвратОтПокупателяЕНВД)  Тогда  
		
		
		ЮрЛицо  = РегВзаим.Фирма.ЮрЛицо;                                          
		ДатаДок = ТаблИтогов.КредДокумент.ДатаДок;
		МетодОпределенияВыручки = ЮрЛицо.МетодОпределенияВыручки.Получить(ДатаДок);
		
		РегКнигаПродаж.КредДокумент = ТаблДолгов.КредДокумент;
		РегКнигаПродаж.СтавкаНДС    = ТаблДолгов.СтавкаНДС;
		РегКнигаПродаж.ВидДолга     = ТаблДолгов.ВидДолга;
		
		РегКнигаПродаж.СуммаРуб     = - СуммаРуб;
		РегКнигаПродаж.СуммаНДС     = - СуммаНДС;
		РегКнигаПродаж.СуммаНП      = - СуммаНП;
		
		РегКнигаПродаж.КодОперации    = глКО.ВозвратОтПокупателя;
		РегКнигаПродаж.ДокументОплаты = ТаблДолгов.КредДокумент; // Для упорядочивания в книге продаж         
		РегКнигаПродаж.СтавкаНП       = ТаблДолгов.СтавкаНП;
		
		РегКнигаПродаж.ДвижениеПриходВыполнить();
		
		РегКнигаПродаж.ДвижениеРасходВыполнить();
	КонецЕсли;                             
	РегВзаим.КодОперации = ЗапомнимКО;
	
КонецПроцедуры // ПогашениеДолгаПокупателяВозвратом()

//******************************************************************************
// ОплатаИмпортаПоставщику(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ПогаситьУпр,ПогаситьРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа оплаты.
//  ПогаситьУпр   - сумма погашаемой части найденного долга (в валюте упр. учета)
//  ПогаситьРуб   - сумма погашаемой части найденного долга (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Оплата имортной поставки поставщику".
//
Процедура ОплатаИмпортаПоставщику(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ПогаситьУпр,ПогаситьРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	РегВзаим.ДокументОплаты 	= ТаблДолгов.КредДокумент;
	
	КурсРазницаУпр = СуммаУпр - ПогаситьУпр;
	КурсРазницаРуб = СуммаРуб - ПогаситьРуб;
	
	// курсовая разница
	// переоценим 
	Если (КурсРазницаУпр<>0) или (КурсРазницаРуб<>0) Тогда
		
		ЗапомнимКО = РегВзаим.КодОперации;
		РегВзаим.КодОперации = глКО.КурсоваяРазница;
		
		Если  КурсРазницаРуб < 0 Тогда
			РегВзаим.СуммаВал 	= 0;
			РегВзаим.СуммаУпр 	= - КурсРазницаУпр;
			РегВзаим.СуммаРуб 	= - КурсРазницаРуб;
			
			РегВзаим.ДвижениеПриходВыполнить();
		Иначе
			РегВзаим.СуммаВал 	= 0;
			РегВзаим.СуммаУпр 	= КурсРазницаУпр;
			РегВзаим.СуммаРуб 	= КурсРазницаРуб;
			
			РегВзаим.ДвижениеРасходВыполнить();
		КонецЕсли;
		
		РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
		
	КонецЕсли;
	
	// ресурсы  
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по тек курсу, т.е. с учетом К.Разн.
	РегВзаим.СуммаРуб			= СуммаРуб; // по тек курсу, т.е. с учетом К.Разн.
	
	РегВзаим.ДвижениеПриходВыполнить();
	
КонецПроцедуры // ОплатаИмпортаПоставщику()

//******************************************************************************
// ПогашениеАвансаПостПоставкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,АвансУпр,АвансРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа поставки.
//  АвансУпр      - сумма погашаемой части найденного аванса (в валюте упр. учета)
//  АвансРуб      - сумма погашаемой части найденного аванса (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Погашение аванса, выданного поставщику, поставкой".
//
Процедура ПогашениеАвансаПостПоставкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	АвансУпр,АвансРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	ЗапомнимКО = РегВзаим.КодОперации; // запомним установленный код операции
	
	// нужно сторно (аванса) и последующий зачет его
	// сначала зачет 
	РегВзаим.ВидДолга 		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент 	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= АвансУпр; 
	РегВзаим.СуммаРуб 		= АвансРуб;
	
	РегВзаим.КодОперации	= глКО.ЗачтенАвансПоставщику;
	РегВзаим.ДокументОплаты = ТаблИтогов.КредДокумент;
	// здесь наоборот!
	РегВзаим.ДвижениеПриходВыполнить();
	
	СуммРазницаУпр = АвансУпр - СуммаУпр;
	СуммРазницаРуб = АвансРуб - СуммаРуб;
	
	// суммовая разница, возникает по текущей отгрузке, т.е. оплачиваем по курсу аванса!
	Если (СуммРазницаУпр<>0) или (СуммРазницаРуб<>0) Тогда
		
		// вычислим налоги с суммовой разницы
		СуммаНДССР			= глВыделяемыйНДС(ТаблДолгов.СтавкаНДС)*(СуммРазницаРуб);
		
		// отразим во взаиморасчетах
		РегВзаим.СуммаВал 	= 0;
		РегВзаим.СуммаУпр 	= СуммРазницаУпр;
		РегВзаим.СуммаРуб 	= СуммРазницаРуб;
		
		РегВзаим.КодОперации = глКО.СуммоваяРазница;
		
		РегВзаим.ДвижениеРасходВыполнить();
		
		Если (СуммРазницаРуб<>0) и (ТаблДолгов.ВидДолга<>глВД.ДолгЗаТоварыПринятые) Тогда
			
			// отразим суммовую разницу в книге покупок
			РегКнига.КредДокумент	= ТаблДолгов.КредДокумент;
			РегКнига.СтавкаНДС		= ТаблДолгов.СтавкаНДС;
			РегКнига.ВидДолга		= ТаблДолгов.ВидДолга;
			
			РегКнига.СуммаРуб       = СуммРазницаРуб;
			РегКнига.СуммаНДС       = СуммаНДССР;
			РегКнига.СуммаНП        = 0;
			
			РегКнига.КодОперации 	= глКО.СуммоваяРазница;
			РегКнига.ДокументОплаты = "";
			
			РегКнига.ДвижениеРасходВыполнить();
		КонецЕсли;
	КонецЕсли;
	
	// теперь сторно
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	
	// ресурсы
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= АвансУпр; // по курсу, по которому был получен аванс
	РегВзаим.СуммаРуб			= АвансРуб; // по курсу, по которому был получен аванс
	
	РегВзаим.КодОперации		= глКО.СторнированАванс;
	РегВзаим.ДокументОплаты 	= "";
	РегВзаим.ДвижениеРасходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
	
КонецПроцедуры // ПогашениеАвансаПостПоставкой()

//******************************************************************************
// ПогашениеВозвратаПостПоставкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,ВозвратУпр,ВозвратРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа поставки.
//  ВозвратУпр    - сумма погашаемой части найденного возврата (в валюте упр. учета)
//  ВозвратРуб    - сумма погашаемой части найденного возврата (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Погашение возврата поставщику последующей поставкой".
//
Процедура ПогашениеВозвратаПостПоставкой(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	ВозвратУпр, ВозвратРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	ЗапомнимКО = РегВзаим.КодОперации; // запомним установленный код операции
	
	// нужно сторно (аванса) и последующий зачет его
	// сначала зачет 
	РегВзаим.ВидДолга 		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент 	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр; 
	РегВзаим.СуммаРуб 		= СуммаРуб;
	
	РегВзаим.КодОперации	= глКО.ЗачтенВозвратПоставщику;
	РегВзаим.ДокументОплаты = ТаблИтогов.КредДокумент;
	
	// здесь наоборот!
	РегВзаим.ДвижениеПриходВыполнить();
	
	// теперь сторно
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	
	// ресурсы
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= ВозвратУпр; // по курсу, по которому был получен возврат
	РегВзаим.СуммаРуб			= ВозвратРуб; // по курсу, по которому был получен возврат
	
	РегВзаим.КодОперации		= глКО.СторнированВозврат;
	РегВзаим.ДокументОплаты 	= "";
	РегВзаим.ДвижениеРасходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
	
КонецПроцедуры // ПогашениеВозвратаПостПоставкой()

//******************************************************************************
// ПогашениеАвансаПостИмпортом(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,АвансУпр,АвансРуб)
//
// Параметры:
//  РегВзаим      - Регистр.Поставщики
//  РегКнига      - Регистр.КнигаПокупок
//  ТаблДолгов    - Таблица долгов (описание см. в описании процедуры глДвижениеДолгов())
//  ТаблИтогов    - Таблица итогов, выгруженных из регистра взаиморасчетов
//  СписокПогСумм - список значений, списываемые суммы проводимого документа поставки.
//  АвансУпр      - сумма погашаемой части найденного аванса (в валюте упр. учета)
//  АвансРуб      - сумма погашаемой части найденного аванса (в валюте бух. учета)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение по взаиморасчетам события "Погашение валютного аванса, выданного поставщику, 
//  импортной поставкой".
//
Процедура ПогашениеАвансаПостИмпортом(РегВзаим,РегКнига,ТаблДолгов,ТаблИтогов,СписокПогСумм,
	АвансУпр,АвансРуб)
	
	СуммаВал 		= СписокПогСумм.Получить("СуммаВал");
	СуммаУпр 		= СписокПогСумм.Получить("СуммаУпр");
	СуммаРуб 		= СписокПогСумм.Получить("СуммаРуб");
	СуммаНП 		= СписокПогСумм.Получить("СуммаНП"); 
	СуммаНДС 		= СписокПогСумм.Получить("СуммаНДС"); 
	
	ЗапомнимКО = РегВзаим.КодОперации; // запомним установленный код операции
	
	// нужно сторно (аванса) и последующий зачет его
	// сначала зачет 
	РегВзаим.ВидДолга 		= ТаблДолгов.ВидДолга;
	РегВзаим.КредДокумент 	= ТаблДолгов.КредДокумент;
	
	РегВзаим.СуммаВал 		= СуммаВал;
	РегВзаим.СуммаУпр 		= СуммаУпр; 
	РегВзаим.СуммаРуб 		= СуммаРуб;
	
	РегВзаим.КодОперации	= глКО.ЗачтенАвансПоставщику;
	РегВзаим.ДокументОплаты = ТаблИтогов.КредДокумент;
	// здесь наоборот!
	РегВзаим.ДвижениеПриходВыполнить();
	
	КурсРазницаУпр = СуммаУпр - АвансУпр;
	КурсРазницаРуб = СуммаРуб - АвансРуб;
	
	// курсовая разница (переоценивается аванс)
	Если (КурсРазницаУпр<>0) или (КурсРазницаРуб<>0) Тогда
		
		// теперь сторно
		// установим общие для всех движений атрибуты
		РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
		РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
		
		РегВзаим.КодОперации = глКО.КурсоваяРазница;
		
		// знак движения курсовой разницы для целей правильного формирования проводок 
		// поставим в соответствии со знаком курсовой разницы
		Если КурсРазницаРуб < 0 Тогда
			// отразим во взаиморасчетах
			РегВзаим.СуммаВал 	= 0;
			РегВзаим.СуммаУпр 	= - КурсРазницаУпр;
			РегВзаим.СуммаРуб 	= - КурсРазницаРуб;
			
			РегВзаим.ДвижениеРасходВыполнить();
		Иначе
			// отразим во взаиморасчетах
			РегВзаим.СуммаВал 	= 0;
			РегВзаим.СуммаУпр 	= КурсРазницаУпр;
			РегВзаим.СуммаРуб 	= КурсРазницаРуб;
			
			РегВзаим.ДвижениеПриходВыполнить();
		КонецЕсли;
	КонецЕсли;
	
	// теперь сторно
	// установим общие для всех движений атрибуты
	РегВзаим.ВидДолга			= ТаблИтогов.ВидДолга;
	РегВзаим.КредДокумент		= ТаблИтогов.КредДокумент;
	
	// ресурсы
	РегВзаим.СуммаВал			= СуммаВал;
	РегВзаим.СуммаУпр			= СуммаУпр; // по курсу, по которому был получен аванс
	РегВзаим.СуммаРуб			= СуммаРуб; // по курсу, по которому был получен аванс
	
	РегВзаим.КодОперации		= глКО.СторнированАванс;
	РегВзаим.ДокументОплаты 	= "";
	РегВзаим.ДвижениеРасходВыполнить();
	
	РегВзаим.КодОперации = ЗапомнимКО; // восстановим исходный КО
	
КонецПроцедуры // ПогашениеАвансаПостИмпортом()

//******************************************************************************            
// глДвижениеДолгов(Конт, Договор, ТаблДолгов, СписокПараметров, ВремВзаим, ПривязыватьСтроку)
//                                                                                           
// Параметры:
//   Конт              - контекст проводимого документа
//   Договор           - договор с контрагентом
//   ТаблДолгов        - таблица значений долгов.
// 		Табл долгов должна содержать следующие колонки:
// 		1) "КредДокумент"  - (на который будет отнесен долг, текущий документ как правило)
// 		2) "СтавкаНДС"     - ставка НДС долга
// 		3) "СтавкаНП"      - ставка НП долга
// 		4) "ОблагаетсяНП"  - (1 - да, 0 - нет). Задается и для платежей, и для отгрузок.
// 		5) "ВидДолга"      - (перечисление. видыдолга). Для оплат - это "аванс", для отгрузок - соотв.!
// 		6) "СуммаУпр" 	   - в валюте упр Учета
// 		7) "СуммаРуб" 	   - в валюте бух Учета
// 		8) "Сумма" 	       - в валюте взаиморасчетов
// 		9) "СуммаНДС" 	   - сумма НДС долга в валюте бух. учета
// 		10)"СуммаНП" 	   - сумма НП долга в валюте бух. учета
// 		11)"Себестоимость" - (отгрузки) - в валюте бух. Учета (для покупателей)
// 		12)"ДоговорКомитента" - договор комитента при продаже комм. товаров (для покупателей)
//   СписокПараметров  - список параметров проведения документа.
//                     (использ. "Фирма", "КодОперации", "ЗнакДвижения")
//   ВремВзаим         - регистр.Покупатели или Регистр.Поставщики, рассчитанный и с фильтрами
//   ПривязыватьСтроку - 1 (привязывать строку), 0 (не привязывать строку при движении)  
//	 ВремКнигаПродаж   - рассчитанный регистр КнигаПродаж	
//                         
// Описание:
//  Основная процедура по проведению по регистрам взаиморасчетов ("Покупатели" и "Поставщики"),
//  а также "КнигаПокупок" и "КнигаПродаж".
//
Процедура глДвижениеДолгов(Конт, Договор, ТаблДолгов, СписокПараметров, ВремВзаим, ПривязыватьСтроку=0, ВремКнигаПродаж=0) Экспорт
	
	Перем ТаблИтогов; // ТЗ, в которую выгружаем итоги
	Перем РегВзаим, РегКнигаПокупок, РегКнигаПродаж;
	Перем СписокВсехСтавокНП; 
	Перем СписокПогСумм; // список сумм к погашению     
	
	СписокПогСумм = СоздатьОбъект("СписокЗначений");
	
	РегистрУчета 		= ВремВзаим.Вид();
	СписокВсехСтавокНП	= глПолучитьСписокВсехНП();
	
	Фирма			= СписокПараметров.Получить("Фирма");
	КодОперации		= СписокПараметров.Получить("КодОперации");
	ЗнакДвижения	= СписокПараметров.Получить("ЗнакДвижения");// + увел долга, - уменьшение
	
	РегКнигаПокупок = Конт.Регистр.КнигаПокупок;
	РегКнигаПродаж  = Конт.Регистр.КнигаПродаж;
	Если РегистрУчета  ="Поставщики" Тогда
		РегВзаим	   = Конт.Регистр.Поставщики;
		
	ИначеЕсли РегистрУчета="Покупатели" Тогда
		РегВзаим	   = Конт.Регистр.Покупатели;
		
	КонецЕсли;
	
	ТаблДолгов.ВыбратьСтроки();
	Пока ТаблДолгов.ПолучитьСтроку()=1 Цикл
		
		Если ПривязыватьСтроку <>0 Тогда
			РегВзаим.       ПривязыватьСтроку(ТаблДолгов.НомерСтрокиДокумента);
			РегКнигаПокупок.ПривязыватьСтроку(ТаблДолгов.НомерСтрокиДокумента);
			РегКнигаПродаж .ПривязыватьСтроку(ТаблДолгов.НомерСтрокиДокумента);
		КонецЕсли;  
		
		// запомним, сколько погасить надо по каждому виду сумм
		ОстПогСумма		= ТаблДолгов.Сумма;
		ОстПогСуммаУпр	= ТаблДолгов.СуммаУпр;
		ОстПогСуммаРуб	= ТаблДолгов.СуммаРуб;
		ОстПогСуммаНДС	= ТаблДолгов.СуммаНДС;
		ОстПогСуммаНП	= ТаблДолгов.СуммаНП;
		Если РегистрУчета = "Покупатели" Тогда
			ОстПогСебестоимость	= ТаблДолгов.Себестоимость;
		КонецЕсли;
		
		// авансом погашенные суммы. их следует прибавить к основному движению
		АвансСумма		= 0;
		АвансСуммаУпр	= 0;
		АвансСуммаРуб	= 0;
		АвансСуммаНДС	= 0;
		АвансСуммаНП	= 0;
		Если РегистрУчета = "Покупатели" Тогда
			АвансСебестоимость	= 0;
		КонецЕсли;
		
		//  ***************************** установка фильтров ******************
		ВремВзаим.УстановитьЗначениеФильтра("Фирма"		,Фирма,		1);
		ВремВзаим.УстановитьЗначениеФильтра("Договор"	,Договор,	1);
		// ставка НП - только для покупателей
		Если РегистрУчета="Покупатели" Тогда
			
			Если ТаблДолгов.ОблагаетсяНП=1 Тогда
				Если (ПустоеЗначение(ТаблДолгов.СтавкаНП)=0) и
				((ТаблДолгов.ВидДолга = глВД.Аванс) ИЛИ (ТаблДолгов.ВидДолга = глВД.АвансВал))
				Тогда
					// если это оплата, и выбрана конкретная ставка НП
					ВремВзаим.УстановитьЗначениеФильтра("СтавкаНП",ТаблДолгов.СтавкаНП,1);
				Иначе // фильтр по всем возможным ставкам
					ВремВзаим.УстановитьЗначениеФильтра("СтавкаНП",СписокВсехСтавокНП,2);
				КонецЕсли;                            
				
			Иначе     
				ВремВзаим.УстановитьЗначениеФильтра("СтавкаНП",ПолучитьПустоеЗначение("Справочник.СтавкиНП"),1);
			КонецЕсли;
			
		КонецЕсли;                                                             
		//  ************************** окончена установка фильтров ************
		
		// установим общие для всех движений измерения
		РегВзаим.Фирма       = Фирма;
		РегВзаим.Договор     = Договор;
		РегВзаим.КодОперации = КодОперации; // если меняем - восстановить обратно!
		//  ************************** установили                          ****
		
		ВремВзаим.ВыгрузитьИтоги(ТаблИтогов,1,1);
		ТаблИтогов.Сортировать("+КредДокумент",1); // погашаем долги по ФИФО  
		
		ТаблИтогов.ВыбратьСтроки();
		Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ОстПогСумма<>0) Цикл
			ВторойПроход = 0;
			
			Если ТаблИтогов.СуммаВал*ЗнакДвижения>=0 Тогда
				// не погашаем долги, имеющие тот же знак
				Продолжить;
			КонецЕсли;
			
			Если ТаблИтогов.СуммаВал*?(ЗнакДвижения>0,-1,1)>=ОстПогСумма Тогда 
				// остаток долга больше, чем нам надо списать
				КоэффПогашения	= ОстПогСумма/ТаблИтогов.СуммаВал; 
				ПогаситьВал 	= ОстПогСумма;
			Иначе
				КоэффПогашения	= ?(ТаблИтогов.СуммаВал<0,-1,1);
				ПогаситьВал 	= ТаблИтогов.СуммаВал*?(ТаблИтогов.СуммаВал<0,-1,1);
			КонецЕсли;
			
			// часть найденной задолженности, которую надо погасить
			ПогаситьУпр 			= Окр(ТаблИтогов.СуммаУпр	* КоэффПогашения,2,1);
			ПогаситьРуб 			= Окр(ТаблИтогов.СуммаРуб	* КоэффПогашения,2,1);
			Если РегистрУчета = "Покупатели" Тогда
				ПогаситьНП 				= Окр(ТаблИтогов.СуммаНП	* КоэффПогашения,2,1);
				ПогаситьСебестоимость	= Окр(ТаблИтогов.Себестоимость* КоэффПогашения,2,1);
			КонецЕсли;
			
			КоэффСписания = ПогаситьВал/ОстПогСумма; // какая часть проводимого долга спишется
			
			СписСумма 			= ПогаситьВал;
			СписСуммаУпр 		= Окр(ОстПогСуммаУпр	* КоэффСписания,2,1);
			СписСуммаРуб 		= Окр(ОстПогСуммаРуб	* КоэффСписания,2,1);
			СписСуммаНДС 		= Окр(ОстПогСуммаНДС	* КоэффСписания,2,1);
			СписСуммаНП	 		= Окр(ОстПогСуммаНП		* КоэффСписания,2,1);
			СписокПогСумм.Установить("СуммаВал",СписСумма);
			СписокПогСумм.Установить("СуммаУпр",СписСуммаУпр);
			СписокПогСумм.Установить("СуммаРуб",СписСуммаРуб);
			СписокПогСумм.Установить("СуммаНДС",СписСуммаНДС);
			СписокПогСумм.Установить("СуммаНП", СписСуммаНП);
			Если РегистрУчета = "Покупатели" Тогда
				СписСебестоимость 	= Окр(ОстПогСебестоимость*КоэффСписания,2,1);
				СписокПогСумм.Установить("Себестоимость",СписСебестоимость);
			КонецЕсли;      
			
			Гасим = 0;            
			ПогашенАванс = 0;
			// проанализируем долг, если можно погасить его - гасим.
			ВидДолга 	= ТаблИтогов.ВидДолга;
			ВидДвижения = ТаблДолгов.ВидДолга;
			Если (ВидДолга = глВД.ДолгЗаТовары) 
			или  (ВидДолга = глВД.ДолгЗаТоварыПринятые) 
			или  (ВидДолга = глВД.ДолгЗаПродукцию) 
			или  (ВидДолга = глВД.ДолгЗаУслуги)  
			или  (ВидДолга = глВД.ДолгЗаМатериалы) 
			или  (ВидДолга = глВД.Прочее) 
			или  (ВидДолга = глВД.ДолгЗаОС) 
			или  (ВидДолга = глВД.ДолгЗаНМА) 
			Тогда  
				Если  (ВидДвижения = глВД.Аванс) Тогда
					Если (РегистрУчета = "Покупатели") 
					и    (ЗнакДвижения < 0) 
					Тогда
						ОплатаОтгрузкиПокупателем(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						Гасим = 1;
					ИначеЕсли (РегистрУчета = "Покупатели") 
					и         (ЗнакДвижения > 0) 
					Тогда
						ВозвратДенегПокупателю(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						Гасим = 1;					
					ИначеЕсли (РегистрУчета = "Поставщики") 
					и         (ЗнакДвижения > 0) 
					Тогда
						ОплатаПоставкиПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						Гасим = 1;
					ИначеЕсли (РегистрУчета = "Поставщики") 
					и         (ЗнакДвижения < 0) 
					Тогда
						ВозвратДенегОтПоставщика(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						
						Гасим = 1;
					КонецЕсли;                            
					
				ИначеЕсли (ВидДвижения = глВД.ДолгЗаТовары) 
				или       (ВидДвижения = глВД.ДолгЗаТоварыПринятые) 
				или       (ВидДвижения = глВД.ДолгЗаПродукцию) 
				или       (ВидДвижения = глВД.ДолгЗаУслуги)  
				или       (ВидДвижения = глВД.ДолгЗаМатериалы) 
				или       (ВидДвижения = глВД.Прочее)
				или       (ВидДвижения = глВД.ДолгЗаОС) 
				или       (ВидДвижения = глВД.ДолгЗаНМА) 
				Тогда
					Если (РегистрУчета = "Поставщики") 
					и    (ЗнакДвижения > 0) 
					и    (глЕстьРеквизитШапки("ДокОснование",ТаблДолгов.КредДокумент.Вид()) = 1)
					Тогда     
						Если (ТаблИтогов.КредДокумент = ТаблДолгов.КредДокумент.ДокОснование) 
						или (ПустоеЗначение(ТаблДолгов.КредДокумент.ДокОснование)=1)Тогда
							// Если у нас есть неоплаченные суммы по документу-основанию или документ-основание
							// не выбран, то это - неоплаченный возврат
							НеоплаченныйВозвратПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
							ПогаситьУпр,ПогаситьРуб);
							Гасим = 1;
						Иначе
							// Если имеются другие долги, то устанавливаем флаг для того, чтобы на втором проходе
							// их можно было погасить
							ВторойПроход = 1;
						КонецЕсли;
					ИначеЕсли (РегистрУчета = "Поставщики") 
					и    (ЗнакДвижения < 0) Тогда  // зачет возврата как оплаты
						ПогашениеВозвратаПостПоставкой(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						Гасим = 1; 
						ПогашенАванс = 1;
						
					ИначеЕсли (РегистрУчета = "Покупатели") 
					и         (ЗнакДвижения < 0) 
					и         (глЕстьРеквизитШапки("ДокОснование",ТаблДолгов.КредДокумент.Вид()) = 1)
					Тогда 
						Если (ТаблИтогов.КредДокумент = ТаблДолгов.КредДокумент.ДокОснование) Тогда
							// Если у нас есть неоплаченные суммы по документу-основанию, их надо погасить
							Если ВидДвижения = ВидДолга Тогда
								НеоплаченныйВозвратОтПокупателя(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
								ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
								Гасим = 1;
							КонецЕсли;
						Иначе             
							// Если имеются другие долги, то устанавливаем флаг для того, чтобы на втором проходе
							// их можно было погасить
							ВторойПроход = 1;
						КонецЕсли;
					ИначеЕсли (РегистрУчета = "Покупатели") 
					и         (ЗнакДвижения > 0) Тогда
						ПогашениеВозвратаПокупОтгрузкой(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						Гасим = 1; 
						ПогашенАванс = 1;
					КонецЕсли;
					
				КонецЕсли;                            
				
			ИначеЕсли (ВидДолга = глВД.Аванс) Тогда
				Если (ВидДвижения = глВД.ДолгЗаТовары) 
				или  (ВидДвижения = глВД.ДолгЗаТоварыПринятые) 
				или  (ВидДвижения = глВД.ДолгЗаПродукцию) 
				или  (ВидДвижения = глВД.ДолгЗаУслуги)  
				или  (ВидДвижения = глВД.ДолгЗаМатериалы) 
				или  (ВидДвижения = глВД.Прочее)         
				или  (ВидДвижения = глВД.ДолгЗаОС) 
				или  (ВидДвижения = глВД.ДолгЗаНМА) 
				или  (ВидДвижения = глВД.ДолгВал) 
				Тогда
					Если (РегистрУчета = "Покупатели") и (ЗнакДвижения>0) Тогда
						ПогашениеАвансаПокупОтгрузкой(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						Гасим = 1; 
						ПогашенАванс = 1;
					ИначеЕсли (РегистрУчета = "Поставщики") и (ЗнакДвижения<0) Тогда
						ПогашениеАвансаПостПоставкой(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						Гасим = 1; 
						ПогашенАванс = 1;
					КонецЕсли;                         
				ИначеЕсли (ВидДвижения = глВД.Аванс) Тогда
					Если (РегистрУчета = "Покупатели") и (ЗнакДвижения>0) Тогда
						ВозвратДенегПокупателю(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						// это есть возврат неизрасходованного аванса 
						Гасим = 1;
					ИначеЕсли (РегистрУчета = "Покупатели") и (ЗнакДвижения<0) Тогда    
						ВозвратАвансаПокупателю(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
						Гасим = 1; 
					ИначеЕсли (РегистрУчета = "Поставщики") и (ЗнакДвижения<0) Тогда
						ВозвратДенегОтПоставщика(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						// это есть возврат неизрасходованного аванса 
						Гасим = 1;
					КонецЕсли;                         	
				КонецЕсли;                         
				
			ИначеЕсли (ВидДолга = глВД.ДолгВал) 
			или (ВидДолга = глВД.ПрочееВал) 
			Тогда	 
				Если (ВидДвижения 	= глВД.АвансВал) или (ВидДвижения 	= глВД.Аванс) Тогда
					Если (РегистрУчета = "Поставщики") и (ЗнакДвижения >0) Тогда
						ОплатаИмпортаПоставщику(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						Гасим = 1;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли (ВидДолга = глВД.АвансВал) Тогда
				Если (ВидДвижения 	= глВД.ДолгВал) 
				или (ВидДвижения   = глВД.ПрочееВал) 
				Тогда
					Если (РегистрУчета = "Поставщики") и (ЗнакДвижения <0) Тогда
						ПогашениеАвансаПостИмпортом(РегВзаим,РегКнигаПокупок,ТаблДолгов,ТаблИтогов,СписокПогСумм,
						ПогаситьУпр,ПогаситьРуб);
						Гасим = 1; 
						ПогашенАванс = 1;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ((ВидДвижения = глВД.РозничнаяВыручка) 
			и ((ВидДолга = глВД.ДолгЗаТоварыВРознице) 
			или (ВидДолга = глВД.ДолгЗаТоварыПринятыеВРознице) 
			или (ВидДолга = глВД.ДолгЗаПродукциюВРознице) 
			или (ВидДолга = глВД.ДолгЗаУслугиВРознице)
			)   
			) 	
			или ((ВидДвижения = глВД.РозничнаяВыручкаЕНВД)      
			и (ВидДолга = глВД.ДолгЗаТоварыВРозницеЕНВД)
			)
			Тогда
				ОплатаОтгрузкиПокупателем(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
				ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
				Гасим = 1;
				
			ИначеЕсли (((ВидДвижения = глВД.ДолгЗаТоварыВРознице) 
			или (ВидДвижения = глВД.ДолгЗаТоварыПринятыеВРознице)
			или (ВидДвижения = глВД.ДолгЗаПродукциюВРознице) 
			или (ВидДвижения = глВД.ДолгЗаУслугиВРознице)
			) 
			и (ВидДолга = глВД.РозничнаяВыручка)
			) 
			или ((ВидДвижения = глВД.ДолгЗаТоварыВРозницеЕНВД) 
			и (ВидДолга = глВД.РозничнаяВыручкаЕНВД)
			)
			Тогда          
				
				// В случае зачета розничной выручки нам необходимо сторнировать аванс по книге продаж  
				
				ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",ТаблИтогов.КредДокумент,1);
				ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    ВидДолга,    1); 
				
				ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
				
				ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);  
				
				ПогашениеАвансаПокупОтгрузкой(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
				ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость, ТИКнигаПродаж);  
				Гасим = 1;  
				ПогашенАванс = 1;
			КонецЕсли; 
			
			Если Гасим = 1 Тогда
				// уменьшим остаток погашения
				ОстПогСумма		= ОстПогСумма	 - СписСумма;
				ОстПогСуммаУпр	= ОстПогСуммаУпр - СписСуммаУпр;
				ОстПогСуммаРуб	= ОстПогСуммаРуб - СписСуммаРуб;
				ОстПогСуммаНДС	= ОстПогСуммаНДС - СписСуммаНДС;
				ОстПогСуммаНП	= ОстПогСуммаНП  - СписСуммаНП;
				Если РегистрУчета = "Покупатели" Тогда
					ОстПогСебестоимость = ОстПогСебестоимость - СписСебестоимость;
				КонецЕсли;
			КонецЕсли;                   
			
			Если ПогашенАванс = 1 Тогда
				// авансом погашенные суммы. их следует прибавить к основному движению
				// по отгрузке
				АвансСумма		= АвансСумма    + СписСумма;
				АвансСуммаУпр	= АвансСуммаУпр + СписСуммаУпр;
				АвансСуммаРуб	= АвансСуммаРуб + СписСуммаРуб;
				АвансСуммаНДС	= АвансСуммаНДС + СписСуммаНДС;
				АвансСуммаНП	= АвансСуммаНП  + СписСуммаНП;
				Если РегистрУчета = "Покупатели" Тогда
					АвансСебестоимость	= АвансСебестоимость + СписСебестоимость;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; // по строкам таблицы итогов	      
		
		
		// Второй проход
		Если (ВторойПроход = 1) и (ОстПогСумма <> 0) Тогда
			
			//Для второго прохода надо обновить таблицу итогов
			ВремВзаим.ВыгрузитьИтоги(ТаблИтогов,1,1);
			ТаблИтогов.Сортировать("+КредДокумент",1); // погашаем долги по ФИФО      
			
			ТаблИтогов.ВыбратьСтроки();
			Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ОстПогСумма<>0) Цикл
				
				Если ТаблИтогов.СуммаВал*ЗнакДвижения>=0 Тогда
					// не погашаем долги, имеющие тот же знак
					Продолжить;
				КонецЕсли;
				
				Если ТаблИтогов.СуммаВал*?(ЗнакДвижения>0,-1,1)>=ОстПогСумма Тогда 
					// остаток долга больше, чем нам надо списать
					КоэффПогашения	= ОстПогСумма/ТаблИтогов.СуммаВал; 
					ПогаситьВал 	= ОстПогСумма;
				Иначе
					КоэффПогашения	= ?(ТаблИтогов.СуммаВал<0,-1,1);
					ПогаситьВал 	= ТаблИтогов.СуммаВал*?(ТаблИтогов.СуммаВал<0,-1,1);
				КонецЕсли;
				
				// часть найденной задолженности, которую надо погасить
				ПогаситьУпр 			= Окр(ТаблИтогов.СуммаУпр	* КоэффПогашения,2,1);
				ПогаситьРуб 			= Окр(ТаблИтогов.СуммаРуб	* КоэффПогашения,2,1);
				Если РегистрУчета = "Покупатели" Тогда
					ПогаситьНП 				= Окр(ТаблИтогов.СуммаНП	* КоэффПогашения,2,1);
					ПогаситьСебестоимость	= Окр(ТаблИтогов.Себестоимость* КоэффПогашения,2,1);
				КонецЕсли;
				
				КоэффСписания = ПогаситьВал/ОстПогСумма; // какая часть проводимого долга спишется
				
				СписСумма 			= ПогаситьВал;
				СписСуммаУпр 		= Окр(ОстПогСуммаУпр	* КоэффСписания,2,1);
				СписСуммаРуб 		= Окр(ОстПогСуммаРуб	* КоэффСписания,2,1);
				СписСуммаНДС 		= Окр(ОстПогСуммаНДС	* КоэффСписания,2,1);
				СписСуммаНП	 		= Окр(ОстПогСуммаНП		* КоэффСписания,2,1);
				СписокПогСумм.Установить("СуммаВал",СписСумма);
				СписокПогСумм.Установить("СуммаУпр",СписСуммаУпр);
				СписокПогСумм.Установить("СуммаРуб",СписСуммаРуб);
				СписокПогСумм.Установить("СуммаНДС",СписСуммаНДС);
				СписокПогСумм.Установить("СуммаНП", СписСуммаНП);
				Если РегистрУчета = "Покупатели" Тогда
					СписСебестоимость 	= Окр(ОстПогСебестоимость*КоэффСписания,2,1);
					СписокПогСумм.Установить("Себестоимость",СписСебестоимость);
				КонецЕсли;      
				
				Гасим = 0;            
				ПогашенАванс = 0;
				// проанализируем долг, если можно погасить его - гасим.
				ВидДолга 	= ТаблИтогов.ВидДолга;
				ВидДвижения = ТаблДолгов.ВидДолга;
				Если (ВидДолга = глВД.ДолгЗаТовары) 
				или  (ВидДолга = глВД.ДолгЗаТоварыПринятые) 
				или  (ВидДолга = глВД.ДолгЗаПродукцию) 
				или  (ВидДолга = глВД.ДолгЗаУслуги)  
				или  (ВидДолга = глВД.ДолгЗаМатериалы) 
				или  (ВидДолга = глВД.Прочее) 
				или  (ВидДолга = глВД.ДолгЗаОС) 
				или  (ВидДолга = глВД.ДолгЗаНМА) 
				Тогда  
					Если (ВидДвижения = глВД.ДолгЗаТовары) 
					или  (ВидДвижения = глВД.ДолгЗаТоварыПринятые) 
					или  (ВидДвижения = глВД.ДолгЗаПродукцию) 
					или  (ВидДвижения = глВД.ДолгЗаУслуги)  
					или  (ВидДвижения = глВД.ДолгЗаМатериалы) 
					или  (ВидДвижения = глВД.Прочее)
					или  (ВидДвижения = глВД.ДолгЗаОС) 
					или  (ВидДвижения = глВД.ДолгЗаНМА) 
					Тогда
						Если (РегистрУчета = "Поставщики") 
						и    (ЗнакДвижения > 0) 
						и    (глЕстьРеквизитШапки("ДокОснование",ТаблДолгов.КредДокумент.Вид()) = 1)
						Тогда                                                                       
							ПогашениеДолгаПоставщикуВозвратом(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
							ПогаситьУпр,ПогаситьРуб);
							Гасим = 1;
						ИначеЕсли (РегистрУчета = "Покупатели") 
						и         (ЗнакДвижения < 0) 
						и         (глЕстьРеквизитШапки("ДокОснование",ТаблДолгов.КредДокумент.Вид()) = 1)
						Тогда 
							// Если у покупателя есть другие долги, то возврат направляется на их погашение
							ПогашениеДолгаПокупателяВозвратом(РегВзаим,РегКнигаПродаж,ТаблДолгов,ТаблИтогов,СписокПогСумм,
							ПогаситьУпр,ПогаситьРуб,ПогаситьНП,ПогаситьСебестоимость);
							Гасим = 1;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;  
				Если Гасим = 1 Тогда
					// уменьшим остаток погашения
					ОстПогСумма		= ОстПогСумма	 - СписСумма;
					ОстПогСуммаУпр	= ОстПогСуммаУпр - СписСуммаУпр;
					ОстПогСуммаРуб	= ОстПогСуммаРуб - СписСуммаРуб;
					ОстПогСуммаНДС	= ОстПогСуммаНДС - СписСуммаНДС;
					ОстПогСуммаНП	= ОстПогСуммаНП  - СписСуммаНП;
					Если РегистрУчета = "Покупатели" Тогда
						ОстПогСебестоимость = ОстПогСебестоимость - СписСебестоимость;
					КонецЕсли;
				КонецЕсли;                   
			КонецЦикла; // по строкам таблицы итогов (второй проход)
			
		КонецЕсли; // второй проход
		
		// прибавим к остатку погашения зачтенные авансом суммы.
		// их нужно прибавить к основному движению
		ОстПогСумма		= ОстПогСумма	 + АвансСумма;
		ОстПогСуммаУпр	= ОстПогСуммаУпр + АвансСуммаУпр;
		ОстПогСуммаРуб	= ОстПогСуммаРуб + АвансСуммаРуб;
		ОстПогСуммаНДС	= ОстПогСуммаНДС + АвансСуммаНДС;
		ОстПогСуммаНП	= ОстПогСуммаНП  + АвансСуммаНП;
		Если РегистрУчета = "Покупатели" Тогда
			ОстПогСебестоимость = ОстПогСебестоимость + АвансСебестоимость;
		КонецЕсли;
		
		Если (ОстПогСумма) <> 0 Тогда  // что - то осталось
			
			Если (ТаблДолгов.ВидДолга = глВД.Аванс) 
			или  (ТаблДолгов.ВидДолга = глВД.РозничнаяВыручка) 	
			или  (ТаблДолгов.ВидДолга = глВД.РозничнаяВыручкаЕНВД) 
			или  (ТаблДолгов.ВидДолга = глВД.АвансВал) 
			Тогда                  
				Если РегистрУчета = "Поставщики" Тогда
					ПредоплатаПоставщика(ЗнакДвижения,РегВзаим,ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб);
				Иначе   // покупатели
					ПредоплатаПокупателя(ЗнакДвижения,РегВзаим,ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб);
				КонецЕсли; 	
			Иначе
				Если РегистрУчета = "Поставщики" Тогда
					Если ЗнакДвижения < 0 Тогда
						ПолучениеОтПоставщика(РегВзаим,РегКнигаПокупок,ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб,ОстПогСуммаНДС,ОстПогСуммаНП);
					Иначе
						ВозвратПоставщику(    РегВзаим,РегКнигаПокупок, ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб,ОстПогСуммаНДС,ОстПогСуммаНП);
					КонецЕсли;
				Иначе // покупатели
					Если ЗнакДвижения < 0 Тогда
						ВозвратОтПокупателя(  РегВзаим,РегКнигаПродаж,ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб,ОстПогСуммаНДС,ОстПогСуммаНП,ОстПогСебестоимость);
					Иначе
						ОтгрузкаПокупателю(   РегВзаим,РегКнигаПродаж,ТаблДолгов,ОстПогСумма,ОстПогСуммаУпр,ОстПогСуммаРуб,ОстПогСуммаНДС,ОстПогСуммаНП,ОстПогСебестоимость);
					КонецЕсли;
				КонецЕсли; 	
			КонецЕсли;
		КонецЕсли; // осталось что - то погасить
		
	КонецЦикла; // по строкам таблицы долгов
	
КонецПроцедуры // глДвижениеДолгов()     

//******************************************************************************
// глФильтрПодотчетников(Конт,ФизЛицо, Валюта, СписокПараметров, ВремПодотчетныеЛица)
//
// Параметры:
//  Конт                - контекст проводимого документа
//	ФизЛицо             - подотчетник
//	Валюта              - валюта, в которой произошло движение долга
//	СписокПараметров    - список доп. параметров проведения (использ. "Фирма").
//	ВремПодотчетныеЛица - регистр "ПодотчетныеЛица", на который следует наложить фильтры
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтров на регистр "Подотчетные лица" при проведении. Если итоги не 
//  актуальны - взводится флаг временного расчета.
//
Процедура глФильтрПодотчетников(Конт,ФизЛицо, Валюта, СписокПараметров, ВремПодотчетныеЛица) Экспорт
	
	Фирма			= СписокПараметров.Получить("Фирма");
	
	ВремПодотчетныеЛица.УстановитьЗначениеФильтра("Фирма",	Фирма,	1);
	ВремПодотчетныеЛица.УстановитьЗначениеФильтра("ФизЛицо",ФизЛицо,1);
	ВремПодотчетныеЛица.УстановитьЗначениеФильтра("Валюта",	Валюта,	1);
	
	Если Конт.ИтогиАктуальны() = 0 Тогда
		ВремПодотчетныеЛица.ВременныйРасчет(1);
	КонецЕсли;
	
КонецПроцедуры // глФильтрПодотчетников()

//******************************************************************************
// глОбработкаПроведенияПоПодотчетнику()
//
// Параметры:
//  Конт             - контекст проводимого документа.
//	ФизЛицо          - подотчетник
//	Валюта           - валюта, вкоторой произошло движение долга
//	Сумма            - сумма в валюте движения долга
//	СуммаУпр         - сумма проводимого долга в валюте управленческого учета
//	СуммаРуб         - сумма проводимого долга  в валюте бухгалтерского учета
//	СписокПараметров - список дополнительных параметров проведения.
//                     (использ. "Фирма", "КодОперации", "ЗнакДвижения")
//	ВремПодЛица      - регистр подотчетные лица, рассчитанный и с наложенными фильтрами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Содержит алгоритм проведения документа по регистру "ПодотчетныеЛица".
//
Процедура глОбработкаПроведенияПоПодотчетнику(Конт,ФизЛицо,Валюта,Сумма,СуммаУпр,СуммаРуб,СписокПараметров,ВремПодЛица) Экспорт
	
	РегПодЛица 		= Конт.Регистр.ПодотчетныеЛица;
	Фирма		 	= СписокПараметров.Получить("Фирма");
	КодОперации		= СписокПараметров.Получить("КодОперации");
	ЗнакДвижения	= СписокПараметров.Получить("ЗнакДвижения");// + увел долга, - уменьшение
	
	ВремПодЛица.УстановитьЗначениеФильтра("Фирма",	Фирма,	1);
	ВремПодЛица.УстановитьЗначениеФильтра("ФизЛицо",ФизЛицо,1);
	ВремПодЛица.УстановитьЗначениеФильтра("Валюта",	Валюта,	1);
	
	ОстПогСуммаВал 	= Сумма;
	ОстПогСуммаУпр 	= СуммаУпр;
	ОстПогСуммаРуб 	= СуммаРуб;
	
	ТаблИтогов = СоздатьОбъект("ТаблицаЗначений");
	ВремПодЛица.ВыгрузитьИтоги(ТаблИтогов,1,1);
	
	ТаблИтогов.ВыбратьСтроки();
	Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ОстПогСуммаВал>0) Цикл
		Если ТаблИтогов.СуммаВал*ЗнакДвижения>=0 Тогда
			Продолжить; // долги с тем же знаком - пропускаем
		КонецЕсли; 
		
		Если ТаблИтогов.СуммаВал*?(ЗнакДвижения>0,-1,1)>=ОстПогСуммаВал Тогда 
			// остаток долга больше, чем нам надо списать
			КоэффПогашения	= ОстПогСуммаВал/ТаблИтогов.СуммаВал; 
			ПогаситьВал 	= ОстПогСуммаВал;
		Иначе
			КоэффПогашения	= ?(ТаблИтогов.СуммаВал<0,-1,1);
			ПогаситьВал 	= ТаблИтогов.СуммаВал*?(ТаблИтогов.СуммаВал<0,-1,1);
		КонецЕсли;
		
		// часть найденной задолженности, которую надо погасить
		ПогаситьУпр 			= Окр(ТаблИтогов.СуммаУпр	* КоэффПогашения,2,1);
		ПогаситьРуб 			= Окр(ТаблИтогов.СуммаРуб	* КоэффПогашения,2,1);
		
		КоэффСписания = ПогаситьВал/ОстПогСуммаВал; // какая часть проводимого долга спишется
		
		СписСуммаВал		= ПогаситьВал;
		СписСуммаУпр 		= Окр(ОстПогСуммаУпр	* КоэффСписания,2,1);
		СписСуммаРуб 		= Окр(ОстПогСуммаРуб	* КоэффСписания,2,1);
		
		// измерения
		РегПодЛица.Фирма 			= Фирма;
		РегПодЛица.ФизЛицо			= ФизЛицо;
		РегПодЛица.Валюта			= Валюта;
		РегПодЛица.КредДокумент		= ТаблИтогов.КредДокумент;
		// ресурсы
		РегПодЛица.СуммаВал			= СписСуммаВал;
		РегПодЛица.СуммаУпр			= СписСуммаУпр;
		РегПодЛица.СуммаРуб			= СписСуммаРуб;
		// реквизиты
		РегПодЛица.КодОперации 		= КодОперации; 
		Если ЗнакДвижения=1 Тогда
			РегПодЛица.ДвижениеПриходВыполнить();
		Иначе
			РегПодЛица.ДвижениеРасходВыполнить();
		КонецЕсли;    
		// списание курсовой разницы
		КурсРазницаУпр = СписСуммаУпр - ПогаситьУпр;
		КурсРазницаРуб = СписСуммаРуб - ПогаситьРуб;
		
		Если (КурсРазницаУпр<>0) или (КурсРазницаРуб<>0) Тогда
			
			РегПодЛица.КодОперации 	= глКО.КурсоваяРазница;
			
			// знак курсовой разницы по бух учету определяет приход или расход это
			Если КурсРазницаРуб < 0 Тогда
				РегПодЛица.СуммаВал 	= 0;
				РегПодЛица.СуммаУпр 	= - КурсРазницаУпр;
				РегПодЛица.СуммаРуб 	= - КурсРазницаРуб;
				Если ЗнакДвижения=1 Тогда // здесь наоборот
					РегПодЛица.ДвижениеПриходВыполнить();
				Иначе
					РегПодЛица.ДвижениеРасходВыполнить();
				КонецЕсли;    
			Иначе
				
				РегПодЛица.СуммаВал 	= 0;
				РегПодЛица.СуммаУпр 	= КурсРазницаУпр;
				РегПодЛица.СуммаРуб 	= КурсРазницаРуб;
				Если ЗнакДвижения=1 Тогда // здесь наоборот
					РегПодЛица.ДвижениеРасходВыполнить();
				Иначе
					РегПодЛица.ДвижениеПриходВыполнить();
				КонецЕсли;    
			КонецЕсли;
			
		КонецЕсли;
		
		// уменьшим остаток погашения
		ОстПогСуммаВал	= ОстПогСуммаВал - СписСуммаВал;
		ОстПогСуммаУпр	= ОстПогСуммаУпр - СписСуммаУпр;
		ОстПогСуммаРуб	= ОстПогСуммаРуб - СписСуммаРуб;
		
	КонецЦикла;   
	
	Если ОстПогСуммаВал<>0 Тогда
		// если после всей этой операции осталась кое что в Сумме,
		// а документы, которые надо погашать
		// исчерпаны, то надо просто эту сумму записать в Долг
		// измерения
		РегПодЛица.Фирма			= Фирма;
		РегПодЛица.ФизЛицо			= ФизЛицо;
		РегПодЛица.Валюта			= Валюта;
		РегПодЛица.КредДокумент		= Конт.ТекущийДокумент();
		// ресурсы
		РегПодЛица.СуммаВал			= ОстПогСуммаВал;
		РегПодЛица.СуммаУпр			= ОстПогСуммаУпр;
		РегПодЛица.СуммаРуб			= ОстПогСуммаРуб;
		// реквизиты                              
		РегПодЛица.КодОперации 		= КодОперации;
		Если ЗнакДвижения=1 Тогда
			РегПодЛица.ДвижениеПриходВыполнить();
		Иначе
			РегПодЛица.ДвижениеРасходВыполнить();
		КонецЕсли;
	КонецЕсли;      
	
КонецПроцедуры // глОбработкаПроведенияПоПодотчетнику()
       
Функция глПолучитьФирмуОстатков(ТекПроект) Экспорт
	Если ТекПроект.Выбран() = 0 Тогда
		СпрФирмыОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
		СпрФирмыОст.НайтиПоКоду("3"); 
		Возврат СпрФирмыОст.ТекущийЭлемент();
	Иначе
		Если ТекПроект.ФирмаОстатков.Выбран() = 0 Тогда
			СпрФирмыОст = СоздатьОбъект("Справочник.ФирмыУчетТоваров");
			СпрФирмыОст.НайтиПоКоду("3"); 
			Возврат СпрФирмыОст.ТекущийЭлемент();
		Иначе
			Возврат ТекПроект.ФирмаОстатков;	
		КонецЕсли;	
	КонецЕсли;	
КонецФункции	

//******************************************************************************
// глДвижениеОборотовПродаж(Конт, Фирма,Контрагент, Поставщик,Номенклатура,Количество,Себестоимость,ПродСтоимость)
//
// Параметры:  	Конт         - контекст проводимого документа 
//				Фирма        - фирма, от которой произведено движение
//				Контрагент   - покупатель
//				Поставщик    - поставщик ТМЦ (для продажи услуг пустое значение)
//				Номенклатура - проданная номенклатурная позиция
//				Количество   - проданное количество
//				Себестоимость- себестоимость проданных ТМЦ в валюте упр. учета
//				ПродСтоимость- прод. стоимость проданных ТМЦ в валюте упр. учета
//				Объект		 - по какому объекту было движение
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Производится движение оборотов по регистру "Продажи"
//  вызывается при проведении документов реализации/возврата от покупателя.
//
Процедура глДвижениеОборотовПродаж(Конт, 
	Фирма, 
	Контрагент, 
	Поставщик,
	Номенклатура,
	Количество,
	Себестоимость,
	ПродСтоимость,
	Объект) Экспорт
	
	РегПродажи = Конт.Регистр.Продажи;
	
	// измерения
	РегПродажи.Фирма		= Фирма;
	РегПродажи.Поставщик 	= Поставщик;
	РегПродажи.Покупатель 	= Контрагент;
	РегПродажи.Номенклатура = Номенклатура; 
	
	РегПродажи.ФирмаОстатков = глПолучитьФирмуОстатков(Конт.Проект);
	
	Если Объект<>"" Тогда
		РегПродажи.Объект = Объект;
	КонецЕсли;
	// ресурсы      
	Если Количество >= 0 Тогда
		РегПродажи.Себестоимость = Себестоимость;
		РегПродажи.ПродСтоимость = ПродСтоимость;
		РегПродажи.Количество 	 = Количество;
	Иначе                                 
		РегПродажи.СебестоимостьВ = - Себестоимость;
		РегПродажи.ПродСтоимостьВ = - ПродСтоимость;
		РегПродажи.КоличествоВ 	  = - Количество;
	КонецЕсли;
	
	РегПродажи.ДвижениеВыполнить();
	
КонецПроцедуры //глДвижениеОборотовПродаж()


////////////////////////////////////////////////////////////////////////////////
// Формирование печатных форм
//
//******************************************************************************
// глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="")
//
// Параметры: 
//  Текст             - Объект типа "Текст", содержащий текст файла описания внешней печатной формы
//  ТекущийВидОбъекта - текущий вид объекта ("Документ.ПоступлениеТМЦ"),
//                      запись про который ищем в тексте описания,
//                      если пусто, то считаем, что позвали для заполнения
//                      по тексту описания колонок "Название" и "Кнопка"
//  Название          - необязательноый параметр, переменная для возвращаемого
//                      значения названия внешней печатной формы
//
//  Кнопка            - необязательноый параметр, переменная для возвращаемого
//                      значения заголовка кнопки печати
//
// Возвращаемое значение:
//  1- если есть упоминание про текущий вид объекта в тексте описания,
//     т.е. данная обработка зарегистрирована для печати по контексту этого объекта, 
//  0 - если нет
//
// Описание:
//  Определяет данная обработка зарегистрирована для печати по контексту этого объекта 
//  или нет, попутно заполняет значение колонок "Название" и "Кнопка"
//
Функция глНайтиВнешнююПечФорму(Текст, ТекущийВидОбъекта, Название="", Кнопка="") Экспорт
	Перем Рез;
	Рез = 0;
	Для Инд=1 По Текст.КоличествоСтрок() Цикл
		Стр=Текст.ПолучитьСтроку(Инд);
		Поз=Найти(Стр,"=");
		Если Поз>0 Тогда
			Имя=Лев(Стр,Поз-1);
			Стр=Сред(Стр,Поз+1);
			Если Имя="Объект" Тогда
				
				// Если текущий вид объекта не задан, то хотят считать Название и кнопку
				Если ПустоеЗначение(ТекущийВидОбъекта) = 0 Тогда
					
					// Найдем в этой строке запись про текущий объект
					Если Найти(Стр,ТекущийВидОбъекта) = 0 Тогда;
						Прервать // Не нашли;
					Иначе 
						Рез = 1;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли Имя="Название" Тогда
				Название = Стр;
			ИначеЕсли Имя="Кнопка" Тогда
				Кнопка = Стр;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   
	Возврат Рез;
КонецФункции // глНайтиВнешнююПечФорму() 

//******************************************************************************
// глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм)
//
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
//
// Возвращаемое значение:
//  Номер строки в таблице печатных форм, 0 в случае ошибки.
//
// Описание:
//  Получает из текущих настроек пользователя номер текущей печатной 
//  формы и пытается найти его в таблице форм. Если не найдено, 
//  то берется первая форма и сохраняется в настройках
//  пользователя.
//  
Функция глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм) Экспорт
	
	Перем ИмяПечФормы, НомерСтроки;
	
	НомерСтроки = 0;
	
	Если ТаблицаПечФорм.КоличествоСтрок() > 0 Тогда
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// пытаемся найти форму в списке
		Если ПустоеЗначение(ИмяПечФормы) = 0 Тогда   
			ТаблицаПечФорм.НайтиЗначение(ИмяПечФормы, НомерСтроки, "Название");
		КонецЕсли;
		
		Если НомерСтроки = 0 Тогда
			// текущая печатная форма еще не найдена
			// установим по умолчанию первую из списка
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(1, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
			НомерСтроки = 1;
		КонецЕсли;
		
		// если задано имя файла, то форма внешняя, а для внешней формы нужно 
		// проверить наличие файла внешней обработки.
		Файл = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Файл");
		Если ПустоеЗначение(Файл) = 0  Тогда
			Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 0 Тогда
				Предупреждение("Выбранная обработка в каталоге внешних обработок печатных форм отсутствует!", 60 );
				НомерСтроки = 0;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глПолучитьТекущуюПечФорму()

//******************************************************************************
// глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм)
//
// Параметры: 
//  Конт            - контекст формы документа,
//  ВидОбъекта      - вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//  ТаблицаПечФорм  - таблица значений, которую надо заполнить 
//
// Возвращаемое значение:
//  Номер текущей печатной формы
//
// Описание:
//  Вызывается при открытии формы документа, формирует таблицу печатных форм,
//  добавляя туда предопределенную (в модуле документа), устанавливает заголовок кнопки печать
//
Функция глУстановкаКнопкиПечать(Конт, ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем Название, Кнопка;
	
	// Дополним таблицу печатных форм внешними обработками из предопределенного
	// каталога ExtForms\PrnForms
	Текст = СоздатьОбъект("Текст");
	ФайлОписания = ФС.НайтиПервыйФайл(глКаталогПечФорм+"*.efd");
	
	Пока ПустаяСтрока(ФайлОписания)=0 Цикл
		Текст.Открыть(глКаталогПечФорм+ФайлОписания);
		
		// Устанавливаем расширение 
		Файл = Лев(ФайлОписания,СтрДлина(ФайлОписания) - 4) + "." + "ert";
		Если ФС.СуществуетФайл(глКаталогПечФорм + Файл) = 1 Тогда
			
			// Внешний файл, соответствующий файлу описания, найден.
			// Проверим, в нем что есть запись про текущий объект
			Если глНайтиВнешнююПечФорму(Текст, """" + ВидОбъекта + """", Название, Кнопка) = 1 Тогда
				
				// Добавляем строку в список внешних файлов
				ТаблицаПечФорм.НоваяСтрока();
				ТаблицаПечФорм.Название     = Название;
				ТаблицаПечФорм.Кнопка       = Кнопка;
				ТаблицаПечФорм.Файл         = Файл;
				ТаблицаПечФорм.ФайлОписания = (ФайлОписания);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ФайлОписания = ФС.НайтиСледующийФайл();
		
	КонецЦикла;
	
	НомерСтроки = глПолучитьТекущуюПечФорму(ВидОбъекта, ТаблицаПечФорм);
	Если НомерСтроки = 0 Тогда
		ЗагловокКнПечать = "Печать";
	Иначе
		ЗагловокКнПечать = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Кнопка");
	КонецЕсли;
	Конт.Форма.кнПечать.Заголовок(ЗагловокКнПечать);
	
	Возврат НомерСтроки;
	
КонецФункции // глУстановкаКнопкиПечать()

//******************************************************************************
// глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм)
//   
// Параметры:
//  ВидОбъекта    - Вид объекта ("Документ.Реализация", "Элемент.Номенклатура" и т.д.),
//                  для которого надо получить печатную форму по умолчанию
//  ТаблицаПечФорм - таблица значений, содержащая список печатных форм для объекта требуемого вида
//  
// Возвращаемое значение:
//  Имя кнопки печатной формы
//
// Описание:
//  Открывает форму выбора из списка печатных форм. Выбранное значение
//  сохраняет в настройках пользователя
//
Функция глВыборПечатнойФормы(ВидОбъекта, ТаблицаПечФорм) Экспорт
	Перем НомерСтроки;
	
	НомерСтроки = 0;
	
	КолвоФорм = ТаблицаПечФорм.КоличествоСтрок();
	Поз = Найти(ВидОбъекта, ".");
	Вид = Лев(ВидОбъекта, Поз - 1);
	Если КолвоФорм = 0 Тогда
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа не зарегистрировано ни одной печатной формы.";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника не зарегистрировано ни одной печатной формы.";
		Иначе
			Текст = "Для элемента справочника не зарегистрировано ни одной печатной формы.";
		КонецЕсли;
		
		Предупреждение(Текст, 60);
		
	ИначеЕсли КолвоФорм = 1 Тогда
		НомерСтроки = 1;
		
		Если НРег(Вид) = "документ" Тогда
			Текст = "Для документа";
		ИначеЕсли НРег(Вид) = "справочник" Тогда
			Текст = "Для списка справочника";
		Иначе
			Текст = "Для элемента справочника";
		КонецЕсли;
		
		Текст = Текст + " зарегистрирована только одна печатная форма. 
		|Для регистрации дополнительных печатных форм воспользуйтесь 
		|пунктом ""Регистрация внешних печатных форм"" в меню ""Сервис"".";
		
		Предупреждение(Текст ,60);
	Иначе
		ИмяПечФормы	= ВосстановитьЗначение(ВидОбъекта + "ПечФорма");
		
		// выбираем печатную форму
		СписокПечФорм = СоздатьОбъект("СписокЗначений");
		ТаблицаПечФорм.Выгрузить(СписокПечФорм,,,"Название");
		
		Если СписокПечФорм.ВыбратьЗначение(ИмяПечФормы, "", НомерСтроки, 60, 1) = 1 Тогда
			ПечФорма = ТаблицаПечФорм.ПолучитьЗначение(НомерСтроки, "Название");
			СохранитьЗначение(ВидОбъекта + "ПечФорма", ПечФорма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НомерСтроки;
	
КонецФункции // глВыборПечатнойФормы()

//******************************************************************************
// глПолучитьСписокВидов(ВидЖурнала, ВсеДокументы, ВыбранныеДокументы)
//
// Параметры:
//	ВидЖурнала         - текстовая строка, содержащая вид журнала,
//                       если параметр не задан, получаем полный список видов документов
//	ВсеДокументы       - список значений, заполняемый данной функцией, куда попадут виды
//                       документов, не отображаемые в данном журнале
//	ВыбранныеДокументы - список значений, заполняемый данной функцией, куда попадут виды
//                       документов, отображаемые в данном журнале
//
// ВозвращаемоеЗначение:
//	Размер списка "ВыбранныеДокументы",
//	0 - что-то не сложилось        
//
// Описание:
// 	Формирует список видов документов, которые показывает журнал вида ВидЖурнала
// 	и помещает этот список в параметр ВыбранныеДокументы. 
//
Функция глПолучитьСписокВидов(ВидЖурнала, ВсеДокументы, ВыбранныеДокументы) Экспорт
	Перем Инд, ТекДок;
	
	Если ТипЗначенияСтр(ВсеДокументы) <> "СписокЗначений" Тогда
		ВсеДокументы	= СоздатьОбъект("СписокЗначений");
		
	КонецЕсли;
	
	Если ТипЗначенияСтр(ВыбранныеДокументы) <> "СписокЗначений" Тогда
		ВыбранныеДокументы	= СоздатьОбъект("СписокЗначений");
		
	КонецЕсли;
	
	Для Инд = 1 по Метаданные.Документ() Цикл
		ТекДок	= Метаданные.Документ(Инд);
		
		НеДобавлять	= 0;
		Если ПустоеЗначение(ВидЖурнала) = 0 Тогда
			// проверяем, а совпадает ли идентификатор журнала документа с
			// переданным идентификатором
			Если ТекДок.Журнал.Выбран() = 1 Тогда
				Если ТекДок.Журнал.Идентификатор <> ВидЖурнала Тогда
					НеДобавлять	= 1;
					
				КонецЕсли;
				
			Иначе
				// в документе журнал не задан.
				НеДобавлять	= 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеДобавлять = 1 Тогда
			ВсеДокументы.ДобавитьЗначение(Инд, ТекДок.Представление());
			
		Иначе
			ВыбранныеДокументы.ДобавитьЗначение(Инд, ТекДок.Представление());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыбранныеДокументы.РазмерСписка();
	
КонецФункции	// ПолучитьСписокВидов()

//******************************************************************************
// глПечатьРеестра(Конт, ИдЖурнала)
//
// Параметры:             
//	Конт      - контекст журнала,
//  ИдЖурнала - идентификатор журнала
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Печать реестра документа из журнала.
//
Процедура глПечатьРеестра(Конт, ИдЖурнала, флЕстьДокументы = 0, флНетДокументов = 0) Экспорт
	
	Перем ВсеДокументы, ВыбранныеДокументы, ТекЖурнал;
	Перем ИмяОтбора, ЗначениеОтбора, Представление;
	
	ТекЖурнал	= Метаданные.Журнал(ИдЖурнала);
	
	// тип журнала
	Если ТекЖурнал.ТипЖурнала = "Обычный" Тогда
		глПолучитьСписокВидов(ТекЖурнал.Идентификатор, ВсеДокументы, ВыбранныеДокументы);
		
	ИначеЕсли ТекЖурнал.ТипЖурнала = "Общий" Тогда
		глПолучитьСписокВидов(, ВсеДокументы, ВыбранныеДокументы);
		
	ИначеЕсли ТекЖурнал.ТипЖурнала = "Дополнительный" Тогда
		глПолучитьСписокВидов(, ВыбранныеДокументы, ВсеДокументы);
		ВыбранныеДокументы.УдалитьВсе();
		Для Инд = 1 по ТекЖурнал.Состав.Количество() Цикл
			ТекДок	 = ТекЖурнал.Состав.Получить(Инд);
			ВыбранныеДокументы.ДобавитьЗначение(ВсеДокументы.Получить(ТекДок.Представление()), ТекДок.Представление());
		КонецЦикла;     
		
	КонецЕсли;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", "РеестрДокументов");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", Конт.НачалоИнтервала());
	Расшифровка.Установить("ДатаКонца" , Конт.КонецИнтервала());
	
	ТекФирма		= 0;
	ТекЮрЛицо		= 0;
	ТекКонтрагент	= 0;
	ТекДоговор		= 0;
	ТекАвтор		= 0;
	ТекПроект		= 0;
	ТекСклад		= 0;
	
	УстановленОтбор	= Конт.ПолучитьОтбор(ИмяОтбора, ЗначениеОтбора);
	
	Если УстановленОтбор = 1 Тогда
		Если ИмяОтбора = "Фирма" Тогда
			ТекФирма		= ЗначениеОтбора;
			
		ИначеЕсли ИмяОтбора = "ЮрЛицо" Тогда
			ТекЮрЛицо		= ЗначениеОтбора;
			
		ИначеЕсли ИмяОтбора = "Контрагент" Тогда
			ТекКонтрагент	= ЗначениеОтбора;

		ИначеЕсли ИмяОтбора = "Покупатель" Тогда
			ТекКонтрагент	= ЗначениеОтбора;
			
		ИначеЕсли ИмяОтбора = "Автор" Тогда
			ТекАвтор		= ЗначениеОтбора;
			
		ИначеЕсли ИмяОтбора = "Проект" Тогда 
			ТекПроект		= ЗначениеОтбора;
			
		ИначеЕсли ИмяОтбора = "Склад" Тогда
			ТекСклад		= ЗначениеОтбора;
		
		ИначеЕсли ИмяОтбора	= "жПокуп" Тогда
			
			ВремСписок	= СоздатьОбъект("СписокЗначений");
			Для Инд = 1 по ВыбранныеДокументы.РазмерСписка() Цикл
				Значение	= ВыбранныеДокументы.ПолучитьЗначение(Инд, Представление);
				ИДдок	= Метаданные.Документ(Значение).Идентификатор;
				Если (ИДдок = "ЗаявкаПокупателя") или (ИДдок = "Реализация") Тогда
					// тот документ, который не нужно переносить
					ВремСписок.ДобавитьЗначение(Значение, Представление);
				Иначе
					ВсеДокументы.ДобавитьЗначение(Значение, Представление);
				КонецЕсли;
			КонецЦикла;
			ВремСписок.Выгрузить(ВыбранныеДокументы);

		ИначеЕсли (ИмяОтбора	= "ВидЗаявки") или (ИмяОтбора	= "ВидТипДокументаРозницаБезСклада") Тогда
			
			ВремСписок	= СоздатьОбъект("СписокЗначений");
			
			Для Инд = 1 по ВыбранныеДокументы.РазмерСписка() Цикл
				Значение	= ВыбранныеДокументы.ПолучитьЗначение(Инд, Представление);
				
				ИДдок	= Метаданные.Документ(Значение).Идентификатор;
				
				Если (ИДдок = "ЗаявкаПокупателя") Тогда
					// тот документ, который не нужно переносить
					ВремСписок.ДобавитьЗначение(Значение, Представление);
					
				Иначе
					ВсеДокументы.ДобавитьЗначение(Значение, Представление);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВремСписок.Выгрузить(ВыбранныеДокументы);
		Иначе
			// фильтр по виду документов
			// Перемещаем из списка ВыбранныеДокументы в список ВсеДокументы все,
			// но кроме того, по которому установлен отбор
			ВремСписок	= СоздатьОбъект("СписокЗначений");
			
			Для Инд = 1 по ВыбранныеДокументы.РазмерСписка() Цикл
				Значение	= ВыбранныеДокументы.ПолучитьЗначение(Инд, Представление);
				
				ИДдок	= Метаданные.Документ(Значение).Идентификатор;
				
				Если ИДдок = ИмяОтбора Тогда
					// тот документ, который не нужно переносить
					ВремСписок.ДобавитьЗначение(Значение, Представление);
					
				Иначе
					ВсеДокументы.ДобавитьЗначение(Значение, Представление);
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВремСписок.Выгрузить(ВыбранныеДокументы);
			
		КонецЕсли;
		
	ИначеЕсли Конт.Форма.РежимВыбора() > 0 Тогда // Журнал открыт для выбора документа(ов) определенного вида
		
		// есть хоть один документ, можно определить вид, 
		// если нет документа, то список выбранных видов будет пустым и отчет не сформируется
		ТекВидДляВыбора = Конт.ТекущийДокумент.Вид();
		
		// Перемещаем из списка ВыбранныеДокументы в список ВсеДокументы все виды документов,
		// но кроме того, который выбираем
		ВремСписок	= СоздатьОбъект("СписокЗначений");
		Для Инд = 1 по ВыбранныеДокументы.РазмерСписка() Цикл
			Значение	= ВыбранныеДокументы.ПолучитьЗначение(Инд, Представление);
			
			ИДдок	= Метаданные.Документ(Значение).Идентификатор;
			
			Если ИДдок = ТекВидДляВыбора Тогда                        
				
				// тот документ, который не нужно переносить
				ВремСписок.ДобавитьЗначение(Значение, Представление);
				
			Иначе
				ВсеДокументы.ДобавитьЗначение(Значение, Представление);
				
			КонецЕсли;
		КонецЦикла;
		
		ВремСписок.Выгрузить(ВыбранныеДокументы);
		
	ИначеЕсли ТипЗначенияСтр(Конт.ПодчинениеДокументу()) = "Документ" Тогда // журнал открыт как журнал подчиненных документов
		
		СписокПодчиненных = глПолучитьСписокВводимыхНаОсновании(Конт.ПодчинениеДокументу());
		
		// Перемещаем из списка ВыбранныеДокументы в список ВсеДокументы все виды документов,
		// но кроме тех, которые можно вводить на основании данного
		ВремСписок	= СоздатьОбъект("СписокЗначений");
		Для Инд = 1 по ВыбранныеДокументы.РазмерСписка() Цикл
			Значение	= ВыбранныеДокументы.ПолучитьЗначение(Инд, Представление);
			
			ИДдок	= Метаданные.Документ(Значение).Идентификатор;
			
			Если СписокПодчиненных.НайтиЗначение(ИдДок) > 0 Тогда
				
				// документ, вводимый на основании, не нужно переносить
				ВремСписок.ДобавитьЗначение(Значение, Представление);
				
			Иначе
				ВсеДокументы.ДобавитьЗначение(Значение, Представление);
			КонецЕсли;
		КонецЦикла;
		
		ВремСписок.Выгрузить(ВыбранныеДокументы);
		
	КонецЕсли; //УстановленОтбор = 1
	
	Расшифровка.Установить("ВыбФирма"     , ТекФирма);
	Расшифровка.Установить("ВыбЮрЛицо"    , ТекЮрЛицо);
	Расшифровка.Установить("ВыбКонтрагент", ТекКонтрагент);
	Расшифровка.Установить("ВыбДоговор"   , ТекДоговор);
	Расшифровка.Установить("ВыбАвтор"     , ТекАвтор);
	Расшифровка.Установить("ВыбПроект"    , ТекПроект);
	Расшифровка.Установить("ВыбСклад"     , ТекСклад); 
	
	Расшифровка.Установить("ИмяОтбора"     		, ИмяОтбора);
	Расшифровка.Установить("ЗначениеОтбора"     , ЗначениеОтбора);
	
	Расшифровка.Установить("ВклПроведенные", 1); 
	Расшифровка.Установить("ВклТекущие"    , 1);
	Расшифровка.Установить("ВклУдаленные"  , 0);	// помеченные на удаление не включаем

    Расшифровка.Установить("флЕстьДокументы"  , флЕстьДокументы);
	Расшифровка.Установить("флНетДокументов"  , флНетДокументов);
		                                             
	Если (флЕстьДокументы = 1) или (флНетДокументов = 1) Тогда
		//ВыбранныеДокументы = СоздатьОбъект("СписокЗначений");
		//РеалДок	= Метаданные.Документ("Реализация");
		//ВыбранныеДокументы.ДобавитьЗначение("Реализация", "Реализация");
		Если (флЕстьДокументы = 1) или (флНетДокументов = 1) Тогда
		//ВыбранныеДокументы = СоздатьОбъект("СписокЗначений");
		//РеалДок	= Метаданные.Документ("Реализация");
		//ВыбранныеДокументы.ДобавитьЗначение("Реализация", "Реализация");
		КоличествоЭл = ВыбранныеДокументы.РазмерСписка();   
		Пока КоличествоЭл > 0 Цикл       
			ТипДок = "";     
			ТекЗнч = "";
			ТекЗнч = ВыбранныеДокументы.ПолучитьЗначение(КоличествоЭл, ТипДок);
			Если СокрЛП(ТипДок) <> "Реализация" Тогда
				ВыбранныеДокументы.УдалитьЗначение(КоличествоЭл,1);  
			КонецЕсли;
			КоличествоЭл = КоличествоЭл - 1;
		КонецЦикла;
	КонецЕсли;
	КонецЕсли;	
	
	Расшифровка.Установить("ВыбранныеДокументы", ВыбранныеДокументы);
	Расшифровка.Установить("ВсеДокументы"      , ВсеДокументы);
	Расшифровка.Установить("ОткрытИзЖурналаИМ" , 0);
	
	глОбработкаРасшифровки(Расшифровка,"","");
	
КонецПроцедуры	// глПечатьРеестра()   

//******************************************************************************
// глПечатьДокумента(ДокДляПечати, Способ)
//
// Параметры: 
//  ДокДляПечати - контекст документа,
//  Способ       - строка способа печати:
//                 "ПечатьНаЭкран" (по умолчанию) или
//                 "ПечатьНаПринтер"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит печать выбранного документа.
//
Процедура глПечатьДокумента(ДокДляПечати, Способ = "ПечатьНаЭкран")  Экспорт
	
	// Эта процедура используется для вывода отчета о бух. проводках документа.
	Если ПустоеЗначение(ДокДляПечати) = 1 Тогда
		Предупреждение("Выберите документ!",60);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("Команда",Способ);	
	
	ОткрытьФорму(ДокДляПечати,СписокПараметров,1);
	
КонецПроцедуры // глПечатьДокумента()   

//******************************************************************************
// глПредставлениеПартии(Партия)
//
// Параметры:
//  Партия   - элемент справочника "Партии"
//
// Возвращаемое значение:
//  Строка - представление партии.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Возвращает представление партии в расходном документе
//
Функция глПредставлениеПартии(Партия) Экспорт
	
	Если ПустоеЗначение(Партия) = 1 Тогда
		Возврат "<автоподбор>";
	Иначе     
		Возврат ""+Партия.ПриходныйДокумент;
	КонецЕсли;
	
КонецФункции // глПредставлениеПартии()   

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ФИЛЬТРАМИ И ДИАЛОГАМИ ОТЧЕТОВ
//
//******************************************************************************
// глПоказатьОбъектИзСписка(СписокОбъектов)
//
// Параметры:
//  СписокОбъектов - список значений с объектами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает карточку текущего объекта, из списка значений.
//
Процедура глПоказатьОбъектИзСписка(СписокОбъектов) Экспорт
	
	Поз = СписокОбъектов.ТекущаяСтрока();
	Если Поз>0 Тогда
		ОткрытьФорму(СписокОбъектов.ПолучитьЗначение(Поз));
	КонецЕсли;                                                    
	
КонецПроцедуры // глПоказатьОбъектИзСписка()

//******************************************************************************
// глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблице, Конт)
//
// Параметры:
//  Принудительно     - 1 - выполнить действия, даже если не сменилась тек. строка
//	ТекСтрокаВТаблице -  предыдущая текущая строка в таблице МФ         
//	Конт              - контекст формы
//
// Возвращаемое значение:
//  Возвращает строку с названием вида фильтра (используктся для формирования надписи).
//
// Вызывается из формул элементов диалога:
//  Функция вызывается при смене текущей строки таблицы МФ.
//
// Описание:
//  Предназначена для обновления списков значений в диалоге множественного фильтра.
//
Функция глПриСменеСтрокиТаблицыМФ(Принудительно = 0, ТекСтрокаВТаблице, Конт) Экспорт
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	СписокЭлементовМФ = Конт.СписокЭлементовМФ;
	ТипМФ = Конт.ТипМФ;
	
	// текущая строка не поменялась
	Если (ТекСтрокаВТаблице = ТаблицаМФ.ТекущаяСтрока()) и (Принудительно=0) Тогда
		Возврат ТаблицаМФ.Представление;
	КонецЕсли;
	
	// сначала запомним список выбранных объектов строки МФ %%откуда%% пришли
	Если ПустоеЗначение(ТекСтрокаВТаблице) = 0 Тогда
		Попытка
			ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблице);
		Исключение 
			Возврат ТаблицаМФ.Представление; 
		КонецПопытки;
		СписокЭлементовМФ.Выгрузить(ТаблицаМФ.СписокЭлементов);
		Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
			ТаблицаМФ.ФлВкл=1;
		КонецЕсли;                       
	КонецЕсли;
	
	ТекСтрокаВТаблице = ТаблицаМФ.ТекущаяСтрока();
	Попытка
		ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтрокаВТаблице);
	Исключение 
		Возврат ТаблицаМФ.Представление; 
	КонецПопытки;
	
	СписокЭлементовМФ.УдалитьВсе();
	Если ТаблицаМФ.Вид="ЗначенияСвойств" Тогда
		Если ТипМФ.РазмерСписка()<3 Тогда
			ТипМФ.ВставитьЗначение(3,"одновременно все");    
		КонецЕсли;
	Иначе
		Если ТипМФ.РазмерСписка()>2 Тогда
			ТипМФ.УдалитьЗначение(3);    
		КонецЕсли;
	КонецЕсли;
	ТипМФ.ТекущаяСтрока(ТаблицаМФ.ТипМФ);
	
	Попытка
		Спис	= ТаблицаМФ.СписокЭлементов;
	Исключение
		Возврат ТаблицаМФ.Представление;
	КонецПопытки;
	
	Если ТипЗначенияСтр(Спис) = "СписокЗначений" Тогда
		Спис.Выгрузить(СписокЭлементовМФ);
	Иначе			
		ТаблицаМФ.СписокЭлементов = СоздатьОбъект("СписокЗначений");
	КонецЕсли;	
	Возврат ТаблицаМФ.Представление;
	
КонецФункции	// глПриСменеСтрокиТаблицыМФ()    

//******************************************************************************
// глМножественныйФильтрЗадан(ТаблицаМФ)
//
// Параметры:
//  ТаблицаМФ - ссылка на таблицу МФ
//
// Возвращаемое значение:
//  1 - если множественный фильтр задан
//  0 - иначе
//
// Описание:
//  Проверяет, задан ли множественный фильтр (хотя бы один)
//
Функция глМножественныйФильтрЗадан(ТаблицаМФ)  Экспорт
	
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()>0 Цикл
		Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) и (ТаблицаМФ.ФлВкл=2) Тогда
			Возврат 1;       
		КонецЕсли;       
	КонецЦикла;
	Возврат 0;
	
КонецФункции // глМножественныйФильтрЗадан	 

//******************************************************************************
// глРаботаСТаблицейМФ(Режим,Конт)
//
// Параметры:
//  Режим 	- текстовая строка, определяет выполняемое действие	
//  Конт 	- контекст формы отчета
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит действия с таблице МФ в соотв. с параметром "Режим"
//  Вызывается из формул элементов диалога:
//  Кнопки "Добавить", "ДобавитьНесколько", "Удалить", "УдалитьВсе"
//
Процедура глРаботаСТаблицейМФ(Режим, Конт) Экспорт
	
	Перем ТекПоз;
	Перем ТекЭлемент;
	Перем ФормаПодбора;
	Перем ВидЗначенияПодбора;
	Перем СправочникПодбора;             
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	СписокЭлементовМФ = Конт.СписокЭлементовМФ;
	
	ТекПоз = СписокЭлементовМФ.ТекущаяСтрока();
	Если ТекПоз>0 Тогда // текущий элемент, спозиционируем на него
		ТекЭлемент=СписокЭлементовМФ.ПолучитьЗначение(ТекПоз);
	КонецЕсли;
	
	Если (Режим="Добавить") или (Режим="ДобавитьНесколько")  Тогда		// добавляем в список один элемент
		Если ТипЗначенияСтр(ТаблицаМФ.Вид)="СписокЗначений" Тогда
			ВидЗначенияПодбора="";
			Если ТаблицаМФ.Вид.ВыбратьЗначение(ВидЗначенияПодбора,"",,,1)=0 Тогда
				Возврат;
			КонецЕсли;
		Иначе
			ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
		КонецЕсли;
		Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
			Возврат;
		КонецЕсли;
		СправочникПодбора = СокрЛП(ТаблицаМФ.Тип)+"."+ВидЗначенияПодбора;
		
		Зн = "";
		// проверим, не является ли справочник подчиненным другому?
		// если да, то надо сначала спросить владельца
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			Если СокрЛП(Метаданные.Справочник(ВидЗначенияПодбора).Владелец) <> "Метаданные" Тогда
				Зн=СоздатьОбъект(Метаданные.Справочник(ВидЗначенияПодбора).Владелец.ПолныйИдентификатор());
				Зн.ВыборГруппы(0);
				Если Зн.Выбрать("Выберите "+Метаданные.Справочник(ВидЗначенияПодбора).Владелец,"") = 0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		
		// открываем окно подбора                         
		Конт.ОткрытьПодбор(СправочникПодбора,,ФормаПодбора,?(Режим="ДобавитьНесколько",1,0),ТекЭлемент);
		Если Врег(СокрЛП(ТаблицаМФ.Тип))=Врег("Справочник") Тогда
			ФормаПодбора.ВыборГруппы(1);                                      
		КонецЕсли;
		Если ТипЗначенияСтр(Зн)="Справочник" Тогда
			ФормаПодбора.ИспользоватьВладельца(Зн.ТекущийЭлемент());
		КонецЕсли;
		
	ИначеЕсли Режим="УдалитьВсе" Тогда	// удаляем все элементы из списка
		СписокЭлементовМФ.УдалитьВсе();
		ТаблицаМФ.ФлВкл=1;
		
	ИначеЕсли Режим="Удалить" Тогда	// удаляем из списка один элемент
		Если ТекПоз >0 Тогда
			СписокЭлементовМФ.УдалитьЗначение(ТекПоз);
			Если СписокЭлементовМФ.РазмерСписка()>ТекПоз  Тогда
				СписокЭлементовМФ.ТекущаяСтрока(ТекПоз);
			Иначе // поставим на последний элемент
				СписокЭлементовМФ.ТекущаяСтрока(СписокЭлементовМФ.РазмерСписка());	
			КонецЕсли;        
			Если СписокЭлементовМФ.РазмерСписка()=0 Тогда
				ТаблицаМФ.ФлВкл=1;                           
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	// глРаботаСТаблицейМФ()

//******************************************************************************
// глОбработкаКликаПоТаблицеМФ(Конт)
//
// Параметры:
//  Конт - контекст формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит действия при двойном клике по таблице МФ зависимости от текущей колонки таблицы
//
Процедура глОбработкаКликаПоТаблицеМФ(Конт) Экспорт
	
	ТаблицаМФ = Конт.ТаблицаМФ;
	
	ТекСтр	= ТаблицаМФ.ТекущаяСтрока();
	ТекКол	= СокрЛП(ТаблицаМФ.ТекущаяКолонка());
	
	Если ТекСтр = 0 Тогда Возврат КонецЕсли;
	
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(ТекСтр);
	
	Если ТекКол = "ФлВкл" Тогда
		
		Если ТаблицаМФ.ФлВкл = 1 Тогда
			ТаблицаМФ.ФлВкл = 2;
		Иначе
			ТаблицаМФ.ФлВкл = 1;
		КонецЕсли;	
		
	Иначе		
		глРаботаСТаблицейМФ("Добавить",Конт);
	КонецЕсли;
	
КонецПроцедуры // глОбработкаКликаПоТаблицеМФ()      

//******************************************************************************
// глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
//
// Параметры:                    
//  ТаблицаМФ - ссылка на таблицу МФ
//  Тип - текстовая строка, тип значения
//  Вид - текстовая строка, вид значения
//  Имя переменной - имя переменной запроса, к которой должен быть приложен фильтр
//  Представление - текстовая строка - описание фильтра для пользователя
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу МФ 1 строку, если там еще нет аналогичной.
//  Используется для инициализации таблицы МФ
//
Процедура глДобавитьВТаблицуМФ(ТаблицаМФ,Тип, Вид, ИмяПеременной, Представление) Экспорт
	
	Если ТаблицаМФ.НайтиЗначение(Представление, 0, "Представление") = 0 Тогда
		
		ТаблицаМФ.НоваяСтрока();
		ТаблицаМФ.Тип=Тип;
		ТаблицаМФ.Вид=Вид;
		ТаблицаМФ.ИмяПеременной=ИмяПеременной;                
		ТаблицаМФ.СписокЭлементов=СоздатьОбъект("СписокЗначений");
		ТаблицаМФ.ТипМФ=1; // текущая строка списка ТипМФ
		ТаблицаМФ.ФлВкл=1; // фильтр включен ("1" или "2")
		ТаблицаМФ.Представление=Представление;	
		
	КонецЕсли;
	
	Если СокрЛП(Представление) = "По авторам документов" Тогда  
		Стр = 0;
		Если ТаблицаМФ.НайтиЗначение("По автору документов", Стр, "Представление") = 1 Тогда
			ТаблицаМФ.УдалитьСтроку(Стр);		    
		КонецЕсли;	    
	КонецЕсли;
	
КонецПроцедуры // глДобавитьВТаблицуМФ()

//******************************************************************************
// глПредставлениеПустогоЗначения(НазваниеГруппировки)
//
// Параметры:
//  НазваниеГруппировки - строка с названием группировки
//
// Возвращаемое значение:
//  Строка, представление пустого значения элемента группировки.
//
// Описание:
//  Для отчетов иногда требуется пустое значение какой - либо группировки
//  представить специфической фразой.
//
Функция глПредставлениеПустогоЗначения(НазваниеГруппировки) Экспорт
	
	Если НазваниеГруппировки = "СтавкаНП" Тогда
		Возврат "< без учета налога с продаж >";
	КонецЕсли;
	Если НазваниеГруппировки = "СвойствоПартии" Тогда
		Возврат "< свойство партии не задано >";
	КонецЕсли;
	Возврат ("< не выбран >");
	
КонецФункции // глПредставлениеПустогоЗначения()

//******************************************************************************
// ИменаВПадежах(ИмяПерем,НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже)
//
// Параметры:
//  ИмяПерем              -  строка имени переменной отчета, возможные значения:
//	                         "Склад", "Номенклатура", "Фирма", "УпрАналитика",
//                           "ЮрЛицо", "Контрагент", "Договор", "Поставщик",
//                           "Покупатель", "СтатусПартии", "МОЛ", "СвойствоТМЦ",
//                           "СвойствоПост", "СвойствоПок"; 
//  НазвВ_ЕдЧ_ДатПадеже   - сформированная строка ИмяПерем в дательном падеже единственного числа,
//  НазвВ_МнЧ_ДатПадеже   - сформированная строка ИмяПерем в дательном падеже множественного числа,
//  НазвВ_МнЧ_РодитПадеже - сформированная строка ИмяПерем в родительном падеже единственного числа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Для отчетов иногда требуется пустое значение какой - либо группировки
//  представить специфической фразой.
//
Процедура ИменаВПадежах(ИмяПерем,НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже)
	
	Если ИмяПерем="Склад" Тогда
		НазвВ_ЕдЧ_ДатПадеже = "складу";
		НазвВ_МнЧ_ДатПадеже = "складам";
		НазвВ_МнЧ_РодитПадеже = "складов";
		
	ИначеЕсли ИмяПерем="Номенклатура" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "номенклатуре";
		НазвВ_МнЧ_ДатПадеже 	= "номенклатурным позициям";
		НазвВ_МнЧ_РодитПадеже 	= "номенклатурных позиций";
		
	ИначеЕсли ИмяПерем="Фирма" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "фирме";
		НазвВ_МнЧ_ДатПадеже 	= "фирмам";
		НазвВ_МнЧ_РодитПадеже 	= "фирм";
		
	ИначеЕсли ИмяПерем="УпрАналитика" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "упр. аналитике";
		НазвВ_МнЧ_ДатПадеже 	= "упр. аналитикам";
		НазвВ_МнЧ_РодитПадеже 	= "упр. аналитик";
		
	ИначеЕсли ИмяПерем="ЮрЛицо" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "юр. лицу";
		НазвВ_МнЧ_ДатПадеже 	= "юр. лицам";
		НазвВ_МнЧ_РодитПадеже 	= "юр. лиц";
		
	ИначеЕсли ИмяПерем="Контрагент" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "контрагенту";
		НазвВ_МнЧ_ДатПадеже 	= "контрагентам";
		НазвВ_МнЧ_РодитПадеже 	= "контрагентов";
		
	ИначеЕсли ИмяПерем="Договор" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "договору";
		НазвВ_МнЧ_ДатПадеже 	= "договорам";
		НазвВ_МнЧ_РодитПадеже 	= "договоров";
		
	ИначеЕсли ИмяПерем="Поставщик" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "поставщику";
		НазвВ_МнЧ_ДатПадеже 	= "поставщикам";
		НазвВ_МнЧ_РодитПадеже 	= "поставщиков";
		
	ИначеЕсли ИмяПерем="Покупатель" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "покупателю";
		НазвВ_МнЧ_ДатПадеже 	= "покупателям";
		НазвВ_МнЧ_РодитПадеже 	= "покупателей";
		
	ИначеЕсли ИмяПерем="СтатусПартии" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "статусу партии";
		НазвВ_МнЧ_ДатПадеже 	= "статусам партии";
		НазвВ_МнЧ_РодитПадеже 	= "статусов партии";
		
	ИначеЕсли ИмяПерем="МОЛ" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "МОЛу";
		НазвВ_МнЧ_ДатПадеже 	= "МОЛам";
		НазвВ_МнЧ_РодитПадеже 	= "МОЛов";   
		
	ИначеЕсли ИмяПерем="МОЛ_Комиссионер" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "МОЛу (комиссионеру)";
		НазвВ_МнЧ_ДатПадеже 	= "МОЛам (комиссионерам)";
		НазвВ_МнЧ_РодитПадеже 	= "МОЛов (комиссионеров)";   
		
	ИначеЕсли ИмяПерем="СвойствоТМЦ" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "свойству ТМЦ";
		НазвВ_МнЧ_ДатПадеже 	= "свойствам ТМЦ";
		НазвВ_МнЧ_РодитПадеже 	= "свойств ТМЦ";   
		
	ИначеЕсли ИмяПерем="СвойствоПост" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "свойству поставщиков";
		НазвВ_МнЧ_ДатПадеже 	= "свойствам поставщиков";
		НазвВ_МнЧ_РодитПадеже 	= "свойств поставщиков";   
		
	ИначеЕсли ИмяПерем="СвойствоПок" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "свойству покупателей";
		НазвВ_МнЧ_ДатПадеже 	= "свойствам покупателей";
		НазвВ_МнЧ_РодитПадеже 	= "свойств покупателей";   
		
	ИначеЕсли ИмяПерем="Автор" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "автору документа";
		НазвВ_МнЧ_ДатПадеже 	= "авторам документов";
		НазвВ_МнЧ_РодитПадеже 	= "авторов документов";   
		
	ИначеЕсли ИмяПерем="Проект" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "проекту";
		НазвВ_МнЧ_ДатПадеже 	= "проектам";
		НазвВ_МнЧ_РодитПадеже 	= "проектов";   
		
	ИначеЕсли ИмяПерем="Касса" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "кассе";
		НазвВ_МнЧ_ДатПадеже 	= "кассам";
		НазвВ_МнЧ_РодитПадеже 	= "касс";   
		
	ИначеЕсли ИмяПерем="Валюта" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "валюте";
		НазвВ_МнЧ_ДатПадеже 	= "валютам";
		НазвВ_МнЧ_РодитПадеже 	= "валют";   
		
	ИначеЕсли ИмяПерем="ФизЛицо" Тогда
		НазвВ_ЕдЧ_ДатПадеже 	= "физ. лицу";
		НазвВ_МнЧ_ДатПадеже 	= "физ. лицам";
		НазвВ_МнЧ_РодитПадеже 	= "физ. лиц";   
		
	Иначе
		НазвВ_ЕдЧ_ДатПадеже 	= "";
		НазвВ_МнЧ_ДатПадеже 	= "";
		НазвВ_МнЧ_РодитПадеже 	= "";
		
	КонецЕсли;
	
КонецПроцедуры // ИменаВПадежах()

//******************************************************************************
// глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
//						 ПолеМФ,ИмяПоляМФ,ТипМФ,
//						 ТекстЗапроса,ТекстЗаголовка,
//						 ИмяПеремЗапроса) 
//
// Параметры:
//  ПолеЕФ          - если выбран, то единичный (простой) фильтр по позиции справочника 
//	ИмяПоляЕФ       - строка - наименование поля ЕФ в отчете
//  ПолеМФ          - если выбран, то множественный фильтр по позиции справочника
//	ИмяПоляМФ       - строка - наименование переменной (списка) позиций МФ
//  ТипМФ           - тип МФ. (соотв. номеру позиции в списке "Тип МФ" в диалогах отчетов)
//  ТекстЗапроса 	- текст запроса, в который надо добавить фильтр 
//  ТекстЗаголовка 	- заголовок отчета, в который надо добавить описание фильтра
//	ИмяПеремЗапроса - название переменной запроса, к которой применяем фильтр
//  
// Возвращаемое значение:
// 	0  - в случае ошибки, не 0 - все ОК.
// 
// Описание:
//	Универсальная функция для формирования заголовков и текстов запросов в отчетах.
//
Функция глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
	ПолеМФ,ИмяПоляМФ,ТипМФ,
	ТекстЗапроса,ТекстЗаголовка,
	ИмяПеремЗапроса) Экспорт 
	
	Перем НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже;	
	Перем ЕстьЕФ,ЕстьМФ;
	
	ИменаВПадежах(ИмяПеремЗапроса,НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже);
	
	ЕстьЕФ = 0;
	ЕстьМФ = 0;
	
	Если ТипЗначенияСтр(ПолеМФ)="СписокЗначений" Тогда
		Если (ПолеМФ.РазмерСписка()>0) Тогда
			ЕстьМФ = 1;
		КонецЕсли;
	КонецЕсли;	
	
	Если ПустоеЗначение(ПолеЕФ)=0 Тогда
		ЕстьЕФ = 1;
	КонецЕсли;	
	
	Если ЕстьМФ = 1 Тогда		// есть множественный фильтр по позициям справочника
		Если ТипМФ=1 Тогда // принадлежит списку
			ТекстЗапроса = ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+");";
		Иначе     
			ТекстЗапроса = ТекстЗапроса+"Условие (НЕ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+"));";
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЕФ = 1 Тогда				// есть простой фильтр по позициям справочника
		ТекстЗапроса= ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляЕФ+");";
	КонецЕсли;
	
	Если ЕстьМФ=0 Тогда
		Если ЕстьЕФ=0 Тогда			
			ТекстЗаголовка=ТекстЗаголовка+"По всем "+НазвВ_МнЧ_ДатПадеже;			
			
		ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
			ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""";
			
		ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
			ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""";
			
		ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда
			ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_МнЧ_ДатПадеже+" из группы """+Строка(ПолеЕФ)+"""";
			
		Иначе
			ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""";
			
		КонецЕсли;		
	Иначе
		Если ЕстьЕФ=0 Тогда			
			Если ТипМФ=1 Тогда // принадлежит списку
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_МнЧ_ДатПадеже+" из списка";
			Иначе // задан список, в который не должно входить значение
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_МнЧ_ДатПадеже+" ,кроме указанных в списке";
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Документ" Тогда
			Если ТипМФ=1 Тогда // принадлежит списку
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""";
			Иначе     // задан список, в который не должно входить значение
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" кроме """+Строка(ПолеЕФ)+"""";
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(ПолеЕФ)="Перечисление" Тогда
			Если ТипМФ=1 Тогда // принадлежит списку
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""";
			Иначе     // задан список, в который не должно входить значение
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" кроме """+Строка(ПолеЕФ)+"""";
			КонецЕсли;
		ИначеЕсли ПолеЕФ.ЭтоГруппа()=1 Тогда    
			Если ТипМФ=1 Тогда // принадлежит списку
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_МнЧ_ДатПадеже+" из списка, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
			Иначе     // задан список, в который не должно входить значение
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_МнЧ_ДатПадеже+" кроме указанных в списке, принадлежащим группе """+Строка(ПолеЕФ)+""""+",";
			КонецЕсли;
		Иначе                                       
			Если ТипМФ=1 Тогда // принадлежит списку
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+""" из списка";
			Иначе     // задан список, в который не должно входить значение
				ТекстЗаголовка=ТекстЗаголовка+"По "+НазвВ_ЕдЧ_ДатПадеже+" """+Строка(ПолеЕФ)+"""  ,кроме указанных в списке";
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;      
	
	// убираем лишнюю запятую из конца заголовка
	Если Прав(ТекстЗаголовка,1)="," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли;	
	
	Если ПустаяСтрока(ТекстЗаголовка)=0 Тогда	// заголовок непуст
		// добавим точку в конец заголовка
		ТекстЗаголовка = ТекстЗаголовка + ". ";
	КонецЕсли;	
	
	Возврат 1;						
	
КонецФункции // глФильтрПоСправочнику()      

//******************************************************************************
// глФильтрПоСвойствам(ВидСправочникаСвойства,
//						ПолеМФ, ИмяПоляМФ, ТипМФ,
//						ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса) 
//
// Параметры:
//  ВидСправочникаСвойства - строка, вид справочника свойств ("СвойстваНоменклатуры", ...)
//  ПолеМФ                 - если выбран, то множественный фильтр по позиции справочника
//	ИмяПоляМФ              - строка - наименование переменной (списка) позиций МФ
//  ТипМФ                  - тип МФ (соотв. номеру позиции в списке "Тип МФ" в диалогах отчетов)
//  ТекстЗапроса 	       - текст запроса, в который надо добавить фильтр 
//  ТекстЗаголовка 	       - заголовок отчета, в который надо добавить описание фильтра
//	ИмяПеремЗапроса        - название переменной запроса, к которой применяем фильтр
//  
// Возвращаемое значение:
// 	0 - в сучае ошибки, не 0 - все ОК.
// 
// Описание:
//	Универсальная функция для формирования заголовков и текстов запросов в отчетах.
//  Предназначена для установки фильтра по свойствам ТМЦ и контрагентов.
//
Функция глФильтрПоСвойствам(ВидСправочникаСвойства,
	ПолеМФ, ИмяПоляМФ, ТипМФ,
	ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса) Экспорт 
	
	Перем НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже;
	Перем Запрос, ТекстЗапросаСвойств;
	
	ЕстьМФ = 0;
	Если ТипЗначенияСтр(ПолеМФ)="СписокЗначений" Тогда
		Если (ПолеМФ.РазмерСписка()>0) Тогда
			ЕстьМФ = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьМФ = 0 Тогда
		Возврат(1);
	КонецЕсли;
	
	ИменаВПадежах(ИмяПеремЗапроса,НазвВ_ЕдЧ_ДатПадеже,НазвВ_МнЧ_ДатПадеже,НазвВ_МнЧ_РодитПадеже);
	
	Если (ТипМФ=1) или (ТипМФ=3) Тогда // принадлежит списку или одновременно все
		ТекстЗапроса= ТекстЗапроса+"Условие ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+");";
	Иначе     
		ТекстЗапроса= ТекстЗапроса+"Условие (НЕ("+ИмяПеремЗапроса+" в "+ИмяПоляМФ+"));";
	КонецЕсли;
	
	// убираем лишнюю точку из конца заголовка
	Если Прав(ТекстЗаголовка,2)=". " Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-2);
	КонецЕсли;	
	
	Если ТипМФ=1 Тогда // принадлежит списку
		ТекстЗаголовка = ТекстЗаголовка +" со свойствами """+ПолеМФ.ВСтрокуСРазделителями()+"""";
		
	ИначеЕсли ТипМФ=2 Тогда    // задан список, в который не должно входить значение
		ТекстЗаголовка = ТекстЗаголовка +", кроме имеющих свойства"""+ПолеМФ.ВСтрокуСРазделителями()+"""";
		
	Иначе //Если ТипМФ=3 Одновременно все свойства должны быть
		ТекстЗаголовка = ТекстЗаголовка +", одновременно со свойствами"""+ПолеМФ.ВСтрокуСРазделителями()+"""";
	КонецЕсли;
	
	// убираем лишнюю запятую из конца заголовка
	Если Прав(ТекстЗаголовка,1)="," Тогда
		ТекстЗаголовка = Лев(ТекстЗаголовка,СтрДлина(ТекстЗаголовка)-1);
	КонецЕсли;	
	
	Если ПустаяСтрока(ТекстЗаголовка)=0 Тогда	// заголовок непуст
		// добавим точку в конец заголовка
		ТекстЗаголовка = ТекстЗаголовка + ". ";
	КонецЕсли;	
	
	// теперь отбираем позиции по списку свойств
	ТекстЗапросаСвойств = "      
	|Обрабатывать НеПомеченныеНаУдаление;
	|КатегорияПозиции 	= Справочник."+ВидСправочникаСвойства+".ТекущийЭлемент;
	|Позиция 			= Справочник."+ВидСправочникаСвойства+".Владелец;
	|СвойствоПоз 		= Справочник."+ВидСправочникаСвойства+".ЗначениеСвойства;
	|Группировка Позиция Без Групп;";
	Если ТипМФ=3 Тогда
		ТекстЗапросаСвойств =ТекстЗапросаСвойств +
		"Группировка СвойствоПоз Без Групп;";
	КонецЕсли;
	ТекстЗапросаСвойств =ТекстЗапросаСвойств +
	"Условие (СвойствоПоз в ПолеМФ);
	|";                          
	
	// выполняем запрос
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапросаСвойств)=0 Тогда
		Возврат 0;
	КонецЕсли;	               
	
	// Очищаем список. Теперь в него надо загрузить отобранные запросом элементы
	ВсегоСвойств=ПолеМФ.РазмерСписка();
	
	ПолеМФ.УдалитьВсе();
	
	Пока Запрос.Группировка("Позиция")>0 Цикл
		Если (ТипМФ=1) или (ТипМФ=2) Тогда
			ПолеМФ.ДобавитьЗначение(Запрос.Позиция);
		Иначе // одновременно все, переберем свойства каждого элемента (ТМЦ, контрагента)
			// условие "одновременно все" истинно, если свойств у элемента будет столько же,
			// сколько и в переданном списке свойств
			ВсегоСвойствУЭлемента=0;
			Пока Запрос.Группировка("СвойствоПоз")>0 Цикл
				Если ПустоеЗначение(Запрос.СвойствоПоз)=0 Тогда
					ВсегоСвойствУЭлемента=ВсегоСвойствУЭлемента+1;    
				КонецЕсли;                                        
			КонецЦикла;
			Если ВсегоСвойствУЭлемента>=ВсегоСвойств Тогда
				ПолеМФ.ДобавитьЗначение(Запрос.Позиция);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	Если (ПолеМФ.РазмерСписка()=0) и ((ТипМФ=1)или(ТипМФ=3)) Тогда
		// если запрос ничего не принес и тип фильтра = "входит в список"
		Предупреждение("Не найдено "+НазвВ_МнЧ_РодитПадеже+" с заданными свойствами.", 60);
		Возврат(0);
	КонецЕсли;
	Возврат 1;												
	
КонецФункции //глФильтрПоСвойствам()

//******************************************************************************
// ПрисвоитьЗначениеУсловию(Номер, СписокЭлементов, Поле))
//
// Параметры: 
//  Номер           - число, номер условия множественного фильтра,
//  СписокЭлементов - список выбранных элементов для построения условия с данным номером,
//  Поле            - список значений для промежуточного запрос.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Служит для присвоения значения глобальной переменной условия по множественному фильтру
//  с нужным номером.
//
Процедура ПрисвоитьЗначениеУсловию(Номер, СписокЭлементов, Поле)
	
	Если      Номер = 1 Тогда
		глУсловие1 = СписокЭлементов;
		Поле       = глУсловие1;
	ИначеЕсли Номер = 2 Тогда    
		глУсловие2 = СписокЭлементов;
		Поле       = глУсловие2;
	ИначеЕсли Номер = 3 Тогда    
		глУсловие3 = СписокЭлементов;
		Поле       = глУсловие3;
	ИначеЕсли Номер = 4 Тогда    
		глУсловие4 = СписокЭлементов;
		Поле       = глУсловие4;
	ИначеЕсли Номер = 5 Тогда    
		глУсловие5 = СписокЭлементов;
		Поле       = глУсловие5;
	ИначеЕсли Номер = 6 Тогда    
		глУсловие6 = СписокЭлементов;
		Поле       = глУсловие6;
	ИначеЕсли Номер = 7 Тогда    
		глУсловие7 = СписокЭлементов;
		Поле       = глУсловие7;
	ИначеЕсли Номер = 8 Тогда    
		глУсловие8 = СписокЭлементов;
		Поле       = глУсловие8;
	ИначеЕсли Номер = 9 Тогда    
		глУсловие9 = СписокЭлементов;
		Поле       = глУсловие9;
	ИначеЕсли Номер = 10 Тогда    
		глУсловие10= СписокЭлементов;
		Поле       = глУсловие10;
	ИначеЕсли Номер = 11 Тогда    
		глУсловие11= СписокЭлементов;
		Поле       = глУсловие11;
	ИначеЕсли Номер = 12 Тогда    
		глУсловие12= СписокЭлементов;
		Поле       = глУсловие12;
	ИначеЕсли Номер = 13 Тогда    
		глУсловие13= СписокЭлементов;
		Поле       = глУсловие13;	
	Иначе
		Сообщить("Некорректный номер условия множественного фильтра.","!!");
	КонецЕсли;
	
КонецПроцедуры // ПрисвоитьЗначениеУсловию()

//******************************************************************************
// глФильтрПоПеременнойЗапроса(ТаблицаМФ, ИмяПеремЗапроса,ПолеЕФ,ИмяПоляЕФ,ТекстЗапроса,ТекстЗаголовка,ВидСправочникаСвойства="")
//
// Параметры:
//  ТаблицаМФ       - таблица значений множественного фильтра (не обязательный параметр),
//  ТекстЗапроса    - переменная, в которой содержится текст формируемого запроса,
//	ТекстЗаголовка  - переменная, в которой содержится заголовок отчета,
//	ПолеЕФ          - Значение элемента диалога, в котором вводится значение фильтра,
//	ИмяПоляЕФ       - Название элемента диалога, в котором вводится значение фильтра,
//	ИмяПеремЗапроса - название переменной запроса, к которой применить фильтр,
//
// Возвращаемое значение:
// 	0  - в случае ошибки, не 0 - все ОК.
//
// Описание:
//  Дополняет текст запроса и заголовок отчета по переданному фильтру.
//
Функция глФильтрПоПеременнойЗапроса(ТаблицаМФ = "", ИмяПеремЗапроса,ПолеЕФ,ИмяПоляЕФ,ТекстЗапроса,ТекстЗаголовка,ВидСправочникаСвойства="") Экспорт
	Перем ПолеМФ, 			ИмяПоляМФ, 			ВремТипМФ;
	Перем ПолеМФСвойств, 	ИмяПоляМФСвойств, 	ТипМФСвойств;
	
	Если ПустоеЗначение(ТаблицаМФ) = 1 Тогда // нет множественного фильтра
		ПолеМФ = ""; ИмяПоляМФ = ""; ВремТипМФ = "";
		ПолеМФСвойств = ""; ИмяПоляМФСвойств = ""; ТипМФСвойств = ""; 
	Иначе    
		ТаблицаМФ.ВыбратьСтроки();
		Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
			Если (ТаблицаМФ.СписокЭлементов.РазмерСписка()>0) и 
			(ТаблицаМФ.ИмяПеременной=ИмяПеремЗапроса) и
			(ТаблицаМФ.ФлВкл=2) Тогда
				
				Номер = ТаблицаМФ.НомерСтроки;
				
				Если (ТаблицаМФ.Вид<>"ЗначенияСвойств") Тогда
					
					ИмяПоляМФ			= "глУсловие" +СокрЛП(Номер);
					ВремТипМФ = ТаблицаМФ.ТипМФ;
					ПрисвоитьЗначениеУсловию(Номер, ТаблицаМФ.СписокЭлементов, ПолеМФ);
					
				Иначе // по свойствам
					
					СписокСвойств = СоздатьОбъект("СписокЗначений");
					ТаблицаМФ.СписокЭлементов.Выгрузить(СписокСвойств);
					ИмяПоляМФСвойств	= "глУсловие" +СокрЛП(Номер);
					ТипМФСвойств		= ТаблицаМФ.ТипМФ;          
					ПрисвоитьЗначениеУсловию(Номер, СписокСвойств, ПолеМФСвойств);
					
				КонецЕсли;
			КонецЕсли;                         
		КонецЦикла;
	КонецЕсли;
	
	Рез1 = глФильтрПоСправочнику(ПолеЕФ,ИмяПоляЕФ,
	ПолеМФ,ИмяПоляМФ,ВремТипМФ,
	ТекстЗапроса,ТекстЗаголовка,
	ИмяПеремЗапроса);
	
	Рез2 = глФильтрПоСвойствам(ВидСправочникаСвойства,
	ПолеМФСвойств, ИмяПоляМФСвойств, ТипМФСвойств,
	ТекстЗапроса, ТекстЗаголовка, ИмяПеремЗапроса);
	Возврат (Рез1*Рез2); // если хоть один = 0 - плохо
	
КонецФункции // глФильтрПоПеременнойЗапроса()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ФОРМИРОВАНИЯ ПРОВОДОК
//
//******************************************************************************
// глУстановитьТипВидРеквизита(Конт, ИмяРеквизита, НовыйТипВид) Экспорт
//
// Параметры:
//  Конт         - "неопределенный" - контекст формы или документ.
//  ИмяРеквизита - "строка" - идентификатор реквизита.
//  НовыйТипВид  - "строка" - тип и вид реквизита.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Назначает тип реквизиту, проверяя старый тип, 
//  чтобы лишний раз не модифицировать форму.
//
Процедура глУстановитьТипВидРеквизита(Конт, ИмяРеквизита, НовыйТипВид) Экспорт
	
	Значение = Конт.ПолучитьАтрибут(ИмяРеквизита);
	СтарыйТипВид = ТипЗначенияСтр(Значение);
	
	Если (СтарыйТипВид = "Справочник") ИЛИ (СтарыйТипВид = "Документ") ИЛИ (СтарыйТипВид = "Перечисление") Тогда
		СтарыйТипВид = СтарыйТипВид+"."+Значение.Вид();
	КонецЕсли;
	
	Если СтарыйТипВид <> НовыйТипВид Тогда
		Конт.НазначитьТип(ИмяРеквизита, НовыйТипВид);
	КонецЕсли;
	
КонецПроцедуры // глУстановитьТипВидРеквизита()

//******************************************************************************
// глПолучитьТипСубконто(Счет, НомерСубконто, ВидСубконто = "")
//
// Параметры:
//  Счет          - "Справочник.ПланСчетов" - элемент справочника "План счетов".
//  НомерСубконто - "число" - порядковый номер субконто.
//  ВидСубконто   - "неопределенный" - в эту переменную возвращается вид субконто.
//
// Возвращаемое значение:
//  строка - описывающая тип субконто.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Определяет тип субконто, как он определен в конфигураторе.
//
Функция глПолучитьТипСубконто(Счет, НомерСубконто, ВидСубконто = "") Экспорт
	
	ВидСубконто  = Счет.ПолучитьАтрибут("ВидСубконто" + НомерСубконто);
	Возврат ?(ПустаяСтрока(ВидСубконто.ТипЗначенияТорг) = 0, СокрЛП(ВидСубконто.ТипЗначенияТорг),
	?(ВидСубконто.Выбран() = 1, "Справочник.ЗначенияСубконто", ""));
	
КонецФункции // глПолучитьТипСубконто()

//******************************************************************************
// глПредставлениеВидаСубконто(Счет, НомерСубконто)
//
// Параметры:
//  Счет          - "Справочник.ПланСчетов" - элемент справочника "План счетов".
//  НомерСубконто - "число" - порядковый номер субконто.
//
// Возвращаемое значение:
//  строка - представление вида субконто.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Определяет пользовательское представление вида субконто.
//
Функция глПредставлениеВидаСубконто(Счет, НомерСубконто) Экспорт
	
	Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
		ВидСубконто  = Счет.ПолучитьАтрибут("ВидСубконто" + НомерСубконто);
		Возврат ?(ВидСубконто.Выбран() = 1, СокрЛП(ВидСубконто.Наименование) + ":", "")
		
	Иначе
		Возврат "";
		
	КонецЕсли;
	
КонецФункции // глПредставлениеВидаСубконто()

//******************************************************************************
// глПриВыбореБухСчета(Конт, ОбновлятьПодписи = 1, ТолькоПодписи = 0)
//
// Параметры:
//  Конт              - "неопределенный", контекст формы или документ;
//  ОбновлятьПодписи  - число, необязательный параметр, флаг, определяющий
//                      нужно ли обновлять подписи к реквизитам диалога;
//  ТолькоПодписи     - число, необязательный параметр, флаг, определяющий
//                      нужно ли только обновить подписи к реквизитам диалога;
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Отрабатывает все действия, необходимые при выборе бух. счета в документе:
//  проверяет и назначает тип и вид реквизитам "Счет" и "Субконто1-3";
//  формирует заголовки информационных текстовых полей;
//  при необходимости проверяет и назначает владельца реквизитам "Субконто1-3".
//
Процедура глПриВыбореБухСчета(Конт, ОбновлятьПодписи = 1, ТолькоПодписи = 0) Экспорт
	
	Перем ВидСубконто;
	
	глУстановитьТипВидРеквизита(Конт, "Счет", "Справочник.ПланСчетов");
	
	Если ОбновлятьПодписи = 1 Тогда
		// установим заголовок (подпись) счета и субконто.
		Конт.Форма.ТекстСчет.Заголовок(Конт.Счет.Наименование);
		Для Номер = 1 По 3 Цикл
			Конт.Форма.ПолучитьАтрибут("ТекстВидСубконто"+Номер).Заголовок(глПредставлениеВидаСубконто(Конт.Счет, Номер));
		КонецЦикла;
	КонецЕсли;
	
	Если ТолькоПодписи = 0 Тогда
		
		Для Номер = 1 По 3 Цикл
			
			ИмяРеквизита = "Субконто"+Номер;
			ТипВидРеквизита = глПолучитьТипСубконто(Конт.Счет, Номер, ВидСубконто);
			
			// установим тип и вид субконто (так как это реквизит неопределенного вида)
			глУстановитьТипВидРеквизита(Конт, ИмяРеквизита, ТипВидРеквизита);
			
			Если ТипВидРеквизита = "Справочник.ЗначенияСубконто" Тогда
				Субконто = Конт.ПолучитьАтрибут(ИмяРеквизита);
				Если (Субконто.Владелец.Выбран() = 1) И (Субконто.Владелец <> ВидСубконто) Тогда
					Конт.УстановитьАтрибут(ИмяРеквизита, ПолучитьПустоеЗначение(Субконто));
				КонецЕсли;
				Если ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
					Конт.ПолучитьАтрибут(ИмяРеквизита).ИспользоватьВладельца(ВидСубконто);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // глПриВыбореБухСчета()

//******************************************************************************
// глПриВыбореНалоговогоСчета(Конт, ТолькоПодписи)
//
// Параметры:
//  Конт              - "неопределенный", контекст формы или документ;
//  ОбновлятьПодписи  - число, необязательный параметр, флаг, определяющий
//                      нужно ли обновлять подписи к реквизитам диалога;
//  ТолькоПодписи     - число, необязательный параметр, флаг, определяющий
//                      нужно ли только обновить подписи к реквизитам диалога;
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Отрабатывает все действия, необходимые при выборе налогового счета в документе:
//  проверяет и назначает тип и вид реквизитам "СчетНУ" и "СубконтоНУ1-3";
//  формирует заголовки информационных текстовых полей;
//  при необходимости проверяет и назначает владельца реквизитам "СубконтоНУ1-3".
//
Процедура глПриВыбореНалоговогоСчета(Конт, ОбновлятьПодписи = 1, ТолькоПодписи = 0) Экспорт
	
	Перем ВидСубконто;
	
	глУстановитьТипВидРеквизита(Конт, "СчетНУ", "Справочник.ПланСчетов");
	
	Если ОбновлятьПодписи = 1 Тогда
		// установим заголовок (подпись) счета и субконто.
		Конт.Форма.ТекстСчетНУ.Заголовок(Конт.СчетНУ.Наименование);
		Для Номер = 1 По 3 Цикл
			Конт.Форма.ПолучитьАтрибут("ТекстВидСубконтоНУ"+Номер).Заголовок(глПредставлениеВидаСубконто(Конт.СчетНУ, Номер));
		КонецЦикла;
	КонецЕсли;
	
	Если ТолькоПодписи = 0 Тогда
		Для Номер = 1 По 3 Цикл
			
			ИмяРеквизита = "СубконтоНУ"+Номер;
			ТипВидРеквизита = глПолучитьТипСубконто(Конт.СчетНУ, Номер, ВидСубконто);
			// установим тип и вид субконто (так как это реквизит неопределенного вида)
			глУстановитьТипВидРеквизита(Конт, ИмяРеквизита, ТипВидРеквизита);
			
			Если ТипВидРеквизита = "Справочник.ЗначенияСубконто" Тогда
				Субконто = Конт.ПолучитьАтрибут(ИмяРеквизита);
				Если (Субконто.Владелец.Выбран() = 1) И (Субконто.Владелец <> ВидСубконто) Тогда
					Конт.УстановитьАтрибут(ИмяРеквизита, ПолучитьПустоеЗначение(Субконто));
				КонецЕсли;
				
				Конт.ПолучитьАтрибут(ИмяРеквизита).ИспользоватьВладельца(ВидСубконто);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // глПриВыбореНалоговогоСчета()

//******************************************************************************
// глЕстьАтрибутРегистра(ИмяАтрибута, СписокАтрибутов, ВидРегистра)
//
// Параметры:
//  ИмяАтрибута     - строка, идентификатор атрибута регистра.
//  СписокАтрибутов - список значений, список идентификаторов атрибутов регистра.
//  ВидРегистра     - строка, идентификатор регистра.
//
// Возвращаемое значение: 
//  0 - нет атрибута,
//  1 - есть атрибут
//
// Описание: 
//  Проверяет, есть ли в структуре метаданных регистра указанного вида
// 	измерение, ресурс или реквизит с указанным идентификатором.
//
Функция глЕстьАтрибутРегистра(ИмяАтрибута, СписокАтрибутов, ВидРегистра) 
	
	Если СписокАтрибутов.НайтиЗначение("Регистр """ + ВидРегистра + """" + " атрибут """ + ИмяАтрибута + """") > 0 Тогда
		Возврат 1;
	ИначеЕсли Метаданные.Регистр(ВидРегистра).Измерение(ИмяАтрибута).Выбран() = 1 Тогда
		СписокАтрибутов.ДобавитьЗначение("Регистр """ + ВидРегистра + """" + " атрибут """ + ИмяАтрибута + """");
		Возврат 1;
	ИначеЕсли Метаданные.Регистр(ВидРегистра).Ресурс(ИмяАтрибута).Выбран() = 1 Тогда
		СписокАтрибутов.ДобавитьЗначение("Регистр """ + ВидРегистра + """" + " атрибут """ + ИмяАтрибута + """");
		Возврат 1;
	ИначеЕсли Метаданные.Регистр(ВидРегистра).Реквизит(ИмяАтрибута).Выбран() = 1 Тогда
		СписокАтрибутов.ДобавитьЗначение("Регистр """ + ВидРегистра + """" + " атрибут """ + ИмяАтрибута + """");
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции //глЕстьАтрибутРегистра()

//******************************************************************************
// глРассчитатьЗначение(Рег, Значение, Знач ИдРеквизита, СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ = 0)
//
// Параметры:
//  Рег             - регистр, движение регистра.
//  Значение        - неопределенный – значение реквизита справочника ПроводкиХозОпераций.
//  ИдРеквизита     - строка – идентификатор реквизита справочника ПроводкиХозОпераций.
//  СписокАтрибутов - список значений, список идентификаторов атрибутов регистра.
//  ВидДокумента    - строка, идентификатор документа.
//  ВидРегистра     - строка, идентификатор регистра.
//  ТекДокумент     - документ, документ по которому формируется хоз.операция.
//
// Возвращаемое значение:
//  Значение вычисления на основании текущего движения.
//  
// Описание:
//  Функция рассчитывает и возвращает значение реквизита проводки на основании 
//  текущего движения регистра.
//
Функция глРассчитатьЗначение(Рег, Значение, Знач ИдРеквизита, СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ = 0)
	
	Перем ТипВидЗнач;
	
	Если ПустоеЗначение(Значение) = 1 Тогда
		Возврат "";
		
	ИначеЕсли ТипЗначенияСтр(Значение) = "Перечисление" Тогда
		ТипВидЗнач = ТипЗначенияСтр(Значение) + "." + Значение.Вид();
		
	КонецЕсли;
	
	// определяем значение аналитики проводки 
	Если Лев(ИдРеквизита, 8) = "Субконто" Тогда
		// В случае если аналитика задана в виде расчетной величины 
		// вычислим ее по правилам соответствия значений перечисления "ЗначенияАтрибутовПроводок"
		// измерениям или реквизитам регистра или из текущего документа
		Если ТипВидЗнач = "Перечисление.ЗначенияАтрибутовПроводок" Тогда
			ИдЗначения  = Значение.Идентификатор();
			
			Если глЕстьАтрибутРегистра(ИдЗначения, СписокАтрибутов, ВидРегистра) = 1 Тогда
				Возврат Рег.ПолучитьАтрибут(ИдЗначения);
				
			ИначеЕсли (ИдЗначения = "Содержание") Тогда
				ТекДок = Рег.ТекущийДокумент();
				Если (глЕстьРеквизитМнЧ(ИдЗначения, ТекДок.Вид()) = 1) И
				(Рег.НомерСтроки() <> 0) Тогда
					ТекДок.ПолучитьСтрокуПоНомеру(Рег.НомерСтроки());
					Возврат ТекДок.Содержание;
					
				Иначе
					Возврат Значение;
					
				КонецЕсли;
				
			ИначеЕсли (ИдЗначения = "ДвижениеДенежныхСредствИзДокОплаты") Тогда
				Если глЕстьАтрибутРегистра("ДокументОплаты", СписокАтрибутов, ВидРегистра) = 1 Тогда
					ДокОплаты = Рег.ДокументОплаты;              
					Если ДокОплаты.Выбран() = 1 Тогда
						Если глЕстьРеквизитШапки("ДвижениеДенежныхСредств", ДокОплаты.Вид()) = 1 Тогда
							Возврат ДокОплаты.ДвижениеДенежныхСредств;
						ИначеЕсли (глЕстьРеквизитМнЧ(ИдЗначения, ДокОплаты.Вид()) = 1) И
						(Рег.НомерСтроки() <> 0) Тогда
							Возврат ДокОплаты.ДвижениеДенежныхСредств;
						КонецЕсли;                                          
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ИдЗначения = "Комитент" Тогда
				Если глЕстьАтрибутРегистра("Партия", СписокАтрибутов, ВидРегистра) = 1 Тогда
					Возврат Рег.Партия.Поставщик;
				ИначеЕсли глЕстьАтрибутРегистра("ДоговорКомитента", СписокАтрибутов, ВидРегистра) = 1 Тогда
					Если Рег.ДоговорКомитента.Выбран() = 1 Тогда
						Возврат Рег.ДоговорКомитента.Владелец;
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ИдЗначения = "ДоговорКомитента" Тогда
				Если глЕстьАтрибутРегистра("Партия", СписокАтрибутов, ВидРегистра) = 1 Тогда
					Возврат Рег.Партия.ДоговорПоставщика;
				КонецЕсли;
				
			ИначеЕсли (ИдЗначения = "Контрагент")  
			и         (глЕстьАтрибутРегистра("Договор", СписокАтрибутов, ВидРегистра) = 1) 
			Тогда
				Возврат Рег.Договор.Владелец; 
				
			ИначеЕсли (ИдЗначения = "Контрагент")  
			И    (    (ВидРегистра = "КнигаПокупок") 
			или  (ВидРегистра = "КнигаПродаж")) 
			Тогда    
				КредДокумент     = Рег.КредДокумент;
				Если ПустоеЗначение(КредДокумент) = 0 Тогда
					ВидКредДокумента = КредДокумент.Вид();
					Если глЕстьРеквизитШапки("Таможня", ВидКредДокумента) = 1 Тогда
						Возврат КредДокумент.ПолучитьАтрибут("Таможня");
					ИначеЕсли глЕстьРеквизитШапки(ИдЗначения, ВидКредДокумента) = 1 Тогда
						Возврат КредДокумент.ПолучитьАтрибут(ИдЗначения);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли (ИдЗначения = "Договор") 
			И    (    (ВидРегистра = "КнигаПокупок") 
			или  (ВидРегистра = "КнигаПродаж")) 
			Тогда    
				КредДокумент     = Рег.КредДокумент;
				Если ПустоеЗначение(КредДокумент) = 0 Тогда
					ВидКредДокумента = КредДокумент.Вид();
					Если глЕстьРеквизитШапки("ДоговорТаможниРуб", ВидКредДокумента) = 1 Тогда
						Возврат КредДокумент.ПолучитьАтрибут("ДоговорТаможниРуб");
					ИначеЕсли глЕстьРеквизитШапки(ИдЗначения, ВидКредДокумента) = 1 Тогда
						Возврат КредДокумент.ПолучитьАтрибут(ИдЗначения);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли (ИдЗначения = "Контрагент") 
			или       (ИдЗначения = "Договор")  
			или       (ИдЗначения = "Поставщик") 
			или       (ИдЗначения = "ДоговорПоставщика")
			или       (ИдЗначения = "Таможня")
			или       (ИдЗначения = "ДоговорТаможниРуб")
			или       (ИдЗначения = "ДоговорТаможниВал")
			или       (ИдЗначения = "Склад") 
			или       (ИдЗначения = "ФизЛицо") 
			или       (ИдЗначения = "СкладПолучатель") 
			или       (ИдЗначения = "СтавкаНДС") 
			или       (ИдЗначения = "БанковскийСчет") 
			или       (ИдЗначения = "ДвижениеДенежныхСредств") 
			или       (ИдЗначения = "Субконто1") 
			Тогда
				
				Если глЕстьРеквизитШапки(ИдЗначения, ВидДокумента) = 1 Тогда
					Возврат ТекДокумент.ПолучитьАтрибут(ИдЗначения);
				ИначеЕсли (глЕстьРеквизитМнЧ(ИдЗначения, ВидДокумента) = 1) И
				(Рег.НомерСтроки() <> 0) Тогда
					Возврат ТекДокумент.ПолучитьАтрибут(ИдЗначения);
				КонецЕсли;  
			ИначеЕсли ИдЗначения = "СкладИзДокПоставки" Тогда // Для документа "Поступление (доп. расходы)" значения склада берется из документа поставки
				ДокПоставки = Рег.Партия.ПриходныйДокумент;
				Если ДокПоставки.Выбран() = 1 Тогда
					Если глЕстьРеквизитШапки("Склад", ДокПоставки.Вид()) = 1 Тогда
						Возврат ДокПоставки.Склад;
					КонецЕсли;
				КонецЕсли;
				Возврат ПолучитьПустоеЗначение("Справочник.Склады");
			ИначеЕсли ИдЗначения = "СчетФактура" Тогда          
				Если ВыгружатьСФ = 1 Тогда
					ДокПодч = СоздатьОбъект("Документ");
					ДокПодч.ВыбратьПодчиненныеДокументы(,,Рег.КредДокумент);
					Пока ДокПодч.ПолучитьДокумент()=1 Цикл
						Если (Найти(ДокПодч.Вид(),"СчетФактураПолученный")<>0) и (ДокПодч.Проведен()=1) Тогда
							Возврат ДокПодч.ТекущийДокумент();
						КонецЕсли;
					КонецЦикла;   
				КонецЕсли;
				Возврат ПолучитьПустоеЗначение("Документ.СчетФактураПолученный");
			ИначеЕсли ИдЗначения = "СчетФактураОснования" Тогда          
				Если ВыгружатьСФ = 1 Тогда              
					ТекДок = Рег.ТекущийДокумент();
					Если глЕстьРеквизитШапки("ДокОснование", ТекДок.Вид()) = 1 Тогда
						Если ТекДок.ДокОснование.Выбран() = 1 Тогда
							ДокПодч = СоздатьОбъект("Документ");
							ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекДок.ДокОснование);
							Пока ДокПодч.ПолучитьДокумент()=1 Цикл
								Если (Найти(ДокПодч.Вид(),"СчетФактураПолученный")<>0) и (ДокПодч.Проведен()=1) Тогда
									Возврат ДокПодч.ТекущийДокумент();               
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;   
				КонецЕсли;
				Возврат ПолучитьПустоеЗначение("Документ.СчетФактураПолученный");
			КонецЕсли;                                              
		Иначе
			Возврат Значение;
			
		КонецЕсли;
		
		// определяем суммовые атрибуты проводки
	ИначеЕсли (ИдРеквизита = "Сумма") 
	Или       (ИдРеквизита = "Количество") 
	Или       (ИдРеквизита = "ВалСумма") 
	Тогда
		
		ИдЗначения  = Значение.Идентификатор();
		Знак        = ?(Найти(ИдЗначения, "Минус") > 0, -1, 1);
		ИдЗначения  = СтрЗаменить(ИдЗначения, "Минус","");
		Если глЕстьАтрибутРегистра(ИдЗначения, СписокАтрибутов, ВидРегистра) = 1 Тогда
			Возврат  Знак * Рег.ПолучитьАтрибут(ИдЗначения);
			
		ИначеЕсли (ИдЗначения = "СуммаБезНДС") Тогда // для регистра книга покупок
			Возврат Знак * (Рег.СуммаРуб - Рег.СуммаНДС);
		ИначеЕсли (ИдЗначения = "Скидка") Тогда // для регистра партии наличие
			Возврат Знак * (Рег.ЦенаПрод * Рег.Количество - Рег.ПродСтоимость);			
		ИначеЕсли глЕстьРеквизитШапки(ИдЗначения, ВидДокумента) = 1 Тогда
			Возврат ТекДокумент.ПолучитьАтрибут(ИдЗначения);
		ИначеЕсли (ИдЗначения = "ТорговаяНаценка") Тогда // для регистра партии наличие
			Возврат Знак * (Рег.ПродСтоимость - Рег.СуммаБезНДС);			
		ИначеЕсли (ИдЗначения = "КорректировкаСебестоимости") Тогда   // для регистра партии наличие
			Возврат Знак * (Рег.Выручка - Рег.СуммаБезНДС);			
		ИначеЕсли (ИдЗначения = "СуммаБезНП") Тогда // для регистра Покупатели
			Возврат Знак * (Рег.СуммаРуб - Рег.СуммаНП);			
		ИначеЕсли (ИдЗначения = "СуммаНПНачисл") Тогда // для регистра Покупатели
			Если Рег.ТекущийДокумент() = Рег.КредДокумент Тогда
				Возврат Знак * Рег.СуммаНП;			
			Иначе
				Возврат 0;
			КонецЕсли;
		ИначеЕсли (глЕстьРеквизитМнЧ(ИдЗначения, ВидДокумента) = 1) И (Рег.НомерСтроки() <> 0) Тогда
			Возврат ТекДокумент.ПолучитьАтрибут(ИдЗначения);
			
		Иначе
			Возврат 0;
			
		КонецЕсли;
		
		// определяем валюту проводки
	ИначеЕсли ИдРеквизита = "Валюта" Тогда
		ИдЗначения  = Значение.Идентификатор();
		Если глЕстьАтрибутРегистра(ИдЗначения, СписокАтрибутов, ВидРегистра) = 1 Тогда
			Возврат Рег.ПолучитьАтрибут(ИдЗначения);
			
		ИначеЕсли ИдЗначения = "ВалютаДокумента" Тогда
			Если глЕстьРеквизитШапки("Валюта", ВидДокумента) = 1 Тогда
				Возврат ТекДокумент.Валюта;
			КонецЕсли;
			
		ИначеЕсли ИдЗначения = "ВалютаДоговора" Тогда
			
			Если глЕстьАтрибутРегистра("Договор", СписокАтрибутов, ВидРегистра) = 1 Тогда
				Договор = Рег.Договор;
				
			ИначеЕсли глЕстьРеквизитШапки("Договор", ВидДокумента) = 1 Тогда
				Договор = ТекДокумент.Договор;
				
			Иначе
				Договор = ПолучитьПустоеЗначение("Справочник.Договоры")
				
			КонецЕсли;
			
			Если Договор.Выбран() = 1 Тогда
				Возврат Договор.ВалютаВзаиморасчетов;
			КонецЕсли;
			
		ИначеЕсли ИдЗначения = "Валюта" Тогда
			Если глЕстьАтрибутРегистра("БанковскийСчет", СписокАтрибутов, ВидРегистра) = 1 Тогда
				Возврат Рег.БанковскийСчет.ВалютаСчета;
			КонецЕсли;	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // глРассчитатьЗначение()

//******************************************************************************
// глПолучитьДвижение(Рег, ВидРегистра, СпрДвиж, ПроверитьСтатусПартии, ПроверитьВидДолга)
//
// Параметры:
//  Рег                   - регистр, движение регистра.
//  ВидРегистра           - строка, идентификатор регистра.
//  СпрДвиж               - справочник "ДвиженияРегистров"
//  ПроверитьСтатусПартии - число, 1 - измерений "СтатусПартии" в этом регистре есть, 0 - нет.
//  ПроверитьВидДолга     - число, 1 - измерений "ВидДолга" в этом регистре есть, 0 - нет.
//
// Возвращаемое значение:
//  Движение регистра - элемент справочника "ДвиженияРегистров".
//  
// Описание:
//  Функция ищет для текущего движения регистра элемент справочника "Движения регистров".
//
Функция глПолучитьДвижение(Рег, ВидРегистра, СпрДвиж, ПроверитьСтатусПартии, ПроверитьВидДолга)
	
	Движение = ПолучитьПустоеЗначение("Справочник.ДвиженияРегистров");
	ЗнакДвижения = " ";
	Если Метаданные.Регистр(ВидРегистра).ТипРегистра = "Остатки" Тогда
		ЗнакДвижения = ?(Рег.Приход = 1, "+", "-");
	КонецЕсли;
	
	СпрДвиж.ВыбратьЭлементы(1);
	Пока СпрДвиж.ПолучитьЭлемент(1) = 1 Цикл  
		
		Если СпрДвиж.ПометкаУдаления() = 1 Тогда
			Продолжить;
		ИначеЕсли СокрЛП(СпрДвиж.ВидРегистра) <> ВидРегистра Тогда
			Продолжить;
		ИначеЕсли СпрДвиж.ЗнакДвижения <> ЗнакДвижения Тогда
			Продолжить;
		ИначеЕсли СпрДвиж.КодОперации <> Рег.КодОперации Тогда
			Продолжить;
		ИначеЕсли ПустоеЗначение(СпрДвиж.ВидСтатус) = 0 Тогда
			Если ПроверитьСтатусПартии = 1 Тогда
				Если СпрДвиж.ВидСтатус <> Рег.СтатусПартии Тогда
					Продолжить;
				КонецЕсли;
			ИначеЕсли ПроверитьВидДолга = 1 Тогда
				Если СпрДвиж.ВидСтатус <> Рег.ВидДолга Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Движение = СпрДвиж.ТекущийЭлемент();
		Прервать;
		
	КонецЦикла;
	
	Возврат Движение;
	
КонецФункции // глПолучитьДвижение()

//******************************************************************************
// глПолучитьХозОперацию(СписокХозОпераций, ТекДокумент, ВидДокумента) Экспорт
//
// Параметры:
//  СписокХозОпераций - список значений, список хоз.операций по которым уже 
//                      формировались движения.
//  ТекДокумент       - документ, документ по которому формируется хоз.операция.
//  ВидДокумента      - строка, идентификатор документа.
//
// Возвращаемое значение:
//  Хозяйственная операция - элемент справочника "ХозОперации".
//  
// Описание:
//  Функция осуществляет поиск элемента справочника "ХозОперации", по переданному 
// в качестве параметра документу.
//
Функция глПолучитьХозОперацию(СписокХозОпераций, ТекДокумент, ВидДокумента) Экспорт
	
	Если глЕстьРеквизитШапки("КодОперации", ВидДокумента) = 1 Тогда
		КодОперации = ТекДокумент.КодОперации;
	Иначе
		КодОперации = ПолучитьПустоеЗначение("Перечисление.КодыОпераций");
	КонецЕсли;
	
	ХозОперацияСтр = ВидДокумента + КодОперации.Идентификатор();
	ХозОперация    = СписокХозОпераций.Получить(ХозОперацияСтр);
	
	Если ПустоеЗначение(ХозОперация) = 1 Тогда
		ХозОперация = ПолучитьПустоеЗначение("Справочник.ХозОперации");
		СпрХО   = СоздатьОбъект("Справочник.ХозОперации");
		СпрХО.ВыбратьЭлементыПоРеквизиту("ВидДокумента", ВидДокумента, 0, 0);
		Пока СпрХО.ПолучитьЭлемент() = 1 Цикл
			Если СпрХО.КодОперации = КодОперации Тогда
				ХозОперация = СпрХО.ТекущийЭлемент();
				СписокХозОпераций.ДобавитьЗначение(ХозОперация, ХозОперацияСтр);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ХозОперация;
	
КонецФункции // глПолучитьХозОперацию()

//******************************************************************************
// глПолучитьТаблицуПроводок(ДатаНачала, ДатаКонца='00.00.0000', ВыбЮрЛицо = "", ВыгружатьСФ = 0) Экспорт
//
// Параметры:
//  ДатаНачала - дата, документ или позиция начала временного интервала.
//  ДатаКонца  - дата конца временного интервала (если не указана, то ТА).
//  ВыбЮрЛицо  - фильтр по юридическому лицу. если не указан - не фильтруем
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Процедура формирует проводки по движениям регистров в заданном интервале дат 
//  в соответствии с настройками справочников "Хоз. операции", "Движения регистров" и 
//  "ПроводкиХозОпераций".
//
Функция глПолучитьТаблицуПроводок(ДатаНачала, ДатаКонца='00.00.0000', ВыбЮрЛицо = "", ВыгружатьСФ = 0) Экспорт
	
	Перем ТекДокумент, ВидДокумента;
	
	Таблица = СоздатьОбъект("ТаблицаЗначений");
	Таблица.НоваяКолонка("Индекс");
	Таблица.НоваяКолонка("СчетД");
	Таблица.НоваяКолонка("СубконтоД1");
	Таблица.НоваяКолонка("СубконтоД2");
	Таблица.НоваяКолонка("СубконтоД3");
	Таблица.НоваяКолонка("СчетК");
	Таблица.НоваяКолонка("СубконтоК1");
	Таблица.НоваяКолонка("СубконтоК2");
	Таблица.НоваяКолонка("СубконтоК3");
	Таблица.НоваяКолонка("Сумма",      "Число",15,2);
	Таблица.НоваяКолонка("Количество", "Число",15,5);
	Таблица.НоваяКолонка("ВалСумма",   "Число",15,2);
	Таблица.НоваяКолонка("Валюта");
	Таблица.НоваяКолонка("Содержание");
	Таблица.НоваяКолонка("ВклСуммаОперации", "Число",1,0,);
	Таблица.НоваяКолонка("ВидСтатус");
	Таблица.НоваяКолонка("КодОперации");
	
	Докум   = СоздатьОбъект("Документ");
	СпрДвиж = СоздатьОбъект("Справочник.ДвиженияРегистров");
	СпрПров = СоздатьОбъект("Справочник.ПроводкиХозОпераций");
	СпрПров.ПорядокКодов();
	
	СписокХозОпераций = СоздатьОбъект("СписокЗначений");
	СписокДвижений    = СоздатьОбъект("СписокЗначений");
	СписокАтрибутов   = СоздатьОбъект("СписокЗначений");
	
	Для Номер = 1 По Метаданные.Регистр() Цикл
		
		ВидРегистра = Метаданные.Регистр(Номер).Идентификатор;
		Если глЕстьАтрибутРегистра("КодОперации", СписокАтрибутов, ВидРегистра) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Рег = СоздатьОбъект("Регистр." + ВидРегистра);
		
		Если ТипЗначенияСтр(ДатаНачала) = "Документ" Тогда
			ЕстьДвижения = Рег.ВыбратьДвиженияДокумента(ДатаНачала);
		Иначе
			ЕстьДвижения = Рег.ВыбратьДвижения(ДатаНачала, ДатаКонца);
		КонецЕсли;
		
		Если ЕстьДвижения = 1 Тогда
			ХозОперация  = глПолучитьХозОперацию(СписокХозОпераций, ТекДокумент, ВидДокумента);
			Если ХозОперация.Выбран() = 1 Тогда
				СпрПров.ИспользоватьВладельца(ХозОперация);
				Если СпрПров.ВыбратьЭлементы() = 0 Тогда
					Сообщить("Справочник проводок для хоз. операции" + СокрЛП(ХозОперация) + " не настроен.");
				КонецЕсли;
			КонецЕсли;
			ПроверитьСтатусПартии = глЕстьАтрибутРегистра("СтатусПартии", СписокАтрибутов, ВидРегистра);
			ПроверитьВидДолга	  = глЕстьАтрибутРегистра("ВидДолга", СписокАтрибутов, ВидРегистра);
			
			Пока Рег.ПолучитьДвижение() = 1 Цикл
				
				Если Рег.ТекущийДокумент() <> ТекДокумент Тогда
					Докум.НайтиДокумент(Рег.ТекущийДокумент());
					ТекДокумент  = Докум.ТекущийДокумент();
					
					// для документа Сторно нужно брать настройки проводок из сторнируемого документа
					Если ТекДокумент.Вид() = "Сторно" Тогда
						ТекДокумент = ТекДокумент.СторнируемыйДокумент;
					КонецЕсли;					
					
					ВидДокумента = ТекДокумент.Вид();
					ХозОперация  = глПолучитьХозОперацию(СписокХозОпераций, ТекДокумент, ВидДокумента);
					МетодОпределенияВыручки = ТекДокумент.Фирма.ЮрЛицо.МетодОпределенияВыручки.Получить(ТекДокумент.ДатаДок);
					МетодУчетаРозницы = ТекДокумент.Фирма.ЮрЛицо.МетодУчетаРозницы;
				КонецЕсли;   
				
				// если указано конкретное юрлицо тогда выгружаем проводки только по нему
				Если (ПустоеЗначение(ВыбЮрЛицо) = 0) Тогда
					Если ВыбЮрЛицо <> ТекДокумент.ЮрЛицо Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ПустоеЗначение(ХозОперация) = 0 Тогда
					СпрДвиж.ИспользоватьВладельца(ХозОперация);
					Движение = глПолучитьДвижение(Рег, ВидРегистра, СпрДвиж, ПроверитьСтатусПартии, ПроверитьВидДолга);
				Иначе
					Движение = ПолучитьПустоеЗначение("Справочник.ДвиженияРегистров");
				КонецЕсли;
				
				Если Движение.Выбран() = 1 Тогда
					Если Рег.НомерСтроки() <> 0 Тогда
						Если ТекДокумент.НомерСтроки <> Рег.НомерСтроки() Тогда
							ТекДокумент.ПолучитьСтрокуПоНомеру(Рег.НомерСтроки());
						КонецЕсли;
					КонецЕсли;
					
					СпрПров.ВыбратьЭлементыПоРеквизиту("Движение", Движение, 0, 0);
					
					Пока СпрПров.ПолучитьЭлемент(1) = 1 Цикл
						
						Если СпрПров.ПометкаУдаления() = 1 Тогда
							Продолжить;
						ИначеЕсли (СпрПров.МетодОпределенияВыручки.Выбран() = 1) И 
						(СпрПров.МетодОпределенияВыручки <> МетодОпределенияВыручки) Тогда
							Продолжить;
						ИначеЕсли (СпрПров.МетодУчетаРозницы.Выбран() = 1) И 
						(СпрПров.МетодУчетаРозницы <> МетодУчетаРозницы) Тогда
							Продолжить;
						ИначеЕсли (СпрПров.МетодФильтрацииПроводокПоСумме.Выбран() = 1) Тогда
							СуммаПроводки = глРассчитатьЗначение(Рег, СпрПров.Сумма, "Сумма", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент);
							
							Если ((СпрПров.МетодФильтрацииПроводокПоСумме = Перечисление.МетодыФильтрацииПроводокПоСумме.Плюс)
							и (СуммаПроводки < 0))
							или ((СпрПров.МетодФильтрацииПроводокПоСумме = Перечисление.МетодыФильтрацииПроводокПоСумме.Минус)
							и (СуммаПроводки > 0)) Тогда
								Продолжить;
							КонецЕсли;
							
						КонецЕсли;
						
						Таблица.НоваяСтрока();
						Таблица.Индекс           = СпрПров.Владелец.ПолныйКод() + "//" + СпрПров.ПолныйКод();
						Таблица.Содержание       = СпрПров.Наименование;
						Таблица.ВклСуммаОперации = СпрПров.ВклСуммаОперации;
						
						Если Метаданные.Справочник("ПланСчетов").Выбран() = 1 Тогда
							Таблица.СчетД = ПолучитьПустоеЗначение("Справочник.ПланСчетов");
							Таблица.СчетК = ПолучитьПустоеЗначение("Справочник.ПланСчетов");
							
						ИначеЕсли Метаданные.ПланСчетов() > 0 Тогда
							Таблица.СчетД = ПолучитьПустоеЗначение("Счет");
							Таблица.СчетК = ПолучитьПустоеЗначение("Счет");
							
						КонецЕсли;
						
						Если ТипЗначенияСтр(СпрПров.СчетД) = "Перечисление" Тогда
							ИдСчета = СпрПров.СчетД.Идентификатор();
							ИдСубконто = "Субконто"+СокрЛП(Сред(ИдСчета+"       ",5,2));
							
							Если (глЕстьРеквизитШапки(ИдСчета, ВидДокумента) = 1) ИЛИ
							((глЕстьРеквизитМнЧ(ИдСчета, ВидДокумента) = 1) И (Рег.НомерСтроки() <> 0)) Тогда
								Если ПустоеЗначение(ТекДокумент.ПолучитьАтрибут(ИдСчета)) = 0 Тогда
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СчетД", ТекДокумент.ПолучитьАтрибут(ИдСчета));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоД1", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "1"));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоД2", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "2"));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоД3", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "3"));
									
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли ПустоеЗначение(СпрПров.СчетД) = 0 Тогда
							Таблица.СчетД      = СпрПров.СчетД;
							Таблица.СубконтоД1 = глРассчитатьЗначение(Рег, СпрПров.СубконтоД1, "СубконтоД1", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							Таблица.СубконтоД2 = глРассчитатьЗначение(Рег, СпрПров.СубконтоД2, "СубконтоД2", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							Таблица.СубконтоД3 = глРассчитатьЗначение(Рег, СпрПров.СубконтоД3, "СубконтоД3", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							
						КонецЕсли;
						
						Если ТипЗначенияСтр(СпрПров.СчетК) = "Перечисление" Тогда
							ИдСчета = СпрПров.СчетК.Идентификатор();
							ИдСубконто = "Субконто"+СокрЛП(Сред(ИдСчета+"       ",5,2));
							
							Если (глЕстьРеквизитШапки(ИдСчета, ВидДокумента) = 1) ИЛИ
							((глЕстьРеквизитМнЧ(ИдСчета, ВидДокумента) = 1) И (Рег.НомерСтроки() <> 0)) Тогда
								Если ПустоеЗначение(ТекДокумент.ПолучитьАтрибут(ИдСчета)) = 0 Тогда
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СчетК", ТекДокумент.ПолучитьАтрибут(ИдСчета));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоК1", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "1"));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоК2", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "2"));
									Таблица.УстановитьЗначение(Таблица.НомерСтроки, "СубконтоК3", ТекДокумент.ПолучитьАтрибут(ИдСубконто + "3"));
									
								КонецЕсли;
								
							КонецЕсли;
							
						ИначеЕсли ПустоеЗначение(СпрПров.СчетК) = 0 Тогда
							Таблица.СчетК      = СпрПров.СчетК;
							Таблица.СубконтоК1 = глРассчитатьЗначение(Рег, СпрПров.СубконтоК1, "СубконтоК1", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							Таблица.СубконтоК2 = глРассчитатьЗначение(Рег, СпрПров.СубконтоК2, "СубконтоК2", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							Таблица.СубконтоК3 = глРассчитатьЗначение(Рег, СпрПров.СубконтоК3, "СубконтоК3", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент, ВыгружатьСФ);
							
						КонецЕсли;
						
						ЗабалансовыйСчетД = Макс(ПустоеЗначение(Таблица.СчетД), Таблица.СчетД.Забалансовый);
						ЗабалансовыйСчетК = Макс(ПустоеЗначение(Таблица.СчетК), Таблица.СчетК.Забалансовый);
						
						Если ЗабалансовыйСчетД <> ЗабалансовыйСчетК Тогда
							СтрДокумент  = ТекДокумент.Вид()+" № "+ТекДокумент.НомерДок+" от "+ТекДокумент.ДатаДок;
							
							Если ТекДокумент.НомерСтроки <> 0 Тогда
								СтрДокумент = СтрДокумент+", строка "+Рег.НомерСтроки();
							КонецЕсли;
							
							Сообщить("Неверно указан счет дебета или кредита: документ "+СтрДокумент+", проводка """+СпрПров.Наименование+""" не сформирована!", "!");
							Таблица.УдалитьСтроку(Таблица.НомерСтроки);
							Продолжить;
							
						ИначеЕсли (ПустоеЗначение(Таблица.СчетД) = 1) 
						и (ПустоеЗначение(Таблица.СчетК) = 1) Тогда
							Таблица.УдалитьСтроку(Таблица.НомерСтроки);
							Продолжить;
							
						КонецЕсли;
						
						Таблица.Сумма      = глРассчитатьЗначение(Рег, СпрПров.Сумма,      "Сумма", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент);
						
						Если (Таблица.СчетД.Количественный = 1) ИЛИ (Таблица.СчетК.Количественный = 1) Тогда
							Таблица.Количество = глРассчитатьЗначение(Рег, СпрПров.Количество, "Количество", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент);
						КонецЕсли;
						
						Если (Таблица.СчетД.Валютный = 1) ИЛИ (Таблица.СчетК.Валютный = 1) Тогда
							Таблица.ВалСумма   = глРассчитатьЗначение(Рег, СпрПров.ВалСумма,   "ВалСумма", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент);
							Таблица.Валюта     = глРассчитатьЗначение(Рег, СпрПров.Валюта,     "Валюта", СписокАтрибутов, ВидДокумента, ВидРегистра, ТекДокумент);
						КонецЕсли;
						
						Таблица.ВидСтатус   = Движение.ВидСтатус;
						Таблица.КодОперации = Движение.КодОперации;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Таблица.Сортировать("Индекс");
	
	// Подготовим таблицу к передаче
	ТаблицаПроводок = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПроводок.Загрузить(Таблица); // Исходная таблица неправиьно сортируется при свертке.
	ТаблицаПроводок.Свернуть("СчетД,СубконтоД1,СубконтоД2,СубконтоД3,СчетК,СубконтоК1,СубконтоК2,СубконтоК3,Валюта,ВклСуммаОперации,Содержание, ВидСтатус, КодОперации","Сумма,Количество,ВалСумма");
	
	Номер = 1;
	Пока Номер <= ТаблицаПроводок.КоличествоСтрок() Цикл
		Если (ТаблицаПроводок.ПолучитьЗначение(Номер, "Сумма") = 0) И 
		(ТаблицаПроводок.ПолучитьЗначение(Номер, "ВалСумма") = 0) И 
		(ТаблицаПроводок.ПолучитьЗначение(Номер, "Количество") = 0) Тогда
			
			ТаблицаПроводок.УдалитьСтроку(Номер);
		Иначе
			Номер = Номер+1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаПроводок;
	
КонецФункции // глПолучитьТаблицуПроводок()

//******************************************************************************
// глОпределитьКоррСчетаДокумента(Док,Результат,СчетОтбора,Сторона) Экспорт
//
// Параметры:
//  Док       - документ корреспонденции проводок которого нужно возвратить
//  Результат - "СписокЗначений" - значения возвращаемые процедурой
//  СчетОтбора- счет по которому отбираем
//  Сторона   - с какой стороны должен стоять счет отбора (1-дебет,2-кредит)
//
// Описание:
//  Процедура возвращает строки, содержащие список корреспонденций проводок 
//  сделанных документом, для заполнения печатных форм ПКО,РКО,Авансового отчета,КассовойКниги

Процедура глОпределитьКоррСчетаДокумента(Док,Результат,СчетОтбора,Сторона=1) Экспорт
	
	Перем КрСчДб,КрСчКр;
	
	Результат = СоздатьОбъект("СписокЗначений");
	
	//Определение коррсчета
	Если ТипЗначенияСтр(Док)="Документ" Тогда
		Если Док.Проведен()=1 Тогда
			ТабПров = СоздатьОбъект("ТаблицаЗначений");
			ТабПров = глПолучитьТаблицуПроводок(Док, Док,);
			ТабПров.Свернуть("СчетД,СчетК","Сумма");
			КрСчДб = "";
			КрСчКр = "";
			ТабПров.ВыбратьСтроки();
			Пока ТабПров.ПолучитьСтроку() = 1 Цикл
				Если Сторона = 1 Тогда
					Если Найти(?(ТипЗначенияСтр(ТабПров.СчетД)="Счет",ТабПров.СчетД.Код,Строка(ТабПров.СчетД)),СчетОтбора)<>1 Тогда
						Продолжить;   //отфильтровываем проводки по дебету
					КонецЕсли;
				ИначеЕсли Сторона = 2 Тогда
					Если Найти(?(ТипЗначенияСтр(ТабПров.СчетК)="Счет",ТабПров.СчетК.Код,Строка(ТабПров.СчетК)),СчетОтбора)<>1 Тогда
						Продолжить;   //отфильтровываем проводки по кредиту
					КонецЕсли;
				КонецЕсли;
				
				КрСчДб = ?(Найти(КрСчДб,ТабПров.СчетД.Код)=1,  КрСчДб,  ?(КрСчДб="", ТабПров.СчетД.Код, КрСчДб+", "+ТабПров.СчетД.Код));
				КрСчКр = ?(Найти(КрСчКр,ТабПров.СчетК.Код)=1,  КрСчКр,  ?(КрСчКр="", ТабПров.СчетК.Код, КрСчКр+", "+ТабПров.СчетК.Код));
			КонецЦикла;
			Результат.ДобавитьЗначение(КрСчДб,"СчетаДебета");
			Результат.ДобавитьЗначение(КрСчКр,"СчетаКредита");
			Результат.ДобавитьЗначение(ТабПров,"ТаблицаКорреспонденций");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //глОпределитьКорсчетаДокумента()

//******************************************************************************
// глПриЗаписиДокОснСФКонтр(Конт, ВидСчетаФактуры, ВидЗапКниги, Контрагент, Договор, Фирма, ОписаниеОш) Экспорт
//
// Параметры: 
//  Конт			- контекст документа
//  ВидСчетаФактуры	- строка, "СчетФактураВыданный" или "СчетФактураПолученный"
//  ВидЗапКниги		- строка, "ЗаписьКнигиПродаж" или "ЗаписьКнигиПокупок"
//  Контрагент		- контрагент, который был в документе до записи
//  Договор			- договор, который был в документе до записи                           
//	Фирма			- фирма, которая была в документе до записи
//  ОписаниеОш		- строка, описание ошибки
//
// Возвращаемое значение:
//  0 - при выполнении произошла ошибка, 1 - успешное завершение
//
// Описание:
//  Вызывается при записи документов, на основании которых выписывается документ
//  счет-фактура. Если в записываемом документе изменилсь реквизиты
//  Контрагент или Договор, то они заменяются и счете-фактуре. Если документ
//  счет-фактура автоматически не попадает в книгу продаж или покупок и на его
//  основании выписан документ ЗаписьКнигиПродаж или ЗаписьКнигиПокупок, то,
//  если изменены реквизиты Контрагент или Договор, они заменяются и в записи
//  книги.
//
Функция глПриЗаписиДокОснСФКонтр(Конт, ВидСчетаФактуры, ВидЗапКниги, Контрагент, Договор, Фирма, ОписаниеОш, Сумма=0) Экспорт
	ДокСФ	= СоздатьОбъект("Документ." + ВидСчетаФактуры);
	СФ		= глНайтиСчетФактуру(Конт, ВидСчетаФактуры);
	
	Если ПустоеЗначение(СФ) = 0 Тогда 
		
		КорректироватьСумму = 0;
		Если Сумма <> 0 Тогда
			Если Сумма <> Конт.Сумма Тогда
				КорректироватьСумму = 1;
			КонецЕсли;
		КонецЕсли;
		
		// СФ существует
		Если (Контрагент <> Конт.Контрагент)
		ИЛИ (Договор <> Конт.Договор)
		ИЛИ (Фирма <> Конт.Фирма)
		ИЛИ (КорректироватьСумму <> 0) 
		Тогда
			
			ДокСФ.НайтиДокумент(СФ);
			ДокСФ.Контрагент	= Конт.Контрагент;
			ДокСФ.Договор		= Конт.Договор;
			ДокСФ.Фирма			= Конт.Фирма;
			
			// Если это счет-фактура на аванс перезапишем сумму 
			Если (ДокСФ.Вид() = "СчетФактураВыданный") и (КорректироватьСумму <> 0) Тогда
				Если ДокСФ.СФНаАванс = 1 Тогда
					ДокСФ.ВыбратьСтроки();
					Если ДокСФ.ПолучитьСтроку() = 1 Тогда          
						Если Конт.Сумма <> ДокСФ.Сумма Тогда
							ДокСФ.Цена		= Конт.Сумма;
							ДокСФ.Сумма 	= Конт.Сумма;
							ДокСФ.СуммаНДС  = ДокСФ.Сумма/6;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				ДокСФ.Записать();
			Исключение
				ОписаниеОш	 = ОписаниеОшибки();
				Возврат 0;
			КонецПопытки;
			
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
				АвтоКнига	= СФ.АвтоКнигаПродаж;
			Иначе
				АвтоКнига	= СФ.АвтоКнигаПокупок;
			КонецЕсли;
			
			Если АвтоКнига = 0 Тогда
				// СФ автоматом не попадает в книгу продаж
				ДокЗапКниги	= СоздатьОбъект("Документ");
				ДокЗапКниги.ВыбратьПодчиненныеДокументы(,, СФ);
				
				Пока ДокЗапКниги.ПолучитьДокумент() = 1 Цикл
					
					Если ДокЗапКниги.Вид() <> ВидЗапКниги Тогда
						Продолжить;
					КонецЕсли;
					
					Если (Контрагент <> Конт.Контрагент)
					ИЛИ (Договор <> Конт.Договор) 
					ИЛИ (Фирма <> Конт.Фирма) Тогда
						
						ДокЗапКниги.Контрагент	= Конт.Контрагент;
						ДокЗапКниги.Договор		= Конт.Договор;
						ДокЗапКниги.Фирма		= Конт.Фирма;
						
						Попытка
							ДокЗапКниги.Записать();
						Исключение
							ОписаниеОш	 = ОписаниеОшибки();
							Возврат 0;
						КонецПопытки;
						
					КонецЕсли; 
					
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // глПриЗаписиДокОснСФКонтр()   


//******************************************************************************
// глПриЗаписиДокОснСФВал(Конт, ВидСчетаФактуры, ВидЗапКниги, Валюта, Курс, ОписаниеОш)
//
// Параметры: 
//  Конт			- контекст документа
//  ВидСчетаФактуры	- строка, "СчетФактураВыданный" или "СчетФактураПолученный"
//  ВидЗапКниги		- строка, "ЗаписьКнигиПродаж" или "ЗаписьКнигиПокупок"
//  Валюта			- валюта, которая была в документе до записи
//  Курс			- курс валюты, который был в документе до записи
//  ОписаниеОш		- строка, описание ошибки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается при записи документов, на основании которых выписывается документ
//  счет-фактура. Если в записываемом документе изменилсь реквизиты
//  Валюта или Курс, то они заменяются и счете-фактуре. Если документ
//  счет-фактура автоматически не попадает в книгу продаж или покупок и на его
//  основании выписан документ ЗаписьКнигиПродаж или ЗаписьКнигиПокупок, то,
//  если изменены реквизиты Валюта или Курс, выводится сообщение, что документ
//  записи книги нужно перезаполнить.
//
Функция глПриЗаписиДокОснСФВал(Конт, ВидСчетаФактуры, ВидЗапКниги, Валюта, Курс, ОписаниеОш) Экспорт
	ДокСФ	= СоздатьОбъект("Документ." + ВидСчетаФактуры);
	СФ		= глНайтиСчетФактуру(Конт, ВидСчетаФактуры);
	
	Если ПустоеЗначение(СФ) = 0 Тогда
		// СФ существует
		Если (Валюта <> Конт.Валюта)
		ИЛИ (Курс <> Конт.Курс)
		Тогда
			
			ДокСФ.НайтиДокумент(СФ);
			ДокСФ.Валюта		= Конт.Валюта;
			ДокСФ.Курс			= Конт.Курс;
			
			Попытка
				ДокСФ.Записать();
			Исключение
				ОписаниеОш	 = ОписаниеОшибки();
				Возврат 0;
			КонецПопытки;
			
			Если ВидСчетаФактуры = "СчетФактураВыданный" Тогда
				АвтоКнига	= СФ.АвтоКнигаПродаж;
			Иначе
				АвтоКнига	= СФ.АвтоКнигаПокупок;
			КонецЕсли;
			
			Если АвтоКнига = 0 Тогда
				// СФ автоматом не попадает в книгу продаж
				ДокЗапКниги	= СоздатьОбъект("Документ");
				ДокЗапКниги.ВыбратьПодчиненныеДокументы(,, СФ);
				
				Пока ДокЗапКниги.ПолучитьДокумент() = 1 Цикл
					
					Если ДокЗапКниги.Вид() <> ВидЗапКниги Тогда
						Продолжить;
					КонецЕсли;
					
					Если (Валюта <> Конт.Валюта)
					ИЛИ (Курс <> Конт.Курс)
					Тогда
						Если ДокЗапКниги.Проведен() = 1 Тогда
							Сообщить("Изменилась валюта документа или ее курс. Необходимо перезаполнить и перепровести документ " +
							глПредставлениеДокумента(ДокЗапКниги.ТекущийДокумент()));
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // глПриЗаписиДокОснСФВал()

//******************************************************************************
// глПриПроведении(Конт, ВидыДвижений) Экспорт
//
// Параметры:
//  Конт         - контекст документа.
//  ВидыДвижений - параметр, переданный в процедуру ОбработкаПроведения().
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Вызывается из процедур ОбработкаПроведения() модулей всех документов.
//  Вставлена для совместимости с комплексной конифгурацией
//
Процедура глПриПроведении(Конт, ВидыДвижений) Экспорт
	
	Конт.ЮрЛицо = Конт.Фирма.ЮрЛицо; 
	
	// Если сумма взаиморасчетов равна нулю, предупредим об этом пользователя
	Если глЕстьРеквизитШапки("СуммаВзаиморасчетов", Конт.Вид()) = 1 Тогда
		Если (Конт.СуммаВзаиморасчетов = 0) и (Конт.Контрагент.Выбран() = 1) и (Конт.Вид() <> "ОтчетКомитенту") Тогда 
			если НазваниеНабораПрав("Продавец_розница")=1 Тогда	//Продавцам незачем видеть доп. данные
				глСообщениеПроведения("Обнаружена нулевая сумма взаиморасчетов!", Конт.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Покажем трассировку, если она есть
	НазваниеТрассировки = "Проведение документа "+Конт.Вид()+" № "+Конт.НомерДок +" от "+Конт.ДатаДок;
	Если ТипЗначенияСтр(глСообщенияТрассировки) = "СписокЗначений" Тогда
		Если НазваниеТрассировки = СокрЛП(глСообщенияТрассировки.ПолучитьЗначение(3)) Тогда
			глПоказатьТрассировку(глСообщенияТрассировки);
			глСообщенияТрассировки = 0;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // глПриПроведении()

//******************************************************************************
// глПриУдаленииДокумента(Докум, Предупредить = 0)
//
// Параметры: 
//  Докум        - удаляемый документ
//  Предупредить - не обязательный параметр, 
//                 1 - выдавать предупреждения, иначе - сообщения в статусной строке
//
// Возвращаемое значение:
//  1 - можно удалять документ
//  0 - нельзя
//
// Описание:
//  Проверяет возможность удаления документа и производит необходимые действия при удалении 
//
Функция глПриУдаленииДокумента(Докум, Предупредить = 1) Экспорт
	
	Результат = 1;
	Текст     = "";
	
	// Проверка даты запрета редактирования
	
	//++Валерий МЭТР: ДатаЗапретаРедактирования
	//Если Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
	//	Если Докум.ПометкаУдаления() = 0 Тогда
	//		Текст = "Нельзя удалять документы с датой, 
	//		|более ранней чем дата запрета редактирования документов!";
	//	Иначе
	//		Текст = "Нельзя отменять удаление документов с датой,
	//		|более ранней, чем дата запрета редактирования документов!";
	//	КонецЕсли;
	//	Результат = 0;
	//КонецЕсли;	    
	
	Если (Докум.Вид() = "ЗаявкаНаАвтотранспорт") Тогда
		Если (Докум.Автор <> глПользователь) 
		и (глПользователь.Наименование <> "Иванова")
		и (глПользователь.Наименование <> "Васильева Марина")   
		и (глПользователь.Наименование <> "Кожемякин") 
		и (глПользователь.Наименование <> "Иванова Анна") Тогда 
			Текст = "У Вас нет прав на удаление этого документа!";
			Результат = 0; 
		КонецЕсли;	
	КонецЕсли;
	
	Если (ПустоеЗначение(глПользователь) = 0) Тогда
		Если ПустоеЗначение(глПользователь.ДатаЗапретаРедактирования) = 0 Тогда
			Если Докум.ДатаДок <= глПользователь.ДатаЗапретаРедактирования Тогда
				Если Докум.ПометкаУдаления() = 0 Тогда
					Текст = "Нельзя удалять документы с датой, 
					|более ранней чем дата запрета редактирования документов!";
				Иначе
					Текст = "Нельзя отменять удаление документов с датой,
					|более ранней, чем дата запрета редактирования документов!";
				КонецЕсли;
				Результат = 0;
			КонецЕсли;
		ИначеЕсли Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
			Если Докум.ПометкаУдаления() = 0 Тогда
				Текст = "Нельзя удалять документы с датой, 
				|более ранней чем дата запрета редактирования документов!";
			Иначе
				Текст = "Нельзя отменять удаление документов с датой,
				|более ранней, чем дата запрета редактирования документов!";
			КонецЕсли;
			Результат = 0;
		КонецЕсли;
	ИначеЕсли Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Если Докум.ПометкаУдаления() = 0 Тогда
			Текст = "Нельзя удалять документы с датой, 
			|более ранней чем дата запрета редактирования документов!";
		Иначе
			Текст = "Нельзя отменять удаление документов с датой,
			|более ранней, чем дата запрета редактирования документов!";
		КонецЕсли;
		Результат = 0;
	КонецЕсли;
	//--Валерий МЭТР: ДатаЗапретаРедактирования
	
	Если Результат = 1 Тогда
		
		// Для партиеобразующих документов при их удалении целесообразно удалить и их партии 
		Если (Докум.Вид() = "ПоступлениеТМЦ")  
		или (Докум.Вид() = "ВозвратОтПокупателя")  
		или (Докум.Вид() = "ОприходованиеТМЦ")  
		или (Докум.Вид() = "ВводОстатковТМЦ") 
		или (Докум.Вид() = "ПоступлениеТМЦИмпорт") 
		или (Докум.Вид() = "ПоступлениеТМЦРозница") 
		или (Докум.Вид() = "СтрокаАвансОтчетаТМЦ") 
		или (Докум.Вид() = "КомплектацияТМЦ")
		Тогда
			СпрПартии = СоздатьОбъект("Справочник.Партии");
			Докум.ВыбратьСтроки();
			Пока Докум.ПолучитьСтроку()=1 Цикл
				Если Докум.Партия.Выбран()=1 Тогда
					Если СпрПартии.НайтиЭлемент(Докум.Партия)=1 Тогда
						Если (Докум.Вид() = "ВозвратОтПокупателя")  
						и (СпрПартии.ПриходныйДокумент <> Докум.ТекущийДокумент()) Тогда
							
							// При возврате надо удалять тотлько партии,созданные документом возврата.
							Продолжить;
						КонецЕсли;
						Попытка
							Если Докум.ПометкаУдаления() = 0 Тогда
								СпрПартии.Удалить(0);
							Иначе                    
								СпрПартии.СнятьПометкуУдаления();
							КонецЕсли;	
						Исключение
							Текст = Текст + "|" + ОписаниеОшибки();
							Предупредить = 1;
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
			// При комплектации партия указана в шапке
			Если Докум.Вид() = "КомплектацияТМЦ" Тогда
				Если Докум.ПартияКомп.Выбран() = 1 Тогда
					Если СпрПартии.НайтиЭлемент(Докум.ПартияКомп)=1 Тогда // Объект СпрПартии создан выше
						Попытка
							Если Докум.ПометкаУдаления() = 0 Тогда
								СпрПартии.Удалить(0);
							Иначе                    
								СпрПартии.СнятьПометкуУдаления();
							КонецЕсли;	
						Исключение
							Текст = Текст + "|" + ОписаниеОшибки();
							Предупредить = 1;
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли (Докум.Вид() = "СчетФактураВыданный")
		или       (Докум.Вид() = "СчетФактураПолученный")
		Тогда      
			// при отмене удаления счета - фактуры проверим, а нет ли уже выписанной другой?
			Если (Докум.ПометкаУдаления() = 1) // отмена удаления
			и    (Докум.ДокОснование.Выбран() = 1)
			Тогда 
				ДругаяСФ = глНайтиСчетФактуру(Докум.ДокОснование,Докум.Вид(), 0);
				Если ПустоеЗначение(ДругаяСФ) = 0 Тогда
					Текст	= "На основании документа " + 
					глПредставлениеДокумента(Докум.ДокОснование) + " " +
					"уже выписан документ " + глПредставлениеДокумента(ДругаяСФ) + " " +
					"Нельзя снять пометку удаления счета - фактуры!";
					
					Результат = 0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли (Докум.Вид() = "Реализация") Тогда
			ДокПодч=СоздатьОбъект("Документ");
			
			ДокПодч.ВыбратьПодчиненныеДокументы(,,Докум.ТекущийДокумент());
			Пока ДокПодч.ПолучитьДокумент()=1 Цикл
				Если ДокПодч.Вид() = "РегистрацияОтгрузки" Тогда
					Если (ДокПодч.ПометкаУдаления() = 0) и (ДокПодч.Проведен() = 1) Тогда
						Попытка
							//ОткрытьФормуМодально(ДокПодч.ТекущийДокумент(),"СнятьСПроведенияИЗакрыть",0);
							ДокПодч.СделатьНеПроведенным();
							Сообщить("Снят с проведения документ: "+ДокПодч);
							//Прервать;
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Результат = 1 Тогда
		Если Докум.ПометкаУдаления() = 0 Тогда
			// при удалении документа нужно проверить, выписан ли на его
			// основании документ счет-фактура. Если счет-фактура введен,
			// то его нужно пометить на удаление.
			
			СписВводимыхНаОсн	= глПолучитьСписокВводимыхНаОсновании(Докум);
			Если (СписВводимыхНаОсн.НайтиЗначение("СчетФактураВыданный") > 0) Тогда
				СФ = глНайтиСчетФактуру(Докум, "СчетФактураВыданный");
			ИначеЕсли (СписВводимыхНаОсн.НайтиЗначение("СчетФактураПолученный") > 0) Тогда
				СФ = глНайтиСчетФактуру(Докум, "СчетФактураПолученный");
			КонецЕсли;
			
			Если ПустоеЗначение(СФ) = 0 Тогда
				Если СФ.ПометкаУдаления() = 0 Тогда
					ДокСФ = СоздатьОбъект("Документ");
					ДокСФ.НайтиДокумент(СФ);
					ДокСФ.Удалить(0);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Если есть о чем предупредить, то надо это сделать 
	Если ПустоеЗначение(Текст) = 0 Тогда
		Если Предупредить = 1 Тогда
			Предупреждение(Текст, 60);
		Иначе
			Сообщить(Текст,"!")
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // глПриУдаленииДокумента()        

//******************************************************************************
// глУдалитьЭлементыПодчиненного(ЭлемВладелец, ВидПодчиненного, Действие)
//
// Параметры: 
//  ЭлемВладелец	- элемент справочника владельца
//  ВидПодчиненного	- строка, вид подчиненного справочника
//  Действие		- число, 1 - снять пометку удаление, 0 - помечать на удаление
//  ОписаниеОш		- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  Устанавливает или снимает пометку удаления с элементов подчиненного
//  справочника.
//
Функция глУдалитьЭлементыПодчиненного(ЭлемВладелец, ВидПодчиненного, Действие, ОписаниеОш)
	
	Рез		= 1;
	СпрПодч	= СоздатьОбъект("Справочник." + ВидПодчиненного);
	
	СпрПодч.ИспользоватьВладельца(ЭлемВладелец);
	СпрПодч.ВыбратьЭлементы();
	Пока СпрПодч.ПолучитьЭлемент() = 1 Цикл
		Попытка
			Если Действие = 0 Тогда
				СпрПодч.Удалить(0);
			Иначе
				СпрПодч.СнятьПометкуУдаления();
			КонецЕсли;
		Исключение
			ОписаниеОш	= ОписаниеОшибки();
			Рез			= 0;
			Прервать;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // глУдалитьЭлементыПодчиненного()

//******************************************************************************
// глПриУдаленииЭлемента(УдалЭлем, НеСпрашивать, СистемныйВызов, ПометкаУдаления)
//
// Параметры: 
//  УдалЭлем		- удаляемый элемент.
//  НеСпрашивать	- 1     - не спрашивать о удалении элементов связанных справочников,
//                    иначе - задавать предварительный вопрос.
//  СистемныйВызов	- число, возможные значения:
//                    1 - фукнция вызвана из предопределенной процецедуры ПриУдаленииЭлемента
//                        при интерактивной удалении
//                    0 - фукнция вызвана из любого другого места
//  ПометкаУдаления	- указывает, что нужно сделать с элементами.
//                    1 - снять пометку на удаление
//                    0 - пометить на удаление
//
// Возвращаемое значение:
//  1 - можно удалять элемент
//  0 - нельзя
//
// Описание:
//  Проверяет возможность удаления элемента и производит необходимые действия при удалении 
//
Функция глПриУдаленииЭлемента(УдалЭлем, НеСпрашивать, СистемныйВызов, ПометкаУдаления) Экспорт
	Перем ОписаниеОш;
	
	Результат = 1;
	Если УдалЭлем.Вид() = "Контрагенты"  Тогда
		
		// При удалении контрагента возможно нужно удалять его "лицо" и банковские счета 
		
		ЮрФизЛицо    = УдалЭлем.ЮрФизЛицо;
		НужноУдалять = 0;
		Если ЮрФизЛицо.Выбран() = 1 Тогда
			Если ПустоеЗначение(НеСпрашивать) = 1 Тогда
				НеСпрашивать = 1;
				ТекстВопроса = ?(ПометкаУдаления = 0,"Пометить на удаление соответствующие элементы справочников",
				"Снять пометку на удаление у соответствующих элементов справочников");
				ТекстВопроса = ТекстВопроса + " юридических (физических) лиц и банковских счетов";
				
				Если СистемныйВызов = 0 Тогда
					ТекстВопроса = ТекстВопроса + ", а также подчиненных справочников договоров и свойств";
				КонецЕсли;
				
				ТекстВопроса = ТекстВопроса + "?";
				
				Ответ = Вопрос(ТекстВопроса, "Да+Нет", 60); 
				Если Ответ = "Да" Тогда                     
					НужноУдалять = 1;
				ИначеЕсли Ответ = "Таймаут" Тогда
					Результат = 0;
				КонецЕсли;				
			Иначе
				НужноУдалять = 1;
			КонецЕсли;				
			
			
			Если НужноУдалять = 1 Тогда
				Спр = СоздатьОбъект("Справочник." + ЮрФизЛицо.Вид());
				Если Спр.НайтиЭлемент(ЮрФизЛицо) = 1 Тогда
					Если ПометкаУдаления = 0 Тогда
						Спр.Удалить(0);
					Иначе
						Спр.СнятьПометкуУдаления();
					КонецЕсли;
				КонецЕсли;
				
				Спр = СоздатьОбъект("Справочник.БанковскиеСчета");
				Спр.ВыбратьЭлементыПоРеквизиту("ЮрФизЛицо", ЮрФизЛицо,0, 0);
				Пока Спр.ПолучитьЭлемент() = 1 Цикл
					Если ПометкаУдаления = 0 Тогда
						Спр.Удалить(0);
					Иначе
						Спр.СнятьПометкуУдаления();
					КонецЕсли;
				КонецЦикла;
				
				Если СистемныйВызов = 0 Тогда
					
					Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "Договоры", ПометкаУдаления, ОписаниеОш);
					Если Результат = 0 Тогда
						Сообщить(ОписаниеОш);
					Иначе
						Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "СвойстваКонтрагентов", ПометкаУдаления, ОписаниеОш);
						Если Результат = 0 Тогда
							Сообщить(ОписаниеОш);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; // НужноУдалять = 1
		КонецЕсли; // ЮрФизЛицо.Выбран() = 1
		
	ИначеЕсли УдалЭлем.Вид() = "Номенклатура" Тогда
		Если СистемныйВызов = 0 Тогда
			
			Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "Единицы", ПометкаУдаления, ОписаниеОш);
			Если Результат = 0 Тогда
				Сообщить(ОписаниеОш);
			Иначе
				Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "СвойстваНоменклатуры", ПометкаУдаления, ОписаниеОш);
				Если Результат = 0 Тогда
					Сообщить(ОписаниеОш);
				Иначе
					Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "Цены", ПометкаУдаления, ОписаниеОш);
					Если Результат = 0 Тогда
						Сообщить(ОписаниеОш);
					Иначе
						Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "Аналоги", ПометкаУдаления, ОписаниеОш);
						Если Результат = 0 Тогда
							Сообщить(ОписаниеОш);
						Иначе
							Результат	= глУдалитьЭлементыПодчиненного(УдалЭлем.ТекущийЭлемент(), "Комплектация", ПометкаУдаления, ОписаниеОш);
							Если Результат = 0 Тогда
								Сообщить(ОписаниеОш);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли УдалЭлем.Вид() = "Скидки" Тогда
		Если УдалЭлем.Наименование = "Закрытие кассовой смены" Тогда
			Предупреждение("Элемент справочника скидки """+СокрЛП(УдалЭлем.Наименование)+""" является служебным. 
			|Удаление запрещено!", 60);
			Результат	= 0;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // глПриУдаленииЭлемента()

///////////////////////////////////////////////////////////////////////////////
// ТОРГОВОЕ ОБОРУДОВАНИЕ
//
//******************************************************************************
// глОборудованиеКоманда(Вид, Обработка, Параметры)
//
// Параметры: 
//  Вид       - вид торгового оборудования
//  Обработка - только имя файла обработки обслуживания (без пути)
//  Параметры - параметры, которую нужно передать.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  проверяет наличие внешней обработки обслуживания. Если внешняя обработка
//  существует, то открывает ее форму.
Функция глОборудованиеКоманда(Вид, Обработка, Параметры) Экспорт
	Рез = "";
	
	Если ПустоеЗначение(Обработка) = 1 Тогда
		// внутренняя обработка
		Если Метаданные.Обработка("Обслуживание" + Вид ).Выбран() = 1 Тогда
			ОткрытьФормуМодально("Обработка.Обслуживание" + Вид, Параметры);
		Иначе
			Параметры.Установить("ОписаниеРезультата", "Отсутствует обработка обслуживания");
		КонецЕсли;
	Иначе
		Если ФС.СуществуетФайл(глКаталогОписаний + Обработка) = 0 Тогда
			Параметры.Установить("ОписаниеРезультата", "Отсутствует обработка обслуживания");
		Иначе
			//ОткрытьФормуМодально("Отчет", Параметры, глКаталогОписаний + Обработка);
			ОткрытьФорму("Отчет", Параметры, глКаталогОписаний + Обработка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глОборудованиеКоманда

//******************************************************************************
// глДПВключитьРежимВыводаБегСтроки()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  создает логическое окно на дисплее для вывода бегущей строки
Функция глДПВключитьРежимВыводаБегСтроки() Экспорт
	Рез = 0;
	
	Если глДПВкл = 1 Тогда
		Если глДПРежим <> глДПРежимБегСтроки Тогда
			глДПРежим = глДПРежимБегСтроки;
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс"   , "изменить_режим");
			Параметры.Установить("Режим"     , глДПРежим);
			Параметры.Установить("Объект"    , глДП);
			Параметры.Установить("БегСтрока" , глДПБегСтрока);
			
			РезТекст = глОборудованиеКоманда("Дисплей", глДПОбработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				Сообщить(РезТекст);
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					Сообщить("Дисплей покупателя: ошибка при включении режима бегущей строки");
					Сообщить(Параметры.Получить("ОписаниеРезультата"));
				Иначе
					Рез = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глДПВключитьРежимВыводаБегСтроки

//******************************************************************************
// глДПВключитьРежимВыводаСтрок()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  создает логическое окно на дисплее для вывода текстовых строк
Функция глДПВключитьРежимВыводаСтрок() Экспорт
	Рез = 0;
	
	Если глДПВкл = 1 Тогда
		Если глДПРежим <> глДПРежимВыводаСтрок Тогда
			глДПРежим = глДПРежимВыводаСтрок;
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс", "изменить_режим");
			Параметры.Установить("Режим"  , глДПРежим);
			Параметры.Установить("Объект" , глДП);
			
			РезТекст = глОборудованиеКоманда("Дисплей", глДПОбработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				Сообщить(РезТекст);
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					Сообщить("Дисплей покупателя: ошибка при включении режима вывода строк");
					Сообщить(Параметры.Получить("ОписаниеРезультата"));
				Иначе
					Рез = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глДПВключитьРежимВыводаСтрок

//******************************************************************************
// глДПВывестиСтроки(Строка1, Строка2)
//
// Параметры: 
//  Строка1 - строка, которая будет выведена в верхнюю стоку дисплея
//  Строка2 - строка, которая будет выведена в нижнюю стоку дисплея
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  выводит текстовые строки на дисплей
Функция глДПВывестиСтроки(Строка1="", Строка2="") Экспорт
	Рез = 0;
	
	Если глДПВкл = 1 Тогда
		Если глДПРежим = глДПРежимВыводаСтрок Тогда
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс" , "вывести_строки");
			Параметры.Установить("Строка1" , "Сумма: " + Строка1);
			Параметры.Установить("Строка2" ,  "Сдача: " + Строка2);
			Параметры.Установить("Объект"  , глДП);
			
			РезТекст = глОборудованиеКоманда("Дисплей", глДПОбработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				Сообщить(РезТекст);
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					Сообщить("Дисплей покупателя: ошибка при попытке отобразить строки");
					Сообщить(Параметры.Получить("ОписаниеРезультата"));
				Иначе
					Рез = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщить("Дисплей покупателя: невозможно отобразить строки в режиме бегущей строки");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глДПВывестиСтроки

//******************************************************************************
// глДПОткрытьДенежныйЯщик()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Открывает денежный ящик
Функция глДПОткрытьДенежныйЯщик() Экспорт
	Рез = 0;
	
	Если глДПВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс" , "открыть_денежный_ящик");
		Параметры.Установить("Объект"  , глДП);
		
		РезТекст = глОборудованиеКоманда("Дисплей", глДПОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Дисплей покупателя: ошибка при попытке открыть денежный ящик");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глДПОткрытьДенежныйЯщик()

//******************************************************************************
// глСканерВключен()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  1 - сканер подключен, 0 - нет
//
// Описание:
//  
Функция глСканерВключен() Экспорт
	Возврат глСканерВкл;
КонецФункции // глСканерВключен

//******************************************************************************
// глПрефиксШтрихкода()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  строка
//
// Описание:
//  возвращает строку символов, возможных вариантов префикса штрихкода
//  
Функция глПрефиксШтрихкода() Экспорт
	Возврат глСканерПрефикс;
КонецФункции // глПрефиксШтрихкода

//******************************************************************************
// глСканерПосылкаДанных(Флаг)
//
// Параметры: 
//  Флаг - режим работы. 1 - включить режим буферизации, 0 - отключить
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  установка или отключение режима буферизации считанных сканером штрихкодов
//  
Функция глСканерПосылкаДанных(Флаг) Экспорт
	Рез = 0;
	
	Если глСканерВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс", "посылка_данных");
		Параметры.Установить("Флаг"   , Флаг);
		Параметры.Установить("Объект" , глСканер);
		
		РезТекст = глОборудованиеКоманда("Сканер", глСканерОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
			
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Сканер штрихкода: ошибка при установке режима");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глСканерПосылкаДанных

//******************************************************************************
// глСканерОчиститьВход()
//
// Параметры: 
//  нет.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  очищает входную очередь (буфер) сканера
//  
Функция глСканерОчиститьВход() Экспорт
	Рез = 0;
	
	Если глСканерВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс", "очистить_вход");
		Параметры.Установить("Объект" , глСканер);
		
		РезТекст = глОборудованиеКоманда("Сканер", глСканерОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Сканер штрихкода: ошибка при очистке очереди");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез = 1;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глСканерОчиститьВход

//******************************************************************************
// глФРПечататьЧек(СписокТоваров, СуммаЧека, Получено, ПризнВозврата, НомерСекции, НомерЧека)
//
// Параметры: 
//  СписокТоваров - таблица значений с информацией о проданных или возвращенных товарах
//  СуммаЧека     - итоговая сумма чека
//  Получено      - сумма, полученная от покупателя
//  ПризнВозврата - 1 - чек на возврат, 0 - чек на продажу
//  НомерСекции   - номер секции
//  НомерЧека     - выходной параметр. Номер чека, пробитого на фискальном регистраторе
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  печатает чек на фискальном регистраторе
//  
Функция глФРПечататьЧек(СписокТоваров, СуммаЧека, Получено, Скидка, ПризнВозврата, НомерСекции, НомерЧека, Автор = "", НомерДокумента = "", ТипОплаты = 0, ПутьДляПечатиЧеков ="",  ПутьДляПечатиЧековЛок ="", ЧекБонус = 0, ПараметрыБонуса = "")  Экспорт
	
	Рез = 0;
	
	//Если глФРВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"           , "печатать_чек");
		//Параметры.Установить("Объект"            , глФР);
		//Параметры.Установить("ПарольПользователя", глФРПарольПользователя);
		Параметры.Установить("СписокТоваров"     , СписокТоваров);
		Параметры.Установить("СуммаЧека"         , СуммаЧека);
		Параметры.Установить("Получено"          , Получено);
		Параметры.Установить("Скидка"            , Скидка);
		Параметры.Установить("Возврат"           , ПризнВозврата);
		Параметры.Установить("НомерСекции"       , НомерСекции);  
		
		Параметры.Установить("Автор"       			, ""+Автор);
		Параметры.Установить("НомерДокумента"       , НомерДокумента);
		Параметры.Установить("ТипОплаты"       		, ""+ТипОплаты);
		Параметры.Установить("ЧекБонус"				, ЧекБонус);  
		
		Если ПараметрыБонуса = "" Тогда
			Параметры.Установить("БалловНачислено"    , 0);
			Параметры.Установить("БалловПотрачено"    , 0);
			Параметры.Установить("БалловВсего"        , 0);
		Иначе
			Параметры.Установить("БалловНачислено"			, ПараметрыБонуса.Получить("БалловНачислено")); 
			Параметры.Установить("БалловПотрачено"			, ПараметрыБонуса.Получить("БалловПотрачено"));
			Параметры.Установить("БалловВсего"				, ПараметрыБонуса.Получить("БалловВсего"));
		КонецЕсли;	
		
		ТекКаталог = СокрЛП(ПутьДляПечатиЧеков);
		Если Прав(ТекКаталог,1)<>"\" Тогда ТекКаталог=ТекКаталог+"\"; КонецЕсли;
		ИмяФайла = ТекКаталог + НомерДокумента + "_"+ДатаЧисло(ТекущаяДата())+ДатаМесяц(ТекущаяДата())+ДатаГод(ТекущаяДата()) + ".txt";
		Если ЗначениеВФайл(ИмяФайла, Параметры) = 0 Тогда
			ТекКаталог = СокрЛП(ПутьДляПечатиЧековЛок);
			Если Прав(ТекКаталог,1)<>"\" Тогда ТекКаталог=ТекКаталог+"\"; КонецЕсли;
			ИмяФайла = ТекКаталог + НомерДокумента + "_"+ДатаЧисло(ТекущаяДата())+ДатаМесяц(ТекущаяДата())+ДатаГод(ТекущаяДата()) + ".txt";
			ЗначениеВФайл(ИмяФайла, Параметры);
		КонецЕсли;	
		Рез = 1;
		//РезТекст = глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		//Если ПустоеЗначение(РезТекст) = 0 Тогда
		//	Сообщить(РезТекст);
		//Иначе
		//	Если Параметры.Получить("Результат") = 0 Тогда
		//		Сообщить("Фискальный регистартор: ошибка при печати чека");
		//		Сообщить(Параметры.Получить("ОписаниеРезультата"));
		//	Иначе
		//		НомерЧека = Параметры.Получить("НомерЧека");
		//		Рез = 1;
		//	КонецЕсли;
		//КонецЕсли;
	//КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // глФРПечататьЧек()

//******************************************************************************
// глФРЗакрытьСмену(НомерЛенты, ОписаниеРезультата)
//
// Параметры: 
//  НомерЛенты			- номер ленты ККМ (номер отчета)
//  ОписаниеРезультата	- строка, в которую при возникновении ошибки помещается
//                        текстовая информация о ней.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Инициализирует печать Z-отчета на фискальном регистраторе.
//  
Функция глФРЗакрытьСмену(НомерЛенты, ОписаниеРезультата) Экспорт
	Рез = 0;
	
	Если глФРВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"      , "закрыть_смену");
		Параметры.Установить("Объект"       , глФР);
		Параметры.Установить("ПарольАдминистратора", глФРПарольАдминистратора);
		
		РезТекст = глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				ОписаниеРезультата = "Фискальный регистартор: ошибка при закрытии смены" +
				РазделительСтрок +
				Параметры.Получить("ОписаниеРезультата");
			Иначе
				НомерЛенты	= Параметры.Получить("НомерЛенты"); 
				Рез			= 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глФРЗакрытьСмену()

//******************************************************************************
// глТерминалВключен()
//
// Параметры: 
//  нет 
//
// Возвращаемое значение:
//  1 - терминал сбора данных подключен, 0 - нет.
//
// Описание:
//  
Функция глТерминалВключен() Экспорт
	Возврат глТерминалВкл;
КонецФункции // глТерминалВключен()

//******************************************************************************
// глТерминалЗагрузитьДанные(Табл)
//
// Параметры: 
//  Табл - таблица значений с данными из памяти терминала. 
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  загружает данные из терминала сбора данных
//  
Функция глТерминалЗагрузитьДанные(Табл) Экспорт
	Рез = 0;
	
	Если глТерминалВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс", "загрузить");
		Параметры.Установить("Объект" , глТерминал);
		
		РезТекст = глОборудованиеКоманда("Терминал", глТерминалОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Терминал сбора данных: ошибка при загрузке данных");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Табл = Параметры.Получить("Данные");
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глТерминалЗагрузить()

//******************************************************************************
// глТерминалОчиститьПамять()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  очищает память терминала сбора данных
//  
Функция глТерминалОчиститьПамять() Экспорт
	Рез = 0;
	
	Если глТерминалВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"      , "очистить");
		Параметры.Установить("Объект"       , глТерминал);
		
		РезТекст = глОборудованиеКоманда("Терминал", глТерминалОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Терминал сбора данных: ошибка при очистке памяти");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Табл = Параметры.Получить("Данные");
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глТерминалЗагрузить()

//******************************************************************************
// глВесыВключены()
//
// Параметры: 
//  нет 
//
// Возвращаемое значение:
//  1 - терминал сбора данных подключен, 0 - нет.
//
// Описание:
//  Возвращает текущене состояние электронных весов
Функция глВесыВключены() Экспорт
	Возврат глВесыВкл;
КонецФункции // глВесыВключены()

//******************************************************************************
// глВесыПолучитьВес(Вес)
//
// Параметры: 
//  Вес - через это параметр возвращается значение веса.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Получает текущее значение веса.
//
Функция глВесыПолучитьВес(Вес) Экспорт
	Рез = 0;
	Если глВесыВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"	, "получитьвес");
		Параметры.Установить("Объект"	, глВесы);
		
		РезТекст = глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Электронные весы: ошибка при получении веса");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Вес = Параметры.Получить("Вес");
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВесыПолучитьВес()

//******************************************************************************
// глВесыТара()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Устанавливает вес тары, как текущее значение веса на чашке весов.
//
Функция глВесыТара() Экспорт
	Рез = 0;
	Если глВесыВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"      , "тара");
		Параметры.Установить("Объект"       , глВесы);
		
		РезТекст = глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Электронные весы: ошибка при фиксировании тары");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВесыТара()

//******************************************************************************
// глВесыУстановитьТару(ВесТары)
//
// Параметры: 
//  ВесТары - значение веса тары.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Устанавливает вес тары на весах
//
Функция глВесыУстановитьТару(ВесТары) Экспорт
	Рез = 0;
	Если глВесыВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"	, "установитьтару");
		Параметры.Установить("Объект"	, глВесы);
		Параметры.Установить("ВесТары"	, ВесТары);
		
		РезТекст = глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Электронные весы: ошибка при установке тары");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВесыУстановитьТару()

//******************************************************************************
// глВесыОбнулить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Обнуляет показания индикатора весов.
//
Функция глВесыОбнулить() Экспорт
	Рез = 0;
	Если глВесыВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"	, "обнулить");
		Параметры.Установить("Объект"	, глВесы);
		
		РезТекст = глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Электронные весы: ошибка при обнулении индикатора");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВесыОбнулить()

//******************************************************************************
// глВесыУстановитьРежим()
//
// Параметры: 
//  Режим	- режим работы. 1 - асинхронный режим, 0 - синхронный
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  Устанавливает или отключает асинхронный режим работы весов
//
Функция глВесыУстановитьРежим(Режим) Экспорт
	Рез = 0;
	Если глВесыВкл = 1 Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Процесс"	, "установитьрежим");
		Параметры.Установить("Режим"	, Режим);
		Параметры.Установить("Объект"	, глВесы);
		
		РезТекст = глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		Если ПустоеЗначение(РезТекст) = 0 Тогда
			Сообщить(РезТекст);
		Иначе
			Если Параметры.Получить("Результат") = 0 Тогда
				Сообщить("Электронные весы: ошибка при установке режима");
				Сообщить(Параметры.Получить("ОписаниеРезультата"));
			Иначе
				Рез  = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глВесыУстановитьРежим()

//******************************************************************************
// глККМЗагрузитьТовары(Касса, НомСекции, СписокТоваров, ОписаниеРезультата)
//
// Параметры: 
//  Касса         - элемент справочника Кассы. Касса, в которую нужно загрузить
//                  информацию о продаваемых товарах
//  НомСекции     - номер секции.
//  СписокТоваров - таблица значений с информацией о товарах
//  ОписаниеРезультата	- строка. При возникновении ошибки содержит ее описание.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  загружает в ККМ, работающую в режиме Off-Line, информацию о товарах
//  
Функция глККМЗагрузитьТовары(Касса, НомСекции, СписокТоваров, ОписаниеРезультата) Экспорт
	Рез = 0;
	Поз = 0;
	Если глККМOffLine.НайтиЗначение(Касса, Поз, "ККМ") = 1 Тогда
		глККМOffLine.ПолучитьСтрокуПоНомеру(Поз);
		
		Если глККМOffLine.Вкл = 1 Тогда
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс"      , "загрузить_товары");
			Параметры.Установить("Объект"       , глККМOffLine.Объект);
			Параметры.Установить("НомерСекции"  , НомСекции);
			Параметры.Установить("НомерККМ"     , Касса.Код);
			Параметры.Установить("СписокТоваров", СписокТоваров);
			Параметры.Установить("КаталогОбмена", глККМOffLine.КаталогОбмена);
			
			РезТекст = глОборудованиеКоманда("Offline", глККМOffLine.Обработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				ОписаниеРезультата	= РезТекст;
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					ОписаниеРезультата	= СокрЛП(Касса) + ": ошибка при загрузке товаров" +
					" " + Параметры.Получить("ОписаниеРезультата");
				Иначе
					Табл = Параметры.Получить("Данные");
					Рез  = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеРезультата = "ККМ """ + Касса + """ не подключена.";
		КонецЕсли;
		
	Иначе
		ОписаниеРезультата = "ККМ """ + Касса + """ не настроена.";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глККМЗагрузитьТовары()

//******************************************************************************
// глККМЗакрытьСмену(Касса, НомСекции, Отчет, ОписаниеРезультата, Сообщение = "")
//
// Параметры: 
//  Касса				- элемент справочника Кассы. Касса, для которой 
//                        закрывается смена.
//  НомСекции			- номер секции.
//  Отчет				- возвращаемая таблица значений с данными о проданных
//                        товарах.
//  ОписаниеРезультата	- строка. При возникновении ошибки содержит ее описание.
//
// Возвращаемое значение:
//  1 - операция успешно завершена, 0 - нет.
//
// Описание:
//  получает из ККМ, работающей в режиме Off-Line, отчет о проданных товарах
//  
Функция глККМЗакрытьСмену(Касса, НомСекции, Отчет, ОписаниеРезультата, Сообщение = "") Экспорт
	Рез = 0;
	Поз = 0;
	
	Если глККМOffLine.НайтиЗначение(Касса, Поз, "ККМ") = 1 Тогда
		глККМOffLine.ПолучитьСтрокуПоНомеру(Поз);
		
		Если глККМOffLine.Вкл = 1 Тогда
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс"      , "закрыть_смену");
			Параметры.Установить("Объект"       , глККМOffLine.Объект);
			Параметры.Установить("НомерСекции"  , НомСекции);
			Параметры.Установить("НомерККМ"     , Касса.Код);
			Параметры.Установить("КаталогОбмена", глККМOffLine.КаталогОбмена);
			
			РезТекст = глОборудованиеКоманда("Offline", глККМOffLine.Обработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				Сообщить(РезТекст);
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					ОписаниеРезультата = СокрЛП(Касса) + ": ошибка при получении отчета" + РазделительСтрок +
					Параметры.Получить("ОписаниеРезультата");
				Иначе
					Отчет     = Параметры.Получить("Отчет");
					Сообщение = Параметры.Получить("Сообщение");
					Рез   = 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеРезультата = "ККМ """ + Касса + """ не подключена.";
		КонецЕсли;
	Иначе
		ОписаниеРезультата = "ККМ """ + Касса + """ не настроена.";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // глККМЗакрытьСмену()

//******************************************************************************
// глПолучитьТоварПоШтрихкоду(пШтрихкод, пТовар, пЕдиница, пКоличество)
//
// Параметры: 
//  пШтрихкод, пТовар, пЕдиница, пКоличество
//
// Возвращаемое значение:
//  1 - удалось найти товар, 0 - нет
//
// Описание:
//  по переданному штрихкоду ищет товар и единицу измерения. Если штрихкод
//  начинается с символов "23" (весовой штрихкод), то фукнция также извлекает
//  вес из штрихкода и возвращает через параметр пКоличество. Для остальных
//  штрихкодов через параметр пКоличество возвращается 1.
//  
Функция глПолучитьТоварПоШтрихкоду(пШтрихкод, пТовар, пЕдиница, пКоличество) Экспорт
	Перем ТоварНайден;
	
	Штрихкод = СокрЛП(пШтрихкод);
	
	// Определение типа штрих-кода
	ПрефиксШтрихкода = глПрефиксШтрихкода();
	Если ПустоеЗначение(ПрефиксШтрихкода) = 0 Тогда
		Если Найти(ПрефиксШтрихкода, Лев(Штрихкод, 1)) <> 0 Тогда
			// Удаляем спец. символ из штрих-кода
			Штрихкод = Сред(Штрихкод, 2);
		Иначе
			Сообщить("Формат считанного штрих-кода не предназначен для товаров");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// идентификация полученного штрихкода
	Если Лев(Штрихкод, 2) = глПрефиксВесовогоШтрихкода Тогда
		// Используется свой внутренний штрих-код товара
		// Штрих-код построен по коду товара и весу
		ОбЕдиница = СоздатьОбъект("Справочник.Единицы");
		
		ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода, Сред(Штрихкод, 3, 5) + "00000");
		Рез = ОбЕдиница.НайтиПоРеквизиту("ШтрихКод", ВремШтрихкод, 1);
		
		Если Рез = 1 Тогда
			пТовар		= ОбЕдиница.Владелец;
			пЕдиница	= ОбЕдиница.ТекущийЭлемент();
			пКоличество	= Число(Сред(Штрихкод, 8, 5)) / 1000;
		КонецЕсли;
	Иначе
		// Используется основной штрих-код товара
		// или свой внутренний штрих-код товара с префиксом "20"
		ОбЕдиница = СоздатьОбъект("Справочник.Единицы");
		Рез = ОбЕдиница.НайтиПоРеквизиту("ШтрихКод", Штрихкод, 1);
		
		Если Рез = 1 Тогда
			пТовар		= ОбЕдиница.Владелец;
			пЕдиница	= ОбЕдиница.ТекущийЭлемент();
			пКоличество	= 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Рез = 0 Тогда
		Сообщить("Товар со штрих-кодом " + Штрихкод + " не найден.");
	КонецЕсли;
	
	Возврат  Рез;
КонецФункции // глПолучитьТоварПоШтрихкоду()

//******************************************************************************
// глОбработкаСобытияОтККМ(Источник,Событие,Данные)
//
// Параметры: 
//  Источник - строка - "A100Online"
//  Событие  - строка - наименование сообщения
//  Данные   - строка - сетевой номер ККМ, вызвавшей Событие
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается для обработки сообщения о произошедшем событии,
// поступившего от ККМ "АМС-100Ф", подключенной в режиме "on line".
//
Процедура глОбработкаСобытияОтККМ(Источник, Событие, Данные)
	
	Поз = 0;
	Если глККМOnLine.НайтиЗначение(Данные, Поз, "Код") = 1 Тогда
		глККМOnLine.ПолучитьСтрокуПоНомеру(Поз);
		
		Если глККМOnLine.Вкл = 1 Тогда
			
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.Установить("Процесс"        , "событие");
			Параметры.Установить("Событие"        , Событие);
			Параметры.Установить("Объект"         , глККМOnLine.Объект);
			Параметры.Установить("СетевойНомерККМ", Данные);
			
			РезТекст = глОборудованиеКоманда("Online", глККМOnLine.Обработка, Параметры);
			Если ПустоеЗначение(РезТекст) = 0 Тогда
				Сообщить(РезТекст);
			Иначе
				Если Параметры.Получить("Результат") = 0 Тогда
					Сообщить("Ошибка обработки сообщения от ККМ """+глККМOnLine.ККМ.Наименование+""""+РазделительСтрок+ 
					Параметры.Получить("ОписаниеРезультата"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			ОписаниеРезультата = "ККМ """ + глККМOnLine.ККМ + """ не подключена.";
		КонецЕсли;
	Иначе
		ОписаниеРезультата = "ККМ """ + глККМOnLine.ККМ + """ не настроена
		|(возможно не задан заводской номер).";
	КонецЕсли;
	
КонецПроцедуры // глОбработкаСобытияОтККМ()

//******************************************************************************
// глОбработкаВнешнегоСобытия(Источник,Событие,Данные)
//
// Параметры: 
//  Источник,Событие,Данные
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызов данной процедуры происходит из всех процедур ОбработкаВнешнегоСобытия(),
// располагающихся в формах справочников, документов, обработок и т.д., для 
// обработки независящих от активной в текущий момент формы сообщений.
// 
Процедура глОбработкаВнешнегоСобытия(Источник, Событие, Данные) Экспорт 
	
	Если Источник = "A100Online" Тогда
		
		глОбработкаСобытияОтККМ(Источник, Событие, Данные);	
	КонецЕсли;
	
	
КонецПроцедуры // глОбработкаВнешнегоСобытия()

//******************************************************************************
// ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
//
// Параметры: 
//  Источник,Событие,Данные
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Эта процедура в глобальном модуле отлавливает данные от сканера штрих-кода,
//  когда не открыта ни одна из форм, использующих сканер в своей работе.
//  Пришедшие данные в данном случае пропускаются, чтобы не заполнять буфер сканера
//
Процедура ОбработкаВнешнегоСобытия(Источник, Событие, Данные)
	
	//Если Событие = "BarCodeValue" Тогда
	//	Если глСканерВключен() = 1 Тогда
	//		глСканерПосылкаДанных(1);
	//	КонецЕсли;
	//Иначе
	//	глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	//КонецЕсли;
	Если Scaner.OldVersion<>0 Тогда
		//Работа драйвера совместима с предыдущей версиией
		// Источник="BarCodeScaner" (для других устройств свои названия)
		//Событие="BarCodeValue", Данные=ПолученныеДанные
		Сообщить("Old Version <> 0");
		Сообщить("Источник: "+Строка( Источник ));
		Сообщить("Событие: "+Строка( Событие ));
		Сообщить(Строка("Данные от устройства: "+ Данные));
	Иначе
		//Работа драйвера не совместима с предыдущей версиией
		// Источник="BarCodeScaner" (для других устройств свои названия)
		//Событие="BarCodeValue", Данные=НомерСобытия
		Сообщить("Old Version = 0");
		Scaner.EventNumber=Число(Данные);
		Сообщить("Данные от устройства: "+Scaner.ScanData);
		Сообщить("Порт: "+Scaner.PortDescription);
		Сообщить("Модель: "+Scaner.DeviceDescription);
		Сообщить("Лог. устройство: " + Строка(Scaner.CurrentDeviceNumber) + " | " + Scaner.CurrentDeviceName);
		Scaner.DeleteEvent();
	КонецЕсли;
	Scaner.DataEventEnabled = 1;
	Сообщить("Количество сообщений "+Строка(Scaner.DataCount));
	
КонецПроцедуры // ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА КОММЕНТИРОВАНИЯ ВЫПОЛНЯЕМЫХ ДЕЙСТВИЙ
//******************************************************************************

// глСоздатьТрассировку(Описание)
//
// Параметры: 
// 	Описание - строка, описание трассировки - заголовок фрагмента трассировки
//
// Возвращаемое значение:
// 	Список значений, содержащий информацию о выполняемой трассировке действия
//
// Описание:
// 	Создает и заполняет начальными значениями список значений-трассировку
// 	Полученный список значений в дальнейшем используется в функциях 
//  глСообщениеТрассировки
//  глПоказатьТрассировку
//
// Структура трассировки
//  1 - число - уровень сообщения трассировки
//  2 - таблица значений, список сообщений трассировки
//  3 - строка, описатель трассировки
//

Функция глСоздатьТрассировку(Описание) Экспорт
	Трассировка = СоздатьОбъект("СписокЗначений"); 
	//СписокСообщений = СоздатьОбъект("СписокЗначений");
	СписокСообщений = СоздатьОбъект("ТаблицаЗначений");
	СписокСообщений.НоваяКолонка("ТекстСообщения","Строка",,,"Текст сообщения",50);
	СписокСообщений.НоваяКолонка("ТипСообщения","Число",1);
	СписокСообщений.НоваяКолонка("Форма");
	СписокСообщений.НоваяКолонка("Объект");
	СписокСообщений.НоваяКолонка("Контрол","Строка",20);
	Трассировка.ДобавитьЗначение(0);                             // уровень сообщения трассировки
	Трассировка.ДобавитьЗначение(СписокСообщений);       // список сообщений трассировки
	Трассировка.ДобавитьЗначение(Описание);                     // описание трассировки 
	Возврат Трассировка;
КонецФункции      // глСоздатьТрассировку()

//******************************************************************************
// глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения, ИзменениеУровняСообщения, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", _П04="", _П04Формат="")
//
// Параметры: 
// 	Трассировка - список значений, возвращенный функцией глСоздатьТрассировку()
//  Сообщение - текст сообщения трассировки
//  ТипСообщения - число 0 - обычное сообщение (просто комментарий), 
//                                           1 - "красное" сообщение (фатальная ошибка)
//                                           -1 - "синее" сообщение (предупреждение)
//  ИзменениеУровняСообщения - число "1" - для увеличения уровня трассировки (сообщение имеет "вложенный" характер)
//                             Текущее сообщение и все последующие будут "на уровень больше"
//                             число "-1" - для уменьшения уровня трассировки
//                             Все последующие сообщения будут "на уровень меньше"
//  _П01... - параметры, подставляемые в текст сообщения
//  _П01Формат - формат, используемый для соответствующего параметра
//
//  Форма -     необязательный параметр - форма, которую нужно открыть 
//              для обработки сообщения
//  Объект -    необязательный параметр - объект, который нужно ктивизировать (для форм списка) 
//				для обработки сообщения
//  Контрол -   необязательный параметр - контрол формы, который нужно активизировать для обработки сообщения
//
// Описание:
//  Вводит очередное сообщение трассировки, если параметр Трассировка не является 
//  подходящим списком значений - выводится сообщение в окно Сообщений
//  При выводе сообщения производится подстановка подстроки _П01 и т.д. соответсвующим 
//  пареметром в соответствующем формате.
//           Например:
//           глСообщениеТрассировки(Трассировка, "Число: _П01", 0, 0, 340.23, "Ч(0)9.3")
//           приведет к сообщению - "Число 00340.230"
//

Процедура глСообщениеТрассировки(Трассировка, Сообщение, ТипСообщения=0, ИзменениеУровняСообщения=0, Знач _П01="", _П01Формат="", Знач _П02="", _П02Формат="", Знач _П03="", _П03Формат="", Знач _П04="", _П04Формат="",Форма="",Объект="",Контрол="") Экспорт
	Если (глРежимТрассировки = 1) или (ТипСообщения<>0) Тогда
		Попытка
			Тип = ТипЗначения(_П01);
			Если ПустоеЗначение(_П01Формат)=0 Тогда
				_П01 = ""+Формат(_П01, _П01Формат);
			Иначе
				_П01 = ""+_П01;
			КонецЕсли;
			Тип = ТипЗначения(_П02);
			Если ПустоеЗначение(_П02Формат)=0 Тогда
				_П02 = ""+Формат(_П02, _П02Формат);
			Иначе
				_П02 = ""+_П02;
			КонецЕсли;
			Тип = ТипЗначения(_П03);
			Если ПустоеЗначение(_П03Формат)=0 Тогда
				_П03 = ""+Формат(_П03, _П03Формат);
			Иначе
				_П03 = ""+_П03;
			КонецЕсли;
			Тип = ТипЗначения(_П04);
			Если ПустоеЗначение(_П04Формат)=0 Тогда
				_П04 = ""+Формат(_П04, _П04Формат);
			Иначе
				_П04 = ""+_П04;
			КонецЕсли;
			
			Сообщение = СтрЗаменить(Сообщение,"_П01",_П01);
			Сообщение = СтрЗаменить(Сообщение,"_П02",_П02);
			Сообщение = СтрЗаменить(Сообщение,"_П03",_П03);
			Сообщение = СтрЗаменить(Сообщение,"_П04",_П04);
			
			ТекущийУровень = Трассировка.ПолучитьЗначение(1);
			Если ИзменениеУровняСообщения>0 Тогда
				ТекущийУровень = ТекущийУровень+1;
				Трассировка.УстановитьЗначение(1,ТекущийУровень);
			КонецЕсли;
			
			ТекстСообщения = "";
			
			Для Сч=1 По ТекущийУровень Цикл
				ТекстСообщения = ТекстСообщения+"    ";
			КонецЦикла;
			
			ТекстСообщения = ТекстСообщения+Сообщение;
			Если ИзменениеУровняСообщения<0 Тогда
				ТекущийУровень = Макс(ТекущийУровень+ИзменениеУровняСообщения,0);
				Трассировка.УстановитьЗначение(1,ТекущийУровень);
			КонецЕсли;
			
			ТЗ = Трассировка.ПолучитьЗначение(2);
			ТЗ.НоваяСтрока();
			ТЗ.ТипСообщения = ТипСообщения;
			ТЗ.ТекстСообщения = ТекстСообщения;
			ТЗ.Форма = Форма;
			ТЗ.Объект = Объект;
			ТЗ.Контрол = Контрол;
		Исключение
			Сообщить(Сообщение);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры    // глСообщениеТрассировки()   

//******************************************************************************
// глПоказатьТрассировку(Трассировка)
//
// Параметры: 
// 	Трассировка - список значений, возвращенный функцией глСоздатьТрассировку()
//
// Описание:
// 	Отображает список сообщений трассировки в форме обработки Трассировка
//

Процедура глПоказатьТрассировку(Трассировка) Экспорт
	Попытка
		Параметр = Трассировка;
		ОткрытьФорму("Обработка.Трассировка",Параметр);
	Исключение
		// исключительная ситуация не обрабатывается
	КонецПопытки
КонецПроцедуры    // глПоказатьТрассировку()   

//******************************************************************************
// глСообщениеПроведения(ТекстСообщения, Док, ТипСообщения=-1, ПроводимыйДок="", ВыводитьВТаблицу=1) Экспорт
//
// Параметры: 
//  ТекстСообщения - текст выводимого сообщения
//  Док - документ, который будет открываться на этом сообщении
//  ТипСообщения - тип сообщения (комментарий, ошибка, предупреждение )
//				 см. комментарий к процедуре глСообщениеТрассировки()
//  ПроводимыйДок 	- проводимый документ, по умолчанию равен Док
//  ВыводитьВТаблицу - 0 - не использовать механизм комментирования и выводить сообщение в окно сообщений
//					   1 - использовать механизм комментирования и выводить сообщение в таблицу	
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит сообщение о проведении документов при помощи механизма комментирования действий/
//
Процедура глСообщениеПроведения(ТекстСообщения, Док, ТипСообщения=-1, ПроводимыйДок="", ВыводитьВТаблицу=1) Экспорт
	Если ВыводитьВТаблицу = 1 Тогда
		Если ПроводимыйДок = "" Тогда
			ПроводимыйДок = Док;
		КонецЕсли;      
		ЕстьТрассировка = 0;
		НазваниеТрассировки = "Проведение документа "+ПроводимыйДок.Вид()+" № "+ПроводимыйДок.НомерДок +" от "+ПроводимыйДок.ДатаДок;
		Если ТипЗначенияСтр(глСообщенияТрассировки) = "СписокЗначений" Тогда
			Если НазваниеТрассировки = СокрЛП(глСообщенияТрассировки.ПолучитьЗначение(3)) Тогда
				ЕстьТрассировка = 1;
			КонецЕсли;
		КонецЕсли;
		Если ЕстьТрассировка = 0  Тогда
			глСообщенияТрассировки = глСоздатьТрассировку(НазваниеТрассировки);
		КонецЕсли;
		глСообщениеТрассировки(глСообщенияТрассировки, ТекстСообщения, ТипСообщения,,,,,,,,,,Док,Док);
	Иначе
		Сообщить(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры // СообщениеПроведения()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОтменеПроведенияДокумента(Докум)
	Перем СФ;
	
	// Проверка даты запрета редактирования
	
	//++Валерий МЭТР: ДатаЗапретаРедактирования
	//Если Докум.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
	//	Предупреждение("Нельзя отменять проведение документов с датой, более ранней чем дата запрета редактирования документов!", 60);
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;	
	Если (ПустоеЗначение(глПользователь) = 0) Тогда
		Если ПустоеЗначение(глПользователь.ДатаЗапретаРедактирования) = 0 Тогда
			Если Докум.ДатаДок <= глПользователь.ДатаЗапретаРедактирования Тогда
				Предупреждение("Нельзя отменять проведение документов с датой, более ранней чем дата запрета редактирования документов!", 60);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		ИначеЕсли Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
			Предупреждение("Нельзя отменять проведение документов с датой, более ранней чем дата запрета редактирования документов!", 60);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	ИначеЕсли Докум.ДатаДок <= Константа.ДатаЗапретаРедактирования Тогда
		Предупреждение("Нельзя отменять проведение документов с датой, более ранней чем дата запрета редактирования документов!", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	//--Валерий МЭТР: ДатаЗапретаРедактирования
	
	если Докум.вид()="РасходнаяНакладнаяРозницаБезнал" Тогда
		Если НазваниеНабораПрав()="Продавец_розница" Тогда
			Сообщить("Вы не можете отменять проведение данного документа");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// при отмене проведения документа нужно проверить, выписан ли на его
	// основании документ счет-фактура. Если счет-фактура введен и проведен,
	// то его нужно снять с проведения.
	
	СписВводимыхНаОсн	= глПолучитьСписокВводимыхНаОсновании(Докум);
	Если (СписВводимыхНаОсн.НайтиЗначение("СчетФактураВыданный") > 0) Тогда
		СФ = глНайтиСчетФактуру(Докум, "СчетФактураВыданный");
	ИначеЕсли (СписВводимыхНаОсн.НайтиЗначение("СчетФактураПолученный") > 0) Тогда
		СФ = глНайтиСчетФактуру(Докум, "СчетФактураПолученный");
	КонецЕсли;
	
	Если ПустоеЗначение(СФ) = 0 Тогда
		Если СФ.Проведен() = 1 Тогда
			ДокСФ = СоздатьОбъект("Документ");
			ДокСФ.НайтиДокумент(СФ);
			ДокСФ.СделатьНеПроведенным();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ПриОтменеПроведенияДокумента()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриУдаленииДокумента(Докум,Режим) 
	
	СтатусВозврата(глПриУдаленииДокумента(Докум));
	
КонецПроцедуры // ПриУдаленииДокумента()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриУдаленииЭлемента(УдалЭлем,Режим)

	если (НазваниеНабораПрав()="Продавец_розница") или
		 (НазваниеНабораПрав()="Руководитель_розница")
	тогда
		Сообщить("Извините, но вы не можете изменить этот параметр!");
		СтатусВозврата(0);
		Возврат;
	Иначе
		СтатусВозврата(глПриУдаленииЭлемента(УдалЭлем, 0, 1, УдалЭлем.ПометкаУдаления()));
	конецЕсли;
	
	
КонецПроцедуры // ПриУдаленииЭлемента()


//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписиКонстанты(ИмяКонст,ЗначКонст) 
	
	// Номер релиза менять вручную нельзя
	Если ИмяКонст = "НомерРелиза" Тогда
		Предупреждение("Константа ""НомерРелиза"" является служебной и
		|не может быть изменена вручную.", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Их менять вручную нельзя
	Если (ИмяКонст="ВалютаБухУчета")
	ИЛИ  (ИмяКонст="ВалютаУпрУчета") 
	ИЛИ  (ИмяКонст="ПрефиксИБ")
	Тогда
		Предупреждение("Константа """+СокрЛП(ИмяКонст)+""" не может быть изменена вручную.", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;     
	
	Если ИмяКонст = "ДатаЗапретаРедактирования" Тогда
		пар="";
		Если ВвестиСтроку(пар,"Введите пароль",10,0,60)=1 тогда;
			Если пар<>"q23esa" тогда
				Предупреждение("Неверный пароль!" , 60); 
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		Иначе
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписиИстории(ТипОбъекта,Объект,Значение,ДатаИстории)
	Если (ТипОбъекта = "Справочник.Валюты.Курс")  ИЛИ 
	(ТипОбъекта = "Справочник.Валюты.Кратность")Тогда
		// Курс и кратность не должны быть нулевыми
		Если ПустоеЗначение(Значение) = 1 Тогда
			Предупреждение("Нельзя задавать нулевое значение.", 60);
			СтатусВозврата(0);
		КонецЕсли;          
	КонецЕсли;
КонецПроцедуры	

//******************************************************************************     
// Предопределенная процедура
//
Процедура ОбработкаЯчейкиТаблицы(Расшифровка, СтандартнаяОбработка, Таблица) Экспорт 
	
	Если ТипЗначенияСтр(Расшифровка) = "СписокЗначений" Тогда             
		глОбработкаРасшифровки(Расшифровка, СтандартнаяОбработка, Таблица)
		
	Иначе
		СтандартнаяОбработка = 1;
		Возврат;
	КонецЕсли;
КонецПроцедуры // ОбработкаЯчейкиТаблицы
 
//******************************************************************************
// Предопределенная процедура  
         


//
Процедура ПриНачалеРаботыСистемы()
	Перем Спр;
	//*****Задумин "Загруска ЦП" на 100%
	
	//ГАВ 23/03/2008 - исправление запуска, при отсутствии необходимой библиотеки
	Попытка
		//каталог="C:\Program Files\1Cv77\BiN\";//надкаталог
		Если ЗагрузитьВнешнююКомпоненту(каталогИБ()+"1CPP.dll") = 1 Тогда
			DataBase = СоздатьОбъект("ODBCDatabase"); 
			DataBase.Attach1C(); 
 			RecordSet = СоздатьОбъект("ODBCRecordSet"); 
			RecordSet.SetDatabase(DataBase);
		Иначе
			Сообщить("Неудачная попытка загрузки компаненты: 1CPP.DLL","!");
		КонецЕсли;
	Исключение
		Сообщить("Ошибка загрузки компоненты: 1CPP.dll","!");
	КонецПопытки;
	
	Попытка
		ЗагрузитьВнешнююКомпоненту(КаталогПрограммы()+"vk_sleep_1C.dll");              
		vk_sleep=СоздатьОбъект("Addin.vk_sleep_1C");
		vk_sleep.УстановитьПаузуПриБлокировке(1024, "7.7");
		vk_sleep.ПоказыватьВсплывающиеПодсказки=1; //если=1, то показывает balloon tooltips в трее при блокировке.
	//значение 0 отключает показ "баллонов"
	
	
	//Имя сигнального файла (если пусто, то при блокировках не создается)
	//Полезно для обработок проведения
		vk_sleep.ИмяФайла=КаталогИБ()+"lock.tmp"; 
	
	Исключение
		Сообщить("Ошибка загрузки компоненты: vkSleep.dll","!");
	КонецПопытки;
	
	
	// Выполняется при старте
	// При старте проверяем наличие компоненты "Оперативный учет" 1С:Предприятия
	Попытка
		ТестовыйРегистр = СоздатьОбъект("Регистры");
		ДТА=ПолучитьДатуТА();
	Исключение
		Предупреждение("Для работы конфигурации необходимо наличие"+РазделительСтрок
		+"компоненты Оперативный Учет 1С:Предприятия 7.7!"+РазделительСтрок
		+"Повторите запуск программы после проверки состава "+РазделительСтрок
		+"установленных компонент и доступа к ключам защиты.");
		СтатусВозврата(0);
		Возврат;
	КонецПопытки;
	
	// установка текущего пользователя
	Спр=СоздатьОбъект("Справочник.Пользователи");
	Если ПустоеЗначение(ИмяПользователя())=0 Тогда
		Если Спр.НайтиПоКоду(ИмяПользователя())=0  Тогда
			Спр.Новый();
			Спр.Код=ИмяПользователя();
			Спр.Наименование=ИмяПользователя();
			Спр.Записать();
			Сообщить("Пользователь зарегистрирован в справочнике пользователей.", ".");
		КонецЕсли;
	Иначе 
		// При неизвестном пользователе позволяем работать только с интерфейсом Администратора
		Если НазваниеИнтерфейса() = "Администратор" Тогда
			Предупреждение("Пользователь системы не определен!", 60);
			Сообщить("Пользователь системы не определен!", "!");
			Если Спр.НайтиПоКоду("НеАвторизован")=0  Тогда
				Спр.Новый();
				Спр.Код          = "НеАвторизован";
				Спр.Наименование = "Не авторизован";
				Спр.Записать();
			КонецЕсли;
		Иначе
			Предупреждение("Пользователь системы не определен!
			|Обратитесь к администратору системы.");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	глПользователь=Спр.ТекущийЭлемент();
	
	// Если пустое значение Константа.НомерРелиза, то это первый запуск конфигурации
	ЭтоПервыйЗапуск = ПустаяСтрока(Константа.НомерРелиза);
	
	Если Константа.НомерРелиза <> Лев(Метаданные.Комментарий, 8) Тогда
		ФлагЗапускаНастроек = 0;
		Если ПравоДоступа("Использование","Обработка.ОбновлениеИБ")=1 Тогда
			ОткрытьФормуМодально("Обработка.ОбновлениеИБ", ФлагЗапускаНастроек); 
		Иначе
			Предупреждение("Первый запуск программы для обновления информационной базы
			|должен произвести пользователь с правами администратора!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Запускаем обработку заполнения значений по умолчанию
	Если ЭтоПервыйЗапуск = 1 Тогда
		ФлагЗапускаНастроек = 1;
		ОткрытьФормуМодально("Обработка.ПомощникНачалаРаботы", ФлагЗапускаНастроек);
		
		// Покажем системные настройки
		Если ФлагЗапускаНастроек = 1 Тогда
			ОткрытьФормуМодально("Обработка.НастройкаПараметровУчета"); 
		КонецЕсли;
		
		// Всё что хотели - установили. Можно показывать форму пользователя
		ОткрытьФормуМодально(глПользователь, "Значения по умолчанию"); 
		
	КонецЕсли;
	
	//Автоматическое открытие периода
	ДатаТА=ПолучитьДатуТА();
	Если (РабочаяДата()>ДатаТА)И
	((ДатаМесяц(ДатаТА)<>ДатаМесяц(РабочаяДата()))ИЛИ(ДатаГод(ДатаТА)<>ДатаГод(РабочаяДата()))) Тогда
		Если МонопольныйРежим()=0 Тогда
			Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
			"Для открытия периода запустите программу в монопольном режиме!"+РазделительСтрок+
			"Завершить работу программы?","Да+Нет");
			Если Ответ="Да" Тогда
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;	   
		Иначе	// монопольный режим
			Ответ=Вопрос("Не открыт период!"+РазделительСтрок+
			"Выполнить открытие периода?","Да+Нет");
			Если Ответ="Да" Тогда
				УстановитьТАНа(РабочаяДата());
			КонецЕсли;	   
		КонецЕсли;	
	КонецЕсли;
	
	// Подключение торгового оборудования
	ОткрытьФормуМодально("Обработка.ТорговоеОборудование", "Подключить");
	
	Если ЭтоПервыйЗапуск = 1 Тогда
		ОткрытьФорму("Обработка.Путеводитель", "ПервыйЗапуск");
	ИначеЕсли ВосстановитьЗначение("ПоказПутеводителяПриЗапуске") = 1 Тогда
		ОткрытьФорму("Обработка.Путеводитель");
	КонецЕсли;
	
	// Интернет-поддержка
	
	ПроверятьНовости=ВосстановитьЗначение("НовостиПроверять");
	
	// Проверка необходимости получения курсов валют
	Если Найти(",BUTK,BU42TK,BUBK,BUOURCLK,BUOUSL,BUPSB25,OUTK,OUMNPV,OUBV,PBOUL,BASUOR,",","+глИдентификаторКонфигурации()+",")>0 Тогда 
		ПроверкаКурсов=ВосстановитьЗначение("ДатаСкачиванияКурсовВалют");
		ПроверкаКурсов=?(ПустоеЗначение(ПроверкаКурсов)=1,'01.01.00',ПроверкаКурсов);
		ВалАвтоПолучать=ВосстановитьЗначение("ВалАвтоПолучать");
		ВалАвтоПолучать=?(ПустоеЗначение(ВалАвтоПолучать)=1,0,ВалАвтоПолучать);
		Если (ВалАвтоПолучать=2)И(ПроверкаКурсов<ТекущаяДата()) Тогда 
			Парам=СоздатьОбъект("СписокЗначений");
			Парам.ДобавитьЗначение(1,"Автоматически");
			ОткрытьФорму("Обработка.ИППКурсыВалютРБК",Парам); 
		КонецЕсли;
	КонецЕсли; // курсы валют 
	
	// Получить автоматически сведения о наличии обновлений (если установлены соотв. флажки)
	// Номер релиза и идентификатор конфигурации уже должны быть установлены
	Если ПроверятьНовости=2 Тогда 
		Включение = ВосстановитьЗначение("НовостиВключение");
		ДеньВключения = ВосстановитьЗначение("НовостиДеньВключения");
		ДеньВключения=?(ПустоеЗначение(ДеньВключения)=1,ТекущаяДата(),ДеньВключения);
		НДней = ВосстановитьЗначение("НовостиНДней");
		Если Включение=2 Тогда
			ОткрытьФорму("Обработка.ИПППроверкаОбновлений");
		ИначеЕсли ТекущаяДата()>=ДеньВключения Тогда 
			ДеньВключения = ТекущаяДата()+НДней;
			СохранитьЗначение( "НовостиДеньВключения",ДеньВключения);
			ОткрытьФорму("Обработка.ИПППроверкаОбновлений");
		КонецЕсли;
	КонецЕсли;
	
	// Для раздела ИПП "Календарь бухгалтера"
	// Проверка календарей (бухгалтера и др.)
	Если Найти(",BUTK,BU42TK,BUBK,BUOURCLK,BUOUSL,BUPSB25,OUMNPV,OUBV,OUTK,PBOUL,NLGPL,BASUOR,",","+глИдентификаторКонфигурации()+",")>0 Тогда  
		ПроверятьКалендари = ВосстановитьЗначение("КалендарьПроверка");
		Если ПроверятьКалендари=2 Тогда 
			ОткрытьФорму("Отчет.ИППКалендарь",1); // запуск в режиме "проверка"
		КонецЕсли;
	КонецЕсли;
	
	
	//******************************************************************************
	//******************************************************************************
	//		ВСЕ ЧТО НЕОБХОДИМО В ХОЗЯЙСТВЕ
	
	Если ((глПользователь.Код="Жук") или (глПользователь.Код="Пикта")) 
		или ((глПользователь.Код="Корыхалов") или (глПользователь.Код="Иванова"))	
		или ((глПользователь.Код="Наследов") или (глПользователь.Код="Костыренко"))	
		Тогда

		ОткрытьФорму("Обработка.СнятиеСРезерва");
	КонецЕсли;
   
	НужноОткрытьРезервРозница = 0;
	
	Если (НазваниеНабораПрав()="Продавец_розница") или
		(НазваниеНабораПрав()="Администратор_магазина1")
		или (НазваниеНабораПрав()="Администратор_магазина") тогда
		НужноОткрытьРезервРозница = 1;
	КонецЕсли;

	Если НужноОткрытьРезервРозница = 1 Тогда
		ОткрытьФорму("Обработка.СнятиеСРезерваРозница");
	КонецЕсли;	
	
	//Тута данные по авторизации пользователей
	Если (НазваниеНабораПрав()="Продавец_розница") тогда
		юзеры=СоздатьОбъект("Справочник.Пользователи");
		юзеры.ВыбратьЭлементы();
		пока Юзеры.ПолучитьЭлемент()=1 цикл
			если (Юзеры.ДатаРегистрации<>ТекущаяДата()) и (Юзеры.ТипСотрудника=перечисление.ТипСотрудника.Продавец) тогда
				Юзеры.ОсновнойСклад		= ПолучитьПустоеЗначение(Юзеры.ОсновнойСклад);
				Юзеры.ДатаРегистрации	= ПолучитьПустоеЗначение(Юзеры.ДатаРегистрации);
				Юзеры.ОсновнаяКасса		= ПолучитьПустоеЗначение(Юзеры.ОсновнаяКасса);
				сообщить("Для продавца: " + сокрЛП(строка(юзеры))+", место работы изменено на `свободен`");
				Юзеры.Записать();
			конецесли;
		конеццикла;
		ОчиститьОкноСообщений(); //Чтобы не портить картину
	КонецЕсли;
	
	//++Ерошенко 20.03.2007 
	// добавлено для работы с Formex.dll
	dll_FormEx = каталогИБ()+"FormEx.dll";
	Если ФС.существуетФайл(dll_FormEx) = 0 Тогда
		//Сигнал();
		//Сообщить("Не обнаружена компонента FormEx.dll! Некоторые функции недоступны!");
		//ЗагруженFormex = 0;
	КонецЕсли;
	Попытка
		ЗагрузитьВнешнююКомпоненту(dll_FormEx);
		адд_СФ = СоздатьОбъект("Сервис");   
		адд_СФ.ВключитьРаскраскуТаблиц();
		//адд_РФ = СоздатьОбъект("РасширениеФормы");
		//адд_АФ = СоздатьОбъект("АтрибутФормы");
		//адд_ОФ = СоздатьОбъект("Окна");
		//адд_РФ.УстановитьФорму(Форма); 
		ЗагруженFormex = 1;
	Исключение
		Сигнал();
		Сообщить("Не загружена компонента FormEx.dll! Некоторые функции недоступны!"); 
		ЗагруженFormex = 0;
	КонецПопытки;  
	//--Ерошенко  
	
	//++Ерошенко 02.05.2007
	Если глПользователь.ЗапускатьОбщение = 1 Тогда
		ОткрытьФорму("Обработка.Общение");   
	КонецЕсли;
	//--Ерошенко 
	
	//++Ерошенко 10.05.2007   
	ОтработатьПланировщик(1,"");
	//--Ерошенко  
	
	//++Кожемякин А. 05.05.2014 запуск отчета по взаиморасчетам. Только долги. 
	Если глПользователь.ЗапускатьОтчетПоДолгам = 1 Тогда
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет", "ВедомостьПоКонтрагентамКонтроль");
		
		// все настройки помещаем в список
		ВыбДатаКонца  = ПолучитьДатуТА();
		ВыбДатаНачала = Мин(глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов"),ВыбДатаКонца);
		ВыбДатаНачала = ?(ПустоеЗначение(ВыбДатаНачала) = 1,ВыбДатаКонца,ВыбДатаНачала);
		
		Расшифровка.Установить("ДатаНачала", 	ВыбДатаКонца);
		Расшифровка.Установить("ДатаКонца", 	ВыбДатаКонца);
		
		Расшифровка.Установить("ПоОперациям", 0);
		//Если Роль = "Поставщик" Тогда
		//	Расшифровка.Установить("СписокВидовОтчетов",2);
		//ИначеЕсли Роль = "Покупатель" Тогда                
		Расшифровка.Установить("СписокВидовОтчетов",1); 
		//КонецЕсли;
		//Расшифровка.Установить("ВыбВидВалюты",	1); // бух учет
		
		Расшифровка.Установить("Долги", 2);
		Расшифровка.Установить("Просроченные", 0);
		
		Группировки = СоздатьОбъект("СписокЗначений");
		Группировки.ДобавитьЗначение("СвойствоКонтр","Свойство контрагента");
		Группировки.ДобавитьЗначение("Контрагент",   "Контрагент");
		Группировки.ДобавитьЗначение("Договор",      "Договор");
		Группировки.ДобавитьЗначение("КредДокумент", "Кредитный документ");
		Группировки.ДобавитьЗначение("Проект",       "Проекты");
		Группировки.ДобавитьЗначение("Документ",     "Документы движения");
		
		Группировки.Пометка(2, 1);
		//Группировки.Пометка(4, 1);
		
		Расшифровка.Установить("Группировки",	Группировки);  
		
		глОбработкаРасшифровки(Расшифровка,"",""); 
	КонецЕсли;
	//--Кожемякин А. 
	
	//++Ерошенко 21.05.2007
	ОбработкаОжидания("ПроверкаОбработкиОжидания",60);
	//--Ерошенко
	 
	Если (глПользователь.Код="ОтправкаСМС") Тогда
        ОткрытьФорму("Обработка.ОтправкаСМС", "АвтоОтправкаСМС");
		//СтатусВозврата(0);
		//Возврат;
	КонецЕсли; 
	
	//Если глПользователь.Код="ВостПослед" Тогда  
	Сек = 0; Час = 0; Минут = 0;
	ТекущееВремя(Час, Минут, Сек);
	Если (глПользователь.Код="Кожемякин") и (Час > 22) Тогда
    	ОткрытьФорму("Обработка.repair",1); 
    КонецЕсли;
КонецПроцедуры  //ПриНачалеРаботыСистемы() 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗавершенииРаботыСистемы()
	
	//++Ерошенко 11.05.2007
	ОтработатьПланировщик(2,"");	
	//--Ерошенко
	
	Если ПустоеЗначение(глЗначениеПоУмолчанию("НеЗапрашиватьПодтверждениеПриВыходе")) = 1 Тогда
		Если Вопрос("Закончить работу с программой?", "Да+Нет", 10)="Нет" Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФормуМодально("Обработка.ТорговоеОборудование", "Отключить"); 
	
	// Отсоединение объекта
	Scaner = 0;
	
КонецПроцедуры // ПриЗавершенииРаботыСистемы()
//******************************************************************************
//Добавлено для правильного отображения вида: "Одно наименование", "Два наименования" и др.
// а не "Один наименование", "Два наименование" в формах накладных, сф и др.
//Параметры:
// Ном - число которое надо склонять
//Довесок1 - название для 1 ср.рода, например: "Одно наименование"
//Довесок2 - название для 2-4 ср.рода
//Довесок3 - название для 5- ср.рода
Функция глСклонение(Ном,Довесок1,Довесок2,Довесок3)  Экспорт
	Если (прав(строка(Ном),1)="1") и (Ном-число(прав(строка(Ном),1))<>10) тогда
		Позиции=сред(Формат(Ном,"ЧП"),1,СтрДлина(Формат(Ном,"ЧП"))-4)+"Одно "+Довесок1;
	иначеесли прав(строка(Ном),1)="2" тогда
		Позиции=сред(Формат(Ном,"ЧП"),1,СтрДлина(Формат(Ном,"ЧП"))-3)+"Два "+Довесок2;
	иначеесли прав(строка(Ном),1)="3" тогда
		Позиции=сред(Формат(Ном,"ЧП"),1,СтрДлина(Формат(Ном,"ЧП"))-3)+"Три "+Довесок2;
	иначеесли прав(строка(Ном),1)="4" тогда
		Позиции=сред(Формат(Ном,"ЧП"),1,СтрДлина(Формат(Ном,"ЧП"))-6)+"Четыре "+Довесок2;
	иначе
		позиции=Формат(Ном,"ЧП")+" "+Довесок3;
	КонецЕсли;
	
	Возврат позиции;
КонецФункции

//******************************************************************************
//******************************************************************************
//******************************************************************************
//		МОИ ДОБАВЛЕНИЯ

//21/03/2006
//Подсчитывает столбцы ТЧ и возвращает равны они или нет (1 или 0)
Функция глСоотвКоличества(конт,кол1,кол2) Экспорт
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	конт.ВыгрузитьТабличнуюЧасть(ТЗ);
	ТЗ.ВыбратьСтроки();
    х=ТЗ.КоличествоСтрок();
	для а=1 по х Цикл
		если ТЗ.получитьЗначение(а,кол1)<>ТЗ.получитьЗначение(а,кол2) Тогда
			Возврат 0;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат 1;
КонецФункции

//27/09/2005
//Запрещает некоторым пользователям смотреть историю объектов
Процедура ПриОткрытииИстории(ТипОб, Об, ФлагРежима)
	Если (НазваниеНабораПрав() = "Сервис") или (НазваниеНабораПрав() = "Продавец_розница") Тогда
    	Если ТипОб = "Справочник.Номенклатура.ПоследняяЦенаПрихода" Тогда
    		Предупреждение("У вас нет права просматривать эти данные!", 2);
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
//Добавления для работы с правами магазинов
Процедура ПриУстановкеОтбора(ИмяРеквизита, Значение)
	если (НазваниеНабораПрав()="Продавец_розница") или
		 (НазваниеНабораПрав()="Руководитель_розница")
	тогда
		Сообщить("Извините, но вы не можете изменить этот параметр!");
		СтатусВозврата(0);
	конецЕсли;
КонецПроцедуры // ПриУстановкеОтбора()

//22/05/2006
//Проверка на право доступа к уже созданным накладным
Функция глПроверкаПравДоступа(Конт) Экспорт
перем рез;
	рез=0;
	
	ВидДок		= конт.Вид();
	ТекПрава	= НазваниеНабораПрав();
	СостЗаписи	= конт.выбран();   //1 - Уже записан 
	СостПровед	= конт.Проведен();	//1 - Уже проведен
	
	//Все проверки - только для продавца
	Если ТекПрава="Продавец_розница" Тогда
		//Тут для каждого вида документа - предусмотрим свое действие
		Если ВидДок="РасходнаяНакладнаяРозница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=1;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="ВозвратОтПокупателя_Розница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=0;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="ВыплатаПроцентов_Розница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=0; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=0;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="ВозвратДолгов_Розница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=0; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=0;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="СчетБнРозница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=1;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="РасходнаяНакладнаяРозницаБезнал" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=1;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="ВозвратЗалога_Розница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=1;Возврат рез;
			КонецЕсли;
		ИначеЕсли ВидДок="ПолучениеЗалога_Розница" Тогда
			Если СостЗаписи=0 Тогда
				рез=1; Возврат рез;
			ИначеЕсли (СостЗаписи=1) и (СостПровед=0) Тогда
				рез=1; Возврат рез;
			ИначеЕсли СостПровед=1 Тогда
				рез=1;Возврат рез;
			КонецЕсли;	
		КонецЕсли;
	Иначе
		рез=1;
	КонецЕсли;
	
	Возврат рез;
КонецФункции


Функция глКонтрольОстатка(Конт,ОстаткиТоваров) Экспорт
	Перем Результат;
	
	Результат="";
	
	Если ПустоеЗначение(Конт.Номенклатура)=1 Тогда
		Возврат "";
	КонецЕсли;
	
	ИзмФирма=Конт.Фирма;
	
	// если объекты регистры не переданы через параметры процедуры, то создаем.
	// при этом врем. расчет не производим
	Если ПустоеЗначение(ОстаткиТоваров)=1 Тогда
	    ОстаткиТоваров=СоздатьОбъект("Регистр.ОстаткиТМЦ");
	КонецЕсли;

	ОстатокТовара=ОстаткиТоваров.Остаток(ИзмФирма,Конт.Номенклатура,Конт.Склад,,"Количество");
	Результат = СокрЛП(ОстатокТовара)+" "+Конт.Единица;
	Возврат Результат;
КонецФункции

Функция abs(Параметр1) Экспорт
	если Параметр1<0 Тогда
		Возврат (-1)*Параметр1;
	Иначе
		Возврат Параметр1;
	КонецЕсли;
КонецФункции

Процедура глПроверьДопДанные(Параметр1,Параметр2) Экспорт
	если ПустоеЗначение(Параметр2)=1 Тогда
		Сообщить("Не передан параметр");
		Возврат;
	КонецЕсли;
	
	Если Параметр2="ДеньРождения" Тогда
		если Параметр1.Вид()="Контрагенты" Тогда	//Значит всё в порядке - можно проверять ДР
			Если ПустоеЗначение(Параметр1.ДеньРождения)=0 Тогда
				если abs(ТекущаяДата()-Параметр1.ДеньРождения)<=15 Тогда
					Предупреждение("Внимание!
					|У клиента: "+сокрЛП(Параметр1.ФИО)+" день рождения: "+Параметр1.ДеньРождения,20);
				ИначеЕсли ТекущаяДата()-Параметр1.ДеньРождения=0 Тогда
					Предупреждение("Внимание!
					|У клиента: "+сокрЛП(Параметр1.ФИО)+" СЕГОДНЯ день рождения!",20);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры    
                
//++Ерошенко 17.05.2007
Процедура СохранитьТаблицу(Таб,Док) Экспорт
	
	Если СокрЛП(глПользователь.КаталогПечати) <> "" Тогда
		Ответ = Вопрос("Отправить на удалённый принтер?","Да+Нет");
		Если Ответ = "Да" Тогда
			ТекФТаблицы =  СокрЛП(глПользователь.КаталогПечати) + "\print" + СокрЛП(Док.НомерДок);
			Таб.Записать(ТекФТаблицы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
//--Ерошенко
 

Функция глСуммаОплатыПоДоговору(ДокЗаявка, ПроверятьДоДаты = 0, ДатаПроверки = "") Экспорт
	СуммаОплаты = 0;
	сп	= СоздатьОбъект("Документ");
	сп.ВыбратьПодчиненныеДокументы(,,ДокЗаявка);
	Пока сп.ПолучитьДокумент() = 1 Цикл
		если (Найти(сп.Вид(), "СтрокаВыпискиПриход") > 0) и ((ПроверятьДоДаты = 0) или (сп.ДатаДок < ДатаПроверки)) Тогда 
			Если ((сп.Проведен() = 1) или (глПроведениеСтрокиВыписки = 1)) Тогда//или (сп.ДатаДок < '01.01.13') Тогда
				СуммаОплаты = СуммаОплаты + сп.Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаОплаты;
КонецФункции

Функция глСуммаРеализаций(ДокЗаявка, ТекРеализация) Экспорт
	СуммаРеализации = 0;
	сп	= СоздатьОбъект("Документ");
	сп.ВыбратьПодчиненныеДокументы(,,ДокЗаявка);
	Выход = 0;
	Пока сп.ПолучитьДокумент() = 1 Цикл
		Если сп.Проведен() = 0 Тогда Продолжить КонецЕсли;
		Если сп.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда
			ДокБезнал = СОздатьОбъект("Документ");
			ДокБезнал.ВыбратьПодчиненныеДокументы(,,сп.ТекущийДокумент());
			Пока ДокБезнал.ПолучитьДокумент() = 1 Цикл
				если (Найти(ДокБезнал.Вид(), "Реализация") > 0) Тогда
					Если (ДокБезнал.Проведен() = 1) или (ДокБезнал.ТекущийДокумент() = ТекРеализация) Тогда
						СуммаРеализации = СуммаРеализации + ДокБезнал.СуммаВзаиморасчетов;	
						Если ДокБезнал.ТекущийДокумент() = ТекРеализация ТОгда
							Выход = 1;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если Выход = 1 Тогда Прервать КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СуммаРеализации;
КонецФункции




//Екатерина Мэтр +
Функция РассчитатьСкидкувДок(док) Экспорт
	СкидкаКонтрагента = док.ДокОснование.Контрагент.Скидка_Розница.Получить(док.ДатаДок);
	скидка=док.ДокОснование.Скидка;
	Если док.ВыданоСоСкидкой = 0 Тогда
		Скидка = 0;
	КонецЕсли;	
	СкидкаНакопление = СкидкаКонтрагента - Скидка;
	итого=0;
	
	
	флФиксСкидка = 0;
	Если док.ДокОснование.Выбран() = 1 Тогда
		ТемпФиксСкидка = глПолучитьФиксированнуюСкидку(док);
		
		Если ПустоеЗначение(ТемпФиксСкидка) = 0 Тогда   
			
			Если док.Вид() = "Реализация" Тогда
				БылоНачисленоПроцентов = глПолучитьНачисленныйПроцентПоАналитике(док.АналитикаСчетБезналПроценты, док);	
				мТемпФиксСкидка = ТемпФиксСкидка - БылоНачисленоПроцентов;
				Если (мТемпФиксСкидка - ((ТемпФиксСкидка/100)*Константа.ПроцентВычетаДляБезнала.Получить(док.ДатаДок))) <= 0 Тогда
					ТемпФиксСкидка = 0;	
				КонецЕсли;	
			КонецЕсли;	
			
			СкидкаНакопление = ТемпФиксСкидка; 
			флФиксСкидка = 1;
		КонецЕсли;	
	КонецЕсли;
	
	Если СкидкаНакопление > 0 Тогда
		
		
		док.ВыбратьСтроки();
		Пока док.ПолучитьСтроку() = 1 Цикл
			
			Если флФиксСкидка = 1 Тогда
				//СуммаСкидки	= док.Цена*(СкидкаНакопление/100)*док.Количество;
				СуммаСкидки	= 0;
				Итого	= СкидкаНакопление;
			ИначеЕсли док.Номенклатура.Скидка.Получить(Док.ДатаДок) = 0 Тогда 
				Если док.ДокОснование.флНачислитьБонусы = 1 Тогда   
					ТекПроцентСкидки = СкидкаНакопление + Константа.ПроцентБонусаПоТоварамБезОграничения;
				Иначе
					ТекПроцентСкидки = СкидкаНакопление;
				КонецЕсли;
				СуммаСкидки	= док.Цена*(ТекПроцентСкидки/100)*док.Количество;
			ИначеЕсли СкидкаКонтрагента >= док.Номенклатура.Скидка.Получить(Док.ДатаДок) Тогда
				ПоделеннаяПриоритетнаяСкидка = док.Номенклатура.Скидка.Получить(док.ДатаДок);
				Если СкидкаКонтрагента <> 0 Тогда
					ПоделеннаяПриоритетнаяСкидка = док.Номенклатура.Скидка.Получить(док.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
				КонецЕсли;     
				ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(док.ДокОснование, ПоделеннаяПриоритетнаяСкидка);
				СуммаСкидки	= док.Цена*(ПоделеннаяПриоритетнаяСкидка/100)*док.Количество;
				
			ИначеЕсли СкидкаКонтрагента < док.Номенклатура.Скидка.Получить(док.ДатаДок) Тогда
				Если (док.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
					ПоделеннаяПриоритетнаяСкидка = док.Номенклатура.Скидка.Получить(док.ДатаДок);
					Если СкидкаКонтрагента <> 0 Тогда
						ПоделеннаяПриоритетнаяСкидка = док.Номенклатура.Скидка.Получить(док.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
					КонецЕсли;
					ПоделеннаяПриоритетнаяСкидка = ПроверитьСкидкуПоОграничениюНаБонусы(док.ДокОснование, ПоделеннаяПриоритетнаяСкидка);
					СуммаСкидки	= док.Количество*док.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
				Иначе     
					Если док.ДокОснование.флНачислитьБонусы = 1 Тогда   
						ТекПроцентСкидки = СкидкаНакопление + Константа.ПроцентБонусаПоТоварамБезОграничения;
					Иначе
						ТекПроцентСкидки = СкидкаНакопление;
					КонецЕсли;
					СуммаСкидки	= док.Цена*(ТекПроцентСкидки/100)*док.Количество;
				КонецЕсли;
			КонецЕсли;
			
			Итого=СуммаСкидки+Итого;
			Если (глПользователь.Код="Кожемякин") Тогда
				Сообщить(""+док.НомерСтроки+" "+СуммаСкидки);	
			КонецЕсли;			
		КонецЦикла; 
		
	КонецЕсли; 
	возврат Итого;
КонецФункции

Функция ДокОплатыЗапрос(докРеализация,этотДок,КонПериода) Экспорт
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(ТекущиеБонусы)";
	
	//|Период с НачПериода по КонПериода;
	если пустоезначение(КонПериода)<>1 тогда
		НачПериода=дата("01.01.2011");
		КонПериода2=КонПериода-1;
		ТекстЗапроса=ТекстЗапроса+"
		|Период с НачПериода по КонПериода2;";
	конецЕсли;
ТекстЗапроса=ТекстЗапроса+"
	|Обрабатывать НеПомеченныеНаУдаление;
	|ОбрабатыватьДокументы Проведенные;
	|ТекДок	 				= Документ.ВыплатаПроцентов_Розница.ТекущийДокумент;
	|док	 				= Документ.ВыплатаПроцентов_Розница.Документ_;
	//|Кнтр			 		= Документ.ВыплатаПроцентов_Розница.Контрагент;
	//|Магазин				= Документ.ВыплатаПроцентов_Розница.Склад;
	|СуммаРуб				= Документ.ВыплатаПроцентов_Розница.Сумма;
	|Функция ВсегоСуммаРуб	= Сумма(СуммаРуб);
	|Группировка док;
	|Условие(док = докРеализация);
	|"//}}ЗАПРОС 
	; 
	Если этотДок<>"" тогда 
				текстЗапроса=текстЗапроса+"Условие(ТекДок <>  этотДок);";
    КонецЕсли;
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	Если Запрос.Группировка(1)=1 тогда
		возврат Запрос.ВсегоСуммаРуб;
	конецЕсли;
		Возврат 0;
КонецФункции


Функция глНайтиПроцентыИзДок2(Контрагенты,Магазины,НачПериода,КонПериода,этотДок) Экспорт
	ТЗ_Выход= СоздатьОбъект("ТаблицаЗначений");
	ТЗ_Выход.НоваяКолонка("Документ","Документ");
	ТЗ_Выход.НоваяКолонка("Склад"); 
	ТЗ_Выход.НоваяКолонка("Контрагент");
	ТЗ_Выход.НоваяКолонка("Сумма","Число");
	ДокБезнал = СоздатьОбъект("Документ");
	ТаблицаРеализаций = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРеализацийМаг = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаРеализаций.НоваяКолонка("Док","Документ");
	ТаблицаРеализаций.НоваяКолонка("СуммаСкидок","Число");
	ТаблицаРеализаций.НоваяКолонка("Магазин");
	
	Запрос = СоздатьОбъект("Запрос");
	ДокСчетаЗапрос = СоздатьОбъект("Запрос");
	//НачПериода=Дата("01.01.2011");
	//КонПериода=РабочаяДата();
	ТекстЗапроса = 
	"//{{ЗАПРОС(ТекущиеБонусы)
	//|Период с НачПериода по КонПериода;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ОбрабатыватьДокументы Проведенные;
	|док	 			= Документ.СчетБнРозница.ТекущийДокумент, Документ.ЗаявкаПокупателя.ТекущийДокумент, Документ.ЗаявкаКлиентаРозница.ТекущийДокумент;
	|Кнтр			 	= Документ.СчетБнРозница.Контрагент, 	  Документ.ЗаявкаПокупателя.Контрагент, 	 Документ.ЗаявкаКлиентаРозница.Контрагент;
	|Магазин		 	= Документ.СчетБнРозница.Склад, 		  Документ.ЗаявкаПокупателя.Склад, 			 Документ.ЗаявкаКлиентаРозница.Склад;
	//|Вид = Справочник.ДокументыБезнал.ВидДокумента;
	|Группировка Кнтр без групп;
	|Группировка док;
	|Условие(Кнтр в  Контрагенты);
	|Условие(Магазин в  Магазины);";
	
	Если ДокСчетаЗапрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	//ТекстЗапроса = 
	//"//{{ЗАПРОС(ТекущиеБонусы)
	//|Период с НачПериода по КонПериода;
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|ОбрабатыватьДокументы Проведенные;
	//|док	 				= Документ.ВыплатаПроцентов_Розница.ТекущийДокумент;
	//|Кнтр			 		= Документ.ВыплатаПроцентов_Розница.Контрагент;
	//|Магазин				= Документ.ВыплатаПроцентов_Розница.Склад;
	//|СуммаРуб				= Документ.ВыплатаПроцентов_Розница.Сумма;
	//|Функция ВсегоСуммаРуб	= Сумма(СуммаРуб);
	//|Группировка Кнтр без групп;
	//|Условие(Кнтр = Контрагент);
	//|Условие(Магазин в  Магазины);
	//|"//}}ЗАПРОС
	; 
	сп	= СоздатьОбъект("Документ");
	сп1	= СоздатьОбъект("Документ");
	Пока ДокСчетаЗапрос.Группировка(1)=1 цикл
		ТаблицаРеализаций.УдалитьСтроки();
		Пока ДокСчетаЗапрос.Группировка(2)=1 цикл
			//Если (ДокСчетаЗапрос.Вид <> "СчетБнРозница")
			//и (ДокСчетаЗапрос.Вид <> "ЗаказПокупателя") 
			//и (ДокСчетаЗапрос.Вид <> "ЗаявкаКлиентаРозница") 
			//и (ПустоеЗначение(ДокСчетаЗапрос.Вид) = 0) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			сп.НайтиДокумент(ДокСчетаЗапрос.Док);
			суммаОпДог = глСуммаОплатыПоДоговору(сп.ТекущийДокумент());
			если суммаОпДог>0 тогда		
				сп1.ВыбратьПодчиненныеДокументы(,,сп.ТекущийДокумент()); 
				Выход = 0;
				Пока сп1.ПолучитьДокумент() = 1 Цикл
					Если сп1.Проведен() = 1 Тогда //Продолжить КонецЕсли;  
						Если (сп1.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда
							ДокБезнал.ВыбратьПодчиненныеДокументы(,,сп1.ТекущийДокумент());
							Пока ДокБезнал.ПолучитьДокумент() = 1 Цикл
								Если (ДокБезнал.Вид() = "Реализация") Тогда   
									Если (ДокБезнал.Проведен() = 1) Тогда 
										Если (суммаОпДог < ДокБезнал.СуммаВзаиморасчетов) тогда
											Выход =1;
											прервать;
										КонецЕсли; 
										ТаблицаРеализаций.НоваяСтрока();
										ТаблицаРеализаций.Док=ДокБезнал.Докоснование;//.ТекущийДокумент();
										ТаблицаРеализаций.Магазин=ДокБезнал.Склад;
										ТаблицаРеализаций.СуммаСкидок=окр(РассчитатьСкидкувДок(ДокБезнал),2,1);
										//Если (ТаблицаРеализаций.Док.ДатаДок<НачПериода)или (НачПериода=Дата(0)) тогда
										//	ТаблицаРеализаций.СуммаСкидок		= ТаблицаРеализаций.СуммаСкидок-ДокОплатыЗапрос(ТаблицаРеализаций.Док);
										//конецЕсли;
										
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;
							//Если Выход = 1 Тогда Прервать КонецЕсли; 
							ТаблицаРеализаций.НоваяСтрока();
							ТаблицаРеализаций.Док=сп1.ТекущийДокумент();
							ТаблицаРеализаций.Магазин=сп1.Склад;
							Если (ТаблицаРеализаций.Док.ДатаДок<НачПериода)или (НачПериода=Дата(0)) тогда
								ТаблицаРеализаций.СуммаСкидок = -ДокОплатыЗапрос(ТаблицаРеализаций.Док,этотДок, КонПериода);
							конецЕсли;

						КонецЕсли;
					Иначе
						Если (сп1.Вид() = "РасходнаяНакладнаяРозницаБезнал")и((сп1.ДатаДок<НачПериода)или (НачПериода=Дата(0))) Тогда
							ТаблицаРеализаций.НоваяСтрока();
							ТаблицаРеализаций.Док=сп1.ТекущийДокумент();
							ТаблицаРеализаций.Магазин=сп1.Склад;
							//ТаблицаРеализаций.СуммаСкидок=окр(РассчитатьСкидкувДок(ДокБезнал),2,1);
							//Если (ТаблицаРеализаций.Док.ДатаДок<НачПериода)или (НачПериода=Дата(0)) тогда
							ТаблицаРеализаций.СуммаСкидок		= -ДокОплатыЗапрос(ТаблицаРеализаций.Док,этотДок,КонПериода);
							//конецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			иначе 
				сп1.ВыбратьПодчиненныеДокументы(,,сп.ТекущийДокумент()); 
				Пока сп1.ПолучитьДокумент() = 1 Цикл
					Если сп1.Проведен() = 1 Тогда //Продолжить КонецЕсли;  
						Если (сп1.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда
							НачПериода1=дата("01.01.2011");
							ВЗ=Перечисление.ВидВзаимодействия.Проценты;
							склд=сп1.Склад;
							кнтр=сп1.Контрагент;
							ТекстЗапроса = 
							"//{{ЗАПРОС(Сформировать)
							|Период с НачПериода1 по КонПериода;
							|Контрагент = Регистр.Покупатели_розница.Контрагент;
							|ВидВзаимодействия = Регистр.Покупатели_розница.ВидВзаимодействия;
							|Магазин = Регистр.Покупатели_розница.Магазин;
							|КредДокумент = Регистр.Покупатели_розница.КредДокумент;
							|СуммаРуб = Регистр.Покупатели_розница.СуммаРуб;
							|Рег = Регистр.Покупатели_розница.ТекущийДокумент;
							|Функция СуммаРубНачОст = НачОст(СуммаРуб);
							|Функция СуммаРубПриход = Приход(СуммаРуб);
							|Функция СуммаРубРасход = Расход(СуммаРуб);
							|Функция СуммаРубКонОст = КонОст(СуммаРуб);
							//|Условие(КредДокумент = сп1.текущийдокумент());
							|Условие(ВидВзаимодействия = ВЗ);
							|Условие(Магазин = склд);
							|Условие(Контрагент = кнтр);
							|Группировка КредДокумент;";
							Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
								Возврат 0;
							КонецЕсли;
							пока запрос.группировка(1)=1 цикл
								если (запрос.КредДокумент=сп1.текущийдокумент())и(Запрос.КредДокумент.датадок<НачПериода) тогда
								ТаблицаРеализаций.НоваяСтрока();
								ТаблицаРеализаций.Док=сп1.ТекущийДокумент();
								ТаблицаРеализаций.Магазин=сп1.Склад;
								//ТаблицаРеализаций.СуммаСкидок=окр(РассчитатьСкидкувДок(ДокБезнал),2,1);
								//Если (ТаблицаРеализаций.Док.ДатаДок<НачПериода)или (НачПериода=Дата(0)) тогда
								ТаблицаРеализаций.СуммаСкидок		= -запрос.СуммаРубРасход;//ДокОплатыЗапрос(ТаблицаРеализаций.Док,этотДок,КонПериода);
							КонецЕсли;
							конеццикла;
							//конецЕсли;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			конецЕсли;		
		КонецЦикла;   
		ТаблицаРеализаций.Сортировать("Док+,Магазин+",1);
		ТаблицаРеализаций.Свернуть("Док,Магазин","СуммаСкидок");
		//ТаблицаРеализацийМаг.Загрузить(ТаблицаРеализаций);
		//ТаблицаРеализацийМаг.Свернуть("Магазин","СуммаСкидок");
		//ТаблицаРеализацийМаг.Сортировать("Магазин+");
		//ТаблицаРеализацийМаг.ВыбратьСтроки();
		//Пока ТаблицаРеализацийМаг.ПолучитьСтроку()=1 цикл
		//	Если ТаблицаРеализацийМаг.СуммаСкидок>0 тогда
		//		текстЗапроса=текстЗапроса+"Условие(Магазин =  ТаблицаРеализацийМаг.Магазин);";
		//		Контрагент=ДокСчетаЗапрос.Кнтр;
		//		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		//			Возврат 0;
		//		КонецЕсли;
		//		СуммаСкидокПоДок=0;
		//		Если Запрос.Группировка(1)=1 тогда
		//			СуммаСкидокПоДок=Запрос.ВсегоСуммаРуб;
		//		КонецЕсли; 
				ТаблицаРеализаций.ВыбратьСтроки();
				Пока ТаблицаРеализаций.ПолучитьСтроку()=1 цикл 
		//			Если ТаблицаРеализаций.Магазин=ТаблицаРеализацийМаг.Магазин тогда
		//				х=ТаблицаРеализаций.СуммаСкидок;
		//				ТаблицаРеализаций.СуммаСкидок=макс(ТаблицаРеализаций.СуммаСкидок-СуммаСкидокПоДок,0);
		//				СуммаСкидокПоДок=макс(СуммаСкидокПоДок-х,0); 
						Если ТаблицаРеализаций.СуммаСкидок<>0 ТОгда
							ТЗ_Выход.НоваяСтрока();
							ТЗ_Выход.Документ	= ТаблицаРеализаций.Док;//.ДокОснование;
							ТЗ_Выход.Склад		= ТаблицаРеализаций.Магазин; 
							ТЗ_Выход.Контрагент	= ДокСчетаЗапрос.Кнтр;
							//Если ТаблицаРеализаций.Док.ДатаДок<НачПериода тогда
							//	ТЗ_Выход.Сумма		= ТаблицаРеализаций.СуммаСкидок-ДокОплатыЗапрос(ТаблицаРеализаций.Док);
							//иначе
								ТЗ_Выход.Сумма		= ТаблицаРеализаций.СуммаСкидок;
							//конецЕсли;
							
						КонецЕсли;
		//			конецесли;
				конецЦикла;
		//	конецесли;
		//конецЦикла;
	конецЦикла;
	возврат ТЗ_Выход;
КонецФункции 

//====================================================================== 
//!!!!!!!!!!!!!!!!!!Должен использоваться только для Взаиморасчетов2
Функция глПолучитьОснование(Основание) Экспорт
	ПредОснование	 = Основание;
	        
	Если ((ПредОснование.Вид() = "ПоступлениеТМЦ")) и (ПредОснование.ДатаДок >= Дата("01.04.2017")) Тогда
		Возврат ПредОснование.ТекущийДокумент();	
	КонецЕсли;
	       
		
	
	Если ((ПредОснование.Вид() = "Реализация")
		или (ПредОснование.Вид() = "ПоступлениеТМЦ")
		или (ПредОснование.Вид() = "РасходнаяНакладнаяРозница")) и (ПредОснование.ДатаДок >= Дата("01.06.2017")) Тогда      
			
		Если (ПредОснование.Вид() = "Реализация") Тогда	
			мТекЗаявка = глПолучитьЗаявку(ПредОснование);   
			Если ПустоеЗначение(мТекЗаявка) = 0 Тогда
				Если (мТекЗаявка.Вид() = "ЗаявкаКлиентаРозница") и (мТекЗаявка.ДатаДок < Дата("01.06.2017")) Тогда
					Возврат мТекЗаявка;	
				Иначе
					Возврат ПредОснование.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Возврат ПредОснование.ТекущийДокумент();
		КонецЕсли;
	КонецЕсли;		
	
	Попытка
		ТекущееОснование = ПредОснование.ДокОснование;
		Пока ПустоеЗначение(ТекущееОснование) = 0 Цикл
			ПредОснование	 = ТекущееОснование;
			  
			Если ((ПредОснование.Вид() = "ПоступлениеТМЦ")) и (ПредОснование.ДатаДок >= Дата("01.04.2017")) Тогда
				Возврат ПредОснование.ТекущийДокумент();	
			КонецЕсли;
			
			Если ((ПредОснование.Вид() = "Реализация")
			или (ПредОснование.Вид() = "ПоступлениеТМЦ")
			или (ПредОснование.Вид() = "РасходнаяНакладнаяРозница")) и (ПредОснование.ДатаДок >= Дата("01.06.2017")) Тогда
				Если (ПредОснование.Вид() = "Реализация") Тогда	
					мТекЗаявка = глПолучитьЗаявку(ПредОснование);   
					Если ПустоеЗначение(мТекЗаявка) = 0 Тогда
						Если (мТекЗаявка.Вид() = "ЗаявкаКлиентаРозница") и (мТекЗаявка.ДатаДок < Дата("01.06.2017")) Тогда
							Возврат мТекЗаявка;	
						Иначе
							Возврат ПредОснование.ТекущийДокумент();
						КонецЕсли;
					КонецЕсли;
				Иначе
					Возврат ПредОснование.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
			
			ТекущееОснование = ПредОснование.ДокОснование;
		КонецЦикла;	
	Исключение
	КонецПопытки;
	
	Возврат ПредОснование.ТекущийДокумент();
КонецФункции // глПолучитьОснование


//Функция глНайтиПроцентыИзДок(ДокРеализация) Экспорт
//	СуммаОплаты = глСуммаОплатыПоДоговору(ДокРеализация.ДокОснование.ДокОснование);
//	СуммаРеализаций = глСуммаРеализаций(ДокРеализация.ДокОснование.ДокОснование, ДокРеализация.ТекущийДокумент());
//	//++Валерйи МЭТР: механизм деления скидки
//	Если СуммаОплаты >= СуммаРеализаций Тогда
//		_Скидка = ДокРеализация.ДокОснование.Скидка;
//		СкидкаКонтрагента =ДокРеализация. ДокОснование.Контрагент.Скидка_Розница.Получить(ДокРеализация.ДатаДок);
//		Если ДокРеализация.ВыданоСоСкидкой = 0 Тогда
//			_Скидка = 0;
//		КонецЕсли;	
//		СкидкаНакопление = СкидкаКонтрагента - _Скидка;
//		
//		//Если ВыданоСоСкидкой = 0 Тогда	//Запишем в копилку
//		Если СкидкаНакопление > 0 Тогда
//			//--Валерйи МЭТР: механизм деления скидки
//			
//			
//			//*********** 
//			//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);   
//			_Итог	= 0;
//			ДокРеализация.ВыбратьСтроки();
//			
//			//Валерий МЭТР: деление скидки
//			//Если ДатаДок >= Дата("27.04.10") Тогда
//			Если ДокРеализация.ДатаДок >= Дата("03.10.08") тогда
//				
//				Пока ДокРеализация.ПолучитьСтроку() = 1 Цикл
//					
//					Если ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок) = 0 Тогда
//						//СкидкаКарта
//						_ЦенаСоСкидкой	= ДокРеализация.Цена-ДокРеализация.Цена*(СкидкаНакопление/100);  
//						_Сумма 			= _ЦенаСоСкидкой*ДокРеализация.Количество;
//						_СуммаБезСкидки = ДокРеализация.Количество*ДокРеализация.Цена;
//						_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
//						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;	
//					ИначеЕсли СкидкаКонтрагента >= ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок) Тогда
//						//СкидкаТовар
//						
//						//++Валерий МЭТР: механизм деления скидки
//						ПоделеннаяПриоритетнаяСкидка = ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок);
//						Если СкидкаКонтрагента <> 0 Тогда
//							ПоделеннаяПриоритетнаяСкидка = ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
//						КонецЕсли;
//						//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
//						_ЦенаСоСкидкой		= ДокРеализация.Цена-ДокРеализация.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
//						//--Валерий МЭТР: механизм деления скидки					
//						
//						_Сумма 			= _ЦенаСоСкидкой*ДокРеализация.Количество;
//						_СуммаБезСкидки = ДокРеализация.Количество*ДокРеализация.Цена;
//						_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
//						_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
//						
//					ИначеЕсли СкидкаКонтрагента < ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок) Тогда
//						Если (ДокРеализация.Номенклатура.ПриоритетнаяСкидка = 1) И (СкидкаКонтрагента > 0) Тогда
//							//СкидкаТовар
//							
//							//++Валерий МЭТР: механизм деления скидки
//							ПоделеннаяПриоритетнаяСкидка = ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок);
//							Если СкидкаКонтрагента <> 0 Тогда
//								ПоделеннаяПриоритетнаяСкидка = ДокРеализация.Номенклатура.Скидка.Получить(ДокРеализация.ДатаДок)*СкидкаНакопление/СкидкаКонтрагента; 
//							КонецЕсли;
//							//_ЦенаСоСкидкой	= Цена-Цена*(Номенклатура.Скидка/100);
//							_ЦенаСоСкидкой		= ДокРеализация.Цена-ДокРеализация.Цена*(ПоделеннаяПриоритетнаяСкидка/100);
//							//--Валерий МЭТР: механизм деления скидки
//							
//							_Сумма 			= _ЦенаСоСкидкой*ДокРеализация.Количество;
//							_СуммаБезСкидки = ДокРеализация.Количество*ДокРеализация.Цена;
//							_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
//							_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
//						Иначе
//							//СкидкаКарта
//							_ЦенаСоСкидкой	= ДокРеализация.Цена-ДокРеализация.Цена*(СкидкаНакопление/100);  
//							_Сумма 			= _ЦенаСоСкидкой*ДокРеализация.Количество;
//							_СуммаБезСкидки = ДокРеализация.Количество*ДокРеализация.Цена;
//							_СуммаСкидки	= _СуммаБезСкидки - _Сумма;
//							_ЦенаСоСкидкой	= _ЦенаСоСкидкой;
//						КонецЕсли;
//					КонецЕсли;
//					
//					_Итог=_СуммаСкидки+_Итог;			
//				КонецЦикла;
//				
//				//************						
//				возврат _Итог;
//				
//			Иначе 			
//				
//				возврат 	(ДокРеализация.итог("Сумма")/100*ДокРеализация.ДокОснование.Контрагент.Скидка_Розница.Получить(ДокРеализация.ДатаДок)) -
//				(ДокРеализация.итог("Сумма")/100*ДокРеализация.ДокОснование.Контрагент.Скидка_Розница.Получить(ДокРеализация.ДатаДок)  /
//				100*Константа.ПроцентВычетаДляБезнала.Получить(ДокРеализация.ДатаДок));
//				
//				
//			КонецЕсли;
//			
//			
//			возврат 0;			
//		КонецЕсли;		
//		возврат 0;			
//	КонецЕсли;		
//КонецФункции
//Екатерина Мэтр-

//======================================================================
Функция глПолучитьАналитику(ДокументАналитики, ВыбиратьВручную = "") Экспорт
	РезультатАналитика = 0;
	Если ВыбиратьВручную = "АналитикаПроценты" Тогда
		ТекКонтрагент	= ДокументАналитики.Контрагент;
		ТекМагазин 		= ДокументАналитики.Склад;
		ТекДатаДок		= ДокументАналитики.ДатаДок;
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = "
		|Обрабатывать Все;
		|НомерДок 				= Справочник.АналитикаПродажиПроценты.НомерДок;
		|ДатаДок 				= Справочник.АналитикаПродажиПроценты.ДатаДок;
		|Контрагент 			= Справочник.АналитикаПродажиПроценты.Контрагент;
		|Магазин				= Справочник.АналитикаПродажиПроценты.Магазин;
		|ТекАналитика 			= Справочник.АналитикаПродажиПроценты.ТекущийЭлемент;
		//|Условие (Контрагент 	= ТекКонтрагент);
		|Условие (Магазин 		= ТекМагазин);
		|Условие (ДатаДок <= ТекДатаДок);
		|Группировка ТекАналитика;";
		
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		
		ТаблицаВыбора = СоздатьОбъект("ТаблицаЗначений");
		СписокВыбора = СоздатьОбъект("СписокЗначений");
		Пока Запрос.Группировка() = 1  Цикл
			СписокВыбора.ДобавитьЗначение(Запрос.ТекАналитика);
		КонецЦикла;
		
		Если СписокВыбора.РазмерСписка() <> 0 Тогда
			ВыбАналитика = "";
			Если СписокВыбора.ВыбратьЗначение(ВыбАналитика,"Укажите аналитику процентов.",,10) = 1 Тогда
				РезультатАналитика = ВыбАналитика;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВыбиратьВручную = "АналитикаСчетБезналПроценты" Тогда
		ТекКонтрагент	= ДокументАналитики.Контрагент;
		Если ДокументАналитики.Вид() <> "СтрокаВыпискиПриход" Тогда
			ТекМагазин 		= ДокументАналитики.Склад;
		КонецЕсли;
		ТекДатаДок		= ДокументАналитики.ДатаДок;
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = "
		|Обрабатывать Все;
		|НомерДок 				= Справочник.АналитикаСчетБезналПроценты.НомерДок;
		|ДатаДок 				= Справочник.АналитикаСчетБезналПроценты.ДатаДок;
		|Контрагент 			= Справочник.АналитикаСчетБезналПроценты.Контрагент;
		|Магазин				= Справочник.АналитикаСчетБезналПроценты.Магазин;
		|ТекАналитика 			= Справочник.АналитикаСчетБезналПроценты.ТекущийЭлемент;
		|Условие (Контрагент 	= ТекКонтрагент);";
		Если ДокументАналитики.Вид() <> "СтрокаВыпискиПриход" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|Условие (Магазин 		= ТекМагазин);";
		КонецЕсли;	
		ТекстЗапроса = ТекстЗапроса + "
		|Условие (ДатаДок <= ТекДатаДок);
		|Группировка ТекАналитика;";
		
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		ТаблицаВыбора = СоздатьОбъект("ТаблицаЗначений");
		СписокВыбора = СоздатьОбъект("СписокЗначений");
		Пока Запрос.Группировка() = 1  Цикл
			СписокВыбора.ДобавитьЗначение(Запрос.ТекАналитика);
		КонецЦикла;
		
		Если СписокВыбора.РазмерСписка() <> 0 Тогда
			ВыбАналитика = "";
			Если СписокВыбора.ВыбратьЗначение(ВыбАналитика,"Укажите аналитику процентов.",,10) = 1 Тогда
				РезультатАналитика = ВыбАналитика;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДокументАналитики.Вид() = "СчетБнРозница" Тогда
		ТекПериодичность = Метаданные.Документ("СчетБнРозница").ПериодичностьНомера;
		СпрАналитики = СоздатьОбъект("Справочник.АналитикаСчетБезналПроценты");
		//Запрос = СоздатьОбъект("Запрос");
		//ТекстЗапроса = "
		//|Обрабатывать Все;
		//|НомерДок 			= Справочник.АналитикаСчетБезналПроценты.НомерДок;
		//|ДатаДок 			= Справочник.АналитикаСчетБезналПроценты.ДатаДок;
		//|Контрагент 		= Справочник.АналитикаСчетБезналПроценты.Контрагент;
		//|Магазин			= Справочник.АналитикаСчетБезналПроценты.Магазин;
		//|ТекАналитика 		= Справочник.АналитикаСчетБезналПроценты.ТекущийЭлемент;
		//|Группировка ТекАналитика;
		//|Условие (НомерДок 	= НомерДок);
		//|Условие ((ДатаДок >= ДатаНачалаОтбора) и (ДатаДок <= ДатаОкончанияОтбора));";
		
		Если ТекПериодичность = "Квартал" Тогда
			ДатаНачалаОтбора 	= НачКвартала(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонКвартала(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "Год" Тогда
			ДатаНачалаОтбора 	= НачГода(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонГода(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "Месяц" Тогда
			ДатаНачалаОтбора 	= НачМесяца(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонМесяца(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "День" Тогда
			ДатаНачалаОтбора 	= ДокументАналитики.ДатаДок;
			ДатаОкончанияОтбора = ДокументАналитики.ДатаДок;
		КонецЕсли;	
		НомерДок = ДокументАналитики.НомерДок;
		
		//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		//	Возврат 0;
		//КонецЕсли;
		//ТаблицаЗапроса = СоздатьОбъект("ТаблицаЗначений");
		//Запрос.Выгрузить(ТаблицаЗапроса,0,0);
		//Пока Запрос.Группировка() = 1  Цикл
		//	Если СпрАналитики.НайтиЭлемент(Запрос.ТекАналитика) = 1 Тогда
		//		СпрАналитики.ДатаДок 	= ДокументАналитики.ДатаДок;
		//		СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
		//		СпрАналитики.Сумма 		= ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
		//		СпрАналитики.Магазин 	= ДокументАналитики.Склад;
		//		СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
		//		СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
		//		СпрАналитики.Записать();
		//		РезультатАналитика = СпрАналитики.ТекущийЭлемент();
		//		Прервать;
		//	КонецЕсли;	
		//КонецЦикла;              
		//Если ДокументАналитики.ДатаДок >= Дата("01.03.2017") Тогда
		//	ТекКонтрагент = ДокументАналитики.КонтрагентЮЛ;
		//Иначе
			ТекКонтрагент = ДокументАналитики.Контрагент;
		//КонецЕсли;
		
		ТекВидДокумента = СокрЛП(ДокументАналитики.Вид()); 
		ТекПредставление = СокрЛП(ДокументАналитики.ПредставлениеВида());
		СпрАналитики.ВыбратьЭлементыПоРеквизиту("НомерДок",НомерДок);
		Пока СпрАналитики.ПолучитьЭлемент() = 1  Цикл  
			//Если СпрАналитики.НайтиЭлемент(Запрос.ТекАналитика) = 1 Тогда 
			Если (СпрАналитики.ДатаДок 			>= ДатаНачалаОтбора)
				и (СпрАналитики.ДатаДок 		<= ДатаОкончанияОтбора) 
				и (СокрЛП(СпрАналитики.НомерДок) = НомерДок)
				и (СпрАналитики.Контрагент = ТекКонтрагент) Тогда
					СпрАналитики.ДатаДок 	= ДокументАналитики.ДатаДок; 
					СпрАналитики.КонтрагентЮЛ = ДокументАналитики.КонтрагентЮЛ;
					СпрАналитики.Сумма 		= ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
					СпрАналитики.Магазин 	= ДокументАналитики.Склад;
					СпрАналитики.Контрагент = ТекКонтрагент;
					//СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
					СпрАналитики.Наименование = "" + СокрЛП(ТекПредставление) + " " + СокрЛП(СпрАналитики.НомерДок) + " " + СпрАналитики.ДатаДок;
					СпрАналитики.Записать();
					РезультатАналитика = СпрАналитики.ТекущийЭлемент();
					Прервать; 
				КонецЕсли;
			//КонецЕсли;	
		КонецЦикла;
		
		Если РезультатАналитика = 0 Тогда
			СпрАналитики.Новый();
			СпрАналитики.УстановитьНовыйКод();
			//СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
			СпрАналитики.НомерДок = ДокументАналитики.НомерДок;
			СпрАналитики.ДатаДок = ДокументАналитики.ДатаДок;
			СпрАналитики.Сумма = ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
			СпрАналитики.Контрагент = ТекКонтрагент; 
			СпрАналитики.КонтрагентЮЛ = ДокументАналитики.КонтрагентЮЛ;;
			СпрАналитики.Магазин = ДокументАналитики.Склад; 
			СпрАналитики.Наименование = "" + СокрЛП(ТекПредставление) + " " + СокрЛП(СпрАналитики.НомерДок) + " " + СпрАналитики.ДатаДок;
			СпрАналитики.Записать();
			РезультатАналитика = СпрАналитики.ТекущийЭлемент();
		КонецЕсли;
	ИначеЕсли (ДокументАналитики.Вид() = "РасходнаяНакладнаяРозница")
		или (ДокументАналитики.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда	
		
		Если ДокументАналитики.Вид() = "РасходнаяНакладнаяРозница" Тогда
			ТекПериодичность = Метаданные.Документ("РасходнаяНакладнаяРозница").ПериодичностьНомера;	
		ИначеЕсли ДокументАналитики.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда	
			ТекПериодичность = Метаданные.Документ("РасходнаяНакладнаяРозницаБезнал").ПериодичностьНомера;
		КонецЕсли;	
		
		ТекВидДокумента = СокрЛП(ДокументАналитики.Вид());
		ТекПредставление = СокрЛП(ДокументАналитики.ПредставлениеВида());
		СпрАналитики = СоздатьОбъект("Справочник.АналитикаПродажиПроценты");
		
		Если ТекПериодичность = "Квартал" Тогда
			ДатаНачалаОтбора 	= НачКвартала(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонКвартала(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "Год" Тогда
			ДатаНачалаОтбора 	= НачГода(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонГода(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "Месяц" Тогда
			ДатаНачалаОтбора 	= НачМесяца(ДокументАналитики.ДатаДок);
			ДатаОкончанияОтбора = КонМесяца(ДокументАналитики.ДатаДок);
		ИначеЕсли ТекПериодичность = "День" Тогда
			ДатаНачалаОтбора 	= ДокументАналитики.ДатаДок;
			ДатаОкончанияОтбора = ДокументАналитики.ДатаДок;
		КонецЕсли;
		НомерДок = ДокументАналитики.НомерДок;
		
		
		//Запрос = СоздатьОбъект("Запрос");
		//ТекстЗапроса = "
		//|Обрабатывать Все;
		//|НомерДок 			= Справочник.АналитикаПродажиПроценты.НомерДок;
		//|ДатаДок 			= Справочник.АналитикаПродажиПроценты.ДатаДок;
		//|Контрагент 		= Справочник.АналитикаПродажиПроценты.Контрагент;
		//|Магазин			= Справочник.АналитикаПродажиПроценты.Магазин;
		//|ТекАналитика 		= Справочник.АналитикаПродажиПроценты.ТекущийЭлемент;
		//|ВидДокумента		= Справочник.АналитикаПродажиПроценты.ВидДокумента; 
		//|Условие ((НомерДок 	= НомерДок) и ((ДатаДок >= ДатаНачалаОтбора) и (ДатаДок <= ДатаОкончанияОтбора)) и (ВидДокумента = ТекВидДокумента));
		//|Группировка ТекАналитика;
		//|";
		//		
		//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		//	Возврат 0;
		//КонецЕсли;
		
		СпрАналитики.ВыбратьЭлементыПоРеквизиту("НомерДок",НомерДок);
		Пока СпрАналитики.ПолучитьЭлемент() = 1  Цикл  
			//Если СпрАналитики.НайтиЭлемент(Запрос.ТекАналитика) = 1 Тогда 
				Если (СпрАналитики.ДатаДок 			>= ДатаНачалаОтбора)
				и (СпрАналитики.ДатаДок 		<= ДатаОкончанияОтбора) 
				и (СокрЛП(СпрАналитики.ВидДокумента) = ТекВидДокумента) 
				и (СокрЛП(СпрАналитики.НомерДок) = НомерДок) Тогда
					СпрАналитики.ДатаДок 	= ДокументАналитики.ДатаДок;
					СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
					СпрАналитики.Сумма 		= ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
					СпрАналитики.Магазин 	= ДокументАналитики.Склад;
					СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
					//СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
					СпрАналитики.ВидДокумента = ТекВидДокумента;
					Если ТекВидДокумента = "РасходнаяНакладнаяРозница" Тогда
						СпрАналитики.ВыданоСоСкидкой = ДокументАналитики.ВыданоСоСкидкой;
					КонецЕсли;
					СпрАналитики.Наименование = "" + СокрЛП(ТекПредставление) + " " + СокрЛП(СпрАналитики.НомерДок) + " " + СпрАналитики.ДатаДок;
					СпрАналитики.Записать();
					РезультатАналитика = СпрАналитики.ТекущийЭлемент();
					Прервать; 
				КонецЕсли;
			//КонецЕсли;	
		КонецЦикла;	
					
		//Пока Запрос.Группировка() = 1  Цикл
		//	Если СпрАналитики.НайтиЭлемент(Запрос.ТекАналитика) = 1 Тогда 
		//		Если (СпрАналитики.ДатаДок 			>= ДатаНачалаОтбора)
		//		и (СпрАналитики.ДатаДок 		<= ДатаОкончанияОтбора) 
		//		и (СпрАналитики.ВидДокумента 	= ТекВидДокумента) 
		//		и (СпрАналитики.НомерДок 		= НомерДок) Тогда
		//			СпрАналитики.ДатаДок 	= ДокументАналитики.ДатаДок;
		//			СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
		//			СпрАналитики.Сумма 		= ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
		//			СпрАналитики.Магазин 	= ДокументАналитики.Склад;
		//			СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
		//			СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
		//			СпрАналитики.ВидДокумента = ТекВидДокумента;
		//			Если ТекВидДокумента = "РасходнаяНакладнаяРозница" Тогда
		//				СпрАналитики.ВыданоСоСкидкой = ДокументАналитики.ВыданоСоСкидкой;
		//			КонецЕсли;
		//			СпрАналитики.Записать();
		//			РезультатАналитика = СпрАналитики.ТекущийЭлемент();
		//			Прервать; 
		//		КонецЕсли;
		//	КонецЕсли;	
		//КонецЦикла;
		
		Если РезультатАналитика = 0 Тогда
			СпрАналитики.Новый();
			СпрАналитики.УстановитьНовыйКод();
			//СпрАналитики.Наименование = "" + ДокументАналитики.ТекущийДокумент();
			СпрАналитики.НомерДок = ДокументАналитики.НомерДок;
			СпрАналитики.ДатаДок = ДокументАналитики.ДатаДок;
			СпрАналитики.Сумма = ДокументАналитики.Итог("Сумма")+?(ДокументАналитики.СуммаВклНП=1,0,ДокументАналитики.Итог("СуммаНП"))+?(ДокументАналитики.СуммаВклНДС=1,0,ДокументАналитики.Итог("СуммаНДС"));
			СпрАналитики.Контрагент = ДокументАналитики.Контрагент;
			СпрАналитики.Магазин = ДокументАналитики.Склад;
			СпрАналитики.ВидДокумента = ТекВидДокумента;
			Если ТекВидДокумента = "РасходнаяНакладнаяРозница" Тогда
				СпрАналитики.ВыданоСоСкидкой = ДокументАналитики.ВыданоСоСкидкой;
			КонецЕсли;   
			СпрАналитики.Наименование = "" + СокрЛП(ТекПредставление) + " " + СокрЛП(СпрАналитики.НомерДок) + " " + СпрАналитики.ДатаДок;
			СпрАналитики.Записать();
			РезультатАналитика = СпрАналитики.ТекущийЭлемент();
		КонецЕсли;	
	КонецЕсли;	
	Возврат РезультатАналитика;
КонецФункции // глПолучитьАналитику

//======================================================================
Функция глПолучитьОплатуПоАналитике(Аналитика, ДокОснованиеПроверки) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокОснованиеПроверки.ПолучитьПозицию() Тогда
			ВремРегистры.РассчитатьРегистрыНа(ДокОснованиеПроверки.ТекущийДокумент());
		Иначе
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
		КонецЕсли;
	КонецЕсли;
	
	ТекущийДолг = ВремПокупатели_розница.СводныйОстаток(,Перечисление.ВидВзаимодействия.Оплата,,,Аналитика,,,"СуммаРуб");
	
	Если ДокОснованиеПроверки.Вид() = "СтрокаВыпискиПриход" Тогда                          
		ТекущийДолг = ТекущийДолг - ДокОснованиеПроверки.Сумма;	
	КонецЕсли;	 
	
	Если ТекущийДолг <= 0 Тогда//<> Аналитика.Сумма Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции // глглПолучитьОплатуПоАналитике

//======================================================================
Функция глПроверитьОтгрузкуПоАналитике(Аналитика, ДокПроверки) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокПроверки.ПолучитьПозицию() Тогда
			ВремРегистры.РассчитатьРегистрыНа(ДокПроверки.ТекущийДокумент());
		Иначе
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
		КонецЕсли;
	КонецЕсли;
	
	ТекущаяОтгрузка	  = ВремПокупатели_розница.СводныйОстаток(,Перечисление.ВидВзаимодействия.Отгрузка,,Аналитика,,,,"СуммаРуб");
	
	ТекущаяОтгрузка   = ТекущаяОтгрузка;
	ОтгрузкаДокумента = ДокПроверки.Итог("Сумма");	
	           
	//Если ДокПроверки.ДокОснования.Вид() = "ЗаявкаКлиентаРозница" Тогда
	//	НужноОтгрузить = ДокПроверки.ДокОснования.Итог("Сумма");	
	//КонецЕсли;	
	Если ТекущаяОтгрузка <= 0 Тогда
		Возврат 0;
	ИначеЕсли ТекущаяОтгрузка - ОтгрузкаДокумента <= 0 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;	
КонецФункции
        
Функция глПолучитьНачисленуюОтгрузкуПоАналитике(Аналитика, ДокПроверки) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокПроверки.ПолучитьПозицию() Тогда  
			ВремРегистры.РассчитатьРегистрыНа(ДокПроверки.ТекущийДокумент());
		Иначе                   
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
		КонецЕсли;
	КонецЕсли;
	
	ОтборДок 		= ДокПроверки.ТекущийДокумент();
	мКлиент 		= ДокПроверки.Контрагент;
	ТекАналитика 	= Аналитика;     
	
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Отгрузка;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	//|Период с мТекДата по мТекДата;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Клиент 			= Регистр.Покупатели_розница.Контрагент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
	|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	|АналитикаПродажи 	= Регистр.Покупатели_розница.АналитикаПродажи;
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	|Группировка АналитикаПродажи;
	|Условие(АналитикаПродажи = ТекАналитика); 
	|Условие(Клиент = мКлиент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|";//}}ЗАПРОС
	
	ОтгрузкиНачислено = 0;
	ОтгрузкиСписано = 0;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл   
			ОтгрузкиНачислено = Запрос.СуммаРубПриход;
			ОтгрузкиСписано = Запрос.СуммаРубРасход;   
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ОтгрузкиНачислено - ОтгрузкиСписано;
	
КонецФункции
        
Функция глПолучитьНачисленныйБонусПоАналитике(Аналитика, ДокПроверки, ТекКонтекст) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокПроверки.ПолучитьПозицию() Тогда  
			ВремРегистры.РассчитатьРегистрыНа(ДокПроверки.ТекущийДокумент());
		Иначе                   
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА());
		КонецЕсли;
	КонецЕсли;
	
	ОтборДок 			= ДокПроверки.ТекущийДокумент();
	мКлиент 			= ДокПроверки.Контрагент;
	ТекАналитика 		= Аналитика;     
	мТекДатаАналитики 	= Аналитика.ДатаДок;
	мТекДата            = ТекКонтекст.ДатаДок;
	
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Бонусы;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с мТекДатаАналитики по мТекДата;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Клиент 			= Регистр.Покупатели_розница.Контрагент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
	|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	|АналитикаПродажи 	= Регистр.Покупатели_розница.АналитикаПродажи;
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	|Группировка АналитикаПродажи;
	|Условие(АналитикаПродажи = ТекАналитика); 
	|Условие(Клиент = мКлиент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|";//}}ЗАПРОС
	
	ПроцентовНачислено 	= 0;
	ПроцентовПотрачено 	= 0;
	ПроцентовВсего 		= 0;
	ПроцентовБыло		= 0;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл   
			ПроцентовНачислено = Запрос.СуммаРубПриход;
			ПроцентовПотрачено = Запрос.СуммаРубРасход;   
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ПроцентовНачислено;
	
КонецФункции

Функция глПолучитьНачисленныйПроцентПоАналитике(Аналитика, ДокПроверки) Экспорт
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремПокупатели_розница          = ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьПозициюТА() > ДокПроверки.ПолучитьПозицию() Тогда  
			ВремРегистры.РассчитатьРегистрыНа(ДокПроверки.ТекущийДокумент());
			Если Аналитика.Вид() = "АналитикаСчетБезналПроценты" Тогда
				мТекДатаНачала 		= Аналитика.ДатаДок;
				мТекДатаОкончания 	= ДокПроверки.ПолучитьПозицию();
			КонецЕсли;
		Иначе                   
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьПозициюТА()); 
			Если Аналитика.Вид() = "АналитикаСчетБезналПроценты" Тогда
				мТекДатаНачала 		= Аналитика.ДатаДок;
				мТекДатаОкончания 	= ПолучитьПозициюТА();
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли;
	
	ОтборДок 		= ДокПроверки.ТекущийДокумент();
	Если Аналитика.Вид() = "АналитикаСчетБезналПроценты" Тогда
		мКлиент 		= Аналитика.Контрагент;  
	Иначе	
		мКлиент 		= ДокПроверки.Контрагент;
	КонецЕсли;	     
	
	
	ТекАналитика 	= Аналитика.ТекущийЭлемент();     
	
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Проценты;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)";    
	Если Аналитика.Вид() = "АналитикаСчетБезналПроценты" Тогда  
		ТекстЗапроса = ТекстЗапроса +"
		|Период с мТекДатаНачала по мТекДатаОкончания;";
	КонецЕсли; 
	ТекстЗапроса = ТекстЗапроса +"
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Клиент 			= Регистр.Покупатели_розница.Контрагент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;";
	//|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;";
	Если Аналитика.Вид() = "АналитикаСчетБезналПроценты" Тогда
		ТекстЗапроса = ТекстЗапроса +"
		|АналитикаПродажи 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;";     
	Иначе
		ТекстЗапроса = ТекстЗапроса +"
		|АналитикаПродажи 	= Регистр.Покупатели_розница.АналитикаПродажи;";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса +"
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	|Группировка АналитикаПродажи;
	|Условие(АналитикаПродажи = ТекАналитика); 
	|Условие(Клиент = мКлиент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|";//}}ЗАПРОС
	
	ПроцентовНачислено 	= 0;
	ПроцентовПотрачено 	= 0;
	ПроцентовВсего 		= 0;
	ПроцентовБыло		= 0;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл   
			ПроцентовНачислено = Запрос.СуммаРубПриход;
			ПроцентовПотрачено = Запрос.СуммаРубРасход;   
		КонецЦикла;
	КонецЕсли;	
	
	Возврат ПроцентовНачислено;
	
КонецФункции
            
Функция глПолучитьПродажиПоАналитике(Аналитика, ТекДата) Экспорт
	ВремРегистры = СоздатьОбъект("Регистры");
	ВремПокупатели_розница=ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьДатуТА() > ТекДата Тогда 
			мТекДата = ТекДата;
			ВремРегистры.РассчитатьРегистрыНа(ТекДата);
		Иначе                                                    
			мТекДата = ПолучитьДатуТА();
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьДатуТА());
		КонецЕсли;
	КонецЕсли;
	          
	РезультатТаблица 		= СоздатьОбъект("ТаблицаЗначений");
	ТекВидВзаимодействия 	= Перечисление.ВидВзаимодействия.Отгрузка;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|Период с мТекДата по мТекДата;
	|АналитикаСчетБезнал 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;
	|АналитикаПродажи 		= Регистр.Покупатели_розница.АналитикаПродажи;
	|ТекПроценты 			= Регистр.Покупатели_розница.СуммаРуб;
	|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
	|КредДокумент 			= Регистр.Покупатели_розница.КредДокумент;
	|Функция ОстатокПроценты = КонОст(ТекПроценты);
	|Условие(ВидВзаимодействия = ТекВидВзаимодействия);
	|Условие(АналитикаПродажи = Аналитика);
	|Условие(ТекПроценты > 0);
	//|Условие(АналитикаПродажи.ДатаДок <= ДатаДок);
	|Группировка КредДокумент;
	|Группировка АналитикаСчетБезнал;
	|Группировка АналитикаПродажи;";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.Выгрузить(РезультатТаблица, 0, 0);
	
	Возврат РезультатТаблица;
КонецФункции
//======================================================================
Функция глПолучитьРеализацииПоАналитике(Аналитика, ТекДата) Экспорт
	ВремРегистры = СоздатьОбъект("Регистры");
	ВремПокупатели_розница=ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьДатуТА() > ТекДата Тогда 
			мТекДата = ТекДата;
			ВремРегистры.РассчитатьРегистрыНа(ТекДата);
		Иначе                                                    
			мТекДата = ПолучитьДатуТА();
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьДатуТА());
		КонецЕсли;
	КонецЕсли;
	          
	РезультатТаблица 		= СоздатьОбъект("ТаблицаЗначений");
	ТекВидВзаимодействия 	= Перечисление.ВидВзаимодействия.Отгрузка;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|Период с мТекДата по мТекДата;
	|АналитикаСчетБезнал 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;
	|АналитикаПродажи 		= Регистр.Покупатели_розница.АналитикаПродажи;
	|ТекПроценты 			= Регистр.Покупатели_розница.СуммаРуб;
	|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
	|КредДокумент 			= Регистр.Покупатели_розница.КредДокумент;
	|Функция ОстатокПроценты = КонОст(ТекПроценты);
	|Условие(ВидВзаимодействия = ТекВидВзаимодействия);
	|Условие(АналитикаСчетБезнал = Аналитика);
	|Условие(ТекПроценты > 0);
	//|Условие(АналитикаПродажи.ДатаДок <= ДатаДок);
	|Группировка КредДокумент;
	|Группировка АналитикаСчетБезнал;
	|Группировка АналитикаПродажи;";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.Выгрузить(РезультатТаблица, 0, 0);
	
	Возврат РезультатТаблица;
КонецФункции // глглПолучитьРеализацииПоАналитике

//======================================================================
Функция глБылиПроцентыПоАналитике(Аналитика) Экспорт
	РезультатТаблица = СоздатьОбъект("ТаблицаЗначений");
	ТекВидВзаимодействия = Перечисление.ВидВзаимодействия.Проценты;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = "
	|Период с ТекДата по ТекДата;
	|АналитикаСчетБезнал 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;
	|АналитикаПродажи 		= Регистр.Покупатели_розница.АналитикаПродажи;
	|ТекПроценты 			= Регистр.Покупатели_розница.СуммаРуб;
	|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Функция ПриходПроценты = Приход(ТекПроценты);
	|Условие(ВидВзаимодействия = ТекВидВзаимодействия);
	|Условие(АналитикаСчетБезнал = Аналитика);
	|Условие(ПриходПроценты > 0);
	|Группировка АналитикаСчетБезнал;
	|Группировка АналитикаПродажи;";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос.Выгрузить(РезультатТаблица, 0, 0);
	
	Возврат РезультатТаблица.КоличествоСтрок();
КонецФункции // глБылиПроцентыПоАналитике
      
Функция ЗначениеИзСтрокиОЛЕ(СтрОЛЕ) Экспорт
	Возврат ЗначениеИзСтроки(СтрОЛЕ);
КонецФункции

Функция ЗначениеИзСтрокиВнутрОЛЕ(СтрОЛЕ) Экспорт
	Возврат ЗначениеИзСтрокиВнутр(СтрОЛЕ);
КонецФункции  

Функция глПолучитьЧекДокумента(ТекДокумент) Экспорт  
	СправочникЧеки = СоздатьОбъект("Справочник.Чеки");
	Если СправочникЧеки.НайтиПоРеквизиту("Документ",ТекДокумент,1) = 1 Тогда
		Возврат СправочникЧеки.ТекущийЭлемент();
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции

Процедура глПроверитьКонтрагентаВЦепочке(ТекущийДокумент, КотрагентПроверки, ТекстСообщения) Экспорт
	//ТекущийДокумент = СоздатьОбъект("Документ");
	//ТекущийДокумент.НайтиДокумент(ТекДокумент);
	Если ТекущийДокумент.Выбран() = 1 Тогда
		Если ТекущийДокумент.Вид() = "СчетБнРозница" Тогда
			ПодчДокумент = СоздатьОбъект("Документ");
			ПодчДокумент.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент);
			Пока ПодчДокумент.ПолучитьДокумент() = 1 Цикл
				Если ПодчДокумент.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;	
				Если ((ПодчДокумент.Вид() = "Реализация"))
				и (ПодчДокумент.Контрагент <> КотрагентПроверки) Тогда
					ТекстСообщения = ТекстСообщения + ПодчДокумент+РазделительСтрок;	
				ИначеЕсли (ПодчДокумент.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда
					Если (ПодчДокумент.КонтрагентЮЛ <> КотрагентПроверки) Тогда 
						ТекстСообщения = ТекстСообщения + ПодчДокумент+РазделительСтрок;  
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;		
		ИначеЕсли ТекущийДокумент.Вид() = "Реализация" Тогда
			Если (ТекущийДокумент.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал")
			и (ТекущийДокумент.ДокОснование.КонтрагентЮЛ <> КотрагентПроверки) Тогда
				ТекстСообщения = ТекстСообщения + ТекущийДокумент.ДокОснование+РазделительСтрок;
				Если (ТекущийДокумент.ДокОснование.ДокОснование.Вид() = "СчетБнРозница")
				и (ТекущийДокумент.ДокОснование.ДокОснование.КонтрагентЮЛ <> КотрагентПроверки) Тогда 
					ТекстСообщения = ТекстСообщения + ТекущийДокумент.ДокОснование.ДокОснование+РазделительСтрок;	
				КонецЕсли;		
			КонецЕсли;	
		ИначеЕсли ТекущийДокумент.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда
			Если (ТекущийДокумент.ДокОснование.Вид() = "СчетБнРозница")
			и (ТекущийДокумент.ДокОснование.КонтрагентЮЛ <> КотрагентПроверки) Тогда
				ТекстСообщения = ТекстСообщения + ТекущийДокумент.ДокОснование+РазделительСтрок;
			КонецЕсли;
			ПодчДокумент = СоздатьОбъект("Документ");
			ПодчДокумент.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент);
			Пока ПодчДокумент.ПолучитьДокумент() = 1 Цикл
				Если ПодчДокумент.ПометкаУдаления() = 1 Тогда
					Продолжить;
				КонецЕсли;
				Если ((ПодчДокумент.Вид() = "Реализация"))
				и (ПодчДокумент.Контрагент <> КотрагентПроверки) Тогда
					ТекстСообщения = ТекстСообщения + ПодчДокумент+РазделительСтрок;	
				ИначеЕсли (ПодчДокумент.Вид() = "РасходнаяНакладнаяРозницаБезнал")
				и (ПодчДокумент.КонтрагентЮЛ <> КотрагентПроверки) Тогда 
					ТекстСообщения = ТекстСообщения + ПодчДокумент+РазделительСтрок;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	
     
Функция глПроверитьПодчиненные(ТекДокумент)
	ФиксСкидка = 0;
	ПодчДокумент = СоздатьОбъект("Документ");
	ПодчДокумент.ВыбратьПодчиненныеДокументы(,,ТекДокумент);
	Пока ПодчДокумент.ПолучитьДокумент() = 1 Цикл
		Если ПодчДокумент.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		Если (ПодчДокумент.Вид() = "ЗаявкаКлиентаРозница") Тогда
			Если ПустоеЗначение(ПодчДокумент.ФиксСкидка) = 0 Тогда
				ФиксСкидка = ПодчДокумент.ФиксСкидка;
				Прервать;
			КонецЕсли;
		//Иначе
		//	ФиксСкидка = глПроверитьПодчиненные(ТекДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФиксСкидка;
КонецФункции

Функция глПолучитьФиксированнуюСкидку(ТекДокумент) Экспорт
	ФиксСкидка = 0;
	
	Попытка
		Если ТекДокумент.Выбран() = 1 Тогда
			Если ТекДокумент.ДокОснование.Выбран()= 1 Тогда
				Если ТекДокумент.ДокОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
					Если ПустоеЗначение(ТекДокумент.ДокОснование.ФиксСкидка) = 0 Тогда
						ФиксСкидка = ТекДокумент.ДокОснование.ФиксСкидка;
					КонецЕсли;
				Иначе
					ФиксСкидка = глПроверитьПодчиненные(ТекДокумент.ДокОснование);
					Если ФиксСкидка = 0 Тогда
						ФиксСкидка = глПолучитьФиксированнуюСкидку(ТекДокумент.ДокОснование);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ФиксСкидка;
КонецФункции	

Функция глПолучитьАвтораЗаявки(ТекущийДокумент) Экспорт 
	АвторЗаявки = "";
	Если ТекущийДокумент.Вид() = "ЗаявкаКлиентаРозница" Тогда
		АвторЗаявки = ТекущийДокумент.Автор;	
	Иначе
		Попытка
			Если ТекущийДокумент.ДокОснование.Выбран() = 1 Тогда
				АвторЗаявки = глПолучитьАвтораЗаявки(ТекущийДокумент.ДокОснование);	
			КонецЕсли;

		Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат АвторЗаявки;
КонецФункции
            
Процедура глПолучитьСписокОплат(ТекОснование, СписокОплат) Экспорт
	Если (ТекОснование.Вид() = "СчетБнРозница")
	или (ТекОснование.Вид() = "ЗаявкаКлиентаРозница")
	или (ТекОснование.Вид() = "ЗаявкаПокупателя") 
	или (ТекОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда  
		ДокПодч = СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекОснование);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид() = "СтрокаВыпискиПриход") и (ДокПодч.Проведен() = 1) Тогда     
				Если СписокОплат.НайтиЗначение(ДокПодч.ТекущийДокумент())  = 0 Тогда
					СписокОплат.ДобавитьЗначение(ДокПодч.ТекущийДокумент());
				КонецЕсли;	
			КонецЕсли;
			Если (ДокПодч.Вид() = "СчетБнРозница") или (ДокПодч.Вид() = "ЗаявкаКлиентаРозница") или (ДокПодч.Вид() = "ЗаявкаПокупателя") или (ДокПодч.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда   
				глПолучитьСписокОплат(ДокПодч.ТекущийДокумент(), СписокОплат);	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры	

Функция глПолучитьОплаты(ТекущийДокумент) Экспорт
	СписокРез = СоздатьОбъект("СписокЗначений");
    
	глПолучитьСписокОплат(ТекущийДокумент,СписокРез);
	
	Возврат СписокРез;	
КонецФункции	

Функция глПолучитьЗаявку(ТекущийДокумент) Экспорт 
	Заявка = "";
	Если (ТекущийДокумент.Вид() = "ЗаявкаКлиентаРозница") или (ТекущийДокумент.Вид() = "ЗаявкаПокупателя") Тогда
		Заявка = ТекущийДокумент;	
	Иначе
		Попытка
			Если ТекущийДокумент.ДокОснование.Выбран() = 1 Тогда
				Заявка = глПолучитьЗаявку(ТекущийДокумент.ДокОснование);	
			КонецЕсли;
        Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Заявка;
КонецФункции

Функция глПолучитьЗаявкуПривязка(ТекущийДокумент) Экспорт 
	Заявка = "";
	Если (ТекущийДокумент.Вид() = "ЗаявкаКлиентаРозница") или (ТекущийДокумент.Вид() = "ЗаявкаПокупателя") Тогда
		Заявка = ТекущийДокумент;
	ИначеЕсли (ТекущийДокумент.Вид() = "СчетБнРозница") и (ПустоеЗначение(ТекущийДокумент.ДокОснование) = 1) Тогда
		Заявка = ТекущийДокумент;	
	Иначе
		Попытка
			Если ТекущийДокумент.ДокОснование.Выбран() = 1 Тогда
				Заявка = глПолучитьЗаявкуПривязка(ТекущийДокумент.ДокОснование);	
			КонецЕсли;
        Исключение
		КонецПопытки;
	КонецЕсли;
	Возврат Заявка;
КонецФункции


//***************************************************
//возвращает строку в формате времени "00:00:00"  
Функция глФорматВремя(ЧасХ=0,МинХ=0,СекХ=0) Экспорт
	Возврат Формат(ЧасХ,"Ч(0)2")+":"+Формат(МинХ,"Ч(0)2")+":"+Формат(СекХ,"Ч(0)2");
КонецФункции	
//***************************************************
// По сроке формата времени возвращает   
Процедура глВремяФормат(ВремяХ,ЧасХ,МинХ,СекХ) Экспорт
	ЧасХ=Число(Лев(ВремяХ,2));
	МинХ=Число(Сред(ВремяХ,4,2));
	СекХ=Число(Прав(ВремяХ,2));
КонецПроцедуры
//***************************************************
// формирует хроно код на оси времени  
Функция глХроноПозиция(ДатаХ,ВремяХ) Экспорт
Перем ЧасХ,МинХ,СекХ;	
	_ДатаХ=Число(ДатаХ);
	глВремяФормат(ВремяХ,ЧасХ,МинХ,СекХ);
	Возврат _ДатаХ*86400+ЧасХ*3600+МинХ*60+СекХ;
КонецФункции //                                                            
//***************************************************
// преобраззует хроно код в дату и время   
Функция глПозицияХроно(Знач ПозицияХ,ДатаХ=0,ВремяХ="00:00:00") Экспорт

	_ДатаХ=Цел(ПозицияХ/86400);
	ПозицияХ=ПозицияХ-(_ДатаХ*86400);
	ЧасХ=Цел(ПозицияХ/3600);
	ПозицияХ=ПозицияХ-(ЧасХ*3600);
	МинХ=Цел(ПозицияХ/60);
	ПозицияХ=ПозицияХ-(МинХ*60);
	СекХ=ПозицияХ;
	ДатаХ	= Дата(_ДатаХ);
	ВремяХ	= глФорматВремя(ЧасХ,МинХ,СекХ);
	                        
	Если ПустоеЗначение(ДатаХ)=1 Тогда
		Возврат ВремяХ;	
	Иначе
		Возврат ""+ДатаХ+"; "+ВремяХ;	
	КонецЕсли;
	
КонецФункции            
//**************************************************
Функция ПриЗаписиДокумента(Конт) Экспорт  
	Конт.ХроноПозиция=глХроноПозиция(ТекущаяДата(),ТекущееВремя()); 
	Если (Конт.Вид() = "Реализация") Тогда
		Если (ПустоеЗначение(Конт.ХроноПозицияЕстьДокументы) = 1) и (Конт.ЕстьДокументы = 1) Тогда  
			Конт.ХроноПозицияЕстьДокументы = глХроноПозиция(ТекущаяДата(),ТекущееВремя());
		КонецЕсли;	
		
		Если (Конт.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда 
			Если (ПустоеЗначение(Конт.ДокОснование.ХроноПозицияЕстьДокументы) = 1) и (Конт.ЕстьДокументы = 1)Тогда
				ДокПоступленияБезн = СоздатьОбъект("Документ");
				//Конт.ДокОснование.ХроноПозицияЕстьДокументы = глХроноПозиция(ТекущаяДата(),ТекущееВремя());  
				ДокПоступленияБезн.НайтиДокумент(Конт.ДокОснование.ТекущийДокумент());
				ДокПоступленияБезн.ХроноПозицияЕстьДокументы = Конт.ХроноПозицияЕстьДокументы;  
				ДокПоступленияБезн.Записать();
			КонецЕсли;
		КонецЕсли; 
	ИначеЕсли (Конт.Вид() = "РасходнаяНакладнаяРозницаБезнал")  Тогда	
	Иначе
		Конт.ХроноПозицияЕстьДокументы = глХроноПозиция(Конт.ДатаДок, ТекущееВремя());
	КонецЕсли;	
КонецФункции       
//**************************************************
Функция ПриЗаписиЭлемента(Конт) Экспорт
	Если 	Метаданные.Справочник(Конт.Вид()).Реквизит("ХроноПозиция").Выбран()=1 
	Тогда
		Конт.ХроноПозиция=глХроноПозиция(ТекущаяДата(),ТекущееВремя());
	КонецЕсли;
КонецФункции
//**************************************************


////////////////////////////////////////////////////////////////////////////////
//  ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
глФлагРасшифровки = 0;
глРасшифровка = 0;
глОбновить = 0;

// имена опций печати
ПарСтрДок ="ДляДокум"; 			// имя опций печати документов

глРубли		= Константа.ВалютаСчетовФактур;
глДоллары	= Константа.ВалютаУпрУчета;

глКО	= Перечисление.КодыОпераций;
глСП	= Перечисление.СтатусыПартии;
глВД	= Перечисление.ВидыДолга;

глКаталогПечФорм = КаталогИБ()+"ExtForms\PrnForms\";

ПрефиксАвтоНумерации("Справочник.*",СокрЛП(Константа.ПрефиксИБ));

глКаталогОписаний = КаталогИБ() + "ExtForms\Equip\";
глПрефиксВесовогоШтрихкода = "23"; 
глПрефиксШтучногоШтрихкода = "20";
ИмяФайлаНастройки  = ФС.WindowsКаталог()+"\"+"1stRozn.txt";

глДПРежимБегСтроки   = 1;
глДПРежимВыводаСтрок = 2;                              



глДатаИзмененияПорядкаВычетаНДССАвансов = '01.08.2002';
глДатаПоПриказу147                      = '01.01.2008';

глПроведениеСтрокиВыписки = 0;

//******************************************************************************
// Инициализация переменных для работы с картридером

Если ЗагрузитьВнешнююКомпоненту("Scaner1C.DLL")<>0
Тогда
  Scaner = СоздатьОбъект("AddIn.Scaner45"); // Создание объекта сканера из внешней компоненты
  Scaner.AutoDisable = 1;
  Scaner.DataEventEnabled = 1;
  Scaner.OldVersion = 0;
  Сообщить("Внешняя компонента сканера штрих-кода успешно загружена");
Иначе
  Сообщить("Внешняя компонента сканера штрих-кода - Scaner1C.DLL не найдена");
КонецЕсли;
