////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//            
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;        

// списки значений, в которых определены возможные типы операций
Перем СписокОперДебет, СписокОперКредит;

Процедура ВывестиГруппировку(Запрос,Ном) Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ     
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// СформироватьИнформациюОПартии(Партия)
//
// Параметры: 
//		Партия - элемент справочника "Партии"
//
// Возвращаемое значение: 
//	строка с описанием партии
//
// Описание: 
//	формирует строку описания партии со всеми ее реквизитами
//
Функция СформироватьИнформациюОПартии(Партия)
	Перем Результат;
	               
	Результат="";
	
	Если ПустоеЗначение(Партия)=1 Тогда
		Возврат(Результат);
	КонецЕсли; 
	          
	Если ПустоеЗначение(Партия.Поставщик)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Поставщик: "+СокрЛП(Партия.Поставщик);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ПриходныйДокумент)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Поставка: "+СокрЛП(Партия.ПриходныйДокумент);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ДоговорПоставщика)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Договор: "+СокрЛП(Партия.ДоговорПоставщика);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	
	Возврат(Результат);
	
КонецФункции //СформироватьИнформациюОПартии()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************
// ПроверкаУчетнойПолитики()
//
// Параметры:
//	Нет
//  
// Возвращаемое значение: 
//	0 - если пользователь отказался от формирвания отчета, 1 - в противном случае.
//
// Вызывается из формул элементов диалога:
//
// Описание:  
//	Если для какого-либо из юр. лиц, попадающих в отчет установлена учетная политика "По среднему",
// и заданы фильтры или детализация по поставщикам или партиям, выдается соответствующее предупреждение
//                                                               
Функция ПроверкаУчетнойПолитики()
	 	
	 // Сначала проверим, не ставит ли пользователь фильтры или детализацию по поставщикам или поставкам
	ЕстьМФПоПоставщикам=0;
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
		Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="Поставщик") и (ТаблицаМФ.ФлВкл=2) Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЦикла;      
	
	Если Группировки.НайтиЗначение("Поставщик")<>0 Тогда
		Если Группировки.Пометка(Группировки.НайтиЗначение("Поставщик"))=1 Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЕсли;
	
	Если Группировки.НайтиЗначение("Партия")<>0 Тогда
		Если Группировки.Пометка(Группировки.НайтиЗначение("Партия"))=1 Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЕсли;
	                          
	// Если фильтры и детализация не утановлены тогда и проверять больше нечего
	Если (ВыбПоставщик.Выбран()=0) И
		 (ЕстьМФПоПоставщикам=0)
	Тогда     
		Возврат 1;
	КонецЕсли;	 
	
	// Список юр. лиц, по которым установлен учет по среднему
	СписокЮрЛиц = СоздатьОбъект("СписокЗначений");
	ПроверитьВсе = 0;
	Если ВидРазделителя = 1 Тогда // по фирме
		Если ВыбРазделитель1.Выбран() = 1 Тогда
			Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
				СписокЮрЛиц.ДобавитьЗначение(ВыбРазделитель1.ЮрЛицо);           
			КонецЕсли;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;
    ИначеЕсли ВидРазделителя = 2 Тогда // по юр. лицу                                                          
		Если ВыбРазделитель2.Выбран() = 1 Тогда
			Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
				СписокЮрЛиц.ДобавитьЗначение(ВыбРазделитель2);
			КонецЕсли;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;   
	ИначеЕсли ВидРазделителя = 3 Тогда // по упр. аналитике
		Если ВыбРазделитель3.Выбран() = 1 Тогда
			СпрФирмы = СоздатьОбъект("Справочник.Фирмы");
			СпрФирмы.ВыбратьЭлементы();
			Пока СпрФирмы.ПолучитьЭлемент() = 1 цикл
				Если СпрФирмы.УпрАналитика = ВыбРазделитель3 Тогда
					Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   		   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
						СписокЮрЛиц.ДобавитьЗначение(СпрФирмы.ЮрЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;     
	КонецЕсли;         
	
	Если ПроверитьВсе = 1 Тогда
		   
		//Сформируем списки множественного фильтра
        СписокФирмМФ = СоздатьОбъект("СписокЗначений");	
        СписокЮрЛицМФ = СоздатьОбъект("СписокЗначений");	
        СписокУпрАналитикМФ = СоздатьОбъект("СписокЗначений");	
		
		ТаблицаМФ.ВыбратьСтроки();
		Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="Фирма") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокФирмМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФФирм = ТаблицаМФ.ТипМФ;				
			КонецЕсли; 
			
			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="ЮрЛицо") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокЮрЛицМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФЮрЛиц = ТаблицаМФ.ТипМФ;				
			КонецЕсли;

			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="УпрАналитика") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокУпрАналитикМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФУпрАналитики = ТаблицаМФ.ТипМФ;				
			КонецЕсли;
		КонецЦикла;
		
		СпрФирмы = СоздатьОбъект("Справочник.Фирмы");
		СпрФирмы.ВыбратьЭлементы();
		Пока СпрФирмы.ПолучитьЭлемент() = 1 цикл
			 
			//Сначала проверим, может фирма и в отчет-то не попадает,
			//тогда и юр. лицо по ней включать не надо
			
			ПопадетВОтчет = 1;
			
			Если (СписокФирмМФ.РазмерСписка()>0) ИЛИ 
				 (СписокЮрЛицМФ.РазмерСписка()>0) ИЛИ 
				 (СписокУпрАналитикМФ.РазмерСписка()>0) Тогда
				 	Если СписокФирмМФ.РазмерСписка()>0 Тогда    
				 		Если СписокФирмМФ.НайтиЗначение(СпрФирмы.ТекущийЭлемент())=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФФирм = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФФирм = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;
				 	
				 	Если СписокЮрЛицМФ.РазмерСписка()>0 Тогда                                                  
				 		Если СписокЮрЛицМФ.НайтиЗначение(СпрФирмы.ЮрЛицо)=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФЮрЛиц = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФЮрЛиц = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;

				 	Если СписокУпрАналитикМФ.РазмерСписка()>0 Тогда                                                  
				 		Если СписокУпрАналитикМФ.НайтиЗначение(СпрФирмы.УпрАналитика)=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФУпрАналитики = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФУпрАналитики = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;
			КонецЕсли;
            
			Если ПопадетВОтчет = 1 Тогда

				Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			       и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
					Если СписокЮрЛиц.НайтиЗначение(СпрФирмы.ЮрЛицо) = 0 Тогда	//Проверяем, не добавлено ли уже юр. лицо
						СписокЮрЛиц.ДобавитьЗначение(СпрФирмы.ЮрЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;            
	
	Если СписокЮрЛиц.РазмерСписка() > 0 Тогда
		Для к = 1 по СписокЮрЛиц.РазмерСписка() Цикл
			Если к = 1 Тогда
				СтрокаЮрЛиц = Строка(СписокЮрЛиц.ПолучитьЗначение(к));
			Иначе
				СтрокаЮрЛиц = СтрокаЮрЛиц + "', '" + Строка(СписокЮрЛиц.ПолучитьЗначение(к));
			КонецЕсли;
		КонецЦикла;
		Если СписокЮрЛиц.РазмерСписка() > 1 Тогда
			НачалоСтроки = "По юр.лицам '";
		Иначе
			НачалоСтроки = "По юр. лицу '";
		КонецЕсли;
		
		Если Вопрос(НачалоСтроки+СтрокаЮрЛиц+"' себестоимость вычисляется по среднему. "+
				"Использование фильтров и детализации по поставщикам и "+
				"по партиеобразующим документам могут привести к некорректным данным. "+
				"Продолжить выполнение отчета?","Да+Нет", 60)="Нет" Тогда
				Возврат 0;
		КонецЕсли; 
	КонецЕсли;
	Возврат 1;
КонецФункции

//******************************************************************************
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)
	
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	
	ТекСтр = Группировки.ТекущаяСтрока();
	ПослСдвигСтр = Группировки.РазмерСписка() - 1;
	Если ТекСтр <= ПослСдвигСтр Тогда
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
			Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
		КонецЕсли;
	Иначе
		Предупреждение("Группировка ""По документам движения"" всегда находится
		               |в конце списка и не перемещается.",60);
	КонецЕсли;
				
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//    
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп=Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Поставщик") или (ТекстГрупп = "Номенклатура") Тогда
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Номенклатура" Тогда
				НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьГруппировкиЗапроса()

//******************************************************************************
// ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                           
Процедура ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
	     
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		ПечЕд = ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);
	Иначе     
		ПечЕд = "";
	КонецЕсли; 
	
	//начальный остаток
	ПечНачОстС 	= глФРМ(Запрос.НачОстС);
	ПечНачОстК 	= глФРМКоличество(Запрос.НачОстК,ПечЕд);
	ПечНачОстЦ  = ?(Запрос.НачОстК<>0,глФРМ(Запрос.НачОстС/Запрос.НачОстК),0);
	Таб.ВывестиСекцию(НазваниеСекции+"|Начало");
	
	// приходы (по операциям)
	ПриходС		= Запрос.ПриходС;
	ПриходК		= Запрос.ПриходК;
	ВсегоСтрок 	= СписокОперДебет.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации 	= СписокОперДебет.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		ТекПриходС 		= Запрос.ПолучитьАтрибут(НазвОперации+"ПриходС");
		ТекПриходК 		= Запрос.ПолучитьАтрибут(НазвОперации+"ПриходК");
		ПриходС			= ПриходС - ТекПриходС;
		ПриходК			= ПриходК - ТекПриходК;
		ПечПриходС 		= глФРМ(ТекПриходС);
		ПечПриходК 		= глФРМКоличество(ТекПриходК,ПечЕд);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Приход");
	КонецЦикла;                                                                 
	ПечПриходС 	= глФРМ(ПриходС);
	ПечПриходК 	= глФРМКоличество(ПриходК,ПечЕд);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|Приход");
	
	// расходы (по операциям)   
	РасходС		= Запрос.РасходС;
	РасходК 	= Запрос.РасходК;
	ВсегоСтрок 	= СписокОперКредит.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации 	= СписокОперКредит.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		ТекРасходС 		= Запрос.ПолучитьАтрибут(НазвОперации+"РасходС");
		ТекРасходК		= Запрос.ПолучитьАтрибут(НазвОперации+"РасходК");
		РасходС			= РасходС - ТекРасходС; 
		РасходК			= РасходК - ТекРасходК; 
		ПечРасходС 		= глФРМ(ТекРасходС);
		ПечРасходК 		= глФРМКоличество(ТекРасходК,ПечЕд);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Расход");
	КонецЦикла;
	ПечРасходС 	= глФРМ(РасходС);
	ПечРасходК 	= глФРМКоличество(РасходК,ПечЕд);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|Расход");
	
	// конечный остаток
	ПечКонОстС 	= глФРМ(Запрос.КонОстС);      
	ПечКонОстК 	= глФРМКоличество(Запрос.КонОстК,ПечЕд); 
	ПечКонОстЦ  = ?(Запрос.КонОстК<>0,глФРМ(Запрос.КонОстС/Запрос.КонОстК),0);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|КонечныйОстаток");
	глОживить(1);

КонецПроцедуры // ПечатьСтроки()

//******************************************************************************
// ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                           
Процедура ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка, ТекОстС,ТекОстК)
	     
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		ПечЕд = ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);
	Иначе     
		ПечЕд = "";
	КонецЕсли; 
	
	//начальный остаток
	Таб.ВывестиСекцию(НазваниеСекции+"|Начало");
	
	// приходы (по операциям)
	ПриходС		= Запрос.ПриходС;
	ПриходК		= Запрос.ПриходК;
	ТекОстС 	= ТекОстС + ПриходС;
	ТекОстК 	= ТекОстК + ПриходК;
	ВсегоСтрок 	= СписокОперДебет.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации 	= СписокОперДебет.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		ТекПриходС 		= Запрос.ПолучитьАтрибут(НазвОперации+"ПриходС");
		ТекПриходК 		= Запрос.ПолучитьАтрибут(НазвОперации+"ПриходК");
		ПриходС			= ПриходС - ТекПриходС;
		ПриходК			= ПриходК - ТекПриходК;
		ПечПриходС 		= глФРМ(ТекПриходС);
		ПечПриходК 		= глФРМКоличество(ТекПриходК,ПечЕд);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Приход");
	КонецЦикла;                                                                 
	ПечПриходС 	= глФРМ(ПриходС);
	ПечПриходК 	= глФРМКоличество(ПриходК,ПечЕд);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|Приход");
	
	// расходы (по операциям)   
	РасходС		= Запрос.РасходС;
	РасходК 	= Запрос.РасходК;   
	ТекОстС 	= ТекОстС - РасходС;
	ТекОстК 	= ТекОстК - РасходК;
	ВсегоСтрок 	= СписокОперКредит.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации 	= СписокОперКредит.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		ТекРасходС 		= Запрос.ПолучитьАтрибут(НазвОперации+"РасходС");
		ТекРасходК		= Запрос.ПолучитьАтрибут(НазвОперации+"РасходК");
		РасходС			= РасходС - ТекРасходС; 
		РасходК			= РасходК - ТекРасходК; 
		ПечРасходС 		= глФРМ(ТекРасходС);
		ПечРасходК 		= глФРМКоличество(ТекРасходК,ПечЕд);
		Таб.ПрисоединитьСекцию(НазваниеСекции+"|Расход");
	КонецЦикла;
	ПечРасходС 	= глФРМ(РасходС);
	ПечРасходК 	= глФРМКоличество(РасходК,ПечЕд);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|Расход");
	
	// конечный остаток
	ПечКонОстС 	= глФРМ(ТекОстС);      
	ПечКонОстК 	= глФРМКоличество(ТекОстК,ПечЕд); 
	ПечКонОстЦ  = ?(ТекОстК<>0,глФРМ(ТекОстС/ТекОстК),0);
	Таб.ПрисоединитьСекцию(НазваниеСекции+"|КонечныйОстаток");
	глОживить(1);

КонецПроцедуры // ПечатьСтрокиДокумента()

//******************************************************************************
// ВывестиГруппировку(Запрос,Ном)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном)
	  
	Если Ном <= КоличествоГруппировок Тогда
		
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		Если НазваниеГруппировки = "Документ" Тогда
			ТекОстС = Запрос.НачОстС;
			ТекОстК = Запрос.НачОстК;
		КонецЕсли;         
		
		Пока Запрос.Группировка(Ном) = 1 Цикл
		    
			Если НазваниеГруппировки = "Документ" Тогда
				НазваниеСекции="Документ";   
			Иначе                           
				НазваниеСекции="Строка"+Ном;
			КонецЕсли;         
			Если (Ном >= НомерГруппировкиПоТМЦ) и (Запрос.ЭтоГруппа(НазваниеГруппировки)=0) Тогда
				НазваниеСекции = НазваниеСекции + "К";
			КонецЕсли;                               
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			Если (ТипЗначенияСтр(ПечТекстСтроки) = "Документ") или 
				 (ТипЗначенияСтр(ПечТекстСтроки) = "Справочник") Тогда
				ТекРасшифровка = ПечТекстСтроки;
			Иначе
				ТекРасшифровка = "";
			КонецЕсли;
			Если НазваниеГруппировки = "Партия" Тогда
				ПечТекстСтроки = СформироватьИнформациюОПартии(ПечТекстСтроки);
			ИначеЕсли (НазваниеГруппировки = "СвойствоПартии") 
			        и (ПустоеЗначение(ПечТекстСтроки) = 0) 
					Тогда
				ПечТекстСтроки = ""+ПечТекстСтроки.Владелец+": "+СокрЛП(ПечТекстСтроки);
			ИначеЕсли НазваниеГруппировки = "Документ" Тогда
				ПечТекстСтроки = "" + глПредставлениеДокумента(ПечТекстСтроки) + 
				                 " (" + СокрЛП(глИнформацияПоДокументуВЖурнале(ПечТекстСтроки)) + ")";
			КонецЕсли;
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки),ПечТекстСтроки);
			                                           
			Если НазваниеГруппировки = "Документ" Тогда
				ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка,ТекОстС,ТекОстК);
			Иначе
				ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка);
			КонецЕсли;
		
			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда
				ВывестиГруппировку(Запрос,Ном+1);
			КонецЕсли;          
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()                                          

//******************************************************************************
// ЗаполнитьСпискиОпераций()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  В этой процедуры в списки операций прописываются значения кодов операций,
//	движения по которым мы хотели бы показать в отдельных колонках.
//	Операции задаются раздельно по дебету и кредиту
//
Процедура ЗаполнитьСпискиОпераций()

	СписокОперДебет = СоздатьОбъект("СписокЗначений");
	СписокОперКредит= СоздатьОбъект("СписокЗначений");
	Если ПоОперациям = 1 Тогда
		СписокОперДебет.ДобавитьЗначение(глКО.Закупка);
		СписокОперДебет.ДобавитьЗначение(глКО.ДополнительныеРасходы);  
		СписокОперДебет.ДобавитьЗначение(глКО.ПриемНаРеализацию);  
		СписокОперДебет.ДобавитьЗначение(глКО.ВозвратОтПокупателя);  
		СписокОперДебет.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);  
		СписокОперДебет.ДобавитьЗначение(глКО.ВозвратОтРеализатора);  
		СписокОперДебет.ДобавитьЗначение(глКО.Оприходование);  
		СписокОперДебет.ДобавитьЗначение(глКО.Перемещение);  
		СписокОперДебет.ДобавитьЗначение(глКО.Сборка);  
		СписокОперДебет.ДобавитьЗначение(глКО.Разукомплектация);  
		
		СписокОперКредит.ДобавитьЗначение(глКО.Продажа);
		СписокОперКредит.ДобавитьЗначение(глКО.РозничнаяПродажа);
		СписокОперКредит.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
		СписокОперКредит.ДобавитьЗначение(глКО.ВозвратПоставщику);
		СписокОперКредит.ДобавитьЗначение(глКО.ВозвратКомитенту);
		СписокОперКредит.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
		СписокОперКредит.ДобавитьЗначение(глКО.Перемещение);
		СписокОперКредит.ДобавитьЗначение(глКО.Списание);         
		СписокОперКредит.ДобавитьЗначение(глКО.Сборка);  
		СписокОперКредит.ДобавитьЗначение(глКО.Разукомплектация);  
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСпискиОпераций()

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
 
	Если ПроверкаУчетнойПолитики() = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	 
	Таб.ИсходнаяТаблица( "ВедомостьПоПартиямТМЦ" );   

	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	  
	ЗаполнитьСпискиОпераций();
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ВедомостьПоПартиямТМЦ");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);

	Расшифровка.Установить("ВыбСтатусПартии",ВыбСтатусПартии);
	Расшифровка.Установить("ВыбТМЦ",		ВыбТМЦ);
	Расшифровка.Установить("ВыбМОЛ",		ВыбМОЛ);
	Расшифровка.Установить("ВыбПоставщик",	ВыбПоставщик);
	
	Расшифровка.Установить("ПоОперациям", 	ПоОперациям);   
	
	Расшифровка.Установить("ВидЕдиницы",	ВидЕдиницы);
	Расшифровка.Установить("ВидСуммы",		ВидСуммы);
	
	Расшифровка.Установить("Группировки",	Группировки);
	

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ПартииНаличие.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура;
	|МОЛ			= Регистр.ПартииНаличие.МОЛ;
	|Партия			= Регистр.ПартииНаличие.Партия;
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество;";
	
	Если ВидСуммы = 1 Тогда // бух с НДС
		ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб;";
		
	ИначеЕсли ВидСуммы = 2 Тогда // бух без НДС
	    ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаБезНДС;";
	    
	Иначе
		ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаУпр;";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"Функция НачОстС = НачОст(Сумма);
	|Функция ПриходС = Приход(Сумма);
	|Функция РасходС = Расход(Сумма);
	|Функция КонОстС = КонОст(Сумма);";
	ТекстЗапроса = ТекстЗапроса +
	"Функция НачОстК = НачОст(Количество);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество);
	|Функция КонОстК = КонОст(Количество);";

	ТекстЗапроса = ТекстЗапроса +
	"Условие((КодОперации <> глКО.ПередачаВРозницу)или((Док.Вид() <> ""РеализацияРозница"")и(Док.Вид()<>""ОтчетККМ"")));";
    Для СчЦикла=1 по СписокОперДебет.РазмерСписка() Цикл
		НазвОперации = СписокОперДебет.ПолучитьЗначение(СчЦикла).Идентификатор();
		ТекстЗапроса = ТекстЗапроса + РазделительСтрок+
		"Функция "+НазвОперации+"ПриходС = Приход(Сумма) когда (КодОперации = глКО."+НазвОперации+");"+
		"Функция "+НазвОперации+"ПриходК = Приход(Количество) когда (КодОперации = глКО."+НазвОперации+");";
	КонецЦикла;
	Для СчЦикла=1 по СписокОперКредит.РазмерСписка() Цикл
		НазвОперации = СписокОперКредит.ПолучитьЗначение(СчЦикла).Идентификатор();
		ТекстЗапроса = ТекстЗапроса + РазделительСтрок+
		"Функция "+НазвОперации+"РасходС = Расход(Сумма) когда (КодОперации = глКО."+НазвОперации+");"+
		"Функция "+НазвОперации+"РасходК = Расход(Количество) когда (КодОперации = глКО."+НазвОперации+");";
	КонецЦикла;
	
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СтатусПартии",ВыбСтатусПартии,"ВыбСтатусПартии",ТекстЗапроса,Загол);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ",ВыбМОЛ,"ВыбМОЛ",ТекстЗапроса,Загол);                                
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Поставщик",ВыбПоставщик,"ВыбПоставщик",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерГруппировкиПоТМЦ	= 9999; // невозможно большое значение
	
	ПечЗаголовокСтолбца = "";  
	ПечЗаголовок = "Ведомость по партиям ТМЦ (" + ?(ВидСуммы = 3,глДоллары,"" + глРубли + ?(ВидСуммы=1,""," без НДС"))+")";
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;    
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ШапкаТаблицы|Начало");

	// выводим шапку на каждой странице
	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// сформируем шапку, исходя из выбранной формы представления данных
	ВсегоСтрок = СписокОперДебет.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации = СписокОперДебет.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		Если (Запрос.ПолучитьАтрибут(НазвОперации+"ПриходК")=0) и 
			 (Запрос.ПолучитьАтрибут(НазвОперации+"ПриходС")=0) Тогда
			// уберем лишние горизонтальные группировки (по которым нет итогов)
			СписокОперДебет.УдалитьЗначение(ВсегоСтрок - СчЦикла + 1);
		Иначе
			НазвОперации = СписокОперДебет.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1);
			Таб.ПрисоединитьСекцию("ШапкаТаблицы|Приход");
		КонецЕсли;
	КонецЦикла;                                                                 
	НазвОперации = ?(ПоОперациям=1,"Приход - прочее","Приход");
	Таб.ПрисоединитьСекцию("ШапкаТаблицы|Приход");
	
	ВсегоСтрок = СписокОперКредит.РазмерСписка();
	Для СчЦикла=1 по ВсегоСтрок Цикл
		НазвОперации = СписокОперКредит.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1).Идентификатор();
		Если (Запрос.ПолучитьАтрибут(НазвОперации+"РасходК")=0) И
			 (Запрос.ПолучитьАтрибут(НазвОперации+"РасходС")=0) Тогда             
			// уберем лишние горизонтальные группировки (по которым нет итогов)
			СписокОперКредит.УдалитьЗначение(ВсегоСтрок - СчЦикла + 1);
		Иначе
			НазвОперации = СписокОперКредит.ПолучитьЗначение(ВсегоСтрок - СчЦикла + 1);
			Таб.ПрисоединитьСекцию("ШапкаТаблицы|Расход");
		КонецЕсли;
	КонецЦикла;
	НазвОперации = ?(ПоОперациям=1,"Расход - прочее","Расход");
	Таб.ПрисоединитьСекцию("ШапкаТаблицы|Расход");
	
	Таб.ПрисоединитьСекцию("ШапкаТаблицы|КонечныйОстаток");
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 3, "ВедомостьПоПартиямТМЦ", "ВедомостьПоПартиямТМЦ");
	
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировку(Запрос,1);
	
	Таб.ОбластьПечати(3,,,);
	
	// Заполнение полей "Итого"
	ПечатьСтроки(Запрос,0,"Итого","","");
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);    
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;
	Таб.Показать("Ведомость по партиям ТМЦ", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", 	"Номенклатура",  "По номенклатуре");          
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Поставщик",  "По поставщикам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Поставщик",  "По свойствам поставщиков");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");

	Если ФлагВосстановленияНастройки = 0 Тогда
		
		ВидЕдиницы     = 1;
		ВидСуммы       = 2;
		ВидРазделителя = 1;
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;  
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");

		ВыбСтатусПартии = глРасшифровка.Получить("ВыбСтатусПартии");
		ВыбТМЦ 			= глРасшифровка.Получить("ВыбТМЦ");
		ВыбМОЛ 			= глРасшифровка.Получить("ВыбМОЛ");
		ВыбПоставщик	= глРасшифровка.Получить("ВыбПоставщик");
		                                 
		ВидЕдиницы		= глРасшифровка.Получить("ВидЕдиницы");
		ВидСуммы		= глРасшифровка.Получить("ВидСуммы");
		
		ПоОперациям 	= глРасшифровка.Получить("ПоОперациям");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;

		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ДатаКонца = ПолучитьДатуТА();

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

Группировки.ДобавитьЗначение("Фирма",         "Фирма");
Группировки.ДобавитьЗначение("СтатусПартии",  "Статус партии");
Группировки.ДобавитьЗначение("МОЛ",           "МОЛ");
Группировки.ДобавитьЗначение("Поставщик",     "Поставщик");
Группировки.ДобавитьЗначение("Номенклатура",  "Номенклатура");
Группировки.ДобавитьЗначение("СвойствоПартии","Свойство партии");
Группировки.ДобавитьЗначение("Партия",        "Партия");
Группировки.ДобавитьЗначение("Документ",      "Документы движения");

Группировки.Пометка(1, 1);
Группировки.Пометка(3, 1);
Группировки.Пометка(5, 1);
