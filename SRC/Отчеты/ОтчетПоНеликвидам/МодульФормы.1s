////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//                                                                           
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;  
Перем НомерГруппировкиПоСкладу; 
Перем ТЗ;  
Перем СписокСортировки, ПоказатьКомиссию, Группировки, ВидЕдиницы, ПоГруппам;

Процедура ВывестиГруппировку(Запрос,Ном) Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                           
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	//Форма.ПоГруппам.Доступность(?(ВидЕдиницы=1,0,1));
	ПоГруппам = ?(ВидЕдиницы=1,0,ПоГруппам); // если основная ед., то запретим
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************                                                    
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)  
	
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;           
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	ТекСтр = Группировки.ТекущаяСтрока();
	ПослСдвигСтр = Группировки.РазмерСписка() - 1;
	Если ТекСтр <= ПослСдвигСтр Тогда
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
			Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
		КонецЕсли;
	Иначе
		Предупреждение("Группировка ""По документам движения"" всегда находится
		               |в конце списка и не перемещается.",60);
	КонецЕсли;
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//       
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	НомерГруппировкиПоТМЦ = 9999; // невозможно большое значение
	НомерГруппировкиПоСкладу = 9999; // невозможно большое значение
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп      = Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			Если (ТекстГрупп = "Номенклатура") 
			и    (ПоГруппам  = 0) 
			Тогда            
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;    
			Если ПоказатьКомиссию = 1 Тогда
				ТЗ.НоваяКолонка(ТекстГрупп);
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);      
			Если (ТекстГрупп <> "Склад") или (ПоказатьКомиссию = 0) Тогда
				Если ПустоеЗначение(СписокСортировки) = 1 Тогда
					СписокСортировки= ТекстГрупп;
				Иначе
					СписокСортировки= СписокСортировки + ", " + ТекстГрупп;
				КонецЕсли;
			КонецЕсли;
			Если ТекстГрупп = "Номенклатура" Тогда
				НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			ИначеЕсли ТекстГрупп = "Склад" Тогда
				НомерГруппировкиПоСкладу = СписокГруппировок.РазмерСписка();   
				Если ПоказатьКомиссию = 1 Тогда
					ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка Комиссионер без групп;";
					ТЗ.НоваяКолонка("Комиссионер");         
					Если ПустоеЗначение(СписокСортировки) = 1 Тогда
						СписокСортировки= "СкладКомиссионер";
					Иначе
						СписокСортировки= СписокСортировки + ", " + "СкладКомиссионер";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьГруппировкиЗапроса()

//******************************************************************************
// ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                                
Процедура ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "")
	
	ВыводитьКомиссионеров = ?(Ном > НомерГруппировкиПоСкладу, ПоказатьКомиссию, 0);

	ПечЕд = "";ПечПроизводитель = ""; ПечАртикул = "";
	Если (Ном >= НомерГруппировкиПоТМЦ + ВыводитьКомиссионеров) Тогда

		// Не надо завышать обороты за счет внутренних перемещений, если нет детализации по складу  
		Если (Запрос.КоличествоПриходВнутр = Запрос.КоличествоРасходВнутр) 
			и (НомерГруппировкиПоСкладу > Ном) и (ВыбСклад.Выбран() = 0) Тогда
			Дельта = Запрос.КоличествоПриходВнутр;
		Иначе
		    Дельта = 0;
		КонецЕсли; 
			
		Если Запрос.КоличествоПриходПереоц = Запрос.КоличествоРасходПереоц Тогда
			Дельта = Дельта + Запрос.КоличествоПриходПереоц;
		КонецЕсли; 
		
		Номенклатура = Запрос.Номенклатура;  
		Группа = 0;
		Если ПустоеЗначение(Номенклатура) = 0 Тогда
			Если ТипЗначенияСтр(Номенклатура) = "Справочник" Тогда
				Если Номенклатура.ЭтоГруппа() = 1 Тогда
					Группа = 1;                                
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	
		Если Группа = 0 Тогда                       
			Если ПустоеЗначение(Номенклатура) = 0 Тогда
				ПечЕд 	= ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);
				Печпроизводитель 	= Запрос.Номенклатура.Производитель;
				ПечАртикул			= Запрос.Номенклатура.Артикул;
			КонецЕсли;
			
			ПечНачОст = глФРМКоличество(Запрос.КоличествоНачОст,ПечЕд);
		
		
			ПечПриход = глФРМКоличество(Запрос.КоличествоПриход - Дельта,ПечЕд);
			ПечРасход = глФРМКоличество(Запрос.КоличествоРасход - Дельта,ПечЕд);
			ПечКонОст = глФРМКоличество(Запрос.КоличествоКонОст,ПечЕд);		
			ПечКонОстР= глФРМКоличество(Запрос.РезервКонОст,    ПечЕд);
		Иначе                
			// если не в базовых единицах, то не имеет смысла количество
			Если ПоГруппам = 1 Тогда
				ПечНачОст = глФРМКоличество(Запрос.КоличествоНачОст,"");
				ПечПриход = глФРМКоличество(Запрос.КоличествоПриход - Дельта,"");
				ПечРасход = глФРМКоличество(Запрос.КоличествоРасход - Дельта,"");
				ПечКонОст = глФРМКоличество(Запрос.КоличествоКонОст,"");		
				ПечКонОстР= глФРМКоличество(Запрос.РезервКонОст,    "");
			Иначе     
				ПечНачОст = "";
				ПечПриход = "";
				ПечРасход = "";
				ПечКонОст = "";
				ПечКонОстР= "";
			КонецЕсли;
		КонецЕсли;   
		Секц = Таб.ПолучитьСекцию(НазваниеСекции);
	Иначе               
		Секц = Таб.ПолучитьСекцию(НазваниеСекции);
		Секц.Область(1,1,1,7).Объединить();
	КонецЕсли;
		              
	Таб.ВывестиСекцию(Секц);
	глОживить(1);
	
КонецПроцедуры //ПечатьСтроки()

//******************************************************************************
// ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "",ТекОстК,ТекОстР)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки                                  
//	ТекРасшифровка - расшифровка текущей строки                                              
//	ТекОстК - текущий остаток (количество)
//	ТекОстР - текущий остаток (резерв)
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                                
Процедура ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "",ТекОстК,ТекОстР)
	
	ПечЕд = ""; Печпроизводитель = ""; ПечАртикул = "";
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		ПечЕд 	= ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);
		Печпроизводитель 	= Запрос.Номенклатура.Производитель;
		ПечАртикул			= Запрос.Номенклатура.Артикул;
                            
		Если ПоказатьКомиссию = 0 Тогда
			ТекОстК   = ТекОстК + Запрос.КоличествоПриход - Запрос.КоличествоРасход;
			ТекОстР   = ТекОстР + Запрос.РезервПриход     - Запрос.РезервРасход;
		КонецЕсли;
		
		// Не надо завышать обороты за счет внутренних перемещений, если нет детализации по складу  
		Если (Запрос.КоличествоПриходВнутр = Запрос.КоличествоРасходВнутр) 
			и (НомерГруппировкиПоСкладу > Ном) и (ВыбСклад.Выбран() = 0) Тогда
			Дельта = Запрос.КоличествоПриходВнутр;
		Иначе
		    Дельта = 0;
		КонецЕсли; 
		
		Если Запрос.КоличествоПриходПереоц = Запрос.КоличествоРасходПереоц Тогда
			Дельта = Дельта + Запрос.КоличествоПриходПереоц;
		КонецЕсли; 
			
		ПечПриход = глФРМКоличество(Запрос.КоличествоПриход-Дельта,ПечЕд);
		ПечРасход = глФРМКоличество(Запрос.КоличествоРасход-Дельта,ПечЕд);
		ПечКонОст = глФРМКоличество(ТекОстК,ПечЕд);		
		ПечКонОстР = глФРМКоличество(ТекОстР,ПечЕд);
		
		Секц = Таб.ПолучитьСекцию(НазваниеСекции);
	Иначе                                         
		Секц = Таб.ПолучитьСекцию(НазваниеСекции);
		Секц.Область(1,1,1,7).Объединить();
	КонецЕсли;
		
	Таб.ВывестиСекцию(Секц);
	глОживить(1);
	
КонецПроцедуры //ПечатьСтрокиДокумента()

//******************************************************************************
// ВывестиГруппировку(Запрос,Ном)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном)
	
	ВыводитьКомиссионеров = ?(НомерГруппировкиПоСкладу = 9999, 0, ПоказатьКомиссию);
	  
	Если Ном  <= КоличествоГруппировок + ВыводитьКомиссионеров Тогда
		
		Если (ПоказатьКомиссию = 1) и (Ном > НомерГруппировкиПоСкладу) Тогда
			Если Ном = (НомерГруппировкиПоСкладу + 1) Тогда
				НазваниеГруппировки = "Комиссионер";
			Иначе
				НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном-1);
			КонецЕсли;
		Иначе
			НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		КонецЕсли;
		           
		
		Если НазваниеГруппировки = "Документ" Тогда
			ТекОстК = Запрос.КоличествоНачОст;
			ТекОстР = Запрос.РезервНачОст;
		КонецЕсли;      
		
		Пока Запрос.Группировка(Ном) = 1 Цикл
			
			Если НазваниеГруппировки = "Номенклатура" Тогда
				Если ((Запрос.КоличествоНачОст <= 0) и (Запрос.КоличествоПриход <= 0)) 
				или (Запрос.КоличествоРасход <> 0) Тогда
					Продолжить;	
				КонецЕсли;		                               
			КонецЕсли;
			
			Если НазваниеГруппировки = "Документ" Тогда
				НазваниеСекции="Документ";               
				
				// Внутренние перемещения выводятся только в том случае, если установлена детализация или фильтр по складу
				Если (Запрос.Документ.Вид() = "ПеремещениеТМЦ") и (НомерГруппировкиПоСкладу = 9999) и (ВыбСклад.Выбран() = 0) Тогда
					Продолжить;
				КонецЕсли;                                         
				
			ИначеЕсли Запрос.ЭтоГруппа(НазваниеГруппировки) = 1 Тогда
				Если (ПоказатьКомиссию = 1) и (Ном > НомерГруппировкиПоСкладу) Тогда
					НомНазв = Ном - 1;
				Иначе 
					НомНазв = Ном;
				КонецЕсли;
				НазваниеСекции="Строка"+СокрЛП(НомНазв)+"Г";
			Иначе
				Если (ПоказатьКомиссию = 1) и (Ном > НомерГруппировкиПоСкладу) Тогда
					НомНазв = Ном - 1;
				Иначе 
					НомНазв = Ном;
				КонецЕсли;
				НазваниеСекции="Строка"+НомНазв;
			КонецЕсли;   
	
			Если Ном = НомерГруппировкиПоСкладу Тогда
				Если ПоказатьКомиссию = 1 Тогда
					Если ПустоеЗначение(Запрос.Склад) = 1 Тогда          
						ВывестиГруппировку(Запрос, Ном+1);
						Продолжить;                      
					ИначеЕсли Запрос.Склад.Вид() <> "Склады" Тогда          
						ВывестиГруппировку(Запрос, Ном+1);
						Продолжить;                      
					КонецЕсли;                           
				КонецЕсли;
			КонецЕсли;
			                                                          
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			ТекРасшифровка = ПечТекстСтроки;
			Если НазваниеГруппировки = "Документ" Тогда
				ПечТекстСтроки = ""+глПредставлениеДокумента(ПечТекстСтроки) + " (" +
				                    СокрЛП(глИнформацияПоДокументуВЖурнале(ПечТекстСтроки)) + ")";
			КонецЕсли;
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки),ПечТекстСтроки);
		
		    Если ПоказатьКомиссию = 1 Тогда
				// Накладные на перемещение отсюда сюда же печатать не будем
				Если (Запрос.Внутреннее = 0) 
				 или (Запрос.КоличествоПриход <> Запрос.КоличествоРасход) или (НазваниеГруппировки <> "Документ") Тогда  
				 	ТЗ.НоваяСтрока();        
				 	ТЗ.КоличествоНачОст 	  = Запрос.КоличествоНачОст;
				 	ТЗ.КоличествоКонОст 	  = Запрос.КоличествоКонОст;
				 	ТЗ.РезервКонОст			  = Запрос.РезервКонОст;
				 	ТЗ.КоличествоПриход 	  = Запрос.КоличествоПриход;
				 	ТЗ.КоличествоРасход 	  = Запрос.КоличествоРасход;
				 	ТЗ.РезервПриход		 	  = Запрос.РезервПриход;
				 	ТЗ.РезервРасход 		  = Запрос.РезервРасход;
				 	ТЗ.КоличествоПриходВнутр  = Запрос.КоличествоПриходВнутр;
				 	ТЗ.КоличествоРасходВнутр  = Запрос.КоличествоРасходВнутр;
				 	ТЗ.КоличествоПриходПереоц = Запрос.КоличествоПриходПереоц;
				 	ТЗ.КоличествоРасходПереоц = Запрос.КоличествоРасходПереоц; 
				 	ТЗ.Ном					  =	Ном;
				 	ТЗ.ПечТекстСтроки 		  = ПечТекстСтроки;
				 	ТЗ.НазваниеСекции = НазваниеСекции;
				 	ТЗ.ТекРасшифровка = ТекРасшифровка;
			 		НомСтроки = ТЗ.НомерСтроки; 
			 		к = 1;
				 	Пока к <= Ном Цикл        
				 		Если (ВыводитьКомиссионеров = 0) или (к <= НомерГруппировкиПоСкладу) Тогда
				 			НазвГруппировки = СписокГруппировок.ПолучитьЗначение(к);
				 		ИначеЕсли к = (НомерГруппировкиПоСкладу + 1) Тогда
				 			НазвГруппировки = "Комиссионер";
				 		Иначе
				 			НазвГруппировки = СписокГруппировок.ПолучитьЗначение(к-1);
				 		КонецЕсли;     
					 	ТЗ.УстановитьЗначение(НомСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
					 	к = к + 1;                                             
					 	Если ПоказатьКомиссию = 1 Тогда
					 		Если ПустоеЗначение(Запрос.Склад) = 1 Тогда
					 			ТЗ.СкладКомиссионер = Запрос.Комиссионер;
					 		Иначе
					 			ТЗ.СкладКомиссионер = Запрос.Склад;
					 		КонецЕсли;
					 	КонецЕсли;  
					 КонецЦикла;
				КонецЕсли;
			Иначе
				Если НазваниеГруппировки = "Документ" Тогда
					Если (Запрос.Внутреннее = 0) 
					 или (Запрос.КоличествоПриход <> Запрос.КоличествоРасход) Тогда  
						ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка,ТекОстК,ТекОстР);   
					КонецЕсли;
				Иначе
					ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка);
				КонецЕсли;
			КонецЕсли;                                  
			
			Если (ПоказатьКомиссию = 1) и (Ном = НомерГруппировкиПоСкладу) Тогда 
				Пока Запрос.Группировка("Комиссионер") = 1 Цикл
					Если КоличествоГруппировок + ВыводитьКомиссионеров > Ном+1 Тогда
						ВывестиГруппировку(Запрос,Ном+2);
					КонецЕсли;          
				КонецЦикла;
			Иначе
				// если есть более детальная группировка - выведем ее
				Если КоличествоГруппировок + ВыводитьКомиссионеров > Ном Тогда
					ВывестиГруппировку(Запрос,Ном+1);
				КонецЕсли;          
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()                                          

//******************************************************************************
// ТекстЗапросаСКомиссией()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текст запроса
//
// Описание:
//  Формирует текст запроса, для остатков с комиссионерами.
//
Функция ТекстЗапросаСКомиссией()
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ОстаткиТМЦ.Фирма,             
	|                 Регистр.РезервыТМЦ.Фирма,
	|                 Регистр.ПартииОтданные.Фирма;
	|Док			= Регистр.ОстаткиТМЦ.ТекущийДокумент,             
	|                 Регистр.РезервыТМЦ.ТекущийДокумент,
	|                 Регистр.ПартииОтданные.ТекущийДокумент;
	|УпрАналитика 	= Регистр.ОстаткиТМЦ.Фирма.УпрАналитика,
	|                 Регистр.РезервыТМЦ.Фирма.УпрАналитика,
	|                 Регистр.ПартииОтданные.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ОстаткиТМЦ.Фирма.ЮрЛицо,      
	|                 Регистр.РезервыТМЦ.Фирма.ЮрЛицо,
	|                 Регистр.ПартииОтданные.Фирма.ЮрЛицо;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура,      
	|                 Регистр.РезервыТМЦ.Номенклатура,
	|                 Регистр.ПартииОтданные.Номенклатура;
	|СвойствоТМЦ 	= Регистр.ОстаткиТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства,
	|                 Регистр.РезервыТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства,
	|                 Регистр.ПартииОтданные.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;
	|Склад			= Регистр.ОстаткиТМЦ.Склад,             
	|                 Регистр.РезервыТМЦ.Склад,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|МОЛ_Комиссионер= Регистр.ОстаткиТМЦ.Склад.МОЛ,             
	|                 Регистр.РезервыТМЦ.Склад.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Комиссионер    = Регистр.ПартииОтданные.Договор.Владелец;
	|Внутреннее     = Регистр.ОстаткиТМЦ.Внутреннее;";
    
	ТекстЗапроса = ТекстЗапроса +
	"Количество = Регистр.ОстаткиТМЦ.Количество,
	|             Регистр.ПартииОтданные.Количество;
	|Резерв     = Регистр.РезервыТМЦ.Количество;
	|Функция КоличествоНачОст      	= НачОст(Количество);
	|Функция КоличествоПриход      	= Приход(Количество);
	|Функция КоличествоРасход     	= Расход(Количество);
	|Функция КоличествоПриходВнутр  = Приход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	|Функция КоличествоРасходВнутр 	= Расход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	|Функция КоличествоПриходПереоц = Приход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	|Функция КоличествоРасходПереоц = Расход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	|Функция КоличествоКонОст      	= КонОст(Количество);
	|Функция РезервНачОст          	= НачОст(Резерв);
	|Функция РезервПриход          	= Приход(Резерв);
	|Функция РезервРасход          	= Расход(Резерв);
	|Функция РезервКонОст          	= КонОст(Резерв);";
	               
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаСКомиссией()

//******************************************************************************
// ТекстЗапросаБезКомиссии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текст запроса
//
// Описание:
//  Формирует текст запроса, для остатков без комиссионеров.
//
Функция ТекстЗапросаБезКомиссии()
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ОстаткиТМЦ.Фирма,
	|                 Регистр.РезервыТМЦ.Фирма;
	|Док 			= Регистр.ОстаткиТМЦ.ТекущийДокумент,             
	|                 Регистр.РезервыТМЦ.ТекущийДокумент;
	|УпрАналитика 	= Регистр.ОстаткиТМЦ.Фирма.УпрАналитика,
	|                 Регистр.РезервыТМЦ.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ОстаткиТМЦ.Фирма.ЮрЛицо,
	|                 Регистр.РезервыТМЦ.Фирма.ЮрЛицо;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура,
	|                 Регистр.РезервыТМЦ.Номенклатура;
	|СвойствоТМЦ 	= Регистр.ОстаткиТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства,
	|                 Регистр.РезервыТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;
	|Склад			= Регистр.ОстаткиТМЦ.Склад,             
	|                 Регистр.РезервыТМЦ.Склад;
	|МОЛ_Комиссионер= Регистр.ОстаткиТМЦ.Склад.МОЛ,             
	|                 Регистр.РезервыТМЦ.Склад.МОЛ;
	|Внутреннее     = Регистр.ОстаткиТМЦ.Внутреннее;";
	
	ТекстЗапроса = ТекстЗапроса +
	"Количество = Регистр.ОстаткиТМЦ.Количество;
	|Резерв     = Регистр.РезервыТМЦ.Количество;
	|Функция КоличествоНачОст      	= НачОст(Количество);
	|Функция КоличествоПриход      	= Приход(Количество);
	|Функция КоличествоРасход      	= Расход(Количество);
	|Функция КоличествоПриходВнутр  = Приход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	|Функция КоличествоРасходВнутр 	= Расход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	|Функция КоличествоПриходПереоц	= Приход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	|Функция КоличествоРасходПереоц	= Расход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	|Функция КоличествоКонОст  		= КонОст(Количество);
	|Функция РезервНачОст      	    = НачОст(Резерв);
	|Функция РезервПриход       	= Приход(Резерв);
	|Функция РезервРасход          	= Расход(Резерв);
	|Функция РезервКонОст          	= КонОст(Резерв);";
	               
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаБезКомиссии()

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли; 
	                        
	Таб.ИсходнаяТаблица( "ВедомостьПоОстаткамТМЦ" );

	Если ПоказатьКомиссию = 1 Тогда
		ТЗ = СоздатьОбъект("ТаблицаЗначений");   
		ТЗ.НоваяКолонка("ПечТекстСтроки");
		ТЗ.НоваяКолонка("СкладКомиссионер");
		ТЗ.НоваяКолонка("Ном", "Число");
		ТЗ.НоваяКолонка("КоличествоПриход");
		ТЗ.НоваяКолонка("КоличествоРасход");
		ТЗ.НоваяКолонка("РезервПриход");
		ТЗ.НоваяКолонка("РезервРасход");
		ТЗ.НоваяКолонка("КоличествоНачОст");
		ТЗ.НоваяКолонка("КоличествоКонОст");
		ТЗ.НоваяКолонка("КоличествоПриходВнутр");
		ТЗ.НоваяКолонка("КоличествоРасходВнутр");
		ТЗ.НоваяКолонка("КоличествоПриходПереоц");
		ТЗ.НоваяКолонка("КоличествоРасходПереоц");
		
		ТЗ.НоваяКолонка("РезервНачОст");
		ТЗ.НоваяКолонка("РезервКонОст");
	 	ТЗ.НоваяКолонка("НазваниеСекции");
		ТЗ.НоваяКолонка("ТекРасшифровка");
		               
	   	ГруппКолонки = "ПечТекстСтроки, СкладКомиссионер, Ном, ТекРасшифровка, НазваниеСекции";
		СуммКолонки  = "КоличествоПриход, КоличествоРасход, РезервПриход, РезервРасход, КоличествоНачОст, КоличествоКонОст, " +
		"КоличествоПриходВнутр, КоличествоРасходВнутр, КоличествоПриходПереоц, КоличествоРасходПереоц, " +
		"РезервНачОст, РезервКонОст"; 
	КонецЕсли;

	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоНеликвидам");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);
	
	Расшифровка.Установить("ВыбТМЦ",		ВыбТМЦ);
	Расшифровка.Установить("ВыбСклад",		ВыбСклад);
	Расшифровка.Установить("ПоказатьКомиссию",ПоказатьКомиссию);
	
	Расшифровка.Установить("ВидЕдиницы",	ВидЕдиницы);
	Расшифровка.Установить("ПоГруппам",		ПоГруппам);
	
	Расшифровка.Установить("Группировки",	Группировки);
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	Если  ПоказатьКомиссию = 1 Тогда
		ТекстЗапроса = ТекстЗапросаСКомиссией();
	Иначе
		ТекстЗапроса = ТекстЗапросаБезКомиссии();
	КонецЕсли;
	
	Загол="";
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Склад",ВыбСклад,"ВыбСклад",ТекстЗапроса,Загол);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",,,ТекстЗапроса,Загол);
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	 
	ПечЗаголовок = "Отчет по неликвидным ТМЦ на складах";
	Если  ПоказатьКомиссию = 1 Тогда
	    ПечЗаголовок = ПечЗаголовок + " и у комиссионеров";
	КонецЕсли;
	
	ПечЗаголовокСтолбца = "";   
	
	СписокСортировки = "";
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	                
	Если НомерГруппировкиПоТМЦ = 9999 Тогда
		Предупреждение("Группировка по номенклатуре должна быть обязательно установлена!",60);
		Возврат;
	КонецЕсли; 
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;
	       
	
	// Если ошибка в запросе, то выход из процедуры  
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;           
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ШапкаТаблицы");

	// выводим шапку на каждой странице
	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "ОтчетПоНеликвидам", "ОтчетПоНеликвидам");
	
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировку(Запрос,1);
	
	Если ПоказатьКомиссию = 1 Тогда
		ТЗ.ВыбратьСтроки(); 	
		ТЗ.Сортировать(СписокСортировки, 1);                                    
		ВыводитьКомиссионеров = ?(НомерГруппировкиПоСкладу = 9999, 0, ПоказатьКомиссию);
		КолонкиДляГруппировки = СписокСортировки + ", " + ?(ВыводитьКомиссионеров = 1, "Комиссионер, ", "") + ГруппКолонки;
		ТЗ.Свернуть(КолонкиДляГруппировки, СуммКолонки);
		ТекОстК = 0;
		ТекОстР = 0;  
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл                                                                                    
			Если ПустоеЗначение(ТЗ.НазваниеСекции) = 1 Тогда
				Продолжить;
			КонецЕсли;               
			Если ТЗ.НазваниеСекции = "Документ" Тогда
				ТекОстК = ТекОстК + ТЗ.КоличествоПриход - ТЗ.КоличествоРасход;
				ТекОстР = ТекОстР + ТЗ.РезервПриход - ТЗ.РезервРасход;
				ПечатьСтрокиДокумента(ТЗ, ТЗ.Ном, ТЗ.НазваниеСекции, ТЗ.ПечТекстСтроки, ТЗ.ТекРасшифровка, ТекОстК, ТекОстР);
			Иначе                    
				ТекОстК = ТЗ.КоличествоНачОст;
				ТекОстР = ТЗ.РезервНачОст;
				ПечатьСтроки(ТЗ, ТЗ.Ном, ТЗ.НазваниеСекции, ТЗ.ПечТекстСтроки, ТЗ.ТекРасшифровка);
			КонецЕсли;                                                                                                       
			глОживить(1);
		КонецЦикла; 
	КонецЕсли;
	
	// Заполнение полей "Итого"
	ПечатьСтроки(Запрос,0,"Итого","");    
	
	
	Таб.ОбластьПечати(3);
		
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1); 
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;
	Таб.Показать("Отчет по неликвидам", "");   
	       
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", "Номенклатура",  "По номенклатуре");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Склады", "Склад",  "По складам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ФизЛица", "МОЛ_Комиссионер",  "По МОЛам");
	
	Если ФлагВосстановленияНастройки = 0 Тогда
		
		ВидРазделителя 	= 1;
		ВидЕдиницы 		= 1;
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");
		
		ВыбТМЦ 			= глРасшифровка.Получить("ВыбТМЦ");
		ВыбСклад		= глРасшифровка.Получить("ВыбСклад");
		ПоказатьКомиссию= глРасшифровка.Получить("ПоказатьКомиссию");
		
		ВидЕдиницы		= глРасшифровка.Получить("ВидЕдиницы");
		ПоГруппам		= глРасшифровка.Получить("ПоГруппам");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
        
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      
                               
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	           
	ПоказатьКомиссию = 0;
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()
                                                          
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//                                     

ДатаКонца = ПолучитьДатуТА();

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);
      
Группировки = СоздатьОбъект("СписокЗначений");

//Группировки.ДобавитьЗначение("Фирма", 			"Фирма");
Группировки.ДобавитьЗначение("Склад", 			"Склад");
//Группировки.ДобавитьЗначение("СвойствоТМЦ", 	"Свойство номенклатуры");
Группировки.ДобавитьЗначение("Номенклатура", 	"Номенклатура");
//Группировки.ДобавитьЗначение("Документ", 		"Документы движения");

Группировки.Пометка(1, 1);
Группировки.Пометка(2, 1);
