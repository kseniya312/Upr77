////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//   
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ 

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 
                        
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;
 
Функция ПолучитьРасходнуюБезнал(СчетБН) Далее 
Функция ПолучитьОплаченныеИзПрошлогоПериода(СписокДокументов = "") Далее
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ    
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

Функция ПолучитьОплаченныеИзТекущегоПериода(СписокДокументов = "")
	Если СписокДокументов = "" Тогда
		СписокДокументов	= СоздатьОбъект("СписокЗначений");
	КонецЕсли; 
	//СписокДокументов.ДобавитьЗначение(0);
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|ДокументРасчета	= Регистр.Взаиморасчеты2.ДокументРасчета, Регистр.ПривязкаОплаты.ДокументРасчета;
	|ТекущийДокумент	= Регистр.Взаиморасчеты2.ТекущийДокумент, Регистр.ПривязкаОплаты.ТекущийДокумент;
    |Долг	     		= Регистр.Взаиморасчеты2.Долг;
	|СуммаПривязки 		= Регистр.ПривязкаОплаты.Сумма;
	|Функция НачОстДолг 			= НачОст(Долг);
	|Функция КонОстДолг 			= КонОст(Долг); 
	|Функция ПриходДолг 			= Приход(Долг);
	|Функция ПриходСуммаПривязки 	= Приход(СуммаПривязки);
	|Функция РасходДолг 			= Расход(Долг);
	|Группировка ДокументРасчета;                  
	|Группировка ТекущийДокумент;";
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
			Если //(Запрос.НачОстДолг = 0)
			(Запрос.КонОстДолг - Запрос.ПриходСуммаПривязки <= 0 ) 
			и (Запрос.ПриходДолг <> 0)
			//и (Запрос.РасходДолг <> 0) 
			Тогда
				Пока Запрос.Группировка(2) = 1 Цикл 
					//Если (Запрос.ТекущийДокумент.Вид() = "ВозвратОтПокупателя") 
					//или (Запрос.ТекущийДокумент.Вид() = "ВозвратОтПокупателя_Розница") Тогда
					//	Продолжить;
					//КонецЕсли;
					Если Запрос.ТекущийДокумент.Вид() = "Реализация" Тогда         
						СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
						Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование) = 0 Тогда
							Если Запрос.ТекущийДокумент.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда  
								СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент());
							КонецЕсли;
						//Иначе
						//	СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
						КонецЕсли;	
					ИначеЕсли Запрос.ТекущийДокумент.Вид() = "ВозвратДолгов_Розница" Тогда 	
						СписокДокументов.ДобавитьЗначение(Запрос.ДокументРасчета.ТекущийДокумент());
					ИначеЕсли Запрос.ТекущийДокумент.Вид() = "ПривязкаОплатыРозница" Тогда	
						Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование) = 0 Тогда
							Если Запрос.ТекущийДокумент.ДокОснование.Вид() = "СчетБнРозница" Тогда
								ДокументПродажи = ПолучитьРасходнуюБезнал(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент()); 
								Если ДокументПродажи = 0 Тогда
									СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
								Иначе	
									СписокДокументов.ДобавитьЗначение(ДокументПродажи.ТекущийДокумент()); 
								КонецЕсли; 
							КонецЕсли; 
						КонецЕсли;	
					Иначе
						СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
					КонецЕсли;	
				КонецЦикла;  
			Иначе
				Пока Запрос.Группировка(2) = 1 Цикл 
					Если Запрос.ТекущийДокумент.Вид() = "РасходнаяНакладнаяРозница" Тогда  
						ВсегоОплатить	= Запрос.ТекущийДокумент.Итог("Сумма")+?(Запрос.ТекущийДокумент.СуммаВклНП=1,0,Запрос.ТекущийДокумент.Итог("СуммаНП"))+?(Запрос.ТекущийДокумент.СуммаВклНДС=1,0,Запрос.ТекущийДокумент.Итог("СуммаНДС"))-Запрос.ТекущийДокумент.Залог;
						Если (ВсегоОплатить >= Запрос.ТекущийДокумент.Оплачено) Тогда
							СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент);
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;   
		
	КонецЦикла;
	
	Возврат СписокДокументов;
КонецФункции 

Функция ПолучитьРасходнуюБезнал(СчетБН)
	Если СчетБН.Вид() = "СчетБнРозница" Тогда
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,СчетБН);
		Пока ДокПодч.ПолучитьДокумент()=1 Цикл
			Если (ДокПодч.Вид() = "РасходнаяНакладнаяРозницаБезнал") и (ДокПодч.Проведен() = 1) Тогда 
				Возврат ДокПодч.ТекущийДокумент();
			КонецЕсли;	
		КонецЦикла;	
	Иначе
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,СчетБН);
		Пока ДокПодч.ПолучитьДокумент()=1 Цикл
			Если ДокПодч.Вид() = "СчетБнРозница" Тогда 
				Возврат ПолучитьРасходнуюБезнал(ДокПодч);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	Возврат 0;
КонецФункции	
       
Функция ПолучитьПолучилиДокументыВПериоде(СписокДокументов = "") 
	Если СписокДокументов = "" Тогда
		СписокДокументов	= СоздатьОбъект("СписокЗначений");
	КонецЕсли;	        
	
	мДатаНач = Дата("01.01.2015");
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)          
	|Период с мДатаНач по ДатаНачала; 
	|ОбрабатыватьДокументы Проведенные;
	|ДокументРасчета	= Документ.Реализация.ТекущийДокумент; 
	|ДатаДокум			= Документ.Реализация.ТекущийДокумент.ДатаДок; 
	|ЕстьДокументы		= Документ.Реализация.ЕстьДокументы;
    |ХронПоз 			= Документ.Реализация.ХроноПозицияЕстьДокументы;
	|Группировка ДокументРасчета;
	|Условие(ЕстьДокументы = 1);
	|Условие((ХронПоз >= ХронПозНачала) и (ХронПоз <= ХронПозОкончания));
	//|Условие((ДатаДокум < ДатаНачала));
	|";
	                               
	ХронПозНачала 		= глХроноПозиция(ДатаНачала,"00:00:00");
	ХронПозОкончания 	= глХроноПозиция(ДатаКонца,"23:59:59"); 
			
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	     
	мСписокДокументов = СоздатьОбъект("СписокЗначений");
	
	Если (ПустоеЗначение(СписокДокументов) = 1) Тогда
		мСписокДокументов = ПолучитьОплаченныеИзТекущегоПериода(мСписокДокументов);
		мСписокДокументов = ПолучитьОплаченныеИзПрошлогоПериода(мСписокДокументов);
	Иначе
		СписокДокументов.Выгрузить(мСписокДокументов);
	КонецЕсли;
	
	СписокПолученных = СоздатьОбъект("СписокЗначений");
	
	Пока Запрос.Группировка(1) = 1 Цикл  
		Если мСписокДокументов.НайтиЗначение(Запрос.ДокументРасчета.ТекущийДокумент()) = 0 Тогда
			Если ПустоеЗначение(Запрос.ДокументРасчета.ДокОснование) = 0 Тогда
				Если Запрос.ДокументРасчета.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда  
					СписокДокументов.ДобавитьЗначение(Запрос.ДокументРасчета.ДокОснование.ТекущийДокумент());
				КонецЕсли;
			Иначе
				СписокДокументов.ДобавитьЗначение(Запрос.ДокументРасчета.ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
		        
	Возврат СписокДокументов;
КонецФункции

Функция ПолучитьОплаченныеИзПрошлогоПериода(СписокДокументов = "") 
	Если СписокДокументов = "" Тогда
		СписокДокументов	= СоздатьОбъект("СписокЗначений");
	КонецЕсли;	
	//СписокДокументов.ДобавитьЗначение(0);
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|ДокументРасчета	= Регистр.Взаиморасчеты2.ДокументРасчета, Регистр.ПривязкаОплаты.ДокументРасчета;
	|ТекущийДокумент	= Регистр.Взаиморасчеты2.ТекущийДокумент, Регистр.ПривязкаОплаты.ТекущийДокумент;
    |Долг	     		= Регистр.Взаиморасчеты2.Долг;
	|СуммаПривязки 		= Регистр.ПривязкаОплаты.Сумма;
	|Функция НачОстДолг 			= НачОст(Долг);
	|Функция КонОстДолг 			= КонОст(Долг); 
	|Функция ПриходДолг 			= Приход(Долг);Функция ПриходСуммаПривязки 	= Приход(СуммаПривязки);
	|Функция РасходДолг 			= Расход(Долг);
	|Группировка ДокументРасчета;
	|Группировка ТекущийДокумент;";
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат СписокДокументов;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Если //(Запрос.НачОстДолг = 0)
		(Запрос.КонОстДолг  - Запрос.ПриходСуммаПривязки = 0) 
		и (Запрос.ПриходДолг = 0)
		и (Запрос.РасходДолг <> 0) Тогда
			Пока Запрос.Группировка(2) = 1 Цикл 
				Если (Запрос.ТекущийДокумент.Вид() = "ВозвратОтПокупателя") 
				или (Запрос.ТекущийДокумент.Вид() = "ВозвратОтПокупателя_Розница") Тогда
					Продолжить;
				КонецЕсли;	
				Если Запрос.ТекущийДокумент.Вид() = "Реализация" Тогда 
					СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
					Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование) = 0 Тогда
						Если Запрос.ТекущийДокумент.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда  
							СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент());
						КонецЕсли;
					//Иначе
					//	СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
					КонецЕсли;	
				ИначеЕсли Запрос.ТекущийДокумент.Вид() = "СтрокаВыпискиПриход" Тогда 
					Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование) = 0 Тогда
						Если Запрос.ТекущийДокумент.ДокОснование.Вид() = "СчетБнРозница" Тогда 
							ДокументПродажи = ПолучитьРасходнуюБезнал(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент()); 
							Если ДокументПродажи = 0 Тогда
								СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
							Иначе	
								СписокДокументов.ДобавитьЗначение(ДокументПродажи.ТекущийДокумент()); 
							КонецЕсли;
						ИначеЕсли Запрос.ТекущийДокумент.ДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
							ДокументПродажи = ПолучитьРасходнуюБезнал(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент()); 
							Если ДокументПродажи = 0 Тогда
								СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
							Иначе	
								СписокДокументов.ДобавитьЗначение(ДокументПродажи.ТекущийДокумент()); 
							КонецЕсли;
						ИначеЕсли Запрос.ТекущийДокумент.ДокОснование.Вид() = "Реализация" Тогда
							СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
							Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование.ДокОснование) = 0 Тогда
								Если Запрос.ТекущийДокумент.ДокОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда  
									СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ДокОснование.ДокОснование.ТекущийДокумент());
								КонецЕсли;
								//Иначе
								//	СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
							КонецЕсли;	
						КонецЕсли;
					Иначе
						СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
					КонецЕсли;	    
				ИначеЕсли Запрос.ТекущийДокумент.Вид() = "ВозвратДолгов_Розница" Тогда 	
					СписокДокументов.ДобавитьЗначение(Запрос.ДокументРасчета.ТекущийДокумент());
				ИначеЕсли Запрос.ТекущийДокумент.Вид() = "ПривязкаОплатыРозница" Тогда	
					Если ПустоеЗначение(Запрос.ТекущийДокумент.ДокОснование) = 0 Тогда
						Если Запрос.ТекущийДокумент.ДокОснование.Вид() = "СчетБнРозница" Тогда
							ДокументПродажи = ПолучитьРасходнуюБезнал(Запрос.ТекущийДокумент.ДокОснование.ТекущийДокумент()); 
							Если ДокументПродажи = 0 Тогда
								СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
							Иначе	
								СписокДокументов.ДобавитьЗначение(ДокументПродажи.ТекущийДокумент()); 
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;	
				Иначе
					СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент.ТекущийДокумент());
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДокументов;
КонецФункции	

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Если (ВыбСвойствоТМЦ.		Выбран()=1) 
		 или (ВыбСвойствоПоставщика.Выбран()=1)
		 или (ВыбСвойствоПокупателя.Выбран()=1) 
		 Тогда     
		 	ДопСлой = "ВыбСвойства,";
		 Иначе                    
		 	ДопСлой = "";
		 КонецЕсли;
		Форма.ИспользоватьСлой(ДопСлой+"Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************                                                    
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)  
	
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;                       
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	
	ТекСтр = Группировки.ТекущаяСтрока();
	ПослСдвигСтр = Группировки.РазмерСписка();
	Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
		Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//       
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	                       
	НомерГруппировкиПоТМЦ = 9999;
	
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп		= Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Поставщик") или (ТекстГрупп = "АвторЗаявки") или (ТекстГрупп = "Покупатель") или 
				  ((ТекстГрупп = "Номенклатура") и (ПоГруппам = 0)) Тогда
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Номенклатура" Тогда
				НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьГруппировкиЗапроса()

//******************************************************************************
// ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                                
Процедура ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "")
	                         
	ПечЕд = "";
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		Если Запрос.ЭтоГруппа("Номенклатура") = 0 Тогда
			ПечЕд 	= ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);
			ПечКол 	= глФРМКоличество(Запрос.СуммаКоличество - Запрос.СуммаКоличествоВ,ПечЕд);  
			ПечАртикул = Запрос.Номенклатура.Артикул;
			ПечПроизв = Запрос.Номенклатура.Производитель
		Иначе                
			// если не в базовых единицах, то не имеет смысла количество
			ПечКол 	= ?(ВидЕдиницы=1,"",глФРМКоличество(Запрос.СуммаКоличество - Запрос.СуммаКоличествоВ,ПечЕд));
		КонецЕсли;
	Иначе
		ПечКол = "";
	КонецЕсли;
		
	Себест		  = Запрос.СуммаСебест - Запрос.СуммаСебестВ;
	ПродСт 		  = Запрос.СуммаПродСт - Запрос.СуммаПродСтВ;
	Профит 		  = ПродСт - Себест;
	
	ЗнакПрофит 	  = ?(ПродСт<0,-1,1);
	
	ПечСебест 	  = глФРМ(Себест,"");
	ПечПродСт 	  = глФРМ(ПродСт,"");
	ПечПрофит 	  = глФРМ(Профит,"");
	ПечПрофитПроц = ?(Себест = 0, "!!!!",СокрЛ(Формат(ЗнакПрофит*Профит/Себест*100,"Ч12.3")+"%"));
	
	Таб.ВывестиСекцию(НазваниеСекции);     
	глОживить(1);
	
КонецПроцедуры //ПечатьСтроки()

//******************************************************************************
// ВывестиГруппировку(Запрос,Ном)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном)
	  
	Если Ном <= КоличествоГруппировок Тогда                           
		
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		Пока Запрос.Группировка(Ном) = 1 Цикл
		
			Если НазваниеГруппировки = "ТекДок" Тогда
				НазваниеСекции="Документ";   
			ИначеЕсли Запрос.ЭтоГруппа(НазваниеГруппировки) = 1 Тогда
				НазваниеСекции="Строка"+СокрЛП(Ном)+"Г";
			Иначе
				НазваниеСекции="Строка"+Ном;
			КонецЕсли;      
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			Расшифровка = ПечТекстСтроки;
			Если НазваниеГруппировки = "ТекДок" Тогда
				ПечТекстСтроки = ""+глНазваниеДокументаВЖурнале(ПечТекстСтроки)+" № "+ПечТекстСтроки.НомерДок;
			КонецЕсли;
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки),ПечТекстСтроки);
		
			ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,Расшифровка);
		
			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда
				ВывестиГруппировку(Запрос,Ном+1);
			КонецЕсли;          
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()     
        
Функция ПолучитьТекстЗапроса(СписокДокументовДляОтбора, ТекДатаНачала, ХронПозНачала, ХронПозОкончания, ОптовыеСклады)
 	ТекстЗапроса =	
	"//{{ЗАПРОС(Сформировать)
	|Период с ТекДатаНачала по ДатаКонца;
	|Фирма			= Регистр.Продажи.Фирма;
	|УпрАналитика	= Регистр.Продажи.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.Продажи.Фирма.ЮрЛицо;
	|Покупатель 	= Регистр.Продажи.Покупатель;
	|СвойствоПок 	= Регистр.Продажи.Покупатель.ОсновноеСвойство.ЗначениеСвойства;
	|Номенклатура	= Регистр.Продажи.Номенклатура;  
	|ВидНоменклатуры = Регистр.Продажи.Номенклатура.ВидНоменклатуры;
	|СвойствоТМЦ 	= Регистр.Продажи.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;
	|Поставщик		= Регистр.Продажи.Поставщик;
	|СвойствоПост 	= Регистр.Продажи.Поставщик.ОсновноеСвойство.ЗначениеСвойства;
	|МОЛ_Комиссионер= Регистр.Продажи.ТекущийДокумент.Реализация.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозница.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя_Розница.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя.Склад;
	|ХронПоз	 	= Регистр.Продажи.ТекущийДокумент.ХроноПозицияЕстьДокументы;
	|ТекДок  		= Регистр.Продажи.ТекущийДокумент;";
	 
	ЕстьАвтор = 0;
	ЕстьАвторЗаявки = 0;
	ЕстьПроект = 0;                          
	НомСтроки = 0;
	НомКолонки = 0;
	
	// Проверка на необходимость включения в запрос переменной "Автор"
	// Сначала проверим, есть ли множественный фильтр по автору.
	Если ТаблицаМФ.НайтиЗначение("Автор", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьАвтор = 1;
		КонецЕсли;
	КонецЕсли;                                                  
	
	// Если фильтра нет, то возможно есть группировка
	Если ЕстьАвтор = 0  Тогда
		НомСтроки = Группировки.НайтиЗначение("Автор");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьАвтор = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    
	НомСтроки = 0;
	НомКолонки = 0;
	
	Если ТаблицаМФ.НайтиЗначение("АвторЗаявки", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьАвторЗаявки = 1;
		КонецЕсли;
	КонецЕсли;                                                  
	
	// Если фильтра нет, то возможно есть группировка
	Если ЕстьАвторЗаявки = 0  Тогда
		НомСтроки = Группировки.НайтиЗначение("АвторЗаявки");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьАвторЗаявки = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на необходимость включения в запрос переменной "Проект"    
	НомСтроки = 0;
	НомКолонки = 0;
	Если ТаблицаМФ.НайтиЗначение("Проект", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьПроект = 1;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЕстьПроект = 0  Тогда    
		НомСтроки = Группировки.НайтиЗначение("Проект");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьПроект = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьАвтор=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|Автор      = Регистр.Продажи.ТекущийДокумент.Автор;";
	КонецЕсли;     
	
	Если ЕстьАвторЗаявки=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|АвторЗаявки = Регистр.Продажи.ТекущийДокумент.АвторЗаявки;";
	КонецЕсли;     

	Если ЕстьПроект=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|Проект  = Регистр.Продажи.ТекущийДокумент.Проект;";
	    
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|Себест      = Регистр.Продажи.Себестоимость;
	|Количество  = Регистр.Продажи.Количество;
	|ПродСт      = Регистр.Продажи.ПродСтоимость;
	|СебестВ     = Регистр.Продажи.СебестоимостьВ;
	|КоличествоВ = Регистр.Продажи.КоличествоВ;
	|ПродСтВ     = Регистр.Продажи.ПродСтоимостьВ;
	|Функция СуммаСебест      = Сумма(Себест);
	|Функция СуммаКоличество  = Сумма(Количество);
	|Функция СуммаПродСт      = Сумма(ПродСт);
	|Функция СуммаСебестВ     = Сумма(СебестВ);
	|Функция СуммаКоличествоВ = Сумма(КоличествоВ);
	|Функция СуммаПродСтВ     = Сумма(ПродСтВ);";
	                                             
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,               "ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Поставщик",   ВыбПоставщик,         "ВыбПоставщик",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Покупатель",  ВыбПокупатель,        "ВыбПокупатель",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	Если (ВыбСвойствоТМЦ.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоТМЦ", ВыбСвойствоТМЦ,       "ВыбСвойствоТМЦ",       ТекстЗапроса,Загол);
	КонецЕсли;                              
	Если (ВыбСвойствоПоставщика.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоПост",ВыбСвойствоПоставщика,"ВыбСвойствоПоставщика",ТекстЗапроса,Загол);
	КонецЕсли;                                     
	Если (ВыбСвойствоПокупателя.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоПок", ВыбСвойствоПокупателя,"ВыбСвойствоПокупателя",ТекстЗапроса,Загол);
	КонецЕсли;                                     
	Если НетОш = 0 Тогда
		Возврат "";
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Автор",   ,        ,ТекстЗапроса,Загол,"Автор");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "АвторЗаявки",   ,  ,ТекстЗапроса,Загол,"АвторЗаявки");

	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",  ,        ,ТекстЗапроса,Загол,"Проект"); 
	
	ПечЗаголовок = "Обороты по скидкам ("+глДоллары.Наименование+")";      
	                                    
	ПечЗаголовокСтолбца = "";  
	
		
    //Если (ПустоеЗначение(глПользователь.ОсновнойСклад) = 1)
	//или (глПользователь.ОсновнойСклад.Магазин = 1) Тогда
	//	ОптовыеСклады	= СоздатьОбъект("СписокЗначений");
	//	СпрСклады = СоздатьОбъект("Справочник.Склады");
	//	СпрСклады.НайтиПоНаименованию("Полюстровский-ОПТ");
	//	ОптовыеСклады.ДобавитьЗначение(СпрСклады.ТекущийЭлемент());
	//    ТекстЗапроса = ТекстЗапроса + "
	//	|Условие(Не(МОЛ_Комиссионер в ОптовыеСклады));";
	//КонецЕсли;
	    
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",,,ТекстЗапроса,Загол,"МОЛ_Комиссионер");
	
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	    
	Если КоличествоГруппировок > 3 Тогда
		Предупреждение("Нельзя сделать больше 3 группировок!",60);
		Возврат "";
	КонецЕсли;
	  
	Если Найти(ТекстЗапроса, "Группировка ТекДок") = 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Группировка ТекДок;";        
	КонецЕсли;
	
	//получим документы если нужны отборы
	СписокДокументовДляОтбора = СоздатьОбъект("СписокЗначений");

	Если ТолькоОплаченные  = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьОплаченныеИзТекущегоПериода(СписокДокументовДляОтбора);
	КонецЕсли;
	
	Если ОплаченныеВПериоде = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьОплаченныеИзПрошлогоПериода(СписокДокументовДляОтбора);
	КонецЕсли;
	
	Если флПолучилиДокументыВпериоде = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьПолучилиДокументыВПериоде(СписокДокументовДляОтбора);
	КонецЕсли;
	              
	Если СписокДокументовДляОтбора.РазмерСписка() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Условие(ТекДок в СписокДокументовДляОтбора);"; 
		Если СписокДокументовДляОтбора.РазмерСписка() <> 0 Тогда 
			СписокДокументовДляОтбора.Сортировать(0,1); 
			Стр = "";
			ПервыйДокумент = СписокДокументовДляОтбора.ПолучитьЗначение(1,Стр);
			ТекДатаНачала = ПервыйДокумент.ДатаДок;  
		Иначе 
			СписокДокументовДляОтбора.ДобавитьЗначение(0);
			ТекДатаНачала = ДатаНачала;
		КонецЕсли; 
	Иначе
		ТекДатаНачала = ДатаНачала;
	КонецЕсли; 
	
	ВидУслуга    = Перечисление.ВидыНоменклатуры.Услуга;
	ТекстЗапроса = ТекстЗапроса + "
		|Условие(ВидНоменклатуры <> ВидУслуга);";
    //***********************************
	             
	Если флТолькоСДокументами = 1 Тогда
		ХронПозНачала 		= глХроноПозиция(ДатаНачала,"00:00:00");
		ХронПозОкончания 	= глХроноПозиция(ДатаКонца+ДнейНаДовозДокументов,"23:59:59");  
		ТекстЗапроса = ТекстЗапроса + "
		|Условие((ХронПоз >= ХронПозНачала) и (ХронПоз <= ХронПозОкончания));";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции	

Функция ПолучитьСкидкуНаценку(ТекДок, СуммаПродажи, СебесПродажи, СуммаПродажиВ, СебесПродажиВ) 
	СкидкаНаценка = "БезСкидки";
	
		
	
	Если (ТекДок.Вид() = "ВозвратОтПокупателя_Розница")
	или (ТекДок.Вид() = "ВозвратОтПокупателя") Тогда
		Если ТекДок.ДокОснование.Выбран() = 1 Тогда
			ТекДокАнализ = ТекДок.ДокОснование.ТекущийДокумент();    
			АнализСебесПродажи = СебесПродажиВ;
			АнализСуммаПродажи = СуммаПродажиВ; 
		Иначе                
			Сообщить("Нет основания: "+ ТекДок.ТекущийДокумент()); 
			СкидкаНаценка = "НетОснования";
			//ТекДокАнализ = ТекДок.ТекущийДокумент();
			//АнализСебесПродажи = СебесПродажи;
			//АнализСуммаПродажи = СуммаПродажи;
		КонецЕсли;
	Иначе
		ТекДокАнализ = ТекДок.ТекущийДокумент();
		АнализСебесПродажи = СебесПродажи;
		АнализСуммаПродажи = СуммаПродажи;
	КонецЕсли;	
	     
	Если (ТекДок.Вид() = "РасходнаяНакладнаяРозница") 
		или (ТекДок.Вид() = "РасходнаяНакладнаяРозницаБезнал")  Тогда
		Если ПустоеЗначение(ТекДок.ТипЦен) = 0 Тогда
			Если ТекДок.ТипЦен.Код = "00009" Тогда
				СкидкаНаценка = "Скидка7Сумма";	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;	
	
	Если (ТекДок.Вид() = "РасходнаяНакладнаяРозница") Тогда
		Если (ТекДок.ДатаДок >= Дата("01.06.2017")) и (ТекДок.флИндивидРасчет = 1) Тогда
			СкидкаНаценка = "Скидка17Сумма";
		КонецЕсли;	
	КонецЕсли;
	
	Если (ТекДок.Вид() = "РасходнаяНакладнаяРозницаБезнал") Тогда
		Если (ТекДок.ДатаДок >= Дата("01.06.2017"))Тогда
			мЗаявкаКлиента 	= глПолучитьЗаявку(ТекДок); 
			Если ПустоеЗначение(мЗаявкаКлиента) = 0 Тогда
				Если мЗаявкаКлиента.Вид() = "ЗаявкаКлиентаРозница" Тогда
					Если (мЗаявкаКлиента.флИндивидРасчет = 1) Тогда
						СкидкаНаценка = "Скидка17Сумма"; 
					КонецЕсли;                                              
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	Если (СкидкаНаценка = "БезСкидки") Тогда
		СкидкаДокумента 	= ТекДокАнализ.Итог("СуммаБезСкидки")-ТекДокАнализ.Итог("Сумма")-?(ТекДокАнализ.СуммаВклНП=1,0,ТекДокАнализ.Итог("СуммаНП"))+?(ТекДокАнализ.СуммаВклНДС=1,0,ТекДокАнализ.Итог("СуммаНДС"));
		СкидкаКонтрагента 	= ТекДокАнализ.Контрагент.Скидка_Розница.Получить(ТекДокАнализ.ДатаДок); 
		СкидкаПроцент 		= Окр(СкидкаДокумента * 100 / ТекДокАнализ.Итог("СуммаБезСкидки"),1);
		
		Если СкидкаКонтрагента = 0  Тогда
			СкидкаНаценка = "БезСкидки";
		ИначеЕсли  СкидкаПроцент > СкидкаКонтрагента   Тогда
			Наценка = АнализСуммаПродажи - АнализСебесПродажи;
			НаценкаПроцент = Наценка * 100 / АнализСебесПродажи;
			Если НаценкаПроцент <= 10 Тогда       
				СкидкаНаценка = "Наценка10Сумма";
			ИначеЕсли 	(НаценкаПроцент > 10) и (НаценкаПроцент <= 15) Тогда
				СкидкаНаценка = "Наценка1015Сумма";
			ИначеЕсли 	(НаценкаПроцент > 15) и (НаценкаПроцент <= 25) Тогда 
				СкидкаНаценка = "Наценка1525Сумма";
			ИначеЕсли 	(НаценкаПроцент > 25) Тогда   
				СкидкаНаценка = "Наценка25Сумма";
			КонецЕсли;
		ИначеЕсли СкидкаПроцент <= СкидкаКонтрагента Тогда
			Если  (СкидкаКонтрагента > 0) и (СкидкаКонтрагента <= 7) Тогда 
				СкидкаНаценка = "Скидка7Сумма";
			ИначеЕсли  (СкидкаКонтрагента > 7) и (СкидкаКонтрагента <= 10) Тогда
				СкидкаНаценка = "Скидка10Сумма";
			ИначеЕсли  (СкидкаКонтрагента > 10) и (СкидкаКонтрагента <= 12) Тогда
				СкидкаНаценка = "Скидка12Сумма";
			ИначеЕсли  (СкидкаКонтрагента > 12) и (СкидкаКонтрагента <= 15) Тогда
				СкидкаНаценка = "Скидка15Сумма";
			ИначеЕсли  (СкидкаКонтрагента > 15) и (СкидкаКонтрагента <= 17) Тогда
				СкидкаНаценка = "Скидка17Сумма";
			Иначе                                  
				СкидкаНаценка = "Скидка20Сумма";			
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	
	Возврат СкидкаНаценка;
КонецФункции	
    
Функция ПолучитьПроцентыПерепродажиПоДокументу(ТекДок)
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Проценты;
	
	СуммаРубПриход = 0;	
	СуммаРубРасход = 0;
	СуммаПроцентов = 0;
	
	Если ТекДок.ДатаДок >= Дата("01.07.2017") Тогда	
		Рег=СоздатьОбъект("Регистр.ПартииНаличие");
		Если Рег.ВыбратьДвиженияДокумента(ТекДок)=1 Тогда
			
			Пока Рег.ПолучитьДвижение()=1 Цикл
				
				Если Рег.Приход = 1 Тогда
					Продолжить;
				КонецЕсли;	
				    
				Если (Рег.Партия.Выбран() = 0) Тогда
					Продолжить;	
				КонецЕсли;	
				
				Если (Рег.Партия.Поставщик.Выбран() = 1) Тогда
					Если (Рег.Партия.Поставщик.Наименование = "Tiemme Raccorderie") 
					или (Рег.Партия.Поставщик.Наименование = "Watts Industries") 
					или (Рег.Партия.Поставщик.Наименование = "RBM") Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;				
				   
				КоэфСебестоимости = 1;
				
				Если (ТекДок.Проект.Выбран() = 1) Тогда  
					Если (ПустоеЗначение(Рег.Партия.ПриходныйДокумент) = 0) Тогда
						Если ПустоеЗначение(Рег.Партия.ПриходныйДокумент.Проект) = 0 Тогда
							Если СокрЛП(ТекДок.Проект.ФирмаОстатков) = "Эталон" Тогда
								Если СокрЛП(Рег.Партия.ПриходныйДокумент.Проект.ФирмаОстатков) <> "Эталон" Тогда
									КоэфСебестоимости = 1.30;	
								КонецЕсли;	
							Иначе
								Если СокрЛП(Рег.Партия.ПриходныйДокумент.Проект.ФирмаОстатков) = "Эталон" Тогда
									КоэфСебестоимости = 1.05;	
								КонецЕсли;
							КонецЕсли; 
							
						КонецЕсли; 
					КонецЕсли;  
				Иначе
					Если (ПустоеЗначение(Рег.Партия.ПриходныйДокумент) = 0) Тогда
						Если ПустоеЗначение(Рег.Партия.ПриходныйДокумент.Проект) = 0 Тогда
							Если СокрЛП(Рег.Партия.ПриходныйДокумент.Проект.ФирмаОстатков) = "Эталон" Тогда
								КоэфСебестоимости = 1.05;	
							КонецЕсли;    
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
				
				Если КоэфСебестоимости > 1 Тогда
					СуммаПроцентов = СуммаПроцентов + ((Рег.СуммаРуб * КоэфСебестоимости) - Рег.СуммаРуб);	
				КонецЕсли;	
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СуммаПроцентов;
	
КонецФункции

Функция ПолучитьПроцентыПоДокументу(ТекДок)
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Проценты;
	
	СуммаРубПриход = 0;	
	СуммаРубРасход = 0;
	
	Рег=СоздатьОбъект("Регистр.Покупатели_розница");
	Если Рег.ВыбратьДвиженияДокумента(ТекДок)=1 Тогда
	    
		Пока Рег.ПолучитьДвижение()=1 Цикл
			
			Если Рег.ВидВзаимодействия <> ВыбВидВзаимодействияРозница Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗнакДвиж=?(Рег.Приход=1,"+","-");
			Если ЗнакДвиж = "+" Тогда
				СуммаРубПриход = Рег.СуммаРуб;
			Иначе
				СуммаРубРасход = Рег.СуммаРуб;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СуммаПроцентов = 0;
	 
	СуммаПроцентов = СуммаРубПриход - СуммаРубРасход;
	
	Возврат СуммаПроцентов;
	
КонецФункции	

Функция ОбработатьРезультатЗапроса(Запрос)
	
	ТабДанных = СоздатьОбъект("ТаблицаЗначений");
	
	Запрос.Выгрузить(ТабДанных,0,0);
	
	//Сообщить(ТабДанных.КоличествоСтрок());
	//Сообщить("СуммаПродСт "+ТабДанных.Итог("СуммаПродСт"));
	//Сообщить("СуммаСебест "+ТабДанных.Итог("СуммаСебест"));
	//Сообщить("СуммаПродСтВ "+ТабДанных.Итог("СуммаПродСтВ"));
	//Сообщить("СуммаСебестВ "+ТабДанных.Итог("СуммаСебестВ"));
	
	ТабДанных.НоваяКолонка("БезСкидкиСумма","Число");	
	ТабДанных.НоваяКолонка("Скидка7Сумма","Число");
	ТабДанных.НоваяКолонка("Скидка712Сумма","Число");	
	ТабДанных.НоваяКолонка("Скидка10Сумма","Число");		
	ТабДанных.НоваяКолонка("Скидка12Сумма","Число");		
	ТабДанных.НоваяКолонка("Скидка15Сумма","Число");		
	ТабДанных.НоваяКолонка("Скидка17Сумма","Число");
	ТабДанных.НоваяКолонка("Скидка1720Сумма","Число");
	ТабДанных.НоваяКолонка("Скидка20Сумма","Число");		
	ТабДанных.НоваяКолонка("Наценка10Сумма","Число");		
	ТабДанных.НоваяКолонка("Наценка1015Сумма","Число");		
	ТабДанных.НоваяКолонка("Наценка1525Сумма","Число");		
	ТабДанных.НоваяКолонка("Наценка25Сумма","Число");	
	ТабДанных.НоваяКолонка("ИтогоСумма","Число");
	
	ТабДанных.ВыбратьСтроки();
	Пока ТабДанных.ПолучитьСтроку() = 1 Цикл
		СкидкаНаценка = ПолучитьСкидкуНаценку(ТабДанных.ТекДок, ТабДанных.СуммаПродСт, ТабДанных.СуммаСебест, ТабДанных.СуммаПродСтВ, ТабДанных.СуммаСебестВ);		
		       
		Себест		  			= ТабДанных.СуммаСебест - ТабДанных.СуммаСебестВ;
		ПродСт 		  			= ТабДанных.СуммаПродСт - ТабДанных.СуммаПродСтВ;
		СуммаОтражения 		  	= ПродСт - Себест;
		
		//СуммаОтражения = (ТабДанных.СуммаПродСт - ТабДанных.СуммаПродСтВ) - (ТабДанных.СуммаСебест - ТабДанных.СуммаСебестВ);
		   
		Если флВычитатьПроценты = 1 Тогда
			СуммаПроцентов = ПолучитьПроцентыПоДокументу(ТабДанных.ТекДок);
			СуммаОтражения = СуммаОтражения - СуммаПроцентов;
		Иначе	
			СуммаПроцентов = 0;
		КонецЕсли;
		
		Если флВычитатьПроцентПерепродажи = 1 Тогда
			СуммаПроцентовПерепродажи = ПолучитьПроцентыПерепродажиПоДокументу(ТабДанных.ТекДок);
			СуммаОтражения = СуммаОтражения - СуммаПроцентовПерепродажи;
		КонецЕсли;
			
		Если СкидкаНаценка = "БезСкидки" Тогда 
			ТабДанных.БезСкидкиСумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка7Сумма" Тогда	
			ТабДанных.Скидка7Сумма = СуммаОтражения;
			ТабДанных.Скидка712Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка10Сумма" Тогда		
			ТабДанных.Скидка10Сумма	 = СуммаОтражения;
			ТабДанных.Скидка712Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка12Сумма" Тогда	
			ТабДанных.Скидка12Сумма	 = СуммаОтражения;
			ТабДанных.Скидка712Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка15Сумма" Тогда	
			ТабДанных.Скидка15Сумма	 = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка17Сумма" Тогда	
			ТабДанных.Скидка17Сумма  = СуммаОтражения;
			ТабДанных.Скидка1720Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Скидка20Сумма" Тогда	
			ТабДанных.Скидка20Сумма	 = СуммаОтражения;
			ТабДанных.Скидка1720Сумма = СуммаОтражения; 
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Наценка10Сумма" Тогда	
			ТабДанных.Наценка10Сумма  = СуммаОтражения;
			ТабДанных.Скидка1720Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Наценка1015Сумма" Тогда	
			ТабДанных.Наценка1015Сумма  = СуммаОтражения;
			ТабДанных.Скидка1720Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Наценка1525Сумма" Тогда	
			ТабДанных.Наценка1525Сумма  = СуммаОтражения;
			ТабДанных.Скидка1720Сумма = СуммаОтражения; 
			ТабДанных.ИтогоСумма = СуммаОтражения;
		ИначеЕсли СкидкаНаценка = "Наценка25Сумма" Тогда	
			ТабДанных.Наценка25Сумма  = СуммаОтражения;  
			ТабДанных.Скидка1720Сумма = СуммаОтражения;
			ТабДанных.ИтогоСумма 	  = СуммаОтражения;
		КонецЕсли;
	КонецЦикла;  
	  
	//Сообщить(ТабДанных.Итог("ИтогоСумма"));	
	Возврат ТабДанных;
КонецФункции	

Процедура СформироватьОборотыПоСкидкам()
	Перем Запрос, ТекстЗапроса, ОптовыеСклады;
	 
	СписокДокументов = "";
	
	//Меню = СоздатьОбъект("СписокЗначений");
	//Меню.ДобавитьЗначение("по магазинам."); 
	//Меню.ДобавитьЗначение("по документам.");
	 
	//ПунктМеню = "";
	//Если Меню.ВыбратьЗначение(ПунктМеню,,,,1) = 1 Тогда
	//	Если ПунктМеню = "по магазинам." Тогда
	//		ПолеСвертки = "";	
	//	Иначе
	//		ПолеСвертки = ",ТекДок";
	//	КонецЕсли;
	//Иначе
	//	Возврат;
	//КонецЕсли;
       
	

	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	                                        
	Таб.ИсходнаяТаблица( "ОборотыПоСкидкам2" );  
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;
                                         
	СписокДокументовДляОтбора = "";
	//получим документы если нужны отборы
	ТекДатаНачала 		= ДатаНачала;
	ХронПозНачала 		= "";
	ХронПозОкончания 	= "";
	ВидУслуга    		= Перечисление.ВидыНоменклатуры.Услуга;
	
    //Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = ПолучитьТекстЗапроса(СписокДокументовДляОтбора, ТекДатаНачала, ХронПозНачала, ХронПозОкончания, ОптовыеСклады);
	              
	ПоляСвертки = "";
	
	Для Сч=1 По СписокГруппировок.РазмерСписка() Цикл   
		ПолеСвертки = "";
    	СписокГруппировок.ПолучитьЗначение(Сч,ПолеСвертки);
		ПоляСвертки = ПоляСвертки + ?(Сч=1,"",",") +ПолеСвертки;
	КонецЦикла;
		
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда 
		//Сообщить(ТекстЗапроса);
		Возврат;
	КонецЕсли;  
	//Сообщить(ТекстЗапроса);
	ТабДанных = ОбработатьРезультатЗапроса(Запрос);
	
	Таб.ВывестиСекцию("Шапка");
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "ОборотыПоСкидкам", "ОборотыПоСкидкам");
	   
	//Если ПолеСвертки = ",ТекДок" Тогда
	//	ТабДанных.Свернуть("МОЛ_Комиссионер"+ПолеСвертки,"БезСкидкиСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
	//	ТабДанных.Сортировать("МОЛ_Комиссионер, ТекДок",1);
	//	ТабМагазины = СоздатьОбъект("ТаблицаЗначений");
	//	ТабДанных.Выгрузить(ТабМагазины);
	//Иначе
	//	ТабМагазины = ТабДанных;
	//КонецЕсли;
	 
	ТабДанныхГр1 = "";
	ТабДанныхГр2 = "";
	ТабДанныхГр3 = "";
	ТабДанныхГр4 = "";
	ТабДанныхГр5 = "";
	  
	ПоляСвертки = "";
	
	Для Сч=1 По СписокГруппировок.РазмерСписка() Цикл   
		ПолеСвертки = "";
    	ПолеСвертки = СписокГруппировок.ПолучитьЗначение(Сч);
		ПоляСвертки = ПоляСвертки +?(Сч=1,"",",") +ПолеСвертки;
		ВрТабДанных = СоздатьОбъект("ТаблицаЗначений");
		ВрТабДанных.Загрузить(ТабДанных);
		Если Сч=1 Тогда
			ВрТабДанных.Свернуть(""+ПоляСвертки,"БезСкидкиСумма,Скидка712Сумма,Скидка1720Сумма,ИтогоСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
			//ВрТабДанных.Сортировать(""+ПоляСвертки,1);
			ТабДанныхГр1 = СоздатьОбъект("ТаблицаЗначений");
			ВрТабДанных.Выгрузить(ТабДанныхГр1);  
			ВрТабДанных.Очистить();
			ТабДанныхГр1.Сортировать(""+ПоляСвертки,1);
		ИначеЕсли Сч=2 Тогда                    
			ВрТабДанных.Свернуть(""+ПоляСвертки,"БезСкидкиСумма,Скидка712Сумма,Скидка1720Сумма,ИтогоСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
			//ВрТабДанных.Сортировать(""+ПоляСвертки,1);
			ТабДанныхГр2 = СоздатьОбъект("ТаблицаЗначений");
			ВрТабДанных.Выгрузить(ТабДанныхГр2);
			ВрТабДанных.Очистить();
			ТабДанныхГр2.Сортировать(""+ПоляСвертки,1);
		ИначеЕсли Сч=3 Тогда                    
			ВрТабДанных.Свернуть(""+ПоляСвертки,"БезСкидкиСумма,Скидка712Сумма,Скидка1720Сумма,ИтогоСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
			//ВрТабДанных.Сортировать(""+ПоляСвертки,1);
			ТабДанныхГр3 = СоздатьОбъект("ТаблицаЗначений");
			ВрТабДанных.Выгрузить(ТабДанныхГр3); 
			ВрТабДанных.Очистить();
			ТабДанныхГр3.Сортировать(""+ПоляСвертки,1);
		ИначеЕсли Сч=4 Тогда                    
			ВрТабДанных.Свернуть(""+ПоляСвертки,"БезСкидкиСумма,Скидка712Сумма,Скидка1720Сумма,ИтогоСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
			//ВрТабДанных.Сортировать(""+ПоляСвертки,1);
			ТабДанныхГр4 = СоздатьОбъект("ТаблицаЗначений");
			ВрТабДанных.Выгрузить(ТабДанныхГр4);    
			ВрТабДанных.Очистить();
			ТабДанныхГр4.Сортировать(""+ПоляСвертки,1);
		ИначеЕсли Сч=5 Тогда  
			ВрТабДанных.Свернуть(""+ПоляСвертки,"БезСкидкиСумма,Скидка712Сумма,Скидка1720Сумма,ИтогоСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
			//ВрТабДанных.Сортировать(""+ПоляСвертки,1);
			ТабДанныхГр5 = СоздатьОбъект("ТаблицаЗначений");
			ВрТабДанных.Выгрузить(ТабДанныхГр5); 
			ВрТабДанных.Очистить();
			ТабДанныхГр5.Сортировать(""+ПоляСвертки,1);
		КонецЕсли;	
	КонецЦикла;
	  
	КолГр = СписокГруппировок.РазмерСписка();
	
	ТабДанныхГр1.ВыбратьСтроки();
	Пока ТабДанныхГр1.ПолучитьСтроку() = 1 Цикл 
		ПолеСвертки1 = "";
    	ПолеСвертки1 = СписокГруппировок.ПолучитьЗначение(1);
		ЗначениеГруппировки 		= ТабДанныхГр1.ПолучитьЗначение(ТабДанныхГр1.НомерСтроки,ПолеСвертки1);
		Если ПолеСвертки1 = "ТекДок" Тогда 
			ПредставлениеГруппировки 	= глНазваниеДокументаВЖурнале(ЗначениеГруппировки) + "№" + ЗначениеГруппировки.НомерДок + " от "+ЗначениеГруппировки.ДатаДок; 
		Иначе
			ПредставлениеГруппировки 	= ЗначениеГруппировки;
		КонецЕсли;
		Таб.ВывестиСекцию("СтрокаГр1");  
		
		Если КолГр > 1 Тогда 
			БылВывод2 = 0;    
			ТабДанныхГр1Сверка = ТабДанныхГр1.ПолучитьЗначение(ТабДанныхГр1.НомерСтроки,ПолеСвертки1);
			ТабДанныхГр2.ВыбратьСтроки();
			Пока ТабДанныхГр2.ПолучитьСтроку() = 1 Цикл 
				ПолеСвертки2 = "";
				ПолеСвертки2 = СписокГруппировок.ПолучитьЗначение(2);
				Если ТабДанныхГр1Сверка = ТабДанныхГр2.ПолучитьЗначение(ТабДанныхГр2.НомерСтроки,ПолеСвертки1) Тогда 
					БылВывод2 = 1;  
					ЗначениеГруппировки 		= ТабДанныхГр2.ПолучитьЗначение(ТабДанныхГр2.НомерСтроки,ПолеСвертки2);
					Если ПолеСвертки2 = "ТекДок" Тогда 
						ПредставлениеГруппировки 	= глНазваниеДокументаВЖурнале(ЗначениеГруппировки) + "№" + ЗначениеГруппировки.НомерДок + " от "+ЗначениеГруппировки.ДатаДок; 
					Иначе
						ПредставлениеГруппировки 	= ЗначениеГруппировки;
					КонецЕсли;
					Таб.ВывестиСекцию("СтрокаГр2");
					Если КолГр > 2 Тогда
						БылВывод3 = 0;
						ТабДанныхГр3.ВыбратьСтроки();
						Пока ТабДанныхГр3.ПолучитьСтроку() = 1 Цикл 
							ПолеСвертки3 = "";
							ПолеСвертки3 = СписокГруппировок.ПолучитьЗначение(3);
							Если (ТабДанныхГр2.ПолучитьЗначение(ТабДанныхГр2.НомерСтроки,ПолеСвертки2) = ТабДанныхГр3.ПолучитьЗначение(ТабДанныхГр3.НомерСтроки,ПолеСвертки2))
								и (ТабДанныхГр1.ПолучитьЗначение(ТабДанныхГр1.НомерСтроки,ПолеСвертки1) = ТабДанныхГр3.ПолучитьЗначение(ТабДанныхГр2.НомерСтроки,ПолеСвертки1)) Тогда 
								БылВывод3 = 1;
								ЗначениеГруппировки 		= ТабДанныхГр3.ПолучитьЗначение(ТабДанныхГр3.НомерСтроки,ПолеСвертки3);
								Если ПолеСвертки3 = "ТекДок" Тогда 
									ПредставлениеГруппировки 	= глНазваниеДокументаВЖурнале(ЗначениеГруппировки) + "№" + ЗначениеГруппировки.НомерДок + " от "+ЗначениеГруппировки.ДатаДок; 
								Иначе
									ПредставлениеГруппировки 	= ЗначениеГруппировки;
								КонецЕсли;	
								
								//Таб.ВывестиСекцию("СтрокаДокумент");
								Таб.ВывестиСекцию("СтрокаГр3");
								//Если КолГр > 2 Тогда
								//	
								//КонецЕсли;  
							//ИначеЕсли БылВывод3 = 1 Тогда
							//	Прервать;
							КонецЕсли;	
						КонецЦИкла;	
					КонецЕсли;  
				//ИначеЕсли БылВывод2 = 1 Тогда
				//	Прервать;
				КонецЕсли;	
			КонецЦИкла;	
		КонецЕсли;
	КонецЦИкла;	
	
	Таб.ВывестиСекцию("СтрокаИтог");
	Таб.ВывестиСекцию("СтрокаДоли");
	
	//ТабМагазины.Свернуть("МОЛ_Комиссионер","БезСкидкиСумма,Скидка7Сумма,Скидка10Сумма,Скидка12Сумма,Скидка15Сумма,Скидка17Сумма,Скидка20Сумма,Наценка10Сумма,Наценка1015Сумма,Наценка1525Сумма,Наценка25Сумма");
	//ТабМагазины.Сортировать("МОЛ_Комиссионер"); 
	//ТабМагазины.ВыбратьСтроки();
	//Пока ТабМагазины.ПолучитьСтроку() = 1 Цикл
	//	Таб.ВывестиСекцию("СтрокаМагазин");  
	//	Если ПолеСвертки = ",ТекДок" Тогда 
	//		БылВывод = 0;
	//		ТабДанных.ВыбратьСтроки();
	//		Пока ТабДанных.ПолучитьСтроку() = 1 Цикл 
	//			Если ТабДанных.МОЛ_Комиссионер = ТабМагазины.МОЛ_Комиссионер Тогда
	//				БылВывод = 1; 
	//				ПредставлениеДокумента = глНазваниеДокументаВЖурнале(ТабДанных.ТекДок) + "№" + ТабДанных.ТекДок.НомерДок + " от "+ТабДанных.ТекДок.ДатаДок;
	//				Таб.ВывестиСекцию("СтрокаДокумент");	 
	//			ИначеЕсли БылВывод = 1 Тогда
	//				Прервать;
	//			КонецЕсли;	
	//		КонецЦикла;	 
	//	КонецЕсли;
	//КонецЦикла; 
	
	Таб.ТолькоПросмотр(1);       
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;

	Таб.Показать("Оборот по скидкам", "");
КонецПроцедуры	

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;
	    
	СписокДокументов = "";
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	                                        
	Таб.ИсходнаяТаблица( "АнализПродаж" );  
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	  
	
	    
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "АнализПродаж");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);
	
	Расшифровка.Установить("ВыбТМЦ",		ВыбТМЦ);
	Расшифровка.Установить("ВыбПокупатель",	ВыбПокупатель);
	Расшифровка.Установить("ВыбПоставщик",	ВыбПоставщик);
	Расшифровка.Установить("Группировки",	Группировки);
	Расшифровка.Установить("ВидЕдиницы",	ВидЕдиницы);  
	Расшифровка.Установить("ПоГруппам",		ПоГруппам);    
	
	Расшифровка.Установить("ВыбСвойствоТМЦ",		ВыбСвойствоТМЦ);
	Расшифровка.Установить("ВыбСвойствоПокупателя",	ВыбСвойствоПокупателя);
	Расшифровка.Установить("ВыбСвойствоПоставщика",	ВыбСвойствоПоставщика);

	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ТекДатаНачала по ДатаКонца;
	|Фирма			= Регистр.Продажи.Фирма;
	|УпрАналитика	= Регистр.Продажи.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.Продажи.Фирма.ЮрЛицо;
	|Покупатель 	= Регистр.Продажи.Покупатель;
	|СвойствоПок 	= Регистр.Продажи.Покупатель.ОсновноеСвойство.ЗначениеСвойства;
	|Номенклатура	= Регистр.Продажи.Номенклатура;  
	|ВидНоменклатуры = Регистр.Продажи.Номенклатура.ВидНоменклатуры;
	|СвойствоТМЦ 	= Регистр.Продажи.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;
	|Поставщик		= Регистр.Продажи.Поставщик;
	|СвойствоПост 	= Регистр.Продажи.Поставщик.ОсновноеСвойство.ЗначениеСвойства;
	|МОЛ_Комиссионер= Регистр.Продажи.ТекущийДокумент.Реализация.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозница.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя_Розница.Склад,
	|				  Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя.Склад;
	|ХронПоз		= Регистр.Продажи.ТекущийДокумент.ХроноПозицияЕстьДокументы;
	|ТекДок  		= Регистр.Продажи.ТекущийДокумент;"; 
	
	ЕстьАвтор = 0;
	ЕстьАвторЗаявки = 0;
	ЕстьПроект = 0;                          
	НомСтроки = 0;
	НомКолонки = 0;

	// Проверка на необходимость включения в запрос переменной "Автор"
	// Сначала проверим, есть ли множественный фильтр по автору.
	Если ТаблицаМФ.НайтиЗначение("Автор", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьАвтор = 1;
		КонецЕсли;
	КонецЕсли;                                                  
	
	// Если фильтра нет, то возможно есть группировка
	Если ЕстьАвтор = 0  Тогда
		НомСтроки = Группировки.НайтиЗначение("Автор");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьАвтор = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    
	НомСтроки = 0;
	НомКолонки = 0;
	
	Если ТаблицаМФ.НайтиЗначение("АвторЗаявки", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьАвторЗаявки = 1;
		КонецЕсли;
	КонецЕсли;                                                  
	
	// Если фильтра нет, то возможно есть группировка
	Если ЕстьАвторЗаявки = 0  Тогда
		НомСтроки = Группировки.НайтиЗначение("АвторЗаявки");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьАвторЗаявки = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка на необходимость включения в запрос переменной "Проект"    
	НомСтроки = 0;
	НомКолонки = 0;
	Если ТаблицаМФ.НайтиЗначение("Проект", НомСтроки, НомКолонки) = 1 Тогда
		Если ТаблицаМФ.ПолучитьЗначение(НомСтроки, "ФлВкл") = 2  Тогда
		    ЕстьПроект = 1;
		КонецЕсли;
	КонецЕсли;            
	Если ЕстьПроект = 0  Тогда    
		НомСтроки = Группировки.НайтиЗначение("Проект");
		Если  НомСтроки > 0 Тогда
			Если Группировки.Пометка(НомСтроки)=1 Тогда
				ЕстьПроект = 1;			    
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьАвтор=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|Автор      = Регистр.Продажи.ТекущийДокумент.Автор;";
	КонецЕсли;     
	
	Если ЕстьАвторЗаявки=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|АвторЗаявки = Регистр.Продажи.ТекущийДокумент.АвторЗаявки;";
	КонецЕсли;     

	Если ЕстьПроект=1 Тогда
		ТекстЗапроса = ТекстЗапроса +
		"
		|Проект  = Регистр.Продажи.ТекущийДокумент.Проект;";
	    
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"
	|Себест      = Регистр.Продажи.Себестоимость;
	|Количество  = Регистр.Продажи.Количество;
	|ПродСт      = Регистр.Продажи.ПродСтоимость;
	|СебестВ     = Регистр.Продажи.СебестоимостьВ;
	|КоличествоВ = Регистр.Продажи.КоличествоВ;
	|ПродСтВ     = Регистр.Продажи.ПродСтоимостьВ;
	|Функция СуммаСебест      = Сумма(Себест);
	|Функция СуммаКоличество  = Сумма(Количество);
	|Функция СуммаПродСт      = Сумма(ПродСт);
	|Функция СуммаСебестВ     = Сумма(СебестВ);
	|Функция СуммаКоличествоВ = Сумма(КоличествоВ);
	|Функция СуммаПродСтВ     = Сумма(ПродСтВ);";
	                                             
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,               "ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Поставщик",   ВыбПоставщик,         "ВыбПоставщик",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Покупатель",  ВыбПокупатель,        "ВыбПокупатель",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	Если (ВыбСвойствоТМЦ.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоТМЦ", ВыбСвойствоТМЦ,       "ВыбСвойствоТМЦ",       ТекстЗапроса,Загол);
	КонецЕсли;                              
	Если (ВыбСвойствоПоставщика.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоПост",ВыбСвойствоПоставщика,"ВыбСвойствоПоставщика",ТекстЗапроса,Загол);
	КонецЕсли;                                     
	Если (ВыбСвойствоПокупателя.Выбран() = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоПок", ВыбСвойствоПокупателя,"ВыбСвойствоПокупателя",ТекстЗапроса,Загол);
	КонецЕсли;                                     
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Автор",   ,        ,ТекстЗапроса,Загол,"Автор");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "АвторЗаявки",   ,  ,ТекстЗапроса,Загол,"АвторЗаявки");

	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",  ,        ,ТекстЗапроса,Загол,"Проект");
	
	Если (ПустоеЗначение(глПользователь.ОсновнойСклад) = 1)
	или (глПользователь.ОсновнойСклад.Магазин = 1) Тогда
		ОптовыеСклады	= СоздатьОбъект("СписокЗначений");
		СпрСклады = СоздатьОбъект("Справочник.Склады");
		СпрСклады.НайтиПоНаименованию("Полюстровский-ОПТ");
		ОптовыеСклады.ДобавитьЗначение(СпрСклады.ТекущийЭлемент());
	    ТекстЗапроса = ТекстЗапроса + "
		|Условие(Не(МОЛ_Комиссионер в ОптовыеСклады));";
	КонецЕсли;
	
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",,,ТекстЗапроса,Загол,"МОЛ_Комиссионер");
	
	ПечЗаголовок = "Анализ продаж ("+глДоллары.Наименование+")";      
	                                    
	ПечЗаголовокСтолбца = "";  
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;

	//получим документы если нужны отборы
	СписокДокументовДляОтбора = СоздатьОбъект("СписокЗначений");

	Если ТолькоОплаченные  = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьОплаченныеИзТекущегоПериода(СписокДокументовДляОтбора);
	КонецЕсли;
	
	Если ОплаченныеВПериоде = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьОплаченныеИзПрошлогоПериода(СписокДокументовДляОтбора);
	КонецЕсли;
	
	Если флПолучилиДокументыВпериоде = 1 Тогда
		СписокДокументовДляОтбора = ПолучитьПолучилиДокументыВПериоде(СписокДокументовДляОтбора);
	КонецЕсли;
	              
	Если СписокДокументовДляОтбора.РазмерСписка() <> 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Условие(ТекДок в СписокДокументовДляОтбора);"; 
		Если СписокДокументовДляОтбора.РазмерСписка() <> 0 Тогда 
			СписокДокументовДляОтбора.Сортировать(0,1); 
			Стр = "";
			ПервыйДокумент = СписокДокументовДляОтбора.ПолучитьЗначение(1,Стр);
			ТекДатаНачала = ПервыйДокумент.ДатаДок;  
		Иначе 
			СписокДокументовДляОтбора.ДобавитьЗначение(0);
			ТекДатаНачала = ДатаНачала;
		КонецЕсли; 
	Иначе
		ТекДатаНачала = ДатаНачала;
	КонецЕсли;	
	
	ВидУслуга    = Перечисление.ВидыНоменклатуры.Услуга;
	ТекстЗапроса = ТекстЗапроса + "
		|Условие(ВидНоменклатуры <> ВидУслуга);";   
		
		
	Если флТолькоСДокументами = 1 Тогда
		ХронПозНачала 		= глХроноПозиция(ДатаНачала,"00:00:00");
		ХронПозОкончания 	= глХроноПозиция(ДатаКонца+ДнейНаДовозДокументов,"23:59:59"); 
		//Сообщить(ХронПозНачала);
		//Сообщить(ХронПозОкончания);
		ТекстЗапроса = ТекстЗапроса + "
		|Условие((ХронПоз >= ХронПозНачала) и (ХронПоз <= ХронПозОкончания));";
	КонецЕсли;	
    //***********************************
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда  
		Возврат;
	КонецЕсли;  
	//Сообщить(ТекстЗапроса);
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	НачПовт = Таб.ВысотаСекции("Кнопки");
	
	Таб.ВывестиСекцию("Шапка");
	НачПовт = НачПовт + Таб.ВысотаСекции("Шапка");
	
	Таб.ВывестиСекцию("ЗаголовокТаблицы");
	КонПовт = НачПовт + Таб.ВысотаСекции("ЗаголовокТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "АнализПродаж", "АнализПродаж");
	                         
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировку(Запрос,1);
	
	ПечатьСтроки(Запрос,0,"Всего","Всего:");              
	
	Таб.ОбластьПечати(3);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);       
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;

	Таб.Показать("Анализ продаж", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура      
//
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", "Номенклатура",  "По номенклатуре");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", "Поставщик",  "По поставщикам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", "Покупатель",  "По покупателям");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Поставщик",  "По свойствам поставщиков");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Покупатель",  "По свойствам покупателей");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "Автор",  "По авторам документов");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "АвторЗаявки",  "По авторам заявок");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Проекты", "Проект",  "По проектам");               
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Склады", "МОЛ_Комиссионер",  "По складам");

	Если ФлагВосстановленияНастройки = 0 Тогда     
		
		ВидРазделителя = 1;
		ВидЕдиницы 	   = 1;
		ПоГруппам 	   = 1;
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;    
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");
		
		ВыбПокупатель 	= глРасшифровка.Получить("ВыбПокупатель");
		ВыбПоставщик 	= глРасшифровка.Получить("ВыбПоставщик");
		ВыбТМЦ 			= глРасшифровка.Получить("ВыбТМЦ");         
		
		ВыбСвойствоТМЦ 			= глРасшифровка.Получить("ВыбСвойствоТМЦ");
		ВыбСвойствоПокупателя 	= глРасшифровка.Получить("ВыбСвойствоПокупателя");
		ВыбСвойствоПоставщика 	= глРасшифровка.Получить("ВыбСвойствоПоставщика");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		ВидЕдиницы		= глРасшифровка.Получить("ВидЕдиницы");
		ПоГруппам		= глРасшифровка.Получить("ПоГруппам");
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;            
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");


	УправлениеДиалогом();  
	
	//++Горлач
	//Ограничиваем возможность открытия отчета
	//Если НазваниеНабораПрав() = "Администратор_магазина1" тогда
		//Если ( (ИмяПользователя() <> "Энгельса_админ") И (ИмяПользователя() <> "Стахановцев_админ") И (ИмяПользователя() <> "Шугин_А")) тогда
		//Предупреждение("Вы не имеете права доступа к этому отчету!");
			//СтатусВозврата(0);
			//Возврат;
		//КонецЕсли;
	//КонецЕсли;
	//--Горлач	
	
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()   

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ДатаКонца = ПолучитьДатуТА();
                                
// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                             
ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

Группировки.ДобавитьЗначение("Фирма", 		"Фирма");  
Группировки.ДобавитьЗначение("МОЛ_Комиссионер","Филиал");
Группировки.ДобавитьЗначение("СвойствоПок", "Свойство покупателя");
Группировки.ДобавитьЗначение("Покупатель", 	"Покупатель");
Группировки.ДобавитьЗначение("СвойствоПост","Свойство поставщика");
Группировки.ДобавитьЗначение("Поставщик", 	"Поставщик");           
Группировки.ДобавитьЗначение("СвойствоТМЦ", "Свойство номенклатуры");
Группировки.ДобавитьЗначение("Номенклатура","Номенклатура");
Группировки.ДобавитьЗначение("Автор", 	"Авторы документов");
Группировки.ДобавитьЗначение("АвторЗаявки", "Авторы заявок");
Группировки.ДобавитьЗначение("Проект", 	"Проекты");
Группировки.ДобавитьЗначение("ТекДок", 	"Документы движения");

Группировки.Пометка(6,1);         

