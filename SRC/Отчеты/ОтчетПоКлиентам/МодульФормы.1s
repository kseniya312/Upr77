////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоДоговору;
Перем НомерГруппировкиПоКонтрагенту;
Перем НомерГруппировкиПоНоменклатуре;
Перем НомерГруппировкиПоДокументу;
Перем НомерГруппировкиПоДокументуОплаты;

// списки значений, в которых определены возможные типы операций
Перем СписокОперДебет, СписокОперКредит;

Перем ВалютаОтчета;          

// Последний уровень отчета, на котором расположены товары
Перем УровеньТовара;                            
                
// Вид отчета: покупатели и комиссионеры, поставщики и комитенты, общие взаиморасчеты
Перем ВидОтчета;

// Список кодов операций, движения регистров, по которым должны попадать в отчет  
Перем СписокКодов;

Процедура ВывестиГруппировку(Запрос,Ном,ТЗ) Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ        
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)
	
	Расшифровка.Установить("Обновить", Обновить);
	
	Возврат Расшифровка;
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	 1 - вниз
//							-1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	
	ТекСтр = Группировки.ТекущаяСтрока();  
	Если Группировки.ПолучитьЗначение(ТекСтр) = "КодОперации" Тогда
		Предупреждение("Группировку по документам оплаты сдвигать нельзя!", 60);   
		Возврат;
	КонецЕсли;
	ПослСдвигСтр = Группировки.РазмерСписка() - 2;
	Сдвигать = 0;
	Если ТекСтр <= ПослСдвигСтр Тогда
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда                       
			Сдвигать = 1;
		КонецЕсли;                                                                             
	Иначе                
		Если  (ТекСтр > ПослСдвигСтр+1) и (НаправлениеСдвига = -1) Тогда
			Сдвигать = 1;                                      
		ИначеЕсли НаправлениеСдвига = 1 Тогда
			Сдвигать = 1;
		Иначе			
			Предупреждение("Группировки ""Номенклатуре"" и ""По документам"" всегда находятся
			               |в конце списка.",60);
		КонецЕсли;
	КонецЕсли;
	Если Сдвигать = 1 Тогда
		Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
	КонецЕсли;
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// ЗаполнитьСписокКодов(())
//
// Параметры: 
//  ()
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ЗаполнитьСписокКодов()
	ВидОтчета = СписокВидовОтчетов.ТекущаяСтрока();

	СписокКодов = СоздатьОбъект("СписокЗначений"); 
	Если (ВидОтчета = 2) или (ВидОтчета = 3) Тогда
		СписокКодов.ДобавитьЗначение(глКО.Закупка);
		СписокКодов.ДобавитьЗначение(глКО.ЗакупкаРозница);
		СписокКодов.ДобавитьЗначение(глКО.ВозвратПоставщику);
		СписокКодов.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);
		СписокКодов.ДобавитьЗначение(глКО.ОтчетКомитенту);
	КонецЕсли;
	Если ВидОтчета = 2 Тогда
		СписокКодов.ДобавитьЗначение(глКО.ПриемНаРеализацию);
		СписокКодов.ДобавитьЗначение(глКО.ПриемНаРеализациюРозница);
		СписокКодов.ДобавитьЗначение(глКО.ВозвратКомитенту); 
	КонецЕсли;
	Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
		СписокКодов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
		СписокКодов.ДобавитьЗначение(глКО.Продажа);
		СписокКодов.ДобавитьЗначение(глКО.РозничнаяПродажа);
		СписокКодов.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
		СписокКодов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);
		СписокКодов.ДобавитьЗначение(глКО.ОтчетРеализатора);
	КонецЕсли;
	Если ВидОтчета = 1  Тогда
		СписокКодов.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
		СписокКодов.ДобавитьЗначение(глКО.ВозвратОтРеализатора);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокКодов() 

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//    
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп=Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);     
			
			// Эти группировки обрабатываются отдельно
			Если (ТекстГрупп = "Номенклатура") или (ТекстГрупп = "Документ") Тогда
				СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);  
				Если ТекстГрупп = "Номенклатура" Тогда
				    НомерГруппировкиПоНоменклатуре = СписокГруппировок.РазмерСписка();
				ИначеЕсли ТекстГрупп = "Документ" Тогда
				    НомерГруппировкиПоДокументу = СписокГруппировок.РазмерСписка();
				КонецЕсли;
				ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			    Продолжить;
			КонецЕсли;     
			
			Если  (ТекстГрупп = "Контрагент") Тогда
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Договор" Тогда
				НомерГруппировкиПоДоговору			= СписокГруппировок.РазмерСписка();
			ИначеЕсли ТекстГрупп = "Контрагент" Тогда
				НомерГруппировкиПоКонтрагенту		= СписокГруппировок.РазмерСписка();
			ИначеЕсли ТекстГрупп = "КодОперации" Тогда
				НомерГруппировкиПоДокументуОплаты	= СписокГруппировок.РазмерСписка();
			КонецЕсли;    
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  //УстановитьГруппировкиЗапроса()

//******************************************************************************
// СтрокаДокумента(Запрос, ТЗ)
//
// Параметры: 
//  Запрос - запрос.          
// 	ТЗ - таблица значений
//	Номенклатура - номенклатура, которую необходимо занести в строку табелицы.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Создает и заполняет на основании данных запроса строку таблицы по документу из запроса
//
Процедура СтрокаДокумента(Запрос, ТЗ, Номенклатура="")
	ТЗ.НоваяСтрока();  
	ТЗ.Уровень = НомерГруппировкиПоДокументу;   
	ТЗ.Подуровень = 2;
	Если ТЗ.Уровень > УровеньТовара Тогда
		УровеньТовара = ТЗ.Уровень;
	КонецЕсли;
	Для СчетчикЦикла = 1 По ТЗ.Уровень-1 Цикл
		НазвГруппировки = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
		Если НазвГруппировки <> "Номенклатура" Тогда
			ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
		Иначе
			ТЗ.Номенклатура = Номенклатура;
		КонецЕсли;
	КонецЦикла;
	ТЗ.НачОст			= 0;
	ТЗ.КонОст 			= 0;
	ТЗ.УвеличениеДолга 	= 0;
	ТЗ.УменьшениеДолга 	= 0; 
	Если (НомерГруппировкиПоНоменклатуре > НомерГруппировкиПоДокументу) или (Номенклатура = "Суммовая разница")  или (Номенклатура = "Таможенные платежи") Тогда     
		Если ВидОтчета = 3 Тогда // общие взаиморасчеты  
			ТЗ.Сумма			= Запрос.ДолгПокупателяПриход	- Запрос.ВозвратОтПокупателя;
			ТЗ.СуммаПринятая	= Запрос.ДолгПоставщикаРасход	- Запрос.ВозвратПоставщику;
		ИначеЕсли ВидОтчета = 1 Тогда // покупатели и комиссионеры
			ТЗ.Сумма			= Запрос.ДолгПокупателяПриход - Запрос.ВозвратОтПокупателя;
		ИначеЕсли ВидОтчета = 2 Тогда // поставщики
			ТЗ.Сумма			= Запрос.ДолгПоставщикаРасход - Запрос.ВозвратПоставщику;
		КонецЕсли;
	КонецЕсли;
	ТЗ.Документ 		= Запрос.Док;
КонецПроцедуры // СтрокаДокумента()      

//******************************************************************************
// СтрокаНоменклатуры(Запрос, ТЗ, Номенклатура)
//
// Параметры: 
//  Запрос, ТЗ, Номенклатура
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Создает и заполняет на основании данных запроса строку таблицы по номенклатуре
//
Процедура СтрокаНоменклатуры(Запрос, ТЗ, Номенклатура)
	ТЗ.НоваяСтрока();  
	ТЗ.Уровень = НомерГруппировкиПоНоменклатуре;  
	ТЗ.Подуровень = 2;
	Для СчетчикЦикла = 1 По ТЗ.Уровень - 1 Цикл
		НазвГруппировки = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
		Если НазвГруппировки <> "Документ" Тогда
			ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
		Иначе
			ТЗ.Документ = Запрос.Док;
		КонецЕсли;
	КонецЦикла;
	ТЗ.НачОст 		   = 0;
	ТЗ.КонОст 		   = 0;
	ТЗ.УвеличениеДолга = 0;
	ТЗ.УменьшениеДолга = 0; 
	ТЗ.Номенклатура    = Номенклатура;   
КонецПроцедуры // СтрокаНоменклатуры()

//******************************************************************************
// ОбщиеВзаиморасчеты(Рег, ТЗ, НетЦены)
//
// Параметры:
//	Рег - регистр ПартииНаличие с выбранным движением    
//	ТЗ - итоговая таблица значений    
//  НетЦены - переменная, показывающая имеется ли цена, взятая из документа или ее надо рассчитывать.
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
// Формирует строку итоговой таблицы по общим взаиморасчетам.
//                                                           
Процедура ОбщиеВзаиморасчеты(Рег, ТЗ, НетЦены)
	Если Рег.Приход = 1  Тогда                             
		Если (Рег.КодОперации = глКО.Закупка) или (Рег.КодОперации = глКО.ЗакупкаРозница) или (Рег.Вид() = "РеализованныйТовар") Тогда
		    ТЗ.Знак = "+";
			ТЗ.КоличествоПринятое = Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.СуммаПринятая = Рег.ПродСтоимость;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.КоличествоПринятое;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;  
		ИначеЕсли (Рег.КодОперации = глКО.ВозвратОтПокупателя) тогда
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = - Рег.ПродСтоимость;
				Если ТЗ.Количество <> 0 Тогда
					ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
					НетЦены = 0;
				КонецЕсли;
			Иначе									    
				Если ТЗ.Количество = 0 Тогда
					ТЗ.Сумма = - Рег.ПродСтоимость
				Иначе
					ТЗ.Сумма =  ТЗ.Цена * ТЗ.Количество;       
				КонецЕсли;
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;       
		КонецЕсли;
	Иначе                       
		Если Рег.Вид() = "РеализованныйТовар" Тогда
			ТЗ.КоличествоПринятое	= Рег.Количество; 
			
			ТЗ.СуммаПринятая = Рег.ПродСтоимость - Рег.Вознаграждение;
			ТЗ.Цена          = ?(ТЗ.КоличествоПринятое = 0, 0, ТЗ.СуммаПринятая / ТЗ.КоличествоПринятое);
			НетЦены          = 0;
			ТЗ.Количество    = 0;
			ТЗ.Сумма         = 0; 
			
		ИначеЕсли (Рег.КодОперации = глКО.Продажа) или (Рег.КодОперации = глКО.РозничнаяПродажа)или (Рег.КодОперации = глКО.РозничнаяПродажаЕНВД) или (Рег.КодОперации = глКО.ОтчетРеализатора) Тогда
			ТЗ.Знак = "-";
			ТЗ.Количество = Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = Рег.ПродСтоимость;
				Если ТЗ.Количество <> 0 Тогда
					ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
					НетЦены = 0;
				КонецЕсли;
			Иначе									    
				Если ТЗ.Количество = 0 Тогда
					ТЗ.Сумма = Рег.ПродСтоимость
				Иначе
					ТЗ.Сумма =  ТЗ.Цена * ТЗ.Количество;       
				КонецЕсли;
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;  
		ИначеЕсли (Рег.КодОперации = глКО.ВозвратПоставщику) или (Рег.КодОперации = глКО.ВозвратПоставщикуИзРозницы) Тогда
		    ТЗ.Знак = "+";
			ТЗ.КоличествоПринятое = - Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = - Рег.СуммаРуб;
				ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;      
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбщиеВзаиморасчеты()

//******************************************************************************
// Покупатели(Рег, ТЗ, НетЦены)
//
// Параметры:
//	Рег - регистр ПартииНаличие с выбранным движением    
//	ТЗ - итоговая таблица значений
//  НетЦены - переменная, показывающая имеется ли цена, взятая из документа или ее надо рассчитывать.
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
// Формирует строку итоговой таблицы по покупателям.
//                                                           
Процедура Покупатели(Рег, ТЗ, НетЦены) 
	Если Рег.Расход = 1 Тогда 
		Если Рег.Вид() = "РеализованныйТовар" Тогда
			Возврат;
		ИначеЕсли (Рег.КодОперации = глКО.Продажа) или (Рег.КодОперации = глКО.РозничнаяПродажа)или (Рег.КодОперации = глКО.РозничнаяПродажаЕНВД) или (Рег.КодОперации = глКО.ОтчетРеализатора)Тогда
			ТЗ.Знак = "-";
			ТЗ.Количество = Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = Рег.ПродСтоимость;
				Если ТЗ.Количество <> 0 Тогда
					ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
					НетЦены = 0;
				КонецЕсли;
			Иначе						
				Если ТЗ.Количество = 0 Тогда
					ТЗ.Сумма = Рег.ПродСтоимость
				Иначе
					ТЗ.Сумма =  ТЗ.Цена * ТЗ.Количество;       
				КонецЕсли;
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;       
		ИначеЕсли (Рег.КодОперации = глКО.ПередачаНаРеализацию) тогда
		    ТЗ.Знак = "+";
			ТЗ.КоличествоПринятое = Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.СуммаПринятая = Рег.ПродСтоимость;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.КоличествоПринятое;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;  
		КонецЕсли;
	Иначе 
		Если (Рег.КодОперации = глКО.ВозвратОтПокупателя) или (Рег.КодОперации = глКО.ВозвратОтПокупателяЕНВД) Тогда
		    ТЗ.Знак = "-";
			ТЗ.Количество = - Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = - Рег.ПродСтоимость;
				Если ТЗ.Количество <> 0 Тогда
					ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
					НетЦены = 0;
				КонецЕсли;
			Иначе									    
				Если ТЗ.Количество = 0 Тогда
					ТЗ.Сумма = - Рег.ПродСтоимость
				Иначе
					ТЗ.Сумма =  ТЗ.Цена * ТЗ.Количество;       
				КонецЕсли;
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;      
		ИначеЕсли (Рег.КодОперации = глКО.ВозвратОтРеализатора) Тогда
		    ТЗ.Знак = "-";
			ТЗ.КоличествоПринятое = - Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.СуммаПринятая = Рег.СуммаРуб;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.КоличествоПринятое;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;      
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Покупатели()

//******************************************************************************
// Поставщики(Рег, ТЗ, НетЦены)
//
// Параметры:
//	Рег - регистр ПартииНаличие с выбранным движением    
//	ТЗ - итоговая таблица значений
//  НетЦены - переменная, показывающая имеется ли цена, взятая из документа или ее надо рассчитывать.
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
// Формирует строку итоговой таблицы по поставщикам.
//                                                  
Процедура Поставщики(Рег, ТЗ, НетЦены)
	Если Рег.Приход = 1 Тогда
		Если (Рег.КодОперации = глКО.Закупка) или (Рег.КодОперации = глКО.ЗакупкаРозница) Тогда
			ТЗ.Знак = "-";
			ТЗ.Количество = Рег.Количество;
			Если НетЦены = 1 Тогда 
				ТЗ.Сумма = Рег.ПродСтоимость;
				ТЗ.Цена = ТЗ.Сумма/ТЗ.Количество;
				НетЦены = 0;
			Иначе						
				ТЗ.Сумма =  ТЗ.Цена * ТЗ.Количество;       
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;       
		ИначеЕсли (Рег.КодОперации = глКО.ПриемНаРеализацию) или (Рег.КодОперации = глКО.ПриемНаРеализациюРозница) тогда
		    ТЗ.Знак = "+";
			ТЗ.КоличествоПринятое = Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.СуммаПринятая = Рег.ПродСтоимость;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.КоличествоПринятое;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;  
		КонецЕсли;          
	Иначе
		Если Рег.Вид() = "РеализованныйТовар" Тогда
			ТЗ.Количество = Рег.Количество;
			
			ТЗ.Сумма      = Рег.ПродСтоимость - Рег.Вознаграждение;
			ТЗ.Цена       = ?(ТЗ.Количество = 0, 0, ТЗ.Сумма / ТЗ.Количество);
			НетЦены       = 0;
			
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;       
		ИначеЕсли (Рег.КодОперации = глКО.ВозвратПоставщику) или (Рег.КодОперации = глКО.ВозвратПоставщикуИзРозницы) Тогда
		    ТЗ.Знак = "+";
			ТЗ.Количество = - Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.Сумма = - Рег.СуммаРуб;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.Количество;
				НетЦены = 0;
			Иначе									    
				ТЗ.Сумма = ТЗ.Цена * ТЗ.Количество;       
			КонецЕсли;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;      
		ИначеЕсли (Рег.КодОперации = глКО.ВозвратКомитенту) Тогда
		    ТЗ.Знак = "+";
			ТЗ.КоличествоПринятое = - Рег.Количество;
			Если НетЦены = 1 Тогда  
				ТЗ.СуммаПринятая = Рег.ПродСтоимость;
				ТЗ.Цена = ТЗ.СуммаПринятая/ТЗ.КоличествоПринятое;
				НетЦены = 0;
			Иначе									    
				ТЗ.СуммаПринятая = ТЗ.Цена * ТЗ.КоличествоПринятое;       
			КонецЕсли;
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;      
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // Поставщики(Рег, ТЗ)


//******************************************************************************
// ВывестиГруппировку(Запрос,Ном,ТЗ)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки     
//	ТЗ - итоговая таблица значений
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном,ТЗ)
	  
	Если Ном <= КоличествоГруппировок Тогда    
		
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
	
		Если (НазваниеГруппировки = "Номенклатура") или (НазваниеГруппировки = "Документ") Тогда
			Пока Запрос.Группировка("Док") = 1 Цикл   
				Если ПустоеЗначение(Запрос.Док) = 1 Тогда
				    Продолжить;
				КонецЕсли;                                 
				Если Запрос.Док.Вид() = "ОтчетКомиссионера" Тогда
					Рег = СоздатьОбъект("Регистр.ПартииОтданные");
				ИначеЕсли Запрос.Док.Вид() = "ОтчетКомитенту" Тогда
					Рег = СоздатьОбъект("Регистр.РеализованныйТовар");
				Иначе
					Рег = СоздатьОбъект("Регистр.ПартииНаличие");
				КонецЕсли;
				ВывестиСтрокуДокумента = 0;
				Если (Запрос.КодОперации = глКО.Закупка)
				 или (Запрос.КодОперации = глКО.ЗакупкаРозница)
				 или (Запрос.КодОперации = глКО.Продажа)
				 или (Запрос.КодОперации = глКО.РозничнаяПродажа)
				 или (Запрос.КодОперации = глКО.РозничнаяПродажаЕНВД)
				 или (Запрос.КодОперации = глКО.ПередачаНаРеализацию)
				 или (Запрос.КодОперации = глКО.ВозвратПоставщику)
				 или (Запрос.КодОперации = глКО.ВозвратПоставщикуИзРозницы)
				 или (Запрос.КодОперации = глКО.ВозвратОтПокупателя)
				 или (Запрос.КодОперации = глКО.ВозвратОтПокупателяЕНВД)
				 или (Запрос.КодОперации = глКО.ВводОстатков)
				 или (Запрос.КодОперации = глКО.ВозвратОтРеализатора)
				 или (Запрос.КодОперации = глКО.ВозвратОтРеализатора)
				 или (Запрос.КодОперации = глКО.ОтчетРеализатора)
				 или (Запрос.КодОперации = глКО.ОтчетКомитенту)
				 или (НомерГруппировкиПоДокументуОплаты > 1000) Тогда
					Рег.ВыбратьДвиженияДокумента(Запрос.Док);
					Если Запрос.Док.Вид() = "РеализацияПрочее" Тогда
						Если НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу Тогда     
							УровеньТовара = Ном;
							СтрокаНоменклатуры(Запрос, ТЗ, "ПРОЧЕЕ");    
							Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
								ТЗ.Сумма = Запрос.ДолгПокупателяПриход;
							КонецЕсли;
							Если ВидОтчета = 2 Тогда
								ТЗ.Сумма = Запрос.ДолгПоставщикаРасход;
							КонецЕсли;
							Если ВидОтчета = 3 Тогда
								ТЗ.СуммаПринятая = Запрос.ДолгПоставщикаРасход;
							КонецЕсли;
							Если НомерГруппировкиПоДокументу < 1000 Тогда
								СтрокаДокумента(Запрос, ТЗ, "ПРОЧЕЕ");
								Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
									ТЗ.Сумма = Запрос.ДолгПокупателяПриход;
								КонецЕсли;
								Если ВидОтчета = 2 Тогда
									ТЗ.Сумма = Запрос.ДолгПоставщикаРасход;
								КонецЕсли;
								Если ВидОтчета = 3 Тогда
									ТЗ.СуммаПринятая = Запрос.ДолгПоставщикаРасход;
								КонецЕсли;
							КонецЕсли;
						Иначе                                                    
							ВывестиСтрокуДокумента = 1;     
							Номенклатура = "ПРОЧЕЕ";
						КонецЕсли;                                  
					КонецЕсли;
					Пока Рег.ПолучитьДвижение() = 1  Цикл
						НетЦены = 0;  
						Если Рег.Вид() <> "РеализованныйТовар" Тогда
							Если СписокКодов.НайтиЗначение(Рег.КодОперации)=0 Тогда
							    Продолжить;
							КонецЕсли;
						КонецЕсли;
						Если НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу Тогда     
							УровеньТовара = Ном;
							СтрокаНоменклатуры(Запрос, ТЗ, Рег.Номенклатура);    
							Если НомерГруппировкиПоДокументу < 1000 Тогда
								СтрокаДокумента(Запрос, ТЗ, Рег.Номенклатура);
							КонецЕсли;
						Иначе                                                    
							ВывестиСтрокуДокумента = 1;           
							Номенклатура = Рег.Номенклатура;
							СтрокаНоменклатуры(Запрос, ТЗ, Рег.Номенклатура);    
							УровеньТовара = ТЗ.Уровень;
						КонецЕсли;
						
						// Определим цену
						Док = СоздатьОбъект("Документ");         
						Док.НайтиДокумент(Запрос.Док);
						Если Док.ПолучитьСтрокуПоНомеру(Рег.НомерСтроки()) = 0 тогда 
							НетЦены = 1;
						КонецЕсли;
						Если глЕстьРеквизитШапки("Валюта", Док.Вид()) = 1 Тогда
							Если глЕстьРеквизитШапки("Курс", Док.Вид()) = 1 Тогда
							    КурсВалюты = Док.Курс;              
							Иначе
								КурсВалюты = Док.ДатаДок;
							КонецЕсли;  
							Если глЕстьРеквизитМнЧ("Цена", Док.Вид()) = 1 Тогда
								ТЗ.Цена  = глПересчет(Док.Цена, Док.Валюта, КурсВалюты, глРубли, Док.ДатаДок)/?(Док.Коэффициент=0, 1, Док.Коэффициент); 
							Иначе
								НетЦены = 1;
							КонецЕсли;
						Иначе
							Если глЕстьРеквизитШапки("Цена", Док.Вид()) = 1 Тогда
								ТЗ.Цена = Док.Цена/?(Док.Коэффициент=0, 1, Док.Коэффициент);
							Иначе
								НетЦены = 1;
							КонецЕсли;
						КонецЕсли;
						Если ВидОтчета = 3 Тогда     // Общие взаиморасчеты        
							ОбщиеВзаиморасчеты(Рег, ТЗ, НетЦены);
						ИначеЕсли ВидОтчета = 1 Тогда   // Покупатели 
							Покупатели(Рег, ТЗ, НетЦены);
						ИначеЕсли ВидОтчета = 2 Тогда // Поставщики           
							Поставщики(Рег, ТЗ, НетЦены);
						КонецЕсли;       
					КонецЦикла;        
				ИначеЕсли (Запрос.КодОперации = глКО.СуммоваяРазница)
					  или (Запрос.КодОперации = глКО.ТаможенныеПлатежи) Тогда
					
					// Суммовые разницы будем выводить отдельной строкой в группировке вместе с номенклатурой  
					Если НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу Тогда     
						СтрокаНоменклатуры(Запрос, ТЗ, Строка(Запрос.КодОперации));    
						Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
							ТЗ.Сумма = Запрос.ДолгПокупателяПриход;
						КонецЕсли;
						Если ВидОтчета = 2 Тогда
							ТЗ.Сумма = Запрос.ДолгПоставщикаРасход;
						КонецЕсли;
						Если ВидОтчета = 3 Тогда
							ТЗ.СуммаПринятая = Запрос.ДолгПоставщикаРасход;
						КонецЕсли;
						Если НомерГруппировкиПоДокументу < 1000 Тогда
							СтрокаДокумента(Запрос, ТЗ, Строка(Запрос.КодОперации));  
							УровеньТовара = ТЗ.Уровень;
						КонецЕсли;
					Иначе                                                    
						ВывестиСтрокуДокумента = 1;
						Номенклатура = Строка(Запрос.КодОперации);
						СтрокаНоменклатуры(Запрос, ТЗ, Строка(Запрос.КодОперации));    
						УровеньТовара = ТЗ.Уровень;
						Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
							ТЗ.Сумма = Запрос.ДолгПокупателяПриход;
						КонецЕсли;
						Если ВидОтчета = 2 Тогда
							ТЗ.Сумма = Запрос.ДолгПоставщикаРасход;
						КонецЕсли;
						Если ВидОтчета = 3 Тогда
							ТЗ.СуммаПринятая = Запрос.ДолгПоставщикаРасход;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ВывестиСтрокуДокумента = 1 Тогда     
					СтрокаДокумента(Запрос, ТЗ, Номенклатура);
				КонецЕсли;
			КонецЦикла;           
		ИначеЕсли НазваниеГруппировки = "КодОперации" Тогда
			Пока Запрос.Группировка(Ном) = 1 Цикл
				Пока Запрос.Группировка("Док") = 1 Цикл
					Если ((ВидОтчета = 1) или (ВидОтчета = 3)) И
					((Запрос.КодОперации = глКО.ОплатаОтПокупателя) 
					или (Запрос.КодОперации = глКО.РозничнаяПродажа) 
					или (Запрос.КодОперации = глКО.РозничнаяПродажаЕНВД) 
					или (Запрос.КодОперации = глКО.РозничнаяВыручка) 
					или (Запрос.КодОперации = глКО.РозничнаяВыручкаЕНВД) 
					или (Запрос.КодОперации = глКО.ОплатаОтПокупателяВал) 
					или (Запрос.КодОперации = глКО.ВводОстатков) 
					или (Запрос.КодОперации = глКО.ВводОстатковВал) 
					или (Запрос.КодОперации = глКО.Прочее) 
					или (Запрос.КодОперации = глКО.ЗачтенВозвратПокупателя))Тогда
						Если Запрос.ДолгРасход > 0 Тогда
							ТЗ.НоваяСтрока();
							ТЗ.Уровень = Ном; 
							ТЗ.Подуровень = 1;
							ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазваниеГруппировки, Запрос.Док);
							ТЗ.УменьшениеДолга = Запрос.ДолгРасход;
							Для СчетчикЦикла = 1 По Ном-1 Цикл
								НазвГруппировки = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
								ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
							КонецЦикла;
						КонецЕсли;
				
					КонецЕсли;
					Если ((ВидОтчета = 2) или (ВидОтчета = 3)) И
					((Запрос.КодОперации = глКО.ОплатаПоставщику)  
					или (Запрос.КодОперации = глКО.ОплатаПоставщикуВал) 
					или (Запрос.КодОперации = глКО.ВводОстатков) 
					или (Запрос.КодОперации = глКО.ВводОстатковВал) 
					или (Запрос.КодОперации = глКО.Прочее) 
					или (Запрос.КодОперации = глКО.ЗачтенВозвратПоставщику)) Тогда
						Если Запрос.ДолгПоставщикаПриход > 0 Тогда
							ТЗ.НоваяСтрока();
							ТЗ.Уровень = Ном; 
							ТЗ.Подуровень = 1;
							ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазваниеГруппировки, Запрос.Док);
							ТЗ.УменьшениеДолгаПоставщику = Запрос.ДолгПоставщикаПриход;     
							Если ВидОтчета = 2 Тогда
								ТЗ.УменьшениеДолга = Запрос.ДолгПоставщикаПриход;     
							КонецЕсли;
							Для СчетчикЦикла = 1 По Ном-1 Цикл
								НазвГруппировки = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
								ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Если КоличествоГруппировок > Ном Тогда
					ВывестиГруппировку(Запрос,Ном+1, ТЗ);
				КонецЕсли;          
			КонецЦикла;
		Иначе                                                
			Пока Запрос.Группировка(Ном) = 1 Цикл
		    
				ТЗ.НоваяСтрока();
				ТЗ.Уровень = Ном;    
				СчетчикЦикла = 0;              
				НетЦены = 0;
				Для СчетчикЦикла = 1 По Ном-1 Цикл    
					Если НазвГруппировки = "КодОперации" Тогда
						Продолжить;
					КонецЕсли;
					НазвГруппировки = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
					ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвГруппировки, Запрос.ПолучитьАтрибут(НазвГруппировки));
				КонецЦикла;
				ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазваниеГруппировки, Запрос.ПолучитьАтрибут(НазваниеГруппировки));
				ТЗ.НачОст = Запрос.ДолгНачОст;
				ТЗ.КонОст = Запрос.ДолгКонОст;   
				ТЗ.УвеличениеДолга = Запрос.ДолгРасход;
				Если ВидОтчета = 3 Тогда // общие взаиморасчеты  
					ТЗ.Сумма						= Запрос.ДолгПокупателяПриход - Запрос.ВозвратОтПокупателя;
					ТЗ.СуммаПринятая				= Запрос.ДолгПоставщикаРасход - Запрос.ВозвратПоставщику;
					ТЗ.УменьшениеДолга				= Запрос.ДолгПокупателяРасход;             
					ТЗ.УменьшениеДолгаПоставщику	= Запрос.ДолгПоставщикаПриход;
				ИначеЕсли ВидОтчета = 1 Тогда // покупатели и комиссионеры
					ТЗ.Сумма						= Запрос.ДолгПокупателяПриход - Запрос.ВозвратОтПокупателя;
					ТЗ.УменьшениеДолга				= Запрос.ДолгПокупателяРасход;  
				ИначеЕсли ВидОтчета = 2 Тогда // поставщики
					ТЗ.Сумма						= Запрос.ДолгПоставщикаРасход - Запрос.ВозвратПоставщику;;
					ТЗ.УменьшениеДолга				= Запрос.ДолгПоставщикаПриход;  
				КонецЕсли;
			
				// если есть более детальная группировка - выведем ее
				Если КоличествоГруппировок > Ном Тогда
					ВывестиГруппировку(Запрос,Ном+1, ТЗ);
				КонецЕсли;          
			
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()                                          

//******************************************************************************
// ДобПеремЗапроса(ТекстЗапроса,НазвПерем,НазвПеремРег)
//
// Параметры: 	ТекстЗапроса	- текст запроса
//				НазвПерем		- название переменной запроса
//				НазвПеремРег	- название ресурса, измерения запроса
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Добавляет в текст запроса описание переменных запроса.
//
Процедура ДобПеремЗапроса(ТекстЗапроса,НазвПерем,НазвПеремРег)
	                
	ТекстЗапроса = ТекстЗапроса + РазделительСтрок;
	ВидОтчета = СписокВидовОтчетов.ТекущаяСтрока();
	Если (ВидОтчета=1) Тогда // покупатели 
		ТекстЗапроса = ТекстЗапроса +
		НазвПерем+"	= Регистр.Покупатели."+НазвПеремРег+","+
		              "Регистр.ПартииОтданные."+НазвПеремРег+";";
	КонецЕсли;
	
	Если (ВидОтчета=2) Тогда // поставщики   
		ТекстЗапроса = ТекстЗапроса +
		НазвПерем+"	= Регистр.Поставщики."+НазвПеремРег+";";
	КонецЕсли;
	
	Если (ВидОтчета=3) Тогда // оба
		ТекстЗапроса = ТекстЗапроса +                                     
		НазвПерем + "= Регистр.Покупатели."+НазвПеремРег+","+
		              "Регистр.Поставщики."+НазвПеремРег+";";
	КонецЕсли;
	
КонецПроцедуры  //ДобПеремЗапроса()

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	Перем Запрос, ТекстЗапроса;     
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;   
	
	ЗаполнитьСписокКодов(); 
	
	// Подготовка к заполнению выходных форм данными запроса
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	 
	Таб.ИсходнаяТаблица("ОтчетПоКлиентам");        
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	    
	
	ВалютаОтчета = глРубли;
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоКлиентам");
	
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);

	Расшифровка.Установить("ВыбКонтрагент", ВыбКонтрагент);
	Расшифровка.Установить("ВыбДоговор",	ВыбДоговор);

	Расшифровка.Установить("СписокВидовОтчетов",СписокВидовОтчетов.ТекущаяСтрока());
	
	Расшифровка.Установить("Группировки",	Группировки);
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	
	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;           
	
	// Коды операций, движения по которым должны быть исключены из оплаты от покупателя
	ИсключитьИзОплатыПок = СоздатьОбъект("СписокЗначений");
	ИсключитьИзОплатыПок.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	ИсключитьИзОплатыПок.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);
	
	// Коды операций, движения по которым должны быть исключены из оплаты поставщику
	ИсключитьИзОплатыПост = СоздатьОбъект("СписокЗначений");
	ИсключитьИзОплатыПост.ДобавитьЗначение(глКО.ВозвратПоставщику);
	ИсключитьИзОплатыПост.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);
	
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;";
	ДобПеремЗапроса(ТекстЗапроса,"Фирма",		"Фирма");
	ДобПеремЗапроса(ТекстЗапроса,"УпрАналитика","Фирма.УпрАналитика");
	ДобПеремЗапроса(ТекстЗапроса,"ЮрЛицо",		"Фирма.ЮрЛицо");
	ДобПеремЗапроса(ТекстЗапроса,"Контрагент",	"Договор.Владелец");
	ДобПеремЗапроса(ТекстЗапроса,"СвойствоКонтр","Договор.Владелец.ОсновноеСвойство.ЗначениеСвойства");
	ДобПеремЗапроса(ТекстЗапроса,"Договор",		"Договор");
	ДобПеремЗапроса(ТекстЗапроса,"КодОперации",	"КодОперации");
	
	ДобПеремЗапроса(ТекстЗапроса,"Сумма","СуммаРуб");
		           
	ВидОтчета = СписокВидовОтчетов.ТекущаяСтрока();
	Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
		ТекстЗапроса =  ТекстЗапроса + "
		|ДолгПокупателя 				= Регистр.Покупатели.СуммаРуб;";
	КонецЕсли;
	Если (ВидОтчета = 2) или (ВидОтчета = 3) Тогда
		ТекстЗапроса =  ТекстЗапроса + "
		|ДолгПоставщика 				= Регистр.Поставщики.СуммаРуб;";
	КонецЕсли;
	Если ВидОтчета = 1  Тогда
		ТекстЗапроса =  ТекстЗапроса + "
		|СуммаОтд 				= Регистр.ПартииОтданные.СуммаРуб;";
	КонецЕсли;                                               
	Если ВидОтчета = 3 Тогда
		ДобПеремЗапроса(ТекстЗапроса,"Долг", "СуммаРуб");
	ИначеЕсли ВидОтчета = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Долг = Регистр.Покупатели.СуммаРуб;";
	ИначеЕсли ВидОтчета = 2 Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|Долг = Регистр.Поставщики.СуммаРуб;
		|СуммаДляПринятых = Регистр.ПартииНаличие.СуммаРуб;";
	КонецЕсли;
	ДобПеремЗапроса(ТекстЗапроса,"Док", "ТекущийДокумент");    
	Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|Функция ДолгПокупателяКонОст 	= КонОст(ДолгПокупателя);
		|Функция ДолгПокупателяНачОст 	= НачОст(ДолгПокупателя);
		|Функция ДолгПокупателяПриход 	= Приход(ДолгПокупателя);
		|Функция ДолгПокупателяРасход 	= Расход(ДолгПокупателя)Когда (Не(КодОперации в ИсключитьИзОплатыПок));
		|Функция ВозвратОтПокупателя 	= Расход(ДолгПокупателя)Когда (КодОперации в ИсключитьИзОплатыПок);";
	КонецЕсли;
	Если (ВидОтчета = 2) или (ВидОтчета = 3) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|Функция ДолгПоставщикаКонОст 	= КонОст(ДолгПоставщика);
		|Функция ДолгПоставщикаНачОст 	= НачОст(ДолгПоставщика);
		|Функция ДолгПоставщикаПриход 	= Приход(ДолгПоставщика)Когда (Не(КодОперации в ИсключитьИзОплатыПост));
		|Функция ВозвратПоставщику	 	= Приход(ДолгПоставщика)Когда (КодОперации в ИсключитьИзОплатыПост);
		|Функция ДолгПоставщикаРасход 	= Расход(ДолгПоставщика);";
	КонецЕсли;	   
	Если ВидОтчета = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|Функция Реализовано 	= Расход(СуммаОтд);";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|Функция ДолгКонОст 			= КонОст(Долг);                                                  
	|Функция ДолгНачОст 			= НачОст(Долг);
	|Функция ДолгПриход 			= Приход(Долг);
	|Функция ДолгРасход				= Расход(Долг);
	|Функция ПростоСуммаРасход		= Расход(Сумма);
	|Функция ПростоСуммаПриход		= Приход(Сумма);
	|Условие (КодОперации <> глКО.ЗачтенАвансПоставщику);
	|Условие (КодОперации <> глКО.ЗачтенАвансПокупателя);
	|Условие (КодОперации <> глКО.ЗачтенВозвратПокупателя);
	|Условие (КодОперации <> глКО.ЗачтенВозвратПоставщику);
	|Условие (КодОперации <> глКО.СторнированВозврат);
	|Условие (КодОперации <> глКО.СторнированАванс);
	|"//}}ЗАПРОС
	;
	
	Загол="";
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Контрагент",ВыбКонтрагент,"ВыбКонтрагент",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Договор",ВыбДоговор,"ВыбДоговор",ТекстЗапроса,Загол);
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ = СоздатьОбъект("ТаблицаЗначений");    
	ТЗ.НоваяКолонка("Уровень", "Число", 1, 0);
	ТЗ.НоваяКолонка("Подуровень", "Число", 1, 0);
	ТЗ.НоваяКолонка("НачОст", "Число");
	ТЗ.НоваяКолонка("КонОст", "Число");
	ТЗ.НоваяКолонка("Оплачено", "Число");
	ТЗ.НоваяКолонка("Количество", "Число");
	ТЗ.НоваяКолонка("Сумма", "Число");
	ТЗ.НоваяКолонка("КоличествоПринятое", "Число");
	ТЗ.НоваяКолонка("СуммаПринятая", "Число");
	ТЗ.НоваяКолонка("Цена", "Число"); 
	ТЗ.НоваяКолонка("УвеличениеДолга", "Число");
	ТЗ.НоваяКолонка("УменьшениеДолга", "Число"); 
	ТЗ.НоваяКолонка("УменьшениеДолгаПоставщику", "Число"); 
	ТЗ.НоваяКолонка("Знак", "Строка");         
	
	
	// Заполнение полей "Заголовок"
	Таб.ВывестиСекцию("Кнопки");
	Состояние("Заполнение выходной таблицы...");
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "ОтчетПоКлиентам", "ОтчетПоКлиентам");
	СтарыйКонтрагент = 0; 
	                           
	НомерГруппировкиПоДоговору	    	= 9999; // невозможно большое значение
	НомерГруппировкиПоКонтрагенту		= 9999; // невозможно большое значение
	НомерГруппировкиПоНоменклатуре		= 9999; // невозможно большое значение
	НомерГруппировкиПоДокументу			= 9999; // невозможно большое значение     
	НомерГруппировкиПоДокументуОплаты	= 9999; // невозможно большое значение     
	
	
	ПечЗаголовокСтолбца = "";  
	ПечЗаголовок = "Отчет по клиентам: "+ СписокВидовОтчетов.ПолучитьЗначение(СписокВидовОтчетов.ТекущаяСтрока())+", "+ВалютаОтчета;
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
    
	// Без группировки по номенклатуре отчет формировать не будем
	Если НомерГруппировкиПоНоменклатуре = 9999 Тогда
		Предупреждение("Группировка по номенклатуре должна быть обязательно установлена!");
		Возврат;
	КонецЕсли;

	Если ВидОтчета = 3 Тогда // общие взаиморасчеты
		ЗаголовокРеализация = "Реализация";
		ЗаголовокПоступление = "Поступление";
	ИначеЕсли ВидОтчета = 1 Тогда // по покупателям      
		ЗаголовокРеализация = "Реализация";
		ЗаголовокПоступление = "Комиссия";
	ИначеЕсли ВидОтчета = 2 Тогда // по поставщикам      
		ЗаголовокПоступление = "Поступление";
	КонецЕсли;	
	Таб.ВывестиСекцию("Заголовок|Начало");  
	Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
		Таб.ПрисоединитьСекцию("Заголовок"+"|Реализация");
	КонецЕсли;
	Таб.ПрисоединитьСекцию("Заголовок"+"|Поступление");
	Таб.ПрисоединитьСекцию("Заголовок"+"|Хвост");
	Таб.ВывестиСекцию("ШапкаТовара|Начало");
	Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
		Таб.ПрисоединитьСекцию("ШапкаТовара"+"|Реализация");
	КонецЕсли;
	Таб.ПрисоединитьСекцию("ШапкаТовара"+"|Поступление");
	Таб.ПрисоединитьСекцию("ШапкаТовара"+"|Хвост");

	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "ОтчетПоКлиентам", "ОтчетПоКлиентам");

	КоличествоГруппировок = СписокГруппировок.РазмерСписка();   
	УровеньТовара = КоличествоГруппировок + 1;
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл
		ТЗ.НоваяКолонка(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла));
	КонецЦикла;
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;

	
	Если НомерГруппировкиПоКонтрагенту = 9999 Тогда
		Предупреждение("Группировка по контрагенту должна быть обязательно установлена!", 60);
		Возврат;
	КонецЕсли;       
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Док;";
	                                                         
	// Если ошибка в запросе, то выход из процедуры    
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;              
	
	ВывестиГруппировку(Запрос, 1, ТЗ);
	СтрСвертки			= "";

	// Для корректного отображения документов оплаты будет сворачивать с учетом кода операции,...
	СтрГруппировок		= "";                                                                   
	
	// ... а для корректного отображения документов отгрузки (поступления) - без учета кода операции
	СтрГруппировокОтгр	= "";
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл  
		Если СписокГруппировок.получитьЗначение(СчетчикЦикла) = "КодОперации" Тогда
			СтрГруппировок		= СтрГруппировок + "Подуровень,";     
			СтрГруппировокОтгр	= СтрГруппировок + "Подуровень";     
			УровеньДокОплаты	= СчетчикЦикла;                                   
		Иначе
			СтрГруппировокОтгр	= СтрГруппировокОтгр + СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
		КонецЕсли;
		СтрГруппировок = СтрГруппировок + СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
		Если СчетчикЦикла <> СписокГруппировок.РазмерСписка() Тогда
		    СтрГруппировок		= СтрГруппировок 		+ ",";
		    СтрГруппировокОтгр	= СтрГруппировокОтгр	+ ",";
		КонецЕсли;
	КонецЦикла;        
	
	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.Выгрузить(ВремТЗ);  
		
	СтрСвертки		= СтрГруппировок		+ ",Уровень,НачОст,КонОст,Цена,Знак";
	СтрСверткиОтгр	= СтрГруппировокОтгр	+ ",Уровень,НачОст,КонОст,Цена,Знак";  
	ТЗ.Свернуть(СтрСвертки, "Количество, Сумма, КоличествоПринятое, СуммаПринятая, УвеличениеДолга, УменьшениеДолга, УменьшениеДолгаПоставщику");
	                         
	// Если у нас есть группировка по документам оплаты, то надо произвести дополнительные преобразования
	Если НомерГруппировкиПоДокументуОплаты < 1000 Тогда
	
		ВремТЗ.Свернуть(СтрСверткиОтгр, "Количество, Сумма, КоличествоПринятое, СуммаПринятая, УвеличениеДолга, УменьшениеДолга, УменьшениеДолгаПоставщику");
	
		// Удалим все строки, которые принадлежат группировкам, расположенным ниже группировки по док. оплаты
		ТЗ.ВыбратьСтроки();
		ТЗ.Сортировать("Уровень");  
		НомСтр = 0;
		ТЗ.НайтиЗначение(НомерГруппировкиПоДокументуОплаты+1, НомСтр, "Уровень"); 
		Если НомСтр > 0 Тогда
			Для СчЦикла = НомСтр по ТЗ.КоличествоСтрок() Цикл
				ТЗ.УдалитьСтроку(НомСтр); // да, удаляем одну и ту же строку
			КонецЦикла;
		КонецЕсли;
		
		// Теперь добавим строки группировок по документам оплаты из временной таблицы
		ВремТЗ.ВыбратьСтроки();
		Пока ВремТЗ.ПолучитьСтроку() = 1 Цикл
			Если ВремТЗ.Уровень > НомерГруппировкиПоДокументуОплаты Тогда
				ТЗ.НоваяСтрока();        
				ТекПозиция 	= 0;    
				ОстСтр = СтрСверткиОтгр;
				Пока 1 = 1 Цикл
					ДлинаСтроки	= СтрДлина(ОстСтр);
					ОстСтр = Сред(ОстСтр, ТекПозиция + 1);
					ТекПозиция = Найти(ОстСтр, ",");
					Если ТекПозиция = 0 Тогда
						ТекПозиция = ДлинаСтроки;
					КонецЕсли;   
					НазвКолонки = Сред(ОстСтр, 1, ТекПозиция - 1);   
					ТЗ.УстановитьЗначение(ТЗ.НомерСтроки, НазвКолонки, ВремТЗ.ПолучитьЗначение(ВремТЗ.НомерСтроки, НазвКолонки));
					ТЗ.Подуровень = 2;
					Если ТекПозиция = ДлинаСтроки Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;      
				ТЗ.Количество				= ВремТЗ.Количество;
				ТЗ.Сумма					= ВремТЗ.Сумма;
				ТЗ.КоличествоПринятое		= ВремТЗ.КоличествоПринятое;
				ТЗ.СуммаПринятая			= ВремТЗ.СуммаПринятая;
				ТЗ.УвеличениеДолга			= ВремТЗ.УвеличениеДолга;
				ТЗ.УменьшениеДолга			= ВремТЗ.УменьшениеДолга;
				ТЗ.УменьшениеДолгаПоставщику= ВремТЗ.УменьшениеДолгаПоставщику;
			КонецЕсли;                                                                                       
		КонецЦикла;
		
	КонецЕсли;     
	
	ТЗ.Сортировать(СтрГруппировок, 1);
	ТЗ.ВыбратьСтроки();
	СтарыйКонтрагент = 0;                      
	СуммаПринятая = 0;
	СуммаВсего = 0;    
	УровеньПред = 0;                  
	ВремТЗ = СоздатьОбъект("ТаблицаЗначений");
	ТЗ.Выгрузить(ВремТЗ);  
	ТЗ.ВыбратьСтроки();    
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
	    Если ТЗ.Уровень < УровеньТовара Тогда   
			Если (НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу) и (ТЗ.Уровень = НомерГруппировкиПоНоменклатуре) Тогда
				ТЗ.Сумма = 0;
			КонецЕсли;
			Если (ВидОтчета <> 3) 
				или ((НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу) и (ТЗ.Уровень = НомерГруппировкиПоНоменклатуре)) Тогда
				ТЗ.СуммаПринятая = 0;
			КонецЕсли;
	        ВремТЗ.ВыбратьСтроки();
			Пока ВремТЗ.ПолучитьСтроку()=1  Цикл    
			    Если ВремТЗ.НомерСтроки <= ТЗ.НомерСтроки Тогда
			        Продолжить;
				КонецЕсли;     
				Если ВремТЗ.Уровень <= ТЗ.Уровень Тогда
					Прервать;
				КонецЕсли;
				Если ВремТЗ.Уровень = УровеньТовара Тогда
					Если (НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу) и (ТЗ.Уровень = НомерГруппировкиПоНоменклатуре) Тогда
						ТЗ.Сумма = ТЗ.Сумма + ВремТЗ.Сумма;
					КонецЕсли;
					Если (ВидОтчета <> 3)
						или ((НомерГруппировкиПоНоменклатуре < НомерГруппировкиПоДокументу) и (ТЗ.Уровень = НомерГруппировкиПоНоменклатуре))Тогда
						ТЗ.СуммаПринятая = ТЗ.СуммаПринятая + ВремТЗ.СуммаПринятая;
					КонецЕсли;
					Если ВремТЗ.Уровень >= НомерГруппировкиПоНоменклатуре Тогда
						ТЗ.Количество = ТЗ.Количество + ВремТЗ.Количество;
						ТЗ.КоличествоПринятое = ТЗ.КоличествоПринятое + ВремТЗ.КоличествоПринятое;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;                                          
	КонецЦикла;                                             
	ТЗ.ВыбратьСтроки();      
	Пока ТЗ.ПолучитьСтроку() = 1  Цикл      
		Если ТЗ.Уровень = УровеньДокОплаты Тогда
			ТЗ.Количество = 0;
			ТЗ.Сумма = 0;
			ТЗ.КоличествоПринятое = 0;
			ТЗ.СуммаПринятая = 0;
		КонецЕсли;
		Таб.ВывестиСекцию("Строка"+СокрЛП(ТЗ.Уровень)+"|Начало"); 
		Таб.ПрисоединитьСекцию("Строка"+СокрЛП(ТЗ.Уровень)+"|Реализация");
		Если (ВидОтчета = 1) или (ВидОтчета = 3) Тогда
			Таб.ПрисоединитьСекцию("Строка"+СокрЛП(ТЗ.Уровень)+"|Поступление");
		КонецЕсли;
		Таб.ПрисоединитьСекцию("Строка"+СокрЛП(ТЗ.Уровень)+"|Хвост");
	КонецЦикла;

	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Отчет по клиентам", "");

	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", "Контрагент",  "По контрагентам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Контрагент",  "По свойствам контрагентов");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	
	Если ФлагВосстановленияНастройки = 0 Тогда
		
		СписокВидовОтчетов.ТекущаяСтрока(3);   
		
		ВидРазделителя = 1;
		ВыбВидВалюты   = 1;		
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;   

	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");

		ВыбКонтрагент 	= глРасшифровка.Получить("ВыбКонтрагент");
		ВыбДоговор 		= глРасшифровка.Получить("ВыбДоговор");
		
		ПоОперациям 	= глРасшифровка.Получить("ПоОперациям");
		СписокВидовОтчетов.ТекущаяСтрока(глРасшифровка.Получить("СписокВидовОтчетов"));
		
		ВыбВидВалюты 	= глРасшифровка.Получить("ВыбВидВалюты");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);  

		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;

	 	Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()
                                 
//******************************************************************************
Процедура ПриВыбореЗакладки(Номер,Значение)	// Предопределенная процедура
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";

ДатаКонца = ПолучитьДатуТА();

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

СписокВидовОтчетов.ДобавитьЗначение("По покупателям");
СписокВидовОтчетов.ДобавитьЗначение("По поставщикам");
СписокВидовОтчетов.ДобавитьЗначение("Общие взаиморасчеты");

Группировки.ДобавитьЗначение("Фирма",        "Фирма");
Группировки.ДобавитьЗначение("СвойствоКонтр","Свойство контрагента");
Группировки.ДобавитьЗначение("Контрагент",   "Контрагент");
Группировки.ДобавитьЗначение("Договор",      "Договор");
Группировки.ДобавитьЗначение("КодОперации", "Документ оплаты");
Группировки.ДобавитьЗначение("Номенклатура", "Номенклатура");
Группировки.ДобавитьЗначение("Документ", "Документ движения ТМЦ");

Группировки.Пометка(1, 1);
Группировки.Пометка(3, 1);
Группировки.Пометка(4, 1);
Группировки.Пометка(6, 1);