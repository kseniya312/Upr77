////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//   
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ 

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 
                        
// переменные предназначены для механизма универсальных группировок отчета
Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;      
Перем НомерГруппировкиПоСвойствуТМЦ;      
Перем ВалютаОтчета;             

// Таблица значений для формирования отчета
Перем тз;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ    
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      

	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	        

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Если (ВыбСвойствоТМЦ.		Выбран()=1) 
		 или (ВыбСвойствоПоставщика.Выбран()=1)
		 или (ВыбСвойствоПокупателя.Выбран()=1) 
		 Тогда     
		 	ДопСлой = "ВыбСвойства,";
		 Иначе                    
		 	ДопСлой = "";
		 КонецЕсли;
		Форма.ИспользоватьСлой(ДопСлой+"Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************                                                    
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)  
	
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;                       
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ВалютаВзаиморасчетовПоДокументу(Документ)
//
// Параметры: 
//  Документ
//
// Возвращаемое значение:
//  Валюта взаиморасчетов данного документа.
//
// Описание:
//  Возврашает валют взаиморасчетов по переданному документу.
//
Функция ВалютаВзаиморасчетовПоДокументу(Документ)
	
	Если глЕстьРеквизитШапки("Договор", Документ.Вид()) = 1 Тогда
	    Если Документ.Договор.Выбран() = 1  Тогда
			Если Документ.Договор.ВалютаВзаиморасчетов.Выбран() = 1 Тогда
		        Возврат Документ.Договор.ВалютаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;                                            
	КонецЕсли;   
	
	Возврат ПолучитьПустоеЗначение("Справочник.Валюты");
КонецФункции // ВалютаВзаиморасчетовПоДокументу()


//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	-1 - вниз
//							 1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	
	ТекСтр = Группировки.ТекущаяСтрока();
	ПослСдвигСтр = Группировки.РазмерСписка();
	Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда
		Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
	КонецЕсли;
	
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//       
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	                       
	НомерГруппировкиПоТМЦ = 9999;
	НомерГруппировкиПоСвойствуТМЦ = 9999;
	
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп		= Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Поставщик") или (ТекстГрупп = "Покупатель") или 
				  ((ТекстГрупп = "Номенклатура") и (ПоГруппам = 0)) Тогда
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Номенклатура" Тогда
				НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();  
			ИначеЕсли ТекстГрупп = "СвойствоТМЦ" Тогда
				НомерГруппировкиПоСвойствуТМЦ = СписокГруппировок.РазмерСписка();  
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры // УстановитьГруппировкиЗапроса()

//******************************************************************************
// ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                                
Процедура ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка = "", ПечДатаДок = 0, ЕстьКоличество = 0)
	                         
	ПечЕд = "";
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		Если Запрос.ЭтоГруппа("Номенклатура") = 0 Тогда
			ПечЕд 	= ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);  
			тз.ПечЕд = ПечЕд;
		Иначе                
			ЕстьКоличество = 0;
			// если не в базовых единицах, то не имеет смысла количество
		КонецЕсли;
	Иначе
		ПечКол = "";
	КонецЕсли;
	тз.ТекРасшифровка = ТекРасшифровка;
	
	Если ВыводитьЗаявки = 1 Тогда
		тз.Поступило 		= Формат(Запрос.Поступило, "Ч-12.2"); 
		тз.Удовлетворено 	= Формат(Запрос.Удовлетворено, "Ч-12.2");
		тз.Снято 			= Формат(Запрос.Снято, "Ч-12.2");
	КонецЕсли;
    
	Если ВыводитьЗаказы = 1 Тогда
		тз.Заказано 		= Формат(Запрос.Заказано, "Ч-12.2");
		тз.Получено 		= Формат(Запрос.Получено, "Ч-12.2");     
	КонецЕсли;
		

	Если ВыводитьТМЦ = 1 Тогда
		тз.Приход			= Формат(Запрос.ТМЦПриход, "Ч-12.2");
		тз.Расход  			= Формат(Запрос.ТМЦРасход, "Ч-12.2");
	КонецЕсли;

	Если ВыводитьДеньги = 1 Тогда
		тз.ОплатаПриход		= Формат(Запрос.ОплатаПриход, "Ч-12.2");
		тз.ОплатаРасход		= Формат(Запрос.ОплатаРасход, "Ч-12.2");
	КонецЕсли;
	
	глОживить(1);   
	тз.ЕстьКоличество = ЕстьКоличество;
	Если ЕстьКоличество = 1 тогда    
		Если ВыводитьЗаявки = 1 тогда
			тз.ПоступилоКол 		= ?(ПечЕд.Коэффициент=0, 0, Запрос.ПоступилоКол / ПечЕд.Коэффициент);
			тз.УдовлетвореноКол 	= ?(ПечЕд.Коэффициент=0, 0, Запрос.УдовлетвореноКол / ПечЕд.Коэффициент);
			тз.СнятоКол 			= ?(ПечЕд.Коэффициент=0, 0, Запрос.СнятоКол / ПечЕд.Коэффициент);
		КонецЕсли;
		
		Если ВыводитьЗаказы = 1 тогда
			тз.ЗаказаноКол 		= ?(ПечЕд.Коэффициент=0, 0, Запрос.ЗаказаноКол / ПечЕд.Коэффициент);
			тз.ПолученоКол 		= ?(ПечЕд.Коэффициент=0, 0, Запрос.ПолученоКол / ПечЕд.Коэффициент);
		КонецЕсли;      
		
		Если ВыводитьТМЦ = 1 тогда
			тз.ПриходКол			= ?(ПечЕд.Коэффициент=0, 0, Запрос.ТМЦПриходКол / ПечЕд.Коэффициент);
			тз.РасходКол  			= ?(ПечЕд.Коэффициент=0, 0, Запрос.ТМЦРасходКол / ПечЕд.Коэффициент);         
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ПечатьСтроки()

//******************************************************************************
// ПечатьТаблицы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обрабатывает и выводит на печать таблицу отчета
//                                                 
Процедура ПечатьТаблицы()
	СтрСортировки = "";
	тз.ВыбратьСтроки();
	Пока тз.ПолучитьСтроку()=1 Цикл
	    Если ПустоеЗначение(тз.Валюта)=1 Тогда
	        тз.Валюта = ВалютаОтчета;
	    КонецЕсли;
	КонецЦикла;
	СчетчикЦикла = 0;             
	
	// Теперь отсортируем ТМЦ по группам
	Если (ПоГруппам = 1) и (СписокГруппировок.НайтиЗначение("Номенклатура") <> 0) Тогда
	    тз.НоваяКолонка("ПолнНаименование", "Строка");
		тз.ВыбратьСтроки();
		Пока тз.ПолучитьСтроку() = 1  Цикл
			Если ТипЗначенияСтр(тз.Номенклатура) = "Справочник" Тогда
	 		   тз.ПолнНаименование = тз.Номенклатура.ПолноеНаименование(); 
			КонецЕсли;
		КонецЦикла;                                             
	КонецЕсли;	                                                
	ЕстьНоменклатура = 0;
	Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл      
		Если (СписокГруппировок.ПолучитьЗначение(СчетчикЦикла) = "Номенклатура") и (ПоГруппам = 1) Тогда
			СтрСортировки = СтрСортировки + "ПолнНаименование,";
			ЕстьНоменклатура = 1;
		Иначе
			СтрСортировки = СтрСортировки + СписокГруппировок.ПолучитьЗначение(СчетчикЦикла) + ",";
		КонецЕсли;
	КонецЦикла;
	СтрСортировки = СтрСортировки + " Валюта";   
	тз.ВыбратьСтроки();                     
	СтрЗначений="";                  
	ЕстьЗначение = "";
	Если ВыводитьЗаявки = 1 Тогда
	    СтрЗначений = СтрЗначений + "Поступило, Удовлетворено, Снято, ПоступилоКол, УдовлетвореноКол, СнятоКол";
		ЕстьЗначение = ",";
	КонецЕсли;            
	Если ВыводитьЗаказы = 1 Тогда
	    СтрЗначений = СтрЗначений + ЕстьЗначение + "Заказано, Получено, ЗаказаноКол, ПолученоКол";
		ЕстьЗначение = ",";
	КонецЕсли;                   
	Если ВыводитьТМЦ = 1 Тогда
	    СтрЗначений = СтрЗначений + ЕстьЗначение + "Приход, Расход, ПриходКол, РасходКол";
		ЕстьЗначение = ",";
	КонецЕсли;       
	Если ВыводитьДеньги = 1 Тогда
	    СтрЗначений = СтрЗначений + ЕстьЗначение + "ОплатаПриход, ОплатаРасход";
	КонецЕсли;       
	СтрПрочих = ", ПечТекстСтроки, ПечЕД, Уровень, ЕстьКоличество, ТекРасшифровка";
	Если ЕстьНоменклатура = 1 Тогда
	    СтрПрочих = СтрПрочих + ", Номенклатура";
	КонецЕсли;
	тз.Свернуть(СтрСортировки+СтрПрочих, СтрЗначений);
	тз.Сортировать(СтрСортировки, 1);  
	
	УровеньПред = 0;
	ПечТекстСтрокиПред = "";
	Пока тз.ПолучитьСтроку() = 1 цикл
		Если тз.Уровень = 0 Тогда
		    Продолжить;
		КонецЕсли;     
		ПечТекстСтроки = тз.ПечТекстСтроки;   
		ПечВалюта = тз.Валюта;      
		ПечЕд = тз.ПечЕд;
		ТекРасшифровка = тз.ТекРасшифровка;
		НазвГруппировки = СписокГруппировок.ПолучитьЗначение(тз.Уровень);
		Если НазвГруппировки = "Документ" Тогда  
			НазвСекции = "Документ";                
			ПечДатаДок = тз.Документ.ДатаДок;
		Иначе
			НазвСекции = "Строка" + СокрЛП(тз.Уровень);
		КонецЕсли;  
		
		// Группы надо выделять 
		Если НазвГруппировки = "Номенклатура" Тогда
			Если ТипЗначенияСтр(тз.Номенклатура) = "Справочник" Тогда
				Если тз.Номенклатура.ЭтоГруппа() = 1 Тогда
				    НазвСекции = НазвСекции + "Г";
				КонецЕсли;  
			КонецЕсли;
		КонецЕсли;             
		
		Если (УровеньПред = тз.Уровень) и (ПечТекстСтрокиПред = ПечТекстСтроки) Тогда
		    Таб.ВывестиСекцию(НазвСекции + "Кол|Начало");
		Иначе
			Таб.ВывестиСекцию(НазвСекции + "|Начало");
		КонецЕсли;        
		Таб.ПрисоединитьСекцию(НазвСекции + "|Вал");
		Если ВыводитьЗаявки = 1 Тогда
			ПечПоступило = Формат(тз.Поступило, "Ч012.2.'");
			ПечУдовлетворено = Формат(тз.Удовлетворено, "Ч012.2.'");
			ПечСнято = Формат(тз.Снято, "Ч012.2");
		    Таб.ПрисоединитьСекцию(НазвСекции + "|Заявки");
		КонецЕсли;
		Если ВыводитьЗаказы = 1 Тогда
			ПечЗаказано = Формат(тз.Заказано, "Ч012.2.'");
			ПечПолучено = Формат(тз.Получено, "Ч012.2.'");
		    Таб.ПрисоединитьСекцию(НазвСекции + "|Заказы");
		КонецЕсли;
		Если ВыводитьТМЦ = 1 Тогда
			ПечПриход = Формат(тз.Приход, "Ч012.2.'");
			ПечРасход = Формат(тз.Расход, "Ч012.2.'");
		    Таб.ПрисоединитьСекцию(НазвСекции + "|ТМЦ");
		КонецЕсли;              
		Если ВыводитьДеньги = 1 Тогда
			ПечОплатаРасход = Формат(тз.ОплатаРасход, "Ч012.2");
			ПечОплатаПриход = Формат(тз.ОплатаПриход, "Ч012.2");
		    Таб.ПрисоединитьСекцию(НазвСекции + "|Деньги");
			КонецЕсли;              
		Если тз.ЕстьКоличество = 1 Тогда
			Если НазвГруппировки = "Документ" Тогда  
				НазвСекции = "ДокументКол";
			Иначе
				НазвСекции = "Строка" + СокрЛП(тз.Уровень)+"Кол";
			КонецЕсли;
			Таб.ВывестиСекцию(НазвСекции + "|Начало");
			Таб.ПрисоединитьСекцию(НазвСекции + "|Вал");
			Если ВыводитьЗаявки = 1 Тогда
				ПечПоступило 	 = Формат(тз.ПоступилоКол, "Ч012.3");
				ПечУдовлетворено = Формат(тз.УдовлетвореноКол, "Ч012.3");
				ПечСнято 		 = Формат(тз.СнятоКол, "Ч012.3,");
			    Таб.ПрисоединитьСекцию(НазвСекции + "|Заявки");
			КонецЕсли;
			Если ВыводитьЗаказы = 1 Тогда
				ПечЗаказано = Формат(тз.ЗаказаноКол, "Ч012.3");
				ПечПолучено = Формат(тз.ПолученоКол, "Ч012.3");
			    Таб.ПрисоединитьСекцию(НазвСекции + "|Заказы");
			КонецЕсли;
			Если ВыводитьТМЦ = 1 Тогда
				ПечРасход = Формат(тз.РасходКол, "Ч012.3");
				ПечПриход = Формат(тз.ПриходКол, "Ч012.3");
			    Таб.ПрисоединитьСекцию(НазвСекции + "|ТМЦ");
			КонецЕсли;              
			Если ВыводитьДеньги = 1 Тогда
			    Таб.ПрисоединитьСекцию(НазвСекции + "|Деньги");
			КонецЕсли;              
		КонецЕсли;
		УровеньПред = тз.Уровень;
		ПечТекстСтрокиПред = ПечТекстСтроки;
	КонецЦикла;
	Таб.ВывестиСекцию("Всего|Начало");
	Таб.ПрисоединитьСекцию("Всего|Вал");
	Если ВыводитьЗаявки = 1 Тогда
		Таб.ПрисоединитьСекцию("Всего|Заявки");
	КонецЕсли;
	Если ВыводитьЗаказы = 1 Тогда
		Таб.ПрисоединитьСекцию("Всего|Заказы");
	КонецЕсли;
	Если ВыводитьТМЦ = 1 Тогда
		Таб.ПрисоединитьСекцию("Всего|ТМЦ");
	КонецЕсли;
	Если ВыводитьДеньги = 1 Тогда
		Таб.ПрисоединитьСекцию("Всего|Деньги");
	КонецЕсли;
КонецПроцедуры // ПечатьТаблицы()


//******************************************************************************
// ВывестиГруппировку(Запрос,Ном)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном, ЕстьКоличествоПар = 0)
	  
	Если Ном <= КоличествоГруппировок Тогда                           
		                                    
		Если Ном = 0 Тогда
		    НазваниеГруппировки = "Валюта";
		Иначе
			НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		КонецЕсли;    
		Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1) Тогда
			НомГруппировки = Ном + 1;
		Иначе
			НомГруппировки = Ном;		    
		КонецЕсли;
		Пока Запрос.Группировка(НомГруппировки) = 1 Цикл
			
			// Если номенклатура или свойство номенклатуры, то оплаты быть не должно.
			// Если оплата все-таки есть, значит это строки с пустыми значениями, которые выводить не надо.
			Если (НазваниеГруппировки = "Номенклатура") или (НазваниеГруппировки = "СвойствоТМЦ") Тогда
				Если ВыводитьДеньги = 1 Тогда
					Если (Запрос.ОплатаПриход <> 0) или (Запрос.ОплатаРасход <> 0) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;  
			
			тз.НоваяСтрока();
		    тз.Уровень = Ном;                   
			
			ЕстьКоличество = ЕстьКоличествоПар;
			Если НазваниеГруппировки = "Документ" Тогда
				НазваниеСекции="Документ";   
			ИначеЕсли Запрос.ЭтоГруппа(НазваниеГруппировки) = 1 Тогда
				НазваниеСекции="Строка"+СокрЛП(Ном)+"Г";
			Иначе
				НазваниеСекции="Строка"+Ном;
			КонецЕсли;                                          
			
			
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки); 
			СчетчикЦикла = 0;
			Для СчетчикЦикла = 1 По Ном Цикл       
				Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1) Тогда
					Если СчетчикЦикла = 1  Тогда
					    Назв = "Валюта";
					Иначе
						Назв = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла-1);
					КонецЕсли;
				Иначе
					Назв = СписокГруппировок.ПолучитьЗначение(СчетчикЦикла);
				КонецЕсли;						
				тз.УстановитьЗначение(тз.НомерСтроки, Назв, Запрос.ПолучитьАтрибут(Назв));
			КонецЦикла;
			тз.УстановитьЗначение(тз.НомерСтроки, НазваниеГруппировки, ПечТекстСтроки);
			Расшифровка = ПечТекстСтроки;
			Если НазваниеГруппировки = "Документ" Тогда
				ПечДатаДок = ПечТекстСтроки.ДатаДок;
				ПечТекстСтроки = ""+глНазваниеДокументаВЖурнале(ПечТекстСтроки)+" № "+ПечТекстСтроки.НомерДок+ " (" +
				                    СокрЛП(глИнформацияПоДокументуВЖурнале(ПечТекстСтроки)) + ")";
			ИначеЕсли НазваниеГруппировки = "Номенклатура" тогда
				ЕстьКоличество = 1;
			КонецЕсли;
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки),ПечТекстСтроки);
			тз.ПечТекстСтроки = Строка(ПечТекстСтроки);
		
			ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,Расшифровка, ПечДатаДок, ЕстьКоличество);
		
			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда
				ВывестиГруппировку(Запрос,Ном+1,ЕстьКоличество);
			КонецЕсли;          
		
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()     

//******************************************************************************
// ДобавитьПеременнуюВЗапрос(ТекстЗапроса, ИмяПеременной, ЗначениеПеременной)
//
// Параметры: 
//  ТекстЗапроса   		- текст формируемого запроса
//  ИмяПеременной       - имя, добавляемой переменной
//  ЗначениеПеременной  - строка, определяющая значение переменной
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет переменную в запрос, определяя ее значения в зависимости от установленных флагов
// вывода информации
//
Процедура ДобавитьПеременнуюВЗапрос(ТекстЗапроса, ИмяПеременной, ЗначениеПеременной)
	ЕстьЗНачение = 0;
	ТекстЗапроса = ТекстЗапроса + "
	|" + ИмяПеременной + " = ";
	Если ВыводитьЗаявки = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Заявки." + ЗначениеПеременной;
		ЕстьЗначение = 1;
	КонецЕсли;	         
	Если ВыводитьЗаказы = 1 Тогда                    
		Если ЕстьЗначение = 1 Тогда
		    ТекстЗапроса = ТекстЗапроса + ",";
		КонецЕсли;
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Заказы." + ЗначениеПеременной;
		ЕстьЗначение = 1;
	КонецЕсли;
	Если ВыводитьТМЦ = 1 Тогда                    
		Если ЕстьЗначение = 1 Тогда
		    ТекстЗапроса = ТекстЗапроса + ",";
		КонецЕсли;
	    ТекстЗапроса = ТекстЗапроса + "Регистр.ПартииНаличие." + ЗначениеПеременной;
		ЕстьЗначение = 1;
	КонецЕсли;
	Если (ВыводитьДеньги = 1) и (ИмяПеременной <> "Номенклатура") и (ИмяПеременной <> "СвойствоТМЦ") Тогда                    
		Если ЕстьЗначение = 1 Тогда
		    ТекстЗапроса = ТекстЗапроса + ",";
		КонецЕсли;
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Покупатели." + ЗначениеПеременной;
	    ТекстЗапроса = ТекстЗапроса + ",";
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Поставщики." + ЗначениеПеременной;
		ЕстьЗначение = 1;
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + ";";
	
КонецПроцедуры // ДобавитьПеременнуюВЗапрос()


//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;          
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;        
	
	Если (ВыводитьЗаявки = 0) и (ВыводитьЗаказы = 0) и (ВыводитьТМЦ = 0) и (ВыводитьДеньги = 0) Тогда
	    Предупреждение("Задайте состав выводимой информации!");
		Возврат;
	КонецЕсли;          
	
	ВалютаОтчета = ?(Валюта = 1, глРубли, глДоллары);
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	                                        
	Таб.ИсходнаяТаблица( "ОтчетПоПроектам" );
	    
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	  
	
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоПроектам");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);
	
	Расшифровка.Установить("ВыбТМЦ",		ВыбТМЦ);
	Расшифровка.Установить("ВыбПроект",		ВыбПроект);
	Расшифровка.Установить("Группировки",	Группировки);
	Расшифровка.Установить("ВидЕдиницы",	ВидЕдиницы);  
	Расшифровка.Установить("ПоГруппам",		ПоГруппам);    
	Расшифровка.Установить("Валюта",		Валюта);    
	Расшифровка.Установить("ВыводитьЗаказы",ВыводитьЗаказы);    
	Расшифровка.Установить("ВыводитьЗаявки",ВыводитьЗаявки);    
	Расшифровка.Установить("ВыводитьТМЦ",	ВыводитьТМЦ);    
	Расшифровка.Установить("ВыводитьДеньги",ВыводитьДеньги);    
	
	Расшифровка.Установить("ВыбСвойствоТМЦ",		ВыбСвойствоТМЦ);

	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;";
	
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "Фирма", "Фирма");
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "УпрАналитика", "Фирма.УпрАналитика");
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "ЮрЛицо", "Фирма.ЮрЛицо"); 
	
	Если (ВыводитьЗаказы = 1) или (ВыводитьЗаявки = 1) или (ВыводитьТМЦ = 1) Тогда
		ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "Номенклатура", "Номенклатура");
		ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "СвойствоТМЦ", "Номенклатура.ОсновноеСвойство.ЗначениеСвойства");
	КонецЕсли;
	
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "Док", "ТекущийДокумент");
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "Проект", "ТекущийДокумент.Проект");
	ДобавитьПеременнуюВЗапрос(ТекстЗапроса, "Автор", "ТекущийДокумент.Автор"); 
	ЕстьЗначение = 0;  
	Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1) Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|Валюта = ";
	КонецЕсли;
	Если ВыводитьЗаявки = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Заявки.ДоговорПокупателя.ВалютаВзаиморасчетов";
		ЕстьЗначение = 1;		
	КонецЕсли;  
	
	Если ВыводитьЗаказы = 1 Тогда
		Если ЕстьЗначение = 1 Тогда
		    ТекстЗапроса = ТекстЗапроса + ",";
		КонецЕсли;
	    ТекстЗапроса = ТекстЗапроса + "Регистр.Заказы.ДоговорПоставщика.ВалютаВзаиморасчетов";
		ЕстьЗначение = 1;		
	КонецЕсли;   
	Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1) Тогда
		ТекстЗапроса = ТекстЗапроса + ";";
	КонецЕсли;

	НомСтроки = 0;
	НомКолонки = 0;
	                     
	Если ВыводитьТМЦ = 1 Тогда
		Если Валюта = 1 Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|ТМЦСумма	 = Регистр.ПартииНаличие.СуммаРуб;";
		Иначе    
			ТекстЗапроса = ТекстЗапроса +
			"
			|ТМЦСумма	 = Регистр.ПартииНаличие.СуммаУпр;";
		КонецЕсли;
	КонецЕсли;

	Если ВыводитьТМЦ = 1 Тогда
		ТекстЗапроса = ТекстЗапроса + 
		"
		|ТМЦКол		 = Регистр.ПартииНаличие.Количество;";
	КонецЕсли;	                               
	
	Если ВыводитьДеньги = 1 Тогда
		Если Валюта = 1 Тогда
			ТекстЗапроса = ТекстЗапроса +
			"
			|Оплата		 = Регистр.Покупатели.СуммаРуб,Регистр.Поставщики.СуммаРуб;";
		Иначе    
			ТекстЗапроса = ТекстЗапроса +
			"
			|Оплата		 = Регистр.Покупатели.СуммаУпр,Регистр.Поставщики.СуммаУпр;";
		КонецЕсли;                                                                   
		ТекстЗапроса = ТекстЗапроса + 
		"
		|КодОперации	 = Регистр.Покупатели.КодОперации, Регистр.Поставщики.КодОперации;";
	КонецЕсли;	                               
		
	
	Если ВыводитьЗаявки = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|ЗаявкиСумма = Регистр.Заявки.СтоимостьРасход;
		|ЗаявкиКол	 = Регистр.Заявки.КоличествоРасход;
		|Функция Поступило 		  = Приход(ЗаявкиСумма);
		|Функция ПоступилоКол	  = Приход(ЗаявкиКол);
		|Функция Удовлетворено	  = Расход(ЗаявкиСумма) Когда (Док.Вид() <> ""ОтменаЗаявок"");
		|Функция Снято			  = Расход(ЗаявкиСумма) Когда (Док.Вид() = ""ОтменаЗаявок"");
		|Функция УдовлетвореноКол = Расход(ЗаявкиКол) Когда ((Док.Вид() <> ""ОтменаЗаявок"") и (Док.Вид() <> ""ЗаявкаПокупателя""));
		|Функция СнятоКол		  = Расход(ЗаявкиКол) Когда (Док.Вид() = ""ОтменаЗаявок"");";
	КонецЕсли;                                           
	
	Если ВыводитьЗаказы = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|ЗаказыСумма = Регистр.Заказы.СтоимостьПриход;
		|ЗаказыКол	 = Регистр.Заказы.КоличествоПриход;
		|Функция Заказано 		  = Приход(ЗаказыСумма);
		|Функция ЗаказаноКол	  = Приход(ЗаказыКол);
		|Функция Получено 		  = Расход(ЗаказыСумма);
		|Функция ПолученоКол	  = Расход(ЗаказыКол);";
	КонецЕсли;

	Если ВыводитьТМЦ = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Функция ТМЦПриход	 	  = Приход(ТМЦСумма);
		|Функция ТМЦПриходКол 	  = Приход(ТМЦКол);
		|Функция ТМЦРасход	 	  = Расход(ТМЦСумма);
		|Функция ТМЦРасходКол 	  = Расход(ТМЦКол);";
	КонецЕсли;
	                                             
	Если ВыводитьДеньги = 1 Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Функция ОплатаРасход 	  = Приход(Оплата)Когда(КодОперации в СписокКодовОплаты);
		|Функция ОплатаПриход 	  = Расход(Оплата)Когда((КодОперации в СписокКодовОплаты) или (КодОперации в СписокКодовПриходаОплаты));";
	КонецЕсли;  
	
	СписокКодовОплаты = СоздатьОбъект("СписокЗначений");
	СписокКодовОплаты.ДобавитьЗначение(глКО.ОплатаОтПокупателя);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ОплатаПоставщику);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыОтПоставщика);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыОтПоставщикаВал);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыПокупателю);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ОплатаОтПокупателяВал);
	СписокКодовОплаты.ДобавитьЗначение(глКО.ОплатаПоставщикуВал); 
	СписокКодовОплаты.ДобавитьЗначение(глКО.РозничнаяВыручка);
	СписокКодовОплаты.ДобавитьЗначение(глКО.РозничнаяВыручкаЕНВД);
	СписокКодовОплаты.ДобавитьЗначение(глКО.АвансовыйОтчет);
	
	СписокКодовПриходаОплаты = СоздатьОбъект("СписокЗначений");
	СписокКодовПриходаОплаты.ДобавитьЗначение(глКО.РозничнаяПродажа);
	СписокКодовПриходаОплаты.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	                                             
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1) или (ВыводитьТМЦ = 1) Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
		Если (ВыбСвойствоТМЦ.Выбран() = 1) Тогда
			НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "СвойствоТМЦ", ВыбСвойствоТМЦ,       "ВыбСвойствоТМЦ",       ТекстЗапроса,Загол);
		КонецЕсли;                              
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",   ВыбПроект, "ВыбПроект", ТекстЗапроса, Загол, "Проекты");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ВыбАвтор",  ВыбАвтор, "ВыбАвтор",  ТекстЗапроса, Загол, "Пользователи");
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;

	ПечЗаголовок = "Отчет по проектам";      
	                                    
	ПечЗаголовокСтолбца = "";
	Если (ВыводитьЗаявки = 1) или (ВыводитьЗаказы = 1)  Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|Группировка Валюта;";
	КонецЕсли;
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();      
	                                                          
	// Если мы выводим только информацию о движении денежных средств, то группировки
	//по номенклатуре и свойствам ТМЦ устанавливать нельзя  
	Если (ВыводитьЗаявки = 0) и (ВыводитьЗаказы = 0) и (ВыводитьТМЦ = 0) Тогда
		Если (НомерГруппировкиПоТМЦ < 9999) или (НомерГруппировкиПоСвойствуТМЦ < 9999) Тогда
			Предупреждение("При заданном составе выводимой информации устанавливать группировки по номенклатуре и свойствам номенклатуры нельзя!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	тз = СоздатьОбъект("ТаблицаЗначений");
	тз.НоваяКолонка("Валюта", "Справочник.Валюты");            
	тз.НоваяКолонка("ПечТекстСтроки", "Строка");
	тз.НоваяКолонка("ПечЕД");
	тз.НоваяКолонка("Уровень", "Число");
	тз.НоваяКолонка("ЕстьКоличество", "Число");
	тз.НоваяКолонка("ТекРасшифровка");
	
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл
		тз.НоваяКолонка(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла));		
	КонецЦикла;                                                          
	Если ВыводитьЗаявки = 1 Тогда
	    тз.НоваяКолонка("Поступило", "Число", 15, 2);
		тз.НоваяКолонка("Удовлетворено", "Число", 15, 2);
		тз.НоваяКолонка("Снято");
	    тз.НоваяКолонка("ПоступилоКол", "Число", 15, 2);
		тз.НоваяКолонка("УдовлетвореноКол", "Число", 15, 2);
		тз.НоваяКолонка("СнятоКол");
	КонецЕсли;
	Если ВыводитьЗаказы = 1 Тогда
	    тз.НоваяКолонка("Заказано", "Число", 15, 2);
		тз.НоваяКолонка("Получено", "Число", 15, 2);
	    тз.НоваяКолонка("ЗаказаноКол", "Число", 15, 2);
		тз.НоваяКолонка("ПолученоКол", "Число", 15, 2);
	КонецЕсли;
	Если ВыводитьТМЦ = 1 Тогда
	    тз.НоваяКолонка("Приход", "Число", 15, 2);
		тз.НоваяКолонка("Расход", "Число", 15, 2);
	    тз.НоваяКолонка("ПриходКол", "Число", 15, 2);
		тз.НоваяКолонка("РасходКол", "Число", 15, 2);
	КонецЕсли;
	Если ВыводитьДеньги = 1 Тогда
	    тз.НоваяКолонка("ОплатаПриход", "Число", 15, 2);
		тз.НоваяКолонка("ОплатаРасход", "Число", 15, 2);
	КонецЕсли;
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;
	                                   
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;  
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	НачПовт = Таб.ВысотаСекции("Кнопки");
	
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ЗаголовокТаблицы|Начало");
	Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|Вал");
	
	Если ВыводитьЗаявки = 1 Тогда
	    Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|Заявки");
	КонецЕсли;                                 
	
	Если ВыводитьЗаказы = 1 Тогда
	    Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|Заказы");
	КонецЕсли;                                 

	Если ВыводитьТМЦ = 1 Тогда
	    Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|ТМЦ");
	КонецЕсли;                                 

	Если ВыводитьДеньги = 1 Тогда
	    Таб.ПрисоединитьСекцию("ЗаголовокТаблицы|Деньги");
	КонецЕсли;                                 

	НачПовт = НачПовт + Таб.ВысотаСекции("Шапка");
	
	КонПовт = НачПовт + Таб.ВысотаСекции("ЗаголовокТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0, "ОтчетПоПроектам", "ОтчетПоПроектам");
	                         
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА  
	Если (ВыводитьЗаказы = 1) или (ВыводитьЗаявки = 1) Тогда
		ВывестиГруппировку(Запрос,0);
	Иначе
		ВывестиГруппировку(Запрос,1);
	КонецЕсли;
	ПечатьТаблицы();
	
	ПечатьСтроки(Запрос,0,"Всего","Всего:");              
	
	Таб.ОбластьПечати(3);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);       
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;

	Таб.Показать("Отчет по проектам", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура      
//
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", "Номенклатура",  "По номенклатуре");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", "Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "Автор",  "По авторам документов");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Проекты", "Проект",  "По проектам");               
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	
	Если ФлагВосстановленияНастройки = 0 Тогда     
		
		ВидРазделителя = 1;
		ВидЕдиницы 	   = 1;
		ПоГруппам 	   = 1;        
		
		Валюта = 1;
		ВыводитьЗаявки = 1;
		ВыводитьЗаказы = 1;
		ВыводитьТМЦ    = 1;
		
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;    
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");
		
		ВыбПокупатель 	= глРасшифровка.Получить("ВыбПокупатель");
		ВыбПоставщик 	= глРасшифровка.Получить("ВыбПоставщик");
		ВыбПроект	 	= глРасшифровка.Получить("ВыбПроект");
		ВыбТМЦ 			= глРасшифровка.Получить("ВыбТМЦ");         
		
		ВыбСвойствоТМЦ 			= глРасшифровка.Получить("ВыбСвойствоТМЦ");
		ВыбСвойствоПокупателя 	= глРасшифровка.Получить("ВыбСвойствоПокупателя");
		ВыбСвойствоПоставщика 	= глРасшифровка.Получить("ВыбСвойствоПоставщика");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		ВидЕдиницы		= глРасшифровка.Получить("ВидЕдиницы");
		ПоГруппам		= глРасшифровка.Получить("ПоГруппам");   
		Валюта 			= глРасшифровка.Получить("Валюта");
		ВыводитьЗаявки  = глРасшифровка.Получить("ВыводитьЗаявки");
		ВыводитьЗаказы  = глРасшифровка.Получить("ВыводитьЗаказы");
		ВыводитьТМЦ 	= глРасшифровка.Получить("ВыводитьТМЦ");
		ВыводитьДеньги 	= глРасшифровка.Получить("ВыводитьДеньги");
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;            
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");


	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()   

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ДатаКонца = ПолучитьДатуТА();
                                
// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

Группировки.ДобавитьЗначение("Проект", 	"Проекты");
Группировки.ДобавитьЗначение("Фирма", 		"Фирма");
Группировки.ДобавитьЗначение("СвойствоТМЦ", "Свойство номенклатуры");
Группировки.ДобавитьЗначение("Номенклатура","Номенклатура");
Группировки.ДобавитьЗначение("Автор", 	"Авторы документов");
Группировки.ДобавитьЗначение("Документ", 	"Документы движения");

Группировки. Пометка(1,1);         
Группировки. Пометка(2,1);         
Группировки. Пометка(4,1);         
Группировки. Пометка(6,1);         

