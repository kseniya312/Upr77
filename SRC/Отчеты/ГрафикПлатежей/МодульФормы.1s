////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Форма.ИспользоватьСлой("Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	
КонецПроцедуры //УправлениеДиалогом() 

//******************************************************************************
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//   помещает значение параметра в список Расшифровка  и возвращает этот список
Функция РасшифровкаОбновить(Обновить)
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог
//
// Возвращаемое значение: НЕТ
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   запускает отчет
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;
	
	Если глПроверкаДаты(ДатаКонца,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	                                        
	Таб.ИсходнаяТаблица( "ГрафикПлатежей" );  
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаКонца,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	  
	
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ГрафикПлатежей");
	
	// все настройки помещаем в список
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя", ВидРазделителя);
	
	Расшифровка.Установить("ВыбВалюта",        ВыбВалюта);
	Расшифровка.Установить("УчитыватьЗаказы",  УчитыватьЗаказы);
	Расшифровка.Установить("УчитыватьЗаявки",  УчитыватьЗаявки);
	Расшифровка.Установить("ПоДокументам",     ПоДокументам);
	Расшифровка.Установить("ИмеющиесяСредства",ИмеющиесяСредства);
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	СтрПериод = ?(ДатаКонца>= ПолучитьДатуТА(),"", 
	"Период с ДатаКонца по ДатаКонца;"); 	
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|" + СтрПериод +
	"
	|Фирма  = Регистр.Покупатели.Фирма, 
	|         Регистр.Поставщики.Фирма, 
	|         Регистр.Заказы.Фирма, 
	|         Регистр.Заявки.Фирма;
	|ЮрЛицо = Регистр.Поставщики.Фирма.ЮрЛицо, 
	|         Регистр.Покупатели.Фирма.ЮрЛицо, 
	|         Регистр.Заявки.Фирма.ЮрЛицо, 
	|         Регистр.Заказы.Фирма.ЮрЛицо;
	|УпрАналитика = Регистр.Поставщики.Фирма.УпрАналитика, 
	|               Регистр.Покупатели.Фирма.УпрАналитика, 
	|               Регистр.Заявки.Фирма.УпрАналитика, 
	|               Регистр.Заказы.Фирма.УпрАналитика;
	|Договор   = Регистр.Поставщики.Договор, 
	|            Регистр.Покупатели.Договор, 
	|            Регистр.Заявки.ДоговорПокупателя, 
	|            Регистр.Заказы.ДоговорПоставщика;
	|СуммаПост = Регистр.Поставщики.СуммаВал;
	|СуммаПок  = Регистр.Покупатели.СуммаВал;
	|СуммаЗаяв = Регистр.Заявки.СтоимостьРасход;
	|СуммаЗак  = Регистр.Заказы.СтоимостьПриход;
	|КредДокумент = Регистр.Поставщики.КредДокумент, 
	|               Регистр.Покупатели.КредДокумент, 
	|               Регистр.Заявки.ЗаявкаПокупателя, 
	|               Регистр.Заказы.ЗаказПоставщику;
	|Функция СуммаПостКонОст = КонОст(СуммаПост);
	|Функция СуммаПокКонОст  = КонОст(СуммаПок);
	|Функция СуммаЗаявКонОст = КонОст(СуммаЗаяв);
	|Функция СуммаЗакКонОст  = КонОст(СуммаЗак);
	|Группировка Договор;
	|Группировка КредДокумент;
	|"//}}ЗАПРОС
    ;                     
	
	Загол="";  
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
	КонецЕсли;    

	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ПечЗаголовок = "График платежей ("+ВыбВалюта+")";
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
                 
	глЧислоСтрок = 0;
	
	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ШапкаТаблицы");

	// выводим шапку на каждой странице
	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	ПечТекстСтроки = "Начальный остаток средств";
			
	ПечПоступление = "";
	ПечВыплата     = "";
	ПечОстаток     = глФРМ(ИмеющиесяСредства);
			
	Таб.ВывестиСекцию("Дата");
	глОживить(1);

	Итоги = СоздатьОбъект("ТаблицаЗначений");
	Итоги.НоваяКолонка("ДатаОплаты","Дата");
	Итоги.НоваяКолонка("Контрагент");
	Итоги.НоваяКолонка("КредДокумент");
	Итоги.НоваяКолонка("Приход","Число",15,2);
	Итоги.НоваяКолонка("Расход","Число",15,2);
	
	Пока Запрос.Группировка("Договор") = 1 Цикл
		Договор        = Запрос.Договор;
	    ВалютаДоговора = Договор.ВалютаВзаиморасчетов;
		    
		АвансПоcтавщику = 0;
		Если Запрос.СуммаПостКонОст > 0 Тогда
		    АвансПоcтавщику = Запрос.СуммаПостКонОст;
		КонецЕсли;   
				
		АвансПокупателя = 0;
		Если Запрос.СуммаПокКонОст < 0 Тогда
		    АвансПокупателя  = - Запрос.СуммаПокКонОст;
		КонецЕсли;   
		
		Пока Запрос.Группировка("КредДокумент") = 1 Цикл    
			КредДокумент   = Запрос.КредДокумент;
			Если глЕстьРеквизитШапки("ДатаОплаты",КредДокумент.Вид()) = 1 Тогда
			    ДатаОплаты = КредДокумент.ДатаОплаты;
			Иначе
				ДатаОплаты = КредДокумент.ДатаДок;
			КонецЕсли;
			    
			СуммаПост = 0;
		    Если Запрос.СуммаПостКонОст < 0 Тогда
		        СуммаПост = глПересчет(-Запрос.СуммаПостКонОст,
				                        ВалютаДоговора, ДатаОплаты,
										ВыбВалюта,      ДатаОплаты);
		    КонецЕсли;   
				
			СуммаПок = 0;
			Если Запрос.СуммаПокКонОст > 0 Тогда
		        СуммаПок  = глПересчет(Запрос.СуммаПокКонОст,
				                       ВалютаДоговора, ДатаОплаты,
									   ВыбВалюта,      ДатаОплаты);
		    КонецЕсли;   
			        
			СуммаЗак = 0;
			Если УчитыватьЗаказы = 1 Тогда
				ПогашенАвансом = Мин(Запрос.СуммаЗакКонОст,АвансПоcтавщику);
				АвансПоcтавщику = АвансПоcтавщику - ПогашенАвансом;
				
				Если (Запрос.СуммаЗакКонОст - ПогашенАвансом) > 0 Тогда
					СуммаЗак  = глПересчет(Запрос.СуммаЗакКонОст - ПогашенАвансом,
					                       ВалютаДоговора, ДатаОплаты,
					                       ВыбВалюта,      ДатаОплаты);
				КонецЕсли;   
			КонецЕсли;
			
			СуммаЗаяв = 0;
			Если УчитыватьЗаявки = 1 Тогда
				ПогашенАвансом  = Мин(Запрос.СуммаЗаявКонОст,АвансПокупателя);
				АвансПокупателя = АвансПокупателя - ПогашенАвансом;
				
				Если (Запрос.СуммаЗаявКонОст - ПогашенАвансом) > 0 Тогда
					СуммаЗаяв  = глПересчет(Запрос.СуммаЗаявКонОст - ПогашенАвансом,
					                       ВалютаДоговора, ДатаОплаты,
					                       ВыбВалюта,      ДатаОплаты);
				КонецЕсли;   
			КонецЕсли;
            
			Если (ПустоеЗначение(СуммаЗаяв) = 0)
			или  (ПустоеЗначение(СуммаЗак ) = 0)
			или  (ПустоеЗначение(СуммаПок ) = 0)
			или  (ПустоеЗначение(СуммаПост) = 0)
			Тогда     
				Итоги.НоваяСтрока();
				Итоги.ДатаОплаты = ДатаОплаты;
				Итоги.Контрагент = Договор.Владелец;
				Если ПоДокументам = 1 Тогда
					Итоги.КредДокумент = КредДокумент;    
				КонецЕсли;
				Итоги.Расход = СуммаПост + СуммаЗак;
				Итоги.Приход = СуммаПок  + СуммаЗаяв;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;    
	
	// подготовили таблицу, теперь выводим итоги
	
	Итоги.Свернуть   ("ДатаОплаты,Контрагент"+?(ПоДокументам = 1,",КредДокумент",""),"Приход,Расход");
	Итоги.Сортировать("ДатаОплаты,Контрагент"+?(ПоДокументам = 1,",КредДокумент",""));
	                              
	Если ПоДокументам = 1 Тогда	// детализируем по документам
		// надо подготовить итоги по контрагентам
		ИтогиПоКонтрагентам = СоздатьОбъект("ТаблицаЗначений");
		ИтогиПоКонтрагентам.Загрузить(Итоги);
		ИтогиПоКонтрагентам.Свернуть   ("ДатаОплаты,Контрагент","Приход,Расход");
		ИтогиПоКонтрагентам.Сортировать("ДатаОплаты,Контрагент","");
	КонецЕсли;	
	
	ИтогиПоДатам = СоздатьОбъект("ТаблицаЗначений");
	ИтогиПоДатам.Загрузить(?(ПоДокументам = 1,ИтогиПоКонтрагентам,Итоги));
	ИтогиПоДатам.Свернуть   ("ДатаОплаты","Приход,Расход");
	ИтогиПоДатам.Сортировать("ДатаОплаты","");
                   
	ПоследняяДата  = ПолучитьПустоеЗначение("Дата"); 
	ОстатокСредств = ИмеющиесяСредства;

	Итоги.ВыбратьСтроки();
	Если ПоДокументам = 1 Тогда	// детализируем по документам
		ИтогиПоКонтрагентам.ВыбратьСтроки();
	КонецЕсли;	                            
	ИтогиПоДатам.ВыбратьСтроки();
		
	Пока Итоги.ПолучитьСтроку() = 1 Цикл
		Если Итоги.ДатаОплаты <> ПоследняяДата Тогда
			ИтогиПоДатам.ПолучитьСтроку();
			
			ПоследняяДата       = Итоги.ДатаОплаты;
			ПоследнийКонтрагент = ПолучитьПустоеЗначение("Справочник.Контрагенты");
			 
			Если Итоги.ДатаОплаты < ДатаКонца Тогда
				ПечТекстСтроки = "" + Итоги.ДатаОплаты + " (просроченный долг)";
			Иначе	
				ПечТекстСтроки = Итоги.ДатаОплаты;
			КонецЕсли;	            
			
			ПечПоступление = глФРМ(ИтогиПоДатам.Приход);
			ПечВыплата     = глФРМ(ИтогиПоДатам.Расход);
			ОстатокСредств = ОстатокСредств + ИтогиПоДатам.Приход - ИтогиПоДатам.Расход;
			ПечОстаток     = глФРМ(ОстатокСредств);
			
			Таб.ВывестиСекцию("Дата");
			глОживить(1);
		КонецЕсли;     
		
		Если Итоги.Контрагент <> ПоследнийКонтрагент Тогда
			ПоследнийКонтрагент = Итоги.Контрагент;
			
			ПечТекстСтроки      = Итоги.Контрагент;
			ТекРасшифровка      = Итоги.Контрагент;
			
			Если ПоДокументам = 1 Тогда
				ИтогиПоКонтрагентам.ПолучитьСтроку();
				ПечПоступление  = глФРМ(ИтогиПоКонтрагентам.Приход); 
				ПечВыплата      = глФРМ(ИтогиПоКонтрагентам.Расход);
			Иначе    
				ПечПоступление  = глФРМ(Итоги.Приход); 
				ПечВыплата      = глФРМ(Итоги.Расход);
			КонецЕсли;	
			ПечОстаток          = "";
			
			Таб.ВывестиСекцию("Контрагент");
			глОживить(1);
		КонецЕсли;                                 
		
		Если ПоДокументам = 1 Тогда
			ПоследнийКонтрагент = Итоги.Контрагент;
			
			ПечТекстСтроки = глПредставлениеДокумента(Итоги.КредДокумент);
			ТекРасшифровка = Итоги.КредДокумент;
			
			ПечПоступление = глФРМ(Итоги.Приход); 
			ПечВыплата     = глФРМ(Итоги.Расход);
			ПечОстаток = "";             
			
			Таб.ВывестиСекцию("Документ");
			глОживить(1);
		КонецЕсли;	                                    
	КонецЦикла;	
    
	Таб.ВывестиСекцию("Подвал");   
	глОживить(1);

	Таб.Опции(0, 0, 2, 0, "ГрафикПлатежей", "ГрафикПлатежей");
	             
	Таб.ОбластьПечати(3);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);     
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;
	Таб.Показать("График платежей", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	Если ФлагВосстановленияНастройки = 0 Тогда
		
		ВидРазделителя = 1;
         
		ДатаНачала     = НачМесяца(ДатаКонца);
		ВыбВалюта      = глРубли;
		
	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя	= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1	= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2	= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3	= глРасшифровка.Получить("ВыбРазделитель3");
		                                                            
		ВыбВалюта	      = глРасшифровка.Получить("ВыбВалюта");
		УчитыватьЗаказы	  = глРасшифровка.Получить("УчитыватьЗаказы");
		УчитыватьЗаявки   = глРасшифровка.Получить("УчитыватьЗаявки");
		ПоДокументам	  = глРасшифровка.Получить("ПоДокументам");
		ИмеющиесяСредства = глРасшифровка.Получить("ИмеющиесяСредства");
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	УправлениеДиалогом();

КонецПроцедуры // ВводНового()  
                                                                                
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

ДатаКонца=ПолучитьДатуТА();