////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ                          
//
// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 
Перем ДокПодч;
Перем СтарыйВидОтчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                                     
//****************************************************************************** 
// НомераГТД()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Строка, содержащая текст ГТД и стран происхождения, через запятую.
//
// Описание:
//  Формирует по документу строку, содержащую все комбинации ГТД и стран
//  происхождения, содержащиеся в документе.
//
Функция НомераГТД(Док)
	
	Перем ЕстьПартия;
	
	Если (ПустоеЗначение(Док)=1) Тогда
		Возврат "";
	КонецЕсли;
	
	Если глЕстьРеквизитМнЧ("Партия",Док.Вид()) = 1 Тогда
		ЕстьПартия = 1;
	ИначеЕсли глЕстьРеквизитМнЧ("ГТД",Док.Вид()) = 1 Тогда
		ЕстьПартия = 0;
	Иначе
		Возврат "";
	КонецЕсли;
	
	СписокГТД = СоздатьОбъект("СписокЗначений");
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		Если ЕстьПартия = 1 Тогда
			ГТД = ?(ПустоеЗначение(Док.Партия.ГТД) = 0, СокрЛП(Док.Партия.СтранаПроисхождения) + " " + СокрЛП(Док.Партия.ГТД), "");
		Иначе     
			ГТД = ?(ПустоеЗначение(Док.ГТД) = 0, СокрЛП(Док.СтранаПроисхождения) + " " + СокрЛП(Док.ГТД), "");	
		КонецЕсли;
		
		Если СписокГТД.НайтиЗначение(ГТД) = 0 Тогда
			СписокГТД.ДобавитьЗначение(ГТД);
		КонецЕсли;
		
	КонецЦикла; 
	
	ГТД = "";
	Если СписокГТД.РазмерСписка() > 0 Тогда
		Для а = 1 по СписокГТД.РазмерСписка() Цикл
			ГТД = ГТД + ?(ГТД = "", "", "; ") + СписокГТД.ПолучитьЗначение(а);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ГТД;
	
КонецФункции // НомераГТД()

//******************************************************************************
// НайтиСФДокумента(ДокПоставки)
//
// Параметры:
//  ДокПоставки 	- документ, для которого надо найти СФ  
//	ВидСФ 			- вид счета фактуры: "СчетФактураПолученный", "СчетФактураВыданный",
//						"СчетФактура" - любой счет фактура
//
// Возвращаемое значение:
//  Найденный счет-фактура или пустая строка, если счет-фактура не найден. 
//
// Описание:
//  У документа производится поиск счета фактуры. Если она есть то возвращаем.
//
Функция НайтиСФДокумента(ДокПоставки, ВидСФ="СчетФактура")

	Если ДокПоставки.Вид() = "СчетФактураВыданный" Тогда
		Возврат ДокПоставки;
	КонецЕсли;                                            
	
	Если ДокПоставки.Вид() = "ВозвратПоставщику" Тогда
		Если ДокПоставки.ДокОснование.Выбран() = 1 Тогда
			ДокПоставки = ДокПоставки.ДокОснование;
		Иначе
			Возврат ДокПоставки;
		КонецЕсли;
	КонецЕсли;
	
	ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокПоставки);
	Пока ДокПодч.ПолучитьДокумент()=1 Цикл
        Если Найти(ДокПодч.Вид(),ВидСФ)<>0 Тогда
		 	Если ДокПодч.Проведен()=1 Тогда
				Возврат ДокПодч.ТекущийДокумент();                        
			ИначеЕсли глЕстьРеквизитШапки("ФлагСвертки", ДокПоставки.Вид()) = 1 Тогда
				Если ДокПоставки.ФлагСвертки = 1 Тогда
					Возврат ДокПодч.ТекущийДокумент();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;   
	
	Если глЕстьРеквизитШапки("УчитыватьНДС", ДокПоставки.Вид()) = 1 Тогда
		Если ДокПоставки.УчитыватьНДС = 0 Тогда
			Возврат "";
		КонецЕсли;
	КонецЕсли;

	Сообщить("На документ "+ДокПоставки+" не зарегистрирован счет - фактура!","i");
	Возврат "";
	
КонецФункции // ПроверкаСФДокумента()

//******************************************************************************
// УправлениеДиалогом()
// Параметры:
//  нет
//
// Возвращаемое значение:
//  нет
//
// Вызывается из формул элементов диалога:
//  "СписокВидовОтчетов","ПоКлиентам","ОтборПоКлиентам"
//
// Описание: для управления формой диалога
Процедура УправлениеДиалогом()

	Если СтарыйВидОтчета <> СписокВидовОтчетов.ТекущаяСтрока() Тогда

		// Сброс флагов
		
		ПоКлиентам      = 0;
		ОтборПоКлиентам = 0;
  		ИтогиПоТипам    = 0;

		СтарыйВидОтчета = СписокВидовОтчетов.ТекущаяСтрока();

	КонецЕсли;
	
	// управление флагами группировок

	Форма.ПоКлиентам.Доступность(?(СписокВидовОтчетов.ТекущаяСтрока()=1,1,0));

	Форма.ОтборПоКлиентам.Доступность(ПоКлиентам);
	ОтборПоКлиентам = ?(ПоКлиентам = 1,ОтборПоКлиентам,0);
	Форма.ВыбКонтрагент.Доступность(ОтборПоКлиентам);
    ВыбКонтрагент = ?(ОтборПоКлиентам = 1,ВыбКонтрагент,"");
	
КонецПроцедуры  // УправлениеДиалогом()

//******************************************************************************
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//   помещает значение параметра в список Расшифровка  и возвращает этот список
Функция РасшифровкаОбновить(Обновить)
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// СуммаСчетаФактуры(ДокСФ)
//
// Параметры: 
//  ДокСФ - документ счет-фактура
//
// Возвращаемое значение:
//  Сумма СФ без НП
//
// Описание:
//  Вычисляет сумму СФ как суммарный расход по регистру Книга покупок
//
Функция СуммаСчетаФактуры(ДокСФ)
	СуммаВсего = 0;                                 
	СуммаНП    = 0;
	
	Если (ДокСФ.ДокОснование.Выбран() = 1)
	и    (ДокСФ.КоличествоСтрок() = 0)
	Тогда
		ДокОснование = ДокСФ.ДокОснование;
	Иначе
		ДокОснование = ДокСФ;
	КонецЕсли;
	
	РегКнига = СоздатьОбъект("Регистр.КнигаПокупок");
	РегКнига.ВыбратьДвиженияДокумента(ДокОснование);
	Пока РегКнига.ПолучитьДвижение() = 1 Цикл
		Если РегКнига.Расход = 1 Тогда
			СуммаНП      = СуммаНП    + РегКнига.СуммаНП;
			СуммаВсего   = СуммаВсего + РегКнига.СуммаРуб;
		КонецЕсли;
	КонецЦикла;
	
	Возврат (СуммаВсего - СуммаНП);
	
КонецФункции // СуммаСчетаФактуры()

//******************************************************************************
// СформироватьКнигу(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   запускает отчет
Процедура СформироватьКнигу(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;   
	Перем ДатаНачалаЗ, ДатаКонцаЗ;
	Перем ПНДС, СтарыйКлиент;           
	
	ИтогВсего	         = 0;
	ИтогСуммаБезНДС20	 = 0;
	ИтогНДС20            = 0;
	ИтогСуммаБезНДС10    = 0;
	ИтогНДС10            = 0;
	ИтогСуммаНДС0        = 0; 	
	ИтогСуммаСовсемБезНДС= 0;
	
	ИтогКлиентВсего         = 0;
	ИтогКлиентСуммаБезНДС20 = 0;
	ИтогКлиентНДС20         = 0;
	ИтогКлиентСуммаБезНДС10 = 0;
	ИтогКлиентНДС10         = 0;
	ИтогКлиентСуммаНДС0     = 0;
	ИтогКлиентСуммаСовсемБезНДС = 0;

	ПНДС = Перечисление.СтавкиНДС;
	                              
	ДатаНачалаЗ = НачМесяца(ДатаНачала);
	Если глПроверкаДаты(ДатаНачалаЗ,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКонцаЗ = Мин(КонМесяца(ДатаКонца),ПолучитьДатуТА());
	
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	                     
	Таб.ИсходнаяТаблица( "КнигаПокупок" );
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачалаЗ,ДатаКонцаЗ,Последовательность.КнигаПокупок)=0 Тогда
		Возврат;
	КонецЕсли;	       
	
	Если ВыбЮрЛицо.Выбран()=0 Тогда
		Предупреждение("Не выбрано юридическое лицо!",60);
		Возврат;
	КонецЕсли;

	Если (ПоКлиентам = 1) И (ОтборПоКлиентам = 1) Тогда
		Если ВыбКонтрагент.Выбран()=0 Тогда
			Предупреждение("Не выбран контрагент для отбора!",60);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "КнигаПокупок");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбЮрЛицо",     ВыбЮрЛицо);
	Расшифровка.Установить("СтарыйВидОтчета",   СтарыйВидОтчета);
	Расшифровка.Установить("ПоКлиентам",        ПоКлиентам);
	Расшифровка.Установить("ОтборПоКлиентам",   ОтборПоКлиентам);
	Расшифровка.Установить("ВыбКонтрагент",     ВыбКонтрагент);
	Расшифровка.Установить("СписокВидовОтчетов",     СписокВидовОтчетов.ТекущаяСтрока());
	Расшифровка.Установить("ИтогиПоТипам",      ИтогиПоТипам);
	
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"Период с ДатаНачалаЗ по ДатаКонцаЗ;
	|ЮрЛицо = Регистр.КнигаПокупок.КредДокумент.Фирма.ЮрЛицо;
	|КредДокумент = Регистр.КнигаПокупок.КредДокумент;
	|СтавкаНДС = Регистр.КнигаПокупок.СтавкаНДС;
	|ВидДолга  = Регистр.КнигаПокупок.ВидДолга;
	|СуммаРуб  = Регистр.КнигаПокупок.СуммаРуб;
	|СуммаНДС  = Регистр.КнигаПокупок.СуммаНДС;
	|СуммаНП   = Регистр.КнигаПокупок.СуммаНП;
	|ДокументОплаты = Регистр.КнигаПокупок.ДокументОплаты;
	|ТекДокумент    = Регистр.КнигаПокупок.ТекущийДокумент;
	|Функция СуммаРубТест = Приход(СуммаРуб);
	|Функция СуммаРуб20 = Приход(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНДС20 = Приход(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНП20  = Приход(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаРуб10 = Приход(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНДС10 = Приход(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНП10  = Приход(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаРуб20_120 = Приход(СуммаРуб) Когда (СтавкаНДС = ПНДС.НДС20_120);
	|Функция СуммаНДС20_120 = Приход(СуммаНДС) Когда (СтавкаНДС = ПНДС.НДС20_120);
	|Функция СуммаНП20_120  = Приход(СуммаНП)  Когда (СтавкаНДС = ПНДС.НДС20_120);
	|Функция СуммаРуб10_110 = Приход(СуммаРуб) Когда (СтавкаНДС = ПНДС.НДС10_110);
	|Функция СуммаНДС10_110 = Приход(СуммаНДС) Когда (СтавкаНДС = ПНДС.НДС10_110);
	|Функция СуммаНП10_110  = Приход(СуммаНП)  Когда (СтавкаНДС = ПНДС.НДС10_110);
	|Функция СуммаРуб0 = Приход(СуммаРуб)  Когда ((СтавкаНДС = ПНДС.БезНДС)или (ПустоеЗначение(СтавкаНДС)=1));
	|Функция СуммаНДС0 = Приход(СуммаНДС)  Когда ((СтавкаНДС = ПНДС.БезНДС)или (ПустоеЗначение(СтавкаНДС)=1));
	|Функция СуммаНП0  = Приход(СуммаНП)   Когда ((СтавкаНДС = ПНДС.БезНДС)или (ПустоеЗначение(СтавкаНДС)=1));
	|Группировка КредДокумент;
	|Группировка ДокументОплаты;
	|Группировка ТекДокумент;
	|Группировка ВидДолга;
	|"//}}ЗАПРОС
	;                     

	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(, "ЮрЛицо",ВыбЮрЛицо,"ВыбЮрЛицо",ТекстЗапроса,Загол);
	                
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;

	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
    
	КнПок = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(КнПок,1,0);
	КнПок.НоваяКолонка("ТипЗаписи","Строка",60);
	КнПок.НоваяКолонка("КредКонтрагент","Справочник");
	КнПок.НоваяКолонка("ДатаСортировки","Дата");

	Если ПоКлиентам = 1 Тогда

		// Если нужна группировка по контрагентам - требуется дополнительный проход по таблице
		КнПок.ВыбратьСтроки();
		Пока КнПок.ПолучитьСтроку()=1 Цикл   
			КнПок.ДатаСортировки = Макс(КнПок.КредДокумент.ДатаДок, КнПок.ДокументОплаты.ДатаДок);
			
			Если (КнПок.КредДокумент.Вид() = "СчетФактураПолученный") или (КнПок.КредДокумент.Вид() = "ВозвратПоставщику") Тогда
				КнПок.КредКонтрагент = КнПок.КредДокумент.Контрагент;
			Иначе     
				СФ 	= НайтиСФДокумента(КнПок.КредДокумент);  
				Если ТипЗначенияСтр(СФ)="Документ" Тогда
					Если Метаданные.Документ(СФ.Вид()).РеквизитШапки("Контрагент").Выбран()=1 Тогда
						КнПок.КредКонтрагент = СФ.Контрагент;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		КнПок.Сортировать("КредКонтрагент,ДатаСортировки,КредДокумент,ДокументОплаты",1);
	Иначе

		КнПок.ВыбратьСтроки();
		Пока КнПок.ПолучитьСтроку()=1 Цикл   
			КнПок.ДатаСортировки = Макс(КнПок.КредДокумент.ДатаДок, КнПок.ДокументОплаты.ДатаДок);
		КонецЦикла;
		КнПок.Сортировать("ДатаСортировки,КредДокумент,ДокументОплаты",1);
	КонецЕсли;

	глЧислоСтрок = 1;
	
	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ШапкаТаблицы");

	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	глОживить(КонПовт);
	                         
	Таб.Опции(0, 0, 2, 0, "КнигаПокупок", "КнигаПокупок");
	Таб.ОбластьПечати(3);
	     
	// Инициализация цикла
	Ном = 0;
    Если (ПоКлиентам =1)
	   и (КнПок.КоличествоСтрок()>0) Тогда
	   	КнПок.ПолучитьСтрокуПоНомеру(1);
		СтарыйКлиент = КнПок.КредКонтрагент;
    КонецЕсли;

	КнПок.ВыбратьСтроки();
	Пока КнПок.ПолучитьСтроку()=1 Цикл

		КредДокумент   = КнПок.КредДокумент;
		ДокументОплаты = КнПок.ДокументОплаты;   
		ВидДолга 	   = КнПок.ВидДолга;
			
		ДатаЗаписи = Макс(КредДокумент.ДатаДок,ДокументОплаты.ДатаДок);
		Если (ДатаЗаписи<ДатаНачала) или (ДатаЗаписи>ДатаКонца) Тогда
			КнПок.ТипЗаписи = "В итогах не участвует";
			Продолжить; // запись не входит в период
		КонецЕсли;

		Ном = Ном+1;  
		ДокПоставки = КредДокумент;
		Если КредДокумент.Вид() = "СчетФактураПолученный" Тогда
			СФ 	= КредДокумент;
		Иначе            
			Если ВидДолга = глВД.Аванс Тогда
				СФ 	= НайтиСФДокумента(КредДокумент, "СчетФактураВыданный");
			Иначе
				СФ 	= НайтиСФДокумента(КредДокумент);
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(СФ)=1 Тогда
			КнПок.ТипЗаписи = "В итогах не участвует";
			Продолжить; // не найден счет - фактура
		КонецЕсли;
		НомерДата = глПредставлениеСФ(СФ);

		Если (ПоКлиентам = 1)И(ОтборПоКлиентам = 1) Тогда
			Если СФ.Контрагент<>ВыбКонтрагент Тогда
				КнПок.ТипЗаписи = "В итогах не участвует";
				Продолжить;  // Фильтруем по клиенту    
			КонецЕсли;    
		КонецЕсли;

		// Дата оплаты - в записи книги покупок указана пользователем.
		Если СФ.Вид() = "СчетФактураВыданный" Тогда
			ДатаОплаты  = Формат(ДокПоставки.ДатаДок,"ДДДММГГГГ");
			ДатаПрихода = Формат(ДокументОплаты.ДатаДок,"ДДДММГГГГ");
		Иначе    
			ДатаОплаты  = ?(ДокументОплаты.Вид() = "ЗаписьКнигиПокупок",
						    ДокументОплаты.ДатаОплаты,
						    Формат(ДокументОплаты.ДатаДок,"ДДДММГГГГ"));
			
			ДатаПрихода = Формат(ДокПоставки.ДатаДок,"ДДДММГГГГ");
		КонецЕсли;
		ПечКлиент   = СФ.Контрагент.ЮрФизЛицо;
		
		ПечСуммаВсего    = (КнПок.СуммаРуб20 + КнПок.СуммаРуб10+ КнПок.СуммаРуб20_120+ КнПок.СуммаРуб10_110  + КнПок.СуммаРуб0) - 
						   (КнПок.СуммаНП20  + КнПок.СуммаНП10  + КнПок.СуммаНП0 + КнПок.СуммаНП20_120 + КнПок.СуммаНП10_110);
		ПечСуммаБезНДС20 = 	КнПок.СуммаРуб20 + КнПок.СуммаРуб20_120 - КнПок.СуммаНДС20 - КнПок.СуммаНП20 - КнПок.СуммаНП20_120;
		ПечНДС20	     =	КнПок.СуммаНДС20 + КнПок.СуммаНДС20_120;
		ПечСуммаБезНДС10 =	КнПок.СуммаРуб10 + КнПок.СуммаРуб10_110 - КнПок.СуммаНДС10 - КнПок.СуммаНП10 - КнПок.СуммаНП10_110;
		ПечНДС10	     =  КнПок.СуммаНДС10 + КнПок.СуммаНДС10_110;
		ПечСуммаНДС0	 =  0;
		ПечСуммаСовсемБезНДС = КнПок.СуммаРуб0  - КнПок.СуммаНП0;
			                 
		ИтогВсего	         = ИтогВсего			+ПечСуммаВсего;
		ИтогСуммаБезНДС20	 = ИтогСуммаБезНДС20	+ПечСуммаБезНДС20;
		ИтогНДС20            = ИтогНДС20            +ПечНДС20;
		ИтогСуммаБезНДС10    = ИтогСуммаБезНДС10    +ПечСуммаБезНДС10;
		ИтогНДС10            = ИтогНДС10            +ПечНДС10;
		ИтогСуммаНДС0        = ИтогСуммаНДС0        +ПечСуммаНДС0; 	
		ИтогСуммаСовсемБезНДС= ИтогСуммаСовсемБезНДС+ПечСуммаСовсемБезНДС;
		
		СтранаНомерГТД = НомераГТД(ДокПоставки);  
		
		Если ДокументОплаты.Вид() = "ЗаписьКнигиПокупок" Тогда
			НомерДата = НомерДата  + РазделительСтрок + ДокументОплаты.ДополнительнаяИнформация;
		Иначе
			СуммаСФБезНП = СуммаСчетаФактуры(СФ);
			Если (ПечСуммаВсего > 0)
			и    (СуммаСФБезНП > ПечСуммаВсего) 
			Тогда
				НомерДата = НомерДата + РазделительСтрок +"частичная оплата";
			КонецЕсли; 
			Если СФ.Вид() = "СчетФактураВыданный" Тогда
				НомерДата = НомерДата + РазделительСтрок +"зачет НДС с аванса";
			КонецЕсли; 
			
		КонецЕсли;
		                                        
		// создаем расшифровку текущей строки
		СписДоков=СоздатьОбъект("СписокЗначений");
		СписДоков.ДобавитьЗначение(СФ,		      "Счет-Фактура: "           +глПредставлениеДокумента(СФ));
		СписДоков.ДобавитьЗначение(ДокПоставки,   "Документ - основание СФ: "+глПредставлениеДокумента(ДокПоставки));
		СписДоков.ДобавитьЗначение(ДокументОплаты,"Запись на основании: "    +глПредставлениеДокумента(ДокументОплаты));
		
		Расшифровка.Установить("Меню",СписДоков);

		Если ИтогиПоТипам = 1 Тогда  
				
			// Определение типа записи           
			Если КнПок.ВидДолга = глВД.Аванс Тогда
				КнПок.ТипЗаписи = "Зачет аванса";
			Иначе
				Если (КнПок.СуммаРубТест < 0) Тогда
					КнПок.ТипЗаписи = "Возвраты поставщикам";
				Иначе
					КнПок.ТипЗаписи = "Покупка";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;			
			
		Если ПоКлиентам = 1 Тогда
			Если СтарыйКлиент <> КнПок.КредКонтрагент Тогда

				// нужно вывести итоговую секцию
				ПечКлиентИтог = ?(ПустоеЗначение(СтарыйКлиент.ЮрФизЛицо) = 1, "", СтарыйКлиент.ЮрФизЛицо.ПолнНаименование);;

				// Итоги по последнему выводятся после цикла
				Если ОтборПоКлиентам = 0 Тогда
					Таб.ВывестиСекцию("ВсегоКлиент");
				КонецЕсли;
				
				// Сброс промежуточных итогов
				СтарыйКлиент = КнПок.КредКонтрагент;
				ИтогКлиентВсего         = 0;
				ИтогКлиентСуммаБезНДС20 = 0;
				ИтогКлиентНДС20         = 0;
				ИтогКлиентСуммаБезНДС10 = 0;
				ИтогКлиентНДС10         = 0;
				ИтогКлиентСуммаНДС0     = 0;
				ИтогКлиентСуммаСовсемБезНДС = 0;

			КонецЕсли;

			ИтогКлиентВсего         = ИтогКлиентВсего + ПечСуммаВсего;
			ИтогКлиентСуммаБезНДС20 = ИтогКлиентСуммаБезНДС20 + ПечСуммаБезНДС20;
			ИтогКлиентНДС20         = ИтогКлиентНДС20 + ПечНДС20;
			ИтогКлиентСуммаБезНДС10 = ИтогКлиентСуммаБезНДС10 + ПечСуммаБезНДС10;
			ИтогКлиентНДС10         = ИтогКлиентНДС10 + ПечНДС10;
			ИтогКлиентСуммаНДС0     = ИтогКлиентСуммаНДС0 + ПечСуммаНДС0;
			ИтогКлиентСуммаСовсемБезНДС = ИтогКлиентСуммаСовсемБезНДС + ПечСуммаСовсемБезНДС;

		КонецЕсли;

		Таб.ВывестиСекцию("Строка");
		глОживить(1);
			
	КонецЦикла;
	        
 	// Выводим итоги по последнему клиенту
	Если (ПоКлиентам = 1) 
	   и (ТипЗначенияСтр(СтарыйКлиент) = "Справочник") Тогда
	   	Если СтарыйКлиент.Вид() = "Контрагенты" Тогда
		   	ПечКлиентИтог = ?(ПустоеЗначение(СтарыйКлиент.ЮрФизЛицо) = 1, "", СтарыйКлиент.ЮрФизЛицо.ПолнНаименование);
			Если ОтборПоКлиентам = 1 Тогда
				Если СтарыйКлиент = ВыбКонтрагент Тогда
					Таб.ВывестиСекцию("ВсегоКлиент");
				КонецЕсли;
			Иначе
				Таб.ВывестиСекцию("ВсегоКлиент");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ГлБух = ВыбЮрЛицо.ГлБухгалтер.Получить(ДатаКонца);
	Таб.ВывестиСекцию("Всего");


	Если ИтогиПоТипам = 1 Тогда
	    
		//проанализировать итоги по типам записей
		КнПок.Свернуть("ТипЗаписи","СуммаРуб0,СуммаРуб10,СуммаРуб20,СуммаНДС10,СуммаНДС20,СуммаНП0,СуммаНП10,СуммаНП20, СуммаРуб20_120, СуммаНДС20_120, СуммаНП20_120, СуммаРуб10_110, СуммаНДС10_110, СуммаНП10_110");
        
		// Надо удалить строку, которую не надо отбражать
		НомерСтроки = "";
		КнПок.НайтиЗначение(Формат("В итогах не участвует","С60"), НомерСтроки, "ТипЗаписи");
		Если НомерСтроки > 0 Тогда
			КнПок.УдалитьСтроку(НомерСтроки);
		КонецЕсли; 
		
		Таб.ВывестиСекцию("ШапкаВсегоТип");

		КнПок.ВыбратьСтроки();
		Пока КнПок.ПолучитьСтроку()=1 Цикл
			ПечТип = СокрЛП(КнПок.ТипЗаписи);
			ИтогТипВсего = (КнПок.СуммаРуб20 + КнПок.СуммаРуб10 + КнПок.СуммаРуб0 + КнПок.СуммаРуб20_120 + 
							КнПок.СуммаРуб10_110) - (КнПок.СуммаНП20  + КнПок.СуммаНП10  + КнПок.СуммаНП0);
			ИтогТипСуммаБезНДС20 = КнПок.СуммаРуб20 + КнПок.СуммаРуб20_120 - КнПок.СуммаНДС20 - КнПок.СуммаНП20;
			ИтогТипНДС20 = КнПок.СуммаНДС20 + КнПок.СуммаНДС20_120;
			ИтогТипСуммаБезНДС10 = КнПок.СуммаРуб10 + КнПок.СуммаРуб10_110 - КнПок.СуммаНДС10 - КнПок.СуммаНП10;
			ИтогТипНДС10 = КнПок.СуммаНДС10 + КнПок.СуммаНДС10_110;
			ИтогТипСуммаНДС0 = 0;
			ИтогТипСуммаСовсемБезНДС = КнПок.СуммаРуб0 - КнПок.СуммаНП0;
			
			Таб.ВывестиСекцию("ВсегоТип");    
		КонецЦикла;		
	КонецЕсли;
	
	Таб.ВывестиСекцию("Подвал");  
	
	глОживить(1);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;
	Таб.Показать("Книга покупок", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // СформироватьКнигу()

//******************************************************************************
// СформироватьРеестр(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   запускает отчет
Процедура СформироватьРеестр(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;   
	Перем ПНДС;
	
	ПНДС = Перечисление.СтавкиНДС;
	
	ИтогВсего	         = 0;
	ИтогСуммаБезНДС20	 = 0;
	ИтогНДС20            = 0;
	ИтогСуммаБезНДС10    = 0;
	ИтогНДС10            = 0;
	ИтогСуммаНДС0        = 0; 	
	ИтогСуммаСовсемБезНДС= 0;
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	
	Если ВыбЮрЛицо.Выбран()=0 Тогда
		Предупреждение("Не выбрано юридическое лицо!",60);
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;      
	
	Таб.ИсходнаяТаблица( "РеестрСФ" );
	                     
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.КнигаПокупок)=0 Тогда
		Возврат;
	КонецЕсли;	  
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "КнигаПокупок");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбЮрЛицо",     ВыбЮрЛицо);
	Расшифровка.Установить("ПоКлиентам",        ПоКлиентам);
	Расшифровка.Установить("ОтборПоКлиентам",   ОтборПоКлиентам);
	Расшифровка.Установить("ВыбКонтрагент",     ВыбКонтрагент);
	Расшифровка.Установить("СписокВидовОтчетов",     СписокВидовОтчетов.ТекущаяСтрока());
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"Период с ДатаКонца по ДатаКонца;
	|ЮрЛицо = Регистр.КнигаПокупок.КредДокумент.Фирма.ЮрЛицо;
	|КредДокумент = Регистр.КнигаПокупок.КредДокумент;
	|СтавкаНДС = Регистр.КнигаПокупок.СтавкаНДС;
	|СуммаРуб  = Регистр.КнигаПокупок.СуммаРуб;
	|СуммаНДС  = Регистр.КнигаПокупок.СуммаНДС;
	|СуммаНП   = Регистр.КнигаПокупок.СуммаНП;
	|Функция СуммаРуб20 = КонОст(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНДС20 = КонОст(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНП20  = КонОст(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаРуб10 = КонОст(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНДС10 = КонОст(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНП10  = КонОст(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаРуб0 = КонОст(СуммаРуб) Когда ((СтавкаНДС = ПНДС.БезНДС) или (ПустоеЗначение(СтавкаНДС)=1));
	|Функция СуммаНДС0 = КонОст(СуммаНДС) Когда ((СтавкаНДС = ПНДС.БезНДС) или (ПустоеЗначение(СтавкаНДС)=1));
	|Функция СуммаНП0  = КонОст(СуммаНП)  Когда ((СтавкаНДС = ПНДС.БезНДС) или (ПустоеЗначение(СтавкаНДС)=1));
	|Группировка КредДокумент;"
	;                     
	
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(, "ЮрЛицо",ВыбЮрЛицо,"ВыбЮрЛицо",ТекстЗапроса,Загол);
	                
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;

	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;   
	
	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки");
	Таб.ВывестиСекцию("Шапка");
	Таб.ВывестиСекцию("ШапкаТаблицы");

	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);

	глОживить(КонПовт);
	                         
	Таб.Опции(0, 0, 2, 0, "РеестрСФ", "РеестрСФ");
	Таб.ОбластьПечати(3);
	     
	Ном = 0;
	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
		КредДокумент   = Запрос.КредДокумент;
		
		Ном = Ном+1;  
		ДокПоставки = КредДокумент;
		Если КредДокумент.Вид() = "СчетФактураПолученный" Тогда
			СФ 	= КредДокумент;
		Иначе     
			СФ 	= НайтиСФДокумента(КредДокумент);
		КонецЕсли;
		Если ПустоеЗначение(СФ)=1 Тогда
			Продолжить;
		КонецЕсли;
		НомерДата = глПредставлениеСФ(СФ);
		
		ДатаПрихода = Формат(ДокПоставки.ДатаДок,"ДДДММГГГГ");
		ПечКлиент   = СФ.Контрагент.ЮрФизЛицо;
		
		ПечСуммаВсего    = - ((Запрос.СуммаРуб20 + Запрос.СуммаРуб10 + Запрос.СуммаРуб0) - 
		                      (Запрос.СуммаНП20  + Запрос.СуммаНП10  + Запрос.СуммаНП0 ));
		ПечСуммаБезНДС20 = 	- (Запрос.СуммаРуб20 - Запрос.СуммаНДС20 - Запрос.СуммаНП20);
		ПечНДС20	     =	- (Запрос.СуммаНДС20);
		ПечСуммаБезНДС10 =	- (Запрос.СуммаРуб10 - Запрос.СуммаНДС10 - Запрос.СуммаНП10);
		ПечНДС10	     =  - (Запрос.СуммаНДС10);
		ПечСуммаНДС0	 =  0;
		ПечСуммаСовсемБезНДС = - (Запрос.СуммаРуб0  - Запрос.СуммаНП0);
		
		ИтогВсего	         = ИтогВсего			+ПечСуммаВсего;
		ИтогСуммаБезНДС20	 = ИтогСуммаБезНДС20	+ПечСуммаБезНДС20;
		ИтогНДС20            = ИтогНДС20            +ПечНДС20;
		ИтогСуммаБезНДС10    = ИтогСуммаБезНДС10    +ПечСуммаБезНДС10;
		ИтогНДС10            = ИтогНДС10            +ПечНДС10;
		ИтогСуммаНДС0        = ИтогСуммаНДС0        +ПечСуммаНДС0; 	
		ИтогСуммаСовсемБезНДС= ИтогСуммаСовсемБезНДС+ПечСуммаСовсемБезНДС;
		
		СтранаНомерГТД = НомераГТД(ДокПоставки);  
		
		// создаем расшифровку текущей строки
		СписДоков=СоздатьОбъект("СписокЗначений");
		СписДоков.ДобавитьЗначение(СФ,		      "Счет-Фактура: "            +глПредставлениеДокумента(СФ));
		СписДоков.ДобавитьЗначение(ДокПоставки,   "Документ - основание СФ: " +глПредставлениеДокумента(ДокПоставки));
		Расшифровка.Установить("Меню",СписДоков);
		
		Таб.ВывестиСекцию("Строка");
		глОживить(1);
		
	КонецЦикла;
	
	Таб.ВывестиСекцию("Всего");
	Таб.ВывестиСекцию("Подвал");
	глОживить(1);
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Реестр счетов-фактур", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // СформироватьРеестр()

//******************************************************************************
// Сформировать(ЗакрытьДиалог)
//
// Параметры:
//  ЗакрытьДиалог
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Сформировать(ЗакрытьДиалог = 0)
	
	Если СписокВидовОтчетов.ТекущаяСтрока()=1 Тогда
		СформироватьКнигу(ЗакрытьДиалог);
	Иначе     
		СформироватьРеестр(ЗакрытьДиалог);
	КонецЕсли;
	
КонецПроцедуры // Сформировать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	Если ФлагВосстановленияНастройки = 0 Тогда

		Фирма     = глЗначениеПоУмолчанию("ОсновнаяФирма");
		ВыбЮрЛицо = ?(ПустоеЗначение(Фирма)=1,"",Фирма.ЮрЛицо);
		
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;

	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 		= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 		= глРасшифровка.Получить("ДатаКонца");
		ВыбЮрЛицо	    = глРасшифровка.Получить("ВыбЮрЛицо");
		СтарыйВидОтчета = глРасшифровка.Получить("СтарыйВидОтчета");
		ПоКлиентам      = глРасшифровка.Получить("ПоКлиентам");
		ОтборПоКлиентам = глРасшифровка.Получить("ОтборПоКлиентам");
		ВыбКонтрагент   = глРасшифровка.Получить("ВыбКонтрагент");
		ИтогиПоТипам    = глРасшифровка.Получить("ИтогиПоТипам");
		СписокВидовОтчетов.ТекущаяСтрока(глРасшифровка.Получить("СписокВидовОтчетов"));
		
		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		СтарыйВидОтчета = СписокВидовОтчетов.ТекущаяСтрока();
		Обновить = 0;
	КонецЕсли;                      

	УправлениеДиалогом();

КонецПроцедуры		// ПриОткрытии()       

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	
КонецПроцедуры // ВводНового()  
                                                                                
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ДатаКонца=ПолучитьДатуТА();

ДокПодч = СоздатьОбъект("Документ");

СписокВидовОтчетов.ДобавитьЗначение("Книга покупок");
СписокВидовОтчетов.ДобавитьЗначение("Реестр непогашенных счетов - фактур");
СписокВидовОтчетов.ТекущаяСтрока(1);