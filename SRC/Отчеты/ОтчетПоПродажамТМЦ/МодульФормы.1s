////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//            
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ

// используются для стандартного механизма кнопок "Обновить" и "Настройка"
Перем Таб;		
Перем Обновить;
Перем Расшифровка; 

Перем СписокГруппировок;
Перем КоличествоГруппировок;
Перем НомерГруппировкиПоТМЦ;      
Перем НомерГруппировкиПоПартиям;
Перем НомерГруппировкиПоДок;       

//Переменые необходимые для проверки на наличие скидок в документе реализаци
Перем Скидочка;	//- процент скидки в даном документе
Перем ВыданоСоСкидкой;

// Флаг, определяющий есть ли группировки по номенклатуре и документу и,
// следовательно, надо ли вывоводить дополнительные колонки в отчете
// (цена, НДС, скидка)
Перем ЕстьКолонки;  

// Флаг определяющий будет ли выводится количество, которое имеет смысл только при наличии группировки по номенклатуре
Перем ЕстьКоличество;    

// Итоговые суммы
Перем ВсегоПоступление;
Перем ВсегоНДСПост;
Перем ВсегоОборот;
Перем ВсегоНДС;
Перем ВсегоПрибыль;

// списки значений, в которых определены возможные типы операций
Перем СписокОперДебет, СписокОперКредит;

Процедура ВывестиГруппировку(Запрос,Ном) Далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ     
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру      

//******************************************************************************
// ПроверкаУчетнойПолитики()
//
// Параметры:
//	Нет
//  
// Возвращаемое значение: 
//	0 - если пользователь отказался от формирвания отчета, 1 - в противном случае.
//
// Вызывается из формул элементов диалога:
//
// Описание:  
//	Если для какого-либо из юр. лиц, попадающих в отчет установлена учетная политика "По среднему",
// и заданы фильтры или детализация по поставщикам или партиям, выдается соответствующее предупреждение
//                                                               
Функция ПроверкаУчетнойПолитики()
	 	
	 // Сначала проверим, не ставит ли пользователь фильтры или детализацию по поставщикам или поставкам
	ЕстьМФПоПоставщикам=0;
	ТаблицаМФ.ВыбратьСтроки();
	Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
		Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="Поставщик") и (ТаблицаМФ.ФлВкл=2) Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЦикла;      
	
	Если Группировки.НайтиЗначение("Поставщик")<>0 Тогда
		Если Группировки.Пометка(Группировки.НайтиЗначение("Поставщик"))=1 Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЕсли;
	
	Если Группировки.НайтиЗначение("Партия")<>0 Тогда
		Если Группировки.Пометка(Группировки.НайтиЗначение("Партия"))=1 Тогда
			ЕстьМФПоПоставщикам=1;
		КонецЕсли;
	КонецЕсли;
	                          
	// Если фильтры и детализация не утановлены тогда и проверять больше нечего
	Если (ВыбПоставщик.Выбран()=0) И
		 (ЕстьМФПоПоставщикам=0)
	Тогда     
		Возврат 1;
	КонецЕсли;	 
	
	// Список юр. лиц, по которым установлен учет по среднему
	СписокЮрЛиц = СоздатьОбъект("СписокЗначений");
	ПроверитьВсе = 0;
	Если ВидРазделителя = 1 Тогда // по фирме
		Если ВыбРазделитель1.Выбран() = 1 Тогда
			Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
				СписокЮрЛиц.ДобавитьЗначение(ВыбРазделитель1.ЮрЛицо);           
			КонецЕсли;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;
    ИначеЕсли ВидРазделителя = 2 Тогда // по юр. лицу                                                          
		Если ВыбРазделитель2.Выбран() = 1 Тогда
			Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
				СписокЮрЛиц.ДобавитьЗначение(ВыбРазделитель2);
			КонецЕсли;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;   
	ИначеЕсли ВидРазделителя = 3 Тогда // по упр. аналитике
		Если ВыбРазделитель3.Выбран() = 1 Тогда
			СпрФирмы = СоздатьОбъект("Справочник.Фирмы");
			СпрФирмы.ВыбратьЭлементы();
			Пока СпрФирмы.ПолучитьЭлемент() = 1 цикл
				Если СпрФирмы.УпрАналитика = ВыбРазделитель3 Тогда
					Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   		   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
						СписокЮрЛиц.ДобавитьЗначение(СпрФирмы.ЮрЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе        
			ПроверитьВсе = 1;
		КонецЕсли;     
	КонецЕсли;         
	
	Если ПроверитьВсе = 1 Тогда
		   
		//Сформируем списки множественного фильтра
        СписокФирмМФ = СоздатьОбъект("СписокЗначений");	
        СписокЮрЛицМФ = СоздатьОбъект("СписокЗначений");	
        СписокУпрАналитикМФ = СоздатьОбъект("СписокЗначений");	
		
		ТаблицаМФ.ВыбратьСтроки();
		Пока ТаблицаМФ.ПолучитьСтроку()=1 Цикл
			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="Фирма") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокФирмМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФФирм = ТаблицаМФ.ТипМФ;				
			КонецЕсли; 
			
			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="ЮрЛицо") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокЮрЛицМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФЮрЛиц = ТаблицаМФ.ТипМФ;				
			КонецЕсли;

			Если (СокрЛП(ТаблицаМФ.ИмяПеременной)="УпрАналитика") и (ТаблицаМФ.ФлВкл=2) Тогда
				СписокУпрАналитикМФ = ТаблицаМФ.СписокЭлементов;
				ТипМФУпрАналитики = ТаблицаМФ.ТипМФ;				
			КонецЕсли;
		КонецЦикла;
		
		СпрФирмы = СоздатьОбъект("Справочник.Фирмы");
		СпрФирмы.ВыбратьЭлементы();
		Пока СпрФирмы.ПолучитьЭлемент() = 1 цикл
			 
			//Сначала проверим, может фирма и в отчет-то не попадает,
			//тогда и юр. лицо по ней включать не надо
			
			ПопадетВОтчет = 1;
			
			Если (СписокФирмМФ.РазмерСписка()>0) ИЛИ 
				 (СписокЮрЛицМФ.РазмерСписка()>0) ИЛИ 
				 (СписокУпрАналитикМФ.РазмерСписка()>0) Тогда
				 	Если СписокФирмМФ.РазмерСписка()>0 Тогда    
				 		Если СписокФирмМФ.НайтиЗначение(СпрФирмы.ТекущийЭлемент())=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФФирм = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФФирм = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;
				 	
				 	Если СписокЮрЛицМФ.РазмерСписка()>0 Тогда                                                  
				 		Если СписокЮрЛицМФ.НайтиЗначение(СпрФирмы.ЮрЛицо)=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФЮрЛиц = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФЮрЛиц = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;

				 	Если СписокУпрАналитикМФ.РазмерСписка()>0 Тогда                                                  
				 		Если СписокУпрАналитикМФ.НайтиЗначение(СпрФирмы.УпрАналитика)=0 Тогда
				 			ПопадетВОтчет = ?(ТипМФУпрАналитики = 1, 0, 1);
				 		Иначе
				 			ПопадетВОтчет = ?(ТипМФУпрАналитики = 1, 1, 0);
				 		КонецЕсли;
				 	КонецЕсли;
			КонецЕсли;
            
			Если ПопадетВОтчет = 1 Тогда

				Если (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.FIFO)
			   	   и (ВыбРазделитель1.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаКонца) <> Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда				
					Если СписокЮрЛиц.НайтиЗначение(СпрФирмы.ЮрЛицо) = 0 Тогда	//Проверяем, не добавлено ли уже юр. лицо
						СписокЮрЛиц.ДобавитьЗначение(СпрФирмы.ЮрЛицо);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;            
	
	Если СписокЮрЛиц.РазмерСписка() > 0 Тогда
		Для к = 1 по СписокЮрЛиц.РазмерСписка() Цикл
			Если к = 1 Тогда
				СтрокаЮрЛиц = Строка(СписокЮрЛиц.ПолучитьЗначение(к));
			Иначе
				СтрокаЮрЛиц = СтрокаЮрЛиц + "', '" + Строка(СписокЮрЛиц.ПолучитьЗначение(к));
			КонецЕсли;
		КонецЦикла;
		Если СписокЮрЛиц.РазмерСписка() > 1 Тогда
			НачалоСтроки = "По юр.лицам '";
		Иначе
			НачалоСтроки = "По юр. лицу '";
		КонецЕсли;
		
		Если Вопрос(НачалоСтроки+СтрокаЮрЛиц+"' себестоимость вычисляется по среднему. "+
				"Использование фильтров и детализации по поставщикам и "+
				"по партиеобразующим документам могут привести к некорректным данным. "+
				"Продолжить выполнение отчета?","Да+Нет", 60)="Нет" Тогда
				Возврат 0;
		КонецЕсли; 
	КонецЕсли;
	Возврат 1;
КонецФункции


//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	
                                                       
//******************************************************************************
// ФРМКолЕд(Количество, Единица)
//
// Параметры: 
//  Количество, Единица
//
// Возвращаемое значение:
//  Возвращает отформатированную строку
//
// Описание:
//  Возвращает строку, представляющую собой отформатированное количество и единицу измерения.
// 	В случае нулевого значения количества возвращает пустую строку.
//
Функция ФРМКолЕд(Количество, Единица)
	СтрВозвр = глФРМКоличество(Количество, Единица);
	Если Количество <> 0 Тогда
	    СтрВозвр = СтрВозвр + " " + Единица;
	КонецЕсли;                     
	Возврат СтрВозвр;
КонецФункции // ФРМКолЕд()

//******************************************************************************
// СформироватьИнформациюОПартии(Партия)
//
// Параметры: 
//		Партия - элемент справочника "Партии"
//
// Возвращаемое значение: 
//	строка с описанием партии
//
// Описание: 
//	формирует строку описания партии со всеми ее реквизитами
//
Функция СформироватьИнформациюОПартии(Партия)
	Перем Результат;
	               
	Результат="";
	
	Если ПустоеЗначение(Партия)=1 Тогда
		Возврат(Результат);
	КонецЕсли; 
	          
	Если ПустоеЗначение(Партия.Поставщик)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Поставщик: "+СокрЛП(Партия.Поставщик);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ПриходныйДокумент)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Поставка: "+СокрЛП(Партия.ПриходныйДокумент);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ДоговорПоставщика)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Договор: "+СокрЛП(Партия.ДоговорПоставщика);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		Результат=?(Результат="","",Результат+РазделительСтрок);
		Результат=Результат+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	
	Возврат(Результат);
	
КонецФункции //СформироватьИнформациюОПартии()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
		Форма.ИспользоватьСлой("Шапка,Подвал,Основной1,Основной2,Разделитель"+СокрЛП(ВидРазделителя));
	Иначе     
		Форма.ИспользоватьСлой("Шапка,МФ,Подвал");
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()    

                                                      
//******************************************************************************
// ПересчетВалюты(Сумма, Документ, ВалютаНач = 0, ВалютаКон = 0)
//
// Параметры: 
//  Сумма    - сумма в валюте
//	Документ - документ, из которого берется курс 
//	ВалютаНач - исходная валюта, по умолчанию - валюта бух. учета
// 	ВалютаКон - конечная валюта, по умолчанию - валюта упр. учета
//
// Возвращаемое значение:
//  Сумму в валюте ВалютаКон
//
// Описание:
//  Осуществляет пересчет из валюты из ВалютаНач в ВалютаКон учета по курсу, заданному в документе.
//	Если в документе курс не задан, то берется курс на дату документа.
//
Функция ПересчетВалюты(Сумма, Документ, ВалютаНач = 0, ВалютаКон = 0)
	Если ВалютаНач = 0 Тогда
	    ВалютаНач = глРубли;
	КонецЕсли;
	Если ВалютаКон = 0 Тогда
	    ВалютаКон = глДоллары;
	КонецЕсли;
	КурсКон = 0;
	КурсНач = 0;
	Если глЕстьРеквизитШапки("Курс", Документ.Вид()) = 1 Тогда
		Если Документ.Валюта = ВалютаКон Тогда
		    КурсКон = Документ.Курс;
		ИначеЕсли Документ.Валюта = ВалютаНач Тогда
			КурсНач = Документ.Курс;
		КонецЕсли;
	КонецЕсли;	             
	Если КурсНач = 0 Тогда
	    КурсНач = Документ.ДатаДок;
	КонецЕсли;                  
	Если КурсКон = 0 Тогда
	    КурсКон = Документ.ДатаДок;
	КонецЕсли;                  
	Возврат глПересчет(Сумма, ВалютаНач, КурсНач, ВалютаКон, КурсКон);
КонецФункции // ПересчетВалюты()

//******************************************************************************
// РасшифровкаОбновить(Обновить)
//
// Параметры:
//  Обновить = 	1 - нажата кнопка "Обновить"
//				2 - нажата кнопка "Настройка"	
//
// Возвращаемое значение: 
//	Расшифровка (список значений)
//
// Вызывается из формул элементов диалога:
//  из таблицы, кнопки "Обновить" и "Настройка"
//
// Описание:  
//	функция для стандартного механизма кнопок ""Обновить" и "Настройка""
//  помещает значение параметра в список Расшифровка  и возвращает этот список
//
Функция РасшифровкаОбновить(Обновить)
	
	Расшифровка.Установить("Обновить", Обновить);
	Возврат Расшифровка;
	
КонецФункции //РасшифровкаОбновить()                                            

//******************************************************************************
// ИзменениеПорядкаГрупп(НаправлениеСдвига)
//
// Параметры:
//  НаправлениеСдвига = 	 1 - вниз
//							-1 - вверх
// Возвращаемое значение: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  кнопки "вверх" и "вниз" рядом со списком группировок
//
// Описание:  
//	Процедура производит сдвиг текущей группировки в общем
// 	списке группировок на "НаправлениеСдвига" позиций
//
Процедура ИзменениеПорядкаГрупп(НаправлениеСдвига)
	
	ТекСтр = Группировки.ТекущаяСтрока();
	ПослСдвигСтр = Группировки.РазмерСписка() - 2;
	Сдвигать = 0;
	Если ТекСтр <= ПослСдвигСтр Тогда
		Если не((НаправлениеСдвига = 1) и (ТекСтр = ПослСдвигСтр)) Тогда                       
			Сдвигать = 1;
		КонецЕсли;                                                                             
	Иначе                
		Если  (ТекСтр > ПослСдвигСтр+1) и (НаправлениеСдвига = -1) Тогда
			Сдвигать = 1;                                      
		ИначеЕсли НаправлениеСдвига = 1 Тогда
			Сдвигать = 1;
		Иначе			
			Предупреждение("Группировки ""По документам движения"" и ""По поставкам"" всегда находятся
			               |в конце списка.",60);
		КонецЕсли;
	КонецЕсли;
	Если Сдвигать = 1 Тогда
		Группировки.СдвинутьЗначение(НаправлениеСдвига, ТекСтр);
	КонецЕсли;
КонецПроцедуры // ИзменениеПорядкаГрупп()

//******************************************************************************
// УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
//
// Параметры:  ТекстЗапроса - переданный по ссылке текст запроса
// 			   ТекстЗагол   - переданный по ссылке текст заголовка
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Дополняет строку запроса и заголовка в соответствии с выбранными группировками.
//    
Процедура УстановитьГруппировкиЗапроса(ТекстЗапроса, ТекстЗагол)
	СписокГруппировок = СоздатьОбъект("СписокЗначений");
	
	Для Сч=1 По Группировки.РазмерСписка() Цикл
		Если Группировки.Пометка(Сч)=1 Тогда
			ПредставлениеГрупп="";
			ТекстГрупп=Группировки.ПолучитьЗначение(Сч,ПредставлениеГрупп);
			Если  (ТекстГрупп = "Поставщик") или (ТекстГрупп = "Номенклатура") или (ТекстГрупп = "Покупатель") Тогда
				ТекстБезГрупп = " без групп";
			Иначе
				ТекстБезГрупп = "";
			КонецЕсли;
			ТекстЗапроса 	= ТекстЗапроса 	+ "Группировка "+ТекстГрупп+ТекстБезГрупп+";";   
			ТекстЗагол 		= ТекстЗагол 	+ ?(ТекстЗагол="",""," / ")+ПредставлениеГрупп;
			СписокГруппировок.ДобавитьЗначение(ТекстГрупп,ПредставлениеГрупп);
			Если ТекстГрупп = "Номенклатура" Тогда
				НомерГруппировкиПоТМЦ = СписокГруппировок.РазмерСписка();
			ИначеЕсли ТекстГрупп = "ДокПоставки" Тогда
				НомерГруппировкиПоПартиям = СписокГруппировок.РазмерСписка();
			ИначеЕсли ТекстГрупп = "Док" Тогда
				НомерГруппировкиПоДок = СписокГруппировок.РазмерСписка();   
				Если НомерГруппировкиПоТМЦ < 1000 Тогда
					ТекстЗапроса = ТекстЗапроса + "Группировка НомерСтроки;";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьГруппировкиЗапроса()

//******************************************************************************
// ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//	НазваниеГруппировки - текущая группировка
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                           
Процедура ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка, НазваниеГруппировки)  
	
	КолПоОтчетам = 0;
	РасшифровкаПоОтчетамКомитентам = СоздатьОбъект("СписокЗначений");
	Если ПоОтчетамКомитенту = 1 Тогда
		КолПоОтчетам = Запрос.КолОтчитались;
	КонецЕсли;
	
	Приход    		= Запрос.ПриходС;
	Расход 	  		= Запрос.РасходС; 

	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		ПечЕд = ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница);   
		ПечПроизводитель = Запрос.Номенклатура.Производитель;
		ПечАртикул = Запрос.Номенклатура.Артикул;
		Коэф = ПечЕд.Коэффициент; 
		ПечКодБазы = Запрос.Номенклатура.Код;
	Иначе     
		ПечЕд = "";   
		ПечПроизводитель = "";
		ПечАртикул = ""; 
		ПечКодБазы = "";
	КонецЕсли; 

	
	РасходКол 		= Запрос.РасходК + КолПоОтчетам; 
	Расход 	  		= Запрос.РасходС - Запрос.ВозвратС;
	ВозвратКол 		= Запрос.ВозвратК;
	ВозвратС 	= Запрос.ВозвратС; 
	Если ПоОтчетамКомитенту = 1 Тогда
		Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ + Запрос.ОборотОтчитались;
		ОборотОтчитались = Запрос.ОборотОтчитались;
		Вознаграждение = Запрос.КомВознаграждение;   
	Иначе
		Если ВидСуммы = 1 Тогда
			Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ;
		Иначе    
			Оборот 		= Запрос.ОборотУпр + Запрос.ОборотКомРасходУпр - Запрос.ОборотУпрВ;
		КонецЕсли;
		ОборотОтчитались = 0;
		Вознаграждение = 0;
	КонецЕсли;                    
	
	Если Ном = 1  Тогда
	    ВсегоПоступление = ВсегоПоступление + Расход;
		ВсегоОборот      = ВсегоОборот + Оборот;
	КонецЕсли;                              

	Если (Запрос.РасходС = 0) и (Запрос.ВозвратС = 0) и (КолПоОтчетам = 0) и (Запрос.ОборотСумма = 0) и (Запрос.ОборотКомРасход = 0) и (Запрос.ОборотВ = 0) Тогда 
		Возврат;
	КонецЕсли;
	
	//начальный остаток
	Таб.ВывестиСекцию(НазваниеСекции+"|Начало"); 
	ПечСуммаРеал = глФРМ(Оборот);
	ПечСуммаПост = глФРМ(Расход);
	//ПечКоличество = ?(Ном < НомерГруппировкиПоТМЦ, глФРМ(0), ФРМКолЕд(РасходКол-ВозвратКол, ПечЕд)); 
	ПечКоличество = ФРМКолЕд(РасходКол-ВозвратКол, ПечЕд);
	Прибыль = Оборот - Расход - ОборотОтчитались  + Вознаграждение;   
	ПечПрибыльСумма = глФРМ(Прибыль);   

	Если Ном = 1 Тогда
		ВсегоПрибыль = ВсегоПрибыль + Прибыль;
	КонецЕсли;
	
	Если Расход <> 0 Тогда
		ПечПрибыльПроцент = глФРМ(Прибыль/Расход * 100); 
	Иначе
	    ПечПрибыльПроцент = глФРМ(0);
	КонецЕсли;
	
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию(НазваниеСекции + "|Количество");
	КонецЕсли;    
	
	Если КолПоОтчетам <> 0 Тогда 
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Фирма");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбПокупатель, "Покупатель");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Договор");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбПоставщик, "Поставщик");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "ДокПоставки");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Док");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбТМЦ, "Номенклатура");
	    
		СчетчикЦикла = 0;
	    Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл
	    	РасшифровкаПоОтчетамКомитентам.Установить(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла), Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла)));
	    КонецЦикла;
	КонецЕсли;
	
	Если ЕстьКолонки = 1 Тогда
		ПечЦенаПост = глФРМ(0);  
		НДСПост = (Запрос.РасходСНДС-Запрос.ВозвратСНДС) - (Запрос.РасходБезНДС-Запрос.ВозвратБезНДС);
	    ПечНДСПост = глФРМ(НДСПост);      
		Если Ном = 1 Тогда
		    ВсегоНДСПост = ВсегоНДСПост + НДСПост;
		КонецЕсли;
		Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
			Если (РасходКол-ВозвратКол-КолПоОтчетам) <> 0 Тогда
				ПечЦенаПост = глФРМ(Расход/(РасходКол-ВозвратКол-КолПоОтчетам)*Коэф);
			Иначе
		    	ПечЦенаПост = глФРМ(0);
			КонецЕсли;
			Если (РасходКол-ВозвратКол) <> 0 Тогда
				ПечЦенаРеал = глФРМ(Оборот/(РасходКол-ВозвратКол)*Коэф);
			Иначе
		    	ПечЦенаРеал = глФРМ(0);   
			КонецЕсли;                    
		Иначе
			ПечЦенаРеал = глФРМ(0);
		    ПечЦенаПост = глФРМ(0);
		КонецЕсли;
		ПечНДСРеал  = глФРМ(0);
		ПечСкидка   = глФРМ(0);
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|ЦенаПост");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаПост");
		Если ВидСуммы = 1 Тогда
		   Таб.ПрисоединитьСекцию(НазваниеСекции + "|НДСПост");
		КонецЕсли;
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|ЦенаРеал");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаРеал");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|Скидка");
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию(НазваниеСекции + "|НДСРеал"); 
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаПост");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаРеал");
	КонецЕсли;
	
    Таб.ПрисоединитьСекцию(НазваниеСекции + "|Прибыль");
	глОживить(1);

КонецПроцедуры // ПечатьСтроки()

//******************************************************************************
// ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)
//
// Параметры:
//  Запрос - объект "Запрос", на основании которого строится отчет
//	Ном - Номер группировки запроса (Число)
//	НазваниеСекции - название секции, которую следует использовать (Строка)
//	ПечТекстСтроки - текстовое представление текущей строки
//	ТекРасшифровка - расшифровка текущей строки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит вывод в печатную форму одной строки запроса.
//                                           
Процедура ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка)     

	КолПоОтчетам = 0;
	РасшифровкаПоОтчетамКомитентам = СоздатьОбъект("СписокЗначений");
	Если ПоОтчетамКомитенту = 1 Тогда
		КолПоОтчетам = Запрос.КолОтчитались;
	КонецЕсли;
	
	Если (Ном >= НомерГруппировкиПоТМЦ) Тогда
		ПечЕд = ?(ВидЕдиницы=1,Запрос.Номенклатура.ОсновнаяЕдиница,Запрос.Номенклатура.БазоваяЕдиница); 
		Коэф = ПечЕд.Коэффициент;
	Иначе     
		ПечЕд = "";
	КонецЕсли; 
	
	РасходКол 		= Запрос.РасходК + КолПоОтчетам;
	Расход 	  		= Запрос.РасходС - Запрос.ВозвратС;
	ВозвратКол 		= Запрос.ВозвратК;
	ВозвратС 	= Запрос.ВозвратС;
	Если ПоОтчетамКомитенту = 1 Тогда
		Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ + Запрос.ОборотОтчитались;
		ОборотОтчитались = Запрос.ОборотОтчитались;
		Вознаграждение = Запрос.КомВознаграждение;
	Иначе                                                                             
		Если ВидСуммы = 1 Тогда
			Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ;
		Иначе
			Оборот 		= Запрос.ОборотУпр + Запрос.ОборотКомРасходУпр - Запрос.ОборотУпрВ;
		КонецЕсли;
		ОборотОтчитались = 0;
		Вознаграждение = 0;
	КонецЕсли;             
	
	Если (Запрос.РасходС = 0) и (Запрос.ВозвратС = 0) и (КолПоОтчетам = 0)  и (Запрос.ОборотСумма = 0) и (Запрос.ОборотКомРасход = 0) и (Запрос.ОборотВ = 0) Тогда 
		Возврат;
	КонецЕсли;
	     
	Если Ном = 1  Тогда
	    ВсегоПоступление = ВсегоПоступление + Расход;
		ВсегоОборот      = ВсегоОборот + Оборот;
	КонецЕсли;                              

	//начальный остаток   
	Если ЕстьКолонки = 0 Тогда
		Таб.ВывестиСекцию(НазваниеСекции+"|Начало");  
	КонецЕсли;
	СтрокаЗаполнена = 1;
	ПечСуммаРеал = глФРМ(Оборот);
	ПечСуммаПост = глФРМ(Расход);
	ПечКоличество = ФРМКолЕд(РасходКол-ВозвратКол, ПечЕд);
	                      
	Прибыль = Оборот - Расход - ОборотОтчитались + Вознаграждение;
	ПечПрибыльСумма = глФРМ(Прибыль);  
	Если Расход <> 0 Тогда
		ПечПрибыльПроцент = глФРМ(Прибыль/Расход * 100);
	Иначе
		ПечПрибыльПроцент = глФРМ(0);
	КонецЕсли;
	
	Если Ном = 1 Тогда
		ВсегоПрибыль = ВсегоПрибыль + Прибыль;
	КонецЕсли;             
	
	Если КолПоОтчетам <> 0 Тогда 
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Фирма");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбПокупатель, "Покупатель");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Договор");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбПоставщик, "Поставщик");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "ДокПоставки");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение("", "Док");
		РасшифровкаПоОтчетамКомитентам.ДобавитьЗначение(ВыбТМЦ, "Номенклатура");
	    
		СчетчикЦикла = 0;
	    Для СчетчикЦикла = 1 По СписокГруппировок.РазмерСписка() Цикл
	    	РасшифровкаПоОтчетамКомитентам.Установить(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла), Запрос.ПолучитьАтрибут(СписокГруппировок.ПолучитьЗначение(СчетчикЦикла)));
	    КонецЦикла;
	КонецЕсли;
	
	Если ЕстьКолонки = 1 Тогда
		НДСПост = (Запрос.РасходСНДС-Запрос.ВозвратСНДС) - (Запрос.РасходБезНДС-Запрос.ВозвратБезНДС);
		ПечНДСПост = глФРМ(НДСпост);     
		Если ПоОтчетамКомитенту = 1 Тогда
			ОборотОтчиталисьНом = ОборотОтчитались;
			ВознаграждениеНом = Вознаграждение;
			КоличествоНом = РасходКол;  
			РасходКВсего = Запрос.РасходКВсего;
		КонецЕсли;
		
		Пока Запрос.Группировка("НомерСтроки") = 1 цикл  
			Док = Запрос.ПолучитьАтрибут("Док");
			Док.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
			Если ПоОтчетамКомитенту = 1 Тогда
				РасходКол 		= ?(РасходКВсего = 0, 0, КоличествоНом * Запрос.РасходКВсего/РасходКВсего);
				Расход 	  		= ?(РасходКВсего = 0, 0, (Запрос.РасходС - Запрос.ВозвратС) * РасходКол / РасходКВсего);
				ВозвратКол 		= Запрос.ВозвратК;
				ВозвратС 	= Запрос.ВозвратС;
				ОборотОтчитались = ?(КоличествоНом = 0, 0, ОборотОтчиталисьНом * Мин(РасходКол, КоличествоНом)/КоличествоНом);
				Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ + ОборотОтчитались;
				Вознаграждение = ?(КоличествоНом = 0, 0, ВознаграждениеНом * Мин(РасходКол, КоличествоНом)/КоличествоНом);
			Иначе    
				Расход 	  		= Запрос.РасходС - Запрос.ВозвратС;
				РасходКол 		= Запрос.РасходК; 
				ВозвратКол 		= Запрос.ВозвратК;
				ВозвратС 	= Запрос.ВозвратС;
				Если ВидСуммы = 1 Тогда
					Оборот 		= Запрос.ОборотСумма + Запрос.ОборотКомРасход - Запрос.ОборотВ;
				Иначе
					Оборот 		= Запрос.ОборотУпр + Запрос.ОборотКомРасходУпр - Запрос.ОборотУпрВ;
				КонецЕсли;
				ОборотОтчитались = 0;
				Вознаграждение = 0;
			КонецЕсли;
			
			Прибыль = Оборот - Расход - ОборотОтчитались + Вознаграждение;
			ПечПрибыльСумма = глФРМ(Прибыль);  
			Если Расход <> 0 Тогда
				ПечПрибыльПроцент = глФРМ(Прибыль/(Расход) * 100);
			Иначе
				ПечПрибыльПроцент = глФРМ(0);
			КонецЕсли;
			
			Если ((Запрос.РасходС - ВозвратС) <> 0) или (Оборот <> 0) Тогда
				
				// Если в документе есть несколько строк с одним и тем же товаром,
				// то будем выводить этот документ несколько раз
				Таб.ВывестиСекцию(НазваниеСекции+"|Начало");  
				
	
				ПечСуммаРеал = глФРМ(Оборот);
				ПечСуммаПост = глФРМ(Расход);
				ПечКоличество = ФРМКолЕд(РасходКол-ВозвратКол, ПечЕд);     
				
				// для услуг
				Если Число(ПечКоличество) = 0 Тогда    
					Знак = ?(Лев(Док.Вид(), 7) = "Возврат", -1, 1);
					ПечКоличество = ФРМКолЕд(Док.Количество * Коэф/Док.Коэффициент * Знак, ПечЕд);
				КонецЕсли;
				
				Если (РасходКол-ВозвратКол) <> 0 Тогда
					ПечЦенаПост = глФРМ(Расход/(РасходКол-ВозвратКол)*Коэф);
				Иначе
			    	ПечЦенаПост = глФРМ(0);
				КонецЕсли;
				Если глЕстьРеквизитМнЧ("Цена", Док.Вид()) = 1 Тогда
					Если ВидСуммы = 1  Тогда  
						Если глЕстьРеквизитШапки("Валюта", Док.Вид()) = 1 Тогда
							Если Док.Валюта <> глРубли Тогда
								Курс = 0;
								Если глЕстьРеквизитШапки("Курс", Док.Вид()) = 1 Тогда
								    Курс = Док.Курс;
								КонецЕсли;          
								Если Курс = 0 Тогда
								    Курс = Док.ДатаДок;
								КонецЕсли;
						  		ЦенаРеал = глПересчет(Док.Цена*Коэф/Док.Коэффициент, Док.Валюта, Курс, глРубли, 1);
						  	Иначе                    
						  		ЦенаРеал = Док.Цена*Коэф/Док.Коэффициент;
							КонецЕсли;                                                  
						Иначе
							ЦенаРеал = Док.Цена*Коэф/Док.Коэффициент;
						КонецЕсли;                  
					Иначе
						Если глЕстьРеквизитШапки("Валюта", Док.Вид()) = 1 Тогда
							Если Док.Валюта <> глДоллары Тогда
								Курс = 0;
								Если глЕстьРеквизитШапки("Курс", Док.Вид()) = 1 Тогда
								    Курс = Док.Курс;
								КонецЕсли;          
								Если Курс = 0 Тогда
								    Курс = Док.ДатаДок;
								КонецЕсли;
						  		ЦенаРеал = глПересчет(Док.Цена*Коэф/Док.Коэффициент, Док.Валюта, Курс, глДоллары, Док.ДатаДок);
						  	Иначе
						  		ЦенаРеал = Док.Цена*Коэф/Док.Коэффициент;
							КонецЕсли;              
						Иначе
							ЦенаРеал = глПересчет(Док.Цена*Коэф/Док.Коэффициент, глРубли, 1, глДоллары, Док.ДатаДок);
						КонецЕсли;                  
					КонецЕсли;
				    ПечЦенаРеал = глФРМ(ЦенаРеал);
				Иначе
					ПечЦенаРеал = ?(РасходКол <> 0, глФРМ(Оборот/РасходКол), глФРМ(0));
				КонецЕсли;                        
				Если глЕстьРеквизитМнЧ("СуммаНДС", Док.Вид()) = 1 Тогда
					Если Док.Количество <> 0 Тогда
					    НДСРеал = ПересчетВалюты(Док.СуммаНДС * (РасходКол-ВозвратКол)/(Док.Количество*Док.Коэффициент), Док.ТекущийДокумент(), Док.Валюта,  ?(ВидСуммы=1, глРубли, глДоллары));
					КонецЕсли;
					
					// для услуг
					Если НДСРеал = 0 Тогда
					    НДСРеал = ПересчетВалюты(Док.СуммаНДС, Док.ТекущийДокумент(), Док.Валюта,  ?(ВидСуммы=1, глРубли, глДоллары));
					КонецЕсли;  
					
					ПечНДСРеал = глФРМ(НДСРеал);
				Иначе
					ПечНДСРеал = глФРМ(0);
				КонецЕсли;                     
				
				Если (глЕстьРеквизитМнЧ("Цена", Док.Вид()) = 1) и (глЕстьРеквизитШапки("Скидка", Док.Вид()) = 1) Тогда
					Если Окр(Док.Цена*Док.Количество,2,1) <> 0 Тогда 
				    	ПечСкидка = глФРМ((Окр(Док.Цена*Док.Количество,2,1)-Док.Сумма)/Окр(Док.Цена*Док.Количество,2,1)*100);
						Если ПустоеЗначение(ПечСкидка) = 0 Тогда
							ПечСкидка = ПечСкидка + "%";
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				Если ЕстьКоличество = 1 Тогда
					Таб.ПрисоединитьСекцию(НазваниеСекции + "|Количество");
				КонецЕсли;                     
				
				// Посчитаем итоговую сумму НДС
				ВсегоНДС = ВсегоНДС + НДСРеал;
				
				Если ЕстьКолонки = 1 Тогда
				    Таб.ПрисоединитьСекцию(НазваниеСекции + "|ЦенаПост");
				    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаПост");
					Если ВидСуммы = 1 Тогда
				    	Таб.ПрисоединитьСекцию(НазваниеСекции + "|НДСПост");
					КонецЕсли;
				    Таб.ПрисоединитьСекцию(НазваниеСекции + "|ЦенаРеал");
				    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаРеал");
				    Таб.ПрисоединитьСекцию(НазваниеСекции + "|Скидка");
					Если ВидСуммы = 1 Тогда
					    Таб.ПрисоединитьСекцию(НазваниеСекции + "|НДСРеал");
					КонецЕсли;
				Иначе
				КонецЕсли;
			    Таб.ПрисоединитьСекцию(НазваниеСекции + "|Прибыль");
				ВывестиГруппировку(Запрос, Ном+1);
			КонецЕсли;
		КонецЦикла; 
	Иначе
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаПост");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|СуммаРеал");
	    Таб.ПрисоединитьСекцию(НазваниеСекции + "|Прибыль");
	КонецЕсли;
	
	СчетчикЦикла = 0;  
	                    
	
	глОживить(1);

КонецПроцедуры // ПечатьСтрокиДокумента()

//******************************************************************************
// ВывестиГруппировку(Запрос,Ном)
//
// Параметры:
//  Запрос - объект "Запрос"
//	Ном - номер выводимой группировки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит в печатную форму одну группировку запроса. Если
//	Есть нижележащие группировки, они выводятся также с использованием рекурсивного
//	вызова этой же процедуры.
//
Процедура ВывестиГруппировку(Запрос,Ном)
	  
	Если Ном <= КоличествоГруппировок Тогда
		
		НазваниеГруппировки = СписокГруппировок.ПолучитьЗначение(Ном);
		
		Пока Запрос.Группировка(НазваниеГруппировки) = 1 Цикл

			Если НазваниеГруппировки = "Док" Тогда
				НазваниеСекции="Документ";
			Иначе                           
				НазваниеСекции="Строка"+Ном;
			КонецЕсли;         
			ПечТекстСтроки = Запрос.ПолучитьАтрибут(НазваниеГруппировки);
			Если (ТипЗначенияСтр(ПечТекстСтроки) = "Документ") или 
				 (ТипЗначенияСтр(ПечТекстСтроки) = "Справочник") Тогда
				ТекРасшифровка = ПечТекстСтроки;
			Иначе
				ТекРасшифровка = "";
			КонецЕсли;
			Если (НазваниеГруппировки = "СвойствоПартии") 
			        и (ПустоеЗначение(ПечТекстСтроки) = 0) 
					Тогда
				ПечТекстСтроки = ""+ПечТекстСтроки.Владелец+": "+СокрЛП(ПечТекстСтроки);
			ИначеЕсли (НазваниеГруппировки = "Док") или (НазваниеГруппировки = "Поставка") Тогда
				Если НазваниеГруппировки = "Поставка" Тогда                   
					Если ПечТекстСтроки.Выбран() = 1  Тогда
						Если ПечТекстСтроки.ПриходныйДокумент.Выбран() = 1 Тогда
							Док = ПечТекстСтроки.ПриходныйДокумент;   
							ТекРасшифровка = Док;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Док = ПечТекстСтроки;
				КонецЕсли;            
				Если ТипЗначенияСтр(Док) = "Документ" Тогда
					ПечТекстСтроки = "" + глПредставлениеДокумента(Док) + 
					" (" + СокрЛП(глИнформацияПоДокументуВЖурнале(Док)) + ")";
					ТекРасшифровка = Док; 
					//Если (Док.Вид() = "СписаниеТМЦ") Тогда
					//Продолжить;	
					//КонецЕсли;
					//Добавка ГАВ (13/06/2004) - проверка на то, что данный документ, то, что нам надо. - НАЧАЛО
					ВыданоСоСкидкой=0;
					Скидка=0;
					Если Лев(Док,10)="Реализация" тогда
						если (Док.ВыданоСоСкидкой=1) и (Док.Скидка<>0) тогда
							Скидка=Док.Скидка;
							ВыданоСоСкидкой=1;
							ПечТекстСтроки=ПечТекстСтроки+" (Скидка="+Скидка+"%)";
						конецЕсли;
					конецесли;
					//Добавка ГАВ (13/06/2004) - проверка на то, что данный документ, то, что нам надо. - КОНЕЦ
				КонецЕсли;
			КонецЕсли;
			ПечТекстСтроки = ?(ПустоеЗначение(ПечТекстСтроки)=1,глПредставлениеПустогоЗначения(НазваниеГруппировки),ПечТекстСтроки);
			                                           
			Если (НазваниеГруппировки = "Док") Тогда
				ПечатьСтрокиДокумента(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка); 
			Иначе
				ПечатьСтроки(Запрос,Ном,НазваниеСекции,ПечТекстСтроки,ТекРасшифровка, НазваниеГруппировки);
			КонецЕсли;
		
			// если есть более детальная группировка - выведем ее
			Если КоличествоГруппировок > Ном Тогда  
				Если Не((ЕстьКолонки = 1) и (СписокГруппировок.ПолучитьЗначение(Ном+1)="ДокПоставки") и (СписокГруппировок.ПолучитьЗначение(Ном)="Док")) Тогда
					ВывестиГруппировку(Запрос,Ном+1);
				КонецЕсли;
			КонецЕсли;          
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ВывестиГруппировку()                                          

//******************************************************************************
// ЗаполнитьСпискиОпераций()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  В этой процедуры в списки операций прописываются значения кодов операций,
//	движения по которым мы хотели бы показать в отдельных колонках.
//	Операции задаются раздельно по дебету и кредиту
//
Процедура ЗаполнитьСпискиОпераций()

	СписокОперДебет = СоздатьОбъект("СписокЗначений");
	СписокОперКредит= СоздатьОбъект("СписокЗначений");
	
КонецПроцедуры // ЗаполнитьСпискиОпераций()  

// ТекстЗапроса()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Текст запроса
//
// Вызывается из формул элементов диалога:
//
// Описание:
//	Формирует текс запроса, для отчета без рассчета комиссионного вознаграждения
//
Функция ТекстЗапроса()
	        
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ПартииНаличие.Фирма,
	|				  Регистр.ПартииОтданные.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика,
	|				  Регистр.ПартииОтданные.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо,
	|				  Регистр.ПартииОтданные.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии,
	|				  Регистр.ПартииОтданные.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура,
	|				  Регистр.ПартииОтданные.Номенклатура;
	|Производитель	= Регистр.ПартииНаличие.Номенклатура.Производитель,
	|				  Регистр.ПартииОтданные.Номенклатура.Производитель;
	|МОЛ_Комиссионер= Регистр.ПартииНаличие.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Покупатель		= Регистр.ПартииНаличие.ТекущийДокумент.Реализация.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ОтчетККМ.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияПрочее.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя_Розница.Контрагент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.ОтчетКомиссионера.Контрагент;
	|Проект			= Регистр.ПартииНаличие.ТекущийДокумент.Проект,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Проект;
	|Автор			= Регистр.ПартииНаличие.ТекущийДокумент.Автор,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Автор;
	|Поставка		= Регистр.ПартииНаличие.Партия,
	|				  Регистр.ПартииОтданные.Партия;
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство,
	|				  Регистр.ПартииОтданные.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик,
	|				  Регистр.ПартииОтданные.Партия.Поставщик;
	|ДокПоставки	= Регистр.ПартииНаличие.Партия.ПриходныйДокумент,
	|				  Регистр.ПартииОтданные.Партия.ПриходныйДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации,
	|				  Регистр.ПартииОтданные.КодОперации;
	|НомерСтроки	= Регистр.ПартииНаличие.НомерСтроки,
	|				  Регистр.ПартииОтданные.НомерСтроки;
	|Договор		= Регистр.ПартииОтданные.Договор;
	|ВалВзаим		= Регистр.ПартииОтданные.Договор.ВалютаВзаиморасчетов;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент;
	|Сумма1			= Регистр.ПартииНаличие.СуммаРуб,
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Сумма2			= Регистр.ПартииНаличие.СуммаБезНДС,
	|				  Регистр.ПартииОтданные.СуммаБезНДС;
	|Сумма3			= Регистр.ПартииНаличие.СуммаУпр,       
	|				  Регистр.ПартииОтданные.СуммаУпр;       
	|Оборот			= Регистр.ПартииНаличие.ПродСтоимость;
	|ОборотКом		= Регистр.ПартииОтданные.ПродСтоимость;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество, Регистр.ПартииОтданные.Количество;";
	
	Если ВидСуммы = 1 Тогда // бух с НДС
		ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб, Регистр.ПартииОтданные.СуммаРуб;";
		
	ИначеЕсли ВидСуммы = 2 Тогда // бух без НДС
		ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаУпр, Регистр.ПартииОтданные.СуммаУпр;";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса +
	"Функция ПриходС = Приход(Сумма);
	|Функция РасходС = Расход(Сумма);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество);
	|Функция ВозвратК = Приход(Количество)Когда(КодОперации в КодыВозвратов);
	|Функция ВозвратС = Приход(Сумма)Когда(КодОперации в КодыВозвратов);
	|Функция РасходБезНДС = Расход(Сумма2);
	|Функция РасходСНДС = Расход(Сумма1);
	|Функция ВозвратБезНДС = Приход(Сумма2)Когда(КодОперации в КодыВозвратов);
	|Функция ВозвратСНДС = Приход(Сумма1)Когда(КодОперации в КодыВозвратов);
	|Функция ОборотСумма = Сумма(Оборот)Когда(КодОперации в КодыОборота);
	|Функция ОборотУпр = Сумма(ПересчетВалюты(Оборот, Док))Когда(КодОперации в КодыОборота);
	|Функция ОборотКомРасход = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глРубли))Когда(КодОперации = глКО.ОтчетРеализатора);
	|Функция ОборотКомРасходУпр = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глДоллары))Когда(КодОперации = глКО.ОтчетРеализатора);
	|Функция ОборотВ = Сумма(Оборот)Когда(КодОперации в КодыВозвратов);
	|Функция ОборотУпрВ = Сумма(ПересчетВалюты(Оборот, Док))Когда(КодОперации в КодыВозвратов);
	|Условие (НЕ(КодОперации в КодыПеремещений));";       

	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапроса()

// ТекстЗапросаПоОтчетам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Текст запроса
//
// Вызывается из формул элементов диалога:
//
// Описание:
//	Формирует текс запроса, для отчета с рассчетом комиссионного вознаграждения по отчетам комитенту
//
Функция ТекстЗапросаПоОтчетам()
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ПартииНаличие.Фирма,
	|				  Регистр.ПартииОтданные.Фирма,
	|				  Регистр.РеализованныйТовар.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика,
	|				  Регистр.ПартииОтданные.Фирма.УпрАналитика,
	|				  Регистр.РеализованныйТовар.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо,
	|				  Регистр.ПартииОтданные.Фирма.ЮрЛицо,
	|				  Регистр.РеализованныйТовар.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии,
	|				  Регистр.ПартииОтданные.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура,
	|				  Регистр.ПартииОтданные.Номенклатура,
	|				  Регистр.РеализованныйТовар.Номенклатура;
	|Производитель	= Регистр.ПартииНаличие.Номенклатура.Производитель,
	|				  Регистр.ПартииОтданные.Номенклатура.Производитель,
	|				  Регистр.РеализованныйТовар.Номенклатура.Производитель;
	|МОЛ_Комиссионер= Регистр.ПартииНаличие.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Покупатель		= Регистр.ПартииНаличие.ТекущийДокумент.Реализация.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ОтчетККМ.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияПрочее.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.Контрагент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.ОтчетКомиссионера.Контрагент;
	|Проект			= Регистр.ПартииНаличие.ТекущийДокумент.Проект,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Проект,
	|				  Регистр.РеализованныйТовар.ТекущийДокумент.Проект;
	|Автор			= Регистр.ПартииНаличие.ТекущийДокумент.Автор,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Автор,
	|				  Регистр.РеализованныйТовар.ТекущийДокумент.Автор;
	|Поставка		= Регистр.ПартииНаличие.Партия,
	|				  Регистр.ПартииОтданные.Партия,
	|				  Регистр.РеализованныйТовар.Партия;   
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство,
	|				  Регистр.ПартииОтданные.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик,
	|				  Регистр.ПартииОтданные.Партия.Поставщик,
	|				  Регистр.РеализованныйТовар.Партия.Поставщик;
	|ДокПоставки	= Регистр.ПартииНаличие.Партия.ПриходныйДокумент,
	|				  Регистр.ПартииОтданные.Партия.ПриходныйДокумент,
	|				  Регистр.РеализованныйТовар.Партия.ПриходныйДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации,
	|				  Регистр.ПартииОтданные.КодОперации;
	|НомерСтроки	= Регистр.ПартииНаличие.НомерСтроки,
	|				  Регистр.ПартииОтданные.НомерСтроки;
	|Договор		= Регистр.ПартииОтданные.Договор;
	|ВалВзаим		= Регистр.ПартииОтданные.Договор.ВалютаВзаиморасчетов;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент,
	|				  Регистр.РеализованныйТовар.ДокПродажи;
	|Вознаграждение = Регистр.РеализованныйТовар.Вознаграждение;
	|КолОтч		 	= Регистр.РеализованныйТовар.Количество;
	|СтоимостьОтч 	= Регистр.РеализованныйТовар.ПродСтоимость;
	|ОтчетКомитенту = Регистр.РеализованныйТовар.ТекущийДокумент;
	|Сумма1			= Регистр.ПартииНаличие.СуммаРуб,
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Сумма2			= Регистр.ПартииНаличие.СуммаБезНДС,
	|				  Регистр.ПартииОтданные.СуммаБезНДС;
	|Сумма3			= Регистр.ПартииНаличие.СуммаУпр,       
	|				  Регистр.ПартииОтданные.СуммаУпр;       
	|Оборот			= Регистр.ПартииНаличие.ПродСтоимость;
	|ОборотКом		= Регистр.ПартииОтданные.ПродСтоимость; 
	|Количество 	= Регистр.ПартииНаличие.Количество, 
	|				  Регистр.ПартииОтданные.Количество;
	|Сумма 			= Регистр.ПартииНаличие.СуммаРуб, 
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Функция ПриходС = Приход(Сумма);
	|Функция РасходС = Расход(Сумма)Когда(СтатусПартии <> глСП.Т_Принятый);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество)Когда(СтатусПартии <> глСП.Т_Принятый);
	|Функция РасходКВсего = Расход(Количество);
	|Функция РасходП = Расход(Количество)Когда(СтатусПартии = глСП.Т_Принятый);
	|Функция ВозвратК = Приход(Количество)Когда(КодОперации в КодыВозвратов);
	|Функция ВозвратС = Приход(Сумма)Когда(КодОперации в КодыВозвратов);
	|Функция РасходБезНДС = Расход(Сумма2)Когда((Не(КодОперации в КодыПеремещений)) и (СтатусПартии <> глСП.Т_Принятый));
	|Функция РасходСНДС = Расход(Сумма1)Когда(СтатусПартии <> глСП.Т_Принятый);
	|Функция ВозвратБезНДС = Приход(Сумма2)Когда(КодОперации в КодыВозвратов);
	|Функция ВозвратСНДС = Приход(Сумма1)Когда(КодОперации в КодыВозвратов);
	|Функция ОборотСумма = Сумма(Оборот)Когда((КодОперации в КодыОборота) и (СтатусПартии <> глСП.Т_Принятый));
	|Функция ОборотУпр = Сумма(ПересчетВалюты(Оборот, Док))Когда((КодОперации в КодыОборота) и (СтатусПартии <> глСП.Т_Принятый));
	|Функция ОборотКомРасход = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глРубли))Когда((КодОперации = глКО.ОтчетРеализатора) и (СтатусПартии <> глСП.Т_Принятый));
	|Функция ОборотКомРасходУпр = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глДоллары))Когда(КодОперации = глКО.ОтчетРеализатора);
	|Функция ОборотВ = Сумма(Оборот)Когда((КодОперации в КодыВозвратов) и (СтатусПартии <> глСП.Т_Принятый));
	|Функция ОборотУпрВ = Сумма(ПересчетВалюты(Оборот, Док))Когда(КодОперации в КодыВозвратов);
	|Функция КолОтчитались = Расход(КолОтч);
	|Функция ОборотОтчитались = Расход(СтоимостьОтч);
	|Функция КомВознаграждение = Сумма(Вознаграждение);
	|Условие (НЕ(КодОперации в КодыПеремещений));";       
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоОтчетам()

//******************************************************************************
// Сформировать(ЗакрытьДиалог=0)
//
// Параметры:
//   ЗакрытьДиалог - флаг того, что после формирования отчета надо закрыть диалог	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   кнопки "Сформировать" и "ОК"
//
// Описание:   
//	Запускает отчет.
//
Процедура Сформировать(ЗакрытьДиалог=0)
	
	Перем Запрос, ТекстЗапроса;
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоОтчетамКомитенту = 1 Тогда
		Позиция = Группировки.НайтиЗначение("Покупатель");
		Если Группировки.Пометка(Позиция) = 1 Тогда
			Предупреждение("В режиме вывода комиссионного вознаграждения по принятым ТМЦ нельзя устанавливать группировку по покупателю!");
			Возврат;
		КонецЕсли;  
	КонецЕсли;    
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	Если ПроверкаУчетнойПолитики() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Таб) <> "Таблица") ИЛИ (Обновить = 0) Тогда
	   	Таб = СоздатьОбъект("Таблица");
	Иначе
	 	Таб.Очистить();
	КонецЕсли;           
	 
	 
	Таб.ИсходнаяТаблица( "ОтчетПоПродажамТМЦ" );  
	
	// Здесь формируется отчет, который использует регистры, критичные к
	// последовательности проведения документов
	// поэтому сравним установленные даты периода формируемого отчета с ГП
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность)=0 Тогда
		Возврат;
	КонецЕсли;	  
	ЗаполнитьСпискиОпераций();
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ОтчетПоПродажамТМЦ");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбРазделитель1",ВыбРазделитель1);
	Расшифровка.Установить("ВыбРазделитель2",ВыбРазделитель2);
	Расшифровка.Установить("ВыбРазделитель3",ВыбРазделитель3);
	Расшифровка.Установить("ВидРазделителя",ВидРазделителя);

	Расшифровка.Установить("ВыбТМЦ",				ВыбТМЦ);
	Расшифровка.Установить("ВыбПоставщик",			ВыбПоставщик);  
	Расшифровка.Установить("СписокМОЛКомиссионер", 	СписокМОЛКомиссионер.ТекущаяСтрока());
	Расшифровка.Установить("ВыбМОЛ",				ВыбМОЛ);
	Расшифровка.Установить("ВыбПокупатель",			ВыбПокупатель);
	Расшифровка.Установить("ВыбЧейТовар",			ВыбЧейТовар.ТекущаяСтрока());
	Расшифровка.Установить("ВыбВидПродажи",			ВыбВидПродажи.ТекущаяСтрока());
	Расшифровка.Установить("ПоОтчетамКомитенту",	ПоОтчетамКомитенту);
	
	
	Расшифровка.Установить("ВидЕдиницы",	ВидЕдиницы);
	Расшифровка.Установить("ВидСуммы",		ВидСуммы);
	
	Расшифровка.Установить("Группировки",	Группировки);

	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;   
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были

	РежимВидПродажи=ВыбВидПродажи.ТекущаяСтрока();
	РежимЧейТовар=ВыбЧейТовар.ТекущаяСтрока();
	
	Если РежимВидПродажи > 1 Тогда
	    КодыПоВидуПродажи = СоздатьОбъект("СписокЗначений");
		Если РежимВидПродажи = 2 Тогда // оптом
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.Продажа);
		ИначеЕсли РежимВидПродажи = 3 Тогда // в розницу
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.РозничнаяПродажа);
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
		КонецЕсли;
	КонецЕсли;

	Если РежимЧейТовар > 1 Тогда
	    СтатусыПартий = СоздатьОбъект("СписокЗначений");
		Если РежимЧейТовар = 2 Тогда // собственный
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Купленный);
			СтатусыПартий.ДобавитьЗначение(глСП.Продукция);
			СтатусыПартий.ДобавитьЗначение(глСП.Т_ВРознице);
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Тара);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Тара);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Запчасть);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Инвентарь);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Полуфабрикат);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Прочее);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Стройматериал);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Сырье);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Топливо);
		ИначеЕсли РежимЧейТовар = 3 Тогда // в комиссионный
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Принятый);
		КонецЕсли;
	КонецЕсли;

	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);
	//ГАВ 15/04/2008 - заказ Корыхалов (исключает Списание из отчёта)
	Если ВклСписание=0 Тогда
		КодыПеремещений.ДобавитьЗначение(глКО.Списание);
	КонецЕсли;
	
	// Добавим и комиссию сюда на всякий случай
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	
	Если ПоОтчетамКомитенту = 1 Тогда 
		Если ВидСуммы = 2 Тогда
			Предупреждение("Информация о продаже принятых на реализацию товаров по отчетам комитенту может быть получена 
			| только в валюте бухгалтерского учета!");                                              
			Возврат;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапросаПоОтчетам();
	Иначе
		ТекстЗапроса = ТекстЗапроса();
	КонецЕсли;
	
	Если РежимВидПродажи > 1  Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Условие(КодОперации в КодыПоВидуПродажи);";
	КонецЕсли;

	Если РежимЧейТовар > 1  Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Условие(СтатусПартии в СтатусыПартий);";
	КонецЕсли;
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Поставщик",ВыбПоставщик,"ВыбПоставщик",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Покупатель",ВыбПокупатель,"ВыбПокупатель",ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",ВыбМОЛ,"ВыбМОЛ",ТекстЗапроса,Загол);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ДокПоставки",,,ТекстЗапроса,Загол);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Автор",   ,        ,ТекстЗапроса,Загол,"Автор");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",  ,        ,ТекстЗапроса,Загол,"Проект");
    
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Производитель",,,ТекстЗапроса,Загол,"Производитель");
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НомерГруппировкиПоТМЦ		= 9999; // невозможно большое значение
	НомерГруппировкиПоПартиям	= 9999; // невозможно большое значение
	НомерГруппировкиПоДок		= 9999; // невозможно большое значение
	
	ПечЗаголовокСтолбца = "";  
	ПечЗаголовок = "Отчет по продажам ТМЦ(" + ?(ВидСуммы = 2,глДоллары,"" + глРубли + ?(ВидСуммы=1,""," без НДС"))+")";
	УстановитьГруппировкиЗапроса(ТекстЗапроса, ПечЗаголовокСтолбца);
	КоличествоГруппировок = СписокГруппировок.РазмерСписка();
	
	Если КоличествоГруппировок > 5 Тогда
		Предупреждение("Нельзя сделать больше 5 группировок!",60);
		Возврат;
	КонецЕсли;       
	
	Если НомерГруппировкиПоТМЦ + НомерГруппировкиПоДок < 1000  Тогда
		ЕстьКолонки = 1;
	Иначе
		ЕстьКолонки = 0;
	КонецЕсли;               
	
	Если НомерГруппировкиПоТМЦ < 1000 Тогда
	    ЕстьКоличество = 1;
	Иначе
		ЕстьКоличество = 0;
	КонецЕсли;
	                                                                   
	// Если ошибка в запросе, то выход из процедуры  
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;   

	глЧислоСтрок = 0;

	Таб.ВывестиСекцию("Кнопки|Начало");
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию("Кнопки|Количество");
	КонецЕсли;
	Если ЕстьКолонки = 1  Тогда                         
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("Кнопки|ПоступлениеШирокое");
		    Таб.ПрисоединитьСекцию("Кнопки|РеализацияШирокая");
		Иначе
		    Таб.ПрисоединитьСекцию("Кнопки|ПоступлениеСреднее");
		    Таб.ПрисоединитьСекцию("Кнопки|РеализацияСредняя");
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию("Кнопки|ПоступлениеУзкое");
	    Таб.ПрисоединитьСекцию("Кнопки|РеализацияУзкая");
	КонецЕсли;                 
	
	Таб.ВывестиСекцию("Шапка|Начало");
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию("Шапка|Количество");
	КонецЕсли;
	Если ЕстьКолонки = 1  Тогда                         
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("Шапка|ПоступлениеШирокое");
		    Таб.ПрисоединитьСекцию("Шапка|РеализацияШирокая");
		Иначе
		    Таб.ПрисоединитьСекцию("Шапка|ПоступлениеСреднее");
		    Таб.ПрисоединитьСекцию("Шапка|РеализацияСредняя");
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию("Шапка|ПоступлениеУзкое");
	    Таб.ПрисоединитьСекцию("Шапка|РеализацияУзкая");
	КонецЕсли;              
	
	Таб.ВывестиСекцию("ВерхняяШапка|Начало"); 
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию("ВерхняяШапка|Количество");
	КонецЕсли;
	
	
	Если ЕстьКолонки = 1  Тогда                         
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("ВерхняяШапка|ПоступлениеШирокое");
		    Таб.ПрисоединитьСекцию("ВерхняяШапка|РеализацияШирокая");
		Иначе
		    Таб.ПрисоединитьСекцию("ВерхняяШапка|ПоступлениеСреднее");
		    Таб.ПрисоединитьСекцию("ВерхняяШапка|РеализацияСредняя");
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию("ВерхняяШапка|ПоступлениеУзкое");
	    Таб.ПрисоединитьСекцию("ВерхняяШапка|РеализацияУзкая");
	КонецЕсли;     
	Таб.ПрисоединитьСекцию("ВерхняяШапка|Прибыль");
	
	Таб.ВывестиСекцию("НижняяШапка|Начало");  
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию("НижняяШапка|Количество");
	КонецЕсли;
	Если ЕстьКолонки = 1  Тогда
	    Таб.ПрисоединитьСекцию("НижняяШапка|ЦенаПост");
	    Таб.ПрисоединитьСекцию("НижняяШапка|СуммаПост");
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("НижняяШапка|НДСПост");
		КонецЕсли;
	    Таб.ПрисоединитьСекцию("НижняяШапка|ЦенаРеал");
	    Таб.ПрисоединитьСекцию("НижняяШапка|СуммаРеал");
	    Таб.ПрисоединитьСекцию("НижняяШапка|Скидка");
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("НижняяШапка|НДСРеал");  
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию("НижняяШапка|СуммаПост");
	    Таб.ПрисоединитьСекцию("НижняяШапка|СуммаРеал");
	КонецЕсли;
	Таб.ПрисоединитьСекцию("НижняяШапка|Прибыль");

	// выводим шапку на каждой странице
	НачПовт = Таб.ВысотаСекции("Кнопки") + Таб.ВысотаСекции("Шапка");
	КонПовт = НачПовт + Таб.ВысотаСекции("ШапкаТаблицы");
	Таб.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	глОживить(1);
	
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 3, "ОтчетПоПродажамТМЦ", "ОтчетПоПродажамТМЦ");   
	
	// Итоговые суммы
	ВсегоПоступление 	= 0;
	ВсегоНДСПост        = 0;
	ВсегоОборот			= 0;
	ВсегоНДС			= 0;
	ВсегоПрибыль		= 0;
	
	// ВЫВОД ГРУППИРОВОК ЗАПРОСА
	ВывестиГруппировку(Запрос,1);
	
	Таб.ОбластьПечати(3,,,);          
	                             
	ВсегоПрибыльПроцент = ?(ВсегоПоступление = 0, 0, ВсегоПрибыль/ВсегоПоступление*100);
	
	Таб.ВывестиСекцию("Итого|Начало");  
	Если ЕстьКоличество = 1 Тогда
		Таб.ПрисоединитьСекцию("Итого|Количество");
	КонецЕсли;
	Если ЕстьКолонки = 1  Тогда
	    Таб.ПрисоединитьСекцию("Итого|ЦенаПост");
	    Таб.ПрисоединитьСекцию("Итого|СуммаПост");
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("Итого|НДСПост");
		КонецЕсли;
	    Таб.ПрисоединитьСекцию("Итого|ЦенаРеал");
	    Таб.ПрисоединитьСекцию("Итого|СуммаРеал");
	    Таб.ПрисоединитьСекцию("Итого|Скидка");
		Если ВидСуммы = 1 Тогда
		    Таб.ПрисоединитьСекцию("Итого|НДСРеал");  
		КонецЕсли;
	Иначе
	    Таб.ПрисоединитьСекцию("Итого|СуммаПост");
	    Таб.ПрисоединитьСекцию("Итого|СуммаРеал");
	КонецЕсли;
	Таб.ПрисоединитьСекцию("Итого|Прибыль");
	
	// Заполнение полей "Итого"
	//ПечатьСтроки(Запрос,0,"Итого","","");
	
	// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);    
	Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
		Таб.Защита(1);
	КонецЕсли;
	Таб.Показать("Отчет по продажам ТМЦ", ""); 
	
	Если (Обновить = 2)ИЛИ(ЗакрытьДиалог=1) Тогда
		СтрокаДействийФормы = "#Закрыть";
	КонецЕсли;
	
КонецПроцедуры // Сформировать()  

//******************************************************************************
// ПриИзмененииМОЛа()
//
// Параметры:
// 	Нет	
//
// Возвращаемое значение: 
//	Нет
// 
// Вызывается из формул элементов диалога:
//   Из поля списка "СписокМОЛКомиссионет".
//
// Описание:   
//	Если текущая строка в списке изменится, значение поля ВыбМОЛ должно быть очищено
//
Процедура ПриИзмененииМОЛа()   
	
	ТипВид = СписокМОЛКомиссионер.ПолучитьЗначение(СписокМОЛКомиссионер.ТекущаяСтрока());
	ТипВидМола = "";
	ТипМОЛа = ТипЗначенияСтр(ВыбМОЛ);
	Если ТипМОЛа = "Справочник" Тогда
		ТипВидМОЛа = ТипМОЛа + "." + ВыбМОЛ.Вид();
	КонецЕсли;
    Если ТипВидМОЛа <> ТипВид Тогда
		ВыбМОЛ = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииМОЛа()

//******************************************************************************
// ПолучитьКонтрагента()
//
// Параметры:
// 	Док - документ	
//
// Возвращаемое значение: 
//	Значение реквизита "Контрагент", переданного документа или пустое значение типа "Справочник.Контрагенты",
// если упомянутый реквизит отсутствует.
// 
// Описание:   
//	Определяет контрагента переданного документа. Если у документа нет реквизита "Контрагент", возвращает
// пустое значение типа "Справочник.Контрагенты".
//
Функция ПолучитьКонтрагента(Док)
	Если глЕстьРеквизитШапки("Контрагент", Док.Вид()) = 1 Тогда 
	    Возврат Док.Контрагент;
	КонецЕсли;    
	
	Возврат ПолучитьПустоеЗначение("Справочник.Контрагенты");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	
	
	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", 	"Номенклатура",  "По номенклатуре");          
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Поставщик",  "По поставщикам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Покупатель",  "По покупателям");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Поставщик",  "По свойствам поставщиков");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Журнал","ДокументыПоПоставщикам", "ДокПоставки",  "По документу поставки");
 	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "Автор",  "По авторам документов");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Проекты", "Проект",  "По проектам");               
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ФизЛица", "МОЛ_Комиссионер",  "По МОЛам");
	
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Производители", 		"Производитель",  "По производителям");

	Если ФлагВосстановленияНастройки = 0 Тогда
		
		ВидЕдиницы     = 1;
		ВидСуммы       = 1;
		ВидРазделителя = 1;
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;

	КонецЕсли;
	
	Если глФлагРасшифровки = 1 Тогда 
		Обновить = глОбновить;
		
		// восстанавливаем настройки из списка
		ДатаНачала 			= глРасшифровка.Получить("ДатаНачала");
		ДатаКонца 			= глРасшифровка.Получить("ДатаКонца");
		ВидРазделителя		= глРасшифровка.Получить("ВидРазделителя");
		ВыбРазделитель1		= глРасшифровка.Получить("ВыбРазделитель1");
		ВыбРазделитель2		= глРасшифровка.Получить("ВыбРазделитель2");
		ВыбРазделитель3		= глРасшифровка.Получить("ВыбРазделитель3");

		ВыбСтатусПартии 	= глРасшифровка.Получить("ВыбСтатусПартии");
		ВыбТМЦ 				= глРасшифровка.Получить("ВыбТМЦ");     
		ПоОтчетамКомитенту	= глРасшифровка.Получить("ПоОтчетамКомитенту");     
		
        СписокМОЛКомиссионер.ТекущаяСтрока(глРасшифровка.Получить("СписокМОЛКомиссионер"));
		Форма.ВыбМОЛ.НазначитьТип(СписокМОЛКомиссионер.ПолучитьЗначение(глРасшифровка.Получить("СписокМОЛКомиссионер")));
	
		ВыбМОЛ 	= глРасшифровка.Получить("ВыбМОЛ");
		ВыбПоставщик	= глРасшифровка.Получить("ВыбПоставщик");
		ВыбПокупатель	= глРасшифровка.Получить("ВыбПокупатель");
		ВыбЧейТовар.ТекущаяСтрока(глРасшифровка.Получить("ВыбЧейТовар"));
		ВыбВидПродажи.ТекущаяСтрока(глРасшифровка.Получить("ВыбВидПродажи"));
		                                 
		ВидЕдиницы		= глРасшифровка.Получить("ВидЕдиницы");
		ВидСуммы		= глРасшифровка.Получить("ВидСуммы");
		
		ПоОперациям 	= глРасшифровка.Получить("ПоОперациям");
		
		глРасшифровка.Получить("Группировки").Выгрузить(Группировки);
		
		Если ТипЗначенияСтр(глРасшифровка.Получить("ТаблицаМФ"))="ТаблицаЗначений" Тогда
			ТаблицаМФ.Загрузить(глРасшифровка.Получить("ТаблицаМФ"));
		КонецЕсли;

		Если Обновить <> 0 Тогда
			Таб = глТаблица;
		КонецЕсли;           
		
		Если Обновить <> 2 Тогда
			Сформировать();
			СтатусВозврата(0);
			Возврат;       
		КонецЕсли;           
	Иначе
		Обновить = 0;
	КонецЕсли;                      
	
	ПерерисовкаНазванийЗакладок();

	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

	УправлениеДиалогом();
	
КонецПроцедуры		// ПриОткрытии()     

//******************************************************************************
// Предопределенная процедура.
Процедура ОбработкаЯчейкиТаблицы(Расшифровка,ФлагСтандартнойОбработки,Таблица,Адрес) 
	Если ТипЗначенияСтр(Расшифровка) <> "СписокЗначений" Тогда
	    ФлагСтандартнойОбработки = 1;
		Возврат;      
	ИначеЕсли Расшифровка.РазмерСписка() = 0 Тогда
	    ФлагСтандартнойОбработки = 0;
		Возврат;                     
	ИначеЕсли ПустоеЗначение(Расшифровка.Получить("Отчет")) = 0 Тогда
		глОбработкаРасшифровки(Расшифровка,ФлагСтандартнойОбработки,Таблица);		
		Возврат;
	КонецЕсли;  

	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.РеализованныйТовар.Фирма;
	|УпрАналитика	= Регистр.РеализованныйТовар.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.РеализованныйТовар.Фирма.ЮрЛицо;
	|Номенклатура	= Регистр.РеализованныйТовар.Номенклатура;
	|//Покупатель		= Регистр.РеализованныйТовар.ДокПродажи.ТекущийДокумент.Реализация.Контрагент;   
	|Поставка		= Регистр.РеализованныйТовар.Партия;   
	|СвойствоПартии	= Регистр.РеализованныйТовар.Партия.Свойство;
	|Поставщик		= Регистр.РеализованныйТовар.Партия.Поставщик;
	|ДокПоставки	= Регистр.РеализованныйТовар.Партия.ПриходныйДокумент;
	|Договор		= Регистр.РеализованныйТовар.Договор;
	|Док			= Регистр.РеализованныйТовар.ДокПродажи;
	|Вознаграждение = Регистр.РеализованныйТовар.Вознаграждение;
	|КолОтч		 	= Регистр.РеализованныйТовар.Количество;
	|СтоимостьОтч 	= Регистр.РеализованныйТовар.ПродСтоимость;
	|ОтчетКомитенту = Регистр.РеализованныйТовар.ТекущийДокумент;
	|Функция КолОтчитались = Расход(КолОтч);
	|Функция ОборотОтчитались = Расход(СтоимостьОтч);
	|Функция КомВознаграждение = Сумма(Вознаграждение);
	|Группировка ОтчетКомитенту;";

	НетОш = 1; // нет ошибок при наложении фильтров  
	Загол = "";
	Если ВидРазделителя = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",ВыбРазделитель1,"ВыбРазделитель1",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 2 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	ИначеЕсли ВидРазделителя = 3 Тогда                                                   
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	КонецЕсли;    
                                                                   
	Покупатель = Расшифровка.Получить("Покупатель");
	Если ПустоеЗначение(Покупатель) = 0 Тогда
	    ТекстЗапроса = ТекстЗапроса + 
		"Условие(ПолучитьКонтрагента(ДокПоставки) = Покупатель);
		|"
	КонецЕсли;
	РасшНоменклатура = Расшифровка.Получить("Номенклатура");
	Если ПустоеЗначение(РасшНоменклатура) = 0 Тогда
	    ТекстЗапроса = ТекстЗапроса + 
		"Условие(Номенклатура = РасшНоменклатура);
		|"
	КонецЕсли;
	РасшПоставщик = Расшифровка.Получить("Поставщик");
	Если ПустоеЗначение(РасшПоставщик) = 0 Тогда
	    ТекстЗапроса = ТекстЗапроса + 
		"Условие(Поставщик = РасшПоставщик);
		|"
	КонецЕсли;
	РасшДокПоставки = Расшифровка.Получить("ДокПоставки");
	Если ПустоеЗначение(РасшДокПоставки) = 0 Тогда
	    ТекстЗапроса = ТекстЗапроса + 
		"Условие(ДокПоставки = РасшДокПоставки);
		|"
	КонецЕсли;
	РасшДок = Расшифровка.Получить("Док");
	Если ПустоеЗначение(РасшДок) = 0 Тогда
	    ТекстЗапроса = ТекстЗапроса + 
		"Условие(Док = РасшДок);
		|"
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос"); 
	Запрос.Выполнить(ТекстЗапроса);           
	
	ПечЗаголовок = "Отчеты комитентам";
		
	ТабРасшифровки = СоздатьОбъект("Таблица");
	ТабРасшифровки.ИсходнаяТаблица("ПоОтчетам");
	ТабРасшифровки.ВывестиСекцию("Шапка");  
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По Расшифровка.РазмерСписка() Цикл
		Представление = "";
		Значение = Расшифровка.ПолучитьЗначение(СчетчикЦикла, Представление); 
		Если ПустоеЗначение(Значение) = 0 Тогда
			ТабРасшифровки.ВывестиСекцию("СтрПараметров");
		КонецЕсли;
	КонецЦикла;
	ТабРасшифровки.ВывестиСекцию("ШапкаТаблицы");
	Пока Запрос.Группировка("ОтчетКомитенту") = 1 Цикл
		ПечТекстСтроки = глПредставлениеДокумента(Запрос.ОтчетКомитенту);
	    ТабРасшифровки.ВывестиСекцию("Док");
	КонецЦикла;                             
	ТабРасшифровки.ВывестиСекцию("Подвал");             
	ТабРасшифровки.ТолькоПросмотр(1);
	ТабРасшифровки.Показать("Отчеты комитентам",);
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора    

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)  
	Форма.ВыбМол.НазначитьТип(СписокМОЛКомиссионер.ПолучитьЗначение(СписокМОЛКомиссионер.ТекущаяСтрока()));			
КонецПроцедуры // ПриНачалеВыбораЗначения()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
ДатаКонца = ПолучитьДатуТА();

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

Группировки.ДобавитьЗначение("Фирма",         "Фирма");
Группировки.ДобавитьЗначение("СтатусПартии",  "Статус партии");
Группировки.ДобавитьЗначение("Поставщик",     "Поставщик");
Группировки.ДобавитьЗначение("Покупатель",    "Покупатель");
Группировки.ДобавитьЗначение("МОЛ_Комиссионер","Мол(комиссионер)");
Группировки.ДобавитьЗначение("Номенклатура",  "Номенклатура");
Группировки.ДобавитьЗначение("СвойствоПартии","Свойство партии");
Группировки.ДобавитьЗначение("ДокПоставки",      "Документы поставки");
Группировки.ДобавитьЗначение("Док",      "Документы реализации");

Группировки.Пометка(1, 1);
Группировки.Пометка(6, 1);
Группировки.Пометка(8, 1);               
Группировки.Пометка(9, 1); 
           
ВыбВидПродажи.УдалитьВсе();
ВыбВидПродажи.ДобавитьЗначение("Любой");
ВыбВидПродажи.ДобавитьЗначение("Оптом");
ВыбВидПродажи.ДобавитьЗначение("В розницу");
ВыбВидПродажи.ТекущаяСтрока(1);
	                       
ВыбЧейТовар.УдалитьВсе();
ВыбЧейТовар.ДобавитьЗначение("Любой");
ВыбЧейТовар.ДобавитьЗначение("Купленный");
ВыбЧейТовар.ДобавитьЗначение("Принятый");
ВыбЧейТовар.ТекущаяСтрока(1);
	                                     
СписокМОЛКомиссионер.ДобавитьЗначение("Справочник.ФизЛица", "МОЛ");
СписокМОЛКомиссионер.ДобавитьЗначение("Справочник.Контрагенты", "Комиссионер");

