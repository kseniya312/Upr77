Перем СписокКлиентов;
Функция НайдиЦену(Товар)
	Перем Рез;
	Состояние("Проверяем цену товара: "+сокрЛП(Товар));
	рез	= 0;
	спр	= СоздатьОбъект("Справочник.Номенклатура");
	спр2= СоздатьОбъект("Справочник.Номенклатура");
	если спр.НайтиЭлемент(Товар)=1 Тогда
		Рез	= спр.ПоследняяЦенаПрихода.Получить(КонДата);
		КР	= спр.КодРозницы;
		
		//Поищем цену в более раннем варианте (не на дату отчёта)
		если рез=0 Тогда
			Переодик=СоздатьОбъект("Периодический");
			Переодик.ИспользоватьОбъект("ПоследняяЦенаПрихода", Спр);
			Переодик.ОбратныйПорядок(1);
			Переодик.ВыбратьЗначения();
			Цена1	= Переодик.Значение;
			Пока Переодик.ПолучитьЗначение() = 1 Цикл
				Цена 	    = Переодик.Значение;
				если цена <>0 Тогда
					Рез = цена;
					Продолжить;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		если (Рез=0) и (КР<>0) Тогда	//Попытаемся найти цену в аналогичных позициях...
			если спр2.ВыбратьЭлементыПоРеквизиту("КодРозницы",КР,0,0)=1 тогда
				промежИтог=0; промежКолво=0;
				пока спр2.ПолучитьЭлемент()=1 Цикл
					времЦена	= спр2.ПоследняяЦенаПрихода.Получить(КонДата);
					если времЦена<>0 Тогда
						промежИтог	= промежИтог + времЦена;
						промежКолво	= промежКолво + 1;
					КонецЕсли;
				КонецЦикла;
				если промежКолво<>0 Тогда	//Мало-ли что :)
					рез = промежИтог/промежКолво;
				КонецЕсли;
			Иначе
				сообщить("		Для позиции ("+Товар+" Аналогов не найдено...");
				Рез=0;
			КонецЕсли;
		КонецЕсли;
	Иначе	//мало-ли что бывает :)
		сообщить(Товар+", не найден в базе!","!");
		Рез=0;
	КонецЕсли;
	
	Состояние("");
	Возврат Рез;	
КонецФункции

Процедура ЗаполниТЗДанными(ТаблЗнач, ВариантЗаполнения)	//Дополняет до нужных данных
	Вал	= Валюта.ПолучитьЗначение(валюта.ТекущаяСтрока());
	Состояние("Заполняем данными по себестоимости");
	Если ВариантЗаполнения=1 Тогда
		ТаблЗнач.НоваяКолонка("СебестОстатка","число",14,2);	//Тут всё по себестоимости
		ТаблЗнач.НоваяКолонка("ЧистыйОборот","число",14,2);	//Тут продажа минус возврат
		ТаблЗнач.ВыбратьСтроки();
		Пока ТаблЗнач.ПолучитьСтроку()=1 Цикл
			ТаблЗнач.СебестОстатка	=	глПересчет(НайдиЦену(ТаблЗнач.Номенклатура),	глДоллары,КонДата,Вал,КонДата) * ТаблЗнач.КоличествоКонОст;
			ТаблЗнач.ПродСтоимостьСумма	= глПересчет(ТаблЗнач.ПродСтоимостьСумма,		глДоллары,КонДата,Вал,КонДата);
			ТаблЗнач.ПродСтоимостьВСумма= глПересчет(ТаблЗнач.ПродСтоимостьВСумма,		глДоллары,КонДата,Вал,КонДата);
			ТаблЗнач.ЧистыйОборот		= ТаблЗнач.ПродСтоимостьСумма-ТаблЗнач.ПродСтоимостьВСумма;
		КонецЦикла;
	ИначеЕсли (ВариантЗаполнения=2) или (ВариантЗаполнения=3) Тогда
		ТаблЗнач.НоваяКолонка("СебестОстатка","число",14,2);	//Тут всё по себестоимости
		ТаблЗнач.НоваяКолонка("ЧистыйОборот","число",14,2);	//Тут продажа минус возврат
		ТаблЗнач.НоваяКолонка("Группа","Справочник.Номенклатура");	//группы
		ТаблЗнач.ВыбратьСтроки();
		Пока ТаблЗнач.ПолучитьСтроку()=1 Цикл
			ТаблЗнач.СебестОстатка	=	глПересчет(НайдиЦену(ТаблЗнач.Номенклатура),	глДоллары,КонДата,Вал,КонДата) * ТаблЗнач.КоличествоКонОст;
			ТаблЗнач.ПродСтоимостьСумма	= глПересчет(ТаблЗнач.ПродСтоимостьСумма,		глДоллары,КонДата,Вал,КонДата);
			ТаблЗнач.ПродСтоимостьВСумма= глПересчет(ТаблЗнач.ПродСтоимостьВСумма,		глДоллары,КонДата,Вал,КонДата);
			ТаблЗнач.ЧистыйОборот		= ТаблЗнач.ПродСтоимостьСумма-ТаблЗнач.ПродСтоимостьВСумма;
			ТаблЗнач.Группа				= ТаблЗнач.Номенклатура.Родитель;
		КонецЦикла;
		ТаблЗнач.Свернуть("Склад,Группа","ПродСтоимостьСумма,ПродСтоимостьВСумма,СебестОстатка,КоличествоКонОст,ЧистыйОборот");
	КонецЕсли;
КонецПроцедуры


//ОборотПоСкидкам() - Отображает распределение оборотов по группам клиентов 
//						(по клиентам, имеющим одинаковую скидку) за период.
//*******************************************
Процедура ОборотПоСкидкам()
	Перем Запрос, ТекстЗапроса, Таб;
	СписокСкладовНорм	= СоздатьОбъект("СписокЗначений");
	Для а=1 по СписокМагазинов.РазмерСписка() Цикл
		Если СписокМагазинов.Пометка(а)=1 Тогда
			СписокСкладовНорм.ДобавитьЗначение(СписокМагазинов.ПолучитьЗначение(а));
		КонецЕсли;
	КонецЦикла;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ОборотСкидок)
	|Период с НачДата по КонДата;
	|ПродСтоимость = Регистр.Продажи.ПродСтоимость;
	|Себестоимость = Регистр.Продажи.Себестоимость;
	|Количество = Регистр.Продажи.Количество;
	|СебестоимостьВ = Регистр.Продажи.СебестоимостьВ;
	|ПродСтоимостьВ = Регистр.Продажи.ПродСтоимостьВ;
	|КоличествоВ = Регистр.Продажи.КоличествоВ;
	|Номенклатура = Регистр.Продажи.Номенклатура;
	|Покупатель = Регистр.Продажи.Покупатель;
	|Склад = Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозница.Склад, Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя_Розница.Склад;
	|Функция ПродСтоимостьСумма = Сумма(ПродСтоимость);
	|Функция СебестоимостьСумма = Сумма(Себестоимость);
	|Функция КоличествоСумма = Сумма(Количество);
	|Функция СебестоимостьВСумма = Сумма(СебестоимостьВ);
	|Функция ПродСтоимостьВСумма = Сумма(ПродСтоимостьВ);
	|Функция КоличествоВСумма = Сумма(КоличествоВ);
	|Группировка Склад без групп;
	|Группировка Покупатель упорядочить по Покупатель.Скидка_Розница без групп;
	|Условие(Склад в СписокСкладовНорм);
	|Условие(Покупатель в СписокКлиентов);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ,0,0);
	//ТЗ.ВыбратьСтроку();
	ТЗ.НоваяКолонка("ПроцентСкидки","число",10,2);	//Какая скидка - на конец периода
	ТЗ.НоваяКолонка("Наценка","число",15,2);		//С какой наценкой продано
	
	ТЗ.ВыбратьСтроки();
	Состояние("Идёт расчёт наценки...");
	Вал	= Валюта.ПолучитьЗначение(валюта.ТекущаяСтрока());
	Пока ТЗ.получитьСтроку()=1 Цикл
		//Переводим в нужную валюту
		ТЗ.СебестоимостьСумма	= глПересчет(ТЗ.СебестоимостьСумма	,глДоллары,КонДата,Вал,КонДата);
		ТЗ.СебестоимостьВСумма	= глПересчет(ТЗ.СебестоимостьВСумма	,глДоллары,КонДата,Вал,КонДата);
		ТЗ.ПродСтоимостьСумма	= глПересчет(ТЗ.ПродСтоимостьСумма	,глДоллары,КонДата,Вал,КонДата);
		ТЗ.ПродСтоимостьВСумма	= глПересчет(ТЗ.ПродСтоимостьВСумма	,глДоллары,КонДата,Вал,КонДата);
		
		ТЗ.ПроцентСкидки	= ТЗ.Покупатель.Скидка_розница.Получить(КонДата);
		ТЗ.Наценка			= ТЗ.ПродСтоимостьСумма - ТЗ.СебестоимостьСумма;
		Если ТЗ.СебестоимостьСумма>0 Тогда
			//ТЗ.ПроцентНаценки	= Окр(ТЗ.ПродСтоимостьСумма/ТЗ.СебестоимостьСумма,2)-1;
		Иначе
			//ТЗ.ПроцентНаценки	= 0;
			Сообщить("По складу: "+ТЗ.Склад+", не учитывается наценка по "+ТЗ.Покупатель+", по скидке: "+ТЗ.ПроцентСкидки);
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("Склад,ПроцентСкидки","КоличествоСумма,СебестоимостьСумма,ПродСтоимостьСумма,КоличествоВСумма,СебестоимостьВСумма,ПродСтоимостьВСумма,Наценка");
	ТЗ.НоваяКолонка("ПроцентНаценки","число",15,2);
	ТЗ.Сортировать("Склад+, ПроцентСкидки+");

	ТЗ.ВыбратьСтроки();
	Пока ТЗ.получитьСтроку()=1 Цикл
		Если ТЗ.СебестоимостьСумма>0 Тогда
			ТЗ.ПроцентНаценки	= Окр(ТЗ.ПродСтоимостьСумма/ТЗ.СебестоимостьСумма,2)-1;
		КонецЕсли;
	КонецЦикла;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ОборотСкидок");
	Таб.ВывестиСекцию("Шапка");
	Состояние("Заполнение выходной таблицы...");
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0);
	ТЗ.ВыбратьСтроки();
	пока ТЗ.ПолучитьСтроку()=1 Цикл
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Оборот по группам скидок", "");
КонецПроцедуры	//ОборотПоСкидкам()    

//Отображает сумму начисленных процентов клиентам, с детализацией по 
//группам клиентов (по клиентам, имеющим одинаковую скидку) за период.
Процедура КруговоротПроцентов()
	Перем Запрос, ТекстЗапроса, Таб;
	
	СписокСкладовНорм	= СоздатьОбъект("СписокЗначений");
	Для а=1 по СписокМагазинов.РазмерСписка() Цикл
		Если СписокМагазинов.Пометка(а)=1 Тогда
			СписокСкладовНорм.ДобавитьЗначение(СписокМагазинов.ПолучитьЗначение(а));
		КонецЕсли;
	КонецЦикла;
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(КруговоротПроцентов)
	|Период с НачДата по КонДата;
	|Контрагент = Регистр.Покупатели_розница.Контрагент;
	|КредДокумент = Регистр.Покупатели_розница.КредДокумент;
	|ВидВзаимодействия = Регистр.Покупатели_розница.ВидВзаимодействия;
	|Магазин = Регистр.Покупатели_розница.Магазин;
	|СуммаРуб = Регистр.Покупатели_розница.СуммаРуб;
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Группировка Магазин;
	|Группировка Контрагент без групп;
	|Группировка КредДокумент;
	|Условие(ВидВзаимодействия = Перечисление.ВидВзаимодействия.Проценты);
	|Условие(Магазин в СписокСкладовНорм);
	|Условие(Контрагент в СписокКлиентов);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
    
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ,0,0);
			ТЗ_Проценты = глНайтиПроцентыИзДок2(СписокКлиентов,СписокСкладовНорм,НачДата,КонДата,"");

	ТЗ.выбратьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
		Если ТЗ.КредДокумент.Вид()="РасходнаяНакладнаяРозницаБезнал" тогда
		ТЗ.СуммаРубПриход	= 0;
		ТЗ.СуммаРубРасход	= 0;
		КонецЕсли;
	КонецЦикла; 
			ТЗ_проценты.выбратьстроки();
		пока ТЗ_проценты.ПолучитьСтроку()=1 цикл 
			номстр=0;
			//если (найти(ТЗ_проценты.КредДокумент.вид(),"Реализация")>0) и (ТЗ_проценты.ВидВзаимодействия=Перечисление.ВидВзаимодействия.Проценты) тогда
			Если (ТЗ.найтиЗначение(ТЗ_проценты.Документ,номстр,"КредДокумент")=1) тогда//или(ТЗ_запрос.найтиЗначение(ТЗ_проценты.Документ.Докоснование,номстр,"КредДокумент")=1) тогда
				ТЗ.ПолучитьСтрокуПоНомеру(номстр);
				Если ТЗ_проценты.Документ.ДатаДок<НачДата тогда
					//ТЗ_запрос.СуммаРубНачОст=ТЗ_проценты.Сумма;//+ТЗ_запрос.СуммаРубНачОст;
				иначеЕсли (ТЗ_проценты.Документ.ДатаДок>=НачДата)и(ТЗ_проценты.Документ.ДатаДок<=КонДата) тогда
					ТЗ.СуммаРубПриход=ТЗ_проценты.Сумма;
				конецЕсли;
				//ТЗ_запрос.СуммаРубПриход=ТЗ_проценты.Сумма;
				//ТЗ_запрос.СуммаРубКонОст=ТЗ_запрос.СуммаРубНачОст+ТЗ_запрос.СуммаРубПриход-ТЗ_запрос.СуммаРубРасход;
			иначе
				Если ТЗ_проценты.Документ.ДатаДок<НачДата тогда
					//ТЗ.НоваяСтрока();
					//ТЗ.ВидВзаимодействия=Перечисление.ВидВзаимодействия.Проценты;
					//ТЗ.Контрагент=ТЗ_проценты.Контрагент;
					//ТЗ.Магазин=ТЗ_проценты.Склад;
					//ТЗ.КредДокумент=ТЗ_проценты.Документ;
					//ТЗ.СуммаРубНачОст=ТЗ_проценты.Сумма;
					//ТЗ.СуммаРубКонОст=ТЗ_проценты.Сумма;
				иначеЕсли (ТЗ_проценты.Документ.ДатаДок>=НачДата)и(ТЗ_проценты.Документ.ДатаДок<=КонДата) тогда
					ТЗ.НоваяСтрока();
					//ТЗ.ВидВзаимодействия=Перечисление.ВидВзаимодействия.Проценты;
					ТЗ.Контрагент=ТЗ_проценты.Контрагент;
					ТЗ.Магазин=ТЗ_проценты.Склад;
					ТЗ.КредДокумент=ТЗ_проценты.Документ;
					//ТЗ.СуммаРубНачОст=0;
					ТЗ.СуммаРубПриход=ТЗ_проценты.Сумма;
					//ТЗ.СуммаРубРасход=0;
					//ТЗ.СуммаРубКонОст=ТЗ_запрос.СуммаРубНачОст+ТЗ_запрос.СуммаРубПриход-ТЗ_запрос.СуммаРубРасход;
				конецЕсли;
			конецЕсли;
		конецЦикла;

	
	
	ТЗ.Свернуть("Магазин,Контрагент","СуммаРубПриход,СуммаРубРасход");
	ТЗ.НоваяКолонка("ПроцентСкидки","число",10,2);	//Какая скидка - на конец периода
	ТЗ.ВыбратьСтроки();
	Вал	= Валюта.ПолучитьЗначение(валюта.ТекущаяСтрока());
	Состояние("Идёт формирование данных...");
	пока ТЗ.ПолучитьСтроку()=1 Цикл
		ТЗ.СуммаРубПриход	= глПересчет(ТЗ.СуммаРубПриход,глРубли,КонДата,Вал,КонДата);
		ТЗ.СуммаРубРасход	= глПересчет(ТЗ.СуммаРубРасход,глРубли,КонДата,Вал,КонДата);
		ТЗ.ПроцентСкидки	= ТЗ.Контрагент.Скидка_розница.Получить(КонДата);
	КонецЦикла;
	ТЗ.Свернуть("Магазин,ПроцентСкидки","СуммаРубПриход,СуммаРубРасход");
	ТЗ.Сортировать("Магазин+, ПроцентСкидки+");

	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("КруговоротПроцентов");
	Таб.ВывестиСекцию("Шапка");
	Состояние("Заполнение выходной таблицы...");
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0);
	ТЗ.ВыбратьСтроки();
	пока ТЗ.ПолучитьСтроку()=1 Цикл
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Круговорот процентов по группам скидок", "");
КонецПроцедуры

Процедура ВнестиТовар()
	ОткрытьПодбор("Справочник.Номенклатура","ДляВыбораРозн",Контекст,1);
КонецПроцедуры 

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	//Если Элемент.ЭтоГруппа()=0 Тогда
	Если ВыбТовар.НайтиЗначение(Элемент.ТекущийЭлемент())=0 Тогда
		ВыбТовар.ДобавитьЗначение(Элемент.ТекущийЭлемент());
	КонецЕсли;
	//КонецЕсли;
КонецПроцедуры // ОбработкаПодбора()  

//*******************************************
// Процедура генерации запроса ОборотПоТГ.
//
Процедура ОборотПоТГ()
	Перем Запрос, ТекстЗапроса, Таб;
	СписокСкладовНорм	= СоздатьОбъект("СписокЗначений");
	Для а=1 по СписокМагазинов.РазмерСписка() Цикл
		Если СписокМагазинов.Пометка(а)=1 Тогда
			СписокСкладовНорм.ДобавитьЗначение(СписокМагазинов.ПолучитьЗначение(а));
		КонецЕсли;
	КонецЦикла;
	
	СписокТоваровНорм	= "";
	СписокТоваровНорм=СоздатьОбъект("СписокЗначений");
	Если ВидОбработки = 1 тогда	//Значит будем из списка товаров
		Если ВыбТовар.РазмерСписка()=0 Тогда
			Сообщить("Не занесён товар в список!!! Отчет не будет сформирован!");
			Возврат;
		КонецЕсли;
		Для а=1 по ВыбТовар.РазмерСписка() Цикл
			СписокТоваровНорм.ДобавитьЗначение(ВыбТовар.ПолучитьЗначение(а));
		КонецЦикла;
	ИначеЕсли ВидОбработки=2 Тогда	//Список до владельца (до группы)
		Если ВыбТовар.РазмерСписка()=0 Тогда
			Сообщить("Не занесён товар в список!!! Отчет не будет сформирован!");
			Возврат;
		КонецЕсли;
		Для а=1 по ВыбТовар.РазмерСписка() Цикл
			ва	= ВыбТовар.ПолучитьЗначение(а);
			СписокТоваровНорм.ДобавитьЗначение(ва.Родитель);
		КонецЦикла;
	ИначеЕсли ВидОбработки=3 Тогда	//Просто одну группу
		СписокТоваровНорм = ИзбраннаяГруппа;
	Иначе
		Сообщить("Укажите группировку...");
		Возврат;
	КонецЕсли;
		
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ОборотПоТГ)
	|Период с НачДата по КонДата;
	|Номенклатура = Регистр.Продажи.Номенклатура, Регистр.ОстаткиТМЦ.Номенклатура;
	|ПродСтоимость = Регистр.Продажи.ПродСтоимость;
	|ПродСтоимостьВ = Регистр.Продажи.ПродСтоимостьВ;
	|Склад = Регистр.Продажи.ТекущийДокумент.РасходнаяНакладнаяРозница.Склад, Регистр.Продажи.ТекущийДокумент.ВозвратОтПокупателя_Розница.Склад, Регистр.ОстаткиТМЦ.Склад;
	|Количество = Регистр.ОстаткиТМЦ.Количество;
	|Функция ПродСтоимостьСумма = Сумма(ПродСтоимость);
	|Функция ПродСтоимостьВСумма = Сумма(ПродСтоимостьВ);
	|Функция КоличествоКонОст = КонОст(Количество);
	|Группировка Склад без групп;
	|Группировка Номенклатура без групп;
	|Условие(Склад в СписокСкладовНорм);
	|Условие(Номенклатура в СписокТоваровНорм);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	ТЗ	= СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ,0,0);
	
	//ТЗ.ВыбратьСтроку();
	
	 //Подготовка к заполнению выходных форм данными запроса
	Таб = СоздатьОбъект("Таблица");
	Вал	= Валюта.ПолучитьЗначение(валюта.ТекущаяСтрока());
	Таб.ИсходнаяТаблица("ОборотПоТГ");
	//// Заполнение полей "Заголовок"
	Таб.ВывестиСекцию("Заголовок");
	Состояние("Заполнение выходной таблицы...");
	Таб.Опции(0, 0, Таб.ВысотаТаблицы(), 0);

	Если ВидОбработки=1 Тогда	//Просто по товару
		ЗаполниТЗДанными(ТЗ,1);
	ИначеЕсли ВидОбработки=2 Тогда
		ЗаполниТЗДанными(ТЗ,2);
	ИначеЕсли ВидОбработки=3 Тогда
		ЗаполниТЗДанными(ТЗ,3);
	КонецЕсли;
	
	//Подсчитаем - сколько итого на каждом из складов
	ТаблЗнач	= СоздатьОбъект("ТаблицаЗначений");
    ТЗ.Выгрузить(ТаблЗнач);
	ТаблЗнач.Свернуть("Склад","ПродСтоимостьСумма,ПродСтоимостьВСумма,СебестОстатка,КоличествоКонОст,ЧистыйОборот");
	
	
	
	ТаблЗнач.ВыбратьСтроки();
	//ТЗ.ВыбратьСтроки();
	
	Пока ТаблЗнач.ПолучитьСтроку()=1 Цикл
		таб.ВывестиСекцию("Склад");
		а=ТаблЗнач.Склад;
		ТЗ.ВыбратьСтроки();
		Пока ТЗ.ПолучитьСтроку() = 1 Цикл
			если  а=ТЗ.Склад тогда
				если ВидОбработки=1 Тогда
					Таб.ВывестиСекцию("Номенклатура");
				ИначеЕсли (ВидОбработки=2) или (ВидОбработки=3) Тогда
					Таб.ВывестиСекцию("Группы");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
				
	
	Таб.ВывестиСекцию("Итого");
	//// Вывод заполненной формы
	Таб.ТолькоПросмотр(1);
	Таб.Показать("ОборотПоТГ", "");
КонецПроцедуры











//*******************************************
//СПИСОК БАЗОВЫХ ОПЕРАТОРОВ
СписокКлиентов	= СоздатьОбъект("СписокЗначений");
спр				= СоздатьОбъект("Справочник.Контрагенты");
спр.ИспользоватьРодителя(сокрЛП(Константа.ГруппаРозничныхКлиентов));
спр.ВыбратьЭлементы();

Состояние("Заполняем список контрагентов...");

Пока спр.ПолучитьЭлемент()=1 Цикл
    СписокКлиентов.ДобавитьЗначение(спр.ТекущийЭлемент());
КонецЦикла;
спр				= "";

списокМагазинов.УдалитьВсе();
сп=СоздатьОбъект("Справочник.Склады");
сп.ВыбратьЭлементы();
Пока сп.ПолучитьЭлемент()=1 Цикл
    Если сп.Магазин=1 Тогда
        списокМагазинов.ДобавитьЗначение(сп.ТекущийЭлемент());
    КонецЕсли;
КонецЦикла;
сп = "";

Валюта.УдалитьВсе();
Вал=СоздатьОбъект("Справочник.Валюты");
Вал.ВыбратьЭлементы();
Пока Вал.ПолучитьЭлемент()=1 Цикл
	Валюта.ДобавитьЗначение(Вал.ТекущийЭлемент());
КонецЦикла;

Форма.Обновить();