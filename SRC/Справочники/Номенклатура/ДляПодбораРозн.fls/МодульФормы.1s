////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// Параметры подбора
Перем ЦенаВподборе;  // "Розница", "ИзСправочника" или "Нет"
Перем ТипЦен;
Перем СуммаВсего, Валюта, Курс;
Перем МенюДляКомплектов;
Перем флагПереключения;

// Переменные для показа остатков
Перем ОбщРег, ОстаткиТМЦ, Резервы;
Перем ЦенаТекНоменклатуры, ВалютаТекНоменклатуры, ЕдиницаТекНоменклатуры, ПоказыватьОстатокПоФирме, РезервСклад;     

// переменные для установки фильтра
Перем ФирмаДляОстатковТМЦ;
Перем Фирма, ЮрЛицо, УпрАналитика, ВидРазделителя, Склад, ВключатьВпрайс;

Перем ЕстьВидТМЦ;
Перем НеПодбиратьУслуги;

// Параметры границ расчета (цен), переданные в контекста подбора
Перем ТипГраницыЦен;      // Вид границы расчета. "Позиция" - позиция документа или "Дата"
Перем ГраницаРасчетаЦен;  // значение границы расчета, на эту границу рассчитываются цены 
Перем НС, Рег1, Рег2, Склад_темп, ТЗ, ТЗ2;	//Работа с остатками

// реальная граница расчета регистра ОстаткиТМЦ
// это либо позиция ТА, либо позиция документа, либо дата
Перем ГраницаРасчетаОстатков;

// расшифровывает, что содержиться в переменной ГраницаРасчетаОстатков
// может принимать значения:
// 1 - позиция ТА
// 2 - позиция документа
// 3 - дата.
Перем ВидГраницыРасчетаОстатков;

Перем ФормаТаблицыОстатков;  // контекст формы с таблицей остатков


Функция ПолучитьГруппуНоменклатуры()   

	ТекНоменклатура = ТекущийЭлемент();
	Возврат глПолучитьГруппуНоменклатуры(ТекНоменклатура, Склад);
	 
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//******************************************************************************
// ВывестиРазделитель()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  ТекстВидПазделителя и ТекстРазделитель
//
// Описание:
//  Формирует вид ("Фирма", "Юр.Лицо" и т.д. ) и наименование разделителя,
//  по которому выводятся остатки
//
Процедура ВывестиРазделитель()
	
	Если      ВидРазделителя = 1 Тогда
		Если ПустоеЗначение(Фирма) = 1 Тогда
			Форма.ТекстВидРазделителя.Заголовок("");
			Форма.ТекстРазделитель.Заголовок("По компании в целом");
		Иначе	
			Форма.ТекстВидРазделителя.Заголовок("Фирма:");
			Форма.ТекстРазделитель.Заголовок(СокрЛП(Фирма));
		КонецЕсли;
	ИначеЕсли ВидРазделителя = 2 Тогда   
			Форма.ТекстВидРазделителя.Заголовок("Юр. лицо:");
			Форма.ТекстРазделитель.Заголовок(СокрЛП(ЮрЛицо));
	ИначеЕсли ВидРазделителя = 3 Тогда   
			Форма.ТекстВидРазделителя.Заголовок("Упр. аналитика:");
			Форма.ТекстРазделитель.Заголовок(СокрЛП(УпрАналитика));
	КонецЕсли;
		
КонецПроцедуры // ВывестиРазделитель()

//******************************************************************************
// ПолучитьДатуЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Возвращает дату границы расчета цен.
//
// Описание:
//  Служит для определения даты границы расчета цен.
//
Функция ПолучитьДатуЦен()
	Перем ВремДата;
	Если ТипГраницыЦен = "Позиция" Тогда
		// из позиции доумента получим дату
		РазобратьПозициюДокумента(ГраницаРасчетаЦен, ВремДата,,,,);
	Иначе // дата
		ВремДата = ГраницаРасчетаЦен;
	КонецЕсли;
	
	Возврат ВремДата;
	
КонецФункции // ПолучитьДатуЦен()

//******************************************************************************
// ПолучитьДатуРасчетовОстатков()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Возвращает дату расчета остатков (в регистре)
//
// Описание:
//  Служит для определения даты расчета остатков ТМЦ
//
Функция ПолучитьДатуРасчетовОстатков()
	Перем ДатаРасчетов;
	Если ВидГраницыРасчетаОстатков = 3 Тогда      // Дата
		ДатаРасчетов = ГраницаРасчетаОстатков;
	ИначеЕсли ВидГраницыРасчетаОстатков = 2 Тогда // Документ
		ДатаРасчетов = ПолучитьДатуЦен();
	Иначе                                         // ТА
		ДатаРасчетов = ПолучитьДатуТА();
	КонецЕсли;
	
	Возврат ДатаРасчетов;
	
КонецФункции // ПолучитьДатуРасчетовОстатков()

//******************************************************************************
// ПредставлениеГраницыРасчета()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строковое представление границы расчета остатков.
//
// Описание:
//  Служит для флормирования срокового представления границы расчета остатковю
//
Функция ПредставлениеГраницыРасчета()
	Перем ПозДата, ПозЧас, ПозМин, ПозСек, ПозДок;
	
	Если ВидГраницыРасчетаОстатков = 3 Тогда // Дата
		// дата границы расчета - всегда следующая за требуемой,
		// так как для веременного расчета все используется
		// процедура РассчитатьРегистрыНа()
		Представление = Формат(ГраницаРасчетаОстатков - 1, "Д");
	Иначе
		РазобратьПозициюДокумента(ГраницаРасчетаОстатков, ПозДата, ПозЧас, ПозМин, ПозСек, ПозДок);
		Представление = "";
		Если ВидГраницыРасчетаОстатков = 2 Тогда // Документ
			Представление = Представление + ПозДок.ПредставлениеВида() + " № " + ПозДок.НомерДок;
		КонецЕсли;
		Представление = Представление + 
		                "  " + Формат(ПозДата, "Д") + " " + ПозЧас + ":" + ПозМин + ":" + ПозСек;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции // ПредставлениеГраницыРасчета()

//******************************************************************************
// ПолучитьЦенуНоменклатуры(Номенклатура, ВозврЕдиница, ВозврЦена, ВозврВалюта)
//
// Параметры:
//  Номенклатура - элемент справочника "Номенклатура"   
//  ВозврЕдиница - переменная, в которую будет возвращена единица цены
//	ВозврЦена    - переменная, в которую будет возвращена цена
//	ВозврВалюта  - переменная, в которую будет возвращена валюта цены
//
// Возвращаемое значение:
//  1 - цена задана, 0 - цены нет
//
// Описание:
//  Вычисляет цену переданной Номенклатуры в соответствии с текущими установками фильтра.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, ВозврЕдиница, ВозврЦена, ВозврВалюта)
	
	Если глВернутьЦену(Номенклатура, ТипЦен, ПолучитьДатуЦен(), ВозврЦена, ВозврЕдиница, ВозврВалюта) = 1 Тогда
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьЦенуНоменклатуры()

//******************************************************************************
// СформироватьИнфНадпись(ТовОстаток, ТовОстатокПоФирме, ТовЕдиница, ТовЦена, ТовВалюта)
//
// Параметры:
//  ТовОстаток        - текущий остаток ТМЦ (число),
//  ТовОстатокПоФирме - текущий остаток ТМЦ (число) по фирме,
//  ТовЕдиница        - единица измерения остатка (элемент справочника Единицы), 
//  ТовЦена           - цена ТМЦ (число),
//  ТовВалюта         - валюта Цены (элемент справочника Валюты).
//
// Возвращаемое значение:
//  Сформированная информационная строка
//
// Описание:
//  Формирует информационную строку по переданным параметрам остатка и цены номенклатуры. 
//  Используется для случая, когда остатки и цены не выводятся в колонках списка справочника. 
//
Функция СформироватьИнфНадпись(ТовОстаток, ТовОстатокПоФирме, ТовЕдиница, ТовЦена, ТовВалюта)
	
	Если ПустоеЗначение(ТовЦена) =  0 Тогда
		СтрокаЦены	= "" + глФРМ(ТовЦена) + " " + ТовВалюта + " за " + ТовЕдиница;
	Иначе        
		СтрокаЦены	= "Цена не задана";
	КонецЕсли;
	
	Возврат СтрокаЦены;// + " - " + СтрокаОстатка;
	
КонецФункции // СформироватьИнфНадпись()


//******************************************************************************
// ПолучитьОстатокЗаполнитьЦену()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка для колонки "Остаток" списка справочника.
//
// Вызывается из формул элементов диалога:
//  Колонка "Остаток".
//
// Описание:
//  Служит для заполнения колонок "Остаток", "Единица, ""Цена", "Валюта" в случае показа остатков
//  в колонках списка справочника. В колонках  "Цена", "Валюта" выводятся значения
//  модульных переменных "ЕдиницаТекНоменклатуры, "ЦенаТекНоменклатуры" и "ВалютаТекНоменклатуры". 
//
Функция ПолучитьОстатокЗаполнитьЦену()
	Перем ТовОстаток, ТовОстатокПоФирме, ТовЕдиница, ТовЦена, ТовВалюта;
	
	ОстатокТекНоменклатуры = "";
	РезервСклад      = "";
	ЦенаТекНоменклатуры    = "";
	ВалютаТекНоменклатуры  = "";
	ЕдиницаТекНоменклатуры = "";
	
	ТекНоменклатура = ТекущийЭлемент();
	
	Если ((ТекНоменклатура.ЭтоГруппа() = 0) и (ПоказатьОстаткиЦену = 1)) и (НазваниеНабораПрав()<>"Сервис") Тогда        
		
		ЕдиницаТекНоменклатуры = ТекНоменклатура.ОсновнаяЕдиница;
		
		Если ЦенаВподборе = "Розница" Тогда
			Если ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
				
				// Для услуг розничную цену берем из справочника 
				ОстатокТекНоменклатуры = "";
				РознТипЦен             = Константа.РозничныйТипЦен; 
				ВалютаТекНоменклатуры  = РознТипЦен.Валюта;
				Если РознТипЦен.Выбран() = 1 Тогда            
					ДатаЦен = ПолучитьДатуЦен();
					глВернутьЦену(ТекНоменклатура, РознТипЦен, ДатаЦен, ТовЦена, ТовЕдиница, ВалютаТекНоменклатуры);
					ЦенаТекНоменклатуры	   = глФРМ(ТовЦена);
				Иначе
					ЦенаТекНоменклатуры = 0;
				КонецЕсли; 
				
			Иначе	// не услуга, розничная цена
				
				ВалютаТекНоменклатуры  = глРубли;
				глПолучитьРозничныйОстатокЦену(ТекНоменклатура, ТекНоменклатура.ОсновнаяЕдиница, ОстаткиТМЦ, ТовОстаток, ТовЦена);
				СписокОст    = ЗначениеИзСтроки(ТовОстаток);
				СписокЦен    = ЗначениеИзСтроки(ТовЦена);
				РазмерСписка = СписокОст.РазмерСписка();
				Если РазмерСписка = 1 Тогда
					ОстатокТекНоменклатуры = СокрЛП(Формат(СписокОст.ПолучитьЗначение(1),"Ч014.3"));
					ЦенаТекНоменклатуры	   = глФРМ(СписокЦен.ПолучитьЗначение(1));
				ИначеЕсли РазмерСписка > 1 Тогда
					ТовОстаток = 0;
					Для Счетчик = 1 По РазмерСписка Цикл
							ТовОстаток = ТовОстаток + СписокОст.ПолучитьЗначение(Счетчик);
					КонецЦикла;
					ЦенаТекНоменклатуры    = "<Несколько>";
					ОстатокТекНоменклатуры = ?(ПустоеЗначение(ТовОстаток) = 1, "", СокрЛП(Формат(ТовОстаток,"Ч014.3")));
				КонецЕсли;
			КонецЕсли; // Услуга или нет
		Иначе
			Если ЦенаВподборе = "ИзСправочника" Тогда
				Если ПолучитьЦенуНоменклатуры(ТекНоменклатура, ТовЕдиница, ТовЦена, ТовВалюта) = 1 Тогда
					ЦенаТекНоменклатуры	   = глФРМ(ТовЦена);
					ВалютаТекНоменклатуры  = СокрЛП(ТовВалюта);
					ЕдиницаТекНоменклатуры = ТовЕдиница;
				КонецЕсли;
			КонецЕсли;
			
			РезервСклад = 0;
			глПолучитьОстаткиНоменклатуры(ФирмаДляОстатковТМЦ, ТекНоменклатура, ЕдиницаТекНоменклатуры, ОстаткиТМЦ, ТовОстаток, ТовОстатокПоФирме, Склад, Резервы, 1,,,РезервСклад);
			
			Если ПоказыватьОстатокПоФирме = 1 Тогда
				РезервСклад = ?(ПустоеЗначение(РезервСклад) = 1, "", СокрЛП(Формат(РезервСклад,"Ч014.3")));
			КонецЕсли;
			ОстатокТекНоменклатуры = ?(ПустоеЗначение(ТовОстаток) = 1, "", СокрЛП(Формат(ТовОстаток,"Ч014.3")));
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОстатокТекНоменклатуры;
	
КонецФункции // ПолучитьОстатокЗаполнитьЦену()

//******************************************************************************
// ПересчетРегистров()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
// 	Производит пересчет регистров в соответствии с выбранными значениями
//	фильтра.
//
Процедура ПересчетРегистров()
	                               
	ОбщРег	       = СоздатьОбъект("Регистры");

	// Расчитываются "временные" регистры, чтобы колонка остатков лишний раз не перерисовывалась
	ВремОстаткиТМЦ = ОбщРег.ОстаткиТМЦ;  
	ВремРезервы	   = ОбщРег.РезервыТМЦ;
	ВремРасчет = 1; // по умолчанию будем пересчитывать
	
	Если ВидГраницыРасчетаОстатков = 1	 Тогда       // граница - ТА
		ВремРасчет = 0;
	Иначе
		Если ВидГраницыРасчетаОстатков = 2 Тогда     // граница - позиция документа
			Если ГраницаРасчетаОстатков >= ПолучитьПозициюТА() Тогда
				ВремРасчет = 0;
			КонецЕсли;
		Иначе
			Если ВидГраницыРасчетаОстатков = 3 Тогда // граница - дата
				Если ГраницаРасчетаОстатков >= ПолучитьДатуТА() Тогда 
					ВремРасчет = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитыватьРезерв = 1;
	Если ЦенаВподборе = "Розница" Тогда
		// временный расчет регистра Резервы выполнять не будем
		// установим фильтр по складу
		РассчитыватьРезерв = 0;
		Если ПустоеЗначение(Склад) = 0 Тогда
			ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Склад",Склад,1);
			ВремРезервы.УстановитьЗначениеФильтра   ("Склад",Склад,1);
		Иначе     
			ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Склад",,0);
			ВремРезервы.УстановитьЗначениеФильтра   ("Склад",,0);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 0 Тогда
		ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ ,2); 
		ВремРезервы.УстановитьЗначениеФильтра   ("Фирма",ФирмаДляОстатковТМЦ ,2);
	Иначе     
		ВремОстаткиТМЦ.УстановитьЗначениеФильтра("Фирма",,0);
		ВремРезервы.УстановитьЗначениеФильтра   ("Фирма",,0);
	КонецЕсли;
	
	Если ВремРасчет = 1 Тогда
		ВремОстаткиТМЦ.ВременныйРасчет();
		ВремРезервы.ВременныйРасчет(РассчитыватьРезерв);
		ОбщРег.РассчитатьРегистрыНа(ГраницаРасчетаОстатков);
	КонецЕсли;
            
	// Пересчитали. Теперь "временные" можно сделать "основными"
	ОстаткиТМЦ = ВремОстаткиТМЦ;
	Резервы    = ВремРезервы;
	
КонецПроцедуры // ПересчетРегистров()

//******************************************************************************
// ОтборПоВключениюВпрайс()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает при необходимости отбор в справочнике "Номенклатура" по флагу 
//  включения в прайс
//
Процедура ОтборПоВключениюВпрайс()
	
	Если флагПереключения=1 тогда
		Если ПустоеЗначение(Склад) = 0 Тогда
			Если Склад.Магазин=1 Тогда
				если сокрЛП(Склад)="Энгельса" Тогда
					УстановитьОтбор("ПризнакОтбораЭнгельса",1);
				ИначеЕсли сокрЛП(Склад)="Некрасова" Тогда
					УстановитьОтбор("ПризнакОтбораНекрасова",1);
				ИначеЕсли сокрЛП(Склад)="Стахановцев" Тогда
					УстановитьОтбор("ПризнакОтбораСтахановцев",1);
				ИначеЕсли сокрЛП(Склад)="Савушкина" Тогда
					УстановитьОтбор("ПризнакОтбораСавушкина",1);
				ИначеЕсли сокрЛП(Склад)="Ленсовета" Тогда
					УстановитьОтбор("ПризнакОтбораЛенсовета",1);
				//ИначеЕсли сокрЛП(Склад)="Антонова-Овсеенко" Тогда
				//	УстановитьОтбор("ПризнакОтбораАнтоноваОвсеенко",1); 
				ИначеЕсли сокрЛП(Склад)="Коллонтай" Тогда
					УстановитьОтбор("ПризнакОтбораКоллонтай",1);
				ИначеЕсли сокрЛП(Склад)="Радищева" Тогда
					УстановитьОтбор("ПризнакОтбораРадищева",1);
				ИначеЕсли сокрЛП(Склад)="Туристская" Тогда
					УстановитьОтбор("ПризнакОтбораТуристская",1);
				ИначеЕсли сокрЛП(Склад)="Ленинский" Тогда
					УстановитьОтбор("ПризнакОтбораЛенинский",1);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		УстановитьОтбор(,);
	КонецЕсли;
	
КонецПроцедуры // ОтборПоВключениюВпрайс()

//======================================================================
Процедура ПриИзменениифлСкрыватьИзВосьмерки()
	Если флагПереключения=1 тогда
		Если ПустоеЗначение(Склад) = 0 Тогда
			Если Склад.Магазин=0 Тогда
				УстановитьОтбор("ИзВосьмерки", 0);
			Иначе
				флСкрыватьИзВосьмерки = 0;
			КонецЕсли;
		Иначе
			УстановитьОтбор("ИзВосьмерки", 0);
		КонецЕсли;
	Иначе
		УстановитьОтбор(, );
	КонецЕсли;	
КонецПроцедуры // ПриИзменениифлСкрыватьИзВосьмерки

//******************************************************************************
// УправлениеВидимостью(ВидимостьКолонок)
//
// Параметры:
//  ВидимостьКолонок
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  При изменении флага "ПоказатьОстаткиЦену"
//
// Описание:
//  Управляет видимостью колонок списка справочника в зависимости от установленных настроек
//
Процедура УправлениеВидимостью(ВидимостьКолонок)
	
	Перем ОбщВидимость, ВидимостьЦены;
	
	// видимость колонки остаток
	ВидимостьЦен = ВидимостьКолонок * ?(ЦенаВподборе <> "Нет", 1, 0);
	
	Форма.Остаток.Видимость(ВидимостьКолонок);
	//Форма.ОстатокПоФирме.Видимость(ВидимостьКолонок * ПоказыватьОстатокПоФирме);
	
	Форма.ЕдиницаНоменклатуры.Видимость(ВидимостьКолонок);
	Форма.ЦенаНоменклатуры.   Видимость(ВидимостьЦен);
	Форма.ВалютаНоменклатуры. Видимость(ВидимостьЦен);
		
КонецПроцедуры // УправлениеВидимостью()       

//******************************************************************************
// ПоКнопкеИзменитьФильтр()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  кнопка "Изменить фильтр"
//
// Описание:
//  Открывает диалог с заданием фильтра
//
Процедура ПоКнопкеИзменитьФильтр()
	Перем ПозДата;
	                      
	// формируем список параметров для передачи в обработку
	Параметр	= СоздатьОбъект("СписокЗначений");
	Параметр.ДобавитьЗначение(ВидРазделителя, "ВидРазделителя");
	Параметр.ДобавитьЗначение(Фирма,          "Фирма");	
	Параметр.ДобавитьЗначение(ЮрЛицо,         "ЮрЛицо");	
	Параметр.ДобавитьЗначение(УпрАналитика,   "УпрАналитика");	
	Параметр.ДобавитьЗначение(Склад,          "Склад");	
	Параметр.ДобавитьЗначение(ВидГраницыРасчетаОстатков,           "ВидГраницы"); 
	Параметр.ДобавитьЗначение(?(ТипГраницыЦен =  "Позиция", 1, 0), "ИспДокумент");
	Параметр.ДобавитьЗначение(ВключатьВпрайс, "ВключатьВпрайс");
	
	Если ВидГраницыРасчетаОстатков = 3 Тогда // Дата
		Врем = ГраницаРасчетаОстатков - 1;
	Иначе
		Врем = ПолучитьДатуЦен();
	КонецЕсли;
	Параметр.ДобавитьЗначение(Врем, "ДатаОстатков");
	
	// открываем форму обработки
	ОткрытьФормуМодально("Обработка.ИзменениеФильтраПодбора", Параметр);
	
	// получаем параметр возврата.
	Если Параметр.Получить("СтатусВозврата") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВидРазделителя            = Параметр.Получить("ВидРазделителя");
	Фирма                     = Параметр.Получить("Фирма");
	ЮрЛицо                    = Параметр.Получить("ЮрЛицо");
	УпрАналитика              = Параметр.Получить("УпрАналитика");
	ФирмаДляОстатковТМЦ       = Параметр.Получить("ФирмаДляОстатковТМЦ");
	Склад                     = Параметр.Получить("Склад");
	ВидГраницыРасчетаОстатков = Параметр.Получить("ВидГраницы");
	ВключатьВпрайс            = Параметр.Получить("ВключатьВпрайс");
	
	Если ВидГраницыРасчетаОстатков = 1 Тогда     	// ТА
		ГраницаРасчетаОстатков = ПолучитьПозициюТА();
	ИначеЕсли ВидГраницыРасчетаОстатков = 2 Тогда  // Документ
		ГраницаРасчетаОстатков = ГраницаРасчетаЦен;
	ИначеЕсли ВидГраницыРасчетаОстатков = 3 Тогда  // Дата
		ГраницаРасчетаОстатков = Параметр.Получить("ДатаОстатков") + 1;
	КонецЕсли;
	
	ПоказыватьОстатокПоФирме = ?(ПустоеЗначение(Склад) = 0, 1, 0) * ?(ЦенаВподборе = "Розница", 0, 1);
	
	ОтборПоВключениюВпрайс();
	ПересчетРегистров();
	ВывестиРазделитель();
	УправлениеВидимостью(ПоказатьОстаткиЦену);
	
КонецПроцедуры // ПоКнопкеИзменитьФильтр()

//******************************************************************************
// ПриИзмененииВидаТМЦ()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Выполняется при выборе вида ТМЦ
//
Процедура ПриИзмененииВидаТМЦ()
	                                              
	Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
		СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаТМЦ()

//******************************************************************************
// ВыполнитьЗапись()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка ОК
//
// Описание:
// 	Активизирует в документе процедуру ОбработкаПодбора и передает ей в качестве
// 	выбранного значения список значений. Параметр "ПоКнопкеПодбор" показывает,
//  что подбор был инициирован кнопкой подбор.
//
Процедура ВыполнитьЗапись()
	
	Перем ПараметрыВыбора;
	
	ПараметрыВыбора = СоздатьОбъект("СписокЗначений");
	ПараметрыВыбора.ДобавитьЗначение(ЕстьВидТМЦ    , "ЕстьВидТМЦ");
	ПараметрыВыбора.ДобавитьЗначение(ЦенаВподборе  , "ЦенаВподборе");
	ПараметрыВыбора.ДобавитьЗначение(ТипЦен        , "ТипЦен");      
	ПараметрыВыбора.ДобавитьЗначение(ТаблицаПодбора, "ТаблицаПодбора");
	ПараметрыВыбора.ДобавитьЗначение(1             , "ПоКнопкеПодбор");
	
	Форма.ВыполнитьВыбор(ПараметрыВыбора);
	ТаблицаПодбора.УдалитьСтроки();  // иначе при выходе еще раз можем перенести
	
КонецПроцедуры //ВыполнитьЗапись()

//******************************************************************************
// ПересчетСуммы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Пересчет суммы выбранных позиций с отражением их итогов
//
Процедура ПересчетСуммы()
	Если  ТаблицаПодбора.ТекущаяСтрока()>0 Тогда
		ТаблицаПодбора.Сумма	= ТаблицаПодбора.Количество*ТаблицаПодбора.Цена;
	КонецЕсли;
	СуммаВсего = ТаблицаПодбора.Итог("Сумма");
КонецПроцедуры // ПересчетСуммы()

//******************************************************************************
// ПересчитатьЦены(ТМЦ, СписЦен, СписОстаток)
//
// Параметры:
//  ТМЦ         - элемент номенклатуры, для которого надо пересчитывать
//  СписЦен     - список пересчиваемых цен в валюте документа
//  СписОстаток - список остатков по этим ценам
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Пересчитывает список розничных цен в валюту документа
//
Процедура ПересчитатьЦены(ВыбНоменклатура, СписЦен, СписОстаток)
	
	Для Счетчик = 1 По СписЦен.РазмерСписка() Цикл
		ВремКол  = СписОстаток.ПолучитьЗначение(Счетчик);           // В основных единицах
		ВремЦена = СписЦен.ПолучитьЗначение(Счетчик);               // В основных единицах
		
		ВремЦена = глПересчет(ВремЦена, глРубли, ПолучитьДатуЦен(), Валюта, Курс);  
		
		СписЦен.УстановитьЗначение(Счетчик, ВремЦена, глФРМ(ВремЦена) + 
		" (" + глФРМКоличество(ВремКол) + " " + ВыбНоменклатура.ОсновнаяЕдиница + ")");
		
	КонецЦикла;
КонецПроцедуры // ПересчитатьЦены()

//******************************************************************************
// ОбработкаКликаПоТаблице()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вызывается при двойном щелчке мыши и нажатии Enter на таблице значений.
//
// Описание:
//  Если текущая колонка:
//	"Плюс"         - в ячейке в колонке Количество увеличиваем  значение на единицу
// 	"Минус"        - уменьшаем на единицу
//  Номенклатура   - переходим в справочнике на выбранную Номенклатуру
//	другая колонка - выводим диалог, в котором задаем значение
//
Процедура ОбработкаКликаПоТаблице()
	
	Если ТаблицаПодбора.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаПодбора.ТекущаяКолонка()="Плюс" Тогда
		ТаблицаПодбора.Количество=ТаблицаПодбора.Количество+1;
		Если ЦенаВподборе <> "Нет" Тогда
			ПересчетСуммы();
		КонецЕсли;
		
	ИначеЕсли ТаблицаПодбора.ТекущаяКолонка()="Минус" Тогда
		Если ТаблицаПодбора.Количество > 1 Тогда
			ТаблицаПодбора.Количество	= ТаблицаПодбора.Количество-1;
			Если ЦенаВподборе <> "Нет" Тогда
				ПересчетСуммы();
			КонецЕсли;
		КонецЕсли;  
	
	ИначеЕсли ТаблицаПодбора.ТекущаяКолонка()="Номенклатура" Тогда

		// открывает многострочную часть на выбранном в таблице значений Номенклатуры
		АктивизироватьОбъект(ТаблицаПодбора.Номенклатура);

	ИначеЕсли ТаблицаПодбора.ТекущаяКолонка()="Количество" Тогда
		Кол=ТаблицаПодбора.Количество;
		Если ВвестиЧисло(Кол,"Введите количество",10,3, 60)=0 Тогда
			Возврат;
		КонецЕсли;
		ТаблицаПодбора.Количество=Кол;
		Если ЦенаВподборе <> "Нет" Тогда
			ПересчетСуммы();
		КонецЕсли;
		                
	ИначеЕсли ТаблицаПодбора.ТекущаяКолонка()="Цена" Тогда
		
		Если (ЦенаВподборе = "Розница")
		   и (ТаблицаПодбора.Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга ) Тогда
			ВремТМЦ = ТаблицаПодбора.Номенклатура;
			СтрОстаток = "";  СтрЦена = "";
			глПолучитьРозничныйОстатокЦену(ВремТМЦ, ВремТМЦ.ОсновнаяЕдиница, ОстаткиТМЦ,  СтрОстаток, СтрЦена);
			
			// пересчитаем цены из рублей в валюту документа
			СписЦена    = ЗначениеИзСтроки(СтрЦена);
			СписОстаток = ЗначениеИзСтроки(СтрОстаток);
            ПересчитатьЦены(ВремТМЦ, СписЦена, СписОстаток);
			Цен = 0;
			Если СписЦена.ВыбратьЗначение(Цен,,,,2) = 0 Тогда
				Возврат; // отказ от выбора
			КонецЕсли;
			
		Иначе
			Цен=ТаблицаПодбора.Цена;
			Если глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0 Тогда
				Предупреждение("Редактирование цен запрещено в соответствии
	    		|с установленными полномочиями пользователя!", 60);
				Возврат;
            Иначе
				Если ВвестиЧисло(Цен,"Введите цену",15,2, 60)=0 Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ТаблицаПодбора.Цена=Цен;
		
		ПересчетСуммы();
		
	ИначеЕсли ТаблицаПодбора.ТекущаяКолонка()="Сумма" Тогда

		Если глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0 Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
    		|с установленными полномочиями пользователя!", 60);
			Возврат;
		КонецЕсли;
		Сум=ТаблицаПодбора.Сумма;
		Если ВвестиЧисло(Сум,"Введите сумму",15,2, 60)=0 Тогда
			Возврат;
		КонецЕсли;                
		Кол = ТаблицаПодбора.Количество;
		ТаблицаПодбора.Цена	=?(Кол=0,0,Сум/Кол);
		ТаблицаПодбора.Сумма= Сум;
		СуммаВсего 			= ТаблицаПодбора.Итог("Сумма");
	КонецЕсли;
	
КонецПроцедуры	// ОбработкаКликаПоТаблице()

//******************************************************************************
// УдалитьСтроку() 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Х".
//
// Описание:
// 	Удаляет текущую строку в таблице выбранных позиций.
//
Процедура УдалитьСтроку()  
	
	Если ТаблицаПодбора.ТекущаяСтрока()>0 Тогда
	    ТаблицаПодбора.УдалитьСтроку(ТаблицаПодбора.ТекущаяСтрока());
		Если ЦенаВподборе <> "Нет" Тогда
			ПересчетСуммы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //УдалитьСтроку()

//******************************************************************************
// Очистить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "ХХ".
//
// Описание:
// 	Очищает всю таблицу выбранных позиций.
//
Процедура Очистить()
	
	Если Вопрос("Очистить список выбранных номенклатурных единиц?", "Да+Нет", 60) = "Да" Тогда
		ТаблицаПодбора.УдалитьСтроки();
		Если ЦенаВподборе <> "Нет" Тогда
			ПересчетСуммы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //Очистить()

//******************************************************************************
// ДобавитьОднуПозицию(ВыбНоменклатура, Колво, Ед, Цена)
//
// Параметры: 
//  ВыбНоменклатура - позиция номенклатуры, которую надо добавить,
//  Колво           - добавлямое количество,
//  Ед              - единица измерения количества,
//  Цена            - по какой цене добавляем.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Доавляет в таблицу подобранных позиций номенклатуры одну позицию.
//
Процедура ДобавитьОднуПозицию(ВыбНоменклатура, Колво, Ед, Цена)
	
	// ищем Номенклатуру среди выбранных
	НомСтр	= 0; 
	
	Если Объединять=1 тогда	//Значит работаем по стандартному алгоритму
		Если ЦенаВподборе = "Розница" Тогда
			
			// Для розницы ищем номенклатуру вместе с ценой
			ТаблицаПодбора.ВыбратьСтроки();
			Пока ТаблицаПодбора.ПолучитьСтроку() = 1 Цикл
				Если (ТаблицаПодбора.Номенклатура = ВыбНоменклатура)
				и (ТаблицаПодбора.Цена         = Цена)
				и (ТаблицаПодбора.Единица      = Ед) Тогда
					НомСтр = ТаблицаПодбора.НомерСтроки;
					Прервать;  // Нашли
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТаблицаПодбора.ВыбратьСтроки();
			Пока ТаблицаПодбора.ПолучитьСтроку() = 1 Цикл
				Если (ТаблицаПодбора.Номенклатура = ВыбНоменклатура)
				и (ТаблицаПодбора.Единица      = Ед) Тогда
					НомСтр = ТаблицаПодбора.НомерСтроки;
					Прервать;  // Нашли
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	Если НомСтр = 0 Тогда
		// добавляем новую строку
		ТаблицаПодбора.НоваяСтрока();
		ТаблицаПодбора.Плюс			= 1;
		ТаблицаПодбора.Минус		= 2;
		ТаблицаПодбора.Номенклатура	= ВыбНоменклатура;
		ТаблицаПодбора.Единица		= Ед;
		ТаблицаПодбора.Количество	= Колво;
		
		Если ЦенаВподборе <> "Нет" Тогда
			ТаблицаПодбора.Цена			= Цена;
			ПересчетСуммы();
		КонецЕсли;
		
		Если ЕстьВидТМЦ = 1 Тогда
			ТаблицаПодбора.ВидТМЦ = ВидТМЦ;
		КонецЕсли;
	Иначе
		// увеличиваем количество в имеющейся
		ТаблицаПодбора.ПолучитьСтрокуПоНомеру(НомСтр);
		ТаблицаПодбора.Количество	= ТаблицаПодбора.Количество + Колво;		
		
		Если ЦенаВподборе <> "Нет" Тогда
			ТаблицаПодбора.Цена 		= ?(Цена = 0,ТаблицаПодбора.Цена,Цена);
			ПересчетСуммы();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТаблицаПодбора.Количество = 0 Тогда
		ТаблицаПодбора.УдалитьСтроку();
	Иначе
		ТаблицаПодбора.ТекущаяСтрока(ТаблицаПодбора.НомерСтроки);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОднуПозицию()

//******************************************************************************
// ДобавитьПозицию(ВыбНоменклатура)
//
// Параметры:
//  ВыбНоменклатура - элемент справочника "Номенклатура"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  При выборе из списка справочника добавляет одну или несколько позиций (для комплектов)
//  в таблицу подобранных позиций номенклатуры
//
Процедура ДобавитьПозицию(ВыбНоменклатура)
	
	Перем Рез, Поз, ТовЦена;

	Колво		           = 1; 
	ВозврЕдиница           = ВыбНоменклатура.ОсновнаяЕдиница;
	Цена 		           = 0;
	ВозврЦена  	           = 0;                     
	ВозврВалюта	           = ПолучитьПустоеЗначение("Справочник.Валюты");
	ДобавлятьКомплектующие = 0;
	                                                                       
	РасчДата               = ПолучитьДатуЦен(); 
	
	Если ЦенаВподборе = "Розница" Тогда
		Если ВыбНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			РознТипЦен = Константа.РозничныйТипЦен;
			Если глВернутьЦену(ВыбНоменклатура, РознТипЦен, ПолучитьДатуЦен(), ВозврЦена, ВозврЕдиница, ВозврВалюта) = 1 Тогда
				Цена = глПересчет(ВозврЦена,ВозврВалюта,глКурсДляВалюты(ВозврВалюта, РасчДата), Валюта, Курс);
			КонецЕсли;
		Иначе    
			ВремОстаток  = "";
			ВремЦена     = "";
			глПолучитьРозничныйОстатокЦену(ВыбНоменклатура, ВозврЕдиница, ОстаткиТМЦ, ВремОстаток, ВремЦена);
			НаСкладе     = ЗначениеИзСТроки(ВремОстаток);
			Цена         = ЗначениеИзСТроки(ВремЦена);
			ВозврВалюта  = глРубли;

			// пересчитаем цены в валюту документа
			ПересчитатьЦены(ВыбНоменклатура, Цена, НаСкладе);
		КонецЕсли;
			
	ИначеЕсли ЦенаВподборе = "ИзСправочника" Тогда 
		
		// цену получаем только в том случае, если в документе был выбран тип цен и валюта
		Если ПолучитьЦенуНоменклатуры(ВыбНоменклатура, ВозврЕдиница, ВозврЦена, ВозврВалюта) = 1 Тогда // есть цена
			Цена = глПересчет(ВозврЦена,ВозврВалюта,глКурсДляВалюты(ВозврВалюта, РасчДата),
			                            Валюта, Курс);
		КонецЕсли;
	КонецЕсли;
	              
	Если Запрашивать.ТекущаяСтрока() = 2 Тогда // количество
		
		// формируем список параметров для передачи в обработку
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(ВыбНоменклатура	    , "Номенклатура");
		Параметр.ДобавитьЗначение(Колво		            , "Количество");
		Параметр.ДобавитьЗначение(ВозврЕдиница          , "Единица");
		Параметр.ДобавитьЗначение(Цена		            , "Цена");	
		Параметр.ДобавитьЗначение(ДобавлятьКомплектующие, "ДобавлятьКомплектующие");	
    	
		// открываем форму обработки
		ОткрытьФормуМодально("Обработка.ВводКоличества", Параметр);
			
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
		    Возврат;
		КонецЕсли;
				
		Колво	                = Параметр.Получить("Количество");
		ВозврЕдиница            = Параметр.Получить("Единица");
		Цена	                = Параметр.Получить("Цена");
		ДобавлятьКомплектующие	= Параметр.Получить("ДобавлятьКомплектующие");
		
	ИначеЕсли Запрашивать.ТекущаяСтрока() = 3 Тогда // количество и цену
		
		// формируем список параметров для передачи в обработку
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(ВыбНоменклатура       , "Номенклатура");
		Параметр.ДобавитьЗначение(Колво		            , "Количество");	
		Параметр.ДобавитьЗначение(ВозврЕдиница          , "Единица");	
		Параметр.ДобавитьЗначение(Цена		            , "Цена");	
		Параметр.ДобавитьЗначение(Валюта	            , "Валюта");	
		Параметр.ДобавитьЗначение(ДобавлятьКомплектующие, "ДобавлятьКомплектующие");	
    	
		// открываем форму обработки
		ОткрытьФормуМодально("Обработка.ВводКоличестваИЦены", Параметр);
			
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
		    Возврат;
		КонецЕсли;
				
		Колво	                = Параметр.Получить("Количество");
		ВозврЕдиница            = Параметр.Получить("Единица");
		Цена	                = Параметр.Получить("Цена");
		ДобавлятьКомплектующие	= Параметр.Получить("ДобавлятьКомплектующие");
		
	Иначе // ничего не запрашивать
		
		// Для комплектов надо спросить что добавляем: сам комплект или комплектующие
		Если ПустоеЗначение(глКомплектуется(ВыбНоменклатура)) = 0 Тогда
			Выбрали = МенюДляКомплектов.ВыбратьЗначение(Рез, "",Поз, 60, 1);
			Если Выбрали = 1 Тогда
				ДобавлятьКомплектующие = Поз - 1; 
			Иначе // ничего не выбрали или кончился таймаут
				Возврат;
			КонецЕсли;
		    
		КонецЕсли;

	КонецЕсли;
	
	Если ДобавлятьКомплектующие  = 1 Тогда            
		
		// Надо добавить все комплектующие
		СпрКомплектация = СоздатьОбъект("Справочник.Комплектация");
		СпрКомплектация.ИспользоватьВладельца(ВыбНоменклатура);
		Если СпрКомплектация.ВыбратьЭлементы() = 1 Тогда
			Пока СпрКомплектация.ПолучитьЭлемент() = 1 Цикл
				ДобНоменклатура = СпрКомплектация.Номенклатура;
				
				// Расчитаем количество комплектующего в его базовых единицах,
				// считая, что количество комплекующего измеряется в базовых единицах
				// в одной базовой единице комплекта
				ДобКолво = Колво * ВозврЕдиница.Коэффициент * СпрКомплектация.Количество;
				ДобЦена = 0;
				
				Если ЦенаВподборе <> "Нет" Тогда
					
					Если ЦенаВподборе = "Розница" Тогда 
						Если ДобНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
				
							// Для услуг розничную цену берем из справочника 
							РознТипЦен = Константа.РозничныйТипЦен;
							Если РознТипЦен.Выбран() = 1 Тогда            
								ДобЕдиница = "";
								глВернутьЦену(ДобНоменклатура, РознТипЦен, РасчДата, ДобЦена, ДобЕдиница);
								ДобЦена = ?(ПустоеЗначение(ДобЕдиница.Коэффициент) = 1, 0, ДобЦена / ДобЕдиница.Коэффициент) ;
							КонецЕсли;                                             
							
						Иначе // получим цену из регистра
							Врем = "";
							глПолучитьРозничныйОстатокЦену(ДобНоменклатура, ДобНоменклатура.БазоваяЕдиница, ОстаткиТМЦ, , Врем);
							СписЦен = ЗначениеИзСтроки(Врем);
							Если СписЦен.РазмерСписка() > 0 Тогда	// берем порвую цену в списке
								ДобЦена = СписЦен.ПолучитьЗначение(1);
							КонецЕсли;
							ВозврВалюта = глРубли;   
						КонецЕсли;
					Иначе                                                          
						ДобЕдиница = "";
						Если ПолучитьЦенуНоменклатуры(ДобНоменклатура, ДобЕдиница, ДобЦена, ВозврВалюта) <> 0 Тогда // есть цена
							
							// Приведем цену к базовой единице (от единицы цены)
							ДобЦена = ?(ПустоеЗначение(ДобЕдиница.Коэффициент) = 1, 0, ДобЦена / ДобЕдиница.Коэффициент) ;
						КонецЕсли;
					КонецЕсли;
				
					ДобЦена = глПересчет(ДобЦена,ВозврВалюта,глКурсДляВалюты(ВозврВалюта, РасчДата),
							             Валюта, Курс);
				КонецЕсли;
							
				ДобавитьОднуПозицию(ДобНоменклатура, ДобКолво, ДобНоменклатура.БазоваяЕдиница, ДобЦена);
					
			КонецЦикла;
		КонецЕсли;
		
	Иначе // Доваляем сам комплект (выбранную позицию)
		Если ЦенаВподборе <> "Нет" Тогда
			Если ТипЗначенияСтр(Цена) = "СписокЗначений" Тогда
				Если Цена.РазмерСписка() > 0 Тогда	// берем первую цену
					Цена = Цена.ПолучитьЗначение(1);
				Иначе
					Цена = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		ДобавитьОднуПозицию(ВыбНоменклатура, Колво, ВозврЕдиница, Цена);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПозицию()    

//******************************************************************************
// ВыбратьТекущийЭлемент(ТекЭлем)
//
// Параметры: 
//  ТекЭлем - элемент, который надо добавить
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обработка выбора текущего элемента справочника.
//
Функция ВыбратьТекущийЭлемент(ТекЭлем)

	//Сообщить(" ОбработкаВыбораСтроки " + ТекЭлем );
	Если НеПодбиратьУслуги = 1 Тогда
		Если ТекЭлем.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В данном контексте услуги не подбираются!", 60);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекЭлем.ЭтоГруппа() = 1 Тогда
	    Предупреждение("Группы подбирать нельзя!",60);
		Возврат 0;
	КонецЕсли;
	
	ДобавитьПозицию(ТекЭлем);
	
	Возврат 1;
	
КонецФункции // ВыбратьТекущийЭлемент()

//******************************************************************************
// ПриИзмененииЗапрашивать()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Список "Запрашивать"
//
// Описание:
//  Сохраним текущее значение позиции в списке "Запрашивать"
//
Процедура ПриИзмененииЗапрашивать()
	
	СохранитьЗначение("ЧтоЗапрашиватьВПодборе",Запрашивать.ТекущаяСтрока());	
	
КонецПроцедуры // ПриИзмененииЗапрашивать()      


//******************************************************************************
// ПоКнопкеПоиск()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  По кнопке "Поиск"
//
// Описание:
//  Вызывает обработку поиска элемента справочника по подстроке,
//  если нашли, то производит выбор. 
//  Заменяем глобальную глПоискПоПодстроке() для случая режима подбора
//
Процедура ПоКнопкеПоиск()
	
	Перем ПродолжитьПоиск;
	
	Если Форма.РежимВыбора() <> 2  Тогда
	    глПоискПоПодстроке(Контекст);
		Возврат;
	КонецЕсли;
	
	ПродолжитьПоиск = 1; // флаг поиска
	
	// Ищем пока стоит флаг поиска
	Пока ПродолжитьПоиск =1  Цикл
		
		ПродолжитьПоиск  = 0; // по умолчанию не стоит
		СписокПараметров = СоздатьОбъект("СписокЗначений"); 
		СписокПараметров.ДобавитьЗначение(Вид(),"Вид");
		СписокПараметров.ДобавитьЗначение("Артикул","СписокПолей");
		ОткрытьФормуМодально("Обработка.ВыборИзСправочникаПоПодстроке", СписокПараметров);
		
		Если ТипЗначенияСтр(СписокПараметров)="Справочник" Тогда
			Если СписокПараметров.Вид() = Вид() Тогда
				Если Форма.РежимВыбора() = 2 Тогда // Если подбор
					АктивизироватьОбъект(СписокПараметров);
					ВыбратьТекущийЭлемент(СписокПараметров);
					ПродолжитьПоиск = 1; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;       
	КонецЦикла;
	
КонецПроцедуры // ПоКнопкеПоиск()                                                                                 

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	Перем ВремДата; // для получения даты из позиции
	
	Объединять=1;	//Всегда по обычному алгоритму. Тут нам Петров не нужен
	
	Форма.Артикул.Видимость(Константа.ПоказыватьАртикул);
	
	Парам = Форма.Параметр;
	
	Фирма      = Парам.Получить("Фирма");
	
	// Фирму нужно выбирать обязательно
	Если ПустоеЗначение(Фирма) = 1 Тогда
	    Предупреждение("Не выбрана фирма!",60);
		СтатусВозврата(0); 
		Возврат;
	КонецЕсли;               
	
	//Заполниим переменные для фильтра (если захотим его изменить)
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	Юрлицо              = Фирма.ЮрЛицо;
	УпрАналитика        = Фирма.УпрАналитика;
	ВидРазделителя      = 1;
	Если Константа.КонтрольОтрицательныхОстатков      = Перечисление.СпособыКонтроляОстатковТМЦ.ПоЮрЛицу  Тогда
		ВидРазделителя  = 2;
	ИначеЕсли Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоУпрАналитике  Тогда
		ВидРазделителя  = 3;
	ИначеЕсли Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоКомпании Тогда
		ВидРазделителя  = 1;
		Фирма           = ПолучитьПустоеЗначение("Справочник.Фирмы");
	КонецЕсли;
	
	ВывестиРазделитель();
	
	Склад               = Парам.Получить("Склад");
	НеПодбиратьУслуги   = Парам.Получить("НеПодбиратьУслуги");
	ЕстьВидТМЦ          = Парам.Получить("ЕстьВидТМЦ");
	Если ЕстьВидТМЦ = 1 Тогда
		
		ВидТМЦ	= Парам.Получить("ВидТМЦ");
		
		Если ПустоеЗначение(ВидТМЦ) = 0 Тогда
			// вид ТМЦ жестко задан и менять его не нужно
			Форма.ВидТМЦ.Доступность(0);
		Иначе
			
			ВидТМЦ = ВосстановитьЗначение("ВидТМЦПоУмолчанию");
			
			Если ПустоеЗначение(ВидТМЦ) = 1 Тогда
				ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Форма.ВидТМЦ.Видимость(0);
		Форма.ТекстВидТМЦ.Видимость(0);
	КонецЕсли;
	
	// установим параметры использования цены
	ЦенаВподборе = Парам.Получить("ЦенаВподборе");   
	
	Если ПустоеЗначение(ЦенаВПодборе) = 1 Тогда
		ЦенаВПодборе = "Нет";
	КонецЕсли;
	
	Если ЦенаВПодборе = "ИзСправочника" Тогда
		ТипЦен = Парам.Получить("ТипЦен");
		Если ПустоеЗначение(ТипЦен) = 1 Тогда
			ЦенаВПодборе = "Нет"; // если не задан тип цен, то считаем, что подбор без цен
		КонецЕсли;
	КонецЕсли;
	
	Если ЦенаВПодборе <> "Нет" Тогда
		Валюта = Парам.Получить("Валюта");
		Если ПустоеЗначение(Валюта) = 1 Тогда
			СтатусВозврата(0);
			Предупреждение("Не выбрана валюта!", 60);
			Возврат;
		КонецЕсли;
		Курс   = Парам.Получить("Курс");
		Если ПустоеЗначение(Курс) = 1 Тогда
			СтатусВозврата(0);
			Предупреждение("Не задан курс или дата курса валюты!", 60);
			Возврат;
		КонецЕсли;
		
		Если ТипЗначенияСтр(Курс) = "Дата" Тогда
			Курс = глКурсДляВалюты(Валюта, Курс);
		КонецЕсли;
	КонецЕсли;
		
	// получим границы для временного расчета регистра
	ТипГраницыЦен             = Парам.Получить("ТипГраницы");
	ГраницаРасчетаЦен         = Парам.Получить("ЗначениеГраницы");
	ВидГраницыРасчетаОстатков = ВосстановитьЗначение("Подбор_ВидГраницы");
	ВключатьВпрайс            = ВосстановитьЗначение("Подбор_ВключатьВпрайс");
	ОтборПоВключениюВпрайс();
	
	Если ПустоеЗначение(ВидГраницыРасчетаОстатков) = 1 Тогда // первое открытие формы
		ВидГраницыРасчетаОстатков = 1;           // ТА
	КонецЕсли;
	
	Если ВидГраницыРасчетаОстатков = 1 Тогда	 // ОстаткиТМЦ на ТА;
		ГраницаРасчетаОстатков = ПолучитьПозициюТА(); // не выполнять временный расчет
	Иначе
		Если ВидГраницыРасчетаОстатков = 2 Тогда // позиция документа
			Если ТипГраницыЦен = "Дата" Тогда    
				
				// из контекста подбора передали дату
				ВидГраницыРасчетаОстатков     = 3;          // Дата
			Иначе
				ГраницаРасчетаОстатков = ГраницаРасчетаЦен; // Позиция 
			КонецЕсли;
		КонецЕсли;
		
		Если ВидГраницыРасчетаОстатков = 3 Тогда            // Дата
			
			// временный расчет регистра остатков всегда выполняется "НА".
			// Расчеты ПО переданую дату и НА следующую после переденной - эквивалентны.
			ГраницаРасчетаОстатков = ПолучитьДатуЦен() + 1;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация таблицы значений отобранных товаров
	ТаблицаПодбора.НоваяКолонка("Плюс","Число",1,,"+",4);
	ТаблицаПодбора.НоваяКолонка("Минус","Число",1,,"-",4);
	
	Если ЕстьВидТМЦ = 1 Тогда
		ТаблицаПодбора.НоваяКолонка("ВидТМЦ",,,,"Вид",8);	
	КонецЕсли;
	
	ТаблицаПодбора.НоваяКолонка("Номенклатура",       ,  , ,"Выбранный товар",20   );
	ТаблицаПодбора.НоваяКолонка("Единица"     ,       ,  , ,"Ед."            ,4    );
	ТаблицаПодбора.НоваяКолонка("Количество"  ,"Число",14,3,"Количество"     ,10,,2);
	ТаблицаПодбора.НоваяКолонка("Цена"        ,"Число",15,2,"Цена"           ,10,,2);
	ТаблицаПодбора.НоваяКолонка("Сумма"       ,"Число",15,2,"Сумма"          ,10,,2);
	
	// формируем список запрашивать
	Запрашивать.ДобавитьЗначение("Ничего");
	Запрашивать.ДобавитьЗначение("Кол.");
	
	Если ЦенаВподборе <> "Нет" Тогда
		//Запрашивать.ДобавитьЗначение("Кол.+ цену");
	Иначе
		ТаблицаПодбора.ВидимостьКолонки("Цена, Сумма", 0);
	КонецЕсли;
	
	ТаблицаПодбора.ВыводитьПиктограммы("Плюс");
	ТаблицаПодбора.ВыводитьПиктограммы("Минус"); 
	
	// нужно для того, чтобы перед активизацией механизма подбора в документе
	// вызывалась предопределенная функция ПриВыбореСтроки
	Форма.ОбработкаВыбораСтроки(1);
	
	ЧтоЗапрашивать = Число(ВосстановитьЗначение("ЧтоЗапрашиватьВПодборе"));
	Запрашивать.ТекущаяСтрока(?(ЧтоЗапрашивать=0,1,ЧтоЗапрашивать));       
	
	ПоказатьОстаткиЦену	= ВосстановитьЗначение("Подбор_ПоказыватьОЦ");
	
	ПоказыватьОстатокПоФирме = ?(ПустоеЗначение(Склад) = 0, 1, 0) * ?(ЦенаВподборе = "Розница", 0, 1);
	                                                      
	// выполним, если нужно временный расчет регистра
	ПересчетРегистров();
	
	УправлениеВидимостью(ПоказатьОстаткиЦену);

	// Тип цен показываем в заголовке окна
	ТекстЗаголовка = Парам.Получить("Заголовок");
	Если ПустоеЗначение(ТекстЗаголовка) = 0 Тогда
		Форма.Заголовок(ТекстЗаголовка);
	КонецЕсли;
	
	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,11);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,4);
	ТЗ_Остаток.НоваяКолонка("Резервы","число",15,2,,4);
               
	Сотр=глПользователь.ТипСотрудника;
	Пер	=Перечисление.ТипСотрудника;
	НС=ТекущийЭлемент();
	
	флСкрыватьИзВосьмерки = ВосстановитьЗначение("ПодборРозн_флСкрытьИзВосьмерки");
	ПриИзменениифлСкрыватьИзВосьмерки();
	
КонецПроцедуры // ПриОткрытии()

//********************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореСтроки()
	
	// отключаем стандартный механизм подбора	
	СтатусВозврата(0);
	
	ВыбратьТекущийЭлемент(ТекущийЭлемент());
	
КонецПроцедуры                 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()           
	
	СохранитьЗначение("Подбор_ПоказыватьОЦ",   ПоказатьОстаткиЦену);
	СохранитьЗначение("Подбор_ВидГраницы",     ВидГраницыРасчетаОстатков);
	СохранитьЗначение("Подбор_ВключатьВпрайс", ВключатьВпрайс);
	СохранитьЗначение("ПодборРозн_флСкрыватьИзВосьмерки",   флСкрыватьИзВосьмерки);
	
	Если (ТаблицаПодбора.КоличествоСтрок()>0) Тогда
		Если Вопрос("Перенести отобранные позиции в документ?", "Да+Нет", 60)="Да" Тогда
		    ВыполнитьЗапись();
		КонецЕсли;
	КонецЕсли;
	
	// если открыта форма с таблицей остатков, то закроем и ее
	Если ТипЗначения(ФормаТаблицыОстатков) = 100 Тогда
		ФормаТаблицыОстатков.Форма.Закрыть(0);
	КонецЕсли;			
	
КонецПроцедуры // ПриЗакрытии()  
 //Зад
///////////////////////////////////////////////////////
///////////////////////////////////////////////////////
Функция ОсновноеСвойство()
	
	Если ЭтоГруппа() = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1  Тогда
		Возврат "";
	Иначе  
		Если ПустоеЗначение(ТекущийЭлемент().ОсновноеСвойство) = 1  Тогда
			Возврат "";
		Иначе
			Возврат ТекущийЭлемент().ОсновноеСвойство.ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ОсновноеСвойство()  
/////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////
//Зад
Функция ПокажиОстатки()
	Перем стр;
    
	Если НС=ТекущийЭлемент() Тогда
	    возврат 0;
	ИначеЕсли Чужой=0 Тогда
	    возврат 0;
	ИначеЕсли НазваниеНабораПрав()="Сервис" Тогда
		возврат 0;
	КонецЕсли;
    
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Если ЭтоГруппа()=1 тогда
		стрк="";
		возврат стрк;
	КонецЕсли;
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		Если (НазваниеНабораПрав()="Продавец_розница") или (НазваниеНабораПрав()="Руководитель_розница") тогда
//			если Склад_темп.Магазин=1 Тогда
				Рег1.УстановитьФильтр(,ТекущийЭлемент(),Склад_темп);
				Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
				
				рег2.УстановитьФильтр(ТекущийЭлемент(),Склад_темп);
				//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
				рег2.ВыгрузитьИтоги(ТЗ2,1,1);
				
				ТЗ2.Свернуть("Номенклатура","Количество");
				х					= ПолучитьПустоеЗначение(х);
				у					= 1;
				
				а=0;
				
				Если ТЗ2.НайтиЗначение(ТекущийЭлемент(),х,у)=1 Тогда	//Сначала общий резерв
					а=1;
					ТЗ_Остаток.НоваяСтрока();
					ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
					ТЗ_Остаток.Резервы	= ТЗ2.ПолучитьЗначение(х,"Количество");
					х					= ПолучитьПустоеЗначение(х);
				КонецЕсли;
				//Теперь из остатков ТМЦ
				х			= ПолучитьПустоеЗначение(х);
				у			= 2;
				Если ТЗ.НайтиЗначение(ТекущийЭлемент(),х,у)=1 Тогда
					Если а=0 Тогда
						ТЗ_Остаток.НоваяСтрока();
						ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
					КонецЕсли;
					ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
				КонецЕсли;
				
//			КонецЕсли;
		Иначе
			Рег1.УстановитьФильтр(,ТекущийЭлемент(),Склад_темп);
			Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
			
			рег2.УстановитьФильтр(ТекущийЭлемент(),Склад_темп);
			//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
			рег2.ВыгрузитьИтоги(ТЗ2,1,1);
			
			ТЗ2.Свернуть("Номенклатура","Количество");
			х					= ПолучитьПустоеЗначение(х);
			у					= 1;
			
			а=0;
			
			Если ТЗ2.НайтиЗначение(ТекущийЭлемент(),х,у)=1 Тогда	//Сначала общий резерв
				а=1;
				ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				ТЗ_Остаток.Резервы	= ТЗ2.ПолучитьЗначение(х,"Количество");
				х					= ПолучитьПустоеЗначение(х);
			КонецЕсли;
			//Теперь из остатков ТМЦ
			х			= ПолучитьПустоеЗначение(х);
			у			= 2;
			Если ТЗ.НайтиЗначение(ТекущийЭлемент(),х,у)=1 Тогда
				Если а=0 Тогда
					ТЗ_Остаток.НоваяСтрока();
					ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				КонецЕсли;
				ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НС=ТекущийЭлемент();
	стрк="";
	возврат стрк;
КонецФункции



//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	
	Если Событие = "BarCodeValue" Тогда
		Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
			АктивизироватьОбъект(ВремТовар);
			ВыбратьТекущийЭлемент(ВремТовар);
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
	    возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= ТекущийЭлемент();
	ТекД= "";
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
	
	
КонецПроцедуры

//Т.к. стоит задача отображения только товаров с ликвидным остатком, а сделать это в динамическом диапазоне нереально
//	необходима процедура "актуализации остатков" 
Процедура ОбновиКаталогДоступныхТоваров()
	
	Спр = СоздатьОбъект("Справочник.Номенклатура");
	тов	= СоздатьОбъект("Справочник.Номенклатура");
	тов.ВыбратьЭлементы(0);
	
	
	рег1.УстановитьФильтр(,,Склад);
	рег1.ВыгрузитьИтоги(ТЗ2,1,1);
	
	Пока тов.ПолучитьЭлемент()=1 Цикл
		если тов.ЭтоГруппа()=0 Тогда
			х			= ПолучитьПустоеЗначение(х);
			у			= 2;
			Состояние("Обрабатываем элемент: "+тов);
			Если ТЗ2.НайтиЗначение(тов.ТекущийЭлемент(),х,у)=1 Тогда	//Значит есть остаток
				Спр.НайтиЭлемент(тов.ТекущийЭлемент());
				если сокрЛП(Склад)="Энгельса" Тогда
					спр.ПризнакОтбораЭнгельса=1;
				ИначеЕсли сокрЛП(Склад)="Некрасова" Тогда
					спр.ПризнакОтбораНекрасова=1;
				ИначеЕсли сокрЛП(Склад)="Стахановцев" Тогда
					спр.ПризнакОтбораСтахановцев=1;
				ИначеЕсли сокрЛП(Склад)="Савушкина" Тогда
					спр.ПризнакОтбораСавушкина=1;
				ИначеЕсли сокрЛП(Склад)="Ленсовета" Тогда
					спр.ПризнакОтбораЛенсовета=1;
				//ИначеЕсли сокрЛП(Склад)="Антонова-Овсеенко" Тогда
				//	спр.ПризнакОтбораАнтоноваОвсеенко=1;
				ИначеЕсли сокрЛП(Склад)="Коллонтай" Тогда
					спр.ПризнакОтбораКоллонтай=1;
				ИначеЕсли сокрЛП(Склад)="Радищева" Тогда
					спр.ПризнакОтбораРадищева=1;
				ИначеЕсли сокрЛП(Склад)="Туристская" Тогда
					спр.ПризнакОтбораТуристская=1;
				ИначеЕсли сокрЛП(Склад)="Ленинский" Тогда
					спр.ПризнакОтбораЛенинский=1;	
				КонецЕсли;
				попытка
					спр.Записать();
				исключение
					сообщить("Временная ошибка при попытке обновления данных справочника - попробуйте немного позднее!");
//					возврат;
				КонецПопытки;
			Иначе
				Спр.НайтиЭлемент(тов.ТекущийЭлемент());
				если сокрЛП(Склад)="Энгельса" Тогда
					спр.ПризнакОтбораЭнгельса=0;
				ИначеЕсли сокрЛП(Склад)="Некрасова" Тогда
					спр.ПризнакОтбораНекрасова=0;
				ИначеЕсли сокрЛП(Склад)="Стахановцев" Тогда
					спр.ПризнакОтбораСтахановцев=0;
				ИначеЕсли сокрЛП(Склад)="Савушкина" Тогда
					спр.ПризнакОтбораСавушкина=0;
				ИначеЕсли сокрЛП(Склад)="Ленсовета" Тогда
					спр.ПризнакОтбораЛенсовета=0;
				//ИначеЕсли сокрЛП(Склад)="Антонова-Овсеенко" Тогда
				//	спр.ПризнакОтбораАнтоноваОвсеенко=0; 
				ИначеЕсли сокрЛП(Склад)="Коллонтай" Тогда
					спр.ПризнакОтбораКоллонтай=0;
				ИначеЕсли сокрЛП(Склад)="Радищева" Тогда
					спр.ПризнакОтбораРадищева=0;
				ИначеЕсли сокрЛП(Склад)="Туристская" Тогда
					спр.ПризнакОтбораТуристская=0;	 
				ИначеЕсли сокрЛП(Склад)="Ленинский" Тогда
					спр.ПризнакОтбораЛенинский=0;	
				КонецЕсли;
				попытка
					спр.Записать();
				исключение
					сообщить("Временная ошибка при попытке обновления данных справочника - попробуйте немного позднее!");
//					возврат;
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	УстановитьОтбор(,);
	ОтборПоВключениюВпрайс();	
КонецПроцедуры

Процедура ПереключиОтбор()
	Если флагПереключения=1 Тогда
		флагПереключения=0;
	иначе 
		флагПереключения=1;
	КонецЕсли;
	ОтборПоВключениюВпрайс();
КонецПроцедуры
	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
МенюДляКомплектов = СоздатьОбъект("СписокЗначений");
МенюДляКомплектов.ДобавитьЗначение("Добавить комплект");
МенюДляКомплектов.ДобавитьЗначение("Добавить комплектующие");

ТЗ			= СоздатьОбъект("ТаблицаЗначений");
ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		= СоздатьОбъект("Регистр.РезервыТМЦ2");
Склад_темп	= СоздатьОбъект("Справочник.Склады");
флагПереключения=1; 


