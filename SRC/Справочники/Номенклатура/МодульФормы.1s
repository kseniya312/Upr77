Перем ТаблицаПечФорм;
Перем НомерТекущейФормы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура УправлениеДиалогом()
	
	НомЗакладки = Форма.Закладки.ТекущаяСтрока();
	ИспСлои = Форма.Закладки.ПолучитьЗначение(НомЗакладки);
	
	Если ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
		ДопСлои = ",ТМЦ" + НомЗакладки;
	КонецЕсли;
	
	Форма.ИспользоватьСлой(ИспСлои + ДопСлои, 2);
	
КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// ПриИзмененииСвойства()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет реквизит справочника при изменении реквизита формы
//
Процедура ПриИзмененииСвойства()
	
	// Проверка соответствия выбранного значения
	Если Свойство.Владелец <> Константа.ВидСвойстваНоменклатуры Тогда 
		Свойство = ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСвойства()

//******************************************************************************
// ПоКнопкеОчиститьСвойство()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  кнОчиститьСвойство.
//
// Описание:
//  Очищает выбранное значение свойства
//
Процедура ПоКнопкеОчиститьСвойство()
	
	Свойство = ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств");
	Активизировать("Свойство");
КонецПроцедуры // ПоКнопкеОчиститьСвойство()


//******************************************************************************
// НужноЗаписатьЭлемент(Объект)
//
// Параметры:
//  Объект - объект, созданный методом "СоздатьОбъект()".
//
// Возвращаемое значение:
//  1 - объект нужно записывать.
//  0 - объект не нужно записывать.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет необходимость записи объекта.
//
Функция НужноЗаписатьЭлемент(Объект)
	
	// Объект может записываться впервые.
	Если ПустоеЗначение(Объект.ТекущийЭлемент()) = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	// Текущее значение атрибута может отличаеттся от записанного.
	Если Объект.Наименование <> Объект.ТекущийЭлемент().Наименование Тогда
		Возврат 1;
	КонецЕсли;
	
	// Проверка значений реквизитов объекта.
	мдСправочник = Метаданные.Справочник(Объект.Вид());
	Для Номер = 1 По мдСправочник.Реквизит() Цикл
		
		// Периодические реквизиты не сравниваются.
		Если мдСправочник.Реквизит(Номер).Периодический = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Ид = мдСправочник.Реквизит(Номер).Идентификатор;
		// Текущее значение атрибута может отличаеттся от записанного.
		Если Объект.ПолучитьАтрибут(Ид) <> Объект.ТекущийЭлемент().ПолучитьАтрибут(Ид) Тогда
			Возврат 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // НужноЗаписатьЭлемент()

//******************************************************************************
// МожноЗаписатьЭлемент(Объект)
//
// Параметры:
//  Объект - объект, созданный методом "СоздатьОбъект()".
//
// Возвращаемое значение:
//  1 - объект можно записывать.
//  0 - объект нельзя записывать.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет возможность записи объекта.
//
Функция МожноЗаписатьЭлемент(Объект)
	
	Если      Объект.Выбран() = 0 Тогда
		Возврат 1;

	ИначеЕсли Объект.Блокировка(1) = 1 Тогда
		Возврат 1;
	
	Иначе
		Элемент = Объект.ТекущийЭлемент();

		Стр = 
		"Элемент справочника """+Элемент.ПредставлениеВида()+""": ("+
		Элемент.Код+") """+Элемент.Наименование+""" заблокирован!";
		Предупреждение(Стр, 60);
		
		Возврат 0;
	КонецЕсли;
	
КонецФункции // МожноЗаписатьЭлемент()

//******************************************************************************
// ЗаписьОснСвойство()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  0 - произошла ошибка
//  1 - свойство успешно записано
//
// Описание:
//  Записывает выбранное основное свойство в справочник СвойстваНоменклатуры
//
Функция ЗаписьОснСвойство()
	
	Объект = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
	// Если свойсво не выбрано, то и записывать нечего
	Если ПустоеЗначение(Свойство) = 1  Тогда
		// Если не пустое основное свойство, то надо удалить соответствующий элмент справочника свойств контрагентов
		Если ПустоеЗначение(ОсновноеСвойство) = 0 Тогда
			Если Объект.НайтиЭлемент(ОсновноеСвойство) = 1 Тогда
				Объект.Удалить(1);
			КонецЕсли;
			ОсновноеСвойство = ПолучитьПустоеЗначение("Справочник.СвойстваНоменклатуры");
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	// Найдем соответствующую запись в справочнике СвойстваНоменклатуры
	Объект.ИспользоватьВладельца(ТекущийЭлемент());
	Если Объект.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваНоменклатуры, 0) = 0 Тогда
		Объект.Новый();
		Объект.ВидСвойства = Константа.ВидСвойстваНоменклатуры;
	КонецЕсли;
	
	Объект.ЗначениеСвойства = Свойство;
	
	// Проверка необходимости и возможности записи.
	Если      НужноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 1;
	ИначеЕсли МожноЗаписатьЭлемент(Объект) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Объект.Записать();
	
	// Установка основного свойства
	ОсновноеСвойство = Объект.ТекущийЭлемент();
	
	Возврат 1;
КонецФункции // ЗаписьОснСвойство()

// ЗаписатьБазовуюЕдиницу()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  0 - произошла ошибка
//  1 - единица успешно записана
//
// Описание:
//
Функция ЗаписатьБазовуюЕдиницу()
	
    ЗаписатьЕдиницу = 1;
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	
 	Если ПустоеЗначение(БазоваяЕдиница) = 0 Тогда
		
		// проверить, изменил ли пользователь реквизиты единицы
		Если (БазоваяЕдиница.ОКЕИ = РеквБазоваяЕдиница) И
		     (БазоваяЕдиница.Вес = РеквВесБазовой) И
			 (БазоваяЕдиница.ШтрихКод = РеквШтрихкодБазовой) Тогда
			ЗаписатьЕдиницу	= 0; // ничего не изменилось
		Иначе
			// проверим, а не изменили ли единицу из вне.
			СпрЕдиницы.НайтиЭлемент(БазоваяЕдиница);
			
			Если глСравнитьЭлементыСправочника(СпрЕдиницы.ТекущийЭлемент(), БазоваяЕдиница) = 1 Тогда
				
				// единица измерения изменена извне. Спросим, нужно ли накатить изменения
				Ответ = Вопрос("Реквизиты базовой единицы измерения """ +
				               СокрЛП(БазоваяЕдиница.Наименование) + """" +
				               " изменились за время редактирования позиции номенклатуры """ +
				               СокрЛП(Наименование) +
				               """. Сохранить изменения реквизитов базовой единицы измерения """ +
				               СокрЛП(БазоваяЕдиница.Наименование)+"""?","Да+Нет", 60);
							   
				Если Ответ = "Нет" Тогда
					ЗаписатьЕдиницу = 0;
				ИначеЕсли Ответ = "Таймаут" Тогда
					// вышел таймаут. ничего не записываем
					Возврат 0;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаписатьЕдиницу = 1 Тогда
		// проверить заполнение обязательных полей
		
		Если ПустоеЗначение(РеквШтрихкодБазовой) = 0 Тогда
			
			// проверяем уникальность только для невесового товара
			
			СпрПоискЕдиницы = СоздатьОбъект("Справочник.Единицы");
			
			ШКУникален = 1;
			Если СпрПоискЕдиницы.НайтиПоРеквизиту("Штрихкод", РеквШтрихкодБазовой, 1) <> 0 Тогда
				Если ПустоеЗначение(БазоваяЕдиница) = 1 Тогда
					ШКУникален = 0;
				Иначе
					Если БазоваяЕдиница <> СпрПоискЕдиницы.ТекущийЭлемент() Тогда
						ШКУникален = 0;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ШКУникален = 0 Тогда
				Предупреждение("Штрихкод базовой единицы не уникален!", 60);
				Возврат 0;
			КонецЕсли;
		КонецЕсли;
		
		// Если новый элемент номенклатуры, то его необходимо записать перед записью базовой единицы
		Если Выбран() = 0 Тогда
			Записать();
		КонецЕсли;
		
		Если ПустоеЗначение(БазоваяЕдиница) = 1 Тогда
   			СпрЕдиницы.ИспользоватьВладельца(ТекущийЭлемент());
			СпрЕдиницы.Новый();
		Иначе 
			СпрЕдиницы.НайтиЭлемент(БазоваяЕдиница);
		КонецЕсли;
			
		
		СпрЕдиницы.Наименование = РеквБазоваяЕдиница.Наименование;
		СпрЕдиницы.Вес			= РеквВесБазовой;
		СпрЕдиницы.Коэффициент	= 1;
		СпрЕдиницы.ОКЕИ			= РеквБазоваяЕдиница;
		СпрЕдиницы.ШтрихКод		= РеквШтрихкодБазовой;

		Попытка
			СпрЕдиницы.Записать();
		Исключение
		    Предупреждение( "Не удалось сохранить ""базовую единицу"": " + ОписаниеОшибки() +
			                 РазделительСтрок + "Элемент не сохранен!", 60);
			Возврат 0;
		КонецПопытки;
	
		УстановитьАтрибут("БазоваяЕдиница", "");
		ПолучитьАтрибут("БазоваяЕдиница");
		УстановитьАтрибут("БазоваяЕдиница", СпрЕдиницы.ТекущийЭлемент());
	КонецЕсли;
		
	Если (ПустоеЗначение(ОсновнаяЕдиница) = 1) ИЛИ (ОсновнаяЕдиница = БазоваяЕдиница) Тогда
		// обновим основную единицу
		УстановитьАтрибут("ОсновнаяЕдиница", "");
		ПолучитьАтрибут("ОсновнаяЕдиница");
		УстановитьАтрибут("ОсновнаяЕдиница", БазоваяЕдиница);
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ЗаписатьБазовуюЕдиницу()

//******************************************************************************
// ПоКнопкеЕдиницы()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура ПоКнопкеЕдиницы()
	
	Если Выбран() = 0 Тогда
	    Предупреждение("Единицы измерения можно посмотреть только для записанных номенклатурных позиций",60);
	Иначе
		ОткрытьФорму("Справочник.Единицы", ТекущийЭлемент());
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЕдиницы()
			
//******************************************************************************
// ДобавитьВтаблицу(Табл, Товар, ТипЦены)
//
// Параметры:
//  Табл    - "ТаблицаЗначений" - в которую будем добавлять строку
//  Товар   - "Справочник.Номенклатура"
//  ТипЦены - "Справочник.ТипыЦен"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу значений новую строку
//
Процедура ДобавитьВтаблицу(Табл, Товар, ТипЦены)
	Перем ВремЦена, ВремЕдиница, ВремВалюта;
	
	Если глВернутьЦену(Товар, ТипЦены, РабочаяДата(), ВремЦена, ВремЕдиница, ВремВалюта) = 1 Тогда
		Табл.НоваяСтрока();
		Табл.Товар   = СокрЛП(Товар.ПолнНаименование);
		Табл.Цена    = ВремЦена;
		Табл.Валюта  = ВремВалюта;
		Табл.Единица = ВремЕдиница;
	Иначе
		Сообщить("У товара """ + Товар.ПолнНаименование + """ отсутствует цена """ + ТипЦены + """");
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВтаблицу()
			
//******************************************************************************
// ПечатьЦенника()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполняет печать ценников текущего элемента справочника Номенклатура.
//
Процедура ПечатьЦенника()
	Перем ПечЕдиница, ПечНаименование, ПечРозн;
	Перем Таб;
 	Перем Столбик;
 	Перем Ряд;
 	Перем Процент, ПорядокОкр;
 	
 	Перем ТабТМЦ, ДанныеДляПечати;
 	
	Если Выбран() = 0 Тогда
	    Предупреждение("Печать можно выполнять только для записанных номенклатурных позиций", 60);
		Возврат;
	КонецЕсли;
    
	ТипЦены	=	СоздатьОбъект("Справочник.ТипыЦен");
	Если ТипЦены.Выбрать("Типы цен",) = 0 Тогда
		Возврат;
	КонецЕсли;
 	ТипЦены	=	ТипЦены.ТекущийЭлемент();
	
	ТабТМЦ = СоздатьОбъект("ТаблицаЗначений");
	ТабТМЦ.НоваяКолонка("Товар");
	ТабТМЦ.НоваяКолонка("Цена","Число");
	ТабТМЦ.НоваяКолонка("Единица");
	ТабТМЦ.НоваяКолонка("Валюта");
	
	ВыбТМЦ = ТекущийЭлемент();
	
	ДобавитьВтаблицу(ТабТМЦ, ВыбТМЦ, ТипЦены);
	
	// упакуем данные в список
	ДанныеДляПечати = СоздатьОбъект("СписокЗначений");
 	
	Фирма = СокрЛП(глЗначениеПоУмолчанию("ОсновнаяФирма").ЮрЛицо.ПолнНаименование);
	ДанныеДляПечати.ДобавитьЗначение(Фирма          , "Фирма");
	ДанныеДляПечати.ДобавитьЗначение(ТипЦены.Валюта , "Валюта");
	ДанныеДляПечати.ДобавитьЗначение(ТабТМЦ         , "Таблица");
	
	ОткрытьФормуМодально("Обработка.ПечатьЦенников", ДанныеДляПечати);
	
КонецПроцедуры // ПечатьЦенника()

//******************************************************************************
// ПечатьЭтикетки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует этикетку. Перед формированием
//  этикетки проверяет, чтобы элемент справочника был записан 
//
Процедура ПечатьЭтикетки()
	
	Перем Парам;
	
	Если Выбран() = 0 Тогда
	    Предупреждение("Печать можно выполнять только для записанных номенклатурных позиций", 60);
		Возврат;
	КонецЕсли;
	
	ТекЭлем = ТекущийЭлемент();
	
	Если ТекЭлем.Весовой = 0 Тогда
		Баркод = ТекЭлем.БазоваяЕдиница.Штрихкод;
		Табл = СоздатьОбъект("ТаблицаЗначений");
		Табл.НоваяКолонка("Товар", "Строка");
		Табл.НоваяКолонка("Штрихкод", "Строка");
		
		Табл.НоваяСтрока();
		Табл.Товар    = СокрЛП(ТекЭлем.Наименование);
		Табл.Штрихкод = Баркод;
		
		
		Парам = СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Табл, "ТаблицаТоваров");
		
		ОткрытьФормуМодально("Обработка.ПечатьЭтикетки", Парам);
	Иначе
		// в штрихкоде храниться 5 правых цифр кода товара
		// перед печатью нужно сформировать
		
		// получаем вес товара
		Парам = СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(ТекЭлем					, "Номенклатура");
		Парам.ДобавитьЗначение(ТекЭлем.БазоваяЕдиница	, "Единица");
		
		ОткрытьФорму("Обработка.Этикетирование#", Парам);
	КонецЕсли;

КонецПроцедуры // ПечатьЭтикетки()
	
//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Нет
//
Процедура ПоКнопкеПечать()
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
	КонецЕсли;
		
	Если НомерТекущейФормы = 1  Тогда
		ПечатьЭтикетки(); // этикетка
	ИначеЕсли НомерТекущейФормы = 2  Тогда
	 	ПечатьЦенника(); // ценник
	Иначе
	 	
		// Внешняя обработка
		Параметры = глВзятьКонтекст(Контекст);
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм + ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Элемент.Номенклатура", ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеСправочники()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога:
//  Конопка "Справочники"
//
// Описание:
//  Открывает список для выбора подчиненного справочника.
//  Затем открывает выбранный подчиненный справочник.
//
Процедура ПоКнопкеСправочники()
	Перем ВидСпр;
	
	СписСправ	= СоздатьОбъект("СписокЗначений");
	СписСправ.ДобавитьЗначение("Цены"					, "Цены");
	СписСправ.ДобавитьЗначение("СвойстваНоменклатуры"	, "Свойства");
	СписСправ.ДобавитьЗначение("Аналоги"				, "Аналоги");
	СписСправ.ДобавитьЗначение("Комплектация"			, "Комплектующие");

	
	Если СписСправ.ВыбратьЗначение(ВидСпр, , , 60, 1) = 1 Тогда
		
		Если ВидСпр = "Цены"  Тогда
			ПервоеСлово    = "Цены";
		ИначеЕсли ВидСпр = "СвойстваНоменклатуры"  Тогда
			ПервоеСлово    = "Свойства";
		ИначеЕсли ВидСпр = "Аналоги"  Тогда
			ПервоеСлово    = "Аналоги";
		Иначе // ВидСпр = "Комплектация"
			ПервоеСлово    = "Комплектующие";
		КонецЕсли;
		
		Если Выбран() = 0 Тогда
		    Предупреждение(ПервоеСлово+" можно посмотреть только для записанных номенклатурных позиций", 60);
		Иначе	
			ОткрытьФорму("Справочник."+ВидСпр, ТекущийЭлемент());	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеСправочники()

//******************************************************************************
// СформироватьШтрихкод(Весовой, Код)
//
// Параметры:
//  Весовой - 1 - позиция номенклатуры является весовым товаром
//            0 - позиция номенклатуры является штучным товаром
//  Код     - код позиции номенклатуры, для которой формируется штрих-код
//
// Возвращаемое значение:
//  строка - сформированный штрихкод
//
// Описание:
//  Формирует уникальный штрихкод позиции номенклатуры 
//
Функция СформироватьШтрихкод(Весовой, Код)
	
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	СформировалиУникальныйШтрихкод = 0;
	
	Если Весовой = 0 Тогда
		
		// Сформируем штрих-код штучного товара
		
		КодТовара = глДополнитьСтрокуЛ(Число(СокрЛ(Прав(Код, 6))), "0", 7);
		
		Для Сч = 1 По 999 Цикл
			
			ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 3);
			ВремШтрихкод = глСформироватьШтрихкод(глПрефиксШтучногоШтрихкода, КодТовара + ДопКод);
			
			Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
				СформировалиУникальныйШтрихкод = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СформировалиУникальныйШтрихкод = 0 Тогда
			
			// Сформируем штрих-код независимо от кода номенклатуры
			
			Для Сч = 1 По 9999999999 Цикл // 10 разрядов
				
				ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 10);
				ВремШтрихкод = глСформироватьШтрихкод(глПрефиксШтучногоШтрихкода, ДопКод);
				
				Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
					СформировалиУникальныйШтрихкод = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		// Сформируем штрих-код весового товара
		
		КодТовараЧисло = Число(СокрЛ(Прав(Код, 5)));
		
		Для Сч = КодТовараЧисло По 99999 Цикл // 5 разрядов
			
			ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 5);
			ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода, ДопКод + "00000");
			
			Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
				СформировалиУникальныйШтрихкод = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СформировалиУникальныйШтрихкод = 0 Тогда
			Для Сч = 1 По КодТовараЧисло Цикл
				
				ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 5);
				ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода, ДопКод + "00000");
				
				Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
					СформировалиУникальныйШтрихкод = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	    
	КонецЕсли; // Если Весовой = 0 Тогда
	
	Если СформировалиУникальныйШтрихкод = 0 Тогда
		ВремШтрихкод = "";
	КонецЕсли;
	
	Возврат ВремШтрихкод;

КонецФункции // СформироватьШтрихкод()

//******************************************************************************
// ПоКнопкеСформировать()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Вызывается из элементов диалога
// по кнопке Штрихкод
//
// Описание:
//  Заполняет сформированным штрихкодом 
//  реквизит РеквШтрихкодБазовой. Перед заполнением проверяет, заполнен или
//  нет этот реквищит. Если реквизит заполнен, то выдается запрос на подтверждение.
//
Процедура ПоКнопкеСформировать()
	
	Если ПустоеЗначение(РеквШтрихкодБазовой) = 0 Тогда
		Если Вопрос("Штрихкод для базовой единицы задан. Сформировать новый?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(РеквБазоваяЕдиница) = 1 Тогда
		Предупреждение("Не выбрана базовая единица измерения", 60);
		Возврат;
	КонецЕсли;
	
	РеквШтрихкодБазовой = СформироватьШтрихкод(Весовой, Код);
					
КонецПроцедуры // ПоКнопкеСформировать()

//******************************************************************************
// ПриИзмененииНаименования()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  При изменении наименование, если не задано полное наименование, то
//  то оно заполняется из наименования
//
Процедура ПриИзмененииНаименования()
	
	Если ПустаяСтрока(ПолнНаименование)=1 Тогда
		ПолнНаименование = Наименование;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНаименования()

//******************************************************************************
// ПриИзмененииВидаНоменклатуры()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  Вызывается при изменении значения в реквизите вид номенклатуры
//
Процедура ПриИзмененииВидаНоменклатуры()
	
	Если ВидНоменклатуры.Выбран() = 0 Тогда
		ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Прочее;
	КонецЕсли;
	
	// Для услуги не имеет смысла мин. остаток, ГТД и страна происхождения
	Если ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		МинОстаток          = 0;
		НомерГТД            = ПолучитьПустоеЗначение("Справочник.ГТД");
		СтранаПроисхождения = ПолучитьПустоеЗначение("Справочник.ОКСМ");
	КонецЕсли;

	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриИзмененииВидаНоменклатуры()

//******************************************************************************
Функция УстШтрихкод(Штрихкод)
	Штрихкод = СокрЛП(Штрихкод);
	
	Если Найти(глПрефиксШтрихкода(), Лев(Штрихкод, 1)) > 0 Тогда
		Штрихкод = Сред(Штрихкод, 2);
	КонецЕсли;
	
	Возврат Штрихкод;
КонецФункции

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
		Если Форма.ТолькоПросмотр() = 0 Тогда
			Если ПустоеЗначение(РеквШтрихкодБазовой) = 0 Тогда
				Если Вопрос("Штрихкод для базовой единицы задан. Сформировать новый?", "Да+Нет", 60) = "Да" Тогда
					РеквШтрихкодБазовой = УстШтрихкод(Данные);
				КонецЕсли;
			Иначе
				РеквШтрихкодБазовой = УстШтрихкод(Данные);
			КонецЕсли;
			
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()  

// Добавлено: Валерий МЭТР
Процедура ПриИзмененииСклад()
	
	МаксимальныйОстаток = 0;
	МинимальныйОстаток = 0;
	
	СпрОстаткиНоменклатуры = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	СпрОстаткиНоменклатуры.ИспользоватьВладельца(ТекущийЭлемент());
	
	СпрОстаткиНоменклатуры.ВыбратьЭлементы();
	Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
		Если (СпрОстаткиНоменклатуры.ТекущийЭлемент().Склад = Склад)
				И (СпрОстаткиНоменклатуры.ТекущийЭлемент().ПометкаУдаления() = 0) Тогда
			МаксимальныйОстаток = СпрОстаткиНоменклатуры.ТекущийЭлемент().МаксимальныйОстаток;
			МинимальныйОстаток = СпрОстаткиНоменклатуры.ТекущийЭлемент().МинимальныйОстаток;
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

// Добавлено: Валерий МЭТР
Процедура ПриИзмененииМаксОстаток()
	
	СпрСклады = СоздатьОбъект("Справочник.Склады");
	Если СпрСклады.НайтиЭлемент(Склад) = 0 Тогда
		Сообщить("Выберите склад!");
		Возврат;
	КонецЕсли;
		
	СпрОстаткиНоменклатуры = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	СпрОстаткиНоменклатуры.ИспользоватьВладельца(ТекущийЭлемент());
	
	ЭтотЭлемент = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	ЭтотЭлемент.ИспользоватьВладельца(ТекущийЭлемент());
	
	СпрОстаткиНоменклатуры.ВыбратьЭлементы();
	ЭлементНайден = 0;
	Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
		Если (СпрОстаткиНоменклатуры.ТекущийЭлемент().Склад = Склад)
				И (СпрОстаткиНоменклатуры.ТекущийЭлемент().ПометкаУдаления() = 0) Тогда
			ЭтотЭлемент.НайтиЭлемент(СпрОстаткиНоменклатуры.ТекущийЭлемент());
			ЭтотЭлемент.МаксимальныйОстаток = МаксимальныйОстаток;
			ЭтотЭлемент.МинимальныйОстаток = МинимальныйОстаток;
			ЭтотЭлемент.Записать();
			ЭлементНайден = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементНайден = 0 Тогда
		ЭтотЭлемент.Новый();
		ЭтотЭлемент.Наименование = ТекущийЭлемент().Наименование;
		ЭтотЭлемент.Склад = Склад;
		ЭтотЭлемент.МаксимальныйОстаток = МаксимальныйОстаток;
		ЭтотЭлемент.МинимальныйОстаток = МинимальныйОстаток;
		ЭтотЭлемент.Записать();
	КонецЕсли;
		
КонецПроцедуры 

// Добавлено: Валерий МЖТР
Процедура ПриИзмененииМинОстаток()
	
	СпрСклады = СоздатьОбъект("Справочник.Склады");
	Если СпрСклады.НайтиЭлемент(Склад) = 0 Тогда
		Сообщить("Выберите склад!");
		Возврат;
	КонецЕсли;

	СпрОстаткиНоменклатуры = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	СпрОстаткиНоменклатуры.ИспользоватьВладельца(ТекущийЭлемент());
	
	ЭтотЭлемент = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	ЭтотЭлемент.ИспользоватьВладельца(ТекущийЭлемент());
	
	СпрОстаткиНоменклатуры.ВыбратьЭлементы();
	ЭлементНайден = 0;
	Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
		Если (СпрОстаткиНоменклатуры.ТекущийЭлемент().Склад = Склад)
				И (СпрОстаткиНоменклатуры.ТекущийЭлемент().ПометкаУдаления() = 0) Тогда
			ЭтотЭлемент.НайтиЭлемент(СпрОстаткиНоменклатуры.ТекущийЭлемент());
			ЭтотЭлемент.МинимальныйОстаток = МинимальныйОстаток;
			ЭтотЭлемент.Записать();
			ЭлементНайден = 1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементНайден = 0 Тогда
		ЭтотЭлемент.Новый();
		ЭтотЭлемент.Наименование = ТекущийЭлемент().Наименование;
		ЭтотЭлемент.Склад = Склад;
		ЭтотЭлемент.МаксимальныйОстаток = МаксимальныйОстаток;
		ЭтотЭлемент.МинимальныйОстаток = МинимальныйОстаток;
		ЭтотЭлемент.Записать();
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(ПризнКопирования)
	
	Свойство           = ВосстановитьЗначение("ОсновноеСвойствоНоменклатуры");
	Если ПризнКопирования = 0 Тогда
		ВидНоменклатуры    = Перечисление.ВидыНоменклатуры.Прочее;
		СтавкаНДС          = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
		СтавкаНП           = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
		РеквБазоваяЕдиница = глЗначениеПоУмолчанию("ОсновнаяОКЕИ");
	Иначе		
		БазоваяЕдиница     = ПолучитьПустоеЗначение("Справочник.Единицы");
		ОсновнаяЕдиница    = БазоваяЕдиница;
		Если ПустоеЗначение(ОсновноеСвойство) = 0 Тогда // скопировали и основное свойство другого элемента
	        Свойство         = ОсновноеСвойство.ЗначениеСвойства;
			ОсновноеСвойство = ПолучитьПустоеЗначение("Справочник.СвойстваНоменклатуры");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	//Если (глПользователь<>"Бояринова") или (глПользователь<>"Иванова") или (глПользователь<>"Администратор") Тогда
	//	Форма.ТолькоПросмотр(1);
	//КонецЕсли;
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Элемент.Номенклатура", ТаблицаПечФорм);
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОк.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
		Форма.КнопкаПоУмолчанию("кнОк");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общий,Основной, Кнопки", "Основные");
	Форма.Закладки.ДобавитьЗначение("Общий, Дополнительный, Кнопки", "Дополнительные");
    
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	
	Если Выбран() = 0 Тогда
		// заполняем реквизиты формы (единицы измерения) значениями по умолчанию
		РеквБазоваяЕдиница = глЗначениеПоУмолчанию("ОсновнаяОКЕИ");
		
		Форма.кнОткрытьБазовую.Доступность(0);
	Иначе
        
		Если ВидНоменклатуры.Выбран() <> 0 Тогда
			//Форма.ВидНоменклатуры.Доступность(0);
		КонецЕсли;
		
		РеквБазоваяЕдиница	= БазоваяЕдиница.ОКЕИ;
		РеквВесБазовой		= БазоваяЕдиница.Вес;
		РеквШтрихкодБазовой	= БазоваяЕдиница.ШтрихКод;
		
		ОсновнаяЕдиница.ИспользоватьВладельца(ТекущийЭлемент());
		
		Если (ОсновноеСвойство.Выбран() = 1)
		   И (ПустоеЗначение(Свойство)  = 1) Тогда
			Свойство = ОсновноеСвойство.ЗначениеСвойства;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим текущую закладку
	Закладка = 0;
	Если ПустоеЗначение(Форма.Параметр) = 0  Тогда // могли передать нужную закладку
		Закладка = Форма.Закладки.Получить(Форма.Параметр);
	КонецЕсли; 
	Закладка = Макс(1, Форма.Закладки.НайтиЗначение(Закладка));
	Форма.Закладки.ТекущаяСтрока(Закладка);
	
	ПриИзмененииВидаНоменклатуры();
	
	// Сформируем подпись к основному свойству
	Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда
		Заголовок = СокрЛП(Строка(Константа.ВидСвойстваНоменклатуры)) + ":";
		Форма.ТекстСвойство.Заголовок(Заголовок);
	КонецЕсли;  
	
	//++Ерошенко 31.05.2007
	// добавлено для управления видимостью спец. полей.. 
	Если ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Прочее Тогда 
		Видим = 1;
	Иначе
		Видим = 0;
	КонецЕсли;
	Форма.НадписьКоличествоВУпаковке.Видимость(Видим);
	Форма.КоличествоВУпаковке.Видимость(Видим);  
	   	   	
	Форма.НадписьКоличествоВКоробке.Видимость(Видим);
	Форма.КоличествоВКоробке.Видимость(Видим);  
	
	Форма.НадписьКоличествоНаПаллете.Видимость(Видим);
	Форма.КоличествоНаПаллете.Видимость(Видим);	      	
	//--Ерошенко          
	   
	//++Валерий МЭТР:
	Склад = глЗначениеПоУмолчанию("ОсновнойСклад");
	ПриИзмененииСклад();
	//--Валерий МЭТР
		
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	УправлениеДиалогом();
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Перем ВидСвойства, ЕдиницаТМЦ, ВыбЕдиница;
	
	Если ИдентЭлемДиалога = "Свойство" Тогда
			
		Если Константа.ВидСвойстваНоменклатуры.Выбран() = 1 Тогда
			Свойство.ИспользоватьВладельца(Константа.ВидСвойстваНоменклатуры);
		Иначе
			ФлагСтандОбр = 0;
			Предупреждение("Перед выбором значения свойства выберите в настройках параметров учета 
			                |вид свойства для Номенклатуры", 60);
		КонецЕсли;	
	ИначеЕсли ИдентЭлемДиалога = "ОсновнаяЕдиница" Тогда
		СтатусВозврата(0);
		
		Если Выбран() = 0 Тогда
			Предупреждение("Основную единицу измерения можно выбрать только для сохраненной номенклатуры!", 60);
		Иначе
			// создадим список из единиц измерения товара 
			СписокЕдиниц = СоздатьОбъект("СписокЗначений");
			СпрЕдиницы   = СоздатьОбъект("Справочник.Единицы");
			СпрЕдиницы.ИспользоватьВладельца(ТекущийЭлемент());
			
			СпрЕдиницы.ВыбратьЭлементы();
			Пока СпрЕдиницы.ПолучитьЭлемент() = 1 Цикл
				Если СпрЕдиницы.ПометкаУдаления() = 0 Тогда
					СписокЕдиниц.ДобавитьЗначение(СпрЕдиницы.ТекущийЭлемент());
				КонецЕсли;
			КонецЦикла;
			
			// откроем выбор ввиде выбающего списка под элементом формы
			Если СписокЕдиниц.ВыбратьЗначение(ВыбЕдиница,,,,2) = 1 Тогда
				ОсновнаяЕдиница = ВыбЕдиница;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()


//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	Перем Единица, ЕдиницаШК;
	
	// проверка заполенения обязательных полей.
	НеВсеОсновныеЗапонены = 1;
	Автор			= глПользователь;	//т.е. кто последний сохранил, тот и папа
	ДатаИзменения 	= ТекущаяДата();
	
	Если ПустоеЗначение(Наименование) = 1 Тогда
		ИмяПоля = """Наименование""";
		ИдПоля = "Наименование";
	ИначеЕсли ПустоеЗначение(ВидНоменклатуры) = 1 Тогда
		ИмяПоля = """Вид""";
		ИдПоля = "ВидНоменклатуры";
	ИначеЕсли ПустоеЗначение(ПолнНаименование) = 1 Тогда
		ИмяПоля = """Наименование для печати""";
		ИдПоля = "ПолнНаименование";
	ИначеЕсли ПустоеЗначение(РеквБазоваяЕдиница) = 1 Тогда
		ИмяПоля = """Базовая единица измерения""";
		ИдПоля = "РеквБазоваяЕдиница";
	Иначе
		// все основные поля заполенены
		НеВсеОсновныеЗапонены = 0;
	КонецЕсли;
	
	Если НеВсеОсновныеЗапонены <> 0 Тогда
		СтатусВозврата(0);
		Предупреждение("Не заполенено поле " + ИмяПоля, 60);
		Активизировать(ИдПоля);
		Возврат;
	КонецЕсли;
	
	Если ЗаписатьБазовуюЕдиницу() = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ЗаписьОснСвойство() = 0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	Форма.кнОткрытьБазовую.Доступность(1);
	Форма.ВидНоменклатуры.Доступность(0);
	
	УправлениеДиалогом();
	
	СохранитьЗначение("ОсновноеСвойствоНоменклатуры", Свойство);
	
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	Если РеквШтрихкодБазовой <> БазоваяЕдиница.Штрихкод Тогда
	    Ответ	= Вопрос("Сохранить изменения?", "Да+Нет+Отмена", 60);
		Если Ответ = "Да" Тогда
		    // сохраним новый штрихкод базовой единицы
			Если ЗаписатьБазовуюЕдиницу() = 0 Тогда
				СтатусВозврата(0);
			КонецЕсли;
		ИначеЕсли Ответ = "Отмена" Тогда
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Этикетка";
ТаблицаПечФорм.Кнопка	= "Этикетка";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Ценник";
ТаблицаПечФорм.Кнопка	= "Ценник";