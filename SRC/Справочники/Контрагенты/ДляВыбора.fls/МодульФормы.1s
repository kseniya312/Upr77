////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ФормаТаблицыОстатков;  // контекст формы с таблицей остатков

Процедура УстОтбор(зн) далее
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ОсновноеСвойство()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Значение основного свойства
//
// Вызывается из формул реквизитов диалога
//  Колонка "Основное свойство".
//
// Описание:
//  Формирует и возращает строковое представление основного свойства.
//
Функция ОсновноеСвойство()
	
	Если ЭтоГруппа() = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1  Тогда
		Возврат "";
	Иначе  
		Если ПустоеЗначение(ТекущийЭлемент().ОсновноеСвойство) = 1  Тогда
			Возврат "";
		Иначе
			Возврат ТекущийЭлемент().ОсновноеСвойство.ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ОсновноеСвойство()

//******************************************************************************
// ПоКнопкеДолги()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Долги".
//
// Описание:
//  Вызывает форму показа остатков по текущему ТМЦ в таблице значений.
//
Процедура ПоКнопкеДолги()
	
	Параметр = глВзятьКонтекст(Контекст);
	ОткрытьФорму("Обработка.ПоказатьОстаткиВзаиморасчетов", Параметр);
	ФормаТаблицыОстатков = Параметр; // через параметр возвращается контекст открытой формы обработки
	
КонецПроцедуры // ПоКнопкеДолги()

//******************************************************************************
// СформироватьИнформационнуюСтроку()
//
// Параметры:
//  Нет
//
//	Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Текст информационной строки.
//
// Описание:
//  Формирует текст информационной строки формы. 
//
Функция СформироватьИнформационнуюСтроку()
	Перем ИнфСтрока;
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1 Тогда
		// не выбран элемент
		ИнфСтрока = "";
	Иначе
		
		Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
			// текущий элемент - группа
			ИнфСтрока =  ТекущийЭлемент().ПолноеНаименование();
		Иначе
			
			ТекЭлем = ТекущийЭлемент();
			
			ИнфСтрока = СокрЛП(ТекЭлем.Наименование) + 
			//++Валерий МЭТР: закомментировано
			//            ?(ПустоеЗначение(ТекЭлем.ЮрФизЛицо.Телефоны) = 0, "  Телефоны: "     + СокрЛП(ТекЭлем.ЮрФизЛицо.Телефоны), "") +
			//            ?(ПустоеЗначение(ТекЭлем.ЭлПочта) = 0, "  Адрес эл.почты: " + СокрЛП(ТекЭлем.ЭлПочта),	"") +
			//++Валерий МЭТР: закомментировано
						?(ПустоеЗначение(ТекЭлем.Комментарий) = 0, "  Комментарий: "    + СокрЛП(ТекЭлем.Комментарий),	"");
		
			Если ТипЗначения(ФормаТаблицыОстатков) = 100 Тогда
				
				// если открыта форма с таблицей остатков, то обновим в ней текущий элемент
				ФормаТаблицыОстатков.Форма.Обновить(0);
			    
			КонецЕсли;			
		КонецЕсли;

	КонецЕсли;
	
	Возврат ИнфСтрока;
	
КонецФункции // СформироватьИнформационнуюСтроку()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ПустоеЗначение(Константа.ВидСвойстваКонтрагентов) = 0  Тогда
		Форма.Свойство.Заголовок(Строка(Константа.ВидСвойстваКонтрагентов));
	Иначе
		Форма.Свойство.Видимость(0);
	КонецЕсли;
	
	Если Форма.Параметр = "Выбор"  Тогда
	    Форма.ОбработкаВыбораСтроки(1);
	КонецЕсли;
	
	попытка
		Если Форма.Параметр="ВыбирайГруппу" Тогда
			ВыборГруппы(1);
		КонецЕсли;
	Исключение
		
	КонецПопытки;
	

//******************************************************************************
//		ОТБОР
	Сотр=глПользователь.ТипСотрудника;
	Пер	=Перечисление.ТипСотрудника;
	
	Если Сотр=Пер.СС_Офис тогда
		УстОтбор(2);
	ИначеЕсли Сотр=Пер.СС_Сервис тогда
		УстОтбор(3);
	иначе
		УстОтбор(4);	//Т.е. отключаем
	КонецЕсли;		
	
	
КонецПроцедуры // ПриОткрытии()

Процедура УстОтбор(зн)
    //Пер=Перечисление.ТипОтображенияВОтборе;
	
//	Если зн=1 тогда
////		УстановитьОтбор("НеПоказывать",Пер.Всегда);
//	иначеесли зн=2 тогда
//		УстановитьОтбор("НеПоказывать",Пер.Вариант1);
//	иначеесли зн=3 тогда
//		УстановитьОтбор("НеПоказывать",Пер.Вариант2);
//	иначе
//		УстановитьОтбор("","");
//	КонецЕсли;
КонецПроцедуры	

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// если открыта форма с таблицей остатков, то закроем и ее
	Если ТипЗначения(ФормаТаблицыОстатков) = 100 Тогда
		ФормаТаблицыОстатков.Форма.Закрыть(0);
	КонецЕсли;			
	
КонецПроцедуры // ПриЗакрытии()         

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореСтроки()
	Форма.Параметр = ТекущийЭлемент();
	Возврат;
КонецПроцедуры  
                

// Валерий МЭТР:  
//******************************************************************************
// Предопределенная процедура.
Процедура ПриПереносеЭлементаВДругуюГруппу(Элемент, Группа)
	
	ГруппаРозница = ПолучитьПустоеЗначение("Справочник.Контрагенты");
	СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	Если СпрКонтрагенты.НайтиПоКоду(Константа.ПолучитьАтрибут("КодГруппыРозница")) = 1 Тогда
		ГруппаРозница = СпрКонтрагенты.ТекущийЭлемент();
	КонецЕсли;
	
	Если (ПринадлежитГруппе(ГруппаРозница) = 1)
		И ( (ИмяПользователя() <> "Симоненко") И (ИмяПользователя() <> "Филиппов") И (ИмяПользователя() <> "Иванова") И (ИмяПользователя() <> "Наира") ) Тогда
			
		Предупреждение("Вы не имеете прав на перемещение этих данных",10);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли; 	
	
КонецПроцедуры
