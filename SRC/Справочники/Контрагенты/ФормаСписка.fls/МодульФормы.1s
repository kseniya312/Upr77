////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ФормаТаблицыОстатков;  // контекст формы с таблицей остатков 

Процедура УстОтбор(зн) далее
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ОсновноеСвойство()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Значение основного свойства
//
// Вызывается из формул реквизитов диалога
// колонка основное свойство
//
// Описание:
//  Формирует и возращает строковое представление основного свойства
//
Функция ОсновноеСвойство()
	
	Если ЭтоГруппа() = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1  Тогда
		Возврат "";
	Иначе  
		Если ПустоеЗначение(ТекущийЭлемент().ОсновноеСвойство) = 1  Тогда
			Возврат "";
		Иначе
			Возврат ТекущийЭлемент().ОсновноеСвойство.ЗначениеСвойства;
		КонецЕсли;
	КонецЕсли;
КонецФункции // ОсновноеСвойство()

//******************************************************************************
// ПоКнопкеВзаиморасчеты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Взаиморасчеты".
//
// Описание:
//  Выводит отчет о взаиморасчетах с текущим контрагентом.
//
Процедура ПоКнопкеВзаиморасчеты()
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1 Тогда
		Предупреждение("Не выбран контрагент", 60);
	Иначе                                        
		Группировки = СоздатьОбъект("СписокЗначений");
		
		Группировки.ДобавитьЗначение("Фирма",        "Фирма");
		Группировки.ДобавитьЗначение("Контрагент",   "Контрагент");
		Группировки.ДобавитьЗначение("СвойствоКонтр","Свойство контрагента");
		Группировки.ДобавитьЗначение("Договор",      "Договор");
		Группировки.ДобавитьЗначение("ВидДолга",     "Вид долга (бух. счет)");
		Группировки.ДобавитьЗначение("СтавкаНП",     "Ставка НП");
		Группировки.ДобавитьЗначение("КредДокумент", "Кредитный документ");
		Группировки.ДобавитьЗначение("Документ",     "Документы движения");
		
		Группировки.Пометка(1, 1);              
		Группировки.Пометка(4, 1);
		Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
			// по контрагентам
			Группировки.Пометка(2, 1);
		Иначе                 
			// по кредитным документам
			Группировки.Пометка(8, 1);
		КонецЕсли;
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет", "ВедомостьПоКонтрагентам");
		
		// все настройки помещаем в список
		ВыбДатаКонца  = Мин(РабочаяДата(),ПолучитьДатуТА());
		ВыбДатаНачала = Мин(глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов"),ВыбДатаКонца);
		ВыбДатаНачала = ?(ПустоеЗначение(ВыбДатаНачала) = 1,ВыбДатаКонца,ВыбДатаНачала);
		
		Расшифровка.Установить("ДатаНачала", 	ВыбДатаНачала);
		Расшифровка.Установить("ДатаКонца", 	ВыбДатаКонца);
		Расшифровка.Установить("ВыбРазделитель1","");
		Расшифровка.Установить("ВыбРазделитель2","");
		Расшифровка.Установить("ВыбРазделитель3","");
		Расшифровка.Установить("ВидРазделителя",  1);
		
		Расшифровка.Установить("ВыбКонтрагент", ТекущийЭлемент());
		Расшифровка.Установить("ВыбДоговор", 	"");
		Расшифровка.Установить("ПоОперациям", 	0);
		Расшифровка.Установить("ВыбВидВалюты", 	1);
		Расшифровка.Установить("СписокВидовОтчетов",3);
		Расшифровка.Установить("Долги", 1);
		Расшифровка.Установить("Просроченные", 0);
		
		Расшифровка.Установить("Группировки",	Группировки);       
		            
		глОбработкаРасшифровки(Расшифровка,"","");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВзаиморасчеты()

//******************************************************************************
// ПоКнопкеДолги()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Долги".
//
// Описание:
//  Вызывает форму показа остатков по текущему ТМЦ в таблице значений.
//
Процедура ПоКнопкеДолги()
	
	Параметр = глВзятьКонтекст(Контекст);
	ОткрытьФорму("Обработка.ПоказатьОстаткиВзаиморасчетов", Параметр);
	ФормаТаблицыОстатков = Параметр; // через параметр возвращается контекст открытой формы обработки
	
КонецПроцедуры // ПоКнопкеДолги()

//******************************************************************************
// ПоКнопкеОткрытьСправочник(Справочник, Параметр, Объект=0)
//
// Параметры:
//  Справочник - "строка" - вид справочника.
//  Пераметр   - параметр для передачи в форму.
//  Объект     - объект, который следует активизировать в форме.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки открытия подчиненных справочников.
//
// Описание:
//  Открывает форму списка указанного справочника.
//
Процедура ПоКнопкеОткрытьСправочник(Справочник, Знач Параметр, Знач Объект=0)
	
	Если ПустоеЗначение(Параметр) = 1 Тогда
		Предупреждение("Не выбран контрагент!", 60);
		
	ИначеЕсли Параметр.ЭтоГруппа() = 1 Тогда
		Предупреждение("Не выбран контрагент!", 60);
		
	ИначеЕсли ОткрытьФорму("Справочник."+Справочник, Параметр) = 0 Тогда
		Возврат;
		
	ИначеЕсли ПустоеЗначение(Объект) = 0 Тогда
		Параметр.АктивизироватьОбъект(Объект);
		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОткрытьСправочник()

//******************************************************************************
// СформироватьИнформационнуюСтроку()
//
// Параметры:
//  Нет
//
//	Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Текст информационной строки.
//
// Описание:
//  Формирует текст информационной строки формы. 
//
Функция СформироватьИнформационнуюСтроку()
	Перем ИнфСтрока;
	
	Если ПустоеЗначение(ТекущийЭлемент()) = 1 Тогда
		// не выбран элемент
		ИнфСтрока = "";
	Иначе
		
		Если ТекущийЭлемент().ЭтоГруппа() = 1 Тогда
			// текущий элемент - группа
			ИнфСтрока =  ТекущийЭлемент().ПолноеНаименование();
		Иначе
			
			ТекЭлем = ТекущийЭлемент();
			
			ИнфСтрока = СокрЛП(ТекЭлем.Наименование) +
			//++Валерий МЭТР: закомментировано
			//            ?(ПустоеЗначение(ТекЭлем.ЮрФизЛицо.Телефоны) = 0, "  Телефоны: "     + СокрЛП(ТекЭлем.ЮрФизЛицо.Телефоны), "") +
			//            ?(ПустоеЗначение(ТекЭлем.ЭлПочта) = 0, "  Адрес эл.почты: " + СокрЛП(ТекЭлем.ЭлПочта),	"") +
			//--Валерий МЭТР: закомментировано	            
						?(ПустоеЗначение(ТекЭлем.Комментарий) = 0, "  Комментарий: "    + СокрЛП(ТекЭлем.Комментарий),	"");
		
			Если ТипЗначения(ФормаТаблицыОстатков) = 100 Тогда
				
				// если открыта форма с таблицей остатков, то обновим в ней текущий элемент
				ФормаТаблицыОстатков.Форма.Обновить(0);
			    
			КонецЕсли;			
		КонецЕсли;

	КонецЕсли;
	
	Возврат ИнфСтрока;
	
КонецФункции // СформироватьИнформационнуюСтроку()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ПустоеЗначение(Константа.ВидСвойстваКонтрагентов) = 0  Тогда
		Форма.Свойство.Заголовок(Строка(Константа.ВидСвойстваКонтрагентов));
	Иначе
		Форма.Свойство.Видимость(0);
	КонецЕсли;

//ОТБОР
	Сотр=глПользователь.ТипСотрудника;
	Пер	=Перечисление.ТипСотрудника;
	
	Если Сотр=Пер.СС_Офис тогда
		УстОтбор(2);
	ИначеЕсли Сотр=Пер.СС_Сервис тогда
		УстОтбор(3);
	иначе
		УстОтбор(4);	//Т.е. отключаем
	КонецЕсли;		
	
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// если открыта форма с таблицей остатков, то закроем и ее
	Если ТипЗначения(ФормаТаблицыОстатков) = 100 Тогда
		ФормаТаблицыОстатков.Форма.Закрыть(0);
	КонецЕсли;			
	
КонецПроцедуры // ПриЗакрытии()  


// Валерий МЭТР:  
//******************************************************************************
// Предопределенная процедура.
Процедура ПриПереносеЭлементаВДругуюГруппу(Элемент, Группа)
	
	ГруппаРозница = ПолучитьПустоеЗначение("Справочник.Контрагенты");
	СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
	Если СпрКонтрагенты.НайтиПоКоду(Константа.ПолучитьАтрибут("КодГруппыРозница")) = 1 Тогда
		ГруппаРозница = СпрКонтрагенты.ТекущийЭлемент();
	КонецЕсли;	
       
	Если (ПринадлежитГруппе(ГруппаРозница) = 1)
		И ( (ИмяПользователя() <> "Симоненко") И (ИмяПользователя() <> "Филиппов") И (ИмяПользователя() <> "Иванова") И (ИмяПользователя() <> "Наира") ) Тогда
			
		Предупреждение("Вы не имеете прав на перемещение этих данных",10);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли; 	
	
КонецПроцедуры  


Процедура УстОтбор(зн)
//    Пер=Перечисление.ТипОтображенияВОтборе;
//	
//	Если зн=1 тогда
////		УстановитьОтбор("НеПоказывать",Пер.Всегда);
//	иначеесли зн=2 тогда
//		УстановитьОтбор("НеПоказывать",Пер.Вариант1);
//	иначеесли зн=3 тогда
//		УстановитьОтбор("НеПоказывать",Пер.Вариант2);
//	иначе
//		УстановитьОтбор("","");
//	КонецЕсли;
КонецПроцедуры	

