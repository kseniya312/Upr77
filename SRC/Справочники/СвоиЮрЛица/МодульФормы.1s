////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПриИзмененииТекущейДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет периодические реквизиты диалога.
//
Процедура ПриИзмененииТекущейДаты()
	
	ТекДата = ИспользоватьДату();
	
	// Заполнение реквизитов слоя "УчетнаяПолитика".
	МетодыОпределенияВыручки1   = МетодОпределенияВыручки.ПорядковыйНомер();
	МетодыРасчетаСебестоимости1 = МетодРасчетаСебестоимости.ПорядковыйНомер();
	МетодыУчетаРозницы1 		= МетодУчетаРозницы.ПорядковыйНомер();
	
КонецПроцедуры // ПриИзмененииТекущейДаты()

//******************************************************************************
// Автозаполнение()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Наименование, ОргПравФорма.
//
// Описание:
//  Автозаполнение наименований.
//
Процедура Автозаполнение()
	
	Если Форма.АктивныйЭлемент() = "Наименование" Тогда
		Если ПустаяСтрока(ПолнНаименование) = 1 Тогда
			ПолнНаименование = " """+СокрЛП(Наименование)+"""";
		КонецЕсли;
		
	ИначеЕсли Форма.АктивныйЭлемент() = "ОргПравФорма" Тогда
		Если ПустаяСтрока(ОфициальноеНаименование) = 1 Тогда
			ОфициальноеНаименование = СокрЛП(ОргПравФорма)+" """+СокрЛП(ПолнНаименование)+"""";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // Автозаполнение()

//******************************************************************************
// ПриИзмененииИНН()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  ИНН.
//
// Описание:
//  Проверяет уникальность ИНН в справочнике юр. лиц.
//
Процедура ПриИзмененииИНН()
	
	// ИНН может быть не указан.	
	Длина = Метаданные.Справочник("СвоиЮрЛица").Реквизит("ИНН").Длина;	
	Если СтрДлина(СокрЛП(ИНН)) < Длина Тогда
		Возврат;
	КонецЕсли;
	
	// Список найденных элементов с таким же ИНН.
	Список = СоздатьОбъект("СписокЗначений");
	
	Объект = СоздатьОбъект("Справочник.СвоиЮрЛица");
	Объект.ВыбратьЭлементыПоРеквизиту("ИНН", ИНН, 0, 1);
	
	// Поиск элементов с таким же ИНН.
	Пока Объект.ПолучитьЭлемент(1) = 1 Цикл
		Если Объект.ТекущийЭлемент() = ТекущийЭлемент() Тогда
			Возврат; // элемент уже был записан
		Иначе
			Список.ДобавитьЗначение(Объект.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	// Найдены элементы с таким же ИНН.
	Если 0 < Список.РазмерСписка() Тогда
		Стр = "В справочнике """+Объект.ПредставлениеВида()+""" уже есть элементы с таким же ИНН!";
		Предупреждение(Стр, 60);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииИНН()

//******************************************************************************
// ПоКнопкеВводаАдреса(Адрес1, Адрес2="")
//
// Параметры:
//  Адрес1 - реквизит, в который будет введен адрес.
//  Адрес2 - реквизит, в который будет скопирован адрес.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки ввода адреса.
//
// Описание:
//  Вызывает обработку для ввода адреса.
//
Процедура ПоКнопкеВводаАдреса(Адрес1, Адрес2="")

	глВводАдреса(Адрес1);
	
	Если ПустаяСтрока(глПредставлениеАдреса(Адрес2)) = 1 Тогда
		Адрес2 = Адрес1;
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВводаАдреса()

//******************************************************************************
// ПоКнопкеОткрыть(Объект)
//
// Параметры:
//  Объект - объект, который необходимо открыть.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки "Открыть".
//
// Описание:
//  Открывает форму объекта.
//
Процедура ПоКнопкеОткрыть(Объект, ЭлементДиалога="")
	
	Если Объект.Выбран() = 1 Тогда
		ОткрытьФормуМодально(Объект, , -1);
	Иначе
		Активизировать(ЭлементДиалога, 1);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОткрыть()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	Если глВвестиДатуПериодическихРеквизитов(Контекст, 1) = 1 Тогда
		ПриИзмененииТекущейДаты();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория()
	
	Если      Форма.Закладки.ТекущаяСтрока() = 3 Тогда // слой "ДолжностныеЛица"
		ВидимыеРеквизиты = "Руководитель, ГлБухгалтер, Кассир";
		
	ИначеЕсли Форма.Закладки.ТекущаяСтрока() = 4 Тогда // слой "УчетнаяПолитика"
		ВидимыеРеквизиты = "МетодОпределенияВыручки, МетодРасчетаСебестоимости, СтавкаНПсАванса";

	Иначе
		ВидимыеРеквизиты = "";
	КонецЕсли;
	
	глЗначенияПериодическихРеквизитов(Контекст, , , ВидимыеРеквизиты);
	
КонецПроцедуры // ПоКнопкеИстория()

//******************************************************************************
// ПоКнопкеОткрытьСправочник(Справочник, Знач Параметр, Знач Объект=0)
//
// Параметры:
//  Справочник - "строка" - вид справочника.
//  Пераметр   - параметр для передачи в форму.
//  Объект     - объект, который следует активизировать в форме.
//
// Возвращаемое значение:
//  В немодальном режиме - контекст открытой формы.
//
// Вызывается из формул элементов диалога:
//  Кнопки открытия подчиненных справочников.
//
// Описание:
//  Открывает форму списка указанного справочника.
//
Функция ПоКнопкеОткрытьСправочник(Справочник, Знач Параметр, Знач Объект=0)
	
	Если ПустоеЗначение(Параметр) = 1 Тогда
		Предупреждение("Элемент еще не записан. Справочник не может быть открыт!", 60);
		Возврат ПолучитьПустоеЗначение();
		
	Иначе
		ОткрытьФорму("Справочник."+Справочник, Параметр);
	КонецЕсли;
		
	Если (ТипЗначенияСтр(Параметр) = "ГрупповойКонтекст") И (ПустоеЗначение(Объект) = 0) Тогда
		Параметр.АктивизироватьОбъект(Объект);
	КонецЕсли;
	
	Возврат Параметр;
	
КонецФункции // ПоКнопкеОткрытьСправочник()

//******************************************************************************
// УстановитьЗаголовкиПеречисления(Идентификатор)
//
// Параметры:
//  Идентификатор - "МетодыОпределенияВыручки" 
//                  "МетодыРасчетаСебестоимости"
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает заголовки элементов диалога.
//
Процедура УстановитьЗаголовкиПеречисления(Идентификатор)
	
	Для Номер = 1 По Метаданные.Перечисление(Идентификатор).Значение() Цикл
		мдЗначение  = Метаданные.Перечисление(Идентификатор).Значение(Номер);
		Заголовок   = ?(ПустаяСтрока(мдЗначение.Комментарий) = 0, " ("+Нрег(мдЗначение.Комментарий)+")", "");
		
		Форма.ПолучитьАтрибут(Идентификатор+Номер).Заголовок(мдЗначение.Представление+Заголовок); 
	КонецЦикла;
	
КонецПроцедуры // УстановитьЗаголовкиПеречисления()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(ФлагКопирования)
	
	Если ФлагКопирования = 1 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение реквизитов слоя "УчетнаяПолитика".
	МетодУчетаРозницы		  = Перечисление.МетодыУчетаРозницы.ПоПродажнымЦенам;
	МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.FIFO;
	МетодОпределенияВыручки   = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке;
	
	УчитыватьНДС              = 1;
	УчитыватьНП               = 0;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнВводаЮрАдреса.Доступность(0);
		Форма.кнВводаФактАдреса.Доступность(0);
		Форма.кнВводаАдресаИМНС.Доступность(0);
		
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОк");
	КонецЕсли;
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
	// Системно не надо контролировать изменение периодических реквизитов.
	СохранениеПериодическихРеквизитов(0);
	
	// Заполнение реквизитов диалога.
	ПриИзмененииТекущейДаты();
	
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1), 2);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
	// Заполнение реквизитов диалога.
	ПриИзмененииТекущейДаты();
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()
	
	// Проверка заполненности обязательных реквизитов.
	
	// Наименование юр. лица.
	Если ПустаяСтрока(Наименование) = 1 Тогда
		Предупреждение("Не указано наименование юридического лица!", 60);
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1));
		Активизировать("Наименование");
		СтатусВозврата(0); Возврат;
	КонецЕсли;
	
	// Метод определения выручки юр. лица.
	Если МетодыОпределенияВыручки1 = 0 Тогда
		Предупреждение("Не выбран метод определения выручки юридического лица!", 60);
		Форма.Закладки.ТекущаяСтрока(4);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(4));
		Активизировать("МетодыОпределенияВыручки1");
		СтатусВозврата(0); Возврат;
	КонецЕсли;
	
	// Метод расчета себестоимости юр. лица.
	Если МетодыРасчетаСебестоимости1 = 0 Тогда
		Предупреждение("Не выбран метод расчета себестоимости юридического лица!", 60);
		Форма.Закладки.ТекущаяСтрока(4);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(4));
		Активизировать("МетодыРасчетаСебестоимости1");
		СтатусВозврата(0); Возврат;
	КонецЕсли;

	// Метод расчета себестоимости юр. лица.
	Если МетодыУчетаРозницы1 = 0 Тогда
		Предупреждение("Не выбран метод учета в розничной торговле!", 60);
		Форма.Закладки.ТекущаяСтрока(4);
		Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(4));
		Активизировать("МетодыУчетаРозницы1");
		СтатусВозврата(0); Возврат;
	КонецЕсли;     
	МетодУчетаРозницы = Перечисление.МетодыУчетаРозницы.ЗначениеПоНомеру(МетодыУчетаРозницы1);
	
	// Обработке ЗаписьПериодическихРеквизитов необходимо передать
	// значения периодических реквизитов, введенные в форме диалога.
	Список = СоздатьОбъект("СписокЗначений");
	
	// Заполнение реквизитов слоя "ДолжностныеЛица".
	Список.Установить("Руководитель", Руководитель);
	Список.Установить("ГлБухгалтер",  ГлБухгалтер);
	Список.Установить("Кассир",       Кассир);
	
	// Заполнение реквизитов слоя "УчетнаяПолитика".
	Список.Установить("МетодОпределенияВыручки"		, Перечисление.МетодыОпределенияВыручки.ЗначениеПоНомеру(МетодыОпределенияВыручки1));
	Список.Установить("МетодРасчетаСебестоимости"	, Перечисление.МетодыРасчетаСебестоимости.ЗначениеПоНомеру(МетодыРасчетаСебестоимости1));
	Список.Установить("СтавкаНПсАванса"				, СтавкаНПсАванса);
	
	Список.Установить("НомерЛистаКассовойКниги"		, НомерЛистаКассовойКниги);
	
	// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
	// для управления записью значений периодических реквизитов.
	Если глЗаписьПериодическихРеквизитов(Контекст, Список, , '01.01.1980') = 0 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
// Номер закладки используется в процедурах и функциях модуля!
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение("Кнопки, ЮрЛицо",             "Основные");
Форма.Закладки.ДобавитьЗначение("Кнопки, ЮрЛицоДоп",          "Дополнительные");
Форма.Закладки.ДобавитьЗначение("Кнопки, ДолжностныеЛица",    "Должн. лица, МНС");
Форма.Закладки.ДобавитьЗначение("Кнопки, УчетнаяПолитика",    "Учетная политика");
Форма.Закладки.ДобавитьЗначение("Кнопки, Прочее",             "Прочее");

УстановитьЗаголовкиПеречисления("МетодыОпределенияВыручки");
УстановитьЗаголовкиПеречисления("МетодыРасчетаСебестоимости");
УстановитьЗаголовкиПеречисления("МетодыУчетаРозницы");
