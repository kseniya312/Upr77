////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем Таб;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ВыбратьДвижение()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ВыбратьДвижение()
	
	Перем КонтекстФормы;
	
	ОткрытьПодбор("Справочник.ДвиженияРегистров", , КонтекстФормы, 0, Движение);
	Если ТипЗначенияСтр(КонтекстФормы) = "ГрупповойКонтекст" Тогда
		КонтекстФормы.ИспользоватьВладельца(Владелец, 0);
		КонтекстФормы.ИерархическийСписок(1, 1);
	КонецЕсли;
	
КонецПроцедуры // ВыбратьДвижение()

//******************************************************************************
// НаименованиеСчета(Счет)
//
// Параметры:
//  Счет - значение реквизита счета дебета или кредита
//
// Возвращаемое значение:
//  Наименование счета.
//
// Вызывается из формул элементов диалога:
//  Информационные тексты (счет дебета и кредита).
//
// Описание:
//  Формируется строка с описанием счета.
//
Функция НаименованиеСчета(Счет)
	Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
		Возврат Счет.Наименование;
		
	Иначе
		Возврат Счет;
		
	КонецЕсли;
	
КонецФункции

//******************************************************************************
// АтрибутыСчета(ДК)
//
// Параметры:
//  ДК - "Д", если счет дебета, "К" если счет кредита.
//
// Возвращаемое значение:
//  Описание атрибутов счета.
//
// Вызывается из формул элементов диалога:
//  Информационные тексты (счет дебета и кредита).
//
// Описание:
//  Формируется строка, в которой перечисляются атрибуты счета.
//
Функция АтрибутыСчета(ДК)
	
	Счет = ПолучитьАтрибут("Счет"+ДК);
	
	Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
		Если Счет.Количественный = 1 Тогда
			Стр = "Количественный";
		Иначе
			Стр = "";
		КонецЕсли;
		
		Если Счет.Валютный = 1 Тогда
			Если ПустаяСтрока(Стр) = 0 Тогда
				Стр = Стр+", ";
			КонецЕсли;
			
			Стр = Стр + "Валютный";
		КонецЕсли;
		
		Если Счет.Забалансовый = 1 Тогда
			Если ПустаяСтрока(Стр) = 0 Тогда
				Стр = Стр+", ";
			КонецЕсли;
			
			Стр = Стр + "Забалансовый";
		КонецЕсли;

	Иначе
		Стр = "(значения счета и аналитики заданы в рекв. документа)";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции // АтрибутыСчета()

//******************************************************************************
// УстановитьЗначениеВСписок(ВидЗначения, Список)
//
// Параметры:
//  ВидЗначения - строка, идентификатор значения перечисления 
//                ЗначенияАтрибутовПроводок.
//  Список      - Список значений, список в который записывается значение
//                перечисления ЗначенияАтрибутовПроводок.
//  
// Описание:
//  Процедура проверяет наличие значения перечисления ЗначенияАтрибутовПроводок.
// Если значение с переданным видом значения существует, то данное значение
// добавляется в список.
//
Процедура УстановитьЗначениеВСписок(ВидЗначения, Список)
	
	Если ПустаяСтрока(ВидЗначения) = 0 Тогда
		
		Если Метаданные.Перечисление("ЗначенияАтрибутовПроводок").Значение(ВидЗначения).Выбран() = 1 Тогда
			Значение = Перечисление.ЗначенияАтрибутовПроводок.ЗначениеПоИдентификатору(ВидЗначения);
			Если Список.НайтиЗначение(Значение) = 0 Тогда
				Список.ДобавитьЗначение(Значение, Строка(Значение));
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеВСписок()

//******************************************************************************
// СформироватьСписокПеречисленийПоВиду(ВидОбъекта)
//
// Параметры:
//  ВидОбъекта - строка, вид объекта по которому формируется список .
//
// Возвращаемое значение:
//  Список доступных значений перечисления ЗначенияАтрибутовПроводок.
//
// Описание:
//  Фукнция формирует список значений перечисления ЗначенияАтрибутовПроводок.
//
Функция СформироватьСписокПеречисленийПоВиду(ВидОбъекта)
	
	Список = СоздатьОбъект("СписокЗначений");
	
	// Список можно сформировать только по определенным видам объектов.
	// Объектом может служить атрибут проводки "Сумма", "Количество", "Валюта", "ВалСумма",
	// а также аналитика счета только по справочникам предопределенного вида 
	// (см. вертикальные секции входящие в секцию "ВидыОбъектов" таблицы Таблица).
	Если (ВидОбъекта = "Сумма") 
	ИЛИ  (ВидОбъекта = "Количество") 
	ИЛИ  (ВидОбъекта = "Валюта") 
	ИЛИ  (ВидОбъекта = "ВалСумма") 
	ИЛИ  (ВидОбъекта = "Контрагенты") 
	ИЛИ  (ВидОбъекта = "Договоры") 
	ИЛИ  (ВидОбъекта = "Номенклатура") 
	ИЛИ  (ВидОбъекта = "БанковскиеСчета") 
	ИЛИ  (ВидОбъекта = "ФизЛица") 
	ИЛИ  (ВидОбъекта = "Склады") 
	ИЛИ  (ВидОбъекта = "ДвиженияДенежныхСредств") 
	ИЛИ  (ВидОбъекта = "СтавкиНДС") 
	ИЛИ  (ВидОбъекта = "СтавкиНП") 
	ИЛИ  (ВидОбъекта = "СтавкиНП")
	ИЛИ  (ВидОбъекта = "СчетД")
	ИЛИ  (ВидОбъекта = "СчетК")
	ИЛИ  (ВидОбъекта = "ОсновныеСредства")
	ИЛИ  (ВидОбъекта = "НематериальныеАктивы")
	ИЛИ  (ВидОбъекта = "Оборудование")
	ИЛИ  (ВидОбъекта = "ВнеоборотныеАктивы")
	ИЛИ  (ВидОбъекта = "СчетФактураПолученный")
	ИЛИ  (ВидОбъекта = "Таможня")
	ИЛИ  (ВидОбъекта = "ДоговорТаможниРуб")
	ИЛИ  (ВидОбъекта = "ДоговорТаможниВал")
	Тогда 
		
		Если Движение.Выбран() = 1 Тогда 
			Регистры     = Таб.ПолучитьСекцию(СокрЛП(Движение.ВидРегистра) + "|" + СокрЛП(ВидОбъекта));
			Для Индекс = 1 По Таб.ВысотаСекции(СокрЛП(Движение.ВидРегистра)) Цикл
				УстановитьЗначениеВСписок(СокрЛП(Регистры.Область(Индекс, 1).Текст), Список);
			КонецЦикла;
		КонецЕсли;
		
		Документы    = Таб.ПолучитьСекцию("Документы|ВидДокумента");
		ВидыЗначений = Таб.ПолучитьСекцию("Документы|" + СокрЛП(ВидОбъекта));
		
		Для Индекс = 1 По Таб.ВысотаСекции("Документы") Цикл
			Если СокрЛП(Документы.Область(Индекс, 1).Текст) = СокрЛП(Владелец.ВидДокумента) Тогда
				УстановитьЗначениеВСписок(СокрЛП(ВидыЗначений.Область(Индекс, 1).Текст), Список);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Список;
	
КонецФункции // СформироватьСписокПеречисленийПоВиду()

//******************************************************************************
// ПроверитьЗначениеАтрибута(Реквизит, ВидОбъекта)
//
// Параметры:
//  Реквизит   - строка, идентификатор реквизита.
//  ВидОбъекта - строка, вид объекта по которому формируется список.
//  Проверять  - число, 1 - проверять на входимость, 0 - не проверять.
//
// Описание:
//  Процедура проверяет значение атрибута (реквизита) проводки на возможные значения.
//
Процедура ПроверитьЗначениеАтрибута(Реквизит, ВидОбъекта = "", Проверять = 1)
	
	Если Проверять = 1 Тогда
		ВидОбъекта = ?(ПустаяСтрока(ВидОбъекта) = 1, Реквизит, ВидОбъекта);
	
		Список = СформироватьСписокПеречисленийПоВиду(ВидОбъекта);
		Если Список.НайтиЗначение(ПолучитьАтрибут(Реквизит)) = 0 Тогда
			УстановитьАтрибут(Реквизит, ПолучитьПустоеЗначение("Перечисление.ЗначенияАтрибутовПроводок"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗначениеАтрибута()

//******************************************************************************
// ПолучитьВидЗначения(Значение)
//
// Параметры:
//  Значение - неопределенный, значение вид (идентификатор) которого нужно определить.
//
// Возвращаемое значение:
//  строка - вид справочника, перечисления, документа.
//  
// Описание:
//  Функция определяет вид справочника, перечисления, документа.
//
Функция ПолучитьВидЗначения(Значение)
	
	Если (ТипЗначенияСтр(Значение) = "Справочник") ИЛИ (ТипЗначенияСтр(Значение) = "Перечисление") ИЛИ (ТипЗначенияСтр(Значение) = "Документ") Тогда
		ВидЗначения = Значение.Вид();
	Иначе
		ВидЗначения = "";
	КонецЕсли;
	
	Возврат ВидЗначения;
	
КонецФункции // ПолучитьВидЗначения()

//******************************************************************************
// ДоступностьРеквизитов()
//
// Параметры:
//  Нет.
//
// Описание:
//  Процедура включает (отключает) доступность реквизитов "Валюта" и "ВалСумма" 
// для валютных счетов и доступность реквизита "Количество" для счетов у которых
// установлен признак "Количественный", и реквизитов типа "Субконто" при
// установенном определенных значениях в реквизите "Счет".
//
Процедура ДоступностьРеквизитов()
	
	Перем ВидСубконто;
	
	Валютный       = 0;
	Количественный = 0;
	
	Для Номер = 1 По 3 Цикл
		Если ТипЗначенияСтр(СчетД) = "Справочник" Тогда
			глПолучитьТипСубконто(СчетД, Номер, ВидСубконто);
			ДоступностьД = ВидСубконто.Выбран();
			Валютный       = Макс( Валютный, СчетД.Валютный);
			Количественный = Макс( Количественный, СчетД.Количественный);

		Иначе
			ДоступностьД = 0;
			Валютный       = 1;
			Количественный = 1;
			
		КонецЕсли;

		Форма.ПолучитьАтрибут("СубконтоД"          + Номер).Доступность(ДоступностьД);
		Форма.ПолучитьАтрибут("ЗаголовокСубконтоД" + Номер).Доступность(ДоступностьД);
		
		Если ТипЗначенияСтр(СчетК) = "Справочник" Тогда
			глПолучитьТипСубконто(СчетК, Номер, ВидСубконто);
			ДоступностьК = ВидСубконто.Выбран();
			Валютный       = Макс( Валютный, СчетК.Валютный);
			Количественный = Макс( Количественный, СчетК.Количественный);

		Иначе
			ДоступностьК = 0;
			Валютный       = 1;
			Количественный = 1;
			
		КонецЕсли;

		Форма.ПолучитьАтрибут("СубконтоК"          + Номер).Доступность(ДоступностьК);
		Форма.ПолучитьАтрибут("ЗаголовокСубконтоК" + Номер).Доступность(ДоступностьК);
		
	КонецЦикла;
	
	Форма.Валюта.Доступность(Валютный);
	Форма.ПодпВалюта.Доступность(Валютный);
	Форма.ВалСумма.Доступность(Валютный);
	Форма.ПодпВалСумма.Доступность(Валютный);
	
	Форма.Количество.Доступность(Количественный);
	Форма.ПодпКоличество.Доступность(Количественный);
	
КонецПроцедуры // ДоступностьРеквизитов()

//******************************************************************************
// ПолучитьВидСубконто(Счет, НомерСубконто)
//
// Параметры:
//  Счет          - Справочник.ПланСчетов, счет по которому нужно получить тип, вид субконто.
//  НомерСубконто - число, номер субконто тип и вид которого нужно вернуть.
//
// Возвращаемое значение:
//  строка, "Вид" - тип вид значения субконто.
//
// Описание:
//  Функция определяет вид сбуконто.
//
Функция ПолучитьВидСубконто(Счет, НомерСубконто)
	
	Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
		ТипВидСубконто = глПолучитьТипСубконто(Счет, НомерСубконто);
		Поз = Найти(ТипВидСубконто, ".");
	
		Если Поз > 0 Тогда
			ВидСубк = Сред(ТипВидСубконто, Поз + 1);
		Иначе
			ВидСубк = "";
		КонецЕсли;
		
	Иначе
		ВидСубк = "";   
		
	КонецЕсли;
	
	Возврат СокрЛП(ВидСубк);
	
КонецФункции // ПолучитьВидСубконто() 

//******************************************************************************
// ПроверитьЗначениеАналитики(Счет, НомерСубконто, Реквизит)
//
// Параметры:
//  Счет          - Справочник.ПланСчетов, счет по которому нужно установить тип аналитики.
//  НомерСубконто - число, номер субконто тип и вид которого нужно вернуть.
//  Реквизит      - строка, идентификатор элемента диалога. 
//
// Описание:
//  Процедура назначает для реквизита тип значения, в соответствии с установленной
// аналитикой счета. 
//
Процедура ПроверитьЗначениеАналитики(Счет, НомерСубконто, Реквизит)
	
	Перем ВидСубконто;
	
	Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
		ТипВидСубконто = глПолучитьТипСубконто(Счет, НомерСубконто, ВидСубконто);
		глУстановитьТипВидРеквизита(Контекст, Реквизит, ТипВидСубконто);
		
	Иначе
		УстановитьАтрибут(Реквизит, ПолучитьПустоеЗначение());
		
	КонецЕсли;
			
КонецПроцедуры // ПроверитьЗначениеАналитики() 

//******************************************************************************
// УстановитьАналитикуСчета(Счет, ДебетКредит)
//
// Параметры:
//  Счет       - неопределенный, значение счета, по которому устанавливается 
//               необходимая аналитика.
// ДебетКредит - ???
//
// Описание:
//  Определяет заголовки, тип и доступность для редактирования аналитики по счету.
//
Процедура УстановитьАналитикуСчета(Счет, ДебетКредит)
	
	Для Номер = 1 По 3 Цикл
		
		ВидСубк  = ПолучитьВидСубконто(Счет, Номер);
		Список   = СформироватьСписокПеречисленийПоВиду(ВидСубк);
		Реквизит = "Субконто" + ДебетКредит + Номер;
		
		Если Список.РазмерСписка() > 0 Тогда
			ТекЗнач = ПолучитьАтрибут(Реквизит);
			ВидЗнач = ПолучитьВидЗначения(ТекЗнач);
			
			Если ВидЗнач = "ЗначенияАтрибутовПроводок" Тогда
				ПроверитьЗначениеАтрибута(Реквизит, ВидСубк, ТекЗнач.Выбран());
					
			ИначеЕсли (ПустаяСтрока(ВидЗнач) = 1) ИЛИ (ВидЗнач <> ВидСубк) Тогда
				НазначитьТип(Реквизит, "Перечисление.ЗначенияАтрибутовПроводок");
				
			КонецЕсли;
			
		Иначе
			ПроверитьЗначениеАналитики(Счет, Номер, Реквизит);
			
		КонецЕсли;
		
		Если ТипЗначенияСтр(Счет) = "Справочник" Тогда
			Форма.ПолучитьАтрибут("Заголовок" + Реквизит).Заголовок(глПредставлениеВидаСубконто(Счет, Номер));

		Иначе
			Форма.ПолучитьАтрибут("Заголовок" + Реквизит).Заголовок("");
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры // УстановитьАналитикуСчета()

//******************************************************************************
// ПриВыбореСчета(Счет)
//
// Параметры:
//  Счет - неопределенный, значение счета, по которому устанавливается 
//         необходимая аналитика, и определяется доступность атрибутов проводки.
//
// Вызывается из формул элементов диалога:
//  СчетД и СчетК.
//
// Описание:
//  Процедура осуществляет вызов процедур, контролирующих доступность аналитики и 
// атрибутов проводки.
//  При этом атрибуты проводки "ВалСумма", "Валюта" и "Количество" заполняются 
// в зависимости от соответствующих параметров счетов.
//
Процедура ПриВыбореСчета(Счет)
	
	УстановитьАналитикуСчета(Счет, Прав(Форма.АктивныйЭлемент(), 1));
	ДоступностьРеквизитов();
	
	ПроверитьЗначениеАтрибута("ВалСумма",   , Форма.ВалСумма.Доступность());
	ПроверитьЗначениеАтрибута("Валюта",     , Форма.Валюта.Доступность());
	ПроверитьЗначениеАтрибута("Количество", , Форма.Количество.Доступность());
	
КонецПроцедуры // ПриВыбореСчета()

//******************************************************************************
// ПриВыбореДвижения()
//
// Вызывается из формул элементов диалога:
//  Движение.
//
// Описание:
//  Процедура вызывается при изменении вида движения, при этом производится 
// контроль значений реквизитов типа "Счет" и "Субконто" и доступности реквизитов.
//
Процедура ПриВыбореДвижения()
	
	Если Движение.Выбран() = 1 Тогда
		Стр = Движение.Наименование+
		      " ("+?(Движение.ЗнакДвижения = "+", "приход", "расход")+"), "+
		      Движение.ВидСтатус+", "+Движение.КодОперации;
	Иначе
		Стр = "НЕ ВЫБРАНО ДВИЖЕНИЕ РЕГИСТРА!";
	КонецЕсли;
	
	Форма.ТекстДвижение.Заголовок(Стр);

	ПроверитьЗначениеАтрибута("Сумма");
	УстановитьАналитикуСчета(СчетД, "Д");
	УстановитьАналитикуСчета(СчетК, "К");
	ДоступностьРеквизитов();
	
КонецПроцедуры // ПриВыбореДвижения()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнДвижение.Доступность(0);
		Форма.кнОчиститьМетод.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОк");
	КонецЕсли;
	
	ПриВыбореДвижения();
	
	Форма.ИспользоватьСлой("Общий1, СчетД, СубконтоД, СчетК, СубконтоК, Общий2", 2);

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)
	
	Перем ВидСубк;
	
	Если Сред(Элемент, 1, 4) = "Счет" Тогда
		ТекЗнач = ПолучитьАтрибут(Элемент);
		Список  = СформироватьСписокПеречисленийПоВиду(Элемент);

		Если Список.РазмерСписка() > 0 Тогда
			
			Список.ДобавитьЗначение("Предопределенное значение");
			ВидЗнач = ПолучитьВидЗначения(ТекЗнач);
			
			Если ВидЗнач <> "ЗначенияАтрибутовПроводок" Тогда
				ТекЗнач = "Предопределенное значение";
			КонецЕсли;
			
			Если Список.ВыбратьЗначение(ТекЗнач, , , , 2) = 1 Тогда
				Если ТипЗначенияСтр(ТекЗнач) = "Перечисление" Тогда
					Если ВидЗнач <> "ЗначенияАтрибутовПроводок" Тогда
						НазначитьТип(Элемент, "Перечисление.ЗначенияАтрибутовПроводок")
					КонецЕсли;
					УстановитьАтрибут(Элемент, ТекЗнач);
					ПриВыбореСчета(Элемент);

					ФлагПродолжения = 0;
					
				Иначе
					НазначитьТип(Элемент, "Справочник.ПланСчетов");
					
				КонецЕсли;
				
			Иначе
				ФлагПродолжения = 0;
				
			КонецЕсли;

		Иначе
			НазначитьТип(Элемент, "Справочник.ПланСчетов");
			
		КонецЕсли;

	ИначеЕсли Сред(Элемент, 1, 8) = "Субконто" Тогда
		
		ТекЗнач = ПолучитьАтрибут(Элемент);
		Номер   = Число(Прав(Элемент, 1));
		Счет    = ПолучитьАтрибут("Счет" + Сред(Элемент, 9, 1));
		ВидСубк = ПолучитьВидСубконто(Счет, Номер);
		
		Список  = СформироватьСписокПеречисленийПоВиду(ВидСубк);
		Если Список.РазмерСписка() > 0 Тогда
			
			Список.ДобавитьЗначение("Предопределенное значение");
			ВидЗнач = ПолучитьВидЗначения(ТекЗнач);
			
			Если ВидЗнач <> "ЗначенияАтрибутовПроводок" Тогда
				ТекЗнач = "Предопределенное значение";
			КонецЕсли;
			
			Если Список.ВыбратьЗначение(ТекЗнач, , , , 2) = 1 Тогда
				Если ТипЗначенияСтр(ТекЗнач) = "Перечисление" Тогда
					Если ВидЗнач <> "ЗначенияАтрибутовПроводок" Тогда
						НазначитьТип(Элемент, "Перечисление.ЗначенияАтрибутовПроводок")
					КонецЕсли;
					УстановитьАтрибут(Элемент, ТекЗнач);
					ФлагПродолжения = 0;
					
				ИначеЕсли (ВидЗнач = "ЗначенияАтрибутовПроводок") ИЛИ (ПустаяСтрока(ВидЗнач) = 1) Тогда
					ПроверитьЗначениеАналитики(Счет, Номер, Элемент);
					
				КонецЕсли;
				
			Иначе
				ФлагПродолжения = 0;
				
			КонецЕсли;
			
		Иначе
			ПроверитьЗначениеАналитики(Счет, Номер, Элемент);
			
		КонецЕсли;
		
	ИначеЕсли (Элемент = "Сумма") ИЛИ (Элемент = "ВалСумма") ИЛИ (Элемент = "Количество") ИЛИ (Элемент = "Валюта") Тогда 
		ТекЗнач = ПолучитьАтрибут(Элемент);
		Список  = СформироватьСписокПеречисленийПоВиду(Элемент);
		Если Список.ВыбратьЗначение(ТекЗнач, , , , 2) = 1 Тогда
			УстановитьАтрибут(Элемент, ТекЗнач);
		КонецЕсли;
		ФлагПродолжения = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПодбора(ЗначениеПодбора)
	
	Если ЗначениеПодбора.Владелец = Владелец Тогда
		Движение = ЗначениеПодбора;
		ПриВыбореДвижения();
		
	Иначе
		Предупреждение("Следует выбрать движение регистра по хоз. операции """+Владелец.Наименование+"""!", 60);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(Значение, Элемент, ФлагПродолжения)
	
	Если Сред(Элемент, 1, 8) = "Субконто" Тогда
		УстановитьАтрибут(Элемент, Значение);
		УстановитьАналитикуСчета(ПолучитьАтрибут("Счет" + Сред(Элемент, 9, 1)), Сред(Элемент, 9, 1));
		ФлагПродолжения = 0;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()
	
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("СубконтоД, СубконтоК", 1);
		Форма.ИспользоватьСлой("Суммы", 0);
	Иначе
		Форма.ИспользоватьСлой("СубконтоД, СубконтоК", 0);
		Форма.ИспользоватьСлой("Суммы", 1);
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	// проверка заполнения обязательных полей
	Если ПустоеЗначение(Наименование) = 1 Тогда
	    Предупреждение("Не заполнено поле ""Содержание""!", 60);
		Активизировать("Наименование");
	    СтатусВозврата(0);
	    Возврат;
	
	ИначеЕсли Движение.Выбран() = 0 Тогда
		Предупреждение("Не заполнено поле ""Движение регистра""!", 60);
		Активизировать("Движение");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
		
	//Если ЗабалансовыйД <> ЗабалансовыйК Тогда
	//	Если ВыбранД = 0 Тогда
	//		Предупреждение("Не заполнено поле ""Счет дебета""!", 60);
	//		Активизировать("СчетД");
	//		
	//	ИначеЕсли ВыбранК = 0 Тогда
	//		Предупреждение("Не заполнено поле ""Счет кредита""!", 60);
	//		Активизировать("СчетК");
	//		
	//	Иначе
	//		Предупреждение("Корреспондируют забалансовый и не забалансовый счета!", 60);
	//	КонецЕсли;
	//	
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	
	Если ПустаяСтрока(ТипЗначенияСтр(СчетД)) = 1 Тогда
		НазначитьТип(СчетД, "Справочник.ПланСчетов");
	КонецЕсли;
		
	Если ПустаяСтрока(ТипЗначенияСтр(СчетК)) = 1 Тогда
		НазначитьТип(СчетК, "Справочник.ПланСчетов");
	КонецЕсли;
		
	Если (Форма.ВалСумма.Доступность() = 0) И (ВалСумма.Выбран() = 1) Тогда
		ВалСумма = "";
	КонецЕсли;
	
	Если (Форма.Валюта.Доступность() = 0) И (Валюта.Выбран() = 1) Тогда
		Валюта = "";
	КонецЕсли;
	
	Если (Форма.Количество.Доступность() = 0) И (Количество.Выбран() = 1) Тогда
		Количество = "";
	КонецЕсли;
	
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение("Счета и аналитика");
Форма.Закладки.ДобавитьЗначение("Сумма, количество, условия");

Таб = СоздатьОбъект("Таблица");
Таб.ИсходнаяТаблица("Таблица");