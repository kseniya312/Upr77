////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем НашДолг, ВалютаДоговора, ТипЦен, ГлубинаКредита, ВеличинаКредита, Скидка;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
//	ПолучитьДолг(Дог)
//
//	Параметры:
//
//	Возвращаемое значение:
//		число, долг клиента или наш долг по договору.
//	Описание:
//		функция расчитывает из значений остатков регистров сумму взаиморасчетов
//		с клиентом. Если полученная сумма - положительное число, то клиент должем
//		нам, если отрицательное, то мы должны клиенту

Функция ПолучитьДолг(Дог)
	                            
	Если ПустоеЗначение(Дог)=1 Тогда
	    Возврат "";
	ИначеЕсли Фирма.Выбран()=0 Тогда
		Возврат "Фирма ???";
	Иначе
		ТекДолг = - глТекущийДолг(Фирма, Дог, "все");
		Возврат СокрЛ(глФРМ(ТекДолг, Дог.ВалютаВзаиморасчетов));	
	КонецЕсли;
	    
КонецФункции // ПолучитьДолг()

//******************************************************************************
// От0до9(Числ)
//
// Параметры:
//  Числ - число в диапазоне от 0 до 9 (включая границы диапазона)
//
// Возвращаемое значение:
//  строка, 
//  " день" - если пареметр = 1
//  " дня"  - если 2 <= пареметр <= 4
//  " днtq" - если пареметр > 5
//
// Описание:
//  функция возвращает слово "день" в нужном склонении в зависимости от 
//  переданного параметра.
//
Функция От0до9(Числ)
	Перем Рез;
	
	Если Числ = 1 Тогда
		Рез = " день";
	ИначеЕсли (Числ > 1) и (Числ < 5) Тогда
		Рез = " дня";
	Иначе
		// 0 или > 4
		Рез = " дней";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // От0до9

//******************************************************************************
// СтрокаСрокКредита()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  строку
//  
// Описание:
//  формирует и возвращает строку с информацией о глубине кредита с словом "день"
//  в правильном склонении.
//
Функция СтрокаСрокКредита()
	Перем Дни, КолвоДней;
	
	КолвоДней = Число(ГлубинаКредита);
	
	Если КолвоДней < 10 Тогда
		// меньше 10
		Дни = От0до9(КолвоДней);
	Иначе
		ДваРазряда = КолвоДней % 100;
		
		Если Цел(ДваРазряда / 10) = 1 Тогда
			// от 10 до 19
			Дни = " дней";
		Иначе
			Дни = От0до9(ДваРазряда % 10);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "" + КолвоДней + Дни;
	
КонецФункции // СтрокаСрокКредита()

//******************************************************************************
// ОбновитьЗначенияРекв()
//
// Параметры:
//  Нет. 
//
// Возвращаемое значение:
//  Пустая строка
//
// Описание:
//  Формирует информационные статики, если текущий элемент выбран и текущий 
//  элемент - это не группа.
//
Функция ОбновитьЗначенияРекв()
	
	ТекДоговор = ТекущийЭлемент();
	
	Если ПустоеЗначение(ТекДоговор) = 0 Тогда
		
		Если ТекДоговор.ЭтоГруппа() = 0 Тогда	
			ТекЗнач = ПолучитьДолг(ТекДоговор);
            Форма.ТекстНашДолг.Заголовок(ТекЗнач);
			
			ТекЗнач = ТекДоговор.ВалютаВзаиморасчетов;
            Форма.ТекстВалютаДоговора.Заголовок(СокрЛП(ТекЗнач));
			
			ТекЗнач = ТекДоговор.ГлубинаКредита;
            Форма.ТекстСрокКредита.Заголовок(СокрЛП(ТекЗнач));
			
			ТекЗнач = ТекДоговор.СуммаКредита;
            Форма.ТекстВеличинаКредита.Заголовок(СокрЛП(глФРМ(ТекЗнач)));
			
			ТекЗнач = ТекДоговор.ТипЦен;
            Форма.ТекстТипЦен.Заголовок(СокрЛП(ТекЗнач));
			
			ТекЗнач = ТекДоговор.Скидка;
            Форма.ТекстСкидка.Заголовок(СокрЛП(ТекЗнач));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ОбновитьЗначенияРекв()

//******************************************************************************
// ПоказатьИтоги()
//
// Параметры:
// 	нет.
// Возвращаемое значение:
//	нет.
// Описание:
//  Формирует отчет по взаиморасчетам с фильтом по текущему договору.
//
Процедура ПоказатьИтоги()
	
 	Если ПустоеЗначение(ТекущийЭлемент()) = 1 Тогда
		Предупреждение("Не выбран договор", 60);
	Иначе                                        
		Группировки = СоздатьОбъект("СписокЗначений");
		
		Группировки.ДобавитьЗначение("Фирма",        "Фирма");
		Группировки.ДобавитьЗначение("Контрагент",   "Контрагент");
		Группировки.ДобавитьЗначение("СвойствоКонтр","Свойство контрагента");
		Группировки.ДобавитьЗначение("Договор",      "Договор");
		Группировки.ДобавитьЗначение("ВидДолга",     "Вид долга (бух. счет)");
		Группировки.ДобавитьЗначение("СтавкаНП",     "Ставка НП");
		Группировки.ДобавитьЗначение("КредДокумент", "Кредитный документ");
		Группировки.ДобавитьЗначение("Документ",     "Документы движения");
		
		Группировки.Пометка(1, 1);              
		Группировки.Пометка(4, 1);
		Группировки.Пометка(8, 1);
		
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет", "ВедомостьПоКонтрагентам");
		
		// все настройки помещаем в список
		ВыбДатаКонца  = Мин(РабочаяДата(),ПолучитьДатуТА());
		ВыбДатаНачала = Мин(глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов"),ВыбДатаКонца);
		ВыбДатаНачала = ?(ПустоеЗначение(ВыбДатаНачала) = 1,ВыбДатаКонца,ВыбДатаНачала);
		
		Расшифровка.Установить("ДатаНачала", 	ВыбДатаНачала);
		Расшифровка.Установить("ДатаКонца", 	ВыбДатаКонца);
		Расшифровка.Установить("ВыбРазделитель1","");
		Расшифровка.Установить("ВыбРазделитель2","");
		Расшифровка.Установить("ВыбРазделитель3","");
		Расшифровка.Установить("ВидРазделителя",  1);
		
		Расшифровка.Установить("ВыбКонтрагент", ТекущийЭлемент().Владелец);
		Расшифровка.Установить("ВыбДоговор", 	ТекущийЭлемент());
		Расшифровка.Установить("ПоОперациям", 	0);
		Расшифровка.Установить("ВыбВидВалюты", 	1);
		Расшифровка.Установить("СписокВидовОтчетов",3);
		
		Расшифровка.Установить("Группировки",	Группировки);       
		            
		глОбработкаРасшифровки(Расшифровка,"","");
	КонецЕсли;
	
КонецПроцедуры // ПоказатьИтоги()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		сообщить("Вы не можете открывать данный элемент!");
		СтатусВозврата(0);
		форма.Закрыть(0);
		Возврат;         
	КонецЕсли;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Справочник" Тогда
		Если (Форма.Параметр.Вид() = "Контрагенты") И 
		     (Форма.Параметр.Выбран() = 1) И (Форма.Параметр.ЭтоГруппа() = 0) Тогда
			 	
			ИспользоватьВладельца(Форма.Параметр);
			ИерархическийСписок(1, 1);
		КонецЕсли;
	КонецЕсли;       
	
	Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Справочник" Тогда
		Если (Форма.Параметр.Вид() = "Контрагенты") И 
		     (Форма.Параметр.Выбран() = 1) И (Форма.Параметр.ЭтоГруппа() = 0) Тогда
			 	
			ИспользоватьВладельца(Форма.Параметр);
			ИерархическийСписок(1, 1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореСтроки()
	
	// Форма может быть открыта для выбора из процедур ПриНачалеВыбораЗначения()
	// в модальном режиме. В этом случае результат выбора передается передается
	// через параметр формы.
	
	Форма.Параметр = ТекущийЭлемент();
	
КонецПроцедуры // ПриВыбореСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
