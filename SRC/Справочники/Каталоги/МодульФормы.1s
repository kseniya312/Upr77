////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем	XML_Документ;	//	Загруженный документ с каталогом при загрузке шапки каталога

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//          

//******************************************************************************
// ЗагрузитьБанк(Эл)
//		
// Параметры:
//	Эл - XML-элемент "Банк"
//		
// Возвращаемое значение:
// 	Элемент из Справочника "Банки"
//		
// Описание
//	Ищем банк по коду (БИК), если не находим , то создаем новый
//		
Функция ЗагрузитьБанк(Эл)
	
	Если ПустоеЗначение(Эл) = 1 Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;

	СтрНаименование	=	Эл.ПолучитьАтрибут("Наименование");
	Местонахождение	=	Эл.ПолучитьАтрибут("Местонахождение");
	КоррСчет		=	Эл.ПолучитьАтрибут("НомерСчета");
	Адрес			=	Эл.ПолучитьАтрибут("Адрес");
	Телефоны		=	Эл.ПолучитьАтрибут("Телефон");
	БИК				=	СокрЛП(Эл.ПолучитьАтрибут("БИК"));
	                                                
	СпрБанки		= СоздатьОбъект("Справочник.Банки");
	
    Если СпрБанки.НайтиПоКоду(БИК, 0) = 0 Тогда
		СпрБанки.Новый();
		СпрБанки.Код				=	БИК;
		СпрБанки.Наименование		=	СтрНаименование;
		СпрБанки.Местонахождение	=	Местонахождение;
		СпрБанки.КоррСчет			=	КоррСчет;
		СпрБанки.Адрес				=	Адрес;
		СпрБанки.Телефоны			=	Телефоны;
		СпрБанки.Записать();
	КонецЕсли;
	
	Возврат СпрБанки.ТекущийЭлемент();
	
КонецФункции		//	ЗагрузитьБанк()
  
//******************************************************************************
// ЗагрузитьРасчетныйСчет(Эл, ЮрЛицо)
//		
// Параметры:
//	Эл				-	XML-элемент "РасчетныйСчет"
//	ЮрЛицо			-	элемент справочника "ЮрЛица"
//		
// Возвращаемое значение:
// 	Элемент из Справочника "Расчетныесчета" или "БанковскиеСчета"
//		
// Описание
//	Ищем Счет по номеру, если не находим , то создаем новый
//		
Функция ЗагрузитьРасчетныйСчет(Эл, ЮрЛицо)
	
	Если ПустоеЗначение(Эл) = 1 Тогда Возврат("") КонецЕсли;

	СпрРасчСчетов = СоздатьОбъект("Справочник.БанковскиеСчета");

    НомерСчета			= Эл.ПолучитьАтрибут("НомерСчета");
    Банк				= Эл.ПолучитьАтрибут("Банк");
	БанкКорреспондент	= Эл.ПолучитьАтрибут("БанкКорреспондент");
	                                         
	Если СпрРасчСчетов.НайтиПоРеквизиту("НомерСчета", НомерСчета, 0) = 0 Тогда
		ЭлБанкОрганизации = XML_Документ.ВыбратьУзел("//Банк[@Идентификатор = """ + Банк + """]");
		ЭлБанкДляРасчетов = XML_Документ.ВыбратьУзел("//Банк[@Идентификатор = """ + БанкКорреспондент + """]");
		
		СпрРасчСчетов.Новый();
		СпрРасчСчетов.ЮрФизЛицо			=	ЮрЛицо;
		СпрРасчСчетов.Наименование		=	"Новый счет";
		СпрРасчСчетов.НомерСчета		=	НомерСчета;
		СпрРасчСчетов.Банк				=	ЗагрузитьБанк(ЭлБанкОрганизации);
		СпрРасчСчетов.БанкДляРасчетов	=	ЗагрузитьБанк(ЭлБанкДляРасчетов);
		СпрРасчСчетов.Записать();
	КонецЕсли;
	
	Возврат СпрРасчСчетов.ТекущийЭлемент();
	
КонецФункции		//	ЗагрузитьРасчетныйСчет()

//******************************************************************************
// ЗагрузитьКонтрагента(ИдКонтрагента)
//		
// Параметры:
//	ИдКонтрагента - идентификатор контрагента
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Ищем Контрагента в справочнике по реквизиту "Идентификатор", если не находим, то создаем новый
//		
Процедура ЗагрузитьКонтрагента(ИдКонтрагента)
	
	Если ПустоеЗначение(ИдКонтрагента) = 1	Тогда Предупреждение("У контрагента не заполнен идентификатор!", 60); Возврат; КонецЕсли;

	СпрКонтрагентов = СоздатьОбъект("Справочник.Контрагенты");
	Если СпрКонтрагентов.НайтиПоРеквизиту("Идентификатор", ИдКонтрагента, 1) = 1 Тогда
		
		ВладелецКаталога = СпрКонтрагентов.ТекущийЭлемент();
		
	Иначе
		
		ЭлКонтрагент = XML_Документ.ВыбратьУзел("//Контрагент[@Идентификатор = """ + ИдКонтрагента + """]");
		
		Если ПустоеЗначение(ЭлКонтрагент) = 1 Тогда Предупреждение("Контрагент не найден!", 60); Возврат; КонецЕсли;
		
		СтрНаименование	=	ЭлКонтрагент.ПолучитьАтрибут("ОтображаемоеНаименование");
		
		Если Вопрос("Контрагент " + СтрНаименование + " не найден! Добавить данного контрагента в справочник?", 4, 60) <> 6 Тогда Возврат КонецЕсли;
		
		Сайт = ЭлКонтрагент.ПолучитьАтрибут("Сайт");
		Если ПустоеЗначение(Сайт) = 0 Тогда
			СпрСайтов = СоздатьОбъект("Справочник.Сайты");
			Если СпрСайтов.НайтиПоНаименованию(СокрЛП(Сайт), 0, 1) = 0 Тогда
				СпрСайтов.Новый();
				СпрСайтов.Наименование	= Сайт;
				СпрСайтов.АдресСайта	= Сайт;
				СпрСайтов.Записать();
			КонецЕсли;
			Сайт = СпрСайтов.ТекущийЭлемент();
		Иначе
			Сайт = ПолучитьПустоеЗначение("Справочник.Сайты");
		КонецЕсли;
		
		СпрЮрЛиц		=	СоздатьОбъект("Справочник.ЮрЛица");
		СпрДоговоров	=	СоздатьОбъект("Справочник.Договоры");
		
		СпрКонтрагентов.Новый();
		СпрЮрЛиц.Новый();
		СпрДоговоров.Новый();

		СпрКонтрагентов.Наименование		=	СтрНаименование;
		СпрКонтрагентов.Идентификатор       =	ЭлКонтрагент.ПолучитьАтрибут("Идентификатор");
		СпрКонтрагентов.Комментарий         =	ЭлКонтрагент.ПолучитьАтрибут("Комментарий");
		СпрКонтрагентов.Сайт                =	Сайт;
		СпрКонтрагентов.Записать();
		            
		СпрЮрЛиц.Наименование				=	СтрНаименование;
		СпрЮрЛиц.ПолнНаименование			=	ЭлКонтрагент.ПолучитьАтрибут("Наименование");
		СпрЮрЛиц.ФактАдрес					=	ЭлКонтрагент.ПолучитьАтрибут("Адрес");
		СпрЮрЛиц.ЮрАдрес				    =	ЭлКонтрагент.ПолучитьАтрибут("ЮридическийАдрес");
		СпрЮрЛиц.Комментарий         		=	ЭлКонтрагент.ПолучитьАтрибут("Комментарий");
		                                                                         
		
		СпрДоговоров.Владелец				=	СпрКонтрагентов.ТекущийЭлемент();
		СпрДоговоров.Наименование			=	"Основной договор";
		СпрДоговоров.ВалютаВзаиморасчетов	=	глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");
		Если ПустоеЗначение(СпрДоговоров.ВалютаВзаиморасчетов) = 1 Тогда
			СпрДоговоров.ВалютаВзаиморасчетов	= глРубли;
		КонецЕсли;
		
		
		Попытка СпрЮрЛиц.Телефоны			=	ЭлКонтрагент.ВыбратьУзел("Контакт/Телефон").Значение	Исключение КонецПопытки;
		Попытка СпрКонтрагентов.ЭлПочта		=	ЭлКонтрагент.ВыбратьУзел("Контакт/Почта").Значение 		Исключение КонецПопытки;
		
			
		СпрЮрЛиц.Записать();
		СпрДоговоров.Записать();
		
		СпрКонтрагентов.ЮрФизЛицо			=	СпрЮрЛиц.ТекущийЭлемент();
		СпрКонтрагентов.ОсновнойДоговор		=	СпрДоговоров.ТекущийЭлемент();
		СпрКонтрагентов.Записать();
		
		ВладелецКаталога					=	СпрКонтрагентов.ТекущийЭлемент();
		
		ЭлРасчСчет	= ЭлКонтрагент.ВыбратьУзел("РасчетныйСчет");
		
		ЗагрузитьРасчетныйСчет(ЭлРасчСчет, СпрКонтрагентов.ЮрФизЛицо);
	
	КонецЕсли;

КонецПроцедуры		//	ЗагрузитьКонтрагента()

//********************************************************************************
//	ЗагрузитьСвойстваКаталога(ЭлКаталог)
//
//	Параметры:
//		ЭлКаталог - XML-элемент "Каталог"
//		
//	Возвращаемое значение:
//		нет.
//	Описание:
//		Запрашивает о необходимости загрузки видов свойств,
//		используемых в каталоге, и вариантах их значений.
//		В случае положительного ответа, загружает виды свойств
//		и возможные значения в соответствующие справочники
//
Процедура ЗагрузитьСвойстваКаталога(ЭлКаталог)
                                             
	Выборка			=	ЭлКаталог.ВыбратьУзлы("Свойство");
	КолвоСвойств	=	Выборка.КоличествоУзлов();
	
	Если КолвоСвойств = 0 Тогда Возврат КонецЕсли;
		
	СписокЗначений	=	СоздатьОбъект("СписокЗначений");
	СписокЗначений.ДобавитьЗначение("НеЗагружать",			"Не загружать");
	СписокЗначений.ДобавитьЗначение("Все",					"Загрузить все виды и варианты значений свойств");
	СписокЗначений.ДобавитьЗначение("ТолькоОбязательные",	"Загрузить только обязательные свойства для всех позиций");
	
	Зн  = "";
	Если СписокЗначений.ВыбратьЗначение(Зн, "Загрузка видов и вариантов значений свойств", , , 0) = 0 Тогда Возврат КонецЕсли;
	Если Зн = "НеЗагружать" Тогда Возврат КонецЕсли;
	     
	ГруппаВидовСвойств	=	СоздатьОбъект("Справочник.ВидыСвойств");
	ВидСвойства			=	СоздатьОбъект("Справочник.ВидыСвойств");
	ЗначениеСвойства	=	СоздатьОбъект("Справочник.ЗначенияСвойств");
	
	Если ГруппаВидовСвойств.НайтиПоНаименованию("Свойства каталога: '" + Наименование + "'", 1, 1) = 0 Тогда
		ГруппаВидовСвойств.НоваяГруппа();
		ГруппаВидовСвойств.Наименование	=	"Свойства каталога: '" + Наименование + "'";
		ГруппаВидовСвойств.Каталог		=	ТекущийЭлемент();
		ГруппаВидовСвойств.Записать();
	КонецЕсли;
	
	Для Сч = 0 По КолвоСвойств - 1 Цикл
		ЭлСвойство					=	Выборка.ПолучитьУзел(Сч);
		НаименованиеВидаСвойства	=	ЭлСвойство.ПолучитьАтрибут("Наименование");
		ИдентификаторСвойства		=	ЭлСвойство.ПолучитьАтрибут("Идентификатор");;
		                  
		Если Зн = "ТолькоОбязательные" Тогда
			Узел_СсылкаНаСвойство	=	ЭлКаталог.ВыбратьУзел("СсылкаНаСвойство[@ИдентификаторСвойства = """ + ИдентификаторСвойства + """]");
			Если ПустоеЗначение(Узел_СсылкаНаСвойство) = 1 Тогда Продолжить КонецЕсли;
			Если Число(Узел_СсылкаНаСвойство.ПолучитьАтрибут("Обязательно")) <> 1 Тогда Продолжить КонецЕсли;
		КонецЕсли;
		
		СвойствоУжеДобавлено = 0;
		ВидСвойства.ВыбратьЭлементыПоРеквизиту("Каталог", ТекущийЭлемент(), 0, 0);
		Пока ВидСвойства.ПолучитьЭлемент() = 1 Цикл
			Если СокрЛП(ВидСвойства.Наименование) = НаименованиеВидаСвойства Тогда
				СвойствоУжеДобавлено	=	1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СвойствоУжеДобавлено = 0 Тогда
			ВидСвойства.Новый();
			ВидСвойства.Родитель				=	ГруппаВидовСвойств.ТекущийЭлемент();
			ВидСвойства.Каталог					=	ТекущийЭлемент();
			ВидСвойства.Наименование			=	НаименованиеВидаСвойства;
			ВидСвойства.ИдентификаторВКаталоге	=	ИдентификаторСвойства;
			ВидСвойства.Множественность			=	ЭлСвойство.ПолучитьАтрибут("Множественность");
			ВидСвойства.Записать();
		КонецЕсли;
		            
		ЗначениеСвойства.ИспользоватьВладельца(ВидСвойства.ТекущийЭлемент());
		ВыборкаЗначений	=	ЭлСвойство.ВыбратьУзлы("ВариантСвойства");
		Для СчЗначенийСвойства = 0 По ВыборкаЗначений.КоличествоУзлов() - 1 Цикл
			ЭлВариантСвойства				=	ВыборкаЗначений.ПолучитьУзел(СчЗначенийСвойства);
			НаименованиеЗначенияСвойства	=	ЭлВариантСвойства.ПолучитьАтрибут("Наименование");
			Если ЗначениеСвойства.НайтиПоНаименованию(НаименованиеЗначенияСвойства, 1, 1) = 0 Тогда
				ЗначениеСвойства.Новый();
				ЗначениеСвойства.Наименование	=	НаименованиеЗначенияСвойства;
				ЗначениеСвойства.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры		//	ЗагрузитьСвойстваКаталога()

//********************************************************************************
//	ЗагрузитьКаталог()
//
//	Параметры:
//		Режим - режим загрузки каталога. Если значение = "Шапка", то загружается 
//		только шапка каталога. Значение по умодчанию - "".
//		
//	Возвращаемое значение:
//		нет.
//	Описание:
//		Устанавливает реквизиты формы (Наименование, Идентификатор, ВладелецКаталога,
//		ЕдиницаПоУмолчанию,	Комментарий). Причем если каталог пришел от контрагента,
//		которого нет в базе, то он автоматически добавляется.
//
Процедура ЗагрузитьШапкуКаталога()
	    
	ПолноеИмяФайла	=	"";
	
	Если		ПустоеЗначение(XMLФайл) = 1		Тогда	//	предложим выбрать в диалоге
	ИначеЕсли	ФС.СуществуетФайл(XMLФайл) = 1	Тогда 
		ПолноеИмяФайла	=	XMLФайл;
	КонецЕсли;
	          
	Если ПустоеЗначение(ПолноеИмяФайла) = 1 Тогда
		Каталог		=	"";
		ИмяФайла	=	XMLФайл;
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл с каталогом", "*.xml|*.xml", , ) = 0 Тогда Возврат КонецЕсли;
		ПолноеИмяФайла	=	Каталог + ИмяФайла;
	КонецЕсли;


	Если ФС.СуществуетФайл(ПолноеИмяФайла) = 0 Тогда 
		Предупреждение("Указанный файл не существует!");
		Возврат;
	КонецЕсли;
	
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
				Предупреждение("Компонента v7plus.dll не найдена!", 60);
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Анализатор		=	СоздатьОбъект("AddIn.XMLParser");
	XML_Документ	=	Анализатор.СоздатьДокумент();
	Попытка
		XML_Документ.Загрузить(ПолноеИмяФайла);
	Исключение
		Сообщить("Неудачная попытка загрузки xml-файла!");
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ЭлКаталогXML	=	XML_Документ.ВыбратьУзел("//Каталог");
	
	Если ПустоеЗначение(ЭлКаталогXML) = 1 Тогда
		Предупреждение("Указанный файл не содержит каталога!", 60);
		Возврат;
	КонецЕсли;

	
	ИдКаталога				=	СокрЛП(ЭлКаталогXML.ПолучитьАтрибут("Идентификатор"));
	ИдВладельцаКаталога		=	СокрЛП(ЭлКаталогXML.ПолучитьАтрибут("Владелец"));
	НаименованиеКаталога	=	СокрЛП(ЭлКаталогXML.ПолучитьАтрибут("Наименование"));
	ОписаниеКаталога		=	СокрЛП(ЭлКаталогXML.ПолучитьАтрибут("Описание"));
	ЕдиницаКаталога			=	СокрЛП(ЭлКаталогXML.ПолучитьАтрибут("Единица"));
    
	
	Если ПустоеЗначение(ВладелецКаталога) = 1 Тогда
		ЗагрузитьКонтрагента(ИдВладельцаКаталога);
	КонецЕсли;		
	
	Если ПустоеЗначение(ВладелецКаталога) = 1 Тогда Возврат КонецЕсли;
	     
	Если СокрЛП(Идентификатор) = "" Тогда
		Идентификатор = ИдКаталога;
		//Записать();			
	ИначеЕсли СокрЛП(Идентификатор) <> ИдКаталога Тогда
		Если Вопрос("Идентификаторы выбранного и загружаемого каталогов различны!
					|Изменить идентификатор выбранного каталога на загружаемый?", 4, 60)  = 6 Тогда 
			Идентификатор = ИдКаталога;
			//Записать();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	                                                   
	Если СокрЛП(ВладелецКаталога.Идентификатор) = "" Тогда
		Влад = СоздатьОбъект("Справочник." + ВладелецКаталога.Вид());
		Влад.НайтиЭлемент(ВладелецКаталога);
		Влад.Идентификатор = ИдВладельцаКаталога;
		Влад.Записать();
		ВладелецКаталога = Влад.ТекущийЭлемент();
		//Записать();			
	ИначеЕсли СокрЛП(ВладелецКаталога.Идентификатор) <> ИдВладельцаКаталога Тогда
		Если Вопрос("Идентификатор'ы владельцев выбранного и загружаемого каталогов различны!
					|Изменить идентификатор владельца выбранного каталога на загружаемый?", 4, 60)  = 6 Тогда
			Влад = СоздатьОбъект("Справочник." + ВладелецКаталога.Вид());
			Влад.НайтиЭлемент(ВладелецКаталога);
			Влад.Идентификатор = ИдВладельцаКаталога;
			Влад.Записать();
			ВладелецКаталога = Влад.ТекущийЭлемент();
			//Записать();
		Иначе
			Возврат;
		КонецЕсли;		
	КонецЕсли;
	
	
	Если ПустоеЗначение(Наименование) = 1 Тогда
		Наименование = НаименованиеКаталога;
		//Записать();			
	ИначеЕсли СокрЛП(Наименование) <> НаименованиеКаталога Тогда
		Если Вопрос("Изменить наименование выбранного каталога на загружаемое?", 4, 60)  = 6 Тогда
			Наименование = НаименованиеКаталога;
			//Записать();
		КонецЕсли;			
	КонецЕсли;
	
	
	Если ПустоеЗначение(Комментарий) = 1 Тогда
		Комментарий = ОписаниеКаталога;
		//Записать();
	ИначеЕсли СокрЛП(Комментарий) <> ОписаниеКаталога Тогда
		Если Вопрос("Изменить комментарий (описание) выбранного каталога на загружаемое?", 4, 60)  = 6 Тогда
			Комментарий = ОписаниеКаталога;
			//Записать();
		КонецЕсли;			
	КонецЕсли;
	
	Если ПустоеЗначение(ЕдиницаКаталога) = 0 Тогда
		СпрКлассЕдиниц = СоздатьОбъект("Справочник.ОКЕИ");
		Если СпрКлассЕдиниц.НайтиПоНаименованию(ЕдиницаКаталога, 0, 1) = 0 Тогда
			СпрКлассЕдиниц.Новый();
			СпрКлассЕдиниц.Код				=	ЕдиницаКаталога;
			СпрКлассЕдиниц.Наименование		=	ЕдиницаКаталога;
			СпрКлассЕдиниц.ПолнНаименование	=	ЕдиницаКаталога;
			СпрКлассЕдиниц.Записать();
		КонецЕсли; 
		ЕдиницаПоУмолчанию = СпрКлассЕдиниц.ТекущийЭлемент();
	КонецЕсли;
	
	Записать();
	
	ЗагрузитьСвойстваКаталога(ЭлКаталогXML);
	
КонецПроцедуры		//	ЗагрузитьШапкуКаталога()

//********************************************************************************
//	ОткрытьФайлДляПросмотра(ИмяФайла)
//
//	Параметры:
//		ИмяФайла - полный путь к файлу, который нужно просмотреть
//	Возвращаемое значение:
//		нет.
//	Описание:
//		Открывает файл, заданный параметром имя файла для просмотра средствами 
//		операционной системы
//
Процедура ОткрытьФайлДляПросмотра()
	
	Если ПустоеЗначение(XMLФайл) = 1 Тогда
		Предупреждение("Не задан XML-файл каталога!", 60);
	Иначе
		
		Если ФС.СуществуетФайл(XMLФайл) = 1 Тогда 
			ЗапуститьПриложение(XMLФайл);
		Иначе 
			Предупреждение("Файл с таким именем не существует!", 60);
		КонецЕсли;    
		
	КонецЕсли;
	
КонецПроцедуры // ОткрытьФайлДляПросмотра()

//******************************************************************************
// ОткрытьДляРедактирования()
//
// Параметры:
//	нет.
// Возвращаемое значение:
//	нет.
// Описание:
//	Открывает форму обработки для редактирования каталога.
//
Процедура ОткрытьДляРедактирования()
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(ТекущийЭлемент(), "Каталог");
	
	ОткрытьФорму("Обработка.XMLРаботаСКаталогом#", СписокПараметров);
	
КонецПроцедуры // ОткрытьДляРедактирования()
    
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового()
	
	СпособИдентификацииНоменклатуры = Перечисление.СпособИдентификацииНоменклатуры.Код;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	Если Форма.ТолькоПросмотр() = 1 Тогда
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнЗагрузкаШапки.Доступность(0);
		//Форма.кнЗагрузкаКаталога.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть")
	Иначе
		Форма.КнопкаПоУмолчанию("кнОК")
	КонецЕсли;
	
	Форма.ВладелецКаталога.НеИзменятьВид(1);
	Форма.ИспользоватьСлой("Основной", 2);
	
	Если ВладелецКаталога.Выбран() = 1 Тогда
		Если ВладелецКаталога.Вид() = "Фирмы" Тогда
			Форма.ИспользоватьСлой("СвойКаталог", 1);
			Форма.ИспользоватьСлой("ЧужойКаталог", 0);
		Иначе
			Форма.ИспользоватьСлой("СвойКаталог", 0);
			Форма.ИспользоватьСлой("ЧужойКаталог", 1);
		КонецЕсли;
	Иначе
		Форма.ИспользоватьСлой("СвойКаталог", 1);
		Форма.ИспользоватьСлой("ЧужойКаталог", 0);
	КонецЕсли;
	
КонецПроцедуры	// ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдЭлемента, ФлСтандарт)
	
	Если ИдЭлемента = "ВладелецКаталога" Тогда
		//ФлСтандарт = 0;
		Спис = СоздатьОбъект("СписокЗначений");
		Спис.ДобавитьЗначение("Владелец каталога - фирма");
		Спис.ДобавитьЗначение("Владелец каталога - контрагент");
		                                                        
		Зн  = "";
		Поз = "";
		
		Если Спис.ВыбратьЗначение(Зн, , Поз, , 1) = 0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		Если Поз = 1 Тогда			
			НазначитьВид(ВладелецКаталога, "Фирмы");
			Форма.ИспользоватьСлой("СвойКаталог", 1);
			Форма.ИспользоватьСлой("ЧужойКаталог", 0);
			
			Если ПустаяСтрока(СпособИдентификацииНоменклатуры) = 1 Тогда
				СпособИдентификацииНоменклатуры	=	Перечисление.СпособИдентификацииНоменклатуры.Код;
			КонецЕсли;
			
		Иначе
			НазначитьВид(ВладелецКаталога, "Контрагенты");
			Форма.ИспользоватьСлой("СвойКаталог", 0);
			Форма.ИспользоватьСлой("ЧужойКаталог", 1);
		КонецЕсли;
	
	ИначеЕсли ИдЭлемента = "XMLФайл" Тогда
		Каталог = ""; ИмяФайла = XMLФайл;
		
		Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", "*.xml|*.xml", , ) = 1 Тогда
		    XMLФайл = Каталог + ИмяФайла;
		КонецЕсли;
		
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры	// ПриНачалеВыбораЗначения()

//********************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 

	// проверка заполнения обязательных полей
	Если		ПустаяСтрока(Наименование) > 0 Тогда
		Предупреждение("Не заполнено поле ""Наименование""!", 60);
		Активизировать("Наименование");
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли	ПустаяСтрока(Идентификатор) > 0 Тогда
		Предупреждение("Не заполнено поле ""Идентификатор""!", 60);
		Активизировать("Идентификатор");
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли	ПустаяСтрока(ВладелецКаталога) > 0 Тогда
		Предупреждение("Не заполнено поле ""Владелец каталога""!", 60);
		Активизировать("ВладелецКаталога");
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли	ПустаяСтрока(ЕдиницаПоУмолчанию) > 0 Тогда
		Предупреждение("Не заполнено поле ""Единица по умолчанию""!", 60);
		Активизировать("ЕдиницаПоУмолчанию");
		СтатусВозврата(0);
		Возврат;
		
	ИначеЕсли	ПустаяСтрока(СпособИдентификацииНоменклатуры) > 0 Тогда
		СпособИдентификацииНоменклатуры = Перечисление.СпособИдентификацииНоменклатуры.Код
	КонецЕсли;
		
КонецПроцедуры // ПриЗаписи()

//****************************************************************************** 
// Предопределенная процедура
//
Процедура ПриЗакрытии()


	
КонецПроцедуры // ПриЗакрытии()

//****************************************************************************** 
