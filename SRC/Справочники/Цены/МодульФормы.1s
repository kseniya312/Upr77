////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СтараяВалюта, СтараяЕдиница;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ЕстьДубльЦены()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Найденный дубль, если нет дубля цены, то возвращается пустая строка
//
// Описание:
//  Функция проверяет есть ли у данного товара цена данного типа
//
Функция ЕстьДубльЦены() 
	
	ВыборкаЦен = СоздатьОбъект("Справочник.Цены");
	ВыборкаЦен.ИспользоватьВладельца(Владелец);
	ВыборкаЦен.ВыбратьЭлементы();
	
	Пока ВыборкаЦен.ПолучитьЭлемент() = 1 Цикл
		
		Если ВыборкаЦен.ТипЦен <> ТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выбран() = 0 Тогда
			
			// Новый элемент
			Возврат ВыборкаЦен.ТекущийЭлемент();
		Иначе           
			
			// Для сохраненного элемента проверить несовпадение типов цен
			// недостаточно, т.к. из выборки можно получить редактируемый элемент
			Если ТекущийЭлемент() <> ВыборкаЦен.ТекущийЭлемент() Тогда
				Возврат ВыборкаЦен.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ЕстьДубльЦены()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	глВвестиДатуПериодическихРеквизитов(Контекст, 1);
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория()
	
    глЗначенияПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПоКнопкеИстория()

//******************************************************************************
// ПересчетНалогов(СтараяЦена, ТипЦенБаза)
//
// Параметры: 
//  СтараяЦена - число, величина пересчитываемой цены 
//  ТипЦенБаза - элемент справочника ТипЦен, определяет текущие флаги включения налогов
//
// Возвращаемое значение:
//  Новое значение цены
//
// Описание:
//  Пересчитывает цены при изменении флагов включения налогов
//
Функция ПересчетНалогов(СтараяЦена, ТипЦенБаза)
	
	Цена           = СтараяЦена;
	ТекТМЦ         = Владелец;
	СтавкаНП       = ТекТМЦ.СтавкаНП.Ставка;
	СтавкаНДС      = ТекТМЦ.СтавкаНДС;
	ТипЦенЦены     = ТипЦен;
	
	ЦенаВклНПБаза  = ТипЦенБаза.ЦенаВклНП;
	ЦенаВклНДСБаза = ТипЦенБаза.ЦенаВклНДС;
	ЦенаВклНПЦена  = ТипЦенЦены.ЦенаВклНП;
	ЦенаВклНДСЦена = ТипЦенЦены.ЦенаВклНДС;
	
	Если   (ЦенаВклНПБаза  <> ЦенаВклНПЦена )
	ИЛИ (ЦенаВклНДСБаза <> ЦенаВклНДСЦена) Тогда
		
		Если ЦенаВклНПБаза = 1 Тогда
			Цена = Цена*100/(100 +СтавкаНП);
		КонецЕсли;
		
		Если ЦенаВклНДСБаза <> ЦенаВклНДСЦена Тогда
			Если ЦенаВклНДСБаза = 1 Тогда
				Цена = Цена - Цена*глВыделяемыйНДС(СтавкаНДС);
			Иначе
				Цена = Цена + Цена*глНачисляемыйНДС(СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если ЦенаВклНПЦена = 1 Тогда
			Цена = (Цена)*(100 +СтавкаНП)/100;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // ПересчетНалогов()

//******************************************************************************
// ПоКнопкеУстановить()
// 
// Параметры: 
//  Нет
//      
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул реквизитов диалога
//  по кнопке Установить
//
// Описание:
//  Формирует цену Номенклатуры на основе "УчетнойЦены" и наценки при нажатии
//  на кнопку "Цена"
//
Процедура ПоКнопкеУстановить()
	Перем БазовыйТипЦен;                          
	Перем ЦенаБазовая, ЕдБазовая, ВалБазовая;
	
	Если ТипЦен.Выбран() = 0 Тогда
		Предупреждение("Не выбран тип цены.",60);
		Возврат;
	КонецЕсли;
	
	// Проверим, задан ли базовый тип цен
	БазовыйТипЦен = ТипЦен.БазовыйТипЦен;
	Если ПустоеЗначение(БазовыйТипЦен) = 1 Тогда
		Предупреждение("Цены этого типа задаются только вручную.",60);
	Иначе
		
		// Найдем учетную цену
		ДатаЦены = ИспользоватьДату();
		Если глВернутьЦену(Владелец, БазовыйТипЦен, ДатаЦены, ЦенаБазовая, ЕдБазовая, ВалБазовая) = 0 Тогда
			Предупреждение("Для номенклатурной единицы """+
			                СокрЛП(Владелец) + """ не задана базовая цена",60);
		Иначе
			ВремЦена = ЦенаБазовая;				
			
			//Учетная цена может быть за другую единицу
			ВремЦена = ?(ПустоеЗначение(ЕдБазовая.Коэффициент) = 1,0,ВремЦена * Единица.Коэффициент / ЕдБазовая.Коэффициент);
			
			//Пересчитаем базовую цену в нужную валюту на рабочую дату
			ВремЦена = глПересчет(ВремЦена, ВалБазовая, ДатаЦены, Валюта, ДатаЦены);
			
			// Пересчитаем налоги цены
			ВремЦена = ПересчетНалогов(ВремЦена, БазовыйТипЦен);
			
			//Теперь наценим и округлим
			Цена = глОкруглить(ВремЦена * (100 + Процент) / 100, ТипЦен.ПорядокОкругления);
		    
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПоКнопкеУстановить()

//*****************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  реквизит "Валюта"
//
// Описание:
//  Вызывается при выборе валюты. Пересчитывает цену из "старой" в 
// "новую" валюту по курсу на рабочую дату.
//
Процедура ПриИзмененииВалюты()
	
	Если (ПустоеЗначение(СтараяВалюта) = 1) или (ПустоеЗначение(Валюта) = 1) или (Цена = 0) Тогда
		
		СтараяВалюта = Валюта;
		Возврат;
	КонецЕсли;
	
	Если (СтараяВалюта <> Валюта) Тогда // изменили валюту
		                    
		Если Вопрос("Изменилась валюта задания цены. Пересчитать цену?", "Да+Нет", 60) = "Да" Тогда
			
			Цена = глПересчет(Цена, СтараяВалюта, РабочаяДата(), Валюта, РабочаяДата());
			
			// Если выбран тип цены, то еще и округляем
			Если ТипЦен.Выбран() = 1 Тогда
				Цена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтараяВалюта = Валюта;
	
КонецПроцедуры // ПриИзмененииВалюты()

//******************************************************************************
// ПриИзмененииЕдиницы()
//
// Параметры:
//  Нет                 
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
// при изменении единицы
//
// Описание:
//  Вызывается при выборе единицы измерения. Пересчитывает цену в 
//  зависимости от коэффициента выбранной единицы
//
Процедура ПриИзмененииЕдиницы()

	// пересчитаем цену
	Если ПустоеЗначение(Единица) = 0 Тогда
		
		// единицу изменили
		Если ( СтараяЕдиница <> Единица)
		   И (ПустоеЗначение(СтараяЕдиница.Коэффициент) = 0) Тогда
			                    
			Если Вопрос("Изменилась единица задания цены. Пересчитать цену?", "Да+Нет", 60) = "Да" Тогда
				
				// пересчитывается цена, только если коэффициент не равен нулю
				Цена = Цена * Единица.Коэффициент / СтараяЕдиница.Коэффициент;
				
				// Если выбран тип цены, то еще и округляем
				Если ТипЦен.Выбран() = 1 Тогда
					Цена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтараяЕдиница = Единица;
	
КонецПроцедуры // ПриИзмененииЕдиницы()

//******************************************************************************
// УстановитьВидимостьНаценки()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет видимостью Наценки. Если цена расчитывается, то
//  Наценка видима, иначе невидима (в этом случае обнулим Наценку).
//
Процедура УстановитьВидимостьНаценки()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
		Если ПустоеЗначение(ТипЦен.БазовыйТипЦен) = 0 Тогда
		    Форма.Процент.Видимость(1);
			Форма.ТекстПроцент.Видимость(1);
		Иначе
		    Форма.Процент.Видимость(0);
		    Форма.ТекстПроцент.Видимость(0);
			Если ПустоеЗначение(Процент) = 0 Тогда
				Процент = 0;    
			КонецЕсли;
		КонецЕсли;
	Иначе
		// тип цен не задан, значит наценка не видна
	    Форма.Процент.Видимость(0);
	    Форма.ТекстПроцент.Видимость(0);
		Если ПустоеЗначение(Процент) = 0 Тогда
			Процент = 0;    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьНаценки()

//******************************************************************************
// ПриИзмененииТипаЦены()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ПриИзмененииТипаЦены()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
	    Если ПустоеЗначение(Валюта) = 1 Тогда
	        Валюта	= ТипЦен.Валюта;
			СтараяВалюта = Валюта;
		КонецЕсли;
		
		Если ПустоеЗначение(Процент) = 1 Тогда
		    Процент	= ТипЦен.Процент;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьНаценки();

КонецПроцедуры // ПриИзмененииТипаЦены()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(ПризнКопирования)

	Если  ПризнКопирования = 0 Тогда
		Единица = Владелец.ОсновнаяЕдиница;
	КонецЕсли;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	Перем ЕдиницыНоменклатуры;

	Если (глПользователь<>"Бояринова") или (глПользователь<>"Иванова") или (глПользователь<>"Администратор") Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	

    // Через параметр передается тип цены или дата показа цен
	Параметр = Форма.Параметр;
	Если ПустоеЗначение(Параметр) = 0 Тогда
		Если ТипЗначенияСтр(Параметр) = "Справочник" Тогда
			Если Параметр.Вид() = ТипЦен.Вид() Тогда
				Если ПустоеЗначение(ТипЦен) = 1  Тогда
				    ТипЦен = Параметр;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗначенияСтр(Параметр) = "Дата" Тогда	
			ИспользоватьДату(Параметр,1);
		КонецЕсли;
	КонецЕсли;
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
	// Системно не надо контролировать изменение периодических реквизитов.
	СохранениеПериодическихРеквизитов(0);

	Если Форма.ТолькоПросмотр() = 1 Тогда
	    
		// кнопки, которые могут изменить базу в режиме "только просмотр" недоступны
		Форма.кнЗаписать.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнУстановить.Доступность(0);
		
		Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
		
		Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	

	Если ТипЦен.Выбран() = 1 Тогда  
		
		// не новый элемент - сразу на цену встанем
		Активизировать("Цена");
	КонецЕсли;
	
	СтараяВалюта  = Валюта;
	СтараяЕдиница = Единица;
	
	УстановитьВидимостьНаценки();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	// Форме может быть передана дата просмотра и редактирования значений
	// периодических реквизитов, например, когда форма открыта из обработки
	// "ЗначенияПериодическихРеквизитов".
	глПолучитьДатуПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Перем Параметр;
	
	Если ИдентЭлемДиалога = "Единица" Тогда
		ФлагСтандОбр = 0;
		Параметр = Владелец.ТекущийЭлемент();
		ОткрытьФорму("Справочник.Единицы", Параметр);
		
		Если Форма.МодальныйРежим() = 1 Тогда
			Единица = Параметр;
			ПриИзмененииЕдиницы();
		КонецЕсли;
	КонецЕсли;                             
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ ОБЯЗАТЕЛЬНЫХ ПОЛЕЙ
	Если ПустоеЗначение(ТипЦен) = 1 Тогда
		Предупреждение("Не заполнен ""Тип Цен""",60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Предупреждение("Не заполнено поле ""Валюта""", 60);
		Активизировать("Валюта");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;                           
	
	Если ПустоеЗначение(Единица) = 1 Тогда
		Предупреждение("Не заполнена ""Единица измерения""",60);
		Описание = Описание + "'Единица измерения'";
		Активизировать("Единица");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
    
	// Расчетные цены не редактируются
	Если ТипЦен.Рассчитывается = 1 Тогда
		Предупреждение("Цены типа """ + ТипЦен + """ автоматически рассчитываются 
		|на основании цен типа """ + ТипЦен.БазовыйТипЦен + """. 
		|Вручную их задавать нельзя.",60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// ПРОВЕРКА ДУБЛИРОВАНИЯ ЦЕНЫ
	Дубль = ЕстьДубльЦены();
	Если ПустоеЗначение(Дубль) = 0 Тогда
	    
		Предупреждение("У номенклатурной позиции уже есть цена типа """ + ТипЦен + """" +
		              ?(Дубль.ПометкаУдаления() = 1," (помечена на удаление).","."), 60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Полученная в итоге цена может не соответствовать заданному порядку округления
	ОкрЦена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
	Если ОкрЦена <> Цена Тогда
	    Ответ = Вопрос("Значение цены """ + СокрЛП(Цена) + " " + Валюта + """ 
		               |не соответствует установленному порядку округления.
					   |Округлить цену?
					   |В этом случае цена будет равна """+ СокрЛП(ОкрЦена) + 
					   " " + Валюта + """.","Да+Нет", 60);
		Если Ответ = "Да" Тогда
		    Цена = ОкрЦена;
		ИначеЕсли Ответ = "Таймаут" Тогда	
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;			   
	КонецЕсли;
	
	// Обработке ЗаписьПериодическихРеквизитов необходимо передать
	// значения периодических реквизитов, введенные в форме диалога.
	Список = СоздатьОбъект("СписокЗначений");
	Список.Установить("Цена"   , Цена);
	Список.Установить("Единица", Единица);
	
	// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
	// для управления записью значений периодических реквизитов.
	Если глЗаписьПериодическихРеквизитов(Контекст, Список, , '01.01.1980') = 0 Тогда
		СтатусВозврата(0);
	КонецЕсли;

КонецПроцедуры // ПриЗаписи()
