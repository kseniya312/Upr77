////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем Номенклатура;
Перем СтараяВалюта, СтараяЕдиница;

Перем Автообновление;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ЕстьДубльЦены()
//
// Параметры:    
//  Нет
//
// Возвращаемое значение:
//  Найденный дубль, если нет дубля цены, то возвращается пустая строка
//
// Описание:
//  Функция проверяет есть ли у данного товара цена данного типа
//
Функция ЕстьДубльЦены() 
	
	ВыборкаЦен = СоздатьОбъект("Справочник.Цены");
	ВыборкаЦен.ИспользоватьВладельца(Номенклатура);
	ВыборкаЦен.ВыбратьЭлементы();
	
	Пока ВыборкаЦен.ПолучитьЭлемент() = 1 Цикл
		
		Если ВыборкаЦен.ТипЦен <> ТипЦен Тогда
			Продолжить;
		КонецЕсли;
		
		Если Выбран() = 0 Тогда
			
			// Новый элемент
			Возврат ВыборкаЦен.ТекущийЭлемент();
		Иначе           
			
			// Для сохраненного элемента проверить несовпадение типов цен
			// недостаточно, т.к. из выборки можно получить редактируемый элемент
			Если ТекущийЭлемент() <> ВыборкаЦен.ТекущийЭлемент() Тогда
				Возврат ВыборкаЦен.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ЕстьДубльЦены()

//******************************************************************************
// СформироватьТаблицуРасчЦен()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу расчетных цен 
//
Процедура СформироватьТаблицуРасчЦен()
	Перем ЦенаЦены, ЕдЦены, ВалЦены, НайденнаяЦена;

	ТабРасчЦен.УдалитьСтроки();

	Если ПустоеЗначение(Номенклатура) = 1  Тогда
		Возврат;
	КонецЕсли;
	
	// загрузим расчетные цены
	СпрТипыЦен = СоздатьОбъект("Справочник.ТипыЦен");
	СпрТипыЦен.ВыбратьЭлементы();
	
	Пока СпрТипыЦен.ПолучитьЭлемент() = 1 Цикл
		ТипЦены = СпрТипыЦен.ТекущийЭлемент();
		
		Если ТипЦены.Рассчитывается = 1 Тогда
			
			// Если цена рассчитывается
			Если глВернутьЦену(Номенклатура, ТипЦены, ИспользоватьДату(), ЦенаЦены, ЕдЦены, ) = 1 Тогда 
				ТабРасчЦен.НоваяСтрока();
			
				ТабРасчЦен.ТипЦены	= ТипЦены;
				ТабРасчЦен.Цена		= ЦенаЦены;
				ТабРасчЦен.Единица	= ЕдЦены;
				ТабРасчЦен.Валюта	= ТипЦены.Валюта;
				ТабРасчЦен.Процент	= ТипЦены.Процент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СформироватьТаблицуРасчЦен()

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//  Нет
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра значений периодических реквизитов.
//
Процедура ПоКнопкеВыбораДаты()
	
	Если глВвестиДатуПериодическихРеквизитов(Контекст, 0) = 1 Тогда
		СформироватьТаблицуРасчЦен();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПоКнопкеИстория()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "История".
//
// Описание:
//  Вызывается обработка "ЗначенияПериодическихРеквизитов" для просмотра истории 
// значений периодических реквизитов.
//
Процедура ПоКнопкеИстория()
	
	глЗначенияПериодическихРеквизитов(Контекст);
	
КонецПроцедуры // ПоКнопкеИстория()

//******************************************************************************
// ПоКнопкеЦенник()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеЦенник()
	Перем ТекЦена, ТекЕдиница, ТекВалюта; 
	
    ТипЦены	=	СоздатьОбъект("Справочник.ТипыЦен");
	Если ТипЦены.Выбрать("Типы цен",) = 0 Тогда Возврат КонецЕсли;
 	ТипЦены	=	ТипЦены.ТекущийЭлемент();
	
 
	ТабТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТабТоваров.НоваяКолонка("Товар");
	ТабТоваров.НоваяКолонка("Единица");
	ТабТоваров.НоваяКолонка("Цена");
	ТабТоваров.НоваяКолонка("Валюта");
	
	ТабТоваров.НоваяСтрока();
	ТабТоваров.Товар   = СокрЛП(Владелец.ПолнНаименование);
 	Если глВернутьЦену(Владелец, ТипЦены, РабочаяДата(), ТекЦена, ТекЕдиница, ТекВалюта) = 1 Тогда
		ТабТоваров.Единица = ТекЕдиница;
		ТабТоваров.Цена    = ТекЦена;
		ТабТоваров.Валюта  = ТекВалюта;
		
	 	// упакуем данные в список
		ДанныеДляПечати = СоздатьОбъект("СписокЗначений");
	 	
		Фирма = СокрЛП(глЗначениеПоУмолчанию("ОсновнаяФирма").ЮрЛицо.ПолнНаименование);
		ДанныеДляПечати.ДобавитьЗначение(Фирма          , "Фирма");
		ДанныеДляПечати.ДобавитьЗначение(ТабТоваров     , "Таблица");
		
		ОткрытьФормуМодально("Обработка.ПечатьЦенников", ДанныеДляПечати);
	Иначе
		Сообщить("У товара """ + Владелец.ПолнНаименование + """ отсутствует цена """ + ТипЦены + """");
 	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЦенник()
 
//*****************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Валюта"
//
// Описание:
//  Вызывается при выборе валюты. Пересчитывает цену из "старой" в 
// "новую" валюту по курсу на рабочую дату.
//
Процедура ПриИзмененииВалюты()
	
	Если (ПустоеЗначение(СтараяВалюта) = 1) или (ПустоеЗначение(Валюта) = 1) или (Цена = 0) Тогда
		
		СтараяВалюта = Валюта;
		Возврат;
	КонецЕсли;
	
	Если СтараяВалюта <> Валюта Тогда // изменили валюту
		                    
		Если Вопрос("Изменилась валюта задания цены. Пересчитать цену?", "Да+Нет", 60) = "Да" Тогда
			
			Цена = глПересчет(Цена, СтараяВалюта, РабочаяДата(), Валюта, РабочаяДата());
			
			// Если выбран тип цены, то еще и округляем
			Если ТипЦен.Выбран() = 1 Тогда
				Цена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтараяВалюта = Валюта;
	
КонецПроцедуры // ПриИзмененииВалюты()

//******************************************************************************
// ПриИзмененииЕдиницы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Единица"
//
// Описание:
//  Вызывается при выборе единицы измерения из списка. Пересчитывает цену в 
//  зависимости от коэффициента выбранной единицы
//
Процедура ПриИзмененииЕдиницы()

	// пересчитаем цену
	Если (ПустоеЗначение(Единица) = 0) И (Выбран() = 1) Тогда
		
		// единицу изменили
		Если ( СтараяЕдиница <> Единица)
		   И (ПустоеЗначение(СтараяЕдиница.Коэффициент) = 0) Тогда
			                    
			Если Вопрос("Изменилась единица задания цены. Пересчитать цену?", "Да+Нет", 60) = "Да" Тогда
				
				// пересчитывается цена, только если коэффициент не равен нулю
				Цена = Цена * Единица.Коэффициент / СтараяЕдиница.Коэффициент;
				
				// Если выбран тип цены, то еще и округляем
				Если ТипЦен.Выбран() = 1 Тогда
					Цена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтараяЕдиница = Единица;
	
КонецПроцедуры // ПриИзмененииЕдиницы()

//******************************************************************************
// УстановитьДоступностьНаценки()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет доступностью колонки Наценка. Если цена расчитывается, то колонка
//  Наценка доступна, иначе недоступна.
//
Процедура УстановитьДоступностьНаценки()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
		Если ПустоеЗначение(ТипЦен.БазовыйТипЦен) = 0 Тогда
		    // если цена не рассчитывается, то и наценка недоступна.
			Форма.Процент.Доступность(1);
		Иначе
			Форма.Процент.Доступность(0);
			Если ПустоеЗначение(Процент) = 0 Тогда
				Процент = 0;    
			КонецЕсли;
		КонецЕсли;
	Иначе
		// тип цен не задан, значит наценка не доступна
		Форма.Процент.Доступность(0);
		Если ПустоеЗначение(Процент) = 0 Тогда
			Процент = 0;    
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступностьНаценки()

//******************************************************************************
// ПриИзмененииТипаЦены()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает валюту и наценку, если они не заданы, из типа цены.
//
Процедура ПриИзмененииТипаЦены()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда
	    Если ПустоеЗначение(Валюта) = 1 Тогда
	        Валюта	= ТипЦен.Валюта;
			СтараяВалюта = Валюта;
		КонецЕсли;
		
		Если ПустоеЗначение(Процент) = 1 Тогда
		    Процент	= ТипЦен.Процент;
		КонецЕсли;
		
		УстановитьДоступностьНаценки();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииТипаЦены()

//******************************************************************************
// ПриОбновленииФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка
//
// Вызывается из формул элементов диалога:
//  Статик ФормТекстИнформации1.
//
// Описание:
//  При изменении хранимых цены вызывает процедуру формирования таблицы 
//  расчетных цен.
//
Функция ПриОбновленииФормы()
	
	Если АвтоОбновление = 1 Тогда
		СформироватьТаблицуРасчЦен();
		АвтоОбновление	= 0;
	КонецЕсли;
	
	Возврат "Расчетные цены:";
	
КонецФункции // ПриОбновленииФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()

	Если (глПользователь<>"Бояринова") или (глПользователь<>"Иванова") или (глПользователь<>"Администратор") Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Справочник" Тогда
		Если Форма.Параметр.Вид() = "Номенклатура" Тогда
			Если Форма.Параметр.ЭтоГруппа() = 0 Тогда
				ИспользоватьВладельца(Форма.Параметр);
			КонецЕсли;
			ИерархическийСписок(1, 0);
		КонецЕсли;
	КонецЕсли;
	
	Номенклатура = ИспользоватьВладельца();
	
	// Системно не надо контролировать изменение периодических реквизитов.
	СохранениеПериодическихРеквизитов(0);


	// Надо Сформировать таблицу расчетных цен
	ТабРасчЦен.НоваяКолонка("ТипЦены"	, , , , "Тип"		, 18);
	ТабРасчЦен.НоваяКолонка("Цена"		, , , , "Цена"		, 8, "Ч15.2", 2);
	ТабРасчЦен.НоваяКолонка("Валюта"	, , , , "Вал."		, 4);
	ТабРасчЦен.НоваяКолонка("Единица"	, , , , "Ед."		, 4);
	ТабРасчЦен.НоваяКолонка("Процент"	, , , , "% наценки.", 4);
	
	АвтоОбновление = 1;
	//СформироватьТаблицуРасчЦен();
	
КонецПроцедуры // ПриОткрытии()                                                 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	Если ТипЗначенияСтр(Форма.Параметр) = "Справочник" Тогда
		Если Форма.Параметр.Вид() = "Номенклатура" Тогда
			Если Форма.Параметр.ЭтоГруппа() = 0 Тогда
				ИспользоватьВладельца(Форма.Параметр);
			КонецЕсли;
			ИерархическийСписок(1, 0);
		КонецЕсли;
	КонецЕсли;
	                    
	Номенклатура = ИспользоватьВладельца();
	СформироватьТаблицуРасчЦен();

КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореВладельца(ЭлементВладелец)
	
	Номенклатура = ЭлементВладелец;
	СформироватьТаблицуРасчЦен();
	
КонецПроцедуры // ПриВыбореВладельца()

//******************************************************************************
// Предопределенная процедура.
Процедура ПриРедактированииНовойСтроки()
	
	Если ПустоеЗначение(Единица) = 1  Тогда
		Единица = Владелец.ОсновнаяЕдиница;
	КонецЕсли;
	
	СтараяВалюта  = Валюта;
	СтараяЕдиница = Единица;
	
	УстановитьДоступностьНаценки();
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура.
Процедура ПриНачалеРедактированияСтроки()
	
	СтараяВалюта  = Валюта;
	СтараяЕдиница = Единица;
	
	УстановитьДоступностьНаценки();
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем Конт;
	
	Если ИдентЭлемДиалога = "Единица" Тогда
		ФлагСтандОбр	= 0;
		Конт			= Номенклатура;
		ОткрытьФорму("Справочник.Единицы", Конт);
		
		Если Форма.МодальныйРежим() = 1 Тогда
			Единица = Конт;
			ПриИзмененииЕдиницы();
		КонецЕсли;
	КонецЕсли;                             
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()
	
	// ПРОВЕРКА ЗАПОЛНЕНИЯ ОБЯЗАТЕЛЬНЫХ ПОЛЕЙ
	Если ПустоеЗначение(ТипЦен) = 1 Тогда
		Предупреждение("Не заполнен ""Тип Цен""",60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Описание = Описание + "Не заполнено поле ""Валюта""";
		Активизировать("Валюта");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;                           
	
	Если ПустоеЗначение(Единица) = 1 Тогда
		Предупреждение("Не заполнена ""Единица измерения""",60);
		Описание = Описание + "'Единица измерения'";
		Активизировать("Единица");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Расчетные цены не редактируются
	Если ТипЦен.Рассчитывается = 1 Тогда
		Предупреждение("Цены типа """ + ТипЦен + """ автоматически рассчитываются 
		|на основании цен типа """ + ТипЦен.БазовыйТипЦен + """. 
		|Вручную их задавать нельзя.",60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// все обязательные поля заполнены
	// ПРОВЕРКА ДУБЛИРОВАНИЯ ЦЕНЫ 
	Дубль = ЕстьДубльЦены();
	Если  ПустоеЗначение(Дубль) = 0 Тогда
		Предупреждение("У номенклатурной позиции уже есть цена типа """ + ТипЦен + """" +
		?(Дубль.ПометкаУдаления() = 1," (помечена на удаление).",""), 60);
		Активизировать("ТипЦен");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// Полученная в итоге цена может не соответствовать заданному порядку округления
	ОкрЦена = глОкруглить(Цена, ТипЦен.ПорядокОкругления);
	Если ОкрЦена <> Цена Тогда
	    Ответ = Вопрос("Значение цены """ + СокрЛП(Цена) + " " + Валюта + """
		               |не соответствует установленному порядку округления.
					   |Округлить цену?
					   |В этом случае цена будет равна """+ СокрЛП(ОкрЦена) + 
					   " " + Валюта + """.","Да+Нет", 60);
		Если Ответ = "Да" Тогда
		    Цена = ОкрЦена;
		ИначеЕсли Ответ = "Таймаут" Тогда	
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;			   
	КонецЕсли;
	
	// Записью периодических реквизитов невозможно управлять при вводе 
	// новой строки в форме списка справочника. Система автоматически 
	// запишет значения периодических реквизитов на текущую дату.
	Если Выбран() = 1 Тогда
		// Обработке ЗаписьПериодическихРеквизитов необходимо передать
		// значения периодических реквизитов, введенные в форме диалога.
		Список = СоздатьОбъект("СписокЗначений");
		Список.Установить("Цена"   , Цена);
		Список.Установить("Единица", Единица);
		
		// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
		// для управления записью значений периодических реквизитов.
		Если глЗаписьПериодическихРеквизитов(Контекст, Список) = 0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Номенклатура	= Владелец;
	АвтоОбновление	= 1;
	
КонецПроцедуры // ПриЗаписи()