Функция ПолучитьФормуОплаты()
	
	Запрос 	= СоздатьОбъект("Запрос");
	ВЗ		= Перечисление.ВидВзаимодействия.Залоги;  
	ТекДата = СформироватьПозициюДокумента(ПолучитьПозицию(),-1);             
	
    Если ТекДата > ПолучитьПозициюТА() Тогда
		ТекДата = ПолучитьПозициюТА();
	КонецЕсли;
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(ТекущиеБонусы) 
	|Период с ТекДата по ТекДата;
	//|Без итогов;
	|Клиент 				= Регистр.Покупатели_розница.Контрагент;
	|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Магазин				= Регистр.Покупатели_розница.Магазин;
	|КредДокумент			= Регистр.Покупатели_розница.КредДокумент;
	|СуммаРуб 				= Регистр.Покупатели_розница.СуммаРуб;
	|АналитикаСчетБезнал 	= Регистр.Покупатели_розница.АналитикаСчетБезнал;  
	|ФормаОплаты		 	= Регистр.Покупатели_розница.ФормаОплаты;
	//|АналитикаПродажи 		= Регистр.Покупатели_розница.АналитикаПродажи;
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	//|Группировка Клиент без групп;
	//|Группировка Магазин без Групп;
	|Группировка КредДокумент без Групп;
	|Группировка АналитикаСчетБезнал без Групп;
	|Группировка ФормаОплаты без Групп;
	//|Группировка АналитикаПродажи без Групп;
	|Условие(Клиент = Контрагент);
	|Условие(ВидВзаимодействия = ВЗ);
	|"//}}ЗАПРОС
	;
	
	ТекДокОснование = Документ_;
	ТекстЗапроса = ТекстЗапроса + "
	|Условие(КредДокумент = ТекДокОснование);";
		
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "";
	КонецЕсли;    
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Пока Запрос.Группировка(2) = 1 Цикл
			Пока Запрос.Группировка(3) = 1 Цикл
				Возврат Запрос.ФормаОплаты;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;

	Возврат "";
КонецФункции	

// ********************
//
Процедура ОбработкаПроведения()

//******************************************************************************
//			ВЗАИМОРАСЧЁТЫ С КЛИЕНТОМ РОЗНИЧНОГО ПОДРАЗДЕЛЕНИЯ
//******************************************************************************
 
	//Если итог("Сумма")>0 Тогда	//Уберем из копилки
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл  
			//Если (ВозвратЗалога = 1) или
			Если (ВозвратКоплате = 1) Тогда
				Продолжить;
			КонецЕсли;
			
			Регистр.Покупатели_Розница.Контрагент				= Контрагент;
			Регистр.Покупатели_розница.ВидВзаимодействия		= Перечисление.ВидВзаимодействия.Залоги;
			Регистр.Покупатели_Розница.Магазин					= Склад;
			Регистр.Покупатели_Розница.КредДокумент				= Документ_;
			Регистр.Покупатели_Розница.СуммаРуб					= Сумма;
			//Регистр.Покупатели_розница.АналитикаПродажи 		= АналитикаПродажи;
			Регистр.Покупатели_розница.АналитикаСчетБезнал 		= АналитикаСчетБезнал;
			//Попытка
				Регистр.Покупатели_Розница.ФормаОплаты = ПолучитьФормуОплаты();   
				Если (Регистр.Покупатели_Розница.ФормаОплаты = Перечисление.ФормыОплаты.Безналичная) и (ПоКарте = 0) Тогда    
					СтрокаСообщ = "Возрвт залогов полученных по карте нужно возвращать по карте!";
					глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент());  
					Если ((глПользователь.Наименование <> "Кожемякин")) и ((ИмяПользователя() <> "Филиппов")) и ((ИмяПользователя() <> "Горлач")) Тогда
						глНеПроводить(Контекст,СтрокаСообщ);
						Возврат;  
					КонецЕсли;
				КонецЕсли;	
				//Если (ДатаДок >= Дата("01.07.2017")) и (Документ_.ДатаДок >= Дата("01.07.2017")) Тогда
				//	Если ПоКарте = 1 Тогда
				//		Регистр.Покупатели_Розница.ФормаОплаты = Перечисление.ФормыОплаты.Безналичная;
				//	Иначе
				//		Регистр.Покупатели_Розница.ФормаОплаты = Перечисление.ФормыОплаты.Наличная;
				//	КонецЕсли;
				//КонецЕсли;       
			//Исключение
			//КонецПопытки;
			Регистр.Покупатели_Розница.ДвижениеРасходВыполнить();
		КонецЦикла;
	//КонецЕсли;
    
	глДвижениеЗалогиОплатаВозврат(Контекст); 
	  
	глПровестиПриходОплаты(Контекст);
	
КонецПроцедуры //ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения()
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Сообщить("Вы не можете отменять проведение данного документа");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры
