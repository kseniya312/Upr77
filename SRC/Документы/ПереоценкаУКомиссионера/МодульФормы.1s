////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
                   
Перем СтараяДата, СтараяФирма;
// Для контроля необходимости пересчетов
Перем СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

Перем ВопросПередЗаполнением;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//

Функция ЗаполнениеПоИтогам() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//  Делает невидимой колонку "Скидка", если скидка не выбрана
//  Делает невидимой колонку всего, если все налоги в сумме
Процедура УправлениеВидимостью()
	                            
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	                                                                    
	Форма.РамкаВсего	  .Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");

	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()         
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы    

//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг);  
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()   

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДокРуб	= глПересчет (Итог("Сумма"),Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб <> СуммаДокументаСтараяРуб) 
	или  (ВалютаДоговораСтарая	    <> Договор.ВалютаВзаиморасчетов)
	Тогда
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(Итог("Сумма"),
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();  
		
		УстановкаВидимостиСуммВПодвале();
		              
		ТекстВопроса = ВопросПередЗаполнением;
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
		
		УдалитьСтроки();
		Результат = ЗаполнениеПоИтогам();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		                   
		УстановкаВидимостиСуммВПодвале();

		ТекстВопроса = ВопросПередЗаполнением;
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
		
		УдалитьСтроки();
		Результат = ЗаполнениеПоИтогам();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()     

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();     
	УстановкаВидимостиСуммВПодвале();
	
	Форма.Обновить();
	
КонецПроцедуры	//ПоКнопкеЦены()

//******************************************************************************
// ЗаполнениеПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заоплняет табличную часть товарами по догувору, переданными комиссионеру,
//  но еще не реализованными.
//
Функция ЗаполнениеПоИтогам()

	Перем НереализованныеТовары;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	ОбщРег = СоздатьОбъект("Регистры");
	РегОтданные = ОбщРег.ПартииОтданные;
	
	// установим фильтры на измерения
	РегОтданные.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	РегОтданные.УстановитьЗначениеФильтра("Договор", Договор, 1);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегОтданные.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегОтданные.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегОтданные.ВыгрузитьИтоги(НереализованныеТовары, 1, 1);

	// рассчитаем цену
	НереализованныеТовары.НоваяКолонка("Цена", "Число");
	НереализованныеТовары.ВыбратьСтроки();
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		Если НереализованныеТовары.Количество > 0 Тогда
			НереализованныеТовары.Цена = НереализованныеТовары.Продстоимость / НереализованныеТовары.Количество;
		КонецЕсли;
	КонецЦикла;
	НереализованныеТовары.Свернуть("Номенклатура,Цена", "Количество,Продстоимость");

	НереализованныеТовары.ВыбратьСтроки();
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		Если НереализованныеТовары.Количество <= 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		
		НоваяСтрока();
		
		Номенклатура	= НереализованныеТовары.Номенклатура;
		Единица			= Номенклатура.ОсновнаяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		Количество		= НереализованныеТовары.Количество / ?(Коэффициент = 0, 1, Коэффициент);
		
		Сумма		    = глПересчет(НереализованныеТовары.Продстоимость, 
		                             Договор.ВалютаВзаиморасчетов, ДатаДок,
		                             Валюта, Курс);
		
		Если Количество <> 0 Тогда
			Цена = Сумма / Количество;
		Иначе
			Цена = Сумма;
		КонецЕсли;
		
	КонецЦикла;
		
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Отсутствуют товары, переданные по договору, но нереализованные комиссионером";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоИтогам()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	                   
	ТекстВопроса = ВопросПередЗаполнением;
	Если КоличествоСтрок() <> 0 Тогда
		ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
	КонецЕсли;

	Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьСтроки();
	Результат = ЗаполнениеПоИтогам();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;

КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет",           "ЦенаВподборе");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()


//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	
	Если Проведен() = 0 Тогда
	    Предупреждение("Документ можно расчечатать только после проведения", 60);
		Возврат;
	КонецЕсли;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Комитент
	Комитент	= СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Комитент");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комитент");
	
	// Секция Комиссионер
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Комиссионер	= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
	Иначе
		Комиссионер	= "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Комиссионер");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комиссионер");
	
	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	ТаблСтарая = СоздатьОбъект("ТаблицаЗначений");
	ТаблСтарая.НоваяКолонка("Номенклатура");
	ТаблСтарая.НоваяКолонка("Количество");
	ТаблСтарая.НоваяКолонка("Цена");
	
	ТаблНовая = СоздатьОбъект("ТаблицаЗначений");
	ТаблНовая.НоваяКолонка("Номенклатура");
	ТаблНовая.НоваяКолонка("Количество");
	ТаблНовая.НоваяКолонка("Цена");

	РегОтданные = СоздатьОбъект("Регистр.ПартииОтданные");
	РегОтданные.ВыбратьДвиженияДокумента(ТекущийДокумент());
	
	// сформируем таблицы с приходом и расходом
	Пока РегОтданные.ПолучитьДвижение() = 1 Цикл
		Если РегОтданные.Приход = 1 Тогда
			ТаблНовая.НоваяСтрока();
			ТаблНовая.Номенклатура	= РегОтданные.Номенклатура;
		    ТаблНовая.Количество	= РегОтданные.Количество;
			ТаблНовая.Цена			= РегОтданные.ПродСтоимость / РегОтданные.Количество;
		Иначе
			ТаблСтарая.НоваяСтрока();
			ТаблСтарая.Номенклатура	= РегОтданные.Номенклатура;
		    ТаблСтарая.Количество	= РегОтданные.Количество;
			ТаблСтарая.Цена			= РегОтданные.ПродСтоимость / РегОтданные.Количество;
		КонецЕсли;
	КонецЦикла;
	
	// установим соответствие новой цены со старой
	
	ТаблПереоценка = СоздатьОбъект("ТаблицаЗначений");
	ТаблПереоценка.НоваяКолонка("Номенклатура");
	ТаблПереоценка.НоваяКолонка("Количество");
	ТаблПереоценка.НоваяКолонка("ЦенаСтарая");
	ТаблПереоценка.НоваяКолонка("ЦенаНовая");
	
	ТаблНовая.ВыбратьСтроки();
	Пока ТаблНовая.ПолучитьСтроку() = 1 Цикл
		Поз = 0;
		Пока ТаблСтарая.НайтиЗначение(ТаблНовая.Номенклатура, Поз, "Номенклатура") = 1 Цикл
			ТаблСтарая.ПолучитьСтрокуПоНомеру(Поз);
			ПогашКолво	= Мин(ТаблСтарая.Количество, ТаблНовая.Количество);
			
			ТаблПереоценка.НоваяСтрока();
			ТаблПереоценка.Номенклатура	= ТаблНовая.Номенклатура;
			ТаблПереоценка.Количество	= ПогашКолво;
			ТаблПереоценка.ЦенаСтарая	= ТаблСтарая.Цена;
			ТаблПереоценка.ЦенаНовая	= ТаблНовая.Цена;
			
			Если ПогашКолво < ТаблСтарая.Количество Тогда
			    ТаблСтарая.Количество	= ТаблСтарая.Количество - ПогашКолво;
			Иначе
				ТаблСтарая.УдалитьСтроку(Поз);
			КонецЕсли;
			
			Если ПогашКолво < ТаблНовая.Количество Тогда
			    ТаблНовая.Количество	= ТаблНовая.Количество - ПогашКолво;
			Иначе
				// закончилось количество по новой цене
				ТаблНовая.Количество	= ТаблНовая.Количество - ПогашКолво;
				Прервать;
			КонецЕсли;
			
			Поз = 0;
		КонецЦикла;
		
		Если ТаблНовая.Количество > 0 Тогда
			// переоценили больше товара, чем было передано
			ТаблПереоценка.НоваяСтрока();
			ТаблПереоценка.Номенклатура	= ТаблНовая.Номенклатура;
			ТаблПереоценка.Количество	= ТаблНовая.Количество;
			ТаблПереоценка.ЦенаСтарая	= 0;
			ТаблПереоценка.ЦенаНовая	= ТаблНовая.Цена;
		КонецЕсли;
		
	КонецЦикла;
	
	// выводим табличную часть
	НомСтроки = 0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки		= НомСтроки + 1;
		ТекКоэффициент	= Единица.Коэффициент;
		
		Если ТекКоэффициент = 0 Тогда
		    ТекКоэффициент	= 1;
		КонецЕсли;
		
		Поз = 0;
		Пока ТаблПереоценка.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Цикл
			ТаблПереоценка.ПолучитьСтрокуПоНомеру(Поз);
			
			Колво		= ТаблПереоценка.Количество;
			ЦенаНовая	= ТаблПереоценка.ЦенаНовая;
			ЦенаСтарая	= ТаблПереоценка.ЦенаСтарая;
			
			Если ТекКоэффициент <> 1 Тогда
			    // пересчитаем количество и цену в соответствии с единицей в составе
				Колво		= Колво / ?(ТекКоэффициент = 0, 1, ТекКоэффициент);
				ЦенаНовая	= ЦенаНовая * ТекКоэффициент;
				ЦенаСтарая	= ЦенаСтарая * ТекКоэффициент;
			КонецЕсли;
			
			ИсхТабл.ВывестиСекцию("Строка");
			
			ТаблПереоценка.УдалитьСтроку(Поз);
			Поз = 0;
		КонецЦикла;
		
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
		
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда
	    ПересчетСуммыВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()     
	                        
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
    Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	          
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;       
	СуммаДокументаСтараяРуб = глПересчет (Итог("Сумма"),Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;

	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	               
	УстановкаВидимостиСуммВПодвале();

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	ОбновитьНадписи();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "Цена"    ) 
	или  (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;   
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры                                                                  

//******************************************************************************
//Предопределенная процедура

Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);               
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("Нет"          , "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 0, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название = "Печатная форма";
ТаблицаПечФорм.Кнопка   = "Печать";

ВопросПередЗаполнением = "Заполнить по договору товарами переданными, но не реализованными комиссионером?";