////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
Перем ВидСчетаФактуры;

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
                  
// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтараяВалюта, СтарыйКурс;
Перем СтарыйДоговор, СтарыйКонтрагент;

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма, НачСумма;

Перем ТекущийДолг;
Перем СтарыйСписокСтатей, СтарыйКО, СтарыйПодчинение1;

Перем Парам;

Перем текстСписокСтатей;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника Валюты
//
// Возвращаемое значение:
//  Краткое наименование валюты,
//  <нет>, если передано пустое значение
//
// Описание:
//  Формирует текстовую строку о переданной валюте
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет>");
КонецФункции  // ТекстВалюты()                                                                   
            
//*****************************************************************************
// ЗаголовокФормы()
//
// Возвращаемое значение: 
//	Строка - Название документа
//
//Описание:
// Формирует название документа и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                      
	Заголовок 	= "Приходный кассовый ордер";
	Название 	= "ПКО №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы()   


//******************************************************************************
Процедура УправлениеВидимостью()
	                                 
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
	    Форма.ИспользоватьСлой("Общий1, Общий2, Операция", 2);
		
		Если (КодОперации = глКО.ОплатаОтПокупателя) ИЛИ
		     (КодОперации = глКО.ВозвратОплатыОтПоставщика)ИЛИ
		     (КодОперации = глКО.Залог)ИЛИ
			 (КодОперации = глКО.РозничнаяВыручка) ИЛИ
			 (КодОперации = глКО.РозничнаяВыручкаЕНВД) Тогда
			Форма.ИспользоватьСлой("Взаиморасчеты", 1);   
		ИначеЕсли (КодОперации = глКО.ВозвратПодотчетныхСумм) Тогда
			Форма.ИспользоватьСлой("Подотчетник", 1);
		ИначеЕсли (КодОперации = глКО.СтатьиДР) Тогда
			Форма.ИспользоватьСлой("СписокСтатейДР", 1);
		Иначе
			Форма.ИспользоватьСлой("Прочее", 1);
			
		КонецЕсли;
		
	Иначе
	    Форма.ИспользоватьСлой("Общий1, Общий2, Печать", 2);
		Если (КодОперации = глКО.РозничнаяВыручка) ИЛИ
			 (КодОперации = глКО.РозничнаяВыручкаЕНВД) Тогда
			Форма.ТекстОснование.Заголовок("№ ленты ККМ:"); 
		Иначе
			Форма.ТекстОснование.Заголовок("Основание:"); 
		КонецЕсли;		
	КонецЕсли;                         
	
	Форма.СписокСтавокНП.Доступность(ОблагаетсяНП);
	
КонецПроцедуры
              
//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура УправлениеДоступностью()
	
	Если Форма.ТолькоПросмотр() = 0 Тогда
		Если Договор.ВалютаВзаиморасчетов = Валюта Тогда
			Форма.кнСуммаВзаиморасчетов.Доступность(0);
		Иначе
			Форма.кнСуммаВзаиморасчетов.Доступность(1);
		КонецЕсли;
		
		Если Валюта = глРубли Тогда
			Форма.Курс.Доступность(0);
		Иначе
			Форма.Курс.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
	Если КодОперации = глКО.РозничнаяВыручкаЕНВД Тогда    
		Если ОблагаетсяНП <> 0 Тогда
			ОблагаетсяНП = 0;
		КонецЕсли;
		СписокСтавокНДС.ТекущаяСтрока(1);
		СписокСтавокНП.ТекущаяСтрока(1);
		Форма.СписокСтавокНДС.Доступность(0);
		Форма.СписокСтавокНП.Доступность(0);
		Форма.ОблагаетсяНП.Доступность(0);
	Иначе
		Форма.СписокСтавокНДС.Доступность(1);
		Форма.СписокСтавокНП.Доступность(1);
		Форма.ОблагаетсяНП.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
Процедура ЗаполнитьСписокСтавокНП()
	Перем ВыборкаСтавокНП;
	
	СписокСтавокНП.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.СтавкиНП"),"<авто>");
	ВыборкаСтавокНП = СоздатьОбъект("Справочник.СтавкиНП");
	ВыборкаСтавокНП.ВыбратьЭлементы();
	Пока ВыборкаСтавокНП.ПолучитьЭлемент()=1 Цикл
		Если ВыборкаСтавокНП.ПометкаУдаления() = 0 Тогда
			СписокСтавокНП.ДобавитьЗначение(ВыборкаСтавокНП.ТекущийЭлемент(),
			                                Строка(ВыборкаСтавокНП.Ставка)+"%");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры   

//******************************************************************************
Процедура ЗаполнитьСписокСтавокНДС()
	                
	пНДС = Перечисление.СтавкиНДС;
	
	СписокСтавокНДС.ДобавитьЗначение(ПолучитьПустоеЗначение("Перечисление.СтавкиНДС"),"<авто>");
	Для Сч=1 По пНДС.КоличествоЗначений() Цикл
		СписокСтавокНДС.ДобавитьЗначение(пНДС.ЗначениеПоНомеру(Сч),Строка(пНДС.ЗначениеПоНомеру(Сч)));
	КонецЦикла;
	
КонецПроцедуры
    
//******************************************************************************
Процедура ЗаполнитьСписокВидовОплаты()
	
	СписокВидовОплаты.ДобавитьЗначение(глКО.ОплатаОтПокупателя);
	СписокВидовОплаты.ДобавитьЗначение(глКО.Залог);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыОтПоставщика);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВозвратПодотчетныхСумм);
	СписокВидовОплаты.ДобавитьЗначение(глКО.РозничнаяВыручка);
	СписокВидовОплаты.ДобавитьЗначение(глКО.РозничнаяВыручкаЕНВД);
	СписокВидовОплаты.ДобавитьЗначение(глКО.Прочее);
	СписокВидовОплаты.ДобавитьЗначение(глКО.СтатьиДР);
	
	
КонецПроцедуры

//******************************************************************************
Процедура ВыборСтавкиНП()
	Перем Позиция;
	
	Позиция = СписокСтавокНП.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		СтавкаНП = СписокСтавокНП.ПолучитьЗначение(Позиция);
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************
Процедура ВыборСтавкиНДС()
	Перем Позиция;
	
	Позиция = СписокСтавокНДС.ТекущаяСтрока();
	Если Позиция > 0 Тогда
		СтавкаНДС = СписокСтавокНДС.ПолучитьЗначение(Позиция);
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************        
Функция ТекстВалютыВзаим()   
	
	Форма.ТекстСуммаВзаиморасчетов.Заголовок(глФРМ(СуммаВзаиморасчетов,Договор.ВалютаВзаиморасчетов));

	Возврат ТекстВалюты(Договор.ВалютаВзаиморасчетов);
	                   
КонецФункции

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
//
// Возвращаемое значение: НЕТ
//
// Описание:
//	Пересчитывает сумму в валюте взаиморасчетов.

Процедура ПересчетСуммыВзаиморасчетов()
	     
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов) =1 Тогда
		СуммаВзаиморасчетов	= 0;
	Иначе
		СуммаВзаиморасчетов		= глПересчет(Сумма,
					Валюта,Курс,
					Договор.ВалютаВзаиморасчетов,ДатаДок);
	КонецЕсли;
	
	Форма.Обновить();
	
КонецПроцедуры        

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	                 
	Если (КодОперации = глКО.ОплатаОтПокупателя)  
	  	 или (КодОперации = глКО.Залог)
	  	 или (КодОперации = глКО.РозничнаяВыручка)
	 	 или (КодОперации = глКО.РозничнаяВыручкаЕНВД)  Тогда
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Покупатель");
		
	ИначеЕсли (КодОперации = глКО.ВозвратОплатыОтПоставщика) Тогда
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Поставщик");
		
	Иначе     
		ТекущийДолг = 0;
	КонецЕсли;
		                     
	Форма.ТекстТекущийДолг.Заголовок(глФРМ(ТекущийДолг,Договор.ВалютаВзаиморасчетов));
		
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()
      
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание";
	КонецЕсли;
	
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн <> "ЗаявкаПокупателя") и
		 (ВидОсн <> "ВозвратПоставщику") и
		 (ВидОсн <> "ОтчетКомиссионера") и
		 (ВидОсн <> "РеализацияПрочее") и
		 (ВидОсн <> "Реализация") и
		 (ВидОсн <> "РеализацияРозница") и
		 (ВидОсн <> "РКО") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли;
		
	Валюта 		        = ДокОснование.Валюта;
	Контрагент	        = ДокОснование.Контрагент;
	Договор		        = ДокОснование.Договор;
	СуммаВзаиморасчетов	= ДокОснование.СуммаВзаиморасчетов;

		
	Если (ВидОсн = "ВозвратПоставщику") или
	     (ВидОсн = "РКО")Тогда
		 	
		КодОперации = глКО.ВозвратОплатыОтПоставщика;
		Курс 	    = ДокОснование.Курс;
		Если ВидОсн = "РКО" Тогда
		
			Касса		 = ДокОснование.Касса;
			ОблагаетсяНП = ДокОснование.ОблагаетсяНП;
			Сумма 		 = ДокОснование.Сумма;  // Возвращаем ту же сумму, что и получили и по тому же курсу
			
			// Если подотчетник
			Если ДокОснование.КодОперации = глКО.ВыдачаПодотчет Тогда
				КодОперации = глКО.ВозвратПодотчетныхСумм;
				ФизЛицо     = ДокОснование.ФизЛицо;
			КонецЕсли;
			
		Иначе  // ВозвратПоставщику
		
			ОблагаетсяНП = ДокОснование.УчитыватьНП;
			//Возврат оплачиваем по курсу документа возврата
			Сумма = глПересчет(ДокОснование.Итог("Сумма") +
    		                   ?(ДокОснование.СуммаВклНДС = 1, 0,ДокОснование.Итог("СуммаНДС")) +
        		               ?(ДокОснование.СуммаВклНП = 1, 0,ДокОснование.Итог("СуммаНП")),
							   ДокОснование.Валюта, ДокОснование.Курс,
							   Валюта, ДатаДок);
						   
		КонецЕсли;
	Иначе
		КодОперации = глКО.ОплатаОтПокупателя;
		
		Курс  = глКурсДляВалюты(Валюта, ДатаДок); // Курс мог измениться                              
		
		// Оплачиваем по умолчанию сумму, которую считаем нужным оплатить по взаиморасчетам
		Если СуммаВзаиморасчетов = 0 Тогда
		    Сумма = 0;
		Иначе
			Сумма = глПересчет(СуммаВзаиморасчетов, Договор.ВалютаВзаиморасчетов, ДатаДок, Валюта, Курс);  
		КонецЕсли; 
		
		Если ВидОсн = "ОтчетКомиссионера" Тогда
			ОблагаетсяНП = 0;;
		ИначеЕсли ВидОсн = "РеализацияРозница" Тогда
			Если ДокОснование.ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда
				Если ДокОснование.ОблагаетсяЕНВД = 1 Тогда
				    КодОперации = глКО.РозничнаяВыручкаЕНВД;
				Иначе
					КодОперации = глКО.РозничнаяВыручка;
				КонецЕсли;
			КонецЕсли;			
		Иначе
			ОблагаетсяНП = ДокОснование.УчитыватьНП;
		КонецЕсли;
		
		
	КонецЕсли;
	
	СтараяВалюта = Валюта; 
	СтарыйКурс   = Курс;  
	
	Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
		ПринятоОт = Контрагент.ЮрФизЛицо.ПолнНаименование;
	ИначеЕсли ФизЛицо.Выбран() = 1 Тогда
		ПринятоОт = ФизЛицо.ПолнНаименование;
	КонецЕсли;
	
	Возврат "";
		
КонецФункции // ЗаполнениеПоДокументуОснованию()
                    
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	ДокОсн = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(ДокОсн) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст, ДокОсн);
		
	    Основание = глПредставлениеДокумента(ДокОсн);
		
		ТекстВопроса = "Заполнить сумму по документу основанию?";
		Если Сумма <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением сумма будет обнулена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		Сумма = 0;
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		РасчетТекущегоДолга();
		УправлениеДоступностью();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//******************************************************************************
// ПодготовитьСумму(ИспСумма, ИспВалюта)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПодготовитьСумму(ИспСумма)
	
	ИспСумма = Окр(ИспСумма, 2, 1);
	ЦелСумма = Цел(ИспСумма);
	КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
	
	Возврат "" + ЦелСумма + " руб. " + Формат(КопСумма , "Ч(0)2") + " коп.";
	
КонецФункции // ПодготовитьСумму()

//******************************************************************************
// ПредставлениеСтавкиНДС(Ставка)
//
// Параметры: 
//  Ставка
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Функция ПредставлениеСтавкиНДС(Сумма, Ставка)
	
	Рез = "" + Перечисление.СтавкиНДС.БезНДС;
	Если ПустоеЗначение(Ставка) = 0 Тогда
	    Если Ставка <> Перечисление.СтавкиНДС.БезНДС Тогда
			Рез = " НДС(" + Ставка + ") " + ПодготовитьСумму(Сумма); 
	    КонецЕсли;
    КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПредставлениеСтавкиНДС()

//******************************************************************************
// ПредставлениеСтавкиНП(Ставка, Сумма)
//
// Параметры: 
//  Ставка, Сумма
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Функция ПредставлениеСтавкиНП(Сумма, Ставка)
	
	Рез = "";
	         
	Если Ставка > 0 Тогда
		Рез = " НП(" + Ставка + "%) " + ПодготовитьСумму(Сумма); 
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПредставлениеСтавкиНП()

//******************************************************************************
// ПолнаяСуммаОсн()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Функция РасчетКоэффициента(СуммаДок)
	
	// вычислим сумму документа основания со всеми налогами
	Рез = глПересчет(ДокОснование.Итог("Сумма"), ДокОснование.Валюта, ДокОснование.Курс, глРубли, 1);
	
	Если ДокОснование.Вид() <> "ОтчетКомиссионера" Тогда
		Если ДокОснование.УчитыватьНП = 1 Тогда
			Если ДокОснование.СуммаВклНП = 0 Тогда
				Рез = Рез + глПересчет(ДокОснование.Итог("СуммаНП"), ДокОснование.Валюта, ДокОснование.Курс, глРубли, 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДокОснование.УчитыватьНДС = 1 Тогда
		Если ДокОснование.СуммаВклНДС = 0 Тогда
			Рез = Рез + глПересчет(ДокОснование.Итог("СуммаНДС"), ДокОснование.Валюта, ДокОснование.Курс, глРубли, 1);
		КонецЕсли;
	КонецЕсли;
	
	Если Рез = 0 Тогда
	    Рез = 1;
	Иначе
		Рез = СуммаДок / Рез;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПолнаяСуммаОсн()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ЗначенияПоНП, ЗначенияПоНДС;
	
	Наименование		= Фирма.ЮрЛицо.ПолнНаименование;
	ИНН					= Фирма.ЮрЛицо.ИНН;
	
	Руководитель		= Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок);  
	
	//++Ерошенко 11.05.2007
	// задание бухгалтерии.. 
	Если ТекущаяДата() > Дата("07.05.07") Тогда
		Глбухгалтер			= Фирма.ЮрЛицо.Глбухгалтер.Получить(ДатаДок);
		Кассир				= Фирма.ЮрЛицо.Кассир.Получить(ДатаДок);
	Иначе
		Глбухгалтер			= "Бояринова Е.А.";
		Кассир				= "Бояринова Е.А.";
	КонецЕсли;
	//--Ерошенко
	
	СтрСумма = "";
	
	Коэфф          = 1;
	КоэффРассчитан = 0;
	
	СуммаРуб        = глПересчет(Сумма, Валюта, Курс, глРубли, 1);
	СуммаНПРубВсего = 0;

	Если Проведен()=1 Тогда
		Рез = "";
		глОпределитьКоррСчетаДокумента(ТекущийДокумент(),Рез,"50",1);
		КрСчДб = Рез.Получить("СчетаДебета");
		КрСчКр = Рез.Получить("СчетаКредита");
	КонецЕсли;
	
	Если ОблагаетсяНП = 1 Тогда
		
		// НП облагается
		
		Если ПустоеЗначение(СтавкаНП) = 1 Тогда
		    // Ставка НП не установлена (авто)
			
			Если ПустоеЗначение(ДокОснование) = 1 Тогда
				// рассчитаем сумму НП по ставке по умолчанию
				Ставка          = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
				СуммаНПРубВсего = СуммаРуб * Ставка.Ставка / (100 + Ставка.Ставка);
				СтрСумма        = ПредставлениеСтавкиНП(СуммаНПРубВсего, Ставка.Ставка);
			Иначе
				
					
				Если Докоснование.Вид() = "РКО" Тогда
					Ставка     = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
					Если Ставка.Ставка > 0 Тогда
						СуммаНПРубВсего = СуммаРуб * Ставка.Ставка / (100 + Ставка.Ставка);
						СтрСумма        = ПредставлениеСтавкиНП(СуммаНПРубВсего, Ставка.Ставка);
					КонецЕсли;
				Иначе
					Если ДокОснование.УчитыватьНП = 1 Тогда
						
						// выгрузим в тз колонки ставки и сумму и свернем по ставке
						ДокОснование.ВыгрузитьТабличнуюЧасть(ЗначенияПоНП, "СтавкаНП,СуммаНП");
						ЗначенияПоНП.Свернуть("СтавкаНП", "СуммаНП");
						
						// вычислим сумму документа основания со всеми налогами
						Коэфф          = РасчетКоэффициента(СуммаРуб);
						КоэффРассчитан = 1;
						
						ЗначенияПоНП.ВыбратьСтроки();
						Пока ЗначенияПоНП.ПолучитьСтроку() = 1 Цикл
						    
							Если ЗначенияПоНП.СуммаНП > 0 Тогда
								СуммаНПРуб = глПересчет(ЗначенияПоНП.СуммаНП, ДокОснование.Валюта, ДокОснование.Курс, глРубли, 1) * Коэфф;
								глДобавитьРеквизит(СтрСумма, "; ", ПредставлениеСтавкиНП(СуммаНПРуб, ЗначенияПоНП.СтавкаНП.Ставка));
								СуммаНПРубВсего = СуммаНПРубВсего + СуммаНПРуб;
							КонецЕсли;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			// рассчитаем НП по заданной ставке
			Если СтавкаНП.Ставка <> 0 Тогда
				СуммаНПРубВсего  = СуммаРуб * СтавкаНП.Ставка / (100 + СтавкаНП.Ставка);
				СтрСумма         = ПредставлениеСтавкиНП(СуммаНПРубВсего, СтавкаНП.Ставка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СуммаРубБезНП = СуммаРуб - СуммаНПРубВсего;
	
	Если ПустоеЗначение(СтавкаНДС) = 1 Тогда
	    // Ставка НДС не установлена (авто)
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			
			Если КодОперации = Перечисление.КодыОпераций.РозничнаяВыручкаЕНВД Тогда
				Ставка	= Перечисление.СтавкиНДС.БезНДС;
			Иначе
				
				// рассчитаем сумму НДС по ставке по умолчанию
				Ставка      = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
				
			КонецЕсли;
			
			СуммаНДСРуб = СуммаРубБезНП * глВыделяемыйНДС(Ставка);       
			
			Если СуммаНДСРуб <> 0 Тогда
				глДобавитьРеквизит(СтрСумма, "; ", ПредставлениеСтавкиНДС(СуммаНДСРуб, Ставка));
			КонецЕсли;
			
		Иначе
			Если Докоснование.Вид() = "РКО" Тогда
				Ставка      = глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС");
				СуммаНДСРуб = СуммаРубБезНП * глВыделяемыйНДС(Ставка);
				
				глДобавитьРеквизит(СтрСумма, "; ", ПредставлениеСтавкиНДС(СуммаНДСРуб, Ставка));
			Иначе
				Если ДокОснование.УчитыватьНДС = 1 Тогда
					
					// выгрузим в тз колонки ставки и сумму и свернем по ставке
					ДокОснование.ВыгрузитьТабличнуюЧасть(ЗначенияПоНДС, "СтавкаНДС,СуммаНДС");
					ЗначенияПоНДС.Свернуть("СтавкаНДС", "СуммаНДС");
					
					// вычислим сумму документа основания со всеми налогами
					Если КоэффРассчитан = 0 Тогда
						Коэфф = РасчетКоэффициента(СуммаРуб);
					КонецЕсли;
					
					ЗначенияПоНДС.ВыбратьСтроки();
					Пока ЗначенияПоНДС.ПолучитьСтроку() = 1 Цикл
						Если ЗначенияПоНДС.СуммаНДС > 0 Тогда
						    СуммаНДСРуб = глПересчет(ЗначенияПоНДС.СуммаНДС, ДокОснование.Валюта, ДокОснование.Курс, глРубли, 1) * Коэфф;
							глДобавитьРеквизит(СтрСумма, "; ", ПредставлениеСтавкиНДС(СуммаНДСРуб, ЗначенияПоНДС.СтавкаНДС));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		// рассчитаем НДС по заданной ставке
		ПроцНДС = глВыделяемыйНДС(СтавкаНДС);
		Если ПроцНДС <> 0 Тогда
			СуммаНДСРуб = СуммаРубБезНП * ПроцНДС;
			глДобавитьРеквизит(СтрСумма, "; ", ПредставлениеСтавкиНДС(СуммаНДСРуб, СтавкаНДС));
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(СтрСумма) = 0 Тогда
	    СтрСумма = "В том числе " + СтрСумма;
	Иначе
		СтрСумма = "без налога (НДС)";
	КонецЕсли;
	
	Таб	= СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.Вывести();
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиПриходногоОрдера","ОпцииПечатиПриходногоОрдера");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеДолгКлиента()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//
Процедура ПоКнопкеДолгКлиента()
	
	Если  (КодОперации = глКО.ОплатаОтПокупателя) 
	   или (КодОперации = глКО.Залог)
	   или (КодОперации = глКО.РозничнаяВыручка)
	   или (КодОперации = глКО.РозничнаяВыручкаЕНВД)
	Тогда
		глВзаиморасчеты(Фирма,Договор,"Покупатель");
	ИначеЕсли КодОперации = глКО.ВозвратОплатыОтПоставщика Тогда
		глВзаиморасчеты(Фирма,Договор,"Поставщик");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеДолгКлиента()   
                                      
//*****************************************************************************
// ПриВыбореВидаОплаты()

Процедура ПриВыбореВидаОплаты()
	
	КодОперации = СписокВидовОплаты.ПолучитьЗначение(СписокВидовОплаты.ТекущаяСтрока());
	УправлениеВидимостью();
	УправлениеДоступностью();
	РасчетТекущегоДолга();
	
КонецПроцедуры //ПриВыбореВидаОплаты()                                         

//*****************************************************************************
Процедура ПриИзмененииДоговора()                             
	
	Если СтарыйДоговор <> Договор Тогда
		СтарыйДоговор = Договор;
		
		Если ПустоеЗначение(Контрагент) = 1 Тогда
		    Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
			
			Если ПустоеЗначение(ПринятоОт) = 1 Тогда
				Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
					ПринятоОт = Контрагент.ЮрФизЛицо.ПолнНаименование;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеДоступностью();
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
Процедура ПриИзмененииКонтрагента()
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		СтарыйКонтрагент	= Контрагент;
		Договор				= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;
		
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеДоступностью();
		
		Если ПустоеЗначение(ПринятоОт) = 1 Тогда
			Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
				ПринятоОт = Контрагент.ЮрФизЛицо.ПолнНаименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента()                                                                

//*****************************************************************************
Процедура ПриИзмененииФизЛица()
	
	ПринятоОт = ФизЛицо.ПолнНаименование;
	
КонецПроцедуры // ПриИзмененииФизЛица()                                                                

//*****************************************************************************
//Наименование: ПриИзмененииВалюты()
// Параметры: НЕТ      
//
//Описание:
// Процедура вызывается при смене валюты документа
Процедура ПриИзмененииВалюты()
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Возврат;
	КонецЕсли;
    
	// При смене валюты зачитываем текущий курс на дату
	Курс = глКурсДляВалюты(Валюта, ДатаДок);
	
	Если Сумма <> 0 Тогда
		Если Вопрос("Пересчитать сумму документа?", "Да+Нет", 60) = "Да" Тогда
			Сумма = глПересчет(Сумма, СтараяВалюта, СтарыйКурс, Валюта, Курс);
		КонецЕсли;
	КонецЕсли;
	
	СтараяВалюта = Валюта; СтарыйКурс = Курс;
	
	ПересчетСуммыВзаиморасчетов();
	УправлениеДоступностью();	
	
КонецПроцедуры //ПриИзмененииВалюты()

//*****************************************************************************
// ПриИзмененииКурса()
//
// Параметры: 
//	Нет
//
//Описание:
// Процедура вызывается при смене курса документа
Процедура ПриИзмененииКурса()
	
	СтарыйКурс = Курс;
	ПересчетСуммыВзаиморасчетов();
	
КонецПроцедуры 

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Сумма = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПриИзмененииКурса();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// предопределенная процедура
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью();
	
КонецПроцедуры // ПриВыбореЗакладки()
                          
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст, ДокументОснование);
	Основание = глПредставлениеДокумента(ДокументОснование);
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;

	Если глЕстьРеквизитШапки("Объект",ДокументОснование.Вид())=1 Тогда
		Объект= ДокументОснование.Объект;
	КонецЕсли;
	
	Если НазваниеНабораПрав()="Продавец" Тогда
		Валюта= глРубли;
		Форма.Валюта.Доступность(0);
		ПриИзмененииВалюты();
		Форма.МожноПроводить.Доступность(0);
		МожноПроводить=0;
	Иначе
		МожноПроводить=1;
	КонецЕсли;
	
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)  
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "продажа");
	
	Если НазваниеНабораПрав()="Продавец" Тогда
		Валюта= глРубли;
		Форма.Валюта.Доступность(0);
		ПриИзмененииВалюты();
		Форма.МожноПроводить.Доступность(0);
		МожноПроводить=0;
	Иначе
		МожноПроводить=1;
	КонецЕсли;
	
	Если Скопирован = 1 Тогда	//копирование документа
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	КодОперации	 = глКО.ОплатаОтПокупателя;
	ОблагаетсяНП = ЮрЛицо.УчитыватьНП;
	
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;
	
КонецПроцедуры  // ВводНового()       

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ВводИзАвансовогоОтчета" Тогда
			КодОперации = глКО.ВозвратПодотчетныхСумм;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата			= ДатаДок;
	СтараяФирма			= Фирма;
	СтарыйДоговор		= Договор;
	СтарыйКонтрагент	= Контрагент;
	
	ЗаполнитьСписокСтавокНП();  
	
	Если СписокСтавокНП.РазмерСписка() > 0 Тогда
		Позиция	= СписокСтавокНП.НайтиЗначение(СтавкаНП);
		Если Позиция > 1 Тогда
			// ставка найдена в списке и не первая
			СписокСтавокНП.ТекущаяСтрока(Позиция);
		КонецЕсли;
	КонецЕсли;
		
	ЗаполнитьСписокСтавокНДС();
	
	Если СписокСтавокНДС.РазмерСписка() > 0 Тогда
		Позиция	= СписокСтавокНДС.НайтиЗначение(СтавкаНДС);
		Если Позиция > 1 Тогда
			// ставка найдена в списке и не первая
			СписокСтавокНДС.ТекущаяСтрока(Позиция);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВидовОплаты();
	
	Если СписокВидовОплаты.РазмерСписка() > 0 Тогда
		Позиция	= СписокВидовОплаты.НайтиЗначение(КодОперации);
		Если Позиция > 1 Тогда
			СписокВидовОплаты.ТекущаяСтрока(Позиция);
		КонецЕсли;
	КонецЕсли;
	
	НачальнаяДатаДокумента	= ДатаДок;

	НачВалюта				= Валюта;
	НачКурс					= Курс;
	НачДоговор				= Договор;
	НачКонтрагент			= Контрагент;
	НачФирма				= Фирма;   
	НачСумма				= Сумма;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
    
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	СтараяВалюта = Валюта;
	СтарыйКурс   = Курс;

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общее");
	Форма.Закладки.ДобавитьЗначение("Печать");
	          
	Форма.Закладки.ТекущаяСтрока(1);
	
	ТекстВалютыВзаим();
	РасчетТекущегоДолга();
	
	УправлениеВидимостью();
	УправлениеДоступностью();
	
	глПриВыбореБухСчета(Контекст, 1, 1);

	Если НазваниеНабораПрав()="Продавец" Тогда	//Нельзя уму сюды лазить
		Форма.Валюта.Доступность(0);
		Форма.МожноПроводить.Доступность(0);
	КонецЕсли;
	
	
КонецПроцедуры //ПриОткрытии()         

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "Счет")
	 или (ИдентЭлемДиалога = "Субконто1") 
	 или (ИдентЭлемДиалога = "Субконто2") 
	 или (ИдентЭлемДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);  
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	Если ИдентЭлемДиалога = "Субконто1" Тогда
		Если ТипЗначенияСтр(ВыбЗнач) = "Справочник" Тогда
			Если ВыбЗнач.Вид() = "Контрагенты" Тогда
				Если ВыбЗнач.ЮрФизЛицо.Выбран() = 1 Тогда
					ПринятоОт = ВыбЗнач.ЮрФизЛицо.ПолнНаименование;
				КонецЕсли;
			ИначеЕсли ВыбЗнач.Вид() = "ФизЛица"  Тогда    
				ПринятоОт = ВыбЗнач.ПолнНаименование
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораЗначения() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);      
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш, НачСумма) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;     
				НачСумма		= Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если КодОперации = глКО.ВозвратПодотчетныхСумм Тогда
	    Контрагент	= "";
		Договор		= "";
		
		Счет		= "";
		Субконто1	= "";
		Субконто2	= "";
		Субконто3	= "";
	ИначеЕсли КодОперации = глКО.Прочее Тогда
	    Контрагент	= "";
		Договор		= "";
		
		ФизЛицо		= "";
	Иначе
		Счет		= "";
		Субконто1	= "";
		Субконто2	= "";
		Субконто3	= "";
		
		ФизЛицо		= "";
	КонецЕсли;   
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()    

//Показывает полный путь для элемента справочника
Процедура ОбновиТекст()
	если (КодОперации <> СтарыйКО) 
	или  (СтарыйСписокСтатей<>СписокСтатейДР) 
	или  (СтарыйПодчинение1 <>Подчинение1)
	Тогда
		если КодОперации = глКО.СтатьиДР Тогда
			текстСписокСтатей	= СписокСтатейДР.ПолноеНаименование();
			Если ПустоеЗначение(Подчинение1)=1 Тогда
				Подчинение1=СписокСтатейДР.ФизЛицо;
			КонецЕсли;
			Если ПустоеЗначение(Комментарий)=1 тогда
				Комментарий			= текстСписокСтатей;
				Основание			= текстСписокСтатей;
				ПринятоОт			= сокрЛП(Подчинение1);
				ПоДокументу			= "";//глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				Приложение			= "";
			ИначеЕсли Вопрос("Обновить комментарий?",4,60)=6 Тогда
				Комментарий			= текстСписокСтатей;
				Основание			= текстСписокСтатей;
				ПринятоОт			= сокрЛП(Подчинение1);
				ПоДокументу			= "";//глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.ОплатаОтПокупателя Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Оплата от покупателя";
				Иначе
					Основание	= "Оплата от покупателя, по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.Залог Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Залог";
				Иначе
					Основание	= "Залог, по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.ВозвратОплатыОтПоставщика Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Возврат оплаты от поставщика";
				Иначе
					Основание	= "Возврат оплаты от поставщика, по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.ВозвратПодотчетныхСумм Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Возврат подотчетных сумм";
				Иначе
					Основание	= "Возврат подотчетных сумм, по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.РозничнаяВыручка Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Розничная выручка";
				Иначе
					Основание	= "Розничная выручка, по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		ИначеЕсли КодОперации = глКО.РозничнаяВыручкаЕНВД Тогда
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) Тогда
				ПринятоОт	= сокрЛП(Контрагент);
				Если ПустоеЗначение(ДокОснование)=1 Тогда
					Основание	= "Розничная выручка (ЕНВД)";
				Иначе
					Основание	= "Розничная выручка (ЕНВД), по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Приложение		= "";
				Комментарий		= Основание;
			КонецЕсли;
		Иначе
			если ПустоеЗначение(Комментарий)=0 Тогда
				Если Вопрос("Очистить комментарий?",4,60)=6 Тогда
					Выдать		= "";
					Комментарий	= "";
					Основание	= "";
					ПоДокументу	= "";
					Приложение	= "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтарыйСписокСтатей	= СписокСтатейДР;
	СтарыйКО			= КодОперации;
	СтарыйПодчинение1	= Подчинение1;
КонецПроцедуры



//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если (ТипЗначенияСтр(Форма.Параметр) = "ГрупповойКонтекст") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр;
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()
                                            
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ВидСчетаФактуры = "СчетФактураВыданный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";
Парам = Форма.Параметр;
СтарыйСписокСтатей	= СписокСтатейДР;
СтарыйКО			= КодОперации;
СтарыйПодчинение1	= Подчинение1;

ОбновиТекст();
