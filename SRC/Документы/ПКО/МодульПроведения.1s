Перем РабочийКО; // рабочий код операции, (по которому будет проведена операция)

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ОбработкаПроведенияПоКассе()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обработка проведения документа по регистру "Касса".
//
Процедура ОбработкаПроведенияПоКассе()
	                                                            
	Регистр.Касса.Фирма		= Фирма;
	Регистр.Касса.Касса 	= Касса;
	Регистр.Касса.Валюта 	= Валюта;
		
	Регистр.Касса.СуммаВал 	= Сумма;
	Регистр.Касса.СуммаУпр 	= глПересчет(Сумма,Валюта,Курс,глДоллары,ДатаДок);
	Регистр.Касса.СуммаРуб 	= глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок);
		
	Регистр.Касса.КодОперации = РабочийКО;
	Регистр.Касса.ДвижениеДенежныхСредств = ДвижениеДенежныхСредств;
	Если РабочийКО			= глКО.СтатьиДР тогда
		Регистр.Касса.СтатьяДР	= СписокСтатейДР;
		Регистр.Касса.ФизЛицо	= Подчинение1;
	КонецЕсли;
		
	Регистр.Касса.ДвижениеПриходВыполнить();	
	
КонецПроцедуры // ОбработкаПроведенияПоКассе()

//******************************************************************************
Процедура ОбработкаПроведенияПоВзаиморасчетам()
	
	Перем ТаблицаДолгов;
	Перем ВремРегистры;
	Перем ВремВзаиморасчеты;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Фирма,			"Фирма");
	СписокПараметров.ДобавитьЗначение(-1, 				"ЗнакДвижения"); // уменьшение долга клиента
	СписокПараметров.ДобавитьЗначение(РабочийКО,		"КодОперации");
	                       
	ВремРегистры = СоздатьОбъект("Регистры");
	Если (КодОперации=глКО.ОплатаОтПокупателя) или  (КодОперации=глКО.РозничнаяВыручка) 
			или  (КодОперации=глКО.РозничнаяВыручкаЕНВД) Тогда
		ВремВзаиморасчеты=ВремРегистры.Покупатели;
		
	ИначеЕсли КодОперации=глКО.ВозвратОплатыОтПоставщика Тогда                               
		ВремВзаиморасчеты=ВремРегистры.Поставщики;
		
	КонецЕсли;
	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремВзаиморасчеты);
	
	Если ИтогиАктуальны() = 0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений");

	ТаблДолгов.НоваяКолонка("КредДокумент");
	ТаблДолгов.НоваяКолонка("ВидДолга");
	ТаблДолгов.НоваяКолонка("СтавкаНДС");
	ТаблДолгов.НоваяКолонка("СтавкаНП");
	ТаблДолгов.НоваяКолонка("Сумма");
	ТаблДолгов.НоваяКолонка("СуммаУпр");
	ТаблДолгов.НоваяКолонка("СуммаРуб");
	ТаблДолгов.НоваяКолонка("СуммаНДС");
	ТаблДолгов.НоваяКолонка("СуммаНП");
	ТаблДолгов.НоваяКолонка("Себестоимость");
	ТаблДолгов.НоваяКолонка("ОблагаетсяНП");        
	ТаблДолгов.НоваяКолонка("ДоговорКомитента");
	    
	КурсДоллара	= глКурсДляВалюты(глДоллары,ДатаДок);
	КурсРубля	= глКурсДляВалюты(глРубли,ДатаДок);
	
	ТаблДолгов.НоваяСтрока();
	
	ТаблДолгов.КредДокумент = ТекущийДокумент(); 
	Если (КодОперации = глКО.РозничнаяВыручка)  Тогда
		ТаблДолгов.ВидДолга 	= глВД.РозничнаяВыручка; 
	ИначеЕсли КодОперации=глКО.РозничнаяВыручкаЕНВД Тогда
		ТаблДолгов.ВидДолга 	= глВД.РозничнаяВыручкаЕНВД;
	иначе
		ТаблДолгов.ВидДолга 	= глВД.Аванс;
	КонецЕсли;
		
	// суммы
    ВалютаВзаим	= Договор.ВалютаВзаиморасчетов;
		
	ТаблДолгов.СуммаУпр = ?(ВалютаВзаим=глДоллары,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глДоллары,КурсДоллара));
	ТаблДолгов.СуммаРуб = ?(ВалютаВзаим=глРубли	 ,СуммаВзаиморасчетов,глПересчет(Сумма,Валюта,Курс,глРубли,КурсРубля));
	ТаблДолгов.Сумма 	= СуммаВзаиморасчетов;
		           
	ТаблДолгов.СуммаНДС = 0;
	ТаблДолгов.СуммаНП 	= 0;
	ТаблДолгов.СтавкаНДС= СтавкаНДС;
	ТаблДолгов.СтавкаНП = ?(ОблагаетсяНП=1,СтавкаНП,ПолучитьПустоеЗначение("Справочник.СтавкиНП"));
		
	ТаблДолгов.Себестоимость = 0;
	ТаблДолгов.ОблагаетсяНП = ОблагаетсяНП;
	    
	глДвижениеДолгов(Контекст,Договор,ТаблДолгов,СписокПараметров,ВремВзаиморасчеты);
	
	ОбработкаПроведенияПоКассе();
    
КонецПроцедуры // ОбработкаПроведенияПоВзаиморасчетам()

//******************************************************************************        
Процедура ОбработкаПроведенияПоПодотчетникам()
	
	Перем ВремРегистры;
	Перем ВремПодотчетныеЛица;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Фирма,	"Фирма");
	СписокПараметров.ДобавитьЗначение(-1, "ЗнакДвижения"); // уменьшение долга подотчетника
	СписокПараметров.ДобавитьЗначение(РабочийКО,	"КодОперации");
	
	ВремРегистры = СоздатьОбъект("Регистры");
	
	ВремПодотчетныеЛица = ВремРегистры.ПодотчетныеЛица;
	глФильтрПодотчетников(Контекст, ФизЛицо, Валюта, СписокПараметров, ВремПодотчетныеЛица);
	
	Если ИтогиАктуальны() = 0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	ОбработкаПроведенияПоКассе();
	
	глОбработкаПроведенияПоПодотчетнику(Контекст,ФизЛицо,Валюта,
			Сумма,
			глПересчет(Сумма,Валюта,Курс,глДоллары,	ДатаДок),
			глПересчет(Сумма,Валюта,Курс,глРубли,	ДатаДок),
			СписокПараметров,ВремПодотчетныеЛица);                                          
	
КонецПроцедуры //ОбработкаПроведенияПоПодотчетникам()        
		

Процедура ОбработкаПроведенияПоКнигеПродаж()     
	Рег = СоздатьОбъект("Регистр.Покупатели");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение() = 1 Цикл
	    Если Рег.ВидДолга = глВД.РозничнаяВыручка Тогда
			ТекДок   = ТекущийДокумент();
			РегКнига = Регистр.КнигаПродаж;
			
			РегКнига.КредДокумент	= ТекДок;
			РегКнига.ВидДолга		= глВД.РозничнаяВыручка;
			РегКнига.СтавкаНДС		= СтавкаНДС;
				                                                
			СтНП	=?(ОблагаетсяНП	=1, СтавкаНП.Ставка/100,0);
			РегКнига.СуммаНП        = Рег.СуммаРуб * СтНП/(1+СтНП);
			РегКнига.СуммаРуб       = Рег.СуммаРуб;
			РегКнига.СуммаНДС       = (Рег.СуммаРуб-РегКнига.СуммаНП) * глВыделяемыйНДС(СтавкаНДС);
				
			РегКнига.КодОперации 	= глКО.Прочее;
				                                 
			РегКнига.ДокументОплаты = ТекДок;
			РегКнига.ДвижениеРасходВыполнить();    
			
		// Сделаем движения по книге продаж по оплате	
		ИначеЕсли (Рег.ВидДолга = глВД.ДолгЗаТоварыВРознице) 
			  или (Рег.ВидДолга = глВД.ДолгЗаПродукциюВРознице)
			  или (Рег.ВидДолга = глВД.ДолгЗаУслугиВРознице) Тогда
			ТекДок   = ТекущийДокумент();
			РегКнига = Регистр.КнигаПродаж;                                         
			
			РегКнига.КредДокумент = Рег.КредДокумент;
				  	
			ВремРегистры = СоздатьОбъект("Регистры");
			ВремКнигаПродаж = ВремРегистры.КнигаПродаж;

			ВремКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент",Рег.КредДокумент,1);
			ВремКнигаПродаж.УстановитьЗначениеФильтра("ВидДолга",    Рег.ВидДолга,    1); 
		    
			// при необходимости делаем временный расчет итогов
			Если ИтогиАктуальны() = 0 Тогда
				ВремКнигаПродаж.ВременныйРасчет();
				ВремРегистры.Актуальность(1);
				ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
			КонецЕсли;    

			ТИКнигаПродаж = СоздатьОбъект("ТаблицаЗначений");
			
			ВремКнигаПродаж.ВыгрузитьИтоги(ТИКнигаПродаж,1,1);  
			          
			ТИКнигаПродаж.ВыбратьСтроки();       
			ОстПогСумма = Рег.СуммаРуб;
			Пока ТИКнигаПродаж.ПолучитьСтроку() = 1 Цикл
				СуммаСписания = Мин(ОстПогСумма, ТИКнигаПродаж.СуммаРуб);
				Если ТИКнигаПродаж.СуммаРуб = 0  Тогда 
					Продолжить;
				Иначе
					КоэффСписания = СуммаСписания/ТИКнигаПродаж.СуммаРуб;
				КонецЕсли;
				РегКнига.ВидДолга 	= ТИКнигаПродаж.ВидДолга;
				РегКнига.СтавкаНДС 	= ТИКнигаПродаж.СтавкаНДС;
				РегКнига.СтавкаНП 	= Рег.СтавкаНП;
				РегКнига.СуммаНДС 	= ТИКнигаПродаж.СуммаНДС * КоэффСписания;
				РегКнига.СуммаНП 	= ТИКнигаПродаж.СуммаНП * КоэффСписания;
				РегКнига.СуммаРуб 	= СуммаСписания;
				РегКнига.КодОперации= глКО.Прочее;    
				РегКнига.ДокументОплаты = ТекДок;
				РегКнига.ДвижениеРасходВыполнить();   
				ОстПогСумма = ОстПогСумма - СуммаСписания;
			КонецЦикла;
	    КонецЕсли;
	КонецЦикла;
КонецПроцедуры             

//******************************************************************************
// ПроверкаДоговора()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  1 - если договор рублевый, 0 - если валютный
//
// Описание:
//  Проверяет является ли договор, для приема розничной выручки рублевым
//
Функция ПроверкаДоговора()
	Если Договор.ВалютаВзаиморасчетов = глРубли Тогда
	    Возврат 1;                                   
	Иначе                                            
		глНеПроводить(Контекст, "Розничную выручку можно принимать только по договору в валюте бух. учета!");
		Возврат 0;
	КонецЕсли;	
КонецФункции // ПроверкаДоговора()


//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Если МожноПроводить=1 тогда	//Только тогда можно что-либо делать
		// Удаление движений по регистрам.
		Для Номер = 1 По Метаданные.Регистр() Цикл
			ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
		КонецЦикла;
		
		Если КодОперации=глКО.ОплатаОтПокупателя Тогда
			ОбработкаПроведенияПоВзаиморасчетам();
		ИначеЕсли КодОперации=глКО.ВозвратОплатыОтПоставщика Тогда
			ОбработкаПроведенияПоВзаиморасчетам();
		ИначеЕсли КодОперации=глКО.ВозвратПодотчетныхСумм Тогда
			ОбработкаПроведенияПоПодотчетникам();
		ИначеЕсли (КодОперации=глКО.РозничнаяВыручка)  Тогда
			Если ПроверкаДоговора() = 0 Тогда
				Возврат;
			КонецЕсли;
			ОбработкаПроведенияПоВзаиморасчетам();   
			ОбработкаПроведенияПоКнигеПродаж();     
		ИначеЕсли (КодОперации=глКО.РозничнаяВыручкаЕНВД) Тогда
			Если ПроверкаДоговора() = 0 Тогда
				Возврат;
			КонецЕсли;
			ОбработкаПроведенияПоВзаиморасчетам();   
		Иначе                          
			ОбработкаПроведенияПоКассе();
		КонецЕсли;       
	КонецЕсли;
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	Если МожноПроводить=1 тогда	//Только тогда можно что-либо делать
		// Проверка заполненности обязательных реквизитов.
		СписокОбязатРеквизитов = "Фирма,Валюта,Касса,Сумма";
		Если (КодОперации=глКО.ОплатаОтПокупателя) или 
		(КодОперации=глКО.РозничнаяВыручка) или
		(КодОперации=глКО.РозничнаяВыручкаЕНВД) или
		(КодОперации=глКО.ВозвратОплатыОтПоставщика) Тогда
			СписокОбязатРеквизитов = СписокОбязатРеквизитов + ",Контрагент,Договор";
			
		ИначеЕсли (КодОперации=глКО.ВозвратПодотчетныхСумм) Тогда
			СписокОбязатРеквизитов = СписокОбязатРеквизитов + ",ФизЛицо";
		КонецЕсли;     
		
		Если глВсеРеквизитыДокументаЗаполнены(Контекст,СписокОбязатРеквизитов)=0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Валюта <> глРубли Тогда
			РабочийКО = глКО.ЗначениеПоИдентификатору(""+КодОперации.Идентификатор()+"Вал");
		Иначе
			РабочийКО = КодОперации;
		КонецЕсли;
		
		// Проведение по регистрам оперативного учета.	
		Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
			ПроведениеПоРегистрам();
			
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		глПриПроведении(Контекст, ВидыДвижений);
		
		Если КодОперации = глКО.ОплатаОтПокупателя тогда
			
			//Регистр.Взаиморасчеты.Контрагент = Контрагент;                                                 
			//
			//Валюта2 = Константа.ВалютаСчетовФактур;
			//Валюта2.ИспользоватьДату(ДатаДок);
			//Курс2	= Валюта2.Курс; 
			//
			//
			//Регистр.Взаиморасчеты.Долг		= глПересчет(Сумма,Валюта,Курс,Валюта2,Курс2);
			//Регистр.Взаиморасчеты.Скидка	= 0;
			//Регистр.Взаиморасчеты.ДвижениеРасходВыполнить();
			//******************************************************************************
			// новый регистр
			Регистр.Взаиморасчеты2.Контрагент = Контрагент;                                                 
			////если ДатаДок<=дата("31.12.05") Тогда
			//	Регистр.Взаиморасчеты2.Долг		= Сумма;
			//	Регистр.Взаиморасчеты2.Скидка	= 0;
			//	Регистр.Взаиморасчеты2.Валюта	= Валюта;
			//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
			//	Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
			//Иначе
			если ПустоеЗначение(Проект)=1 Тогда
				НеПроводитьДокумент();
				Сообщить("Не указан проект - нет возможности отнести к определенному виду оплаты
				|документ не проводится!");
				Возврат;
			Иначе
				Регистр.Взаиморасчеты2.Долг		= Сумма;
				Регистр.Взаиморасчеты2.Скидка	= 0;
				Регистр.Взаиморасчеты2.Валюта	= Валюта;
			КонецЕсли;
			Если ПустоеЗначение(ДокОснование) = 1 Тогда
				Регистр.Взаиморасчеты2.ДокументРасчета	= ТекущийДокумент();
			Иначе
				Регистр.Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(Контекст);
				Попытка
					Если ДокОснование.Вид() = "Реализация" Тогда
						Регистр.Взаиморасчеты2.Склад = ДокОснование.Склад;
					ИначеЕсли (Регистр.Взаиморасчеты2.ДокументРасчета.Вид() = "ПеремещениеТМЦ_Розница")
						или (Регистр.Взаиморасчеты2.ДокументРасчета.Вид() = "ПеремещениеТМЦ") Тогда 
						Регистр.Взаиморасчеты2.Склад 			= Регистр.Взаиморасчеты2.ДокументРасчета.СкладПолучатель;	
					Иначе		
						Регистр.Взаиморасчеты2.Склад 			= Регистр.Взаиморасчеты2.ДокументРасчета.Склад;
					КонецЕсли;	
				Исключение
				КонецПопытки; 
				Если ПустоеЗначение(Регистр.Взаиморасчеты2.Склад) = 0 Тогда
					Склад = Регистр.Взаиморасчеты2.Склад;
				Иначе
					Регистр.Взаиморасчеты2.Склад = Склад;
				КонецЕсли;
			КонецЕсли; 
			Если ПустоеЗначение(Регистр.Взаиморасчеты2.Склад) = 1 Тогда 
				Сообщить("Не указан склад по взаиморасчетам 2!");
			КонецЕсли;	
			Если Проект.ВидОплаты=глКО.Наличные Тогда
				Регистр.Взаиморасчеты2.ВидОплаты= глКО.Наличные;
				Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
			ИначеЕсли Проект.ВидОплаты=глКО.Безнал Тогда
				Регистр.Взаиморасчеты2.ВидОплаты= глКО.Безнал;
				Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
			ИначеЕсли Проект.ВидОплаты=глКО.Прочее Тогда
				Регистр.Взаиморасчеты2.ВидОплаты= глКО.Прочее;
				Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
			ИначеЕсли Проект.ВидОплаты=глКО.СтарыеДанные Тогда
				Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
				Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
			Иначе
				НеПроводитьДокумент();
				Сообщить("Проект не отнесен к определенному виду оплаты
				|документ не проводится!");
				Возврат;
			КонецЕсли;
			//КонецЕсли;
		КонецЕсли;                                               
	КонецЕсли;	
	
КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
