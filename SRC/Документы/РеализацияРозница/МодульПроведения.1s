Перем ФирмаДляОстатковТМЦ;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//       
//******************************************************************************
// КонтрольДатыОплаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  В случае, если дата оплаты корректна возвращается пустая строка, 
//  в противном случае - соответствующий текст предупреждения.
//
// Описание:
//  Проверяет соответствует ли дата оплаты документа глубине кредита, заданного
//  для данного договора. Вызывается из модулей документов реализации.
//
Функция КонтрольДатыОплаты() 
	Если ДатаОплаты < ДатаДок Тогда
	    Возврат "Дата оплаты меньше даты документа!";
	КонецЕсли;
	Если ДатаОплаты > глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита) Тогда
	    Возврат "Дата оплаты превышает глубину кредита!";
	Иначе
		Возврат "";
	КонецЕсли;	
КонецФункции // глКонтрольДатыОплаты()

//******************************************************************************
// КонтрольКредитаПройден(ВремПокупатели)
//
// Параметры:
//  ВремПокупатели- регистр "Покупатели", рассчитанный при необходимости
//
// Возвращаемое значение:
//  1 - контроль пройден (можно проводить), 0 - не пройден (не проводить!).
//
// Описание:
//  Проводит контроль величины кредита.
//
Функция КонтрольКредитаПройден(ВремПокупатели)
	
	
	РазрешитьПревышениеКредита = глПолучитьПолномочие("РазрешитьПревышениеКредита");
	
	// Проверим дату оплаты
	КонтрольДатыОплаты = КонтрольДатыОплаты();
	Если ПустоеЗначение(КонтрольДатыОплаты) = 0 Тогда 
	    Если РазрешитьПревышениеКредита <> 0  Тогда
			глСообщениеПроведения(КонтрольДатыОплаты+ РазделительСтрок+
			"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент());
		Иначе                   
			глНеПроводить(Контекст,КонтрольДатыОплаты);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;			
	
	Если Договор.НеКонтролироватьКредит = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	ТекущийДолг = ВремПокупатели.СводныйОстаток(Фирма,Договор,,,,"СуммаВал");
	
	Если (ТекущийДолг + СуммаВзаиморасчетов) > (Договор.СуммаКредита) Тогда
		                                                      
		ВалютаКредита = Договор.ВалютаВзаиморасчетов;
		
		СтрокаСообщ = "Сумма накладной вместе с текущим долгом превышает сумму максимального кредита клиенту!
					  |   Текущий долг:   "+глФРМ(ТекущийДолг,ВалютаКредита)+"
					  |   Остаток кредита:"+глФРМ(Договор.СуммаКредита - ТекущийДолг,ВалютаКредита)+"
					  |   Сумма накладной:"+ глФРМ(СуммаВзаиморасчетов,ВалютаКредита)+"!";
		
	    Если РазрешитьПревышениеКредита <> 0  Тогда
			глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+
			"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент());
			Возврат 1;
		Иначе                   
			глНеПроводить(Контекст,СтрокаСообщ);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КонтрольКредитаПройден()

//******************************************************************************
// ВидДолгаПоСтатусу(СтатусПартии)
//
// Параметры:
//  СтатусПартии - значение перечисления статуса партии
//
// Возвращаемое значение:
//  Значение перечисления видов долга.
//
// Описание:
//  Возвращает вид долга, соответствующий статусу партии.
//
Функция ВидДолгаПоСтатусу(СтатусПартии)
		
	Если СтатусПартии	= глСП.Т_Принятый Тогда
		Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда  
			Возврат глВД.ДолгЗаТоварыПринятыеВРознице;
		Иначе
			Возврат глВД.ДолгЗаТоварыПринятые;
		КонецЕсли;

	ИначеЕсли (СтатусПартии	= глСП.Т_Купленный)
			или (СтатусПартии	= глСП.Т_ВРознице)
			или	(СтатусПартии	= глСП.Т_Тара) Тогда 
		Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда  
			Если ОблагаетсяЕНВД = 1 Тогда
				Возврат глВД.ДолгЗаТоварыВРозницеЕНВД;
			Иначе
				Возврат глВД.ДолгЗаТоварыВРознице;
			КонецЕсли;
		Иначе
			Возврат глВД.ДолгЗаТовары;
		КонецЕсли;
	ИначеЕсли СтатусПартии	= глСП.Продукция Тогда
		Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда  
			Возврат глВД.ДолгЗаПродукциюВРознице;
		Иначе
			Возврат глВД.ДолгЗаПродукцию;
		КонецЕсли;
		
	ИначеЕсли Лев(СтатусПартии.Идентификатор(),2)	= "М_" Тогда
		Возврат глВД.ДолгЗаМатериалы;
		
	Иначе
		глСообщениеПроведения("Неизвестный статус партии: "+СтатусПартии, ТекущийДокумент());
	КонецЕсли;	
	
КонецФункции // ВидДолгаПоСтатусу()

//******************************************************************************
// ПеремещениеВРозницу(ТаблицаДокумента, ТаблСписПартий)
//
// Параметры: 
//  ТаблицаДокумента     - подготовленная таблица документа
//	ТаблСписПартий - партии, списанные по документу 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
// Перемещает в розницу ТМЦ, продаваемые с оптового склада
//
Процедура ПеремещениеВРозницу(ТаблицаДокумента, ТаблСписПартий, СписокПараметров)
	
	ТаблСписПартий.ВыбратьСтроки();
	Пока  ТаблСписПартий.ПолучитьСтроку()=1 Цикл
		//измерения
		Регистр.ПартииНаличие. Фирма 			= Фирма;
		Регистр.ПартииНаличие. МОЛ				= Склад.МОЛ;
		Регистр.ПартииНаличие. Номенклатура		= ТаблСписПартий.Номенклатура;     
		Если ((ТаблСписПартий.СтатусПартии		= Перечисление.СтатусыПартии.Т_Купленный) или (ТаблСписПартий.СтатусПартии = Перечисление.СтатусыПартии.Т_ВРознице)) Тогда
			Регистр.ПартииНаличие. СтатусПартии	= Перечисление.СтатусыПартии.Т_ВРознице; 
		Иначе
			Регистр.ПартииНаличие. СтатусПартии	= ТаблСписПартий.СтатусПартии;
		КонецЕсли;
		Регистр.ПартииНаличие. КодОперации	    = глКО.ПередачаВРозницу;  
		Регистр.ПартииНаличие. Партия			= ТаблСписПартий.Партия;
		Регистр.ПартииНаличие. ДатаПартии		= ТаблСписПартий.ДатаПартии;
		
		// Для определения продажной цены надо получить строку документа
		ПолучитьСтрокуПоНомеру(ТаблСписПартий.НомерСтрокиДокумента);
		Регистр.ПартииНаличие. ЦенаПрод			= Цена/?(Коэффициент = 0, 1, Коэффициент);
		
		// ресурсы
		Регистр.ПартииНаличие. Количество		= ТаблСписПартий.Количество;
		Регистр.ПартииНаличие. СуммаУпр			= ТаблСписПартий.СуммаУпр;
		Регистр.ПартииНаличие. СуммаРуб			= ТаблСписПартий.СуммаРуб;
		Регистр.ПартииНаличие. СуммаБезНДС		= ТаблСписПартий.СуммаБезНДС;
		// реквизиты                                          
		
		// Передаем в розницу по полной сумме без учета скидки
		Регистр.ПартииНаличие.ПродСтоимость = ТаблСписПартий.СуммаПродРуб + ТаблСписПартий.СкидкаРуб;    
	
		Регистр.ПартииНаличие.ПривязыватьСтроку(ТаблСписПартий.НомерСтрокиДокумента);
		
		Регистр.ПартииНаличие.Выручка = 0;

		Регистр.ПартииНаличие.ДвижениеПриходВыполнить();            
		
		Если ОблагаетсяЕНВД = 1 Тогда
			Регистр.ПартииНаличие.КодОперации 		= глКО.РозничнаяПродажаЕНВД;
		Иначе
			Регистр.ПартииНаличие.КодОперации 		= глКО.РозничнаяПродажа;
		КонецЕсли;
		
		// Реализуем с учетом скидки
		Регистр.ПартииНаличие.ПродСтоимость = ТаблСписПартий.СуммаПродРуб;
		
		Регистр.ПартииНаличие.Выручка = ТаблСписПартий.СуммаПродРуб - ТаблСписПартий.НДСПрод - ТаблСписПартий.НППрод;
		
		Регистр.ПартииНаличие.ДвижениеРасходВыполнить();
	КонецЦикла;
	
	// оприходование
	СписокПараметров.Установить("Склад", Склад);
	СписокПараметров.Установить("Фирма", Фирма);
	
КонецПроцедуры // ПеремещениеВРозницу()

    
//******************************************************************************
// ФильтрЗаявок(ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтров для отбора итогов регистра Заявки и ЗаказыЗаявки.
//
Процедура ФильтрЗаявок(ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки)
	
	Перем ТаблицаНоменклатуры;
	
	ВремЗаявки.УстановитьЗначениеФильтра("Фирма",ФирмаДляОстатковТМЦ, 2);
	ВремЗаявки.УстановитьЗначениеФильтра("ДоговорПокупателя", Договор,1);
	
	Если ИтогиАктуальны()=0 Тогда
		ТаблицаТМЦ.Выгрузить(ТаблицаНоменклатуры);
		Если ТаблицаУслуг.КоличествоСтрок()>0 Тогда
			БылоСтрок = ТаблицаНоменклатуры.КоличествоСтрок();
			ТаблицаНоменклатуры.КоличествоСтрок(БылоСтрок+ТаблицаУслуг.КоличествоСтрок());
			ТаблицаНоменклатуры.Заполнить(ТаблицаУслуг,БылоСтрок+1,ТаблицаНоменклатуры.КоличествоСтрок());
		КонецЕсли;
	
		СписокТМЦ = СоздатьОбъект("СписокЗначений");
	    ТаблицаНоменклатуры.Выгрузить(СписокТМЦ,,,"Номенклатура");
    	ВремЗаявки.      УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,2);
        ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,2);
		
		ВремЗаявки.      ВременныйРасчет();
		ВремЗаказыЗаявки.ВременныйРасчет();
	КонецЕсли;
	
КонецПроцедуры // ФильтрЗаявок()

//******************************************************************************
// ПогаситьРезерв(ТИРезервы, ПогаситьКолВо)
//
// Параметры: 
//  ТИРезервы     - спозиционированная на нужной строке таблица значений итогов 
//                  регистра РезервыТМЦ
//  ПогаситьКолВо - количество номенклатуры, которое осталось еще списать по резервам.
//
// Возвращаемое значение:
//  Количество, на которое был уменьшен резерв.
//
// Описание:
//  Списывает резерв по договору, уменьшает количество, которое осталось погасить по заявке.
//
Функция ПогаситьРезерв(ТИРезервы, ПогаситьКолВо)
	
	ОстРезерва  = ТИРезервы.Количество;
	ПогКРезерва = Макс(Мин(ПогаситьКолВо, ОстРезерва),0);
	Если ПогКРезерва <> 0 Тогда
		// измерения                                                
		Регистр.РезервыТМЦ.Склад            = ТИРезервы.Склад;
		Регистр.РезервыТМЦ.ДоговорПокупателя= ТИРезервы.ДоговорПокупателя;
		Регистр.РезервыТМЦ.ЗаявкаПокупателя = ТИРезервы.ЗаявкаПокупателя;
		Регистр.РезервыТМЦ.Фирма			= ТИРезервы.ЗаявкаПокупателя.Фирма;
		// ресурсы
		Регистр.РезервыТМЦ.Количество       = ПогКРезерва;
		// выполним движение
		Регистр.РезервыТМЦ.ДвижениеРасходВыполнить();
		
		ПогаситьКолВо = ПогаситьКолВо - ПогКРезерва;
	КонецЕсли;
	
	Возврат ПогКРезерва;
	
КонецФункции // ПогаситьРезерв()

//******************************************************************************
// ПогаситьЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ПогаситьКолВо, НужноУменьшитьЗаказ = 1)
//
// Параметры: 
//  ВремЗаявки             - расчитанный и отфильтрованный нужным образом регистр "Заявки",
//  ВремЗаказыЗаявки       - расчитанный и отфильтрованный нужным образом регистр "ЗаказыЗаявки",
//  ПогаситьКолВо          - количество, которое нужно погасить по заявкам,
//  НужноУменьшитьЗаказ    - флаг, не обязательный, по умолчанию 1, если стоит, то надо уменьшать 
//                           количество заказанного поставщикам по данной заявке.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Списывает нужное количество с регистров Заявок и ЗаказовЗаявок.
//
Процедура ПогаситьЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ПогаситьКолВо, НужноУменьшитьЗаказ = 1)
	Перем ТИЗаявки, ТИЗЗ;
	
	ВремЗаявки.ВыгрузитьИтоги(ТИЗаявки,1,1);
	
	ТИЗаявки.Сортировать ("ЗаявкаПокупателя",1); //сортируем заявки по дате
	
	ТИЗаявки.ВыбратьСтроки();
	Пока (ТИЗаявки.ПолучитьСтроку()=1) 
	и    (ПогаситьКолВо>0) 
	Цикл    
		
		ОстЗаявКРасход = ТИЗаявки.КоличествоРасход;
		ОстЗаявСРасход = ТИЗаявки.СтоимостьРасход;
		
		ПогЗаявКРасход = Макс(Мин(ОстЗаявКРасход, ПогаситьКолВо),0);
		ПогЗаявСРасход = ?(ОстЗаявКРасход = 0, 0, ОстЗаявСРасход * ПогЗаявКРасход / ОстЗаявКРасход);
		
		Если ПогЗаявКРасход <> 0 Тогда
			
			Регистр.Заявки.ДоговорПокупателя= ТИЗаявки.ДоговорПокупателя;
			Регистр.Заявки.ЗаявкаПокупателя = ТИЗаявки.ЗаявкаПокупателя;
			Регистр.Заявки.Фирма			= ТИЗаявки.ЗаявкаПокупателя.Фирма;
			
			Регистр.Заявки.КоличествоРасход	= ПогЗаявКРасход;
			Регистр.Заявки.СтоимостьРасход	= ПогЗаявСРасход;
			
			Регистр.Заявки.ДвижениеРасходВыполнить();      
			
			ПогаситьКолВо   = ПогаситьКолВо - ПогЗаявКРасход;
			
			// Заказ нужно уменьшать только тогда, когда не снимали резерв
			Если НужноУменьшитьЗаказ = 1 Тогда
			    
				ОстПогКПоЗаявке = ПогЗаявКРасход;
				
				// посмотрим, а не числилась ли привязка к заказу поставщика по заявке?
				ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ТИЗаявки.ЗаявкаПокупателя,1);
				ВремЗаказыЗаявки.ВыгрузитьИтоги(ТИЗЗ,1,1);
				
				ТИЗЗ.ВыбратьСтроки();
				Пока (ТИЗЗ.ПолучитьСтроку()=1)
				и    (ОстПогКПоЗаявке <> 0)
				Цикл                                       
					ОстПоЗаказу  = ТИЗЗ.Количество;
					ПогКПоЗаказу = Макс(Мин(ОстПогКПоЗаявке, ОстПоЗаказу),0);
					Если ПогКПоЗаказу <> 0 Тогда
						// измерения
						Регистр.ЗаказыЗаявки.ЗаявкаПокупателя = ТИЗЗ.ЗаявкаПокупателя;
						Регистр.ЗаказыЗаявки.ЗаказПоставщику  = ТИЗЗ.ЗаказПоставщику;
						// ресурсы
						Регистр.ЗаказыЗаявки.Количество       = ПогКПоЗаказу;
						// выполним движение
						Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
						
						ОстПогКПоЗаявке = ОстПогКПоЗаявке - ПогКПоЗаказу;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли; // если надо уменьшать заказ
		КонецЕсли; // если надо погасить заявку
		
	КонецЦикла; // по выбранным итогам
	
	
КонецПроцедуры // ПогаситьЗаявки()

//******************************************************************************
// ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ - подготовленная таблица документа. 
//  ВремЗаявки - регистр "Заявки", рассчитанный и с наложенными фильтрами
//  ВремЗаказыЗаявки - регистр "ЗаказыЗаявки", рассчитанный и с наложенными фильтрами
//  ВремРезервыТМЦ   - регистр "РезервыТМЦ", рассчитанный и с наложенными фильтрами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит списание по регистрам "Заявки", "ЗаказыЗаявки"
//
Процедура ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ)
	
	Перем ТИЗаявки, ТИРезервы, ТекСтрока;  
	
	                                       
	ВремРезервыТМЦ.УстановитьЗначениеФильтра("ДоговорПокупателя",Договор,1);
	
	ТаблицаТМЦ.ВыбратьСтроки();
	Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл  
		
		ТекНоменк              = ТаблицаТМЦ.Номенклатура;
		
		// общие для всех движений измерения
    	Регистр.Заявки.      Номенклатура 	= ТекНоменк;
		Регистр.РезервыТМЦ.  Номенклатура 	= ТекНоменк;
        Регистр.ЗаказыЗаявки.Номенклатура 	= ТекНоменк;
		                                                                 
		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
		ВремЗаявки.      УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
		ВремРезервыТМЦ.  УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
		
		ПогаситьКолВо = ТаблицаТМЦ.Количество;
		
		// сначала спишем все резервы, которые были сделаны на этом складе по этому договору с покупателем
		ВремРезервыТМЦ.ВыгрузитьИтоги(ТИРезервы,1,1);

		ТИРезервы.Сортировать ("-Склад, ЗаявкаПокупателя",1); //сортируем по складам, чтобы пустой склад оказался в последней очереди, а заявки по дате
		
		ТекСтрока = 0;
		Если ТИРезервы.НайтиЗначение(Склад, ТекСтрока, "Склад") = 1 Тогда
			КолСтрок = ТИРезервы.КоличествоСтрок();
			Пока (ТекСтрока     <= КолСтрок) 
			   и (ПогаситьКолВо > 0) Цикл
				ТИРезервы.ПолучитьСтрокуПоНомеру(ТекСтрока); 
				Если ТИРезервы.Склад <> Склад Тогда
				    Прервать; // Уже не тот склад
				КонецЕсли;
				
				ПогКРезерва = ПогаситьРезерв(ТИРезервы, ПогаситьКолВо);
				
				//Теперь на то же количество надо погасить Заявку
				ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ТИРезервы.ЗаявкаПокупателя,1);
				ПогаситьЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ПогКРезерва,0);
				
			    ТекСтрока = ТекСтрока + 1;
			КонецЦикла;
		КонецЕсли;
		
		// на остальных складах по тому же договору
		Если ПогаситьКолВо > 0 Тогда
		    ТИРезервы.ВыбратьСтроки();
			Пока (ТИРезервы.ПолучитьСтроку() = 1)
			   и (ПогаситьКолВо > 0) Цикл
			    
				Если ТИРезервы.Склад = Склад Тогда
				    Продолжить; // Резервы по этому складу уже погасили в предыдущем цикле
				КонецЕсли;
				
				ПогКРезерва = ПогаситьРезерв(ТИРезервы, ПогаситьКолВо);
				
				//Теперь на то же количество надо погасить Заявки
				ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ТИРезервы.ЗаявкаПокупателя,1);
				ПогаситьЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ПогКРезерва, 0);
			КонецЦикла;
		КонецЕсли;
		
		// если что-то осталось, то  гасим остальные зявки по этому договору,
		// по которым не было резервов                            
		Если ПогаситьКолВо > 0 Тогда
			
			ВремЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя",,0);
			ПогаситьЗаявки(ВремЗаявки, ВремЗаказыЗаявки, ПогаситьКолВо, 1);
		КонецЕсли;
	КонецЦикла; // по строкам документа

КонецПроцедуры // ДвижениеЗаявокПокупателя()


//******************************************************************************
// ПроведениеПоРегистрам()
//                                    
// Параметры:
//	нет                                            
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий, ТаблСписПартийКом;    
	Перем ВремРегистры;
	Перем ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие, ВремПокупатели;
	Перем ВремЗаявки, ВремЗаказыЗаявки;
	
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
   	
	ТаблицаУслуг = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ   = глПодготовитьТаблицуДокумента(Контекст,1,ТаблицаУслуг);     
	
	КодОперации	 = ?(ОблагаетсяЕНВД=1,глКО.РозничнаяПродажаЕНВД,глКО.РозничнаяПродажа);
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");
	                              
	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
	
	ВремРегистры 		= СоздатьОбъект("Регистры");
	ВремОстаткиТМЦ  	= ВремРегистры.ОстаткиТМЦ;
	ВремРезервыТМЦ  	= ВремРегистры.РезервыТМЦ;
	ВремПартииНаличие 	= ВремРегистры.ПартииНаличие;
	ВремПокупатели 		= ВремРегистры.Покупатели;  

	// В случае зачета розничной выручки нам необходимо сторнировать аванс по книге продаж  
	Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда
		ВремКнигаПродаж = ВремРегистры.КнигаПродаж;
		Если ИтогиАктуальны() = 0 Тогда
			ВремКнигаПродаж.ВременныйРасчет();
		КонецЕсли;
	Иначе
		ВремКнигаПродаж = 0;
	КонецЕсли;              
	
	
	ВремЗаявки 		= ВремРегистры.Заявки;
	ВремЗаказыЗаявки= ВремРегистры.ЗаказыЗаявки;
	ФильтрЗаявок(ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки);
	Если ИтогиАктуальны() = 0 Тогда
		ВремЗаявки.ВременныйРасчет();
		ВремЗаказыЗаявки.ВременныйРасчет();
	КонецЕсли;	               
	глФильтрОстатковТМЦ  (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремОстаткиТМЦ,ВремРезервыТМЦ  );
	глФильтрПартийТМЦ    (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремПартииНаличие              );     
	глФильтрДолгов       (Контекст, Договор, 	СписокПараметров, 	ВремПокупатели                 );	
	
	Если ИтогиАктуальны()=0 Тогда    
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	// контроль величины кредита клиенту (с учетом права пользователя превышать его)
	Если КонтрольКредитаПройден(ВремПокупатели) = 0 Тогда
		Возврат;
	КонецЕсли;   
	
	                   
	// Если мы продаем товар не с розничного склада, переместим его сначала в розницу Тогда
	Если Склад.РозничныйСклад = 0 Тогда
		СписокПараметров.Установить("КодОперации", глКО.ПередачаВРозницу);
		
		// партии ТМЦ
		глСписаниеПартийТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом); 
		
	    ПеремещениеВРозницу(ТаблицаТМЦ,ТаблСписПартий, СписокПараметров);
	КонецЕсли;     
	
	СписокПараметров.Установить("КодОперации", КодОперации);
	
	// остатки ТМЦ
	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаТМЦ,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
		Возврат;
	КонецЕсли; 
	              
	// партии ТМЦ
	Если Склад.РозничныйСклад = 1 Тогда
		// Сформируем список статусов партий
		глСписаниеПартийТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом);
	КонецЕсли;
	                   
	
	// движение оборотного регистра "продажи" 
	ТаблСписПартий.ВыбратьСтроки();
	//Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
	//	глДвижениеОборотовПродаж(Контекст,
	//							Фирма,
	//							Контрагент,
	//							ТаблСписПартий.Партия.Поставщик,
	//							ТаблСписПартий.Номенклатура,
	//							ТаблСписПартий.Количество,
	//							ТаблСписПартий.СуммаУпр,
	//							ТаблСписПартий.СуммаПродУпр);
	//КонецЦикла;
	
	ТаблСписПартий.Свернуть("СтатусПартии,СтавкаНП,СтавкаНДС,ДоговорКомитента","СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СуммаБезНДС");
	ТаблСписПартий.НоваяКолонка("КредДокумент");
	ТаблСписПартий.НоваяКолонка("ВидДолга");
	ТаблСписПартий.НоваяКолонка("Сумма");
	ТаблСписПартий.НоваяКолонка("СуммаУпр");
	ТаблСписПартий.НоваяКолонка("СуммаРуб");
	ТаблСписПартий.НоваяКолонка("СуммаНДС");
	ТаблСписПартий.НоваяКолонка("СуммаНП");
	ТаблСписПартий.НоваяКолонка("Себестоимость");
	ТаблСписПартий.НоваяКолонка("ОблагаетсяНП");
	
	ТаблСписПартий.ВыбратьСтроки();
	Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
		ТаблСписПартий.КредДокумент = ТекущийДокумент();       
		ТаблСписПартий.ВидДолга		= ВидДолгаПоСтатусу(ТаблСписПартий.СтатусПартии);
		ТаблСписПартий.Себестоимость= ТаблСписПартий.СуммаБезНДС;
		ТаблСписПартий.СуммаНДС		= ТаблСписПартий.НДСПрод;
	 	ТаблСписПартий.СуммаНП		= ТаблСписПартий.НППрод;
		ТаблСписПартий.Сумма		= ТаблСписПартий.СуммаПрод;
		ТаблСписПартий.СуммаУпр		= ТаблСписПартий.СуммаПродУпр;
		ТаблСписПартий.СуммаРуб		= ТаблСписПартий.СуммаПродРуб;
		ТаблСписПартий.ОблагаетсяНП = УчитыватьНП;
	КонецЦикла;                                                                       
	                                                            
	СписокПараметров.Установить("ЗнакДвижения", 1); // идет увеличение долга  
	глДвижениеДолгов(Контекст,Договор,ТаблСписПартий,СписокПараметров,ВремПокупатели,,ВремКнигаПродаж);
	
	// запомним, что мы продали принятые на комиссию товары...
	ТаблСписПартийКом.ВыбратьСтроки();
	Пока ТаблСписПартийКом.ПолучитьСтроку()=1 Цикл                    
		Регистр.РеализованныйТовар.Фирма			= ТаблСписПартийКом.Фирма;
		Регистр.РеализованныйТовар.Договор 			= ТаблСписПартийКом.Партия.ДоговорПоставщика;
		Регистр.РеализованныйТовар.Номенклатура 	= ТаблСписПартийКом.Номенклатура;
		Регистр.РеализованныйТовар.Партия 			= ТаблСписПартийКом.Партия;
		Регистр.РеализованныйТовар.ДокПродажи		= ТекущийДокумент();
		Регистр.РеализованныйТовар.Количество 		= ТаблСписПартийКом.Количество;
		Регистр.РеализованныйТовар.ПродСтоимость 	= ТаблСписПартийКом.СуммаПродРуб - ТаблСписПартийКом.НППрод;
		Регистр.РеализованныйТовар.ДвижениеПриходВыполнить();
	КонецЦикла;                                                                       
	                                                            
	// реализация услуг  
	глДвижениеПартийУслуг(Контекст, ТаблицаУслуг, СписокПараметров);
	
	// сначала увеличим обороты продаж по услугам
	ТаблицаУслуг.ВыбратьСтроки();
	//Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
	//	глДвижениеОборотовПродаж(Контекст,
	//							Фирма,
	//							Контрагент,
	//							"",
	//							ТаблицаУслуг.Номенклатура,
	//							ТаблицаУслуг.Количество,
	//							0,
	//							ТаблицаУслуг.СуммаУпр);
	//КонецЦикла;
	
	// теперь задолженность покупателя за отпущенные услуги
	СписокПараметров.Установить("ЗнакДвижения",1); // увеличился долг клиента
	
	ТаблицаУслуг.Свернуть("СтавкаНДС,СтавкаНП","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
	
	ТаблицаУслуг.НоваяКолонка("КредДокумент");
	ТаблицаУслуг.НоваяКолонка("ВидДолга");
	ТаблицаУслуг.НоваяКолонка("Себестоимость");
	ТаблицаУслуг.НоваяКолонка("ДоговорКомитента");
	ТаблицаУслуг.НоваяКолонка("ОблагаетсяНП");

	ТаблицаУслуг.ВыбратьСтроки();
	Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
	
		ТаблицаУслуг.КредДокумент 	= ТекущийДокумент();
		Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда  
			ТаблицаУслуг.ВидДолга		= глВД.ДолгЗаУслугиВРознице;
		Иначе
			ТаблицаУслуг.ВидДолга		= глВД.ДолгЗаУслуги;
		КонецЕсли;
		ТаблицаУслуг.Себестоимость	= 0;
		ТаблицаУслуг.ОблагаетсяНП 	= УчитыватьНП;
	
	КонецЦикла;                                                                       

	глДвижениеДолгов(Контекст,Договор,ТаблицаУслуг,СписокПараметров,ВремПокупатели,,ВремКнигаПродаж);    
	
    ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ);
		
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
		Возврат;
	КонецЕсли;  
	
	// Если мы продаем по принятой выручке, договор может быть только рублевый
	Если ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда  
		Если Договор.ВалютаВзаиморасчетов <> глРубли Тогда
		    глНеПроводить(Контекст, "Договор для продажи по принятой выручке может быть только в валюте бух. учета!");
			Возврат;
		КонецЕсли;                                                                                          
		Если Склад.РозничныйСклад = 0 Тогда
		    глНеПроводить(Контекст, "Продажу по принятой выручке можно проводить только с розничного склада.");
			Возврат;
		КонецЕсли;                                                                                          
	КонецЕсли;
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);
	
КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
