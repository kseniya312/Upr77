////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйСклад, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;

// для выбора розничных цен, по которым есть остатки и показа остатков
Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//  Делает невидимой колонку "Скидка", если скидка не выбрана
//  Делает невидимой колонку всего, если все налоги в сумме
Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		
		Форма.БезСкидки.Видимость(Скидка.Выбран());
		Форма.СуммаСкидки.Видимость(Скидка.Выбран());
		Форма.Сумма.Доступность(Скидка.Выбран());
	КонецЕсли;
	                            
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()         
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	
	Перем ОстатокНаСкладе, ОстатокПоФирме; // для показа остатков
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ДатаДок = ПолучитьДатуТА() Тогда   // покажем остатки
		Если Склад.РозничныйСклад = 0 Тогда // только на оптовом складе
			СписокПараметров.Установить("РезервыТМЦ", РезервыТМЦ);
			Если глПересчетРегистров(Контекст, СписокПараметров, "БезРасчетаРегистров") = 1 Тогда
//				глПолучитьОстаткиНоменклатуры(глФирмаДляОстатковТМЦ(Фирма), Номенклатура, Единица, ОстаткиТМЦ, ОстатокНаСкладе, ОстатокПоФирме, Склад, РезервыТМЦ, 1, Договор);
				Если (ПустоеЗначение(ОстатокНаСкладе) = 0) и (ПустоеЗначение(ОстатокПоФирме) = 0) Тогда
					ИнфоТекст=ИнфоТекст + " (остаток на складе: " + глФРМКоличество(ОстатокНаСкладе) + " " + Единица + "," + 
					                      " по фирме: "  + глФРМКоличество(ОстатокПоФирме) + " " + Единица + ")";
				Иначе                                     
					Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
						ИнфоТекст=ИнфоТекст+" (нет в наличии)";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//установка фильтра на регистр РезервыТМЦ нужена нам только в этой функции - отключаем
			СписокПараметров.Установить("РезервыТМЦ", "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале(); 
		
		//++Ерошенко 03.05.2007
		ПроверитьКонтрагентаВДокументе(Контрагент); 
		//--Ерошенко
	КонецЕсли;     
	
КонецПроцедуры // ПриИзмененииКонтрагента()     

//******************************************************************************
// ОбновлениеРозничныхЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит перезаполнение розничных цен в табличной части документа из регистра.
//  Если ТМЦ на розничном складе нет, или он есть по нескольким ценам то цена обнуляется
//  и выдается соответствующее предуупреждение.
//
Процедура ОбновлениеРозничныхЦен()
	
	Перем ТовЦена, СписокЦен, ВремЦена;
	
	Если Склад.РозничныйСклад = 1 Тогда
		
		Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилиЦены = 0;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			
			Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
				ТовЦена = "";
				глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				
				Если СписокЦен.РазмерСписка() = 1 Тогда
					ВремЦена = СписокЦен.ПолучитьЗначение(1);
				Иначе
					ВремЦена = 0;
				КонецЕсли;
				
				Если Цена <> ВремЦена Тогда
					Цена = ВремЦена;
					ИзменилиЦены = 1;
					глПересчетТаблЧасти(Контекст,"Цена");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзменилиЦены = 1 Тогда
			Предупреждение("Проверьте цены ТМЦ в документе!", 60);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбновлениеРозничныхЦен()     

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	
	Если СтарыйСклад <> Склад Тогда
		
		Если Склад.Выбран()=1 Тогда   
			
			Если (Склад.РозничныйСклад = 1) Тогда
				Если (Склад.ОблагаетсяЕНВД = 1) Тогда
					НовоеОблагаетсяЕНВД = 1;
				Иначе
					НовоеОблагаетсяЕНВД = 0;
				КонецЕсли;
				
				Если ПустоеЗначение(ТипЦен) = 0 Тогда
				    ТипЦен = "";
				КонецЕсли;
			Иначе     
				НовоеОблагаетсяЕНВД = 0;
				
				Если ПустоеЗначение(ТипЦен) = 1 Тогда
				    ТипЦен	= глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
				КонецЕсли;
			КонецЕсли;                           
			
			// зададим вопрос о пересчете налогов
			Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) и (КоличествоСтрок()>0) Тогда
				ТекстВопроса = "Для склада """ + Склад.Наименование + " порядок 
					|налогообложения отличается от установленного в документе."+
					?(НовоеОблагаетсяЕНВД=1,"  Не облагается ЕНВД -> облагается ЕНВД."
					,"  Облагается ЕНВД -> не облагается ЕНВД.");
				ТекстВопроса = ТекстВопроса + РазделительСтрок+"Пересчитать суммы налогов в документе?";
				Ответ = Вопрос(ТекстВопроса ,"Да+Нет", 60); 
					
				Если Ответ = "Нет" Тогда
					НовоеОблагаетсяЕНВД = ОблагаетсяЕНВД; // не изменяем
				КонецЕсли;
			КонецЕсли;             
			
			// пересчитаем документ
			Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) Тогда
				ОблагаетсяЕНВД 	= НовоеОблагаетсяЕНВД;
				УчитыватьНДС 	= ?(ОблагаетсяЕНВД=1,0,1);
				УчитыватьНП 	= ?(ОблагаетсяЕНВД=1,0,ЮрЛицо.УчитыватьНП);
				глПересчитатьНалоги(Контекст, СуммаВклНП, СуммаВклНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если ОблагаетсяЕНВД = 1 Тогда
			КодОперации = глКО.РозничнаяПродажаЕНВД;
		Иначе
			КодОперации = глКО.РозничнаяПродажа;
		КонецЕсли;
		
		Если Склад.РозничныйСклад = 1 Тогда
			// на розн.складе всем разрашаем выбирать цену из списка
		    Форма.Цена.Доступность(1);
			Форма.Цена.Редактирование(0);
		Иначе
			Форма.Цена.Доступность(глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах"));
			Форма.Цена.Редактирование(1);
		КонецЕсли;
			
		ОбновлениеРозничныхЦен();
		
		СтарыйСклад = Склад;
	КонецЕсли; // СтарыйСклад <> Склад
	
КонецПроцедуры // ПриИзмененииСклада()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);

	НовыйКодОперации = ?(ОблагаетсяЕНВД=1,глКО.РозничнаяПродажаЕНВД,глКО.РозничнаяПродажа);
	Если НовыйКодОперации <> КодОперации  Тогда
	    КодОперации = НовыйКодОперации;
	КонецЕсли;
	
	// если не установлен учет НДС или НП, то нужно очищать соответсвующие колонки
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если УчитыватьНДС = 0 Тогда
		    СуммаНДС	= 0;
		КонецЕсли;
		
		Если УчитыватьНП = 0 Тогда
		    СуммаНП	= 0;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписи();
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                      
//******************************************************************************
// ЗаполнитьПоИнвентаризации(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - возникла ошибка
//
// Описание:
//  Заполняет документ на основании документа Инвентаризация по рознице
//
Функция ЗаполнитьПоИнвентаризации(ОписаниеОш)
	Перем СписанныеКоличества;
	
	Если ДокОснование.ВидОперации <> Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
		ОписаниеОш	= "Выбранная инвентаризация не является инвентаризацией по рознице!";
		Возврат 0;
	КонецЕсли;
	
	// сформируем список товаров, 
	ТекстЗапроса = "//{{ЗАПРОС(ПредСписание)
	|Период с '01.01.1980' по ДатаДок;
	|Без итогов;     
	|ТекДок    = Документ.РеализацияРозница.ТекущийДокумент;
	|Основание = Документ.СписаниеТМЦ.ДокОснование, Документ.РеализацияРозница.ДокОснование;
	|Товар = Документ.СписаниеТМЦ.Номенклатура, Документ.РеализацияРозница.Номенклатура;
	|Колво = Документ.СписаниеТМЦ.Количество, Документ.РеализацияРозница.Количество;
	|Коэфф = Документ.СписаниеТМЦ.Коэффициент, Документ.РеализацияРозница.Коэффициент;
	|Функция ВсегоКолво = Сумма(Колво);
	|Группировка Товар без групп;
	|Группировка Коэфф;
	|Условие(Основание = ДокОснование);";
	
	// Данный документ учитывать не надо
	Если Выбран() = 1 Тогда
	    ТекДокумент = ТекущийДокумент();     
		ТекстЗапроса = ТекстЗапроса + "Условие(ТекДок <> ТекДокумент);"
	КонецЕсли;

	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		ОписаниеОш	= "Ошибка при отборе товаров.";
		Возврат 0;
	КонецЕсли;
	
	Запрос.Выгрузить(СписанныеКоличества);
	
	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;

	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	// очищаем наш документ
	УдалитьСтроки();  
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		Если (ТаблицаДокумента.КоличествоУчет > ТаблицаДокумента.Количество) Тогда
			Товар = ТаблицаДокумента.Номенклатура;
			Колво = ТаблицаДокумента.КоличествоУчет - ТаблицаДокумента.Количество;
			
			// поищем в таблице уже списанных количеств
			Поз = 0;
			Пока (СписанныеКоличества.НайтиЗначение(Товар, Поз, "Товар") = 1)
			   и (Колво > 0)
			Цикл
				СписанныеКоличества.ПолучитьСтрокуПоНомеру(Поз);
				// пересчитаем количество в единицу измерения инвентаризации
				СписКолво  = СписанныеКоличества.ВсегоКолво * СписанныеКоличества.Коэфф / ТаблицаДокумента.Коэффициент;
				ПогашКолво = Мин(Колво, СписКолво);
				
				Если ПогашКолво >= СписКолво Тогда
					СписанныеКоличества.УдалитьСтроку(Поз);
				Иначе
					СписанныеКоличества.ВсегоКолво = (СписКолво - ПогашКолво) * ТаблицаДокумента.Коэффициент / СписанныеКоличества.Коэфф;
				КонецЕсли;
				
				Колво = Колво - ПогашКолво;
				
				Поз = 0;
			КонецЦикла;
			
			Если Колво > 0 Тогда
				НоваяСтрока();
				Номенклатура= Товар;
				Количество 	= Колво;
				Единица 	= ТаблицаДокумента.Единица;
				Коэффициент = ТаблицаДокумента.Коэффициент;
				Цена 		= ТаблицаДокумента.Цена; 
				СтавкаНДС 	= Номенклатура.СтавкаНДС;
				СтавкаНП 	= Номенклатура.СтавкаНП;
				
				глПересчетТаблЧасти(Контекст,"Цена");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; // по строкам основания
	
	Если КоличествоСтрок() = 0 Тогда
		ОписаниеОш	= "Документ - основание не содержит строк с отклонениями учетного количества от фактического.";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;

	Возврат Рез;

КонецФункции // ЗаполнитьПоИнвентаризации()

//******************************************************************************
// РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
//
// Параметры:
//  Нет
//
// Описание:
//
Процедура РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
	
	Если УчитыватьНП = 1 Тогда
		ПарСуммаНП = ПарСуммаВсего * КоэффНП;
		СуммаБезНП = ПарСуммаВсего - ПарСуммаНП;
		Если СуммаВклНП = 0 Тогда
			ПарСумма = СуммаБезНП;
		Иначе
			ПарСумма = ПарСуммаВсего;
		КонецЕсли;
	Иначе
		ПарСумма   = ПарСуммаВсего;
		СуммаБезНП = ПарСуммаВсего;
		ПарСуммаНП = 0;
	КонецЕсли;
	
	Если УчитыватьНДС = 1 Тогда
		ПарСуммаНДС = СуммаБезНП * КоэффНДС;
		Если СуммаВклНДС = 0 Тогда
			ПарСумма = ПарСумма - ПарСуммаНДС;
		КонецЕсли;
	Иначе
		ПарСуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыПоВарианту()

//******************************************************************************
// ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, ОстатокПоЗаявке, ВремОстаткиТМЦ, КонтрольРезервов, ВремРезервыТМЦ = "")
//
// Параметры:
//  ФирмаДляОстатковТМЦ - список значений, содержащий элементы справочника Фирмы, или
//                        один элемент справочника Фирмы (пустое значение, если остатки контролируются по компании)
//  ТекНоменклатура     - элемент справочника Номенклатура 
//  ОстатокПоЗаявке     - число - количество неотгруженных ТМЦ по заявке 


//  ВремОстаткиТМЦ     - Регистр "ОстаткиТМЦ", рассчитанный и с наложенными фильтрами
//  КонтрольРезервов   - флаг - если = 1, то необходимо учитывать резерв; если = 0, то резерв не учитывается
//  ВремРезервыТМЦ     - регистр "РезервыТМЦ", рассчитанный и с наложенными фильтрами (не обязатльный).                     
//
// Возвращаемое значение:
//  Количество ТМЦ, которое можно отгрузить по заявке.
//
// Описание:
//  Получение количества ТМЦ, которое можно отгрузить (с учетом свободного остатка), по переданным параметрам.
// Процедура полностью аналогична одноименной процедуре в модуле формы документа "Реализация".
Функция ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, ОстатокПоЗаявке, ВремОстаткиТМЦ, КонтрольРезервов, ВремРезервыТМЦ = "")

	РезервНаСкладе = 0;
	РезервПоФирме  = 0;
	Если КонтрольРезервов = 1 Тогда
		Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда // Фильтр по фирме не нужен
			
			РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,,"Количество"); 
			РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,     ,,,"Количество"); 
			
			// Вычтем резервы, котрые сделал наш же покупатель
			РезервНаСкладе = РезервНаСкладе - 
			                 ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,Договор,,"Количество");
			РезервПоФирме  = РезервПоФирме  - 
				             ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,     ,Договор,,"Количество");
			
		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда // Нужны сводные остатки по нескольким фирмам
			
			СчетчикЦикла = 0;
			Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
				
				ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
				РезервНаСкладе = РезервНаСкладе + 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,,"Количество"); 
				РезервПоФирме  = РезервПоФирме + 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,,,"Количество"); 
					
				// Вычтем резервы, котрые сделал наш же покупатель
				РезервНаСкладе = РезервНаСкладе - 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,Договор,,"Количество"); 
				РезервПоФирме  = РезервПоФирме  - 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,Договор,,"Количество");
			КонецЦикла;
			
		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
			
			РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,,"Количество"); 
			РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,,,"Количество"); 
			
			// Вычтем резервы, котрые сделал наш же покупатель
			РезервНаСкладе = РезервНаСкладе - 
			                 ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,Договор,,"Количество"); 
			РезервПоФирме  = РезервПоФирме  - 
				             ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,Договор,,"Количество");
		КонецЕсли;
	КонецЕсли;                                                                        
	    
	ОстатокНаСкладе = 0; 
	ОстатокПоФирме  = 0;
		
	// Остаток на складе.
	Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда
		
		ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,"Количество"); 
		ОстатокПоФирме  = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,     ,,"Количество");
		
	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда
		
		ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,"Количество"); 
		ОстатокПоФирме  = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,,"Количество");
		
	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
		
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
			ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
			ОстатокНаСкладе = ОстатокНаСкладе + 
			                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,"Количество"); 
			ОстатокПоФирме  = ОстатокПоФирме + 
			                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,,"Количество");
		КонецЦикла;
		
	КонецЕсли;
		
	СвободныйОстатокНаСкладе = Макс(ОстатокНаСкладе - РезервНаСкладе, 0);
	СвободныйОстатокПоФирме  = Макс(ОстатокПоФирме  - РезервПоФирме , 0);
	
	Возврат Мин(ОстатокПоЗаявке, СвободныйОстатокНаСкладе, СвободныйОстатокПоФирме);
		
КонецФункции // ПолучитьКоличество()

//******************************************************************************
// ЗаполнитьПоЗаявке(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - возникла ошибка
//
// Описание:
//  Заполняет документ на основании документа ЗаявкаПокупателя.
// Процедура схожа с процедурой "ЗаполнениеПоИтогам" в модуле формы документа "Реализация".

Функция ЗаполнитьПоЗаявке(ОписаниеОш)
	
	Перем ЗарезервированниеТовары, ТекСтрокаИтогов;
	 
	// Фирма и договор (контрагента) должны быть заполнены.
	Если ПустоеЗначение(Фирма) = 1 Тогда
		ОписаниеОш	= "Не выбрана фирма!";
		Возврат 0;
	КонецЕсли;
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		ОписаниеОш	= "Не выбран договор контрагента!";
		Возврат 0;
	КонецЕсли;
	
	РегОбщ = СоздатьОбъект("Регистры");
	РегЗаявки  = РегОбщ.Заявки;
	РегОстатки = РегОбщ.ОстаткиТМЦ;
	РегРезервы = РегОбщ.РезервыТМЦ;
	
	// Установим фильтры на регистр "Заявки".
	РегЗаявки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
	РегЗаявки.УстановитьЗначениеФильтра("ДоговорПокупателя", Договор, 1);
	                           
	ЗаполнятьПоОснованию = 0; // Флаг варианта заполнения
	ЗаполнятьСУчетомРезервов = 0;   
	ЗаполнятьСУчетомОстатков = 0; 
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		Если ДокОснование.КоличествоСтрок() > 0 Тогда
			
			ЗаполнятьПоОснованию = 1;
			
			// Если есть заказ, то заполняем недополученными по нему товарами
			РегЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ДокОснование, 1);
			
	        // Получим список номенклатуры для установки фильтров
			СписокТоваров = СоздатьОбъект("СписокЗначений");
			ДокОснование.ВыгрузитьТабличнуюЧасть(СписокТоваров, "Номенклатура");
		
			РегЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			
			// Определим необходимо ли контролировать остатки,
			// а, следовательно, заполнять с учетом свободных остатков.
			Если Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать Тогда 
				ЗаполнятьСУчетомОстатков = 0; 
			Иначе
				ЗаполнятьСУчетомОстатков = 1; 
				Если глПолучитьПолномочие("РазрешитьПродаватьРезерв") = 0 Тогда
					ЗаполнятьСУчетомРезервов = 1;
				КонецЕсли;
			КонецЕсли;
		
			// Если склад не выбран, то заполним без учета остатков
			Если ПустоеЗначение(Склад) = 1 Тогда
				ЗаполнятьСУчетомОстатков = 0;
			КонецЕсли;
			
			// Установим фильтры на регистры: "ОстаткиТМЦ", "РезервыТМЦ".
			Если ЗаполнятьСУчетомОстатков = 1 Тогда
				РегОстатки.УстановитьЗначениеФильтра("Фирма",  ФирмаДляОстатковТМЦ, 2);
				РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			КонецЕсли;
			Если ЗаполнятьСУчетомРезервов = 1 Тогда
				РегРезервы.УстановитьЗначениеФильтра("Фирма",  ФирмаДляОстатковТМЦ, 2);
				РегРезервы.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда // новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда // выписываемый задним числом
			РегЗаявки.ВременныйРасчет();
			РегОстатки.ВременныйРасчет(ЗаполнятьСУчетомОстатков);
			РегРезервы.ВременныйРасчет(ЗаполнятьСУчетомРезервов);
			РегОбщ.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе // сохраненный документ
		Если СравнитьТА() < 1 Тогда // позиция не больше ТА
			РегЗаявки.ВременныйРасчет();
			РегОстатки.ВременныйРасчет(ЗаполнятьСУчетомОстатков);
			РегРезервы.ВременныйРасчет(ЗаполнятьСУчетомРезервов);
			РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегЗаявки.ВыгрузитьИтоги(ЗарезервированниеТовары, 1, 1);
	ЗарезервированниеТовары.Свернуть("Номенклатура", "КоличествоРасход,СтоимостьРасход");
		                
	Если ЗаполнятьПоОснованию = 0  Тогда
		
		ВалютаОстатков = Договор.ВалютаВзаиморасчетов;
		
		ЗарезервированниеТовары.ВыбратьСтроки();
		
		СуммаВзаиморасчетов = 0;
		Пока ЗарезервированниеТовары.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			
			Номенклатура = ЗарезервированниеТовары.Номенклатура;
			Единица      = Номенклатура.ОсновнаяЕдиница;
			Коэффициент  = Единица.Коэффициент;
			Количество   = ЗарезервированниеТовары.КоличествоРасход / ?(Коэффициент = 0, 1, Коэффициент);
			
			Если УчитыватьНДС = 1 Тогда
				СтавкаНДС = Номенклатура.СтавкаНДС;
			КонецЕсли;
			Если УчитыватьНП = 1 Тогда
				СтавкаНП = Номенклатура.СтавкаНП;
			КонецЕсли;
			
			ОбщСумма     = глПересчет(ЗарезервированниеТовары.СтоимостьРасход, ВалютаОстатков, ДатаДок, Валюта, Курс);
			
			ВремСтавкаНП = Номенклатура.СтавкаНП.Ставка;
			
			РассчитатьСуммыПоВарианту
			(
			ОбщСумма, 
			глВыделяемыйНДС(Номенклатура.СтавкаНДС), // коэффициент выделяемого НДС
			ВремСтавкаНП/(100 + ВремСтавкаНП),       // коэффициент выделяемого НП
			Сумма, СуммаНДС, СуммаНП
			);
			
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + ЗарезервированниеТовары.СтоимостьРасход;
			
			Если Количество <> 0 Тогда
				Цена = Сумма / Количество;
			Иначе
				Цена = Сумма;
			КонецЕсли;         
		КонецЦикла;
		
	Иначе // Заполняем по основанию
		
		// При заполнении на основании Заявки цены, суммы и скидки надо брать из основания
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		
		ВалютаОсн	= ДокОснование.Валюта;
		КурсОсн		= ДокОснование.Курс;
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			
			// Есть остатки по этой строке? 
			ТекСтрокаИтогов = 0;
			Если ЗарезервированниеТовары.НайтиЗначение(ТаблицаДокумента.Номенклатура, ТекСтрокаИтогов, "Номенклатура") = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			КоличествоРасход = ЗарезервированниеТовары.ПолучитьЗначение(ТекСтрокаИтогов, "КоличествоРасход");
			Если КоличествоРасход = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			
			ТекНоменклатура = ТаблицаДокумента.Номенклатура;
			
			Отпустить = Мин(ТаблицаДокумента.Количество, КоличествоРасход / ТаблицаДокумента.Коэффициент);;
			Если ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
				
				// Считаем, что оказать услуги нам ничего не мешает.
				МожноОтпустить  = Отпустить;
			Иначе
				Если ЗаполнятьСУчетомОстатков = 1 Тогда
					
					// Получим количество с учетом свободного остатка и на складе, и по фирме.
					МожноОтпустить = ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, Отпустить,
					                                    РегОстатки, ЗаполнятьСУчетомРезервов, РегРезервы);
				Иначе	
					МожноОтпустить = Отпустить;
				КонецЕсли;
			КонецЕсли;
			
			Если МожноОтпустить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
			СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
			Номенклатура= ТаблицаДокумента.Номенклатура;
			Единица 	= ТаблицаДокумента.Единица;
			Коэффициент = ТаблицаДокумента.Коэффициент;
			Количество 	= МожноОтпустить;
			Цена 		= глПересчет(ТаблицаДокумента.Цена, ВалютаОсн, КурсОсн, Валюта, Курс);
			ВремСумма 	= ТаблицаДокумента.Сумма * Количество / ТаблицаДокумента.Количество; // для учета скидок в документе основании
			Сумма		= глПересчет(ВремСумма, ВалютаОсн, КурсОсн, Валюта, Курс);
			
			глПересчетТаблЧасти(Контекст,"Сумма");
		КонецЦикла; // по строкам основания
		
		ОснованиеСумма = ДокОснование.Итог("Сумма");
		СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, ДокОснование.СуммаВзаиморасчетов * Итог("Сумма") / ОснованиеСумма);
		
	КонецЕсли; // ЗаполнятьПоОснованию = 0

	Если КоличествоСтрок() = 0 Тогда
		ОписаниеОш	= "Все заказанные товары либо получены, либо их нет в наличии!";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;

	Возврат Рез;
	
КонецФункции // ЗаполнитьПоЗаявке()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию(ОписаниеОш)
	
	Если ДокОснование.Выбран()=0 Тогда
		Рез	= ЗаполнитьПоЗаявке(ОписаниеОш);
	Иначе
		ВидДокОсн	= ДокОснование.Вид();
		Если ВидДокОсн = "ИнвентаризацияТМЦ" Тогда
			Рез	= ЗаполнитьПоИнвентаризации(ОписаниеОш);
		ИначеЕсли ВидДокОсн = "ЗаявкаПокупателя" Тогда
			Рез	= ЗаполнитьПоЗаявке(ОписаниеОш);
		Иначе 
			Рез	= 0;
			ОписаниеОш	= "Неверный вид документа - основания!";
		КонецЕсли; // вид ДокОснования
	КонецЕсли;  
	
	Возврат Рез;
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание, ОписаниеОш;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);           
	
	// Прверим основание. Склад в нем д.б. розничный
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		Если Основание.Вид() = "ИнвентаризацияТМЦ" Тогда
			Если Основание.ВидОперации <> Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
				Предупреждение("Выбранная инвентаризация не является инвентаризацией по рознице!",60);
			КонецЕсли;
		КонецЕсли;

		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		Если (Склад.РозничныйСклад = 1) И (ПустоеЗначение(ТипЦен) = 0) Тогда
		    ТипЦен = "";
		КонецЕсли;
				
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
				
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйСклад			= Склад;
		
		Если СтарыйДоговор <> Договор Тогда
		    // при изменении договора могла измениться глубина кредита
			ДатаОплаты		= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
			СтарыйДоговор	= Договор;
		КонецЕсли;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийРеализацияРозница.Прочее);
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам);
	
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		ВидОперации	= ВремВидОперации;
	КонецЕсли;
	
КонецПроцедуры	// ПоКнопкеОперация()
                   
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	Перем ОписаниеОш;
	
	Если КоличествоСтрок() <> 0 Тогда
		ТекстВопроса = "Заполнить документ? (перед заполнением табличная часть будет очищена)";
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;    
	
	
	УдалитьСтроки();
	
	Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
		Предупреждение(ОписаниеОш, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	
	Если Склад.РозничныйСклад = 1 Тогда
		Параметры.ДобавитьЗначение("Розница", "ЦенаВподборе");
	Иначе
		Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
		Параметры.ДобавитьЗначение(ТипЦен, "ТипЦен");
	КонецЕсли;

	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ФормПарПечШапки(Парметры)
//
// Параметры:
//  Параметры - сисок, содержащий значения для формирования шапки печатной формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список, содержащий значения полей для печати шапки документа
//
Процедура ФормПарПечШапки(Параметры)
	                     
	Параметры 	= СоздатьОбъект("СписокЗначений");
	// собственная фирма
	
	Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
	глПлатежныеРеквизиты(Фирма.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);

	Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
		ФирмаРеквизиты = "";
	Иначе
		ФирмаРеквизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
		                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
						  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
	КонецЕсли;
				
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) + ?(ПустоеЗначение(Фирма.ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(Фирма.ЮрЛицо.ИНН), ""), "Фирма");
	Параметры.ДобавитьЗначение(глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес), "ФирмаАдрес");
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.Телефоны), "ФирмаТелефоны");
	Параметры.ДобавитьЗначение(ФирмаРеквизиты, "ФирмаРеквизиты");
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ОКПО), "ФирмаОКПО");
	
	// контрагент
	
	Клиент			= "";
	КлиентЮрАдрес	= "";
	КлиентФактАдрес	= "";
	КлиентОКПО		= "";
	КлиентРевизиты	= "";
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Клиент			= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование) +
		                  ?(ПустоеЗначение(Контрагент.ЮрФизЛицо.ИНН) = 0, ", ИНН" + СокрЛП(Контрагент.ЮрФизЛицо.ИНН), "");
		КлиентЮрАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ЮрАдрес);
		КлиентФактАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ФактАдрес);
		
		// у физ. лиц нет ОКПО
		Если Контрагент.ЮрФизЛицо.Вид() <> "ФизЛица" Тогда
			КлиентОКПО	= СокрЛП(Контрагент.ЮрФизЛицо.ОКПО);
		КонецЕсли;
		
		Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
		глПлатежныеРеквизиты(Контрагент.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			КлиентРевизиты = "";
		Иначе
			КлиентРевизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ДобавитьЗначение(Клиент, "Клиент");
	Параметры.ДобавитьЗначение(КлиентЮрАдрес, "КлиентЮрАдрес");
	Параметры.ДобавитьЗначение(КлиентФактАдрес, "КлиентФактАдрес");
	Параметры.ДобавитьЗначение(КлиентОКПО, "КлиентОКПО");
	Параметры.ДобавитьЗначение(КлиентРевизиты, "КлиентРеквизиты");
	
КонецПроцедуры // ФормПарПечШапки()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПарамШапки;
	
	ПечТабл = СоздатьОбъект("Таблица");
	ПечТабл.ИсходнаяТаблица("ТОРГ12");
	
	// инициализация переменных для печати шапки
	ФормПарПечШапки(ПарамШапки);
	
	// собственная фирма
	ВремФирма		= ПарамШапки.Получить("Фирма");
	ФирмаАдрес		= ПарамШапки.Получить("ФирмаАдрес");
	ФирмаТелефоны	= ПарамШапки.Получить("ФирмаТелефоны");
	ФирмаРеквизиты	= ПарамШапки.Получить("ФирмаРеквизиты");
	ФирмаОКПО		= ПарамШапки.Получить("ФирмаОКПО");
	
	ПечОрг			= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаТелефоны) = 0, ", тел. " + ФирмаТелефоны, "") +
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, " ," + ФирмаРеквизиты, "");
	
	ПечФирма		= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, " ," + ФирмаРеквизиты, "");
	
	// контрагент
	
	Клиент			= ПарамШапки.Получить("Клиент");
	КлиентЮрАдрес	= ПарамШапки.Получить("КлиентЮрАдрес");
	КлиентФактАдрес	= ПарамШапки.Получить("КлиентФактАдрес");
	КлиентРеквизиты	= ПарамШапки.Получить("КлиентРеквизиты");
	КлиентОКПО		= ПарамШапки.Получить("КлиентОКПО");
	
	ПечКлиент		= Клиент +
	                  ?(ПустоеЗначение(КлиентЮрАдрес) = 0, ", " + КлиентЮрАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
					  
	ПечГрузополучатель = Клиент +
	                  ?(ПустоеЗначение(КлиентФактАдрес) = 0, ", " + КлиентФактАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
	
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
	    ПечДокОснование	= "";
	Иначе
		ПечДокОснование	= глПредставлениеДокумента(ДокОснование);
	КонецЕсли;
	
	// выясним, какую вертикальную секцию будем использовать
	Если УчитыватьНП = 0 Тогда
		ВертСекция = "";
	Иначе
		ВертСекция = "_НП";
	КонецЕсли;
	
	// Выводим шапку таблицы. Шапка печатается на каждом листе.
	ПечТабл.ВывестиСекцию("Шапка");
	
	// Выводим спецификацию
	
	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице	= 22;
	
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки		= 10;
	СтрокПодвала	= 9;
	
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	НомерСтраницы	= 1;

	Если КоличествоСтрок() = 1 Тогда
		ПереноситьПоследнююСтроку	= 0;
	Иначе
		ЦелыхСтраницСПодвалом		= Цел((СтрокШапки + КоличествоСтрок() + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала		= Цел((СтрокШапки + КоличествоСтрок() - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку	= ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице	= 0;
	ИтогоСуммаНаСтранице		= 0;
	ИтогоНДСНаСтранице			= 0;
	ИтогоСуммаСНДСНаСтранице	= 0;
	ИтогоНГСМНаСтранице			= 0;
	ИтогоНПНаСтранице			= 0;

	// инициализация итогов по документу
	ИтогоКоличество	= 0;
	ИтогоСумма		= 0;
	ИтогоНДС		= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоНГСМ		= 0;
	ИтогоНП			= 0;

	Ном	= 0;
	
	КурсРублей = глКурсДляВалюты(глРубли, ДатаДок);
	
	ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном	= Ном + 1;
		
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок())) Тогда
			ПечТабл.ВывестиСекцию("ИтогоПоСтранице"+ВертСекция);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице	= 0;
			ИтогоСуммаНаСтранице		= 0;
			ИтогоНДСНаСтранице			= 0;
			ИтогоСуммаСНДСНаСтранице	= 0;
			ИтогоНГСМНаСтранице			= 0;
			ИтогоНПНаСтранице			= 0;
			
			ПечТабл.НоваяСтраница();
			НомерСтраницы = НомерСтраницы + 1;
			ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
		КонецЕсли;

		ПечТовар		= СокрЛП(Номенклатура.ПолнНаименование);
		ПечЕдиница		= СокрЛП(Единица.ОКЕИ.Наименование);
		ПечОКЕИ			= СокрЛП(Единица.ОКЕИ.Код);
		
		ПечКоличество	= Количество;
		КолВо			= ?(Количество = 0, 1, Количество);
		
		ПечКолвоВОдномМесте = ?(Коэффициент <= 1, "", Коэффициент);
		ПечКоличествоМест = ?(Коэффициент <= 1, "", Количество);
                                                                         
		СуммаПеч    = глПересчет(Сумма   , Валюта, Курс, глРубли, КурсРублей);
		СуммаНДСПеч = глПересчет(СуммаНДС, Валюта, Курс, глРубли, КурсРублей);
		СуммаНППеч  = глПересчет(СуммаНП , Валюта, Курс, глРубли, КурсРублей);
		
		Если СуммаВклНП = 1 Тогда
			СуммаБезНП = СуммаПеч - СуммаНППеч;
		Иначе
			СуммаБезНП = СуммаПеч;
		КонецЕсли;
		
		Если СуммаВклНДС = 1 Тогда
            СуммаБезНДС = СуммаБезНП - СуммаНДСПеч;
			СуммаСНДС   = СуммаБезНП;
		Иначе
            СуммаБезНДС = СуммаБезНП;
			СуммаСНДС   = СуммаБезНП + СуммаНДСПеч;
		КонецЕсли;
		
		ПечНДС			= СуммаНДСПеч;
		
		Если УчитыватьНП = 1 Тогда
		    ПечНП = СуммаНППеч;
		Иначе
			ПечНП = "";
		КонецЕсли;
		
		ПечЦена = ?(Количество <> 0, СуммаБезНДС / Количество, СуммаБезНДС);
		ПечТабл.ВывестиСекцию("Строка" + ВертСекция);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице	= ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице + СуммаБезНДС;
		ИтогоНДСНаСтранице			= ИтогоНДСНаСтранице + ПечНДС;
		ИтогоСуммаСНДСНаСтранице	= ИтогоСуммаСНДСНаСтранице + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНПНаСтранице = ИтогоНПНаСтранице + ПечНП;
		КонецЕсли;

		// увеличим итоги по дукументу
		ИтогоКоличество	= ИтогоКоличество + Количество;
		ИтогоСумма		= ИтогоСумма + СуммаБезНДС;
		ИтогоНДС		= ИтогоНДС + ПечНДС;
		ИтогоСуммаСНДС	= ИтогоСуммаСНДС + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНП = ИтогоНП + ПечНП;
		КонецЕсли;
		
	КонецЦикла;

	ПечТабл.ВывестиСекцию("ИтогоПоСтранице" + ВертСекция);
	ПечТабл.ВывестиСекцию("Всего" + ВертСекция);
	
	// выводим подвал
	НаСумму	= "на сумму " + глСуммаПрописью(ИтогоСуммаСНДС + ИтогоНП, глРубли);

	// формируем строку для вывода количества листов накладной
	// Слово лист склоняется
	Если (НомерСтраницы > 10) И (НомерСтраницы < 20) Тогда
		Слово	= " листах";
	Иначе
		ПоследняяЦифра	= НомерСтраницы % 10;
		
		Если ПоследняяЦифра = 1 Тогда
		    Слово	= " листе";
		Иначе
		    Слово	= " листах";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКоличествоЛистов	= Строка(НомерСтраницы) + Слово;
	ПечТабл.ВывестиСекцию("Подвал");

	// показать сформированную таблицу
	             
	Если СразуНаПринтер = 0 Тогда
		ПечТабл.Опции(0, 0, 0, 0, ПарСтрДок, ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечТабл.Защита(1);
		Иначе
			ПечТабл.Защита(0);
		КонецЕсли;
		ПечТабл.ТолькоПросмотр(1);

		ПечТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечТабл.КоличествоЭкземпляров(КолЭкз);
		ПечТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПечатьЧека(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура ПечатьЧека(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПечТаблица, ВысотаШапки;
	
	ПечТаблица	= СоздатьОбъект("Таблица");
	ПечТаблица.ИсходнаяТаблица("Чек");
	
	// выводим шапку документа
	ПечТаблица.ВывестиСекцию("Шапка");
	// шапку повторяем на каждой странице
	ВысотаШапки	= ПечТаблица.ВысотаСекции("Шапка");
	ПечТаблица.ПовторятьПриПечатиСтроки(1, ВысотаШапки);
	
	ИтогПечСумма = 0;
	
	// выводим товары
	ВыбратьСтроки();
	
	КурсРублей = глКурсДляВалюты(глРубли, ДатаДок);
	Пока ПолучитьСтроку() = 1 Цикл
		// сумма всегда печатается со всеми налогами
		
		ПечСумма = глПересчет(Сумма, Валюта, Курс, глРубли, КурсРублей);
		
		Если СуммаВклНП = 0 Тогда
		    ПечСумма = ПечСумма + СуммаНП;
		КонецЕсли;
		
		Если СуммаВклНДС = 0 Тогда
		    ПечСумма = ПечСумма + СуммаНДС;
		КонецЕсли;
		
		ИтогПечСумма = ИтогПечСумма + ПечСумма;
		ПечЦена = ?(Количество = 0, ПечСумма, ПечСумма / Количество);
		ПечТаблица.ВывестиСекцию("Строка");
	КонецЦикла;
	
	// выводим подвал
	ПечТаблица.ВывестиСекцию("Подвал");
	
	Если СразуНаПринтер = 0 Тогда
		// покажем результирующую таблицу
		ПечТаблица.Опции(0, 0, ВысотаШапки, 0, "ПараметрыПечатиЧека", "ПараметрыПечатиЧека");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечТаблица.Защита(1);
		Иначе
			ПечТаблица.Защита(0);
		КонецЕсли;
		ПечТаблица.ТолькоПросмотр(1);

		ПечТаблица.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечТаблица.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечТаблица.КоличествоЭкземпляров(КолЭкз);
		ПечТаблица.Напечатать(0);
	КонецЕсли;   
	
КонецПроцедуры // ПечатьЧека()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
		
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы = 2  Тогда
		ПечатьЧека(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");

		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры 
//
Процедура ПриИзмененииНоменклатуры()
	
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка(),СписокПараметров);	
	
	// для услуги цены можно редактировать, иначе нужно выбирать из остатков регистра ?
	Если (Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга) ИЛИ (Склад.РозничныйСклад = 0) Тогда
		Форма.Цена.Редактирование(1);
	Иначе
		Форма.Цена.Редактирование(0);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатуры() 

//******************************************************************************
// ПриИзмененииСуммы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Сумма.
//
// Описание:
//  Производит пересчеты при изменении суммы.
//
Процедура ПриИзмененииСуммы()
	     
	Если Цена = 0 Тогда
	    Предупреждение("Выберите розничную цену
		               |в колонке ""Цена""!",60);
		Сумма = 0;
	КонецЕсли;
	глРасчетНалога(Контекст,"НП");
	глРасчетНалога(Контекст,"НДС");
	
КонецПроцедуры // ПриИзмененииСуммы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
Процедура ПриНачалеРедактированияСтроки()
	     
	// для услуги цены можно редактировать, иначе нужно выбирать из остатков регистра
	Если (Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга) ИЛИ (Склад.РозничныйСклад = 0) Тогда
		Форма.Цена.Редактирование(1);
	Иначе
		Форма.Цена.Редактирование(0);
	КонецЕсли;
	
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;

	ИначеЕсли Форма.ТекущаяКолонка() = "Цена" Тогда 
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		И    (ПустоеЗначение(Склад.РозничныйСклад) = 1)			
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	Перем ОписаниеОш;
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;          
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	ДатаОплаты = глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
	
	Если ДокументОснование.Вид() = "ЗаявкаПокупателя" Тогда
		ВидОперации	= Перечисление.ВидыОперацийРеализацияРозница.Прочее
	Иначе
		ВидОперации	= Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам;
	КонецЕсли;
	
	СуммаВклНДС 	= 1;
	СуммаВклНП 		= 1;  
	УчитыватьНДС 	= 1;
	УчитыватьНП 	= 1;
	УчитыватьЕНВД 	= 0;      
	
	ПриИзмененииСклада(); // если склад облагается ЕНВД, то проставим флаг в документе
	
	Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
		Сообщить(ОписаниеОш);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйСклад			= Склад;
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	ВидОперации	= Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам;
	
	СуммаВклНДС 	= 1;
	СуммаВклНП 		= 1;  
	УчитыватьНДС 	= 1;
	УчитыватьНП 	= 1;
	УчитыватьЕНВД 	= 0;      
	
	ПриИзмененииСклада(); // если склад облагается ЕНВД, то проставим флаг в документе

КонецПроцедуры //ВводНового()

//******************************************************************************
// предопределенная процедура

Процедура ПриОткрытии()     
	                        
    Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			Печать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			Печать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйСклад				= Склад;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	НачВалюта		= Валюта;
	НачКурс			= Курс;
	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;
	НачФирма		= Фирма;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если Склад.РозничныйСклад = 1 Тогда
		// на розн.складе всем разрашаем выбирать цену из списка
	    Форма.Цена.Доступность(1);
		//Форма.Цена.Редактирование(0);
	КонецЕсли;
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	
	УстановкаВидимостиСуммВПодвале();

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();

	ОбновитьНадписи();
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
КонецПроцедуры                                                                  

//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Цена" Тогда 
		Если (Склад.РозничныйСклад = 1) И (Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга) Тогда
			ФлагСтандОбр = 0;
			// регистры рассчитываем, только если хочется редактировать цены вручную
			Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
				Возврат;
			КонецЕсли;
			ТовЦена = "";
			глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
			СписокЦен = ЗначениеИзСтроки(ТовЦена);
			СписокЦен.ВыбратьЗначение(Цена, , , 60,2);
			глПересчетТаблЧасти(Контекст,"Цена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//Предопределенная процедура

Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;
				
				Если Склад.РозничныйСклад = 1 Тогда
				    // для розничного склада очищаем тип цен.
					ТипЦен	= "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество, ВремЦена;
	
	Перем СтрокаВозврЦена;

	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество");
				ТаблицаПодбора.НоваяКолонка("Цена");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0, "ЕстьВидТМЦ");
				
				Если ВремТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
					Если Склад.РозничныйСклад = 0 Тогда
						ВыбТип = ТипЦен;
					Иначе
						ВыбТип = Константа.РозничныйТипЦен;
					КонецЕсли;
					// Для услуг розничную цену берем из справочника
					ТаблицаПодбора.Цена	= глПолучитьЦену(ВремТовар, ВыбТип, ДатаДок, ВремЕдиница, Валюта, Курс);
					
					ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
					ПараметрыПодбора.ДобавитьЗначение(ВыбТип         , "ТипЦен");      
				Иначе	// цена из остатков регистра
					Если Склад.РозничныйСклад = 0 Тогда
						ТаблицаПодбора.Цена	= глПолучитьЦену(ВремТовар, ТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
						
						ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
						ПараметрыПодбора.ДобавитьЗначение(ТипЦен         , "ТипЦен");      
					Иначе
						ТовОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
					    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
						ТовОстатки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
						ТовОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
					
						глПолучитьРозничныйОстатокЦену(ВремТовар, ВремЕдиница, ТовОстатки, , СтрокаВозврЦена);
					
						СписВозврЦен = ЗначениеИзстроки(СтрокаВозврЦена);
						Если СписВозврЦен.РазмерСписка() = 1 Тогда
							ТаблицаПодбора.Цена  = глПересчет(СписВозврЦен.ПолучитьЗначение(1), глРубли, ДатаДок, Валюта, Курс);
							
						ИначеЕсли СписВозврЦен.РазмерСписка() > 1 Тогда
							
						Если СписВозврЦен.ВыбратьЗначение(ВремЦена,"Выберите цену для товара " + ВремТовар.Наименование, , 60) = 1 Тогда
								ТаблицаПодбора.Цена  = глПересчет(ВремЦена, глРубли, ДатаДок, Валюта, Курс);
							Иначе	
								ТаблицаПодбора.Цена  = 0;
							КонецЕсли;
						Иначе
							ТаблицаПодбора.Цена  = 0;
						КонецЕсли;
						
						ПараметрыПодбора.ДобавитьЗначение("Розница", "ЦенаВподборе");
					КонецЕсли;
				КонецЕсли;
				
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора, "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ
ВидСчетаФактуры		= "СчетФактураВыданный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-12";
ТаблицаПечФорм.Кнопка       = "ТОРГ-12";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма товарного чека";
ТаблицаПечФорм.Кнопка       = "Чек";

// Для выбора цен и показа остатков
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);