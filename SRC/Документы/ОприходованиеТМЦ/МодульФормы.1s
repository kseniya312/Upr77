////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//
Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем СтараяДата, СтараяФирма;
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем СпрПартии; // для обработки партий документа

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
КонецФункции                                                                    

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()     
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет видимостью колонок табличной части
//
Процедура УправлениеВидимостью()
	
	Если Склад.РозничныйСклад = 1  Тогда
		Форма.РозничнаяЦена.Видимость(1);
		Форма.РозничнаяНаценка.Видимость(1);  
	Иначе
		Форма.РозничнаяЦена.Видимость(0);
		Форма.РозничнаяНаценка.Видимость(0);  
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостью()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции //ЗаголовокФормы      

//******************************************************************************
// ПроверкаОстатков()
//
// Параметры: 
//  Режим 	- параметр, показывающий, какой кнопкой вызвана процедура: "ОК" или "Провести"
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Проверяет, есть ли на складе остатки номенклатуры с ценой, отличной от цены 
//  поступления и предлагает переоценить их.
//
Процедура ПроверкаОстатков(Режим)       
	
	Если Константа.ПереоцениватьОстатки = 0 Тогда
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Записать Провести? Закрыть";  
		Иначе			
			СтрокаДействийФормы = "#Записать Провести";  
		КонецЕсли;
		Возврат;
	КонецЕсли;    
	
	СЗНоменклатуры = СоздатьОбъект("СписокЗначений");   
	ВыгрузитьТабличнуюЧасть(СЗНоменклатуры, "Номенклатура");
	
	Запрос = СоздатьОбъект("Запрос"); 
	
	ДатаЗапроса = Мин(ДатаДок, ПолучитьДатуТА());
	
	ТекстЗапроса = "
	|Период с ДатаЗапроса по ДатаЗапроса;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура; 
	|РегФирма		= Регистр.ОстаткиТМЦ.Фирма;
	|РегСклад		= Регистр.ОстаткиТМЦ.Склад;
	|ЦенаПрод		= Регистр.ОстаткиТМЦ.ЦенаПрод;
	|Количество		= Регистр.ОстаткиТМЦ.Количество;
	|Условие (Номенклатура в СЗНоменклатуры);
	|Условие (РегСклад = Склад);
	|Условие (РегФирма = Фирма);
	|Функция ОстКоличество = КонОст(Количество);
	|Группировка Номенклатура;
	|Группировка ЦенаПрод;
	|";      
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента, "Номенклатура, РозничнаяЦена, Коэффициент");
	
	Запрос.Выполнить(ТекстЗапроса);
	
	ТЗПереоценка = СоздатьОбъект("ТаблицаЗначений");
	ТЗПереоценка.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
	ТЗПереоценка.НоваяКолонка("Количество", "Число",,,,10);
	ТЗПереоценка.НоваяКолонка("ЦенаСтарая", "Число",,,"Цена (стар.)",10);
	ТЗПереоценка.НоваяКолонка("ЦенаНовая", "Число",,,"Цена (нов.)",10);
	
	        
	// В случае дублей строк будет предложено переоцениваем по первой цене
	Пока Запрос.Группировка("Номенклатура") = 1 Цикл
		Пока Запрос.Группировка("ЦенаПрод") = 1 Цикл 

			// Отрицательные количества переоценивать не будем
			Если Запрос.ОстКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			НомСтроки = 0;
			ТаблицаДокумента.НайтиЗначение(Запрос.Номенклатура, НомСтроки, "Номенклатура");
			ТаблицаДокумента.ПолучитьСтрокуПоНомеру(НомСтроки);
			НоваяЦена = Окр(ТаблицаДокумента.РозничнаяЦена/ТаблицаДокумента.Коэффициент, 2);
			Если НоваяЦена <> Запрос.ЦенаПрод Тогда
				ТЗПереоценка.НоваяСтрока();
				ТЗПереоценка.Номенклатура	= Запрос.Номенклатура;
				ТЗПереоценка.Количество		= Запрос.ОстКоличество;
				ТЗПереоценка.ЦенаСтарая		= Запрос.ЦенаПрод;
				ТЗПереоценка.ЦенаНовая 		= НоваяЦена;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;                                                               
	
	СЗПарам = СоздатьОбъект("СписокЗначений"); 
	СЗПарам.Установить("Заголовок", "Переоценка остатков");
	СЗПарам.Установить("ТекстВопроса", "На складе обнаружены остатки ТМЦ по розничной цене, отличной от розничной цены, назначаемой в документе поступления. Переоценить?");
	СЗПарам.Установить("ТаблЗначений", ТЗПереоценка);  
			
	Если ТЗПереоценка.КоличествоСтрок() = 0 Тогда
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Записать Провести? Закрыть";
		Иначе
			СтрокаДействийФормы = "#Записать Провести";  
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
    Записать();
	Провести();
	
	ОткрытьФормуМодально("Обработка.ВопросСТаблицейЗначений", СЗПарам, 1); 
	
	Если СЗПарам = "Да" Тогда         
		Док = СоздатьОбъект("Документ.ПереоценкаРозница");
		Док.Новый();
		Док.Фирма		= Фирма;
		Док.Склад		= Склад;
		Док.Проект		= Проект;    
		Док.Валюта		= глРубли;
		Док.Курс		= 1;
		Док.Комментарий	= "Переоценка в связи с поступлением нового товара";
		
		Док.ЗагрузитьТабличнуюЧасть(ТЗПереоценка);
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Док.Единица		= Док.Номенклатура.БазоваяЕдиница;
			Док.Коэффициент	= 1;
		КонецЦикла;
		
		Док.Записать();
		Док.Провести();

		ОткрытьФорму(Док.ТекущийДокумент());		
		
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Закрыть";  
		КонецЕсли;
	ИначеЕсли СЗПарам = "Нет" Тогда         
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Закрыть";  
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаОстатков()
			
//******************************************************************************
// ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
//
// Параметры: 
//  СписТоваров		- список значений, содержащий товары для установки фильтра
//                    по ним.
//  ТолькоОстатки	- возвращать итоги только по регистру ОстаткиТМЦ
//  ОстаткиТМЦ		- выходной параметр. Таблица значений с остатками регистра 
//                    ОстаткиТМЦ
//  РегПартии		- выходной параметр. Таблица значений с остатками регистра 
//                    ПартииНаличие.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицы значений из остатков регистров ОстаткиТМЦ и ПартииНаличие
//
Процедура ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
	
	ВремРегистры	= СоздатьОбъект("Регистры");
	РегОстатки		= ВремРегистры.ОстаткиТМЦ;
	РегОстатки.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	РегОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
	
	Если ТолькоОстатки = 0 Тогда
		РегПартии = ВремРегистры.ПартииНаличие;
		РегПартии.УстановитьЗначениеФильтра("Фирма"	, Фирма		, 1);
		РегПартии.УстановитьЗначениеФильтра("МОЛ"	, Склад.МОЛ	, 1);
	КонецЕсли;
	
	Если ПустоеЗначение(СписТоваров) = 0 Тогда
		РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);
		Если ТолькоОстатки = 0 Тогда
			РегПартии.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);
		КонецЕсли;
	КонецЕсли;

	// в этом случае надо сделать временный расчет итогов
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			Если ТолькоОстатки = 0 Тогда
				РегПартии.ВременныйРасчет();
			КонецЕсли;
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			Если ТолькоОстатки = 0 Тогда
				РегПартии.ВременныйРасчет();
			КонецЕсли;
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	ОстаткиТМЦ	= СоздатьОбъект("ТаблицаЗначений");
	РегОстатки.ВыгрузитьИтоги(ОстаткиТМЦ, 1, 1);
	
	Если ТолькоОстатки = 0 Тогда
		ОстаткиПартий	= СоздатьОбъект("ТаблицаЗначений");
		РегПартии.ВыгрузитьИтоги(ОстаткиПартий, 1, 1);
	КонецЕсли;

КонецПроцедуры // ПолучитьОстатки()

//******************************************************************************
// СоздатьПартию(ПартияИсточник = 0) 
//
// Параметры: 
//  ПартияИсточник - элемент справочника партий, необязательный параметр,
//                   если задан, то ГТД, Страна и свойство копируются из него.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Если для текущего ТМЦ в справочнике Номенклатура задана Страна и ГТД по умолчанию, то 
//  автоматически создается и записывается соответствующий элемент справочника партий,
//  при копировании строки параметры партии наследуются.
//
Процедура СоздатьПартию(ПартияИсточник = 0)
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
	    Возврат;
	КонецЕсли;  
	Если ПустоеЗначение(Партия) = 0 Тогда
		// если партия уже записана - не трогаем ее!
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(ПартияИсточник) = 0 Тогда
		Если (ПартияИсточник.ГТД.Выбран() = 1) 
		или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
		или  (ПартияИсточник.Свойство.Выбран() = 1) 
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = ПартияИсточник.ГТД;
			СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
			СпрПартии.Свойство            = ПартияИсточник.Свойство;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	Иначе    
		Если (Номенклатура.НомерГТД.Выбран() = 1) 
		или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = Номенклатура.НомерГТД;
			СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьПартию()

//******************************************************************************
// УдалитьПартию()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие выбранную партию в текущей строке документа.
//
Процедура УдалитьПартию()

	Если Партия.Выбран() = 1 Тогда
		Если СпрПартии.НайтиЭлемент(Партия) = 1 Тогда
			СпрПартии.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПартию()

//******************************************************************************
// УдалитьВсеПартии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие все выбранные партии во всех строках документа.
//
Процедура УдалитьВсеПартии()
	
    ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдалитьПартию();
	КонецЦикла;                     
	
КонецПроцедуры // УдалитьВсеПартии()

//******************************************************************************
// ЗаполнитьГТД()
//
// Параметры: 
//  Нет
//
// Описание:
//  Если в справочнике Номенклатура для подобранной позиции указан номер ГТД
//  и (или) страна происхождения, то переносим эти значения в документ, создавая партии.
//
Процедура ЗаполнитьГТД()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    СоздатьПартию(СпрПартии);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьГТД()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустаяСтрока(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:                
//	ИмяРеквизита - идентификатор текущей колонки табличной части,
//          
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Производится "специфический" пересчет зависимых реквизитов при редактировании
// реквизита табличной части в документе. При изменении цены пересчитывается
// розничная наценка.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)  
	
	Перем ВремКоэфф, ВремЦена, ВремРознЦена, НоваяНоменклатура;
	Перем ЦенаЦены, ЕдЦены, ВалютаЦены;
	Перем ПорядокОкрРозничнойЦены; // порядок округления розничной цены
	
	ПорядокОкрРозничнойЦены = 0.01;
	Если Константа.РозничныйТипЦен.Выбран() = 1 Тогда
		ПорядокОкрРозничнойЦены = Константа.РозничныйТипЦен.ПорядокОкругления;			    
	КонецЕсли;
	                                               
	Если ИмяРеквизита = "Номенклатура" Тогда
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			
			// Очистили Номенклатуру
			Количество		= 0;
			Единица			= 0;
			Коэффициент		= 0;                  
			Цена			= 0;
			Сумма			= 0;
			Партия			= 0;
			РозничнаяЦена	= 0;
			РозничнаяНаценка= 0;
			Возврат;
		КонецЕсли;

		// Определим, поменяли ли Номенклатуру?
		НоваяНоменклатура = 0;
		Если ПустоеЗначение(Единица) = 1 Тогда
			НоваяНоменклатура = 1;
		ИначеЕсли Номенклатура <> Единица.Владелец Тогда
			НоваяНоменклатура = 1;
		КонецЕсли;
	
		Если НоваяНоменклатура = 0 Тогда
			Возврат;
		КонецЕсли;
	
		// проверим основную единицу товара
		Если Номенклатура <> Номенклатура.ОсновнаяЕдиница.Владелец Тогда
			Предупреждение("Для позиции номенклатуры """ + СокрЛП(Номенклатура) + 
			               """  указана основная единица измерения, принадлежащая другому элементу справочника Номенклатура.");
		    Возврат;
		КонецЕсли;
		
		// заполняем единицу
		Единица 		= Номенклатура.ОсновнаяЕдиница;
		Коэффициент 	= Единица.Коэффициент;    
		Партия			= ""; // очистка партии, поскольку она принадлежит другой номенклатуре.
		
		// цены берем из справочника
		
		// Заполним розничную наценку
		Если Склад.РозничныйСклад = 1  Тогда
			Если (РозничнаяЦена = 0) И (РозничнаяНаценка = 0) Тогда
					
			    // Получим наценку из розничной цены
				РознНаценка	= 0;
				глВернутьЦену(Номенклатура, Константа.РозничныйТипЦен, ДатаДок, , , , РознНаценка, );
				Если РознНаценка = 0 Тогда
				    РозничнаяНаценка = Константа.РозничныйТипЦен.Процент;
				Иначе
					РозничнаяНаценка = РознНаценка;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустоеЗначение(ТипЦен) = 1 Тогда
			Возврат; // нет типа цен, нет и цены
		КонецЕсли;
	
		// получим параметры цены
		Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
			Возврат; // у ТМЦ цены нет
		КонецЕсли;
			
		// В документе хочется видеть цену за ту единицу, за которую цена задана. Перезаполняем
		Единица 		= ЕдЦены;
		Коэффициент 	= ЕдЦены.Коэффициент;
		
		// Пересчет валюты
		Цена = глПересчет(ЦенаЦены, ВалютаЦены, ДатаДок, Валюта, Курс);
		
		Если Склад.РозничныйСклад = 1  Тогда
			// Определим что пересчитывать (розничную цену или розничную наценку) и пересчитаем.
			Если РозничнаяЦена <> 0 Тогда
				ПересчетТаблЧасти("РозничнаяЦена"); // Пересчитаем розничную наценку	
			Иначе // РозничнаяЦена = 0
				ПересчетТаблЧасти("РозничнаяНаценка"); // Пересчитам розничную цену	
			КонецЕсли;
		КонецЕсли;
		
		Сумма = Цена*Количество;
		
	ИначеЕсли ИмяРеквизита = "Количество" Тогда
		
		Сумма = Цена*Количество;
		
	ИначеЕсли ИмяРеквизита = "Единица" Тогда	
		
		// сохраним старый коэффициент
		ВремКоэфф = Коэффициент;
		
		// заполним коэффициент в документе из единицы
		Коэффициент = Единица.Коэффициент;
		Если ВремКоэфф <> 0 Тогда
			
			// цены были за другой коэффициент. Пересчитываем
			Цена			= Цена * Коэффициент / ВремКоэфф;         
			Сумма			= Цена*Количество;
			Если Склад.РозничныйСклад = 1  Тогда
				РозничнаяЦена	= глОкруглить(РозничнаяЦена * Коэффициент / ВремКоэфф, ПорядокОкрРозничнойЦены);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "Цена" Тогда
		Сумма = Цена*Количество;
		
		Если Склад.РозничныйСклад = 1  Тогда
			// Определим что пересчитывать (розничную цену или розничную наценку) и пересчитаем.
			Если РозничнаяЦена <> 0 Тогда
				ПересчетТаблЧасти("РозничнаяЦена"); // Пересчитаем розничную наценку	
			Иначе // РозничнаяЦена = 0
				ПересчетТаблЧасти("РозничнаяНаценка"); // Пересчитам розничную цену	
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяРеквизита = "РозничнаяЦена" Тогда
				
		Если Цена <> 0 Тогда                                                     
			РознЦенаВВалютеДока = глПересчет(РозничнаяЦена, глРубли, 1, Валюта, Курс);
			РозничнаяНаценка = (РознЦенаВВалютеДока - Цена) / Цена * 100;    
		Иначе
			РозничнаяНаценка = 0;
		КонецЕсли;
			
	ИначеЕсли ИмяРеквизита = "РозничнаяНаценка" Тогда
		
		// Пересчитаем в глРубли
		РознЦена = глПересчет(Цена, Валюта, Курс, глРубли, 1);
		
		// Наценим и округлим
		РозничнаяЦена= глОкруглить(РознЦена * (100 + РозничнаяНаценка) / 100, ПорядокОкрРозничнойЦены);
		
	ИначеЕсли ИмяРеквизита = "Сумма" Тогда
		
		Цена = ?(Количество = 0, 0, Сумма/Количество);
		
		Если Склад.РозничныйСклад = 1  Тогда
			// Определим что пересчитывать (розничную цену или розничную наценку) и пересчитаем.
			Если РозничнаяЦена <> 0 Тогда
				ПересчетТаблЧасти("РозничнаяЦена"); // Пересчитаем розничную наценку	
			Иначе // РозничнаяЦена = 0
				ПересчетТаблЧасти("РозничнаяНаценка"); // Пересчитам розничную цену	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()
                                               
//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!
			|Для оформления поступления услуг воспользуйтесь документом ""Поступление (услуги и пр.)"".",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	
	СтараяПартия = Партия;
	Если ПустоеЗначение(Партия) = 0 Тогда
		Если Партия.Владелец <>  Номенклатура Тогда
			УдалитьПартию(); // реквизит Партия будет очищен в глПересчетТаблЧасти
		КонецЕсли;
	КонецЕсли;
	//ПересчетТаблЧасти("Номенклатура");	
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());
	
    СоздатьПартию(СтараяПартия);

КонецПроцедуры // ПриИзмененииНоменклатуры()        

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	
КонецПроцедуры	//ПоКнопкеЦены()           

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Перем ОприходованныеКоличества;
	Перем ВремЦена, ЕдЦены, ВалютаЦены; // для получения цеы из справочника
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	Если (ДокОснование.Вид() <> "ИнвентаризацияТМЦ") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
	
	ТекДокумент	= ТекущийДокумент();
	
	// сформируем список товаров, 
	ТекстЗапроса = "//{{ЗАПРОС(ПредСписание)
	|Период с '01.01.1980' по ДатаДок;
	|Без итогов;
	|Основание 			= Документ.ОприходованиеТМЦ.ДокОснование;
	|ДокОприходования   = Документ.ОприходованиеТМЦ.ТекущийДокумент;
	|Товар 				= Документ.ОприходованиеТМЦ.Номенклатура;
	|Колво 				= Документ.ОприходованиеТМЦ.Количество;
	|Коэфф 				= Документ.ОприходованиеТМЦ.Коэффициент;
	|Функция ВсегоКолво = Сумма(Колво);
	|Группировка Товар без групп;
	|Группировка Коэфф;
	|Условие((Основание = ДокОснование) и (ДокОприходования <> ТекДокумент));
	|"//}}ЗАПРОС
	;

	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "Ошибка при отборе товаров.";
	КонецЕсли;
	
	Запрос.Выгрузить(ОприходованныеКоличества);

	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	ВремВидТМЦ	=	ВосстановитьЗначение("ВидТМЦПоУмолчанию");
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВремВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		Если (ТаблицаДокумента.КоличествоУчет < ТаблицаДокумента.Количество) Тогда
			Товар = ТаблицаДокумента.Номенклатура;
			Колво = ТаблицаДокумента.Количество - ТаблицаДокумента.КоличествоУчет;
			
			// поищем в таблице уже списанных количеств
			Поз = 0;
			Пока (ОприходованныеКоличества.НайтиЗначение(Товар, Поз, "Товар") = 1)
			   и (Колво > 0)
			Цикл
				ОприходованныеКоличества.ПолучитьСтрокуПоНомеру(Поз);
				// пересчитаем количество в единицу измерения инвентаризации
				СписКолво  = ОприходованныеКоличества.ВсегоКолво * ОприходованныеКоличества.Коэфф / 
				             ?(ПустоеЗначение(ТаблицаДокумента.Коэффициент) = 1, 1, ТаблицаДокумента.Коэффициент);
				ПогашКолво = Мин(Колво, СписКолво);
				
				Если ПогашКолво >= СписКолво Тогда
					ОприходованныеКоличества.УдалитьСтроку(Поз);
				Иначе
					ОприходованныеКоличества.ВсегоКолво = (СписКолво - ПогашКолво) * ТаблицаДокумента.Коэффициент / 
					                                      ?(ПустоеЗначение(ОприходованныеКоличества.Коэфф) = 1, 1, ОприходованныеКоличества.Коэфф);
				КонецЕсли;
				
				Колво = Колво - ПогашКолво;
				
				Поз = 0;
			КонецЦикла;
			
			Если Колво > 0 Тогда
				НоваяСтрока();
				ВидТМЦ       = ВремВидТМЦ;
				Номенклатура = Товар;
				Количество 	 = Колво;
				Единица 	 = ТаблицаДокумента.Единица;
				Коэффициент  = ТаблицаДокумента.Коэффициент;
				
				Если ДокОснование.ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
					
					// Цену заполним из справочника
					Если ПустоеЗначение(ТипЦен) = 0 Тогда
						
						// получим цену
						Цена = глПолучитьЦену(Номенклатура, ТипЦен, ДатаДок, Единица, Валюта, Курс)
					Иначе	
						Цена = 0; // нет типа цен, нет и цены
					КонецЕсли;
					
					// Розничную цену возьмем из документа
					РозничнаяЦена	= ТаблицаДокумента.Цена;
					
					// посчитаем розничную наценку
					Если Цена <> 0 Тогда                                                     
						РознЦена = глПересчет(РозничнаяЦена, глРубли, 1, Валюта, Курс);
						РозничнаяНаценка = (РознЦена - Цена) / Цена * 100;    
					Иначе
						РозничнаяНаценка = 0;
					КонецЕсли;
				Иначе				    
					Цена = ТаблицаДокумента.Цена;
				КонецЕсли;
				
				Сумма = Цена * Количество;
				
				СоздатьПартию();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; // по строкам основания       
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе " +
		         ДокОснование.ПредставлениеВида() +
				 " № " + ДокОснование.НомерДок + " от " + ДокОснование.ДатаДок +
				 " отсутствуют товары фактическое количество которых превышает учетное";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		// очищаем наш документ
		// перед удалением строк надо удалить все партии
		УдалитьВсеПартии();
		УдалитьСтроки();
	
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	    
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Заполнить по документу - основанию (перед заполнением табличная часть будет очищена)?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// очищаем наш документ
	// перед удалением строк надо удалить все партии
	УдалитьВсеПартии();
	УдалитьСтроки();
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(1,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Организация
	Организация = СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Организация");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Организация");
	
	
	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// выводим табличную часть
	НомСтроки = 0;
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
		
	// секция Итого
	ИсхТабл.ВывестиСекцию("Итого");
	
	// секция СуммаПрописью
	ИсхТабл.ВывестиСекцию("СуммаПрописью");
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
	    ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()   

//******************************************************************************
// ПриИзмененииВидаТМЦ()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Выполняется при выборе вида ТМЦ.

Процедура ПриИзмененииВидаТМЦ()
	                                      
	Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
		СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаТМЦ()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()  


//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
	                ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст, ДокументОснование, "Покупка");      
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	СуммаВклНДС = 0;
	Если Скопирован = 1 Тогда	//копирование документа - очистим партии
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			СтараяПартия = Партия;
			Партия="";            
			СоздатьПартию(СтараяПартия);
		КонецЦикла;
		// *************** КОНЕЦ ********************************
		Возврат;
	КонецЕсли;

	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии() 
	                         
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Форма.РозничнаяЦена.Заголовок("Розн. цена (" + СокрЛП(глРубли) + ")");

	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	НачальнаяДатаДокумента 	= ДатаДок;  
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
                        
	Форма.ВидТМЦ			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Номенклатура		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена				.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма				.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.РозничнаяЦена		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.РозничнаяНаценка	.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Заполнить по последним приходам");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");  
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	
	УправлениеВидимостью();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	
	глПриВыбореБухСчета(Контекст, 1, 1);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриРедактированииНовойСтроки()
	                    
	СтараяПартия = Партия;
	Партия = "";
	Если Номенклатура.Выбран() = 1 Тогда // Копирование
		Если СтараяПартия.Выбран() = 1 Тогда // Была выбрана партия, копируем ее
			СоздатьПартию(СтараяПартия);
		КонецЕсли;
	Иначе    
		ВидТМЦ = ВосстановитьЗначение("ВидТМЦПоУмолчанию");
	КонецЕсли; // Номенклатура.Выбран() = 1
	
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеРедактированияСтроки()
	
	ЭлементДиалога=Форма.ТекущаяКолонка();
	
	Если (ЭлементДиалога="ГТД") или (ЭлементДиалога="СтранаПроисхождения") или
									(ЭлементДиалога="Свойство") Тогда
		
		Если Номенклатура.Выбран()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Парам=СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Контекст,"КонтекстДокумента");
		Парам.ДобавитьЗначение(НомерСтроки,"НомерСтроки");
		Парам.ДобавитьЗначение(ЭлементДиалога,"ЭлементДиалога"); 
		
		Если Партия.Выбран()=1 Тогда
			ОткрытьФормуМодально(Партия,Парам,0);
		Иначе                                  
			ОткрытьФормуМодально("Элемент.Партии",Парам,,,Номенклатура);
		КонецЕсли;
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;                                  
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//*****************************************************************************
// предопределенная процедура
//
Процедура ПриУдаленииСтроки()
	
	УдалитьПартию();
	
КонецПроцедуры // ПриУдаленииСтроки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "Счет")
	 или (ИдентЭлемДиалога = "Субконто1") 
	 или (ИдентЭлемДиалога = "Субконто2") 
	 или (ИдентЭлемДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);  
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)  
	
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
		УправлениеВидимостью();
		ОбновитьНадписи();
	КонецЕсли;       

КонецПроцедуры // ПриВыбореЗакладки()                                                                 

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
                           
    // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда
		ОтменитьЗапись=0;
		СпрПартии=СоздатьОбъект("Справочник.Партии");
		
		// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
		// после записи всех партий - пропишем их в документ всех сразу
		ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
		ТЗПартии.НоваяКолонка("НомерСтрокиДок");
		ТЗПартии.НоваяКолонка("Партия");
		
		НачатьТранзакцию();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Партия.Выбран()=0) и (Номенклатура.Выбран()=1) Тогда
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки());
					ОтменитьЗапись=1;
					Прервать;
				КонецПопытки;
				
				ТЗПартии.НоваяСтрока();
				ТЗПартии.НомерСтрокиДок=НомерСтроки;
				ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
				
			КонецЕсли;
		КонецЦикла; 
		
		Если ОтменитьЗапись=0 Тогда  
			// запишем созданные партии
			ЗафиксироватьТранзакцию();
			
			// теперь занесем партии в спецификацию нашего документа
			ТЗПартии.ВыбратьСтроки();
			Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
				
				ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
				Партия=ТЗПартии.Партия;
				
			КонецЦикла;
		Иначе
			ОтменитьТранзакцию();
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;		
	// ***************************** КОНЕЦ ************************************
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()
	                                         
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// Если документ новый и в нем были выбраны партии, 
	// то они не нужны и их надо пометить на удаление
	Если Выбран() = 0 Тогда        
		УдалитьВсеПартии();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	ЗаполнитьГТД();
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ТаблицаПодбора.Цена  = глПолучитьЦену(ВремТовар, ТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(1              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 0, 0, 0);
				
				ЗаполнитьГТД();
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия() 

Процедура ЗаполнитьЦены()
	//Объявление переменных
	Меню 				= СоздатьОбъект("СписокЗначений");
	СписокНоменклатуры  = СоздатьОбъект("СписокЗначений");
	ТаблЗапроса 		= СоздатьОбъект("ТаблицаЗначений");
	СпрЦены 			= СоздатьОбъект("Справочник.Цены");
	ДатаОпрСеб 			= "";
	Выб 				= "";
	Меню.ДобавитьЗначение("Себестоимость РубНДС");
	Меню.ДобавитьЗначение("Себестоимость РубБезНДС");
	Меню.ДобавитьЗначение("Себестоимость Упр");
	Меню.ДобавитьЗначение("Розничные Руб");
	
	//Проверка заполнения табличной части
	Если КоличествоСтрок()=0 Тогда
		Сообщить("Табличная часть пуста","!!!");
		Возврат;
	КонецЕсли;	
	
	Если Меню.ВыбратьЗначение(Выб,,,,1)=1 Тогда
		//Расчет себестоимости
		ВыгрузитьТабличнуюЧасть(СписокНоменклатуры,"Номенклатура");
		Если Выб <> "Розничные Руб" Тогда
			Если ВвестиДату(ДатаОпрСеб,"Себестоимость на дату")=0 Тогда
				Сообщить("Не выбрана дата для себестоимости","!!!");
				Возврат;
			КонецЕсли;
			Состояние("Расчет себестоимости");
			МОЛотбора = Склад.МОЛ;
			ФирмаОтбора = Фирма;
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(Сформировать)
			|Период с ДатаОпрСеб по ДатаОпрСеб;
			|Фирма		= Регистр.ПартииНаличие.Фирма;
			|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
			|МОЛ = Регистр.ПартииНаличие.МОЛ;
			|Количество = Регистр.ПартииНаличие.Количество;";
			
			Если Выб = "Себестоимость РубНДС" Тогда // бух с НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб;";
				
			ИначеЕсли Выб = "Себестоимость РубБезНДС" Тогда // бух без НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаБезНДС;";
				
			ИначеЕсли Выб = "Себестоимость Упр" Тогда
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаУпр;";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"Функция КонОстС = НачОст(Сумма);
			|Функция КонОстК = НачОст(Количество);
			|Группировка Номенклатура без групп;
			|Условие((МОЛ = МОЛотбора) и (Номенклатура в СписокНоменклатуры) и (Фирма = ФирмаОтбора));
			|";
			// Если ошибка в запросе, то выход из процедуры
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;
			//Выгружаем данные запроса			
			Запрос.Выгрузить(ТаблЗапроса,0,0);
		КонецЕсли;
		// обработка табличной части, пересчет цен
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Состояние("Обработка табличной части: "+НомерСтроки);
			Если Выб = "Розничные Руб" Тогда
				СпрЦены.ИспользоватьВладельца(Номенклатура);
				СпрЦены.ВыбратьЭлементы();
				Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
					Если СокрЛП(СпрЦены.ТипЦен.Наименование) = "Розничная" Тогда
						Цена = СпрЦены.Цена.Получить(ДатаДок);
						ПересчетТаблЧасти("Цена");
					КонецЕсли;	
				КонецЦикла;
			Иначе
				стр = "";
				Если ТаблЗапроса.НайтиЗначение(Номенклатура,стр,"Номенклатура")=1 Тогда
					 Цена  = ТаблЗапроса.ПолучитьЗначение(стр,"КонОстС")/ТаблЗапроса.ПолучитьЗначение(стр,"КонОстК");
					 Сумма = Цена*Количество;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Сообщить("Цены пересчитаны","");
	КонецЕсли;
КонецПроцедуры
           
Процедура ПроставитьЦеныИзИстории() 
	//получаем дату начала анализа 
	ДатаНачала 	= "";
	ДатаКонца 	= ДатаДок;
	
	Если ВвестиДату(ДатаНачала,"Укажите дату начала анализа цен.") = 0 Тогда
		Возврат;
	КонецЕсли;	
	 
	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	//получаем список товаров
	//для текущей строки или для всех
	СписокНоменклатуры = СоздатьОбъект("СписокЗначений");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		СписокНоменклатуры.ДобавитьЗначение(Номенклатура);
	КонецЦикла;	
	
	//формируем запрос 
	КодОперацииЗакупка = глКО.Закупка;
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура;
	|МОЛ			= Регистр.ПартииНаличие.МОЛ;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество;";
	
	ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаБезНДС;";	  
	
	ТекстЗапроса = ТекстЗапроса + "Функция ПриходС = Приход(Сумма);
	|Функция ПриходК = Приход(Количество);
	//|Условие (КодОперации = КодОперацииЗакупка);
	|Условие (Номенклатура В СписокНоменклатуры);
	|Группировка Номенклатура без групп;
	|Группировка МОЛ без групп;
	|Группировка Док;";
	   
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЦенДругиеСклады 	= СоздатьОбъект("ТаблицаЗначений");  
	ТаблицаЦенДругиеСклады.НоваяКолонка("Номенклатура");
	ТаблицаЦенДругиеСклады.НоваяКолонка("Цена");
	ТаблицаЦенНашСклад		= СоздатьОбъект("ТаблицаЗначений");
	ТаблицаЦенНашСклад.НоваяКолонка("Номенклатура");
	ТаблицаЦенНашСклад.НоваяКолонка("Цена");
	
	Пока Запрос.Группировка(1) = 1 Цикл
		ЦенаНашСклад 	= 0;
		ЦенаДругойСклад = 0;
		Пока Запрос.Группировка(2) = 1 Цикл
		    ТекДатаДок = '00010101';
			Пока Запрос.Группировка(3) = 1 Цикл  
				Если (Запрос.Док.Вид() <> "ПоступлениеТМЦ") и (Запрос.Док.Вид() <> "ПоступлениеТМЦИмпорт") Тогда
					Продолжить;
				КонецЕсли;
				
				Если (ТекДатаДок < Запрос.Док.ДатаДок) Тогда  
					ТекДатаДок = Запрос.Док.ДатаДок; 
					Если Запрос.МОЛ = Склад.Мол Тогда                
						Если Запрос.ПриходК <> 0 Тогда
							ЦенаНашСклад = Запрос.ПриходС/Запрос.ПриходК;							
						КонецЕсли;
					Иначе
						Если Запрос.ПриходК <> 0 Тогда
							ЦенаДругойСклад = Запрос.ПриходС/Запрос.ПриходК;							
						КонецЕсли;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			Если ЦенаНашСклад <> 0 Тогда
				Прервать;	
			КонецЕсли;	
		КонецЦикла; 
		
		Если ЦенаНашСклад <> 0 Тогда
			ТаблицаЦенНашСклад.НоваяСтрока();
			ТаблицаЦенНашСклад.Номенклатура = Запрос.Номенклатура;
			ТаблицаЦенНашСклад.Цена = ЦенаНашСклад; 
			
		ИначеЕсли ЦенаДругойСклад <> 0 Тогда
		    ТаблицаЦенДругиеСклады.НоваяСтрока();
			ТаблицаЦенДругиеСклады.Номенклатура = Запрос.Номенклатура;
			ТаблицаЦенДругиеСклады.Цена = ЦенаДругойСклад;
		
		КонецЕсли; 
	КонецЦикла;

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл  
		ПоискНомерСтроки = "";
		Если ТаблицаЦенНашСклад.НайтиЗначение(Номенклатура,ПоискНомерСтроки,"Номенклатура") = 1 Тогда  
			ТаблицаЦенНашСклад.ПолучитьСтрокуПоНомеру(ПоискНомерСтроки);    
			Цена = ТаблицаЦенНашСклад.Цена;    
			ПересчетТаблЧасти("Цена");
		ИначеЕсли  ТаблицаЦенДругиеСклады.НайтиЗначение(Номенклатура,ПоискНомерСтроки,"Номенклатура") = 1 Тогда
			ТаблицаЦенДругиеСклады.ПолучитьСтрокуПоНомеру(ПоискНомерСтроки);    
			Цена = ТаблицаЦенДругиеСклады.Цена;  
			ПересчетТаблЧасти("Цена");
		Иначе
			Цена = 0.01;  
			ПересчетТаблЧасти("Цена");			
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
СпрПартии = СоздатьОбъект("Справочник.Партии");
 
// формируем таблицу печатных форм
НомерТекущейФормы = 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";