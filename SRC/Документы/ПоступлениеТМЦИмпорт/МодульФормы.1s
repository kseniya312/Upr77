////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"            

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент, СтараяТаможня;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов   
Перем СтарыйДоговорТаможниВал;

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;

Перем СпрПартии; // для обработки партий документа     

Процедура ПересчетТаблЧасти(Колонка) Далее

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ                

//*****************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//  Режим - если не пустое значение, то вызывается пересчет строк с этим параметром
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Управляет видимостью и доступностью отдельных элементов диалога
//
Процедура УправлениеДиалогом(Режим="")
	Если ДоговорТаможниВал.Выбран() = 1 Тогда
		Форма.СуммаПошлиныВал.Видимость(1);
		Форма.СуммаНДСВал.Видимость(1);    
		Форма.СуммаПошлиныВал.Заголовок("Пошлина (" + ДоговорТаможниВал.ВалютаВзаиморасчетов.Наименование +")");
		Форма.СуммаНДСВал.Заголовок("НДС (" + ДоговорТаможниВал.ВалютаВзаиморасчетов.Наименование +")");    
		Если НДСВВалюте = 1 Тогда
			Форма.СуммаНДСВал.Доступность(1);    
		Иначе
			Форма.СуммаНДСВал.Доступность(0);    
		КонецЕсли;
		Если ПошлинаВВалюте = 1 Тогда
			Форма.СуммаПошлиныВал.Доступность(1);    
		Иначе
			Форма.СуммаПошлиныВал.Доступность(0);    
		КонецЕсли;
	Иначе
		Форма.СуммаНДСВал.Видимость(0);
		Форма.СуммаПошлиныВал.Видимость(0);  
	КонецЕсли;                                                                     
	Если ПустоеЗначение(Режим) = 0 Тогда    
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ПересчетТаблЧасти(Режим);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры                                                                     

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеДоступностью()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Управление доступностью элементов диалога.
//
//Процедура УправлениеДоступностью()
//	
//	Если 
//	
//КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего		.Заголовок("Сумма ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС			.Заголовок("НДС ("+ТекстВалюты(глРубли)+")");
	Форма.РамкаПошлина		.Заголовок("Пошлина ("+ТекстВалюты(глРубли)+")");
	Форма.РамкаВзаимПодвал	.Заголовок("Сумма ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	Форма.Цена				.Заголовок("Цена ("+ТекстВалюты(Валюта)+")");
	Форма.Сумма				.Заголовок("Сумма ("+ТекстВалюты(Валюта)+")");
	Форма.СуммаНДСРуб		.Заголовок("НДС ("+ТекстВалюты(глРубли)+")");
	Форма.СуммаПошлиныРуб	.Заголовок("Пошлина ("+ТекстВалюты(глРубли)+")");
	
//	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()    

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма,Договор, "поставщик");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//******************************************************************************
// СоздатьПартию(ПартияИсточник = 0) 
//
// Параметры: 
//  ПартияИсточник - элемент справочника партий, необязательный параметр,
//                   если задан, то Страна и свойство копируются из него.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Если для текущего ТМЦ в справочнике Номенклатура задана Страна по умолчанию, то 
//  автоматически создается и записывается соответствующий элемент справочника партий,
//  при копировании строки параметры партии наследуются.
//
Процедура СоздатьПартию(ПартияИсточник = 0)
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
	    Возврат;
	КонецЕсли;  
	Если ПустоеЗначение(Партия) = 0 Тогда
		// если партия уже записана - не трогаем ее!
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(ПартияИсточник) = 0 Тогда
		Если (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
		или  (ПартияИсточник.Свойство.Выбран() = 1) 
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
			СпрПартии.Свойство            = ПартияИсточник.Свойство;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	Иначе    
		Если Номенклатура.СтранаПроисхождения.Выбран() = 1 Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьПартию()

//******************************************************************************
// УдалитьПартию()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие выбранную партию в текущей строке документа.
//
Процедура УдалитьПартию()

	Если Партия.Выбран() = 1 Тогда
		Если СпрПартии.НайтиЭлемент(Партия) = 1 Тогда
			СпрПартии.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПартию()

//******************************************************************************
// УдалитьВсеПартии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие все выбранные партии во всех строках документа.
//
Процедура УдалитьВсеПартии()
	
    ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдалитьПартию();
	КонецЦикла;                     
	
КонецПроцедуры // УдалитьВсеПартии()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;

	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                 
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;

	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Итог("Сумма");

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<> СуммаДокументаСтараяРуб) 
	или  (ВалютаДоговораСтарая	   <> Договор.ВалютаВзаиморасчетов)
	Тогда
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		    = глПересчет(СуммаВзаиморасчетовДок,
									  Валюта,                      Курс,
									  Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции //ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только на оптовый склад!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.

Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда    
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();  
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		
		ОбновитьНадписи();    
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   

//******************************************************************************
// ПриИзмененииТаможни()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе таможни.
//
Процедура ПриИзмененииТаможни()
	
	Если СтараяТаможня <> Таможня Тогда
		ДоговорТаможниРуб 	= Таможня.ОсновнойДоговор;
		ДоговорТаможниВал 	= "";// очистим, поменялась ведь таможня
		ТаможенныйСборВал 	= 0;
		ТаможенныйСборВал_Р = 0;
		СтараяТаможня = Таможня;
	КонецЕсли;     
	
КонецПроцедуры // ПриИзмененииТаможни()    

//******************************************************************************
// ПриИзмененииТаможенногоСбораВал()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Таможенный сбор (вал).
//
// Описание:
//  Таможенный сбор в валюте пересчитывается рублевый эквивалент.
//
Процедура ПриИзмененииТаможенногоСбораВал()
	
	Если ДоговорТаможниВал.Выбран()=1 Тогда
		ВалютаВалСбора 		= ДоговорТаможниВал.ВалютаВзаиморасчетов;
		КурсВалютыВалСбора 	= ?(ВалютаВалСбора = Валюта,Курс,ДатаДок);
		ТаможенныйСборВал_Р = глПересчет(ТаможенныйСборВал,
								ВалютаВалСбора, КурсВалютыВалСбора,
								глРубли, ДатаДок);
	Иначе
		ТаможенныйСборВал_Р = 0;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииТаможенногоСбораВал()

//******************************************************************************
// РасчетНДС(ТолькоВал = 0)
//
// Параметры:
//  ТолькоВал - пересчитывается только валютная сумма НДС, рублевая остается без изменения
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Процент НДС.
//
// Описание:
//  Производит расчет НДС по текущей строке.
//
Процедура РасчетНДС(ТолькоВал = 0)
	
	Если ТолькоВал = 0 Тогда
		БазаНДС 			= ТаможеннаяСтоимость + СуммаПошлиныРуб;
		СуммаНДСРуб 		= БазаНДС * глНачисляемыйНДС(СтавкаНДС);//0.20, 0.20004...
	КонецЕсли;

	Если ДоговорТаможниВал.Выбран() = 1 Тогда
		ВалВзаим = ДоговорТаможниВал.ВалютаВзаиморасчетов;    
		КурсВалВзаим = ВалВзаим.Курс.Получить(ДатаДок)/?(ВалВзаим.Кратность.Получить(ДатаДок) = 0, 1, ВалВзаим.Кратность.Получить(ДатаДок));
		СуммаНДСВал 	= глПересчет(СуммаНДСРуб, глРубли, 1, ВалВзаим, КурсВалВзаим);
	КонецЕсли;
	                 
КонецПроцедуры // РасчетНДС()

//******************************************************************************
// РасчетПошлины(ТолькоВал = 0)
//
// Параметры:
//  ТолькоВал - пересчитывается только валютная сумма пошлины, рублевая остается без изменения
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Процент там. пошлины.
//
// Описание:
//  Производит расчет суммы таможенной пошлины для текущей строки.
//
Процедура РасчетПошлины(ТолькоВал = 0)
               
	Если ТолькоВал = 0 Тогда
		СуммаПошлиныРуб 	= ТаможеннаяСтоимость * СтавкаПошлины/100;       
	КонецЕсли;

	Если ДоговорТаможниВал.Выбран() = 1 Тогда
		ВалВзаим = ДоговорТаможниВал.ВалютаВзаиморасчетов;    
		КурсВалВзаим = ВалВзаим.Курс.Получить(ДатаДок)/?(ВалВзаим.Кратность.Получить(ДатаДок) = 0, 1, ВалВзаим.Кратность.Получить(ДатаДок));
		СуммаПошлиныВал 	= глПересчет(СуммаПошлиныРуб, глРубли, 1, ВалВзаим, КурсВалВзаим);
	КонецЕсли;
	                 
КонецПроцедуры // РасчетПошлины()

//******************************************************************************
// ПересчетТаблЧасти(Колонка)
//
// Параметры:
//  Колонка - строка с идентификатором текущей колонки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Реквизиты табличной части документа.
//
// Описание:
//  Производит все необходимые пересчеты при изменении реквизитов табл. части.
//
Процедура ПересчетТаблЧасти(Колонка)
	
	Если Колонка = "ВидТМЦ" Тогда
		Если ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
			Предупреждение("Продукцию закупать нельзя! Для оприходования продукции
			| на склад используйте документ ""Оприходование ТМЦ""",60);
			ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		КонецЕсли; 
		
		Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
			СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
		КонецЕсли;   
		
	ИначеЕсли Колонка = "Номенклатура" Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!
			|Для оформления поступления услуг воспользуйтесь документом ""Поступление (услуги и пр.)"".",60);
			Номенклатура = "";
		КонецЕсли;	
		глПересчетТаблЧасти(Контекст,Колонка);	
		СтавкаНДС 	= Номенклатура.СтавкаНДС;
	                                        
	ИначеЕсли 	(Колонка = "Количество"	) или 
				(Колонка = "Единица"	) или
				(Колонка = "Цена"		) или
				(Колонка = "Сумма"		) Тогда
		глПересчетТаблЧасти(Контекст,Колонка);
		ТаможеннаяСтоимость = глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок);
		РасчетПошлины();
		РасчетНДС();          
		
	ИначеЕсли 	(Колонка = "ТаможеннаяСтоимость") или
				(Колонка = "СтавкаПошлины") Тогда
		Если СтавкаПошлины<>0 Тогда 
			СохранитьЗначение("СтавкаПошлиныИмпорта",СтавкаПошлины); 
		КонецЕсли;
		РасчетПошлины();
		РасчетНДС();    
		
	ИначеЕсли 	(Колонка = "СуммаПошлиныРуб") или
	 			(Колонка = "СтавкаНДС") Тогда 
	 	РасчетПошлины(1);
		РасчетНДС();    

	ИначеЕсли 	(Колонка = "СуммаНДСРуб") Тогда
		РасчетНДС(1);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!
			|Для оформления поступления услуг воспользуйтесь документом """
			+ ПолучитьПустоеЗначение("Документ.ПоступлениеПрочее").ПредставлениеВида()+""".",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;     

	СтараяПартия = Партия;
	Если ПустоеЗначение(Партия) = 0 Тогда
		Если Партия.Владелец <>  Номенклатура Тогда
			УдалитьПартию(); // реквизит Партия будет очищен в глПересчетТаблЧасти
		КонецЕсли;
	КонецЕсли;
	ПересчетТаблЧасти(Форма.ТекущаяКолонка());	
	
    СоздатьПартию(СтараяПартия);

КонецПроцедуры // ПриИзмененииНоменклатуры()
//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента, СтараяВалюта, СтарыйКурс;
	
	СтараяВалюта 	= Валюта;
	СтарыйКурс 		= Курс;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();
	
	// если поменялась валюта или курс тогда надо пересчитать суммы платежей
	Если (СтараяВалюта <> Валюта) или (СтарыйКурс <> Курс) Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ТаможеннаяСтоимость = глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок);
			РасчетПошлины();
			РасчетНДС();          
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры	//ПоКнопкеЦены()
                                   
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	Если (ДокОснование.Вид() <> "ЗаказПоставщику") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
	
	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;
	ДатаОплаты 	= ДокОснование.ДатаОплаты;   
	
	КодОперации	= Перечисление.КодыОпераций.Закупка;
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	ТаблицаДокумента.Свернуть("Номенклатура,Единица,Коэффициент,Цена,СтавкаНДС,СтавкаНП", "Количество,Сумма,СуммаНДС,СуммаНП");
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		НоваяСтрока();             
		ВидТМЦ 		= Перечисление.ВидыТМЦ.Товар;	
		СтавкаПошлины = ВосстановитьЗначение("СтавкаПошлиныИмпорта");
		Номенклатура= ТаблицаДокумента.Номенклатура;
		Количество 	= ТаблицаДокумента.Количество; 
		Единица 	= ТаблицаДокумента.Единица;
		Коэффициент = ТаблицаДокумента.Коэффициент;
		Цена 		= ТаблицаДокумента.Цена;
		Сумма 		= ТаблицаДокумента.Сумма;
		СуммаНДС 	= 0;
		СуммаНП 	= 0;
		СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
		ПересчетТаблЧасти("Сумма");  
		
		СоздатьПартию();
	КонецЦикла; // по строкам основания
	
    СуммаВзаиморасчетов = глПересчет(Итог("Сумма"),
						  Валюта,                      Курс,
						  Договор.ВалютаВзаиморасчетов,ДатаДок);

	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе основании не заполнена табличная часть";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// ЗаполнениеПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть товарами по догувору, переданными комиссионеру,
//  но еще не реализованными.
//
Функция ЗаполнениеПоИтогам()
	Перем НедополученныеТовары, ТекСтрокаИтогов;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	КодОперации	= Перечисление.КодыОпераций.Закупка;

	РегОбщ    = СоздатьОбъект("Регистры");
	РегЗаказы = РегОбщ.Заказы;
	
	// установим фильтры на измерения
	РегЗаказы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
	
	ЗаполнятьПоОснованию = 0; // Флаг варианта заполнения
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		// если есть заказ, то заполняем недополученными по нему товарами
		РегЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику", ДокОснование, 1);
		ЗаполнятьПоОснованию = 1; 
	Иначе
		// заказ отсутствует. заполняем недополученными по договору товарами
		РегЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика", Договор, 1);
	КонецЕсли;
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегЗаказы.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегЗаказы.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегЗаказы.ВыгрузитьИтоги(НедополученныеТовары, 1, 1);
	НедополученныеТовары.Свернуть("Номенклатура", "КоличествоПриход,СтоимостьПриход");

	ВремСтавкаПошлины	= ВосстановитьЗначение("СтавкаПошлиныИмпорта");
    ВидТМЦ_Товар		= Перечисление.ВидыТМЦ.Товар;
	
	Если ЗаполнятьПоОснованию = 0  Тогда
		
		СуммаВзаиморасчетов = 0;
		НедополученныеТовары.ВыбратьСтроки();
	
		Пока НедополученныеТовары.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
		
			ВидТМЦ			= ВидТМЦ_Товар;	
			СтавкаПошлины	= ВремСтавкаПошлины;
			Номенклатура	= НедополученныеТовары.Номенклатура;
			Единица			= Номенклатура.ОсновнаяЕдиница;
			Коэффициент		= Единица.Коэффициент;
			Количество		= НедополученныеТовары.КоличествоПриход / ?(Коэффициент=0,1,Коэффициент);
			Сумма			= глПересчет(НедополученныеТовары.СтоимостьПриход, глРубли, 1, Валюта, Курс);
			Цена			= Сумма / ?(Количество = 0, 1, Количество);
			СуммаНДС		= 0;
			СуммаНП			= 0;
			СтавкаНДС		= Номенклатура.СтавкаНДС;

		    ПересчетТаблЧасти("Сумма");
			СоздатьПартию();
		
		КонецЦикла;
	Иначе // Заполняем по основанию
		
		Валюта 		= ДокОснование.Валюта;
		Курс 		= ДокОснование.Курс;
		ДатаОплаты 	= ДокОснование.ДатаОплаты;   
	
		// При заполнении на основании Заказа цены, суммы и скидки надо брать из основания
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		ТаблицаДокумента.Свернуть("Номенклатура,Единица,Коэффициент,Цена,СтавкаНДС,СтавкаНП", "Количество,Сумма,СуммаНДС,СуммаНП");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			
			// Есть остатки по этой строке? 
			ТекСтрокаИтогов = 0;
			Если НедополученныеТовары.НайтиЗначение(ТаблицаДокумента.Номенклатура, ТекСтрокаИтогов, "Номенклатура") = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			КоличествоПриход = НедополученныеТовары.ПолучитьЗначение(ТекСтрокаИтогов, "КоличествоПриход");
			Если КоличествоПриход = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			ВидТМЦ			= ВидТМЦ_Товар;	
			СтавкаПошлины	= ВремСтавкаПошлины;
			Номенклатура	= ТаблицаДокумента.Номенклатура;
			Единица			= ТаблицаДокумента.Единица;
			Коэффициент		= ТаблицаДокумента.Коэффициент;
			Количество		= Мин(ТаблицаДокумента.Количество, КоличествоПриход / Коэффициент ); 
			Сумма			= ТаблицаДокумента.Сумма * Количество / ТаблицаДокумента.Количество;
			Цена			= Сумма / ?(Количество = 0, 1, Количество);
			СуммаНДС		= 0;
			СуммаНП			= 0;
			СтавкаНДС		= ТаблицаДокумента.СтавкаНДС;

		    ПересчетТаблЧасти("Сумма");
			СоздатьПартию();
			
		КонецЦикла; // по строкам основания
		
		ОснованиеСумма = ДокОснование.Итог("Сумма");
		СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, ДокОснование.СуммаВзаиморасчетов * Итог("Сумма") / ОснованиеСумма);
		
	КонецЕсли; // ЗаполнятьПоОснованию = 0
	
	СуммаВзаиморасчетов = глПересчет(Итог("Сумма"),
						  Валюта,                      Курс,
						  Договор.ВалютаВзаиморасчетов,ДатаДок);
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Все заказанные товары получены!";
	КонецЕсли;
	
	Возврат "";	// успешное завершение
	
КонецФункции // ЗаполнениеПоИтогам()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		// очищаем наш документ
		// перед удалением строк надо удалить все партии
		УдалитьВсеПартии();
		УдалитьСтроки();
		
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Заполнить по документу - основанию (перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// очищаем наш документ
	// перед удалением строк надо удалить все партии
	УдалитьВсеПартии();
	УдалитьСтроки();
	Результат = ЗаполнениеПоИтогам();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(1,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)     
	Таб = СоздатьОбъект("Таблица");  
	Таб.ИсходнаяТаблица("Макет");
	// формирование шапки
	СекцияШапка = Таб.ПолучитьСекцию("Шапка");
	Таб.ВывестиСекцию(СекцияШапка);
	
	СекцияСтрока = Таб.ПолучитьСекцию("Строка");
	
	ВыбратьСтроки();  
	Пока ПолучитьСтроку() = 1 Цикл
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;	
	    
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиПриходИмпорт","ОкноПриходИмпорт");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли;
	//Предупреждение("Для документа не зарегистрировано ни одной печатной формы", 60);
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 0;
		Форма.кнПечать.Заголовок("Печать");
	КонецЕсли;
	
	Если НомерТекущейФормы = 1 Тогда
		Печать(СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы > 0  Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриОбработкеПодбора(ВыбЗнач)
//
// Параметры: 
//  ВыбЗнач - значение, поступившее из формы подбора
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Процедура обработки подбора
//
Процедура ПриОбработкеПодбора(ВыбЗнач)
	
	Перем ТаблЧасть, ТаблицаПодбора;
	
	ТипЗнач		= ТипЗначенияСтр(ВыбЗнач);
	Если ТипЗнач = "СписокЗначений" Тогда
		
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
	Иначе
		
		// если не список ничего не делаем
		Возврат;
	КонецЕсли;	
	
	Если ТипЗначенияСтр(ТаблицаПодбора) = "ТаблицаЗначений" Тогда
		ВыгрузитьТабличнуюЧасть(ТаблЧасть, "Единица, НомерСтроки");
		
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() <> 0 Цикл
			
			ВыбНоменклатура = ТаблицаПодбора.Номенклатура;
			ВыбЕдиница      = ТаблицаПодбора.Единица;
			// поищем номенклатуру
			Поз = 0;
			Если ТаблЧасть.НайтиЗначение(ВыбЕдиница, Поз, "Единица") = 1 Тогда
				// нашли, увеличиваем количество
				ПолучитьСтрокуПоНомеру(Поз);
				Количество = Количество + ТаблицаПодбора.Количество;
				
				// Вызывать пересчет имеет смысл только если есть цена
				ПересчетТаблЧасти("Количество");
			Иначе
				// добавляем новую строку
				НоваяСтрока();
				ВидТМЦ 			= ТаблицаПодбора.ВидТМЦ;
				Номенклатура	= ВыбНоменклатура;
				Количество 		= ТаблицаПодбора.Количество;
				Единица 		= ВыбЕдиница;
				Коэффициент		= ВыбЕдиница.Коэффициент;    
				СтавкаПошлины 	= ВосстановитьЗначение("СтавкаПошлиныИмпорта");
				
				Цена 			= ТаблицаПодбора.Цена;
				// Заполним ставки налогов 
				СтавкаНДС 		= ВыбНоменклатура.СтавкаНДС;
				ПересчетТаблЧасти("Цена");
				
				СоздатьПартию();
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Активизировать("Количество");
	АктивизироватьСтроку();
	
КонецПроцедуры // ПриОбработкеПодбора()      

//******************************************************************************
// ПриИзмененииДоговораТаможниВал()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается при изменении валютного договора с таможней. Пересчитывает, при
// необходимости валютные суммы.
//
Процедура ПриИзмененииДоговораТаможниВал()   
	Если ДоговорТаможниВал.Выбран() = 1 Тогда
		Если СтарыйДоговорТаможниВал.Выбран() = 0 Тогда  
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 цикл
				РасчетПошлины(1);
				РасчетНДС(1);
			КонецЦикла;
		ИначеЕсли СтарыйДоговорТаможниВал.ВалютаВзаиморасчетов <> ДоговорТаможниВал.ВалютаВзаиморасчетов Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 цикл
				РасчетПошлины(1);
				РасчетНДС(1);
			КонецЦикла;
		КонецЕсли;     
	КонецЕсли;   
	СтарыйДоговорТаможниВал = ДоговорТаможниВал;
	УправлениеДиалогом();
КонецПроцедуры // ПриИзмененииДоговораТаможниВал()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриРедактированииНовойСтроки()
	                            
	СтараяПартия = Партия;
	Партия = "";
	Если Номенклатура.Выбран() = 1 Тогда // Копирование
		Если СтараяПартия.Выбран() = 1 Тогда // Была выбрана партия, копируем ее
			СоздатьПартию(СтараяПартия);
		КонецЕсли;
	Иначе    
		ВидТМЦ 			= ВосстановитьЗначение("ВидТМЦПоУмолчанию");
		СтавкаПошлины 	= ВосстановитьЗначение("СтавкаПошлиныИмпорта");
	КонецЕсли; // Номенклатура.Выбран() = 1
	
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
КонецПроцедуры // ПриРедактированииНовойСтроки()

//*****************************************************************************
// предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	ЭлементДиалога=Форма.ТекущаяКолонка();
	
	Если (ЭлементДиалога="СтранаПроисхождения") или
		 (ЭлементДиалога="Свойство") или
		 (ЭлементДиалога="ГТД") Тогда
		
		Если Номенклатура.Выбран()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Парам=СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Контекст,"КонтекстДокумента");
		Парам.ДобавитьЗначение(НомерСтроки,"НомерСтроки");
		Парам.ДобавитьЗначение(ЭлементДиалога,"ЭлементДиалога"); 
		
		Если Партия.Выбран()=1 Тогда
			ОткрытьФормуМодально(Партия,Парам,0);
		Иначе                                  
			ОткрытьФормуМодально("Элемент.Партии",Парам,,,Номенклатура);
		КонецЕсли;    

	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;    
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                  
//*****************************************************************************
// предопределенная процедура
//
Процедура ПриУдаленииСтроки()
	если ПустоеЗначение(Принят_к_учету)=0 Тогда
		Сообщить("Нельзя удалять строки из этого документа");
		СтатусВозврата(0);
		Возврат;
	иначе
		УдалитьПартию();
	КонецЕсли;
КонецПроцедуры // ПриУдаленииСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	    
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	ДатаДокВходящий = ДатаДок;
	
	Результат = ЗаполнениеПоИтогам();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
	     
	Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
	Набран				= 0;
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "Покупка");
	
	Если Скопирован = 1 Тогда	
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		//копирование документа - очистим партии, если нужно создадим новые
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			СтараяПартия 	= Партия;
			Партия			= "";            
			СоздатьПартию(СтараяПартия);
			
			глПересчетТаблЧасти(Контекст, "Сумма");
			ТаможеннаяСтоимость = глПересчет(Сумма,Валюта,Курс,глРубли,ДатаДок);
			РасчетПошлины();
			РасчетНДС();
		КонецЦикла;
		// *************** КОНЕЦ ********************************
		
		ПересчетСуммыВзаиморасчетов();
		ПриИзмененииТаможенногоСбораВал();
		
		Возврат;
	КонецЕсли;
	
	ДатаДокВходящий = ДатаДок;
	
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
	 
	Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету); 
	Набран				= 0;
КонецПроцедуры //ВводНового()    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()  
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата       		= ДатаДок;
	СтараяФирма   		  	= Фирма;  
	СтарыйДоговор    		= Договор;
	СтарыйДоговорТаможниВал	= ДоговорТаможниВал;
	СтарыйКонтрагент 		= Контрагент;
	СтараяТаможня			= Таможня;
	СуммаДокументаСтараяРуб = глПересчет (Итог("Сумма"),Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
		
	НачальнаяДатаДокумента 	= ДатаДок;                     
	                         
	НачВалюта		= Валюта;
	НачКурс			= Курс;
	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;
	НачФирма		= Фирма;

	Форма.ВидТМЦ			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Номенклатура		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена				.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма				.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДСРуб		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаПошлины		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаПошлиныРуб	.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));

	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Проставь ГТД как 1-е");	//для ГТД-шек
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	Форма.Закладки.ДобавитьЗначение("Таможня, таможенный сбор");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	УстановкаВидимостиСуммВПодвале();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	ОбновитьНадписи();     
	
	УправлениеДиалогом();
	            
	Если (глПользователь<>Автор) и (Набран=1) Тогда
		форма.Количество.Доступность(0);
	КонецЕсли;
	//Если ПустоеЗначение(Принят_к_учету)=0 Тогда
	//	форма.Количество2.Доступность(0);
	//КонецЕсли;
	
КонецПроцедуры  //ПриОткрытии()                                                                 
                                    
//******************************************************************************
// предопределенная процедура
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	ИначеЕсли НомерЗакладки=2 Тогда
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,Таможня,Подвал");
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПокупок", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПокупок", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма 		= Фирма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
                           
    // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда
		ОтменитьЗапись=0;
		
		// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
		// после записи всех партий - пропишем их в документ всех сразу
		ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
		ТЗПартии.НоваяКолонка("НомерСтрокиДок");
		ТЗПартии.НоваяКолонка("Партия");
		
		НачатьТранзакцию();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Номенклатура.Выбран()=1) Тогда
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				Если (Партия.Выбран()=0) Тогда
					СпрПартии.Новый();
				Иначе     
					СпрПартии.НайтиЭлемент(Партия);
				КонецЕсли;
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки(),"i");
					ОтменитьЗапись=1;
					Прервать;
				КонецПопытки;
				Если (Партия.Выбран()=0) Тогда
					ТЗПартии.НоваяСтрока();
					ТЗПартии.НомерСтрокиДок=НомерСтроки;
					ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Если ОтменитьЗапись=0 Тогда  
			// запишем созданные партии
			ЗафиксироватьТранзакцию();
			
			// теперь занесем партии в спецификацию нашего документа
			ТЗПартии.ВыбратьСтроки();
			Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
				
				ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
				Партия=ТЗПартии.Партия;
				
			КонецЦикла;
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;      
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);              
КонецПроцедуры //ПриЗаписи()   

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// Если документ новый и в нем были выбраны партии, 
	// то они не нужны и их надо пометить на удаление
	Если Выбран() = 0 Тогда
		УдалитьВсеПартии();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	ПриОбработкеПодбора(ВыбЗнач);
КонецПроцедуры // ОбработкаПодбора()
                        
//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество");
				ТаблицаПодбора.НоваяКолонка("Цена");
				ТаблицаПодбора.НоваяКолонка("Сумма");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
	
				ПараметрыВыбора = СоздатьОбъект("СписокЗначений");
				ПараметрыВыбора.ДобавитьЗначение(ТаблицаПодбора, "ТаблицаПодбора");
			    
				ПриОбработкеПодбора(ПараметрыВыбора);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры //ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ    
//                                               
СпрПартии = СоздатьОбъект("Справочник.Партии");

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;                

ВидСчетаФактуры="СчетФактураПолученный";

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");     

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Таблица";
ТаблицаПечФорм.Кнопка	= "Таблица";