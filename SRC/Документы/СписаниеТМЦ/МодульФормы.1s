////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
Перем СтараяДата, СтараяФирма, СтарыйСклад;
Перем ВопросПередЗаполнением;    

Перем ОбщРег, ОстаткиТМЦ, СписокПараметров; 
                              // для выбора розничных цен, по которым есть остатки

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
КонецФункции                                                                    
    
//******************************************************************************
// УправлениеВидимостью(НомерЗакладки)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управление видимостью элементов диалога в зависимости от значения закладки и 
//  других условий.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда 
		СписокСлоев = "Шапка,Основной,Подвал";
		Если Склад.РозничныйСклад = 1 Тогда
			СписокСлоев = СписокСлоев + ",ПодвалСумма";
		КонецЕсли;
		Форма.ИспользоватьСлой(СписокСлоев);
	Иначе
		СписокСлоев = "Шапка,ТабличнаяЧасть1,ТабличнаяЧасть2,Подвал";
		Если Склад.РозничныйСклад = 1 Тогда
			СписокСлоев = СписокСлоев + ",ПодвалСумма,ТабличнаяЧастьСумма";
		КонецЕсли;
		
		Форма.ИспользоватьСлой(СписокСлоев);
		
		// При списании с розничного склада цены можно только выбирать из списка
		Если Склад.РозничныйСклад = 1 Тогда
			// на розн.складе всем разрашаем выбирать цену из списка
			Форма.Цена.Доступность(1);
			Форма.Цена.Видимость(1);
			Форма.Цена.Редактирование(0);
			Форма.Сумма.Видимость(1);
			Форма.Сумма.Доступность(0);
		Иначе    
			Форма.Цена.Видимость(0);
			Форма.Сумма.Видимость(0);
		КонецЕсли;
	КонецЕсли;       
	
КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()     
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()
	
	Перем Заголовок, Название;
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустаяСтрока(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()
                                            
//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если Склад.РозничныйСклад = 1 Тогда 
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка(),СписокПараметров);	
	Иначе
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатуры() 

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	
КонецПроцедуры	//ПоКнопкеЦены()
                                        
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	Перем СписанныеКоличества;
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	Если (ДокОснование.Вид() <> "ИнвентаризацияТМЦ") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
	
    ТекДокумент	= ТекущийДокумент();
	
	// сформируем список товаров, 
	ТекстЗапроса = "//{{ЗАПРОС(ПредСписание)
	|Период с '01.01.1980' по ДатаДок;
	|Без итогов;
	|Основание 			= Документ.СписаниеТМЦ.ДокОснование, Документ.Реализация.ДокОснование;
	|ДокСписания    	= Документ.СписаниеТМЦ.ТекущийДокумент,Документ.Реализация.ТекущийДокумент;
	|Товар 				= Документ.СписаниеТМЦ.Номенклатура, Документ.Реализация.Номенклатура;
	|Колво 				= Документ.СписаниеТМЦ.Количество, Документ.Реализация.Количество;
	|Коэфф 				= Документ.СписаниеТМЦ.Коэффициент, Документ.Реализация.Коэффициент;
	|Функция ВсегоКолво = Сумма(Колво);
	|Группировка Товар без групп;
	|Группировка Коэфф;
	|Условие((Основание = ДокОснование) и (ДокСписания <> ТекДокумент));
	|"//}}ЗАПРОС
	;

	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат "Ошибка при отборе товаров.";
	КонецЕсли;
	
	Запрос.Выгрузить(СписанныеКоличества);
	
	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	// очищаем наш документ
	УдалитьСтроки();  
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
		Если (ТаблицаДокумента.КоличествоУчет > ТаблицаДокумента.Количество) Тогда
			Товар = ТаблицаДокумента.Номенклатура;
			Колво = ТаблицаДокумента.КоличествоУчет - ТаблицаДокумента.Количество;
			
			// поищем в таблице уже списанных количеств
			Поз = 0;
			Пока (СписанныеКоличества.НайтиЗначение(Товар, Поз, "Товар") = 1)
			   и (Колво > 0)
			Цикл
				СписанныеКоличества.ПолучитьСтрокуПоНомеру(Поз);
				// пересчитаем количество в единицу измерения инвентаризации
				СписКолво  = СписанныеКоличества.ВсегоКолво * СписанныеКоличества.Коэфф / ТаблицаДокумента.Коэффициент;
				ПогашКолво = Мин(Колво, СписКолво);
				
				Если ПогашКолво >= СписКолво Тогда
					СписанныеКоличества.УдалитьСтроку(Поз);
				Иначе
					СписанныеКоличества.Колво = (СписКолво - ПогашКолво) * ТаблицаДокумента.Коэффициент / СписанныеКоличества.Коэфф;
				КонецЕсли;
				
				Колво = Колво - ПогашКолво;
				
				Поз = 0;
			КонецЦикла;
			
			Если Колво > 0 Тогда
				НоваяСтрока();
				Номенклатура= Товар;
				Количество 	= Колво;
				Единица 	= ТаблицаДокумента.Единица;
				Коэффициент = ТаблицаДокумента.Коэффициент;
				
				// цену и сумму заполняем только по рознице				
				Если Склад.РозничныйСклад = 1 Тогда
					Цена 	= ТаблицаДокумента.Цена;
					Сумма 	= Цена * Количество;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; // по строкам основания       
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе " + глПредставлениеДокумента(ДокОснование) +
				 " отсутствуют товары, учетное количество которых превышает фактическое";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйСклад	= Склад;
		
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Заполнить по документу - основанию (перед заполнением табличная часть будет очищена)?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки();
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	
	Если Склад.РозничныйСклад = 1 Тогда
		Параметры.ДобавитьЗначение("Розница",   "ЦенаВподборе");
		Параметры.ДобавитьЗначение(Валюта,      "Валюта");
    	Параметры.ДобавитьЗначение(Курс,        "Курс");
    Иначе
		Параметры.ДобавитьЗначение("Нет",       "ЦенаВподборе");
	КонецЕсли;
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	// открываем форму подбора
	глПодбор(Контекст, Параметры);
		
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// СоставДляПечатиОпт()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Таблица значений
//
// Описание:
//  Формирует таблицу значений с составом документа для печати, если склад
//  оптовый.
//
Функция СоставДляПечатиОпт()
	
	// сформируем таблице значений с движениями документа
	ТабДвиж = СоздатьОбъект("ТаблицаЗначений");
	ТабДвиж.НоваяКолонка("Номенклатура");
	ТабДвиж.НоваяКолонка("Количество");
	ТабДвиж.НоваяКолонка("Сумма");

	РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");
	РегПартии.ВыбратьДвиженияДокумента(ТекущийДокумент());
	
	Пока РегПартии.ПолучитьДвижение() = 1 Цикл
		ТабДвиж.НоваяСтрока();
		ТабДвиж.Номенклатура = РегПартии.Номенклатура;
		ТабДвиж.Количество   = РегПартии.Количество;
		ТабДвиж.Сумма        = РегПартии.СуммаБезНДС;
	КонецЦикла;
	
	// выгрузим табличную часть документа в таблицу значений
	ТабДок	= СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабДок, "Номенклатура, Количество, Единица, Коэффициент");
	
	// сформируем таблицу значений для печати
	
	ТабПеч = СоздатьОбъект("ТаблицаЗначений");
	ТабПеч.НоваяКолонка("Номенклатура");
	ТабПеч.НоваяКолонка("Количество");
	ТабПеч.НоваяКолонка("Единица");
	ТабПеч.НоваяКолонка("Цена");
	ТабПеч.НоваяКолонка("Сумма");
	
	ТабДок.ВыбратьСтроки();
	Пока ТабДок.ПолучитьСтроку() = 1 Цикл

		Поз = 0;
		Пока (ТабДвиж.НайтиЗначение(ТабДок.Номенклатура, Поз, "Номенклатура") = 1)
		   и (ТабДок.Количество > 0)
		Цикл
			ТабДвиж.ПолучитьСтрокуПоНомеру(Поз);
			
			// получим текущее количество в документе в базовой единице
			ТекКолво = ТабДок.Количество * ТабДок.Коэффициент;
			// в таблицу печати добавляем количество - минимум из регистра и документа
			ИспКолво = Мин(ТабДвиж.Количество, ТекКолво);
			ИспСумма = ИспКолво * ТабДвиж.Сумма / ТабДвиж.Количество;
			
			// заполняем таблицу
			ТабПеч.НоваяСтрока();
			ТабПеч.Номенклатура = ТабДок.Номенклатура;
			ТабПеч.Количество   = ?(ТабДок.Коэффициент = 0, ИспКолво, ИспКолво / ТабДок.Коэффициент);
			ТабПеч.Единица      = ТабДок.Единица; 
			ТабПеч.Сумма        = ИспСумма;
			ТабПеч.Цена         = ?(ТабПеч.Количество = 0, ТабПеч.Сумма, ТабПеч.Сумма / ТабПеч.Количество);
			
			Если ТабДвиж.Количество <= ИспКолво Тогда
				// количество полностью использовано. Удалим строку из таблицы, чтобы
				// на следующем шаге итереции могла бы найтись строка с этим же товаром, но
				// из другой партии (конечно, если такое движение было)
				ТабДвиж.УдалитьСтроку(Поз);
			Иначе
				// количество в движении больше чем в строке докуиента (может быть из-за
				// того, что табличной части документа встречаются строки с одинаковыми товарами)
				ТабДвиж.Количество = ТабДвиж.Количество - ИспКолво;
			КонецЕсли;
			
			ТабДок.Количество = ТабДок.Количество - ТабПеч.Количество;
			
			Поз = 0;
		КонецЦикла;
		
	КонецЦикла;
	
	ТабПеч.Свернуть("Номенклатура,Единица,Цена", "Количество,Сумма");
	Возврат ТабПеч;
	
КонецФункции // СоставДляПечатиОпт()

//******************************************************************************
// СоставДляПечатиРозн()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Таблица значений
//
// Описание:
//  Формирует таблицу значений с составом документа для печати, если склад
//  розничный.
//
Функция СоставДляПечатиРозн()
	ТабПеч = СоздатьОбъект("ТаблицаЗначений");
	
	// печатаем то, что есть в табличной части
	ВыгрузитьТабличнуюЧасть(ТабПеч, "Номенклатура, Количество, Единица, Цена, Сумма");
	Возврат ТабПеч;
	
КонецФункции // СоставДляПечатиРозн()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Перем КолвоНаСтранице;
	Перем ВысотаПодвала;
	Перем ТекСтрокаНаСтр, ТекСтрока;
	Перем ПечФорма;
	Перем Поз;
	
	Если Проведен() = 0 Тогда
		Предупреждение("Форму ТОРГ-16 можно распечатать после проведения!", 60);
		Возврат;
	КонецЕсли;
	
	СуммаИтого	= 0;
	
	//********************************************************************************
	
	КолвоНаТитСтранице	= 24;
	
	КолвоНаСтранице	= 40;
	ВысотаПодвала	= 13;
	
	СтрокНаТекСтранице = 0;
	ТекСтрокаНаСтр	= 1;
	ТекСтрока		= 1;
	
	НачалоПовтора	= 1;
	КонецПовтора	= 1;
	
	ПечФорма	= СоздатьОбъект("Таблица");
	
	// титульный лист
	ПечФорма.ВывестиСекцию("ШапкаОтчета");
	НачалоПовтора	= НачалоПовтора + ПечФорма.ВысотаСекции("ШапкаОтчета");
	
	ПечФорма.ВывестиСекцию("ШапкаТаб1");
	НачалоПовтора	= НачалоПовтора + ПечФорма.ВысотаСекции("ШапкаТаб1");
	
	// печатаем таблицу титульного листа
	РегПартииНаличие = СоздатьОбъект("Регистр.ПартииНаличие");
	РегПартииНаличие.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПартииНаличие.ПолучитьДвижение() = 1 Цикл
		ДокПоступления = РегПартииНаличие.Партия.ПриходныйДокумент;
		Если глЕстьРеквизитШапки("НомерДокВходящий", ДокПоступления.Вид()) = 1 Тогда
			Если ПустоеЗначение(ДокПоступления.НомерДокВходящий) = 0 Тогда
			    НомерДокВходящий	= СокрЛП(ДокПоступления.НомерДокВходящий);
				ДатаДокВходящий		= ДокПоступления.ДатаДокВходящий;
			Иначе
			    НомерДокВходящий	= глНомерНаПечать(ДокПоступления);
				ДатаДокВходящий		= ДокПоступления.ДатаДок;
			КонецЕсли;
		Иначе
		    НомерДокВходящий	= глНомерНаПечать(ДокПоступления);
			ДатаДокВходящий		= ДокПоступления.ДатаДок;
		КонецЕсли;
		
		ПечФорма.ВывестиСекцию("СтрокаТаб1");
	КонецЦикла;

	ПечФорма.ВывестиСекцию("ПоследняяСтрокаТаб1");

	
	ПечФорма.НоваяСтраница();
	ПечФорма.ВывестиСекцию("ШапкаТаб2");
	
	НачалоПовтора	= НачалоПовтора + КолвоНаТитСтранице+1;
	КонецПовтора	= НачалоПовтора + ПечФорма.ВысотаСекции("ШапкаТаб2");
	ПечФорма.ПовторятьПриПечатиСтроки(НачалоПовтора, КонецПовтора);
	        
	
	// формируем выходную таблицу
	Если Склад.РозничныйСклад = 1 Тогда
	    ТабПеч	= СоставДляПечатиРозн();
	Иначе
		ТабПеч	= СоставДляПечатиОпт();
	КонецЕсли;
	
	ТабПеч.ВыбратьСтроки();
	Пока ТабПеч.ПолучитьСтроку() = 1 Цикл
		
		Если (ТекСтрока = ТабПеч.КоличествоСтрок()) Тогда   // последняя строка
			СтрокНаТекСтранице	= КолвоНаСтранице - ВысотаПодвала;
		Иначе
			СтрокНаТекСтранице	= КолвоНаСтранице;
		КонецЕсли;
	
		Если ТекСтрокаНаСтр > СтрокНаТекСтранице Тогда // целая страница
			// печатаем пустые строки
			Для Инд = ТекСтрокаНаСтр по КолвоНаСтранице Цикл
				ПечФорма.ВывестиСекцию("ПустаяСтрокаТаб2");
			КонецЦикла;

			ПечФорма.ВывестиСекцию("ПоследняяСтрокаТаб2");
			
			// начинаем новую страницу
			ПечФорма.НоваяСтраница();
			ТекСтрокаНаСтр = 1;
		КонецЕсли;
		
		СуммаИтого	= СуммаИтого + ТабПеч.Сумма;

		ПечФорма.ВывестиСекцию("СтрокаТаб2");
		// увеличиваем на единицу нумерацию строк
		ТекСтрокаНаСтр	= ТекСтрокаНаСтр + 1;
		ТекСтрока		= ТекСтрока      + 1;
		
	КонецЦикла;
	
	// печатаем пустые строки на последней странице
	Для Инд = ТекСтрокаНаСтр по СтрокНаТекСтранице Цикл
		ПечФорма.ВывестиСекцию("ПустаяСтрокаТаб2");
		
	КонецЦикла;

	// печатаем секцию итого на последней странице
	ПечФорма.ВывестиСекцию("ПоследняяСтрокаТаб2");
	ПечФорма.ВывестиСекцию("ИтогоТаб2");
	ПечФорма.ВывестиСекцию("ПодвалТаб2");
	
	Если СразуНаПринтер = 0 Тогда
		ПечФорма.Опции(0, 0, 0, 0, ПарСтрДок, ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечФорма.Защита(1);
		Иначе
			ПечФорма.Защита(0);
		КонецЕсли;
		ПечФорма.ТолькоПросмотр(1);

		ПечФорма.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечФорма.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечФорма.КоличествоЭкземпляров(КолЭкз);
		ПечФорма.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииСчетаНУ()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  "СчетНУ" 
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчетаНУ()

	глПриВыбореНалоговогоСчета(Контекст);

КонецПроцедуры // ПриИзмененииСчетаНУ()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  "Счет"
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()

//******************************************************************************
// ОбновлениеРозничныхЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит перезаполнение розничных цен в табличной части документа из регистра.
//  Если ТМЦ на розничном складе нет, или он есть по нескольким ценам то цена обнуляется
//  и выдается соответствующее предуупреждение.
//
Процедура ОбновлениеРозничныхЦен()
	
	Перем ТовЦена, СписокЦен, ВремЦена;
	
	Если Склад.РозничныйСклад = 1 Тогда
		
		Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилиЦены = 0;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			
			Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
				ТовЦена = "";
				глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				
				Если СписокЦен.РазмерСписка() = 1 Тогда
					ВремЦена = СписокЦен.ПолучитьЗначение(1);
				Иначе
					ВремЦена = 0;
				КонецЕсли;
				
				Если Цена <> ВремЦена Тогда
					Цена = ВремЦена;
					ИзменилиЦены = 1;
					глПересчетТаблЧасти(Контекст,"Цена");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзменилиЦены = 1 Тогда
			Предупреждение("Проверьте цены ТМЦ в документе!", 60);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбновлениеРозничныхЦен()     

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит все необходимые пересчеты при изменении склада.
//
Процедура ПриИзмененииСклада()
	
	Если СтарыйСклад <> Склад Тогда
		
		УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
		ОбновлениеРозничныхЦен();
		СтарыйСклад = Склад;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    
	    СтараяДата = ДатаДок;
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
	                ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                                 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);

	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
КонецПроцедуры //ВводНового()

//******************************************************************************
// предопределенная процедура
Процедура ПриОткрытии()        
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         
	
	НачальнаяДатаДокумента 	= ДатаДок;
    СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйСклад				= Склад;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);  
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		Форма.Закладки.ТекущаяСтрока(1);
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
	КонецЕсли; 
	УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
	
	глПриВыбореБухСчета(Контекст, 1, 1);
	глПриВыбореНалоговогоСчета(Контекст, 1, 1);
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	
КонецПроцедуры // ПриОткрытии()
                      
//*****************************************************************************
// предопределенная процедура                
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
		
	ИначеЕсли Форма.ТекущаяКолонка() = "Цена" Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		И    (ПустоеЗначение(Склад.РозничныйСклад) = 1)			
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	

	ИначеЕсли Форма.ТекущаяКолонка() = "Сумма" Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Цена" Тогда
		Если Склад.РозничныйСклад = 1 Тогда
			ФлагСтандОбр = 0;
			// регистры рассчитываем, только если хочется редактировать цены вручную
			Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
				Возврат;
			КонецЕсли;
			ТовЦена = "";
			глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
			СписокЦен = ЗначениеИзСтроки(ТовЦена);
			СписокЦен.ВыбратьЗначение(Цена, , , ,2);
			глПересчетТаблЧасти(Контекст,"Цена");
		КонецЕсли;
	ИначеЕсли (ИдентЭлемДиалога = "Счет")
	 или (ИдентЭлемДиалога = "Субконто1") 
	 или (ИдентЭлемДиалога = "Субконто2") 
	 или (ИдентЭлемДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);

	ИначеЕсли (ИдентЭлемДиалога = "СчетНУ")
	 или (ИдентЭлемДиалога = "СубконтоНУ1") 
	 или (ИдентЭлемДиалога = "СубконтоНУ2") 
	 или (ИдентЭлемДиалога = "СубконтоНУ3")  Тогда
		глПриВыбореНалоговогоСчета(Контекст);

	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)  
	 
	УправлениеВидимостью(НомерЗакладки);
	Если НомерЗакладки = 2 Тогда
		ОбновитьНадписи();
	КонецЕсли;

КонецПроцедуры                    

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);                
КонецПроцедуры  // ПриЗаписи()
	                                         
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество, ВремЦена;
	Перем СтрокаВозврЦена;
	Перем ЦенаЗнач, ЦенаЕд;

	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0, "ЕстьВидТМЦ");
				
				Если (Склад.РозничныйСклад = 1) Тогда
					// списываем из розничного склада по розничным ценам
					ТовОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
				    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
					ТовОстатки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
					ТовОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
					
					глПолучитьРозничныйОстатокЦену(ВремТовар, ВремЕдиница, ТовОстатки, , СтрокаВозврЦена);
					
					СписВозврЦен = ЗначениеИзстроки(СтрокаВозврЦена);
					Если СписВозврЦен.РазмерСписка() = 1 Тогда
						ТаблицаПодбора.Цена  = глПересчет(СписВозврЦен.ПолучитьЗначение(1), глРубли, ДатаДок, Валюта, Курс);
						
					ИначеЕсли СписВозврЦен.РазмерСписка() > 1 Тогда
						
						Если СписВозврЦен.ВыбратьЗначение(ВремЦена,"Выберите цену для товара " + ВремТовар.Наименование, , 60) = 1 Тогда
							ТаблицаПодбора.Цена  = глПересчет(ВремЦена, глРубли, ДатаДок, Валюта, Курс);
						Иначе	
							ТаблицаПодбора.Цена  = 0;
						КонецЕсли;
					Иначе
						ТаблицаПодбора.Цена  = 0;
					КонецЕсли;
					
					ПараметрыПодбора.ДобавитьЗначение("Розница", "ЦенаВподборе");
				Иначе
					ПараметрыПодбора.ДобавитьЗначение("Нет"    , "ЦенаВподборе");
				КонецЕсли;
				
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 0, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия() 

Процедура ЗаполнитьЦены()
	//Объявление переменных
	Меню 				= СоздатьОбъект("СписокЗначений");
	СписокНоменклатуры  = СоздатьОбъект("СписокЗначений");
	ТаблЗапроса 		= СоздатьОбъект("ТаблицаЗначений");
	СпрЦены 			= СоздатьОбъект("Справочник.Цены");
	ДатаОпрСеб 			= "";
	Выб 				= "";
	Меню.ДобавитьЗначение("Себестоимость РубНДС");
	Меню.ДобавитьЗначение("Себестоимость РубБезНДС");
	Меню.ДобавитьЗначение("Себестоимость Упр");
	Меню.ДобавитьЗначение("Розничные Руб");
	
	//Проверка заполнения табличной части
	Если КоличествоСтрок()=0 Тогда
		Сообщить("Табличная часть пуста","!!!");
		Возврат;
	КонецЕсли;	
	
	Если Меню.ВыбратьЗначение(Выб,,,,1)=1 Тогда
		//Расчет себестоимости
		ВыгрузитьТабличнуюЧасть(СписокНоменклатуры,"Номенклатура");
		Если Выб <> "Розничные Руб" Тогда
			Если ВвестиДату(ДатаОпрСеб,"Себестоимость на дату")=0 Тогда
				Сообщить("Не выбрана дата для себестоимости","!!!");
				Возврат;
			КонецЕсли;
			Состояние("Расчет себестоимости");
			МОЛотбора = Склад.МОЛ;
			ФирмаОтбора = Фирма;
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(Сформировать)
			|Период с ДатаОпрСеб по ДатаОпрСеб;
			|Фирма		= Регистр.ПартииНаличие.Фирма;
			|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
			|МОЛ = Регистр.ПартииНаличие.МОЛ;
			|Количество = Регистр.ПартииНаличие.Количество;";
			
			Если Выб = "Себестоимость РубНДС" Тогда // бух с НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб;";
				
			ИначеЕсли Выб = "Себестоимость РубБезНДС" Тогда // бух без НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаБезНДС;";
				
			ИначеЕсли Выб = "Себестоимость Упр" Тогда
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаУпр;";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"Функция КонОстС = НачОст(Сумма);
			|Функция КонОстК = НачОст(Количество);
			|Группировка Номенклатура без групп;
			|Условие((МОЛ = МОЛотбора) и (Номенклатура в СписокНоменклатуры) и (Фирма = ФирмаОтбора));
			|";
			// Если ошибка в запросе, то выход из процедуры
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;
			//Выгружаем данные запроса			
			Запрос.Выгрузить(ТаблЗапроса,0,0);
		КонецЕсли;
		// обработка табличной части, пересчет цен
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Состояние("Обработка табличной части: "+НомерСтроки);
			Если Выб = "Розничные Руб" Тогда
				СпрЦены.ИспользоватьВладельца(Номенклатура);
				СпрЦены.ВыбратьЭлементы();
				Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
					Если СокрЛП(СпрЦены.ТипЦен.Наименование) = "Розничная" Тогда
						Цена = СпрЦены.Цена.Получить(ДатаДок);
						глПересчетТаблЧасти(Контекст,"Цена");
					КонецЕсли;	
				КонецЦикла;
			Иначе
				стр = "";
				Если ТаблЗапроса.НайтиЗначение(Номенклатура,стр,"Номенклатура")=1 Тогда
					 Цена  = ТаблЗапроса.ПолучитьЗначение(стр,"КонОстС")/ТаблЗапроса.ПолучитьЗначение(стр,"КонОстК");
					 Сумма = Количество*Цена;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Сообщить("Цены пересчитаны","");
	КонецЕсли;
КонецПроцедуры

//******************************************************************************

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-16";
ТаблицаПечФорм.Кнопка       = "ТОРГ-16";

// Для выбора цен
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);