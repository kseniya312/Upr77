Перем ФирмаДляОстатковТМЦ;
Перем ост;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//       
//******************************************************************************
// КонтрольДатыОплаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  В случае, если дата оплаты корректна возвращается пустая строка, 
//  в противном случае - соответствующий текст предупреждения.
//
// Описание:
//  Проверяет соответствует ли дата оплаты документа глубине кредита, заданного
//  для данного договора. Вызывается из модулей документов реализации.
//
Функция КонтрольДатыОплаты() 
	Если ДатаОплаты < ДатаДок Тогда
	    Возврат "Дата оплаты меньше даты документа!";
	КонецЕсли;      
	Если Договор.НеКонтролироватьКредит = 0 Тогда
		Если ДатаОплаты > глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита) Тогда
		    Возврат "Дата оплаты превышает глубину кредита!";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;	
КонецФункции // глКонтрольДатыОплаты()

//******************************************************************************
// КонтрольКредитаПройден(ВремПокупатели)
//
// Параметры:
//  ВремПокупатели- регистр "Покупатели", рассчитанный при необходимости
//
// Возвращаемое значение:
//  1 - контроль пройден (можно проводить), 0 - не пройден (не проводить!).
//
// Описание:
//  Проводит контроль величины кредита.
//
Функция КонтрольКредитаПройден(ВремПокупатели)
	
	РазрешитьПревышениеКредита = глПолучитьПолномочие("РазрешитьПревышениеКредита");
	
	// Проверим дату оплаты
	КонтрольДатыОплаты = КонтрольДатыОплаты();
	Если ПустоеЗначение(КонтрольДатыОплаты) = 0 Тогда 
	    Если РазрешитьПревышениеКредита <> 0  Тогда
			глСообщениеПроведения(КонтрольДатыОплаты+ РазделительСтрок+
			"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
		Иначе                   
			глНеПроводить(Контекст,КонтрольДатыОплаты);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;			
	
	Если Договор.НеКонтролироватьКредит = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	ТекущийДолг = ВремПокупатели.СводныйОстаток(Фирма,Договор,,,,"СуммаВал");
	
	Если (ТекущийДолг + СуммаВзаиморасчетов) > (Договор.СуммаКредита) Тогда
		                                                      
		ВалютаКредита = Договор.ВалютаВзаиморасчетов;
		
		СтрокаСообщ = "Сумма накладной вместе с текущим долгом превышает сумму максимального кредита клиенту!
					  |   Текущий долг:   "+глФРМ(ТекущийДолг,ВалютаКредита)+"
					  |   Остаток кредита:"+глФРМ(Договор.СуммаКредита - ТекущийДолг,ВалютаКредита)+"
					  |   Сумма накладной:"+ глФРМ(СуммаВзаиморасчетов,ВалютаКредита)+"!";
		
	    Если РазрешитьПревышениеКредита <> 0  Тогда
			глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
			Возврат 1;
		Иначе                   
			глНеПроводить(Контекст,СтрокаСообщ);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КонтрольКредитаПройден()

//******************************************************************************
// ВидДолгаПоСтатусу(СтатусПартии)
//
// Параметры:
//  СтатусПартии - значение перечисления статуса партии
//
// Возвращаемое значение:
//  Значение перечисления видов долга.
//
// Описание:
//  Возвращает вид долга, соответствующий статусу партии.
//
Функция ВидДолгаПоСтатусу(СтатусПартии)
		
	Если (СтатусПартии	= глСП.Т_Купленный) или
        (СтатусПартии	= глСП.Т_ВРознице) или
		(СтатусПартии	= глСП.Т_Тара) Тогда     
		Если СтатусПартии = глСП.Т_ВРознице Тогда
		    глСообщениеПроведения("На складе обнаружены розничные партии!", ТекущийДокумент(),,,1);
		КонецЕсли;
		Возврат глВД.ДолгЗаТовары;
		
	ИначеЕсли СтатусПартии	= глСП.Т_Принятый Тогда
		Возврат глВД.ДолгЗаТоварыПринятые;
		
	ИначеЕсли СтатусПартии	= глСП.Продукция Тогда
		Возврат глВД.ДолгЗаПродукцию;
		
	ИначеЕсли Лев(СтатусПартии.Идентификатор(),2)	= "М_" Тогда
		Возврат глВД.ДолгЗаМатериалы;
		
	Иначе
		глСообщениеПроведения("Неизвестный статус партии: "+СтатусПартии,ТекущийДокумент(),,,1);
	КонецЕсли;	
	
КонецФункции // ВидДолгаПоСтатусу()
    

//******************************************************************************
//			ДвижениеЗаявокПокупателя()
//	Тут мы списываем с регистра Заявки с учётом РезервыТМЦ2 и прав 
//		пользователя на влезания в чужой резерв
Процедура ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2)
	ТЗ	= создатьОбъект("ТаблицаЗначений");	//Сюда фигачим исходные итоги из регистра
	ТЗ1	= создатьОбъект("ТаблицаЗначений");	//Сюда фигачим то что надо списать
	ТЗ1.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
	ТЗ1.НоваяКолонка("Количество","число",14,3);
	ТЗ1.НоваяКолонка("Стоимость","число",15,2);
	
//******************************************************************************
//				УСТАНОВИМ ЧЕГО МОЖНО СПИСАТЬ ИЗ РЕЗЕРВА ПО ЭТОМУ ДОКУМЕНТУ
	Если ПустоеЗначение(ДокОснование)=0 Тогда
		ТекЗаявка 		= глПолучитьЗаявку(Контекст);
		//Если ДокОснование.Вид()="ЗаявкаПокупателя" Тогда 
		Если ПустоеЗначение(ТекЗаявка)=0 Тогда	
			//Сначала проверим на резервы по складу и если они есть по этой заявке, то спишем их
			Если ТекЗаявка.флРезервировать=1 Тогда	//Были резервы
				ВремРезервыТМЦ2.УстановитьФильтр(,,ТекЗаявка);
				ВремРезервыТМЦ2.ВыгрузитьИтоги(ТЗ,1,1);
				ТаблицаТМЦ.ВыбратьСтроки();
				Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл
					ТекНоменк	= ТаблицаТМЦ.Номенклатура;
					х			= ПолучитьПустоеЗначение(х);
					у			= 1;
					Если ТЗ.НайтиЗначение(ТекНоменк,х,у)=1 Тогда
						//т.к. все итоги свёрнуты, то можно утверждать, что строка с одинаковым наименованием 
						//товара только одна. Но все кол-ва в ней
						//Значит можно включать в запись регистра
						ТЗ1.НоваяСтрока();
						ТЗ1.Номенклатура	= ТекНоменк;
						Колво				= ТЗ.ПолучитьЗначение(х,"Количество");
						Если Колво>=ТаблицаТМЦ.Количество Тогда	//Уберём то что уже включили (кол-во)
							ТЗ1.Количество	= ТаблицаТМЦ.Количество;
							ТЗ.УстановитьЗначение(х,4,Колво-ТЗ1.Количество);
						иначе
							ТЗ1.Количество	= Колво;
							ТЗ.УстановитьЗначение(х,4,0);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ТЗ1.Свернуть("Номенклатура","Количество,Стоимость");
	//******************************************************************************
	//			ТЕПЕРЬ ПРОВЕРИМ ЧЕГО ВООБЩЕ МОЖНО СПИСАТЬ
	//	например, нет ли резерва по позиции по остальным резервам, т.е. не вылетаем-ли мы в "минус"
	//		а потом уже начнём чего-либо записывать в регистры и возится с партиями товаров
	
	ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
	ТЗ3			= СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ2	= СоздатьОбъект("ТаблицаЗначений");
	
	ТЗ3.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
	ТЗ3.НоваяКолонка("КолвоРезерваИтогоНаСкладе","число",15,5);
	ТЗ3.НоваяКолонка("КолвоРезерваПоДокументу","число",15,5);
	ТЗ3.НоваяКолонка("КолвоТовараИтогоНаСкладе","число",15,5);
	ТЗ3.НоваяКолонка("КолвоТовараПоДокументу","число",15,5);
	
//	ост.РассчитатьРегистрыНа(ТекущийДокумент());
	
	Ост.УстановитьФильтр(Фирма,,Склад);
	спТоваров=СоздатьОбъект("СписокЗначений");
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		спТоваров.ДобавитьЗначение(Номенклатура);
	КонецЦикла;
	Ост.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
	Ост.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
	
	ВремРезервыТМЦ2.УстановитьФильтр(,Склад);
	ВремРезервыТМЦ2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
	ВремРезервыТМЦ2.ВыгрузитьИтоги(ТЗ2,1,1);
	тз2.ВыбратьСтроки();
	тз4=СоздатьОбъект("ТаблицаЗначений");
	тз4.новаяКолонка("Номенклатура","Справочник.Номенклатура");
	тз4.новаяКолонка("Количество","число",15,2);
	Пока ТЗ2.ПолучитьСтроку()=1 Цикл
		если СформироватьПозициюДокумента(тз2.заявка)<СформироватьПозициюДокумента(ТекущийДокумент()) Тогда
			тз4.новаястрока();
			тз4.номенклатура= тз2.номенклатура;
			тз4.количество	= тз2.количество;
		КонецЕсли;
	КонецЦикла;
	тз4.выгрузить(ТЗ2);	
	ТЗ2.Свернуть("Номенклатура","Количество");
	
	ТаблицаТМЦ2.Загрузить(ТаблицаТМЦ);
	ТаблицаТМЦ2.Свернуть("Номенклатура","Количество");	//Попытка уйти от 2-х одинаковых строк в одной ТЧ (пока х.з. как реально этот момент разгребать)
	ТаблицаТМЦ2.ВыбратьСтроки();
	Пока ТаблицаТМЦ2.ПолучитьСтроку()=1 Цикл
		ТЗ3.НоваяСтрока();
		ТекНоменк			= ТаблицаТМЦ2.Номенклатура;
		х					= ПолучитьПустоеЗначение(х);
		у					= 1;
		ТЗ3.Номенклатура	= ТекНоменк;
		Если ТЗ2.НайтиЗначение(ТекНоменк,х,у)=1 Тогда	//Сначала общий резерв
			ТЗ3.КолвоРезерваИтогоНаСкладе	= ТЗ2.ПолучитьЗначение(х,"Количество");
			х								= ПолучитьПустоеЗначение(х);
			Если ТЗ1.НайтиЗначение(ТекНоменк,х,у)=1 Тогда	//Резерв по документу
				ТЗ3.КолвоРезерваПоДокументу	= ТЗ1.ПолучитьЗначение(х,"Количество");
			КонецЕсли;
		иначе 
			ТЗ3.КолвоРезерваИтогоНаСкладе	= 0;
			ТЗ3.КолвоРезерваПоДокументу		= 0;
		КонецЕсли;
		//Теперь из остатков ТМЦ
		х			= ПолучитьПустоеЗначение(х);
		у			= 2;
		Если ТЗ.НайтиЗначение(ТекНоменк,х,у)=1 Тогда
			ТЗ3.КолвоТовараИтогоНаСкладе	= ТЗ.ПолучитьЗначение(х,"Количество");
		КонецЕсли;
		ТЗ3.КолвоТовараПоДокументу			= ТаблицаТМЦ2.Количество;
	КонецЦикла;
	
	//Свернём по номенклатуре ТЗ3 - а то Петровские заявки "с завдоенными строками" уже ЗАЕБАЛИ!!!!!!!!!!!!!!!
//	ТЗ.Свернуть("");
	
	ТЗ3.ВыбратьСтроки();	//Теперь посмотрим нету ли товара не удовлетворяющего критериям
	пока ТЗ3.ПолучитьСтроку()=1 цикл
		А=ТЗ3.КолвоРезерваИтогоНаСкладе;
		В=ТЗ3.КолвоРезерваПоДокументу;
		С=ТЗ3.КолвоТовараИтогоНаСкладе;
		Д=ТЗ3.КолвоТовараПоДокументу;
		Х=С-А;
		У=Д-В;

		Если (А=0) и (В=0) Тогда

		иначе
		Если Константа.ПроверкаОстатковРеализация=1 Тогда
			если (У>0) и (Х<У) Тогда	//Нечего списывать
				сообщить("По позиции: "+сокрЛП(ТЗ3.Номенклатура)+", нет необходимого свободного кол-ва товара на складе");
				сообщить("		Не хватает ("+(У-Х)+") шт.");
				НеПроводитьДокумент();
				Возврат;
			КонецЕсли;
	    КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
//******************************************************************************
//		теперь после всех проверок, начинаем списывать товар
	

	
	Если ПустоеЗначение(ДокОснование)=0 Тогда
		ТекЗаявка 		= глПолучитьЗаявку(Контекст);
		//Если ДокОснование.Вид()="ЗаявкаПокупателя" Тогда 
		Если ПустоеЗначение(ТекЗаявка)=0 Тогда
			//Сначала проверим на резервы по складу и если они есть по этой заявке, то спишем их
			Если ТекЗаявка.флРезервировать=1 Тогда	//Были резервы
				ТаблИтогов 		= СоздатьОбъект("ТаблицаЗначений");
				Рег			 	= СоздатьОбъект("Регистры");
				РезервыТМЦ2     = Рег.РезервыТМЦ2;
				РезервыТМЦ2.УстановитьФильтр(,,ТекЗаявка);
				РезервыТМЦ2.ВыгрузитьИтоги(ТаблИтогов,1,1);
				
				ТаблИтогов.ВыбратьСтроки();
				Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
					стр = 0;
					КолДляЗакрытия = 0;
					Если ТЗ1.НайтиЗначение(ТаблИтогов.Номенклатура,стр,"Номенклатура") = 1 Тогда
						КолВДок = ТЗ1.ПолучитьЗначение(стр,"Количество");
						
						Если КолВДок < ТаблИтогов.Количество Тогда
							КолДляЗакрытия = КолВДок;
							ТаблИтогов.Количество = ТаблИтогов.Количество - КолВДок;
						Иначе
							КолДляЗакрытия = ТаблИтогов.Количество;
							ТаблИтогов.Количество = 0;
						КонецЕсли;
						
						Регистр.РезервыТМЦ2.Номенклатура 	= ТаблИтогов.Номенклатура;
						Регистр.РезервыТМЦ2.Склад		 	= ТаблИтогов.Склад;
						Регистр.РезервыТМЦ2.Заявка		 	= ТекЗаявка;
						Регистр.РезервыТМЦ2.Количество	 	= КолДляЗакрытия;  
						Регистр.РезервыТМЦ2.ФирмаОстатков 	= ТаблИтогов.ПолучитьЗначение(ТаблИтогов.НомерСтроки,"ФирмаОстатков");
						Регистр.РезервыТМЦ2.ДвижениеРасходВыполнить();	
					КонецЕсли;	
				КонецЦикла;	
				
				
				//Регистр РЕЗЕРВЫТМЦ2 - НЕ УХОДИТ В МИНУС, ОН СПИСЫВАЕТСЯ до 0 в худшем случае!
				//Если ТЗ1.КоличествоСтрок()>0 Тогда	//Чего-то можно списать с резерваТМЦ2
				//	ТЗ1.ВыбратьСтроки();
				//	Пока ТЗ1.ПолучитьСтроку() = 1 Цикл
				//		Регистр.РезервыТМЦ2.Номенклатура = ТЗ1.Номенклатура;
				//		Регистр.РезервыТМЦ2.Склад		 = Склад;
				//		Регистр.РезервыТМЦ2.Заявка		 = ДокОснование;
				//		Регистр.РезервыТМЦ2.Количество	 = ТЗ1.Количество;
				//		Регистр.РезервыТМЦ2.ДвижениеРасходВыполнить();
				//	КонецЦикла;
				//КонецЕсли;
                
				//проверим что осталось
				//ТаблИтогов 		= СоздатьОбъект("ТаблицаЗначений");
				//Рег			 	= СоздатьОбъект("Регистры");
				//РезервыТМЦ2     = Рег.РезервыТМЦ2;
				//РезервыТМЦ2.УстановитьФильтр(,Склад,ДокОснование);
				//РезервыТМЦ2.ВыгрузитьИтоги(ТаблИтогов,1,1);
				
				Если ТаблИтогов.Итог("Количество") > 0 Тогда
					Сообщить("Есть не закрытые резервы по документу: "+ТекЗаявка);
					ТаблИтогов.ВыбратьСтроки();
					Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
						Если ТаблИтогов.Количество > 0 Тогда
							Сообщить(""+СокрЛП(ТаблИтогов.Номенклатура) + " в количестве "+ТаблИтогов.Количество+" шт.");
						КонецЕсли;
					КонецЦикла;	
				КонецЕсли;	
				
			КонецЕсли;
			
			//******************************************************************************
			//Спишем регистр Заявки  
			Если ДокОснование.Вид()="ЗаявкаПокупателя" Тогда
				ВремЗаявки.УстановитьФильтр(Фирма,,Договор,ДокОснование);
				ВремЗаявки.ВыгрузитьИтоги(ТЗ,1,1);	//Тут ТЗ чистится и новые данные запишутся
				ТаблицаТМЦ.ВыбратьСтроки();
				ТЗ1.УдалитьСтроки();
				ДД	=	ДокОснование.ДатаДок;
				ДОВ	=	ДокОснование.Договор.ВалютаВзаиморасчетов;
				Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл
					ТекНоменк				= ТаблицаТМЦ.Номенклатура;
					х						= ПолучитьПустоеЗначение(х);
					у						= 2;
					Если ТЗ.НайтиЗначение(ТекНоменк,х,у)=1 Тогда
						//т.к. все итоги свёрнуты, то можно утверждать, что строка с одинаковым наименованием 
						//товара только одна. Но все кол-ва в ней
						
						//Значит можно включать в запись регистра
						
						ТЗ1.НоваяСтрока();
						ТЗ1.Номенклатура	= ТекНоменк;
						Колво				= ТЗ.ПолучитьЗначение(х,5);
						Стоимость			= ТЗ.ПолучитьЗначение(х,6);
						Если Колво>=ТаблицаТМЦ.Количество Тогда	//Уберём то что уже включили (кол-во и стоимость)
							ТЗ1.Количество	= ТаблицаТМЦ.Количество;
							ТЗ.УстановитьЗначение(х,5,Колво-ТЗ1.Количество);
							Стоим			= глПересчет(ТаблицаТМЦ.СуммаУпр,глДоллары,ДД,ДОВ,ДД);	//В валюте договора на дату заявки
							ТЗ1.Стоимость	= Стоим;
							ТЗ.УстановитьЗначение(х,6,Стоимость-Стоим);
						иначе
							ТЗ1.Количество	= Колво;
							ТЗ1.Стоимость	= Стоимость;
							
							ТЗ.УстановитьЗначение(х,5,0);
							ТЗ.УстановитьЗначение(х,6,0);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				ТЗ1.ВыбратьСтроки();
				//Регистр ЗАЯВКИ - НЕ УХОДИТ В МИНУС, ОН СПИСЫВАЕТСЯ до 0 в худшем случае!
				Если ТЗ1.КоличествоСтрок()>0 Тогда	//Чего-то можно списать с Заявки
					Пока ТЗ1.ПолучитьСтроку() = 1 Цикл	//Для возможности списывать не всю заявку за один раз
						Регистр.Заявки.Фирма 			= Фирма;
						Регистр.Заявки.Номенклатура		= ТЗ1.Номенклатура;
						Регистр.Заявки.ДоговорПокупателя= Договор;
						Регистр.Заявки.ЗаявкаПокупателя = ДокОснование.ТекущийДокумент();
						Регистр.Заявки.КоличествоРасход = ТЗ1.Количество;
						Регистр.Заявки.СтоимостьРасход	=ТЗ1.Стоимость;	
						Регистр.Заявки.ДвижениеРасходВыполнить();
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий, ТаблСписПартийКом;    
	Перем ВремРегистры;
	Перем ВремЗаявки, ВремЗаказыЗаявки, ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие, ВремПокупатели;  

	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
   	
	ТаблицаУслуг = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ   = глПодготовитьТаблицуДокумента(Контекст,1,ТаблицаУслуг);
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");  
	
	// Сформируем список статусов партий
	СтатусПартии = СоздатьОбъект("СписокЗначений");
	Если НеОтражатьПродажи = 0 Тогда
		СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
	Иначе
		СписокПараметров.ДобавитьЗначение(Перечисление.КодыОпераций.Списание,	"КодОперации");
	КонецЕсли;	
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремЗаявки                      = ВремРегистры.Заявки;
	//////ВремЗаказыЗаявки                = ВремРегистры.ЗаказыЗаявки;
	ВремОстаткиТМЦ  				= ВремРегистры.ОстаткиТМЦ;
	ВремРезервыТМЦ  				= ВремРегистры.РезервыТМЦ;	//Оставлено для совместимости
	ВремРезервыТМЦ2  				= ВремРегистры.РезервыТМЦ2;
	ВремПартииНаличие 				= ВремРегистры.ПартииНаличие;
	ВремПокупатели 					= ВремРегистры.Покупатели;
	Ост								= ВремРегистры.ОстаткиТМЦ;	//Для расчета остатка резервов
	    
//	ФильтрЗаявок         (ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки);	//Стандартый механизм изменён
	глФильтрОстатковТМЦ  (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремОстаткиТМЦ,ВремРезервыТМЦ  );
	глФильтрПартийТМЦ    (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремПартииНаличие              );     
	Если КодОперации=Перечисление.КодыОпераций.Продажа Тогда
		глФильтрДолгов   (Контекст, Договор, 	СписокПараметров, 	ВремПокупатели                 );	
	КонецЕсли;                  
	
	Если ИтогиАктуальны()=0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	// контроль величины кредита клиенту (с учетом права пользователя превышать его)
	Если КодОперации = глКО.Продажа Тогда
		Если КонтрольКредитаПройден(ВремПокупатели) = 0 Тогда
			Возврат;
		КонецЕсли;   
	КонецЕсли;

	//******************************************************************************
	// Всё что касается заявки и Регистра РезервыТМЦ2
	//	СТАНДАРТНЫЙ МЕХАНИЗМ РАБОТЫ С ЗАЯВКАМИ ИЗМЕНЁН!!!!
	ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2); // по ТМЦ
	////////ДвижениеЗаявокПокупателя(ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ); // по услугам
	
	// остатки ТМЦ
	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаТМЦ,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
		Возврат;
	КонецЕсли;
	              
	// партии ТМЦ
	глСписаниеПартийТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом);
	                   
	Если КодОперации=Перечисление.КодыОпераций.ПередачаНаРеализацию Тогда
		
		// надо списанные партии оприходовать на регистр "Партии отданные"
		ТаблСписПартий.ВыбратьСтроки();
		Пока  ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			//измерения
			Регистр.ПартииОтданные. Фирма			= ТаблСписПартий.Фирма;
			Регистр.ПартииОтданные. Номенклатура	= ТаблСписПартий.Номенклатура;
			Регистр.ПартииОтданные. СтатусПартии	= ТаблСписПартий.СтатусПартии;
			Регистр.ПартииОтданные. Партия			= ТаблСписПартий.Партия;
			
			Регистр.ПартииОтданные. Договор			= Договор;
			Регистр.ПартииОтданные. ДокументПередачи= ТекущийДокумент();
			// ресурсы
			Регистр.ПартииОтданные. Количество		= ТаблСписПартий.Количество;
			Регистр.ПартииОтданные. СуммаУпр		= ТаблСписПартий.СуммаУпр;
			Регистр.ПартииОтданные. СуммаРуб		= ТаблСписПартий.СуммаРуб;
			Регистр.ПартииОтданные. СуммаБезНДС		= ТаблСписПартий.СуммаБезНДС;
			Регистр.ПартииОтданные. ПродСтоимость  	= ТаблСписПартий.СуммаПрод;
			// реквизиты
			Регистр.ПартииОтданные. КодОперации		= глКО.ПередачаНаРеализацию;
			
			Регистр.ПартииОтданные. ДвижениеПриходВыполнить();
		КонецЦикла;     
		                                                                        
		
		// проверим, а не указал ли услуги - их отдавать на релизацию нельзя
		ТаблицаУслуг.ВыбратьСтроки();
		Если ТаблицаУслуг.ПолучитьСтроку()= 1 Тогда
			глНеПроводить(Контекст,"Услуги отдавать на реализацию невозможно! ("+ТаблицаУслуг.Номенклатура+")");
			Возврат;
		КонецЕсли;
		
		
	ИначеЕсли КодОперации=Перечисление.КодыОпераций.Продажа Тогда   
		
		// движение оборотного регистра "продажи" 
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл 
			Если СписаниеЧерезПродажу = 0 Тогда
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									ТаблСписПартий.Партия.Поставщик,
									ТаблСписПартий.Номенклатура,
									ТаблСписПартий.Количество,
									ТаблСписПартий.СуммаУпр,
									ТаблСписПартий.СуммаПродУпр,
									Объект);
			Иначе
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									ТаблСписПартий.Партия.Поставщик,
									ТаблСписПартий.Номенклатура,
									ТаблСписПартий.Количество,
									ТаблСписПартий.СуммаУпр,
									ТаблСписПартий.СуммаУпр,
									Объект);
			КонецЕсли;						
		КонецЦикла;
		
		ТаблСписПартий.Свернуть("СтатусПартии,СтавкаНП,СтавкаНДС,ДоговорКомитента","СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СуммаБезНДС");
		ТаблСписПартий.НоваяКолонка("КредДокумент");
		ТаблСписПартий.НоваяКолонка("ВидДолга");
		ТаблСписПартий.НоваяКолонка("Сумма");
		ТаблСписПартий.НоваяКолонка("СуммаУпр");
		ТаблСписПартий.НоваяКолонка("СуммаРуб");
		ТаблСписПартий.НоваяКолонка("СуммаНДС");
		ТаблСписПартий.НоваяКолонка("СуммаНП");
		ТаблСписПартий.НоваяКолонка("Себестоимость");
		ТаблСписПартий.НоваяКолонка("ОблагаетсяНП");
		
		Если ТаблицаУслуг.КоличествоСтрок() > 0 Тогда
			СуммаНДСУслуги = ТаблицаУслуг.Итог("СуммаНДС");
			СуммаУслуги = ТаблицаУслуг.Итог("Сумма");
		Иначе
			СуммаНДСУслуги = 0;
			СуммаУслуги = 0;
		КонецЕсли;
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			ТаблСписПартий.КредДокумент = ТекущийДокумент();
			ТаблСписПартий.ВидДолга		= ВидДолгаПоСтатусу(ТаблСписПартий.СтатусПартии);
			ТаблСписПартий.Себестоимость= ТаблСписПартий.СуммаБезНДС;
			ТаблСписПартий.СуммаНДС		= ?(ВыданоСоСкидкой = 0, Итог("СуммаНДСБезСкидки") - СуммаНДСУслуги,ТаблСписПартий.НДСПрод);
		 	ТаблСписПартий.СуммаНП		= ТаблСписПартий.НППрод;
			ТаблСписПартий.Сумма		= ?(ВыданоСоСкидкой = 0, Итог("СуммаБезСкидки") - СуммаУслуги,ТаблСписПартий.СуммаПрод);
			ТаблСписПартий.СуммаУпр		= ?(ВыданоСоСкидкой = 0, Итог("СуммаБезСкидки") - СуммаУслуги,ТаблСписПартий.СуммаПродУпр);
			ТаблСписПартий.СуммаРуб		= ?(ВыданоСоСкидкой = 0, Итог("СуммаБезСкидки") - СуммаУслуги,ТаблСписПартий.СуммаПродРуб);
			ТаблСписПартий.ОблагаетсяНП = УчитыватьНП;
		КонецЦикла;                                                                       
		                                                            
		СписокПараметров.Установить("ЗнакДвижения", 1); // идет увеличение долга
		глДвижениеДолгов(Контекст,Договор,ТаблСписПартий,СписокПараметров,ВремПокупатели);
		
		// запомним, что мы продали принятые на комиссию товары...
		ТаблСписПартийКом.ВыбратьСтроки();
		Пока ТаблСписПартийКом.ПолучитьСтроку()=1 Цикл                    
			Регистр.РеализованныйТовар.Фирма			= ТаблСписПартийКом.Фирма;
			Регистр.РеализованныйТовар.Договор 			= ТаблСписПартийКом.Партия.ДоговорПоставщика;
			Регистр.РеализованныйТовар.Номенклатура 	= ТаблСписПартийКом.Номенклатура;
			Регистр.РеализованныйТовар.Партия 			= ТаблСписПартийКом.Партия;
			Регистр.РеализованныйТовар.ДокПродажи		= ТекущийДокумент();
			Регистр.РеализованныйТовар.Количество 		= ТаблСписПартийКом.Количество;
			Регистр.РеализованныйТовар.ПродСтоимость 	= ТаблСписПартийКом.СуммаПродРуб - ТаблСписПартийКом.НППрод;
			Регистр.РеализованныйТовар.ДвижениеПриходВыполнить();
		КонецЦикла;                                                                       
		                                                            
		// реализация услуг  
		глДвижениеПартийУслуг(Контекст, ТаблицаУслуг, СписокПараметров);
		
		// сначала увеличим обороты продаж по услугам
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									"",
									ТаблицаУслуг.Номенклатура,
									ТаблицаУслуг.Количество,
									0,
									ТаблицаУслуг.СуммаУпр, Объект);
		КонецЦикла;
		
		// теперь задолженность покупателя за отпущенные услуги
		СписокПараметров.Установить("ЗнакДвижения",1); // увеличился долг клиента
		
		ТаблицаУслуг.Свернуть("СтавкаНДС,СтавкаНП","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
		
		ТаблицаУслуг.НоваяКолонка("КредДокумент");
		ТаблицаУслуг.НоваяКолонка("ВидДолга");
		ТаблицаУслуг.НоваяКолонка("Себестоимость");
		ТаблицаУслуг.НоваяКолонка("ДоговорКомитента");
		ТаблицаУслуг.НоваяКолонка("ОблагаетсяНП");
	
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
		
			ТаблицаУслуг.КредДокумент 	= ТекущийДокумент();
			ТаблицаУслуг.ВидДолга		= глВД.ДолгЗаУслуги;
			ТаблицаУслуг.Себестоимость	= 0;
			ТаблицаУслуг.ОблагаетсяНП 	= УчитыватьНП;
		
		КонецЦикла;                                                                       
	
		глДвижениеДолгов(Контекст,Договор,ТаблицаУслуг,СписокПараметров,ВремПокупатели);
		
	КонецЕсли;
	
	
КонецПроцедуры // ПроведениеПоРегистрам()
   
Функция ЕстьОплатаНаОсновнииРеализации(ТекКонтекст, ДокОплаты)
	Рез = 0;
	
	ТекЗаявка = глПолучитьЗаявку(ТекКонтекст);
	
	Если ПустоеЗначение(ТекЗаявка) = 0 Тогда
		СписокДокументовОплаты = глПолучитьОплаты(ТекЗаявка);
		Если ПустоеЗначение(СписокДокументовОплаты) = 0 Тогда
			РазСпис = СписокДокументовОплаты.РазмерСписка();
			Для сч=1 по РазСпис Цикл
				ТекДок = СписокДокументовОплаты.ПолучитьЗначение(сч);  
				Если ТекДок.ДокОснование.Вид() = "Реализация" Тогда
					Продолжить;	
				КонецЕсли;	
				Если ТекДок.ДокОснование = ТекКонтекст.ТекущийДокумент() Тогда
					Рез = 1;
					Прервать;
				Иначе
					ДокОплаты = ТекДок.ТекущийДокумент();
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Рез;
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
		Возврат;
	КонецЕсли;
	              
	Если (Склад.РозничныйСклад = 1) Тогда
	    глНеПроводить(Контекст,"Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с оптового склада!");
		Возврат;
	КонецЕсли;

	Если (Отгружено <> 1) и (ДатаДок >= Дата("08.06.12")) Тогда
	    глНеПроводить(Контекст,"Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с признаком отгружено!");
		Возврат;
	КонецЕсли;	
	
	//******************проверка цен на текущую дату*********************************************************************
	Если Склад.Магазин = 1 Тогда
		Попытка 
			ТекСкидка = ДокОснование.Скидка;
		Исключение 
			ТекСкидка = 0;
		КонецПопытки;
		
		ДопустимыйПроцент = Константа.ДопустимыйПроцентОтклоненияЦеныПриПродаже; 
		Если ДопустимыйПроцент > 0 Тогда
			ВыбратьСтроки();
			ЕстьОтклонения = 0;
			СтрокаСообщ = "Есть отклонения цен.";
			Пока ПолучитьСтроку() = 1 Цикл
				ЦенаЦены 	= 0;
				ЕдЦены		= "";
				ВалютаЦены  = "";
				// получим параметры цены
				Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
					Продолжить;
				КонецЕсли; 
				 
				Если ТекСкидка = 0 Тогда
					ТекЦена = Цена;
				Иначе
					ТекЦена = (Цена/(100-ТекСкидка))*100;
				КонецЕсли;
				
				Если (ЦенаЦены > ТекЦена) Тогда  
					ПроцентОтклонения =  100 - (ТекЦена * 100 / ЦенаЦены);
					Если ДопустимыйПроцент < ПроцентОтклонения Тогда
						СтрокаСообщ 	= СтрокаСообщ + РазделительСтрок + "Строка: " + НомерСтроки + " для " + Номенклатура + " цена изменилась. Была " + ТекЦена + " стала " + ЦенаЦены + " отклонение на " + Окр(ПроцентОтклонения,0) + "%.";
						ЕстьОтклонения 	= 1;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла; 
			
			Если ЕстьОтклонения = 1 Тогда
				глНеПроводить(Контекст,СтрокаСообщ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//*******************************************************************************************************************
	
	если ДокОснование.Вид()<>"РасходнаяНакладнаяРозницаБезнал" Тогда
		
		// Проведение по регистрам оперативного учета.	
		Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
			ПроведениеПоРегистрам();
			
			Если СтатусВозврата() = 0 Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		глПриПроведении(Контекст, ВидыДвижений);
	Иначе
		// Удаление движений по регистрам.
		Для Номер = 1 По Метаданные.Регистр() Цикл
			ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
		КонецЦикла;
	КонецЕсли;
	             
	//Проверим наличие оплаты на основании реализации 
	//если естьоплата и она не привязвна, тогда привязываем ее к реализации
	//ДокОплаты = "";
	//Если ЕстьОплатаНаОсновнииРеализации(Контекст, ДокОплаты) = 0 Тогда
	//	Если ДокОплаты <> "" Тогда
	//		Если ДокОплаты.ДатаДок >= Дата("01.06.2017") Тогда
	//			Если (ДокОплаты.Проведен() = 1) Тогда	
	//				ДокОплатыОбъек = СоздатьОбъект("Документ"); 
	//				ДокОплатыОбъек.НайтиДокумент(ДокОплаты.ТекущийДокумент());
	//				ДокОплатыОбъек.ДокОснование = ТекущийДокумент();
	//				//ДокОплатыОбъек.Провести();   
	//				Попытка                                         
	//					СписокПараметров = СоздатьОбъект("СписокЗначений");  
	//					СписокПараметров.ДобавитьЗначение("ПровестиИЗакрыть","Команда");
	//					СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ДокОснование");
	//					ОткрытьФорму(ДокОплатыОбъек.ТекущийДокумент(),СписокПараметров,0);
	//					//Сообщить("Проведен документ: "+ДокОплатыОбъек);
	//				Исключение
	//					Сообщить(ОписаниеОшибки());
	//				КонецПопытки;
	//			КонецЕсли;	   
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;
	
	СуммаЗачтеноАванса = 0;
	
	глПровестиЗачетАвансов(Контекст, СуммаЗачтеноАванса);
	
	Регистр.Взаиморасчеты2.Контрагент 	= Контрагент;
	Регистр.Взаиморасчеты2.Склад 		= Склад;
	если ПустоеЗначение(Проект)=1 Тогда
		НеПроводитьДокумент();
		Сообщить("Не указан проект - нет возможности отнести к определенному виду оплаты
		|документ не проводится!");
		Возврат;
	Иначе
		Если ВыданоСоСкидкой = 1  Тогда
			Регистр.Взаиморасчеты2.Долг		= Итог("Сумма") - СуммаЗачтеноАванса;
			Регистр.Взаиморасчеты2.Скидка	= 0;
			Регистр.Взаиморасчеты2.Валюта	= Валюта;
			//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		иначе 
			//Регистр.Взаиморасчеты2.Долг		= Итог("Сумма")+Итог("СуммаСкидки");
			СкидкаТек = Итог("СуммаБезСкидки")-Итог("Сумма")-?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС")); 
			Регистр.Взаиморасчеты2.Долг		= Итог("СуммаБезСкидки") - СуммаЗачтеноАванса;
			//Регистр.Взаиморасчеты2.Скидка	= Итог("СуммаСкидки"); 
			Регистр.Взаиморасчеты2.Скидка	= СкидкаТек;
			Регистр.Взаиморасчеты2.Валюта	= Валюта;
			//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		КонецЕсли;
		Если ДокОснование.Вид()="РасходнаяНакладнаяРозницаБезнал" Тогда
			если ДокОснование.ДокОснование.Вид()="СчетБнРозница" Тогда	//Это и есть привязка
				Регистр.Взаиморасчеты2.БНсчет	= ДокОснование.ДокОснование;
			КонецЕсли;
		КонецЕсли;
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			Регистр.Взаиморасчеты2.ДокументРасчета	= ТекущийДокумент();
		Иначе
			Регистр.Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(Контекст);
		КонецЕсли;
		Если Проект.ВидОплаты=глКО.Наличные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Наличные;
			Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.Безнал Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Безнал;
			Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.Прочее Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Прочее;
			Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.СтарыеДанные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
			Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		Иначе
			НеПроводитьДокумент();
			Сообщить("Проект не отнесен к определенному виду оплаты
			|документ не проводится!");
			Возврат;
		КонецЕсли;
		//КонецЕсли;
	КонецЕсли;
	
	Если Константа.АвтоматПроводитьСчФПоРеализации = 1 Тогда
		ДокПодч=СоздатьОбъект("Документ");
		ЕстьРегистрацияОтгрузки = 0;
		ЕстьСчетФактура = 0;
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока ДокПодч.ПолучитьДокумент()=1 Цикл
			Если (ДокПодч.Вид() = "СчетФактураВыданный") и (ЕстьСчетФактура = 0) Тогда
				Если (ДокПодч.Проведен() = 0) Тогда 
					Если ДокПодч.ПометкаУдаления() = 1 Тогда
						ДокПодч.СнятьПометкуУдаления();	
					КонецЕсли;	
					Попытка
						ОткрытьФорму(ДокПодч.ТекущийДокумент(),"ПровестиИЗакрыть",0);
						Сообщить("Проведен документ: "+ДокПодч);
						ЕстьСчетФактура = 1;
						Прервать;
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;	
	
	//******************************************************************************
	//			ВЗАИМОРАСЧЁТЫ С КЛИЕНТОМ РОЗНИЧНОГО ПОДРАЗДЕЛЕНИЯ
	//******************************************************************************
	
	Если ДокОснование.Выбран() = 1 Тогда
		Если ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда
			//Если ДокОснование.ДокОснование.Выбран() = 1 Тогда
				//Если ДокОснование.ДокОснование.Вид() = "СчетБнРозница" Тогда
					//суммаОпДог = глСуммаОплатыПоДоговору(ДокОснование.ДокОснование,1,ДатаДок);
					ТекСуммаСкидки = окр(РассчитатьСкидкувДок(Контекст),2,1);
					Если ТекСуммаСкидки <> 0 Тогда
						суммаОпДог = глПолучитьОплатуПоАналитике(АналитикаСчетБезналПроценты, Контекст);
						если суммаОпДог = 1 тогда	
							Регистр.Покупатели_Розница.Контрагент			= АналитикаПроценты.Контрагент;
							Если ДокОснование.флНачислитьБонусы = 1 Тогда
								Регистр.Покупатели_розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Бонусы;
								Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки;
							Иначе
								Регистр.Покупатели_розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Проценты;
								Если ДатаДок > Дата("08.06.14") тогда 
									Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки - ((ТекСуммаСкидки/100)*Константа.ПроцентВычетаДляБезнала.Получить(ДатаДок));
								Иначе
									Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки;
								КонецЕсли;
							КонецЕсли;
							
							Регистр.Покупатели_Розница.Магазин				= АналитикаПроценты.Магазин;
							Регистр.Покупатели_Розница.КредДокумент			= ДокОснование.ТекущийДокумент(); 
							Регистр.Покупатели_Розница.АналитикаСчетБезнал	= АналитикаСчетБезналПроценты;
							Регистр.Покупатели_Розница.АналитикаПродажи		= АналитикаПроценты;
							
							Регистр.Покупатели_Розница.ДвижениеПриходВыполнить();
						Иначе
							Регистр.Покупатели_Розница.Контрагент			= АналитикаПроценты.Контрагент;
							Регистр.Покупатели_розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.Отгрузка;
							Регистр.Покупатели_Розница.Магазин				= АналитикаПроценты.Магазин;
							Регистр.Покупатели_Розница.КредДокумент			= ДокОснование.ТекущийДокумент(); 
							Регистр.Покупатели_Розница.АналитикаСчетБезнал	= АналитикаСчетБезналПроценты;
							Регистр.Покупатели_Розница.АналитикаПродажи		= АналитикаПроценты;
							Если ДокОснование.флНачислитьБонусы = 1 Тогда
								Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки;
							Иначе
								Если ДатаДок > Дата("08.06.14") тогда 
									Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки - ((ТекСуммаСкидки/100)*Константа.ПроцентВычетаДляБезнала.Получить(ДатаДок));
								Иначе
									Регистр.Покупатели_Розница.СуммаРуб = ТекСуммаСкидки;
								КонецЕсли;
							КонецЕсли;
							Регистр.Покупатели_Розница.ДвижениеПриходВыполнить();
						КонецЕсли;
					КонецЕсли;
				//КонецЕсли;
			//КонецЕсли;
			
			Если (АналитикаСчетБезналПроценты.ДатаДок >= дата("01.03.2017")) или (ПровестиПереносОплаты = 1) Тогда
				Регистр.ПереносОплаты.Контрагент 					= АналитикаСчетБезналПроценты.КонтрагентЮЛ;
				Регистр.ПереносОплаты.СчетБезнал		 			= АналитикаСчетБезналПроценты;
				Регистр.ПереносОплаты.СуммаОтгрузки		 			= Итог("Сумма");
				Регистр.ПереносОплаты.ДвижениеРасходВыполнить(); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;   
	
		

КонецПроцедуры //ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения()
	Если Константа.АвтоматПроводитьСчФПоРеализации = 1 Тогда
		ДокПодч=СоздатьОбъект("Документ");
		
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока ДокПодч.ПолучитьДокумент()=1 Цикл
			Если ДокПодч.Вид() = "СчетФактураВыданный" Тогда
				Если (ДокПодч.ПометкаУдаления() = 0) и (ДокПодч.Проведен() = 1) Тогда
					Попытка
						ОткрытьФорму(ДокПодч.ТекущийДокумент(),"СнятьСПроведенияИЗакрыть",0);
						Сообщить("Снят с проведения документ: "+ДокПодч);
						Прервать;
					Исключение
						Сообщить(ОписаниеОшибки());
					КонецПопытки;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
