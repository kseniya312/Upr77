//#ЗагрузитьИзФайла "..\..\Системная\Документ\Форма\Реализация.txt"
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"
Перем ДолжнОтпускающего;
Перем ФИООтпускающего;
Перем ФИОДиректора,ФИОГлБуха;
Перем НачислитБонусПроцент;
Перем НомерЗаказа, НомерОтгрузки, НоваяСхемаРаботы;	//Для подстановок

перем НС, СтараяНоменклатураФирм;
Перем Рег1, Рег2, Склад_темп, ТЗ, ТЗ2;	//Работа с остатками

Перем новый;

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент, СтараяВалюта;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;

Перем __ОстатокНаСкладе, __ОстатокПоФирме , __Резерв , __ТовСкидка; // для показа остатков

Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; // для показа остатков

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//    
 
Функция ПолучитьНомерПиктограммы()
	ПиктограммаОстатковФирмы = глНетОстаткаПоФирме(Контекст, Проект);
КонецФункции	
       
Процедура ПолучитьНомераПиктограмм()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ПолучитьНомерПиктограммы();  
	КонецЦикла;	
КонецПроцедуры	

Процедура кнПрибратьПартии() 
	глПрибратьПартии(Контекст, Проект); 
КонецПроцедуры

Процедура кнРасчитатьБонус()   
	Если (глПользователь.Код<>"Кожемякин") Тогда
		НачислитБонусПроцент = 0;
	Иначе	
		НачислитБонусПроцент = глФРМ(глПолучитьКоличествоНачиляемыхБонусовПроцентов(Контекст),);	
	КонецЕсли;	
КонецПроцедуры

//Обработка складов
Функция ПокажиОстатки()
	Перем стр;

	Если НазваниеНабораПрав()="Сервис" Тогда
		возврат 0;
	КонецЕсли;
	
	Если НС=НомерСтроки Тогда
	    возврат 0;
	КонецЕсли;
        
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		если Склад_темп.Магазин=0 Тогда
			Рег1.УстановитьФильтр(,Номенклатура,Склад_темп);
			Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
			
			рег2.УстановитьФильтр(Номенклатура,Склад_темп);
			//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
			рег2.ВыгрузитьИтоги(ТЗ2,1,1);
			
			ТЗ2.Свернуть("Номенклатура","Количество");
			х					= ПолучитьПустоеЗначение(х);
			у					= 1;
			
			а=0;
			
			Если ТЗ2.НайтиЗначение(Номенклатура,х,у)=1 Тогда	//Сначала общий резерв
				а=1;
				ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				ТЗ_Остаток.Резерв	= ТЗ2.ПолучитьЗначение(х,"Количество");
				х					= ПолучитьПустоеЗначение(х);
			КонецЕсли;
			//Теперь из остатков ТМЦ
			х			= ПолучитьПустоеЗначение(х);
			у			= 2;
			Если ТЗ.НайтиЗначение(Номенклатура,х,у)=1 Тогда
				Если а=0 Тогда
					ТЗ_Остаток.НоваяСтрока();
					ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				КонецЕсли;
				ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	стрк="";
	НС=НомерСтроки;
	возврат стрк;
КонецФункции


//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

Процедура ПриИзмененииВыгр()	//показывает необходимость выгрузки
	если Выгр=1 тогда
		ЭкспортБух=1;
	иначе
		ЭкспортБух=0;
	КонецЕсли;
КонецПроцедуры

Процедура ПрописатьСкидки()
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1  Цикл
		СуммаСкидки = Число(глСтрокаСкидки(Контекст))
	КонецЦикла;
	
КонецПроцедуры

//******************************************************************************
// для корректного определения документа экспортируемого в безнал
// если не выбран проект с Экспортируемый=1 тогда запретить ТОРГ12, СФ и не изменять номер документа
Процедура ПриВыбореПроекта()
	если (сокрЛП(Проект)<>"") и (новый=1) тогда	
		Если Проект.Экспортируемый<>1 тогда
			Форма.кнСчФ.Доступность(0);
			УстановитьНовыйНомер(Проект.ПрефиксНомеровДокументов);
			ЭкспортБух=0;
			Выгр=0;
		иначе
			Форма.кнСчФ.Доступность(1);
			УстановитьНовыйНомер(Проект.ПрефиксНомеровДокументов);
			ЭкспортБух=1;
			Выгр=1;
		конецЕсли;
	иначеесли новый=1 тогда
		УстановитьНовыйНомер(Метаданные.Нумератор("ТОРГ12"));
		ЭкспортБух=0;
		Выгр=0;
	КонецЕсли;
	Если ЭкспортБух=1 тогда
		Выгр=1;
	иначе
		Выгр=0;
	КонецЕсли;
		
КонецПроцедуры

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//  Делает невидимой колонку "Скидка", если скидка не выбрана
//  Делает невидимой колонку всего, если все налоги в сумме
Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		                          
		Форма.БезСкидки.Видимость(1);
		Форма.СуммаСкидки.Видимость(1);
	КонецЕсли;
	                            
КонецПроцедуры //УправлениеВидимостью()


//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()         
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	
	Перем ОстатокНаСкладе, ОстатокПоФирме , Резерв ; // для показа остатков
	Перем ОстатокНаСкладеТранзит, ОстатокПоФирмеТранзит;
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	
	ПокажиОстатки();
    глПокажиОстаткиПоФирмам(Контекст, ТЗ_ОстатокПоФирмам, СтараяНоменклатураФирм);
	Возврат(ИнфоТекст);

	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить(0);  
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;

		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда   
		
		ТекстСообщения = "";
	
		глПроверитьКонтрагентаВЦепочке(Контекст, Контрагент, ТекстСообщения);
	
		Если СтрДлина(ТекстСообщения) <> 0 Тогда
			ТекстСообщения = "Нужно внести изменения в другие документы!"+РазделительСтрок+"Есть документы с другим контрагентом!"+РазделительСтрок+ТекстСообщения;
			//Предупреждение(ТекстСообщения); 
			//Контрагент = СтарыйКонтрагент;
			//Возврат;
		КонецЕсли;
		
		глПриИзмененииКонтрагента(Контекст);
		Скидка = Контрагент.ОсновнаяСкидка;
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();  
		
		//++Ерошенко 03.05.2007
		ПроверитьКонтрагентаВДокументе(Контрагент); 
		//--Ерошенко
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()     

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с оптового склада!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                      
//******************************************************************************
// РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
//
// Параметры:
//  Нет
//
// Описание:
//
Процедура РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
	
	Если УчитыватьНП = 1 Тогда
		ПарСуммаНП = ПарСуммаВсего * КоэффНП;
		СуммаБезНП = ПарСуммаВсего - ПарСуммаНП;
		Если СуммаВклНП = 0 Тогда
			ПарСумма = СуммаБезНП;
		Иначе
			ПарСумма = ПарСуммаВсего;
		КонецЕсли;
	Иначе
		ПарСумма   = ПарСуммаВсего;
		СуммаБезНП = ПарСуммаВсего;
		ПарСуммаНП = 0;
	КонецЕсли;
	
	Если УчитыватьНДС = 1 Тогда
		ПарСуммаНДС = СуммаБезНП * КоэффНДС;
		Если СуммаВклНДС = 0 Тогда
			ПарСумма = ПарСумма - ПарСуммаНДС;
		КонецЕсли;
	Иначе
		ПарСуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыПоВарианту()

//******************************************************************************
// ЗаполнениеПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть по документу-основанию (Заявка), если он указан,
//  остатками по данной Заявке (недоотгруженными товарами), если основания нет,
//  то заполняется всеми остатками Заявок по данному договору с данной фирмой
//  (или группой фирм, в зависимости от настройки контроля остатков).
//
//******************************************************************************
//		ЭТО ВСЁ БЫЛО РАНЕЕ
//			ТЕПЕРЬ ВСЁ ПОД НУЖДЫ ФИРМЫ

Функция ЗаполнениеПоИтогам()
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	
	Рег=СоздатьОбъект("Регистр.Заявки");
	рег.УстановитьЗначениеФильтра("ЗаявкаПокупателя",ДокОснование,1);
	рег.ВыгрузитьИтоги(ТЗ,1,1);
	//ТЗ.ВыбратьСтроку();
	ДокОснование.ВыбратьСтроки();
	УдалитьСтроки();
	ДД=ДокОснование.ДатаДок;
	ДВВ=Договор.ВалютаВзаиморасчетов;
	Пока ДокОснование.ПолучитьСтроку()=1 Цикл
		//Проверим осталась-ли данная строка в Регистр.Заявки, т.е. имеет право на списание
		х=ПолучитьПустоеЗначение(х);
		у=2;
		Если ТЗ.НайтиЗначение(ДокОснование.Номенклатура,х,у)=1 Тогда
			//т.к. все итоги свёрнуты, то можно утверждать, что строка с одинаковым наименованием 
			//товара только одна. Но все кол-ва и суммы в ней-же
			
			//Проверка на отгрузку с данного склада - т.к. теперь можно выбирать в заявке, чего куда грузим :)
			Если НоваяСхемаРаботы=1 тогда
				если НомерЗаказа="Заказ1" тогда
					КолвоПоОснованию=ДокОснование.Заказ1+ДокОснование.Отгрузка1;
				Иначеесли НомерЗаказа="Заказ2" Тогда
					КолвоПоОснованию=ДокОснование.Заказ2+ДокОснование.Отгрузка2;
				КонецЕсли;
			Иначе
				КолвоПоОснованию=ДокОснование.Количество;
			КонецЕсли;
			
			если КолвоПоОснованию>0 тогда
				//Значит можно включать в табл. часть
				НоваяСтрока();
				Номенклатура	= ДокОснование.Номенклатура;
				Колво			= ТЗ.ПолучитьЗначение(х,5);
				Стоимость		= ТЗ.ПолучитьЗначение(х,6);
				Если Колво>=КолвоПоОснованию Тогда	//Уберём то что уже включили (кол-во и стоимость)
					Количество	= КолвоПоОснованию ;
					ТЗ.УстановитьЗначение(х,5,Колво-Количество);
					Стоим		= глПересчет(ДокОснование.Сумма,Валюта,ДД,ДВВ,ДД);
					ТЗ.УстановитьЗначение(х,6,Стоимость-Стоим);
				иначе
					Количество	= Колво;
					ТЗ.УстановитьЗначение(х,5,0);
					ТЗ.УстановитьЗначение(х,6,0);
				КонецЕсли;
				Единица			= ДокОснование.Единица;
				Коэффициент		= ДокОснование.Коэффициент;
				Цена			= ДокОснование.Цена;
				Сумма			= Количество*Цена;
				СтавкаНДС		= ДокОснование.СтавкаНДС;
				СтавкаНП		= ДокОснование.СтавкаНП;
				//Налоги рассчитываются далее			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции // ЗаполнениеПоИтогам()

//******************************************************************************
// ЗаполнитьИзТерминала()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  заполняет спецификацию документа из терминала сбора данных
//
Функция ЗаполнитьИзТерминала()
	Перем ТермДанные;
	Перем УдаляемыеСтроки;
	Перем ВремНоменклатура, ВремЕдиница, ВремКолво;
	Перем ЦенаТов, ЕдиницаЦены;
	
	// 1. загружаем данные из терминала
	Если глТерминалЗагрузитьДанные(ТермДанные) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// 2. преобразуем таблицу, полученную из обработки терминала в формат для
	// передачи в процедуру обработки подбора
	                                    
	ТермДанные.НоваяКолонка("Номенклатура");
	ТермДанные.НоваяКолонка("Единица");
	ТермДанные.НоваяКолонка("Цена", "Число",);
	
	УдаляемыеСтроки = СоздатьОбъект("СписокЗначений");
	ТермДанные.ВыбратьСтроки();
	
	Пока ТермДанные.ПолучитьСтроку() = 1 Цикл
	    Если глПолучитьТоварПоШтрихкоду(ТермДанные.Штрихкод, ВремНоменклатура, ВремЕдиница, ВремКолво) = 0 Тогда
			// штрихкод не найден. сохраним номер строки для дальнейшего ее удаления
			УдаляемыеСтроки.ДобавитьЗначение(ТермДанные.НомерСтроки);
		Иначе
			ТермДанные.Номенклатура	= ВремНоменклатура;
			ТермДанные.Единица		= ВремЕдиница;
			ТермДанные.Количество	= ТермДанные.Количество * ВремКолво;
			ТермДанные.Цена			= глПолучитьЦену(ВремНоменклатура, ТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
		КонецЕсли;
	КонецЦикла;
	
	
	// 3. удалим строки, по которым не удалось идентифицировать товар
	Для СчетчикЦикла = 1 По УдаляемыеСтроки.РазмерСписка() Цикл
		УдСтр = УдаляемыеСтроки.ПолучитьЗначение(СчетчикЦикла);
		ТермДанные.УдалитьСтроку(УдСтр - СчетчикЦикла + 1);
	КонецЦикла;
	
	ТермДанные.Свернуть("Номенклатура, Единица, Цена", "Количество");
	
	ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
	ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
	ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
	ПараметрыПодбора.ДобавитьЗначение(ТермДанные     , "ТаблицаПодбора");
	
	глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
	
	// 4. Спросим про очистку памяти терминала
	Если Вопрос("Очистить память терминала сбора данных?", "Да+Нет", 60) = "Да" Тогда
	    глТерминалОчиститьПамять();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьИзТерминала()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоИтогам();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		
		Если СтарыйДоговор <> Договор Тогда
		    // при изменении договора могла измениться глубина кредита
			ДатаОплаты		= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
			СтарыйДоговор	= Договор;
		КонецЕсли;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремКодОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.Продажа);
	СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.ПередачаНаРеализацию);
	
	Если СписокОпераций.ВыбратьЗначение(ВремКодОперации,,,,1)=1 Тогда
		КодОперации=ВремКодОперации;
	КонецЕсли;
	
КонецПроцедуры	// ПоКнопкеОперация()
                   
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	Перем ВариантЗап;
	
	Если  глТерминалВключен() = 1 Тогда
		СписВариантов = СоздатьОбъект("СписокЗначений");
		СписВариантов.ДобавитьЗначение(1, "Заполнить по остаткам");
		СписВариантов.ДобавитьЗначение(2, "Заполнить из терминала");
		
		Если СписВариантов.ВыбратьЗначение(ВариантЗап, , , 60, 1) <> 1 Тогда
		    Возврат;
		КонецЕсли;
	Иначе
	    // терминал не включен. Заполняем всегда по остаткам
		ВариантЗап = 1;
	КонецЕсли;
	
	Если ВариантЗап = 1 Тогда
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;    
		
		УдалитьСтроки();
		
		Результат = ЗаполнениеПоИтогам();
	Иначе
		Результат = ЗаполнитьИзТерминала();
	КонецЕсли;
	
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);


КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ФормПарПечШапки(Парметры)
//
// Параметры:
//  Параметры - сисок, содержащий значения для формирования шапки печатной формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список, содержащий значения полей для печати шапки документа
//
Процедура ФормПарПечШапки(Параметры)
	                     
	Параметры 	= СоздатьОбъект("СписокЗначений");
	// собственная фирма
	
	Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
	
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "БС";
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));
	НазваниеПроектаИнжСантехника = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИнженернаяСантехника")); 
	НазваниеПроектаФорсаж			= "Безнал ОП Кредит";
	Если (Найти(Проект.Наименование, СокрЛП(НазваниеПроектаФорсаж)) > 0) 
			или (Проект.Код = "00002") 
			или (Проект.Код = "00003")
			или (Проект.Код = "00021")
			или (Проект.Код = "00022") 
			или (Проект.Код = "00011") Тогда
		ВыбЮЛ = "Форсаж";
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп";
		Если Найти(Проект.Наименование, "юр.л.") > 0 Тогда 
		    Эксперт = 0;
		Иначе	
			Эксперт = 1;   
		КонецЕсли;
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	//ИначеЕсли Найти(Докум.Проект.Наименование, СокрЛП(НазваниеПроектаИнжСантехника)) > 0 Тогда	
	ИначеЕсли (Проект.Код = "00006")
    	или (Проект.Код = "00020")
		или (Проект.Код = "00015") Тогда
		ВыбЮЛ = "ИнжСантехника";
	ИначеЕсли (Проект.Код = "00009")
		или (Проект.Код = "00012") Тогда
		ВыбЮЛ = "Паритет";	
	Иначе	
		//ВыбЮЛ = "Форсаж";
		ВыбЮЛ = "ИнжСантехника";
	КонецЕсли;
	
	Если ВыбЮЛ = "БС" Тогда
		глПлатежныеРеквизиты(Фирма.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			ФирмаРеквизиты = "";
		Иначе
			ФирмаРеквизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
					
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) + ?(ПустоеЗначение(Фирма.ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(Фирма.ЮрЛицо.ИНН), ""), "Фирма");
		Параметры.ДобавитьЗначение(глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес), "ФирмаАдрес");
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.Телефоны), "ФирмаТелефоны");
		Параметры.ДобавитьЗначение(ФирмаРеквизиты, "ФирмаРеквизиты");
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ОКПО), "ФирмаОКПО");
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Реквизиты);
		
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ПолноеНаименованиеФирмы")+", ИНН "+Реквизиты.Получить("ИНН")+"/"+Реквизиты.Получить("КПП"),"Фирма");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ПредставлениеЮрАдресаФирмы"), "ФирмаАдрес");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("Телефон")+", "+Реквизиты.Получить("Факс"), "ФирмаТелефоны");
		Параметры.ДобавитьЗначение("р/с "+Реквизиты.Получить("РасчСчет")+" в "+Реквизиты.Получить("Банк")+", БИК "+Реквизиты.Получить("БИК")+
							  ", корр/с "+Реквизиты.Получить("КоррСчет"),"ФирмаРеквизиты");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ОКПО"), "ФирмаОКПО");		
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС"
	
	// контрагент
	
	Клиент			= "";
	КлиентЮрАдрес	= "";
	КлиентФактАдрес	= "";
	КлиентОКПО		= "";
	КлиентРевизиты	= "";
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Клиент			= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование) +
		                  ?(ПустоеЗначение(Контрагент.ЮрФизЛицо.ИНН) = 0, ", ИНН" + СокрЛП(Контрагент.ЮрФизЛицо.ИНН), "");
		КлиентЮрАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ЮрАдрес);
		КлиентФактАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ФактАдрес);
		
		// у физ. лиц нет ОКПО
		Если Контрагент.ЮрФизЛицо.Вид() <> "ФизЛица" Тогда
			КлиентОКПО	= СокрЛП(Контрагент.ЮрФизЛицо.ОКПО);
		КонецЕсли;
		
		Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
		глПлатежныеРеквизиты(Контрагент.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			КлиентРевизиты = "";
		Иначе
			КлиентРевизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ДобавитьЗначение(Клиент, "Клиент");
	Параметры.ДобавитьЗначение(КлиентЮрАдрес, "КлиентЮрАдрес");
	Параметры.ДобавитьЗначение(КлиентФактАдрес, "КлиентФактАдрес");
	Параметры.ДобавитьЗначение(КлиентОКПО, "КлиентОКПО");
	Параметры.ДобавитьЗначение(КлиентРевизиты, "КлиентРеквизиты");
	
КонецПроцедуры // ФормПарПечШапки()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПарамШапки;
	
	ПечТабл = СоздатьОбъект("Таблица");
	ПечТабл.ИсходнаяТаблица("ТОРГ12");
	
	// инициализация переменных для печати шапки
	ФормПарПечШапки(ПарамШапки);
	
	// собственная фирма
	ВремФирма		= ПарамШапки.Получить("Фирма");
	ФирмаАдрес		= ПарамШапки.Получить("ФирмаАдрес");
	ФирмаТелефоны	= ПарамШапки.Получить("ФирмаТелефоны");
	ФирмаРеквизиты	= ПарамШапки.Получить("ФирмаРеквизиты");
	ФирмаОКПО		= ПарамШапки.Получить("ФирмаОКПО");
	
	ПечОрг			= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаТелефоны) = 0, ", тел. " + ФирмаТелефоны, "") +
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, ", " + ФирмаРеквизиты, "");
	
	ПечФирма		= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, ", " + ФирмаРеквизиты, "");
	
	// контрагент
	
	Клиент			= ПарамШапки.Получить("Клиент");
	КлиентЮрАдрес	= ПарамШапки.Получить("КлиентЮрАдрес");
	КлиентФактАдрес	= ПарамШапки.Получить("КлиентФактАдрес");
	КлиентРеквизиты	= ПарамШапки.Получить("КлиентРеквизиты");
	КлиентОКПО		= ПарамШапки.Получить("КлиентОКПО");
	
	ПечКлиент		= Клиент +
	                  ?(ПустоеЗначение(КлиентЮрАдрес) = 0, ", " + КлиентЮрАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
					  
	ПечГрузополучатель = Клиент +
	                  ?(ПустоеЗначение(КлиентФактАдрес) = 0, ", " + КлиентФактАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
					  
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
	    ПечДокОснование	= "";
	Иначе               
		ТекДокОснование 		= ДокОснование;
		ОснованиеНеподтвЗаявка 	= "";
		Пока ПустоеЗначение(ТекДокОснование) = 0 Цикл
			Если ТекДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
				ОснованиеНеподтвЗаявка = ТекДокОснование;
			КонецЕсли;	                                 
			ТекДокОснование = ТекДокОснование.ДокОснование;
		КонецЦикла;	
		
		Если ОснованиеНеподтвЗаявка 	= "" Тогда
			ПечДокОснование			= глНазваниеДокументаВжурнале(Контекст)+" "+НомерДок+" от "+ДатаДок;
		Иначе
			ПечДокОснование			= глНазваниеДокументаВжурнале(ОснованиеНеподтвЗаявка)+" "+ОснованиеНеподтвЗаявка.НомерДок+" от "+ОснованиеНеподтвЗаявка.ДатаДок;
		КонецЕсли;	
	КонецЕсли;
	
	// выясним, какую вертикальную секцию будем использовать
	Если УчитыватьНП = 0 Тогда
		ВертСекция = "";
	Иначе
		ВертСекция = "_НП";
	КонецЕсли;
	
	// Выводим шапку таблицы. Шапка печатается на каждом листе.
	ПечТабл.ВывестиСекцию("Шапка");
	
	// Выводим спецификацию
	
	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице	= 22;
	
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки		= 10;
	СтрокПодвала	= 9;
	
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	НомерСтраницы	= 1;
    ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	ТаблицаДокумента.Свернуть("Номенклатура,Коэффициент","Единица,Количество,Сумма,СуммаНП,СуммаНДС"); 
	ТаблицаДокумента.ВыбратьСтроки();
	Если ТаблицаДокумента.КоличествоСтрок() = 1 Тогда
		ПереноситьПоследнююСтроку	= 0;
	Иначе
		ЦелыхСтраницСПодвалом		= Цел((СтрокШапки + ТаблицаДокумента.КоличествоСтрок() + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала		= Цел((СтрокШапки + ТаблицаДокумента.КоличествоСтрок() - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку	= ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице	= 0;
	ИтогоСуммаНаСтранице		= 0;
	ИтогоНДСНаСтранице			= 0;
	ИтогоСуммаСНДСНаСтранице	= 0;
	ИтогоНГСМНаСтранице			= 0;
	ИтогоНПНаСтранице			= 0;

	// инициализация итогов по документу
	ИтогоКоличество	= 0;
	ИтогоСумма		= 0;
	ИтогоНДС		= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоНГСМ		= 0;
	ИтогоНП			= 0;

	Ном	= 0;
	
	КурсРублей = глКурсДляВалюты(глРубли, ДатаДок);
	
	ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку() = 1 Цикл
		Ном	= Ном + 1;
		
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница	= (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = ТаблицаДокумента.КоличествоСтрок())) Тогда
			ПечТабл.ВывестиСекцию("ИтогоПоСтранице"+ВертСекция);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице	= 0;
			ИтогоСуммаНаСтранице		= 0;
			ИтогоНДСНаСтранице			= 0;
			ИтогоСуммаСНДСНаСтранице	= 0;
			ИтогоНГСМНаСтранице			= 0;
			ИтогоНПНаСтранице			= 0;
			
			ПечТабл.НоваяСтраница();
			НомерСтраницы	= НомерСтраницы + 1;
			ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
		КонецЕсли;

		ПечТовар		= СокрЛП(ТаблицаДокумента.Номенклатура.ПолнНаименование);
		ПечЕдиница		= СокрЛП(ТаблицаДокумента.Единица.ОКЕИ.Наименование);
		ПечОКЕИ			= СокрЛП(ТаблицаДокумента.Единица.ОКЕИ.Код);
		ПечКод 			= СокрЛП(ТаблицаДокумента.Номенклатура.Артикул);
		
		ПечКоличество	= ТаблицаДокумента.Количество;
		КолВо			= ?(ТаблицаДокумента.Количество = 0, 1, ТаблицаДокумента.Количество);
		
		ПечКолвоВОдномМесте = ?(ТаблицаДокумента.Коэффициент <= 1, "", ТаблицаДокумента.Коэффициент);
		ПечКоличествоМест = ?(ТаблицаДокумента.Коэффициент <= 1, "", ТаблицаДокумента.Количество);
                                                                         
		СуммаПеч    = глПересчет(ТаблицаДокумента.Сумма   , Валюта, Курс, глРубли, КурсРублей);
		СуммаНДСПеч = глПересчет(ТаблицаДокумента.СуммаНДС, Валюта, Курс, глРубли, КурсРублей);
		СуммаНППеч  = глПересчет(ТаблицаДокумента.СуммаНП , Валюта, Курс, глРубли, КурсРублей);
		
		Если СуммаВклНП = 1 Тогда
			СуммаБезНП = СуммаПеч - СуммаНППеч;
		Иначе
			СуммаБезНП = СуммаПеч;
		КонецЕсли;
		
		Если СуммаВклНДС = 1 Тогда
            СуммаБезНДС = СуммаБезНП - СуммаНДСПеч;
			СуммаСНДС   = СуммаБезНП;
		Иначе
            СуммаБезНДС = СуммаБезНП;
			СуммаСНДС   = СуммаБезНП + СуммаНДСПеч;
		КонецЕсли;
		
		ПечНДС			= СуммаНДСПеч;
		
		Если УчитыватьНП = 1 Тогда
		    ПечНП = СуммаНППеч;
		Иначе
			ПечНП = "";
		КонецЕсли;
		
		Если (Проект.Наименование = "Эксперт Инт. магазин безнал")
			или (Проект.Наименование = "Эксперт Безнал Магазины") Тогда
			СуммаПеч    = глПересчет(СуммаСНДС   , Валюта, Курс, глРубли, КурсРублей);
			СуммаНДСПеч = глПересчет(0, Валюта, Курс, глРубли, КурсРублей);
			СуммаБезНДС = СуммаСНДС;
			ПечНДС 		= 0;
			ПечЦена = ?(ТаблицаДокумента.Количество <> 0, СуммаСНДС / ТаблицаДокумента.Количество, СуммаСНДС);
		Иначе
			ПечЦена = ?(ТаблицаДокумента.Количество <> 0, СуммаБезНДС / ТаблицаДокумента.Количество, СуммаБезНДС);
		КонецЕсли;
		
		ПечТабл.ВывестиСекцию("Строка" + ВертСекция);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице	= ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице + СуммаБезНДС;
		ИтогоНДСНаСтранице			= ИтогоНДСНаСтранице + ПечНДС;
		ИтогоСуммаСНДСНаСтранице	= ИтогоСуммаСНДСНаСтранице + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНПНаСтранице = ИтогоНПНаСтранице + ПечНП;
		КонецЕсли;

		// увеличим итоги по документу
		ИтогоКоличество	= ИтогоКоличество + ТаблицаДокумента.Количество;
		ИтогоСумма		= ИтогоСумма + СуммаБезНДС;
		ИтогоНДС		= ИтогоНДС + ПечНДС;
		ИтогоСуммаСНДС	= ИтогоСуммаСНДС + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНП = ИтогоНП + ПечНП;
		КонецЕсли;
	КонецЦикла;

	ПечТабл.ВывестиСекцию("ИтогоПоСтранице" + ВертСекция);
	ПечТабл.ВывестиСекцию("Всего" + ВертСекция);
	
	Позиции=глСклонение(Ном,"наименование","наименования","наименований");
	// выводим подвал
	НаСумму	= "на сумму " + глСуммаПрописью(ИтогоСуммаСНДС + ИтогоНП, глРубли) + РазделительСтрок + " в т.ч. НДС " +глСуммаПрописью(ИтогоНДС, глРубли)  ;

	// формируем строку для вывода количества листов накладной
	// Слово лист склоняется
	Если (НомерСтраницы > 10) И (НомерСтраницы < 20) Тогда
		Слово	= " листах";
	Иначе
		ПоследняяЦифра	= НомерСтраницы % 10;
		
		Если ПоследняяЦифра = 1 Тогда
		    Слово	= " листе";
		Иначе
		    Слово	= " листах";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКоличествоЛистов	= Строка(НомерСтраницы) + Слово;
	
	ВыбЮЛ = "БС";
	НазваниеПроектаИС 				= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт 			= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));
	НазваниеПроектаИнжСантехника 	= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИнженернаяСантехника"));
	НазваниеПроектаФорсаж			= "Безнал ОП Кредит";
	
	Если (Найти(Проект.Наименование, СокрЛП(НазваниеПроектаФорсаж)) > 0) 
			или (Проект.Код = "00002") 
			или (Проект.Код = "00003")
			или (Проект.Код = "00021")
			или (Проект.Код = "00022") 
			или (Проект.Код = "00011") Тогда
		ВыбЮЛ = "Форсаж";
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп";
		Если Найти(Проект.Наименование, "юр.л.") > 0 Тогда 
		    Эксперт = 0;
		Иначе	
			Эксперт = 1;   
		КонецЕсли;
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	//ИначеЕсли Найти(Докум.Проект.Наименование, СокрЛП(НазваниеПроектаИнжСантехника)) > 0 Тогда	
	ИначеЕсли (Проект.Код = "00006")
    	или (Проект.Код = "00020")
		или (Проект.Код = "00015") Тогда
		ВыбЮЛ = "ИнжСантехника";
	ИначеЕсли (Проект.Код = "00009")
		или (Проект.Код = "00012") Тогда
		ВыбЮЛ = "Паритет";	
	Иначе	
		//ВыбЮЛ = "Форсаж";
		ВыбЮЛ = "ИнжСантехника";
	КонецЕсли;
	
	Если ВыбЮЛ <> "БС" Тогда
		Реквизиты = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Реквизиты);
		ФИОДиректора	=	Реквизиты.Получить("ГенДир");
		ФИОГлБуха		=	Реквизиты.Получить("ГлавБух");
	Иначе
		ФИОДиректора	=	Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок);
		ФИОГлБуха		=	Фирма.ЮрЛицо.ГлБухгалтер.Получить(ДатаДок);
	КонецЕсли;
		
	ПечТабл.ВывестиСекцию("Подвал");

	// показать сформированную таблицу
	             
	Если СразуНаПринтер = 0 Тогда
		ПечТабл.Опции(0, 0, 0, 0, "ДляРеализации", "ДляРеализации");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечТабл.Защита(1);
		Иначе
			ПечТабл.Защита(0);
		КонецЕсли;
		ПечТабл.ТолькоПросмотр(1);

		ПечТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечТабл.КоличествоЭкземпляров(КолЭкз);
		ПечТабл.Напечатать(0);
	КонецЕсли;
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	Если сокрЛП(глПользователь.Полномочия)="Менеджер" тогда
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", нет ИНН - печать официального документа запрещена!");
			//Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан юр. адрес - печать официального документа запрещена!");
			//Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан факт. адрес - печать официального документа запрещена!");
			//Возврат;
//	++Горлач			
//		 Разблокируем менеджерам запрет печати без КПП (у ЧП его нет). Для этого комментим проверку на ввод КПП.			
//		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
//			Предупреждение("Внимание! У "+контрагент+", нет КПП - печать официального документа запрещена!");
//			Возврат;
		КонецЕсли;
	иначе
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (Проект.Экспортируемый=1) тогда
			Сообщить("Внимание! У "+контрагент+", нет ИНН!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
			Предупреждение("Внимание! У "+контрагент+", не указан юр. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан факт. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
			Предупреждение("Внимание! У "+контрагент+", нет КПП!");
		КонецЕсли;
	КонецЕсли;
	
	//Если (НомерТекущейФормы = 1) Тогда
	//	Если (Проект.Экспортируемый=1) или (сокрЛП(глПользователь.Полномочия)="Бухгалтер") тогда	//Типа проверки
	//		Печать(СразуНаПринтер, КолЭкз);
	//	иначе
	//		сообщить("Эта печатная форма, только для безнала");
	//	КонецЕсли;
	//Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		Если (нрег(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"))=нрег("TORG12.ert")) или 
		(нрег(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"))=нрег("TORG12БЕЗСКИДКИ.ERT")) тогда
			Если (Проект.Экспортируемый=1) или (сокрЛП(глПользователь.Полномочия)="Бухгалтер") тогда	//Типа проверки
				ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
			иначе
				сообщить("Эта печатная форма, только для безнала");
				возврат;
			КонецЕсли;
		КонецЕсли;

	Сообщить(""+глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	//КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
       
Функция ПолучитьПартиюНоменклатуры(ТекПартия, ТекНоменклатура)
	Результат = "";
	СпрПартии = СоздатьОбъект("Справочник.Партии");
	СпрПартии.ИспользоватьВладельца(ТекНоменклатура);
	СпрПартии.ВыбратьЭлементы();
	Пока СпрПартии.ПолучитьЭлемент() = 1 Цикл
		Если (СпрПартии.ПриходныйДокумент = ТекПартия.ПриходныйДокумент) 
			и (СпрПартии.ПометкаУдаления() = 0) Тогда
			Результат = СпрПартии.ТекущийЭлемент();	
			Прервать;
		КонецЕсли;	
	КонецЦикла;	  
	
	Возврат Результат;
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия		= Параметр.Получить("Партия");
		
		ТекПартия 	= Партия;
		ОбщРег		= СоздатьОбъект("Регистры");
		РегПартии 	= ОбщРег.ПартииНаличие;
			
		Если Многострочный = 1 Тогда
			Если Вопрос("Установить данное значение для всех строк?", "Да+Нет", 60) = "Да" Тогда   
				Если Вопрос("Установить цену из партии?", "Да+Нет", 60) = "Да" Тогда
					УстанвливатьЦену = 1;
				Иначе
					УстанвливатьЦену = 0;
				КонецЕсли;
				
				ВыбратьСтроки();
				Пока ПолучитьСтроку() = 1 Цикл
					Партия = ПолучитьПартиюНоменклатуры(ТекПартия, Номенклатура);
					Если УстанвливатьЦену = 1 Тогда  
						ЕстьЦена = 0;	
						////вариант взятия из цены прихода
						////но могут быть перенесенные остатки в которых документ регистрации периодического значения не найден
						////тогда цена не установиться
						Переодик=СоздатьОбъект("Периодический");
						Переодик.ИспользоватьОбъект("ПоследняяЦенаПрихода", Номенклатура);
						Переодик.ОбратныйПорядок(1);
						Переодик.ВыбратьЗначения();
						//Переодик.ВыбратьПоДокументу(ТекПартия.ПриходныйДокумент);
						
						Пока Переодик.ПолучитьЗначение() = 1 Цикл
							Если Переодик.ТекущийДокумент() = ТекПартия.ПриходныйДокумент Тогда
								Цена 	    = Переодик.Значение;
								глПересчетТаблЧасти(Контекст,"Цена"); 
								ЕстьЦена = 1;
								Прервать;                                                          
							КонецЕсли;
						КонецЦикла;
						
						Переодик = ""; 
						//если нет данных по последней цене прихода берем из партии
						Если ЕстьЦена = 0 Тогда
							ТекОстатокКоличество= РегПартии.СводныйОстаток(Фирма,Склад.МОЛ, Номенклатура, ,ТекПартия,, , "Количество"); 
							ТекОстатокСтоимость = РегПартии.СводныйОстаток(Фирма,Склад.МОЛ, Номенклатура, ,ТекПартия,, , "СуммаУпр");   
							
							Если (ТекОстатокКоличество = 0) Тогда
								Сообщить("< остаток отсутствует > по номенклатуре: "+Номенклатура);
							Иначе
								Цена = ТекОстатокСтоимость/ТекОстатокКоличество;
								глПересчетТаблЧасти(Контекст,"Цена");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;	
			КонецЕсли;			
		КонецЕсли;
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;

	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	перем ав;
	Если сокрЛП(глПользователь.Полномочия)<>"Бухгалтер" тогда	//нефиг остальным лазить
		Форма.Выгр.Доступность(0);
	КонецЕсли;
	
	Если ДокументОснование.Вид() = "СолянкаПоПоставкам" Тогда
		Склад = ДокументОснование.Склад;
		КодОперации	= Перечисление.КодыОпераций.Продажа;
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		Контрагент = ДокументОснование.Контрагент;
		ДатаОплаты = глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
		Договор = Контрагент.ОсновнойДоговор;
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура = ДокументОснование.Номенклатура;
			Количество = ДокументОснование.Количество;
			Единица = ДокументОснование.Единица;
			Коэффициент = ДокументОснование.Коэффициент;
			Цена = ДокументОснование.Цена;
			Сумма = ДокументОснование.Сумма;
		КонецЦикла;
		СуммаВзаиморасчетовДок	= Итог("Сумма")+?(СуммаВклНП =1,0,Итог("СуммаНП" ))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
		СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок, Валюта, Курс, Договор.ВалютаВзаиморасчетов, ДатаДок);	
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.Вид() = "ПоступлениеТМЦ" Тогда
		ВвестиЧисло(ав,"Введите пароль, для выполения данной операции!",15,2,30);
		если число(ав)=константа.КлючевоеЗначение тогда
			
			Склад = ДокументОснование.Склад;
			КодОперации	= Перечисление.КодыОпераций.Продажа;
			глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
			Контрагент = ДокументОснование.Контрагент;
			Валюта = глРубли;
			ТипЦен = ДокументОснование.ТипЦен;
			Договор = ДокументОснование.Договор;
			ДатаОплаты = глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
			ДокументОснование.ВыбратьСтроки();
			Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
				НоваяСтрока();
				Номенклатура = ДокументОснование.Номенклатура;
				Количество = ДокументОснование.Количество;
				Единица = ДокументОснование.Единица;
				Коэффициент = ДокументОснование.Коэффициент;
				Цена = ДокументОснование.Цена;
				Сумма = ДокументОснование.Сумма;
				Цена=глПересчет(Цена,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
				Сумма=глПересчет(Сумма,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
			КонецЦикла;
			глПересчитатьСкидки(Контекст);
			СуммаВзаиморасчетовДок	= Итог("Сумма")+?(СуммаВклНП =1,0,Итог("СуммаНП" ))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
			СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок, Валюта, Курс, Договор.ВалютаВзаиморасчетов, ДатаДок);	
			Возврат;
		иначе 	//не угадали ключевое значение!!!
			сообщить("Вы ввели неверный	пароль! Данная операция не будет выполнена.");
			СтатусВозврата(0);
			возврат;
			форма.закрыть(0);
		конецЕсли;
	КонецЕсли;
	
	//---олаоололололололололол (вывод на основании,в перемещение добавлена реализация)
	Если ДокументОснование.Вид() = "ПеремещениеТМЦ_Розница"  ТОгда   
		Проект = ДокументОснование.Проект; 
		новый = 1;
		ПриВыбореПроекта();
		новый = 0;
		Склад = ДокументОснование.Склад;   
		Фирма = ДокументОснование.Фирма;
		Валюта = ДокументОснование.Валюта;
		ТипЦен = ДокументОснование.ТипЦен; 
		КодОперации = Перечисление.КодыОпераций.Продажа;
		СуммаВклНДС = ДокументОснование.СуммаВклНДС;
		СуммаВклНП = ДокументОснование.СуммаВклНП;
		УчитыватьНДС = ДокументОснование.УчитыватьНДС;
		УчитыватьНП = ДокументОснование.УчитыватьНП; 
		ДокОснование = ДокументОснование;
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура = ДокументОснование.Номенклатура;
			Количество = ДокументОснование.Количество;
			Единица = ДокументОснование.Единица;
			Коэффициент = ДокументОснование.Коэффициент;
			Цена = ДокументОснование.Цена;
			Сумма = ДокументОснование.Сумма;
			СтавкаНДС		= глПользователь.ОсновнаяСтавкаНДС;
			Цена=глПересчет(Цена,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
			Сумма=глПересчет(Сумма,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
			СуммаНДС	= Сумма * глВыделяемыйНДС(СтавкаНДС);	
		КонецЦикла;
		
	Иначе
		СинонимДокумента	= ПредставлениеВида();
		СинонимОснования	= ДокументОснование.ПредставлениеВида();
		
		Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
		Поз		= Список.НайтиЗначение(Вид());
		
		// выполним проверку, можно ли вводить документ на основании ДокументОснование
		Если Поз = 0 Тогда
			// ДокументОснование не найден в списке разрешенных
			Предупреждение("Документ """ + СинонимДокумента +
			""" нельзя вводить на основании """ + СинонимОснования + """", 60);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		КодОперации	= Перечисление.КодыОпераций.Продажа;
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		
		ДатаОплаты = глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
		
		// По умолчанию выписываем в той же валюте и по тому же курсу, что и документ-основание
		Валюта	= ДокументОснование.Валюта;
		Курс	= ДокументОснование.Курс;
		если глЕстьРеквизитШапки("Мультик", ДокументОснование.Вид())=1 Тогда
			Мультик	= ДокументОснование.Мультик;
		КонецЕсли;
		
		Если глЕстьРеквизитШапки("Объект",ДокументОснование.Вид())=1 Тогда
			Объект= ДокументОснование.Объект;
		КонецЕсли;
		
		Если Мультик=1 тогда 
			Мульт=1;
		КонецЕсли;
		// Документы оптовой торговли можно оформлять только с оптового склада
		Если (Склад.РозничныйСклад = 1) Тогда
			Склад = "";
		КонецЕсли;
		
		// если основание - неподтвержденная заявка, то нужно заполнить
		// склад по умолчанию
		Если ПустоеЗначение(Склад) = 1 Тогда
			ВремСклад	= глЗначениеПоУмолчанию("ОсновнойСклад");
			Если ВремСклад.РозничныйСклад = 0 Тогда
				Склад	= ВремСклад;
			КонецЕсли;
		КонецЕсли;
		
		а=1;
		НоваяСхемаРаботы=0;
		
		// Имеется возможность выбрать склад для заполнения
		Если ДокументОснование.Вид()="ЗаявкаПокупателя" Тогда
			АвторЗаявки 			= ДокументОснование.Автор; 
			Комментарий 			= ДокументОснование.Комментарий; 
			сп=СоздатьОбъект("СписокЗначений");
			если ДокументОснование.итог("Заказ1")+ДокументОснование.итог("Отгрузка1")>0 Тогда
				сп.ДобавитьЗначение(Константа.СкладОтделаПродаж1);
			КонецЕсли;
			Если ДокументОснование.итог("Заказ2")+ДокументОснование.итог("Отгрузка2")>0 Тогда
				сп.ДобавитьЗначение(Константа.СкладОтделаПродаж2);
			КонецЕсли;
			сп.ВыбратьЗначение(а,"Укажите, с какого склада, вы будете отгружать товар",,30,0);
			Если стрДлина(сокрЛП(а))>3 тогда	//не помню параметры - вот и выкрутился по идиотски :)
				Склад=а;
				НоваяСхемаРаботы=1;
				если а=Константа.СкладОтделаПродаж1 Тогда
					НомерЗаказа		= "Заказ1";
					НомерОтгрузки	= "Отгрузка1";
					
				Иначе
					НомерЗаказа		= "Заказ2";
					НомерОтгрузки	= "Отгрузка2";
				КонецЕсли;
			Иначе
				Сообщить("Склад не указан!");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
			ТЗ 		= СоздатьОбъект("ТаблицаЗначений");
			Рег 	= СоздатьОбъект("Регистр.ЗаявкиНаСклад");
			Рег.УстановитьФильтр(ДокументОснование,,);
			
			Рег.ВыгрузитьИтоги(ТЗ,1,1);
			ТЗ.Свернуть("ЗаявкаНаСклад","КоличествоОбработано");
			КоличествоСтрок = ТЗ.КоличествоСтрок();
			
			Пока КоличествоСтрок > 0 Цикл
				ТЗ.ПолучитьСтрокуПоНомеру(КоличествоСтрок);
				Если ТЗ.КоличествоОбработано = 0 Тогда
					ТЗ.УдалитьСтроку(КоличествоСтрок);
				КонецЕсли;
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;
			
			СЗПарам = СоздатьОбъект("СписокЗначений"); 
			СЗПарам.Установить("Заголовок", "Заявки на склад готовые к отгрузке.");
			СЗПарам.Установить("ТекстВопроса", "Выберите заявки на склад для формирования реализации.");
			ТЗ.Свернуть("ЗаявкаНаСклад","");
			СЗПарам.Установить("ТаблЗначений", ТЗ);  
			
			ОткрытьФормуМодально("Обработка.ВыборИЗТаблицыЗначений", СЗПарам, 1);
			
			Если (СЗПарам <> "Нет") и (СЗПарам <> "Отмена") и (ТипЗначенияСтр(СЗПарам) = "ТаблицаЗначений") Тогда
				Рег.ВыгрузитьИтоги(ТЗ,1,1);
				ТЗ.Свернуть("ЗаявкаНаСклад,Номенклатура","КоличествоОбработано");
				
				КоличествоСтрок = ТЗ.КоличествоСтрок();
				
				Пока КоличествоСтрок > 0 Цикл
					ТЗ.ПолучитьСтрокуПоНомеру(КоличествоСтрок);
					Использовать = 0;
					х = 0;
					Если СЗПарам.НайтиЗначение(ТЗ.ЗаявкаНаСклад,х,"ЗаявкаНаСклад") = 1 Тогда
						Использовать = СЗПарам.ПолучитьЗначение(х,"Использовать");
					КонецЕсли;	
					
					Если (ТЗ.КоличествоОбработано = 0) или (Использовать = 1) Тогда
						ТЗ.УдалитьСтроку(КоличествоСтрок);
					КонецЕсли;
					КоличествоСтрок = КоличествоСтрок - 1;
				КонецЦикла;
				
							
				Если ТЗ.КоличествоСтрок() > 0 Тогда
					ДокументОснование.ВыбратьСтроки();
					Пока ДокументОснование.ПолучитьСтроку()	= 1 Цикл
						ТЗ.ВыбратьСтроки();
						Пока ТЗ.ПолучитьСтроку() = 1 Цикл
							Если ТЗ.Номенклатура = ДокументОснование.Номенклатура Тогда
								Если ТЗ.КоличествоОбработано > 0 Тогда
									НоваяСтрока();
									Номенклатура 	= ДокументОснование.Номенклатура;
									
									Если ТЗ.КоличествоОбработано <= ДокументОснование.Количество Тогда
										Количество = ТЗ.КоличествоОбработано;
									Иначе
										Количество = ДокументОснование.Количество;
									КонецЕсли;
									
									
									Единица 		= ДокументОснование.Единица;
									Коэффициент 	= ДокументОснование.Коэффициент;
									Цена 			= ДокументОснование.Цена;//  * Количество;// / ДокументОснование.Количество;
									Сумма 			= Цена * Количество;// / ДокументОснование.Количество;
									СтавкаНДС		= глПользователь.ОсновнаяСтавкаНДС;
									Цена			= глПересчет(Цена,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
									Сумма			= глПересчет(Сумма,ДокументОснование.Валюта,ТекущаяДата(),глРубли,ТекущаяДата());
									СуммаНДС		= Сумма * глВыделяемыйНДС(СтавкаНДС);
									ЗаявкаНаСклад	= ТЗ.ЗаявкаНаСклад.ТекущийДокумент();
									
									Если ТЗ.КоличествоОбработано <= ДокументОснование.Количество Тогда
										ТЗ.КоличествоОбработано = 0;
									Иначе
										ТЗ.КоличествоОбработано = ТЗ.КоличествоОбработано - ДокументОснование.Количество;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЕсли;	
			Иначе
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		//Тут по розничной отгрузке по безналу
		Если ДокументОснование.Вид()="РасходнаяНакладнаяРозницаБезнал" Тогда
			Контрагент		= ДокументОснование.КонтрагентЮЛ;
			Договор			= ДокументОснование.ДоговорЮЛ;
			АвторЗаявки 	= ДокументОснование.АвторЗаявки;
			ВыданоСоСкидкой	= 1;
			Скидка			= 0;
			
			ДокументОснование.ВыбратьСтроки();
			УдалитьСтроки();
			Если ДокументОснование.ВыданоСоСкидкой=0 тогда
				Скидка=0;
			КонецЕсли;
			//		если ДокументОснование
			Пока ДокументОснование.ПолучитьСтроку()=1 Цикл
				НоваяСтрока();
				Номенклатура	= ДокументОснование.Номенклатура;
				Количество		= ДокументОснование.Количество;
				Единица			= ДокументОснование.Единица;
				Коэффициент		= 1;
				Цена			= ДокументОснование.Цена;
				Сумма			= ДокументОснование.Сумма;
				СтавкаНДС		= глПользователь.ОсновнаяСтавкаНДС;
//Екатерина Мэтр+
				партия			= ДокументОснование.партия;
//Екатерина Мэтр-

			КонецЦикла;
		Иначе	//Иначе все остальное
			Если ДокументОснование.Вид() <>  "ЗаявкаПокупателя" Тогда
				Результат = ЗаполнениеПоИтогам();
				Если ПустоеЗначение(Результат) = 0 Тогда
					Сообщить(Результат);
					СтатусВозврата(0);
				КонецЕсли;
				АвторЗаявки 			= ДокументОснование.Автор;
			КонецЕсли;
		КонецЕсли;
		
		глПересчитатьСкидки(Контекст);
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
		новый=1;
		ПриВыбореПроекта();	
		новый=0;
		СуммаВзаиморасчетовДок	= Итог("Сумма")+?(СуммаВклНП =1,0,Итог("СуммаНП" ))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
		СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок, Валюта, Курс, Договор.ВалютаВзаиморасчетов, ДатаДок);	
		Если ПустоеЗначение(АвторЗаявки) = 1 Тогда 
			АвторЗаявки = ДокументОснование.Автор;
		КонецЕсли;	
	КонецЕсли; 
	
	//******************проверка цен на текущую дату*********************************************************************
	Если Склад.Магазин = 1 Тогда
		Попытка 
			ТекСкидка = ДокОснование.Скидка;
		Исключение 
			ТекСкидка = 0;
		КонецПопытки;
		
		ВыбратьСтроки();
		СтрокаСообщ = "Есть отклонения цен.";
		ЕстьОтклонения = 0;
		Пока ПолучитьСтроку() = 1 Цикл
			ЦенаЦены 	= 0;
			ЕдЦены		= "";
			ВалютаЦены  = "";
			// получим параметры цены
			Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
				СтрокаСообщ 	= СтрокаСообщ + РазделительСтрок + "Строка: " + НомерСтроки + " для " + Номенклатура + " не указана цена " + ТипЦен;
			КонецЕсли; 
			 
			Если ТекСкидка = 0 Тогда
				ТекЦена = Цена;
			Иначе
				ТекЦена = (Цена/(100-ТекСкидка))*100;
			КонецЕсли;
			
			Если ЦенаЦены > ТекЦена Тогда 
				ЕстьОтклонения  = 1;
				СтрокаСообщ 	= СтрокаСообщ + РазделительСтрок + "Строка: " + НомерСтроки + " для " + Номенклатура + " цена изменилась с " + ТекЦена + " на " + ЦенаЦены;	
			КонецЕсли;	
		КонецЦикла;
		Если ЕстьОтклонения = 1 Тогда
			Предупреждение(СтрокаСообщ); 
			Сообщить(СтрокаСообщ);
		КонецЕсли;
	КонецЕсли;
	//*******************************************************************************************************************   
	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);	
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	Если сокрЛП(глПользователь.Полномочия)<>"Бухгалтер" тогда	//нефиг остальным лазить
		Форма.Выгр.Доступность(0);
	КонецЕсли;
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		Если Форма.Параметр = "Комиссия" Тогда  
			КодОперации		= Перечисление.КодыОпераций.ПередачаНаРеализацию;
		Иначе
			КодОперации		= Перечисление.КодыОпераций.Продажа;
		КонецЕсли;
	Иначе
		КодОперации	= Перечисление.КодыОпераций.Продажа;
	КонецЕсли;    
	
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
	новый=1;
	ПриВыбореПроекта();
	новый=0;
	АвторЗаявки = Автор;
КонецПроцедуры // ВводНового()   

Процедура ПриУдаленииСтроки() 
	Если Отгружено = 1 Тогда
		Если (НазваниеНабораПрав()<>"Склад") и (НазваниеНабораПрав()<>"Администратор")
		и (
		(Склад.Магазин <> 1) и (НазваниеНабораПрав()<>"ПродавецРозница") и (НазваниеНабораПрав()<>"Администратор_магазина")
		и (Найти(НазваниеНабораПрав(),"Администратор_магазина1")=0)
		и (Найти(НазваниеНабораПрав(),"Администратор_-конфиг_и_выгрузка")=0) 
		и (НазваниеНабораПрав()<>"Администратор_-конфиг_и_выгрузка_ватулан")
		) Тогда
			Предупреждение("Вы не имеете право удалять строки документа со статусом отгружено!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура ПриВводеСтроки() 
	Если Отгружено = 1 Тогда
		Если (НазваниеНабораПрав()<>"Склад") и (НазваниеНабораПрав()<>"Администратор")
		и (
		(Склад.Магазин <> 1) и (НазваниеНабораПрав()<>"ПродавецРозница") и (НазваниеНабораПрав()<>"Администратор_магазина")
		и (Найти(НазваниеНабораПрав(),"Администратор_магазина1")=0)
		и (Найти(НазваниеНабораПрав(),"Администратор_-конфиг_и_выгрузка")=0)
		) Тогда
			Предупреждение("Вы не имеете право добавлять строки документа со статусом отгружено!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//                           изменен
Процедура ПриОткрытии()
	
	//++Валерий МЭТР: просмотор только "своих" документов
	Если (сокрЛП(глПользователь.Полномочия) = "Администратор_магазина")
		или(Найти(сокрЛП(глПользователь.Полномочия),"Администратор_магазина1") <> 0) Тогда
		Если (ПустоеЗначение(Автор) = 0) И (Автор <> глПользователь) Тогда
			Предупреждение("Вы не имеете право доступа к этому документу!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР
	
	//++Валерий МЭТР: интернет-магазин
	//Если (НазваниеНабораПрав() = "Продавец_розница") И (Выбран() = 1) Тогда
	//	Если (глПроектИнтернетМагазин(Проект) = 0) ИЛИ (Автор <> глПользователь) Тогда
	//		Предупреждение("Вы не имеете права доступа к этому документу!");
	//		СтатусВозврата(0);
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//--Валерий МЭТР: интернет-магазин
	
	//Кожемякин
	//открывать только свои документы*************************************************** 
	Если (НазваниеНабораПрав() = "Продавец_розница") И (Выбран() = 1) Тогда 
		Если Автор <> глПользователь Тогда
			Предупреждение("Вы не имеете права доступа к этому документу!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	//**********************************************************************************
	
	Если сокрЛП(глПользователь.Полномочия)<>"Бухгалтер" тогда	//нефиг остальным лазить
		Форма.Выгр.Доступность(0);
	КонецЕсли; 
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	ДопСклад	= Константа.СкладДляТранзита;	
    Парам 		= Форма.Параметр;
	
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата			= ДатаДок;
	СтараяФирма			= Фирма;
	СтарыйДоговор		= Договор;
	СтарыйКонтрагент	= Контрагент;
	СтараяВалюта		= Валюта;
	
	
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;
	
	НачВалюта		= Валюта;
	НачКурс			= Курс;
	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Проект		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.выгр			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ДопСклад		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.БезСкидки		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаСкидки	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Всего			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ОткрытьПартию	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаБезСкидки.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДСбезСкидки	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ТЗ_Остаток	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.проект		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ТЗ_Остаток	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ТЗ_Остаток	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ТЗ_Остаток	.ВыполнятьФормулуТолькоПриИзменении(1);
	
	
	глПроверкаРазрешенияРедактирования(Контекст);
	ПриВыбореПроекта();
	// поиск выписанных подчиненных документов.
	//СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	СФ="";
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
		СписокДействий.ДобавитьЗначение("Добавить из документа");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	//Если Выбран() = 0 Тогда
	//	глАктивизироватьРеквизит(Контекст);
	//	
	//	Форма.Закладки.ТекущаяСтрока(1);
	//	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	//Иначе
	//	// введенный документ открываем на второй закладке
	//	Форма.Закладки.ТекущаяСтрока(2);
	//	Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	//КонецЕсли;
	//
	//УстановкаВидимостиСуммВПодвале();

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();

	ОбновитьНадписи();
	Если сокрЛП(ИмяПользователя())="Менеджер" Тогда
	    ДолжнОтпускающего="менеджер";
		ФИООтпускающего=ПолноеИмяПользователя();
	иначеесли (сокрЛП(ИмяПользователя())="Стариков") или (сокрЛП(ИмяПользователя())="Костыренко") тогда
	    ДолжнОтпускающего="Нач.Опт.Отдела";
		ФИООтпускающего=ПолноеИмяПользователя();
	иначе
	    ДолжнОтпускающего="";
		ФИООтпускающего="";
	КонецЕсли;
	ФИОДиректора=Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок);
	ФИОГлБуха=Фирма.ЮрЛицо.ГлБухгалтер.Получить(ДатаДок);

	   //Чтобы не пересчитывала всё подряд!!!
	Форма.Номенклатура.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
 	Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Коэффициент.ВыполнятьФормулуТолькоПриИзменении(1);
 	Форма.Цена.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП.ВыполнятьФормулуТолькоПриИзменении(1);
 	//Форма.Партия.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаСкидки.ВыполнятьФормулуТолькоПриИзменении(1);
 	Форма.СуммаБезСкидки.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДСбезСкидки.ВыполнятьФормулуТолькоПриИзменении(1);

 	Форма.Мульт.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ВыданоСоСкидкой.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Выгр.ВыполнятьФормулуТолькоПриИзменении(1);

	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,11);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,3);
	ТЗ_Остаток.НоваяКолонка("Резерв","число",15,2,,3);
	НС=НомерСтроки;
    
	//Если (Склад.Магазин = 1) и (Отгружено <> 1) Тогда  //и (Склад <> Константа.ОсновнойСклад) и (Склад <> Константа.СкладДляТранзита))
	Если (Отгружено <> 1) и (Форма.ТолькоПросмотр() = 0) Тогда  
		Отгружено = 1;   
	КонецЕсли;
        
	Если (НазваниеНабораПрав()<>"Склад") и (НазваниеНабораПрав()<>"Администратор")
		и (
		(Склад.Магазин <> 1) и (НазваниеНабораПрав()<>"ПродавецРозница") и (НазваниеНабораПрав()<>"Администратор_магазина")
		и (Найти(НазваниеНабораПрав(),"Администратор_магазина1")=0)
		и (Найти(НазваниеНабораПрав(),"Администратор_-конфиг_и_выгрузка")=0)
		) Тогда
		Форма.Отгружено.Доступность(0);
	Иначе
		Форма.Отгружено.Доступность(1);
	КонецЕсли;
	 
	Если (НазваниеНабораПрав() = "Склад") Тогда
		Форма.Отгружено.Доступность(1);	
	КонецЕсли;	
	
   	Если (Отгружено = 1) 
   		и (
		(Склад.Магазин <> 1) и (НазваниеНабораПрав()<>"ПродавецРозница") и (НазваниеНабораПрав()<>"Администратор_магазина")
		и (Найти(НазваниеНабораПрав(),"Администратор_магазина1")=0)
		и (Найти(НазваниеНабораПрав(),"Администратор_-конфиг_и_выгрузка")=0)
		) Тогда 
		Форма.Номенклатура.Доступность(0);
		Форма.Единица.Доступность(0);
		Форма.Количество.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
	КонецЕсли;
	
	
	Если (сокрЛП(ИмяПользователя())="Иванова")
		или (сокрЛП(ИмяПользователя())="Кожемякин")
		или (сокрЛП(ИмяПользователя())="Филиппов") Тогда
		Форма.Количество.Доступность(1);
	Иначе	
		Форма.Количество.Доступность(0);
	КонецЕсли;	              
	
	Если (сокрЛП(ИмяПользователя())="Иванова")
	или (сокрЛП(ИмяПользователя())="Филиппов")
	или (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.НеОтражатьПродажи.Видимость(1);	
	Иначе
		Форма.НеОтражатьПродажи.Видимость(0);	
	КонецЕсли;
	
	Если (сокрЛП(ИмяПользователя())="Иванова")
	или (сокрЛП(ИмяПользователя())="Филиппов")
	или (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.СписаниеЧерезПродажу.Видимость(1);	
	Иначе
		Форма.СписаниеЧерезПродажу.Видимость(0);	
	КонецЕсли;

	Если (сокрЛП(ИмяПользователя())="ОфисМенеджер")
	или (сокрЛП(ИмяПользователя())="Филиппов")
	или (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.ЕстьДокументы.Доступность(1);	
	Иначе
		Форма.ЕстьДокументы.Доступность(0);	
	КонецЕсли;	     
	
	
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	     
	Если (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.ПровестиПереносОплаты.Видимость(1); 
		Форма.ТЗ_ОстатокПоФирмам.Видимость(1);
		Форма.кнПроверитьНаличие.Видимость(1);
		Форма.кнПрибратьПартии.Видимость(1);
	КонецЕсли;
	
	УстановкаВидимостиСуммВПодвале();
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш; 
	
	//++Валерий МЭТР: интернет-магазин
	//Если (НазваниеНабораПрав() = "Продавец_розница") Тогда
	//	Если (глПроектИнтернетМагазин(Проект) = 0) Тогда
	//		Предупреждение("Вы можете записывать только документы интернет-магазина!");
	//		СтатусВозврата(0);
	//		//Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//--Валерий МЭТР: интернет-магазин
	
	Если сокрЛП(глПользователь.Полномочия)="Менеджер" тогда
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", нет ИНН - печать официального документа запрещена!");
			Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан юр. адрес - печать официального документа запрещена!");
			Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан факт. адрес - печать официального документа запрещена!");
			Возврат;     
//	++Горлач			
//		 Разблокируем запрет записи без КПП (у ЧП его нет). Для этого комментим проверку на ввод КПП.			
//		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
//			Предупреждение("Внимание! У "+контрагент+", нет КПП - печать официального документа запрещена!");
//			Возврат;
		КонецЕсли;
	иначе
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (Проект.Экспортируемый=1) тогда
			Сообщить("Внимание! У "+контрагент+", нет ИНН!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан юр. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан факт. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
			Предупреждение("Внимание! У "+контрагент+", нет КПП!");
		КонецЕсли;
	КонецЕсли;

	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	жПокупатели = 1;               
	Если Мульт=1 тогда
		Мультик=1
	иначе Мультик=0;
	КонецЕсли;
    
	//Если ДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
	//	ДокПодч=СоздатьОбъект("Документ");
	//	ЕстьРегистрацияОтгрузки = 0;
	//	ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
	//	Пока ДокПодч.ПолучитьДокумент()=1 Цикл
	//		Если (ДокПодч.Вид() = "РегистрацияОтгрузки") (ЕстьРегистрацияОтгрузки = 0) Тогда
	//			Если ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
	//				Если (ДокПодч.Проведен() = 0) Тогда
	//					Если (ДокПодч.ПометкаУдаления() = 1) Тогда
	//						ДокПодч.СнятьПометкуУдаления();
	//					КонецЕсли;
	//					Если Отгружено = 1 Тогда
	//						Попытка
	//							ОткрытьФормуМодально(ДокПодч.ТекущийДокумент(),"ПровестиИЗакрыть",0);
	//							Сообщить("Проведен документ: "+ДокПодч);
	//							ЕстьРегистрацияОтгрузки = 1;
	//							Прервать;
	//						Исключение
	//							Сообщить(ОписаниеОшибки());
	//						КонецПопытки;
	//					Иначе
	//						Попытка
	//							ОткрытьФормуМодально(ДокПодч.ТекущийДокумент(),"СнятьСПроведенияИЗакрыть",0);
	//							Сообщить("Проведен документ: "+ДокПодч);
	//							ЕстьРегистрацияОтгрузки = 1;
	//							Прервать;
	//						Исключение
	//							Сообщить(ОписаниеОшибки());
	//						КонецПопытки;
	//					КонецЕсли;
	//				Иначе
	//					ЕстьРегистрацияОтгрузки = 1;
	//				КонецЕсли;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЦикла;	
	//	
	//	Если (ЕстьРегистрацияОтгрузки = 0) Тогда
	//		Если ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
	//			Если Отгружено = 1 Тогда
	//				ДокРегистрации = СоздатьОбъект("Документ.РегистрацияОтгрузки");
	//				ДокРегистрации.Новый();
	//				ДокРегистрации.Фирма = Фирма;
	//				ДокРегистрации.Комментарий = Комментарий;
	//				ДокРегистрации.ДокОснование = ТекущийДокумент();
	//				ДокРегистрации.Записать();
	//				Попытка
	//					ДокРегистрации.Провести();
	//					Сообщить("Проведен документ: "+ДокРегистрации);
	//				Исключение
	//					Сообщить(ОписаниеОшибки());
	//				КонецПопытки;
	//			КонецЕсли;
	//		КонецЕсли;
	//	КонецЕсли;	
	//КонецЕсли;
	Если ДокОснование.Выбран() = 1 Тогда
		Если ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал" Тогда
			АналитикаПроценты 			= ДокОснование.АналитикаПроценты;
			АналитикаСчетБезналПроценты = ДокОснование.АналитикаСчетБезналПроценты;
			
			Если ПустоеЗначение(АналитикаПроценты) = 1 Тогда
				АналитикаПроценты = глПолучитьАналитику(Контекст, "АналитикаПроценты");
			КонецЕсли;	
			Если ПустоеЗначение(АналитикаСчетБезналПроценты) = 1 Тогда
				АналитикаСчетБезналПроценты = глПолучитьАналитику(Контекст, "АналитикаСчетБезналПроценты");	
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;   
	
	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли; 
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи() 

Процедура ПриЗакрытии()
	Если Выбран() = 1 Тогда
		Если (ПометкаУдаления() = 0) и (ДатаДок > '06.08.2012') Тогда
			ДокПодч=СоздатьОбъект("Документ");
			ЕстьРегистрацияОтгрузки = 0;
			ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
			Пока ДокПодч.ПолучитьДокумент()=1 Цикл
				Если (ДокПодч.Вид() = "РегистрацияОтгрузки") и (ДокОснование.Вид() = "ЗаявкаПокупателя") и (ЕстьРегистрацияОтгрузки = 0) Тогда
					Если ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
						Если (ДокПодч.Проведен() = 0) Тогда
							Если (ДокПодч.ПометкаУдаления() = 1) Тогда
								ДокПодч.СнятьПометкуУдаления();
							КонецЕсли;
							Если Отгружено = 1 Тогда
								Попытка
									ОткрытьФорму(ДокПодч.ТекущийДокумент(),"ПровестиИЗакрыть",0);
									Сообщить("Проведен документ: "+ДокПодч);
									ЕстьРегистрацияОтгрузки = 1;
									Прервать;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							Иначе
								Попытка
									//ОткрытьФормуМодально(ДокПодч.ТекущийДокумент(),"СнятьСПроведенияИЗакрыть",0); 
									ДокПодч.СделатьНеПроведенным();
									Сообщить("Снят с проведения документ: "+ДокПодч);
									ЕстьРегистрацияОтгрузки = 1;
									Прервать;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;
						Иначе
							Если Отгружено = 1 Тогда
								Попытка
									ОткрытьФорму(ДокПодч.ТекущийДокумент(),"ПровестиИЗакрыть",0);
									Сообщить("Проведен документ: "+ДокПодч);
									ЕстьРегистрацияОтгрузки = 1;
									Прервать;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							Иначе
								Попытка
									//ОткрытьФормуМодально(ДокПодч.ТекущийДокумент(),"СнятьСПроведенияИЗакрыть",0); 
									ДокПодч.СделатьНеПроведенным();
									Сообщить("Снят с проведения документ: "+ДокПодч);
									ЕстьРегистрацияОтгрузки = 1;
									Прервать;
								Исключение
									Сообщить(ОписаниеОшибки());
								КонецПопытки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			Если (ДокОснование.Вид() = "ЗаявкаПокупателя") и (ЕстьРегистрацияОтгрузки = 0) Тогда 
				Если ДокОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
					Если Отгружено = 1 Тогда
						ДокРегистрации = СоздатьОбъект("Документ.РегистрацияОтгрузки");
						ДокРегистрации.Новый();
						ДокРегистрации.Фирма 		= Фирма;
						ДокРегистрации.Комментарий 	= Комментарий;
						ДокРегистрации.ДокОснование = ТекущийДокумент();
						ДокРегистрации.Записать();
						Попытка
							ДокРегистрации.Провести();
							Сообщить("Проведен документ: "+ДокРегистрации);
						Исключение
							Сообщить(ОписаниеОшибки());
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()
Процедура ПоКнопкеМультик()
	Перем КонтекстДокумента;
	  Если Мульт=1 тогда
	  	Мультик=1;
	  иначе 
	  	Мультик=0;
	  конецЕсли;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	глПересчитатьСкидки(Контекст);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();  
	Форма.Обновить(0);
	
КонецПроцедуры	//ПоКнопкеМультик()     

Процедура ОбработкаВыданоСоСкидкой()	//Ругается, если СФ уже оформлена и она официальная
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	если (пустоезначение(СФ)=0) и (выгр=1) тогда
		предупреждение("Внимание! Не забудьте переоформить СФ!!!",10);
		сообщить("Т.к. вы изменили сумму получаемого товара (со скидкой/без скидки)");
		сообщить("и данная накладная является официальной, вам необходимо выписать");
		сообщить("новые печатные формы документов для клиента!");
	КонецЕсли;
	
Конецпроцедуры
Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
	    возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= Номенклатура;
	ТекД= ДокОснование;
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
КонецПроцедуры
	
////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ
ВидСчетаФактуры		= "СчетФактураВыданный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-12";
//ТаблицаПечФорм.Кнопка       = "ТОРГ-12";

ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("РезервыТМЦ"          , РезервыТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);
новый=0;

ТЗ			= СоздатьОбъект("ТаблицаЗначений");
ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		= СоздатьОбъект("Регистр.РезервыТМЦ2");
Склад_темп	= СоздатьОбъект("Справочник.Склады");
СтараяНоменклатураФирм = "";