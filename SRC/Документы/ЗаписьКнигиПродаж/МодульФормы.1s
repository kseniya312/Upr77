////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента;
    
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//               
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(глРубли)+")");
	Форма.РамкаБезНДС	.Заголовок("Без НДС ("+ТекстВалюты(глРубли)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(глРубли)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Если ДокОснование.СФНаАванс = 1 Тогда
		Заголовок = Заголовок + " (сторно аванса)";
	КонецЕсли;
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание.";
	КонецЕсли;
	
	Если ДокОснование.Вид() <> "СчетФактураВыданный" Тогда
		Возврат "Неверный вид документа - основания!";
		
	КонецЕсли;     
	
	Если ДокОснование.АвтоКнигаПродаж = 1 Тогда
		Возврат "По выбранному счету - фактуре установлен
		| автоматический режим формирования книги продаж!";
	КонецЕсли;
	
	// заполнять будем на основании основания СФ
	Если ДокОснование.ДокОснование.Выбран()=1 Тогда
		ДокОсн	= ДокОснование.ДокОснование; // СФ выписана на основании
	Иначе                                   
		ДокОсн	= ДокОснование; // "свободная СФ", без документа - основания
	КонецЕсли;
	        
	ОбщРег = СоздатьОбъект("Регистры");
	РегКнигаПродаж = ОбщРег.КнигаПродаж;
	
	РегКнигаПродаж.УстановитьЗначениеФильтра("КредДокумент", ДокОсн, 1);

	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегКнигаПродаж.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегКнигаПродаж.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки(); // очистим наш документ
	                                      
	ТабЗнач = СоздатьОбъект("ТаблицаЗначений");
	РегКнигаПродаж.ВыгрузитьИтоги(ТабЗнач);
	ТабЗнач.Свернуть("СтавкаНДС","СуммаРуб, СуммаНДС, СуммаНП");
	            
	ИтогСуммаРуб = ТабЗнач.Итог("СуммаРуб");
	СуммаОплаты  = ИтогСуммаРуб;                    
	Свернут = 0;
	ДокОсн = ДокОснование.ДокОснование;
	Если (ДокОсн.Выбран() = 1) и (глЕстьРеквизитШапки("ФлагСвертки", ДокОсн.Вид()) = 1) Тогда
	    Свернут = ДокОсн.ФлагСвертки;  
	Иначе
		Свернут = ДокОснование.ФлагСвертки;
	КонецЕсли;
	Если (СуммаОплаты = 0) и (Свернут = 0) Тогда
		
		// Нечего отражать в книге. Укажем  две наиболее вероятные причины
		Возврат ""+глПредставлениеДокумента(ДокОснование)+" полностью погашен!
		           |Возможно: 
				   |1) счет-фактура уже учтен при проведении документа ""Формирование книги продаж"";
				   |2) счет-фактура сопровождает реализацию только комиссионных товаров.";
	ИначеЕсли ВвестиЧисло(СуммаОплаты,"Укажите сумму записи",15,2,60)<> 1 Тогда
		Возврат "";
	КонецЕсли;                  
	
	Если ИтогСуммаРуб *( ИтогСуммаРуб - СуммаОплаты) < 0  Тогда // (суммы могут быть отрицательными в случае СФ на аванс)
		Возврат ("Указанная сумма превышает непогашенный остаток по СФ");
	КонецЕсли;
	КоэффОплаты = ?(ИтогСуммаРуб = 0,0,СуммаОплаты / ИтогСуммаРуб);
        
	ПогашСумма = 0;
	ТабЗнач.ВыбратьСтроки();
	Пока ТабЗнач.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Сумма 		= ТабЗнач.СуммаРуб * КоэффОплаты;
		СуммаНП 	= ТабЗнач.СуммаНП  * КоэффОплаты;
		СуммаНДС 	= ТабЗнач.СуммаНДС * КоэффОплаты;
		СтавкаНДС   = ТабЗнач.СтавкаНДС;
		
		ПогашСумма  = ПогашСумма + Сумма;
		Если ТабЗнач.НомерСтроки = ТабЗнач.КоличествоСтрок() Тогда
			// последняя строка  - надо скомпенсировать накопленную разницу
			Сумма = Сумма + (СуммаОплаты - ПогашСумма);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ""; // нет ошибок
	
КонецФункции // ЗаполнениеПоДокументуОснованию()   
                                                                  
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Заполнить остатками по документу - основанию?" +
		            РазделительСтрок +
					"(перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да"  Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки();
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Реквизиты табличной части.
//
// Описание:
//  Производит пересчеты при изменении реквизитов табличной части.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)
	
	Если (ИмяРеквизита = "Сумма") или (ИмяРеквизита = "СтавкаНДС") Тогда
		СуммаНДС 	= глВыделяемыйНДС(СтавкаНДС)*(Сумма - СуммаНП);
		
	ИначеЕсли ИмяРеквизита = "СуммаНП" Тогда           
		СуммаНДС 	= глВыделяемыйНДС(СтавкаНДС)*(Сумма - СуммаНП);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()    

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                           
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;            

	Если (ДокументОснование.СФНаАванс = 1) и (ДокументОснование.ДатаДок > глДатаИзмененияПорядкаВычетаНДССАвансов) Тогда
		Предупреждение("Нельзя вводить записи книги продаж на основании счетов-фактур на аванс, 
		|введенных после даты вступления в силу постановления Правительства РФ № 575.");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;		
	                         
	глЗаполнитьШапкуНаОсн(Контекст, ДокументОснование);   
	                                                       
	ДатаОплаты = Формат(РабочаяДата(),"ДДДММГГГГ");
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат,60);
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // ВводНаОсновании()
                    
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового()
	
	Предупреждение("Документ вводится только на основании документа ""Счет-фактура выданный""", 60);
	СтатусВозврата(0);
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	//++Валерий МЭТР: просмотор только "своих" документов
	Если (сокрЛП(глПользователь.Полномочия) = "Администратор_магазина")или(сокрЛП(глПользователь.Полномочия) = "Администратор_магазина1") Тогда
		Если (ПустоеЗначение(Автор) = 0) И (Автор <> глПользователь) Тогда
			Предупреждение("Вы не имеете правдо доступа к этому документу!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР
	                       
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	НачальнаяДатаДокумента 	= ДатаДок;  
	
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
       
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
	КонецЕсли;
                   
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
                     
	ОбновитьНадписи();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "ДатаОплаты" Тогда
		ВыбранноеЗначение = ?(ПустоеЗначение(Дата(СокрЛП(ДатаОплаты))) = 1, ДатаДок, Дата(СокрЛП(ДатаОплаты)));
		Если ВвестиЗначение(ВыбранноеЗначение, "Укажите дату оплаты по счету-фактуре", "Дата") = 1 Тогда
			ДатаОплаты = ?(ПустоеЗначение(ВыбранноеЗначение)=1, "", Формат(ВыбранноеЗначение, "Д"));
		КонецЕсли;   
	
	ИначеЕсли ИдентЭлемДиалога = "ДополнительнаяИнформация" Тогда
		СписЗнач = СоздатьОбъект("СписокЗначений");
		СписЗнач.ДобавитьЗначение("частичная оплата");
		СписЗнач.ДобавитьЗначение("авансовый платеж");
		СписЗнач.ВыбратьЗначение(ДополнительнаяИнформация,,,,2);
	
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()    
                             
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если (ИдентЭлемДиалога = "ДокОснование") и (ПустоеЗначение(ВыбЗнач) = 0) Тогда
		Фирма = ВыбЗнач.Фирма;          
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат,60);
			ФлагСтандОбр = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()      

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);                
КонецПроцедуры // ПриЗаписи()