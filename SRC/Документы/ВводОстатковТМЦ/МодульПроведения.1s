////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УстановитьЗначениеАтрибута(РегПартии, ИДОбъекта, Значение)
//
// Параметры:
//  РегПартии   - регистр, регистр у которго устанвливает значение атрибута.
//  ИмяАтрибута - строка – идентификатор атрибута
//  Значение    - неопр. – значение атрибута
//
// Описание:
//  Устанавливает значение атрибута регистра.
//
Процедура УстановитьЗначениеАтрибута(РегПартии, ИмяАтрибута, Значение)
	
	Если (Метаданные.Регистр(РегПартии.Вид()).Измерение(ИмяАтрибута).Выбран() = 1) ИЛИ 
	     (Метаданные.Регистр(РегПартии.Вид()).Ресурс   (ИмяАтрибута).Выбран() = 1) ИЛИ 
	     (Метаданные.Регистр(РегПартии.Вид()).Реквизит (ИмяАтрибута).Выбран() = 1) Тогда
		РегПартии.УстановитьАтрибут(ИмяАтрибута, Значение);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеАтрибута()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;

	СпрПартии        = СоздатьОбъект("Справочник.Партии");
	УчПолитика       = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок);
	КонтрагентПартии = Поставщик;
	ДоговорПартии    = ДоговорПоставщика;
	
	// определим регистр партий по которому вводятся остатки
	Если      ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
		РегПартии  = Регистр.ПартииОтданные;
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
		РегПартии  = Регистр.РеализованныйТовар;
		КонтрагентПартии = Контрагент;
		ДоговорПартии    = Договор;
	Иначе  //Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ Тогда
		РегПартии  = Регистр.ПартииНаличие;
		РегОстатки = Регистр.ОстаткиТМЦ;
		РегОстатки.Фирма = Фирма;
		РегОстатки.Склад = Склад;
	КонецЕсли;
	
	// установим общие, для всех движений, значения измерений и реквизитов регистра партии
	УстановитьЗначениеАтрибута(РегПартии, "Фирма"           , Фирма);
	УстановитьЗначениеАтрибута(РегПартии, "Партия"          , "");
	УстановитьЗначениеАтрибута(РегПартии, "Договор"         , Договор);
	УстановитьЗначениеАтрибута(РегПартии, "МОЛ"             , Склад.МОЛ);
	УстановитьЗначениеАтрибута(РегПартии, "КодОперации"     , Перечисление.КодыОпераций.ВводОстатков);
	
	Если ФлагСвертки = 0 Тогда

		// если документ вводится не обработкой "СверткаБазы"

		Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
	 	 или (ВидСтатус = глСП.Т_Принятый) Тогда
			УстановитьЗначениеАтрибута(РегПартии, "ДатаПартии" , ДатаДок);
		Иначе     
			УстановитьЗначениеАтрибута(РегПартии, "ДатаПартии" , Дата(0));
		КонецЕсли;
	КонецЕсли;
	
	ВыбратьСтроки();
	Пока  ПолучитьСтроку()=1 Цикл
		
		КоличествоБазовое = Количество*Коэффициент;
		Если ФлагСвертки = 0 Тогда

			// если документ вводится не обработкой "СверткаБазы"

			Если глВсеРеквизитыДокументаЗаполнены(Контекст,"Номенклатура")=0 Тогда
				Возврат;
			КонецЕсли; 
		
			// Определим статус партии
			Если ВидСтатус = глСП.Т_Принятый Тогда
				СтатусПартии = ВидСтатус;
			Иначе
				СтатусПартии = глПолучитьСтатусПартииПрихода(ВидСтатус, Номенклатура, "", Склад)
			КонецЕсли;
			
			// установим остальные значения измерений и ресурсов регистра партии
			Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
			 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
			 или (ВидСтатус = глСП.Т_Принятый) Тогда
				Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
					Цена = ?(КоличествоБазовое=0, 0, Окр(ПродСтоимость / КоличествоБазовое,2,1));
				Иначе
					Цена = ?(КоличествоБазовое=0, 0, Окр(СуммаРуб / КоличествоБазовое,2,1));
				КонецЕсли;
				Валюта = ?(ДоговорПартии.Выбран() = 0, глРубли, ДоговорПартии.ВалютаВзаиморасчетов);
				Цена   = ?(глРубли = Валюта, Цена, глПересчет(Цена, глРубли, глКурсДляВалюты(глРубли, ДатаДок), Валюта, ДатаДок));
				глЗаполнитьПартию(СпрПартии, Партия, КонтрагентПартии, ДоговорПартии, ТекущийДокумент(), Цена);
				УстановитьЗначениеАтрибута(РегПартии, "Партия", Партия);
			КонецЕсли;
			УстановитьЗначениеАтрибута(РегПартии, "СтатусПартии" , СтатусПартии);
		Иначе
			УстановитьЗначениеАтрибута(РегПартии, "СтатусПартии" , Статус);
			УстановитьЗначениеАтрибута(РегПартии, "МОЛ" , МОЛ);
			УстановитьЗначениеАтрибута(РегПартии, "ДатаПартии" , ДатаПартии);
			Если ((РегПартии.Вид() = "ПартииОтданные") или (РегПартии.Вид() = "РеализованныйТовар")) и (Договор.Выбран() = 0) Тогда
				УстановитьЗначениеАтрибута(РегПартии, "Договор"   , ДоговорПокПост);
			КонецЕсли;
			Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
			 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
			 или (ВидСтатус = глСП.Т_Принятый) Тогда
				УстановитьЗначениеАтрибута(РегПартии, "Партия"   	 , Партия);
			КонецЕсли;
		КонецЕсли;

		РегПартии.ПривязыватьСтроку(НомерСтроки);
		УстановитьЗначениеАтрибута(РегПартии, "Номенклатура" 	, Номенклатура);
		УстановитьЗначениеАтрибута(РегПартии, "Количество"   	, КоличествоБазовое);
		УстановитьЗначениеАтрибута(РегПартии, "СуммаУпр"     	, СуммаУпр);
		УстановитьЗначениеАтрибута(РегПартии, "СуммаРуб"     	, СуммаРуб);
		УстановитьЗначениеАтрибута(РегПартии, "СуммаБезНДС"  	, Сумма);
		УстановитьЗначениеАтрибута(РегПартии, "ДокументПередачи", ?(ДокПродажиПередачи.Выбран()=1,ДокПродажиПередачи,ТекущийДокумент()));
		УстановитьЗначениеАтрибута(РегПартии, "ДокПродажи"      , ?(ДокПродажиПередачи.Выбран()=1,ДокПродажиПередачи,ТекущийДокумент()));
		Если РегПартии.Вид() = "ПартииНаличие" Тогда
			УстановитьЗначениеАтрибута(РегПартии, "ПродСтоимость"   , Количество * ПродЦена);
		Иначе
			УстановитьЗначениеАтрибута(РегПартии, "ПродСтоимость"   , ПродСтоимость);
		КонецЕсли;
		УстановитьЗначениеАтрибута(РегПартии, "ЦенаПрод"      	, ПродЦена/Коэффициент);
		
		Если (ВидОперации <> Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦБезПартий) Тогда

			// Вводим остатки только по регистру "ОстаткиТМЦ" - в регитр "ПартииНаличие" ничего не заносим

			РегПартии.ДвижениеПриходВыполнить();
			
		КонецЕсли;
		
		Если (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ)
		 или (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦБезПартий) Тогда
			
			РегОстатки.ПривязыватьСтроку(НомерСтроки);
			РегОстатки.Номенклатура = Номенклатура;

			Если ФлагСвертки = 0 Тогда
				РегОстатки.ЦенаПрод = ?(Склад.РозничныйСклад = 1, ПродЦена/Коэффициент, 0);
			Иначе
				РегОстатки.ЦенаПрод = ПродЦена/Коэффициент;
			КонецЕсли;
			
			РегОстатки.Количество   = КоличествоБазовое;
			РегОстатки.ДвижениеПриходВыполнить();
			
		КонецЕсли;
		
	КонецЦикла;   
	
	ОчиститьДвижения("Справочник"); //Warning

	ВыбратьСтроки();
	пока ПолучитьСтроку()=1 цикл
		если СуммаУпр<>0 Тогда
			Если Количество<>0 Тогда
				УстановитьРеквизитСправочника(Номенклатура, "ПоследняяЦенаПрихода", окр(СуммаУпр/Количество,2), ДатаДок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		                               
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)   
	
	// Проверка заполненности обязательных реквизитов.
	Если ФлагСвертки = 0 Тогда
		СпОбязРеквизитов = "Фирма,ВидСтатус";
	Иначе
		СпОбязРеквизитов = "Фирма";
	КонецЕсли;
	
	Если      (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ)
	   и      (ФлагСвертки = 0) Тогда
		СпОбязРеквизитов = СпОбязРеквизитов + ",Контрагент,Договор";
	ИначеЕсли (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров)
	        и (ФлагСвертки = 0)Тогда
		СпОбязРеквизитов = СпОбязРеквизитов + ",Контрагент,Договор";
	ИначеЕсли (ФлагСвертки = 0) Тогда
		СпОбязРеквизитов = СпОбязРеквизитов + ",Склад";
	КонецЕсли;

	Если (ВидОперации <> Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров) и (ВидСтатус = глСП.Т_Принятый) Тогда
		СпОбязРеквизитов = СпОбязРеквизитов + ",Поставщик,ДоговорПоставщика";
	КонецЕсли;
	
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст, СпОбязРеквизитов)=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);
	
КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
