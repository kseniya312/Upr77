//******************************************************************************
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
Перем КолИтого;

// Для контроля необходимости пересчетов
Перем СтараяФирма, СтарыйКонтрагент, СтарыйПоставщик;

Перем СпрПартии; // для обработки партий документа

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
Процедура УдалитьВсеПартии() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//*****************************************************************************
// ЗаголовокФормы()
//
// Возвращаемое значение: 
//	Строка - Название документа
//
//Описание:
// Формирует название документа и заголовок формы диалога
Функция ЗаголовокФормы() 
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название  = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;

	Если ФлагСвертки = 1  Тогда
		Заголовок = Заголовок + " (создан при свертке базы)";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);               

	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//	Нет
//
// Описание:
//  Управляет видимостью реквизитов в зависимости от кода операции.
//
Процедура УправлениеВидимостью()
	                                 
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
		
		Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
			Форма.ИспользоватьСлой("Склад", 0);
			Форма.ИспользоватьСлой("РамкаПоставщик", 1);
			Если ФлагСвертки = 0 Тогда
				Форма.ИспользоватьСлой("Поставщик, Контрагент", 1);
			Иначе
				Форма.ИспользоватьСлой("НадписьКонтрагент", 1);
				Форма.ИспользоватьСлой("НадписьПоставщик", 1);
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
			Форма.ИспользоватьСлой("Склад, Поставщик, ПодпПоставщикаОбязательная, ПодпПоставщикаОбычная", 0);
			Если ФлагСвертки = 0 Тогда
				Форма.ИспользоватьСлой("Контрагент", 1);
			Иначе
				Форма.ИспользоватьСлой("НадписьКонтрагент", 1);
			КонецЕсли;
		Иначе // Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ Тогда
			Форма.ИспользоватьСлой("Контрагент", 0);
			Форма.ИспользоватьСлой("Поставщик, Склад", 1);
		КонецЕсли;
		
		Если (ВидОперации <> Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров) И (ФлагСвертки = 0) Тогда
			Если ВидСтатус = глСП.Т_Принятый Тогда
				Форма.ИспользоватьСлой("ПодпПоставщикаОбязательная", 1);
				Форма.ИспользоватьСлой("ПодпПоставщикаОбычная",      0);
			Иначе
				Форма.ИспользоватьСлой("ПодпПоставщикаОбязательная", 0);
				Форма.ИспользоватьСлой("ПодпПоставщикаОбычная",      1);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ФлагСвертки = 1 Тогда
			Форма.ИспользоватьСлой("ДопТаблЧасть",      0);
			
			Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
				Форма.СтавкаНДС.Видимость(0);
				Форма.СтавкаНП.Видимость(0);
				Форма.ПродЦена.Видимость(0);
				Форма.ПродСтоимость.Видимость(0);
				
				// Партия
				Форма.ГТД.Видимость(0);
				Форма.СтранаПроисхождения.Видимость(0);
				Форма.Свойство.Видимость(0);
				
				Форма.ДатаПартии.Видимость(0);
				Форма.МОЛ.Видимость(0);
				
			ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
				Форма.Сумма.Видимость(0);
				Форма.СтавкаНДС.Видимость(0);
				Форма.СтавкаНП.Видимость(0);
				Форма.СуммаРуб.Видимость(0);
				Форма.СуммаУпр.Видимость(0);
				Форма.ПродЦена.Видимость(0);
				
				// Партия
				Форма.ГТД.Видимость(0);
				Форма.СтранаПроисхождения.Видимость(0);
				Форма.Свойство.Видимость(0);
				
				Форма.ДатаПартии.Видимость(0);
				Форма.Статус.Видимость(0);
				Форма.МОЛ.Видимость(0);
				
			ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦПартии Тогда
				Форма.СтавкаНДС.Видимость(0);
				Форма.СтавкаНП.Видимость(0);
				Форма.ПродЦена.Видимость(0);
				Форма.ПродСтоимость.Видимость(0);
				
				// Партия
				Форма.ГТД.Видимость(0);
				Форма.СтранаПроисхождения.Видимость(0);
				Форма.Свойство.Видимость(0);
				
				Форма.ДокПродажиПередачи.Видимость(0);
				Форма.ДоговорПокПост.Видимость(0);
				
			ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦБезПартий Тогда
				Форма.Сумма.Видимость(0);
				Форма.СтавкаНДС.Видимость(0);
				Форма.СтавкаНП.Видимость(0);
				Форма.СуммаРуб.Видимость(0);
				Форма.СуммаУпр.Видимость(0);
				Форма.ПродЦена.Видимость(Склад.РозничныйСклад);
				Форма.ПродСтоимость.Видимость(0);
				
				// Партия
				Форма.ГТД.Видимость(0);
				Форма.СтранаПроисхождения.Видимость(0);
				Форма.Свойство.Видимость(0);
				
				Форма.ДокПродажиПередачи.Видимость(0);
				Форма.ДоговорПокПост.Видимость(0);
				Форма.ДатаПартии.Видимость(0);
				Форма.Статус.Видимость(0);
				Форма.МОЛ.Видимость(0);
				
			КонецЕсли;
		Иначе // ФлагСвертки = 0
			
			Форма.ИспользоватьСлой("ДопТаблЧасть",      1);
			
			ВидСумм          = 1;
			ВидПродЦена      = 0;
			ВидПродСтоимость = 0;
			
			Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
				ВидПродСтоимость = 1;
			ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
				ВидСумм          = 0;
				ВидПродСтоимость = 1;
			Иначе // Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ Тогда
				ВидПродЦена      = Склад.РозничныйСклад;
			КонецЕсли;
			
			Форма.Сумма        .Видимость(ВидСумм);
			Форма.СуммаРуб     .Видимость(ВидСумм);
			Форма.СуммаУпр     .Видимость(ВидСумм);
			Форма.СтавкаНДС    .Видимость(ВидСумм);
			Форма.СтавкаНП     .Видимость(ВидСумм);
			Форма.ПродЦена     .Видимость(ВидПродЦена);
			Форма.ПродСтоимость.Видимость(ВидПродСтоимость);
			
			Форма.СуммаУпр    .Доступность(?(глРубли = глДоллары, 0, ВидСумм));
			
			Форма.ДокПродажиПередачи.Видимость(0);
			Форма.ДоговорПокПост.Видимость(0);
			Форма.ДатаПартии.Видимость(0);
			Форма.Статус.Видимость(0);
			Форма.МОЛ.Видимость(0);
		КонецЕсли; // ФлагСвертки = 1
	КонецЕсли;
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
		Форма.ИспользоватьСлой("Итоги", 0);
		Форма.ВидСтатус.Доступность(0);
	Иначе
		Форма.ИспользоватьСлой("Итоги", 1);
		Форма.ВидСтатус.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры  // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы.Заголовок(глСтрокаФирмы		(Контекст));
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
		Форма.РамкаПолучателя    .Заголовок("Комиссионер");
		Форма.ТекстПолучателя    .Заголовок(глСтрокаКонтрагента (Контекст));
		Форма.ТекстДоговора      .Заголовок(глСтрокаДоговора    (Контекст));
		Форма.ПодпТекстПолучателя.Заголовок("Комиссионер:");
		Форма.ПодпТекстДоговора  .Заголовок("Договор:");
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
		Форма.РамкаПолучателя    .Заголовок("Комитент");
		Форма.ТекстПолучателя    .Заголовок(глСтрокаКонтрагента (Контекст));
		Форма.ТекстДоговора      .Заголовок(глСтрокаДоговора    (Контекст));
		Форма.ПодпТекстПолучателя.Заголовок("Комитент:");
		Форма.ПодпТекстДоговора  .Заголовок("Договор:");
	Иначе // Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ Тогда
		Форма.РамкаПолучателя    .Заголовок("Склад");
		Форма.ТекстПолучателя    .Заголовок(глСтрокаСклада      (Склад));
		Форма.ПодпТекстПолучателя.Заголовок("Склад:");
		Форма.ТекстДоговора      .Заголовок("");
		Форма.ПодпТекстДоговора  .Заголовок("");
	КонецЕсли;
	
	// колонки табличной части
	Форма.СуммаРуб     .Заголовок("Всего ("    +ТекстВалюты(глРубли)+")");
	Форма.СуммаУпр     .Заголовок("Всего ("    +ТекстВалюты(глДоллары)+")");
	Форма.Сумма        .Заголовок("Сумма ("   +ТекстВалюты(глРубли)+")");
	Форма.ПродЦена     .Заголовок("Прод. цена ("+ТекстВалюты(глРубли)+")");
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
		Форма.ПродСтоимость.Заголовок("Стоим. ("+ТекстВалюты(глРубли)+")");
	Иначе
		Форма.ПродСтоимость.Заголовок("Стоим. ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	КонецЕсли;

	// итоги по табличной части
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
		Форма.РамкаИтого.Заголовок("Всего (" +ТекстВалюты(глРубли)+")");
		КолИтого = "ПродСтоимость";
	Иначе
		Форма.РамкаИтого.Заголовок("Всего (" +ТекстВалюты(глДоллары)+")");
		КолИтого = "СуммаУпр";
	КонецЕсли;
	
	Форма.РамкаСуммаРуб.Заголовок("Всего (" +ТекстВалюты(глРубли)+")");
	Форма.РамкаСумма   .Заголовок("Сумма ("+ТекстВалюты(глРубли)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()    

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = глСоздатьСписокЗначПеречисления("ВидыОперацийПоВводуОстатков", 
					"ОстаткиТМЦ,ОстаткиПереданныхТМЦ,ОстаткиРеализованныхТоваров");
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		Если ВидОперации <> ВремВидОперации Тогда
			Ответ = "Да";
			Если ВыбратьСтроки() = 1 Тогда
				Ответ = Вопрос("Строки документа будут удалены!
				               |Продолжить?", "Да+Нет", 60);
			КонецЕсли;                   
			Если Ответ = "Да" Тогда
				УдалитьВсеПартии();
				УдалитьСтроки();
				
				ВидОперации	= ВремВидОперации;
				
				Если (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров) И 
				     (ВидСтатус <> глСП.Т_Принятый) Тогда
					НазначитьТип("ВидСтатус", "Перечисление.СтатусыПартии");
					ВидСтатус = глСП.Т_Принятый;
				ИначеЕсли (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ) И 
					      (ВидСтатус = Перечисление.ВидыТМЦ.Материал) Тогда
					НазначитьТип("ВидСтатус", "Перечисление.ВидыТМЦ");
					ВидСтатус = ПолучитьПустоеЗначение("Перечисление.ВидыТМЦ");
				КонецЕсли;
				
				ОбновитьНадписи();
			КонецЕсли;
		КонецЕсли;                   
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(1,"НеПодбиратьУслуги");
	//Параметры.ДобавитьЗначение(глРубли,         "Валюта");
	
	//Параметры.ДобавитьЗначение(глКурсДляВалюты(глРубли, ДатаДок), "Курс");
	//Параметры.ДобавитьЗначение(СпрТипыЦен.ТекущийЭлемент(),       "ТипЦен");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст ,Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// ПересчетСумм()
//
// Параметры:
//  Нет
//
// Вызывается из формул элементов диалога:
//  "Количество", "Сумма", "СуммаРуб", "СтавкаНДС", "СтавкаНП".
//
// Описание:
//  Пересчитывает значения реквизитов "СуммаРуб", "СуммаУпр", "ПродЦена" .
//
Процедура ПересчетСумм()
	
	Реквизит = Форма.АктивныйЭлемент();
	
	Если Реквизит = "Единица" Тогда	

		// заполним коэффициент в документе из единицы
		КоэффициентСтарый = Коэффициент;
		Коэффициент = Единица.Коэффициент;      
		
		// пересчитаем сумму и продажную цену в соответствии с новым коэффициентом
		Сумма =  ?(КоэффициентСтарый = 0, 0, Сумма * Коэффициент/КоэффициентСтарый); 
		ПродЦена = ?(КоэффициентСтарый = 0, 0, ПродЦена * Коэффициент/КоэффициентСтарый);
		
	ИначеЕсли (Реквизит = "Сумма") ИЛИ (Реквизит = "СтавкаНДС") ИЛИ (Реквизит = "СтавкаНП")  Тогда
		СтНДС = глНачисляемыйНДС(СтавкаНДС);
		СтНП  = СтавкаНП.Ставка / 100;
		СуммаРуб = Сумма * (СтНДС + 1) * (СтНП + 1) / ((СтНДС + 1) * СтНП + 1);
		СуммаУпр = ?(глРубли = глДоллары, СуммаРуб, глПересчет(СуммаРуб, глРубли, глКурсДляВалюты(глРубли, ДатаДок), глДоллары, ДатаДок));
		
	ИначеЕсли Реквизит = "СуммаРуб" Тогда
		СуммаУпр	= ?(глРубли = глДоллары, СуммаРуб, глПересчет(СуммаРуб, глРубли, глКурсДляВалюты(глРубли, ДатаДок), глДоллары, ДатаДок));
		
	КонецЕсли;
	
	Если ((Реквизит = "СуммаРуб") ИЛИ (Реквизит = "Количество")) И
	     (Склад.РозничныйСклад = 1) Тогда
		ПродЦена = ?(Количество = 0, 0, СуммаРуб / Количество);
	КонецЕсли;
	
КонецПроцедуры // ПересчетСумм()

//******************************************************************************
// СоздатьПартию(ПартияИсточник = 0) 
//
// Параметры: 
//  ПартияИсточник - элемент справочника партий, необязательный параметр,
//                   если задан, то ГТД, Страна и свойство копируются из него.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Если для текущего ТМЦ в справочнике Номенклатура задана Страна и ГТД по умолчанию, то 
//  автоматически создается и записывается соответствующий элемент справочника партий,
//  при копировании строки параметры партии наследуются.
//
Процедура СоздатьПартию(ПартияИсточник = 0)
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
	    Возврат;
	КонецЕсли;  
	Если ПустоеЗначение(Партия) = 0 Тогда
		// если партия уже записана - не трогаем ее!
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(ПартияИсточник) = 0 Тогда
		Если (ПартияИсточник.ГТД.Выбран() = 1) 
		или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
		или  (ПартияИсточник.Свойство.Выбран() = 1) 
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = ПартияИсточник.ГТД;
			СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
			СпрПартии.Свойство            = ПартияИсточник.Свойство;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	Иначе    
		Если (Номенклатура.НомерГТД.Выбран() = 1) 
		или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = Номенклатура.НомерГТД;
			СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьПартию()

//******************************************************************************
// УдалитьПартию()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие выбранную партию в текущей строке документа.
//
Процедура УдалитьПартию()

	Если Партия.Выбран() = 1 Тогда
		Если СпрПартии.НайтиЭлемент(Партия) = 1 Тогда
			СпрПартии.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПартию()

//******************************************************************************
// УдалитьВсеПартии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие все выбранные партии во всех строках документа.
//
Процедура УдалитьВсеПартии()
	
    ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдалитьПартию();
	КонецЦикла;                     
	
КонецПроцедуры // УдалитьВсеПартии()

//******************************************************************************
// ЗаполнитьГТД()
//
// Параметры: 
//  Нет
//
// Описание:
//  Если в справочнике Номенклатура для подобранной позиции указан номер ГТД
//  и (или) страна происхождения, то переносим эти значения в документ, создавая партии.
//
Процедура ЗаполнитьГТД()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    СоздатьПартию(СпрПартии);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьГТД()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииВидаТМЦ()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  Вид ТМЦ
//
// Описание:
//  Здесь задаются необходимые действия при изменении вида ТМЦ
//
Процедура ПриИзмененииВидаТМЦ()
	УправлениеВидимостью();
КонецПроцедуры // ПриИзмененииВидаТМЦ()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если Склад.Выбран() = 1 Тогда
		// для розничного склада нужно указывать розничную цену
		//Форма.ПродЦена.Видимость(Склад.РозничныйСклад );
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	
	//Единица 	= Номенклатура.БазоваяЕдиница;
	//Коэффициент = Единица.Коэффициент;
	//СтавкаНДС 	= Номенклатура.СтавкаНДС;
	//
	СтараяПартия = Партия; 
	Если ПустоеЗначение(Партия) = 0 Тогда
		Если Партия.Владелец <>  Номенклатура Тогда
			УдалитьПартию(); 
			Партия = "";
		КонецЕсли;
	КонецЕсли;
	
    СоздатьПартию(СтараяПартия);

	Если ПустоеЗначение(Номенклатура) = 1 Тогда
			
		// Очистили Номенклатуру
		Единица 		= 0;
		Коэффициент 	= 0;                  
		Возврат;
	КонецЕсли;

	// Определим, поменяли ли Номенклатуру?
	НоваяНоменклатура = 0;
	Если ПустоеЗначение(Единица) = 1 Тогда
		НоваяНоменклатура = 1;
	ИначеЕсли Номенклатура <> Единица.Владелец Тогда
		НоваяНоменклатура = 1;
	КонецЕсли;
	
	Если НоваяНоменклатура = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем единицу
	Единица 		= Номенклатура.ОсновнаяЕдиница;
	Коэффициент 	= Единица.Коэффициент;    
	
       // Заполним ставки налогов 
	СтавкаНДС 	= Номенклатура.СтавкаНДС;		
    СтавкаНП 	= Номенклатура.СтавкаНП;
	          
КонецПроцедуры // ПриИзмененииНоменклатуры()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		СтарыйКонтрагент = Контрагент;
		Договор          = Контрагент.ОсновнойДоговор;; 
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   

//*****************************************************************************
// ПриИзмененииПоставщика()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе поставщика
//
Процедура ПриИзмененииПоставщика()
	
	Если СтарыйПоставщик <> Поставщик Тогда
		СтарыйПоставщик   = Поставщик;
		ДоговорПоставщика = Поставщик.ОсновнойДоговор;
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииПоставщика()   

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(Скопирован)
	                  
	Если (Скопирован = 1) И (ФлагСвертки = 1) Тогда	//копирование документа
		// нельзя копировать документ, полученный при свертке
		СтатусВозврата(0);
		Предупреждение("Нельзя копировать документ, созданный при сверке!", 60);
		Возврат;
	КонецЕсли;

	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		//копирование документа - очистим партии, если нужно создадим новые
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			СтараяПартия = Партия;
			Партия="";            
			СоздатьПартию(СтараяПартия);
			
			// пересчитаем СуммаУпр по текущему курсу
			СуммаУпр = ?(глРубли = глДоллары, СуммаРуб, глПересчет(СуммаРуб, глРубли, глКурсДляВалюты(глРубли, ДатаДок), глДоллары, ДатаДок));
		КонецЦикла;
		// *************** КОНЕЦ ********************************
		Возврат;
	КонецЕсли;
	
	ВидОперации  = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ;
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Если Форма.Параметр = "Переданный" Тогда  
			ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ;
		ИначеЕсли Форма.Параметр = "Реализованный" Тогда
			ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров;
		КонецЕсли;
	КонецЕсли;    
	
	НазначитьТип("ВидСтатус", "Перечисление.ВидыТМЦ");
	ВидСтатус    = Перечисление.ВидыТМЦ.Товар;
	
	ФлагСвертки = 0;

КонецПроцедуры  // ВводНового()       

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	                       
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		  	= Фирма;  
	СтарыйКонтрагент 		= Контрагент;
	СтарыйПоставщик         = Поставщик; 
	НачальнаяДатаДокумента  = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если ФлагСвертки = 1 Тогда
		// выписан автоматически при свертке
		Форма.ТолькоПросмотр(1);
		Форма.КонтрагентПокПост.Видимость(1);
		Форма.ДоговорПокПост.Заголовок("Договор");
	Иначе
		Форма.КонтрагентПокПост.Видимость(0);
	КонецЕсли;
		
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
    
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнПодбор.Доступность(0);
	Иначе
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма     .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП  .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаРуб  .ВыполнятьФормулуТолькоПриИзменении(1);
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
		
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;

	ОбновитьНадписи();         

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		
КонецПроцедуры  // ПриОткрытии()        
                      
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриРедактированииНовойСтроки()
	                        
	СтараяПартия = Партия;
	Партия = "";
	Если Номенклатура.Выбран() = 1 Тогда // Копирование
		Если СтараяПартия.Выбран() = 1 Тогда // Была выбрана партия, копируем ее
			СоздатьПартию(СтараяПартия);
		КонецЕсли;
	КонецЕсли; // Номенклатура.Выбран() = 1
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	ЭлементДиалога=Форма.ТекущаяКолонка();
	
	Если (ЭлементДиалога="ГТД") или (ЭлементДиалога="СтранаПроисхождения") или
									(ЭлементДиалога="Свойство") Тогда
		
		Если Номенклатура.Выбран()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Парам=СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Контекст,"КонтекстДокумента");
		Парам.ДобавитьЗначение(НомерСтроки,"НомерСтроки");
		Парам.ДобавитьЗначение(ЭлементДиалога,"ЭлементДиалога"); 
		
		Если Партия.Выбран()=1 Тогда
			ОткрытьФормуМодально(Партия,Парам,0);
		Иначе                                  
			ОткрытьФормуМодально("Элемент.Партии",Парам,,,Номенклатура);
		КонецЕсли;
		
	КонецЕсли;    
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                  
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)
	
	Если Элемент =  "ВидСтатус" Тогда
		
		Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
			СписокВидов = глСоздатьСписокЗначПеречисления("ВидыТМЦ", "Товар,Продукция");
		Иначе
			СписокВидов = глСоздатьСписокЗначПеречисления("ВидыТМЦ", "Товар,Продукция,Материал");
		КонецЕсли;
		
		СписокВидов.ДобавитьЗначение(глСП.Т_Принятый);
		ВыбВидСтатус = ВидСтатус;
		
		Если СписокВидов.ВыбратьЗначение(ВыбВидСтатус,,,,2) = 1 Тогда
			НазначитьТип("ВидСтатус", "Перечисление." + ВыбВидСтатус.Вид());
			ВидСтатус = ВыбВидСтатус;
		КонецЕсли;
		
		ФлагПродолжения = 0;
		
	КонецЕсли;    
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// предопределенная процедура
//
Процедура ПриУдаленииСтроки()
	
	УдалитьПартию();
	
КонецПроцедуры // ПриУдаленииСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	ОбновитьНадписи();
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 0);
	ЗаполнитьГТД();

КонецПроцедуры // ОбработкаПодбора()
                        
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи()
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ Тогда
    	Склад = "";
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров Тогда
    	Склад             = "";
		Поставщик         = "";
		ДоговорПоставщика = "";
	Иначе // Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦ Тогда
		Контрагент = "";
		Договор    = "";
	КонецЕсли;
	
	Если (Склад.РозничныйСклад = 0) И (Итог("ПродЦена") <> 0) Тогда
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ПродЦена = 0;
		КонецЦикла;
	КонецЕсли;
		
    // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
	 или (ВидСтатус = глСП.Т_Принятый) Тогда
		ОтменитьЗапись=0;
		СпрПартии=СоздатьОбъект("Справочник.Партии");
		
		// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
		// после записи всех партий - пропишем их в документ всех сразу
		ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
		ТЗПартии.НоваяКолонка("НомерСтрокиДок");
		ТЗПартии.НоваяКолонка("Партия");
		
		НачатьТранзакцию();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Партия.Выбран()=0) и (Номенклатура.Выбран()=1) Тогда
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки());
					ОтменитьЗапись=1;
					Прервать;
				КонецПопытки;
				
				ТЗПартии.НоваяСтрока();
				ТЗПартии.НомерСтрокиДок=НомерСтроки;
				ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
				
			КонецЕсли;
		КонецЦикла; 
		
		Если ОтменитьЗапись=0 Тогда  
			// запишем созданные партии
			ЗафиксироватьТранзакцию();
			
			// теперь занесем партии в спецификацию нашего документа
			ТЗПартии.ВыбратьСтроки();
			Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
				
				ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
				Партия=ТЗПартии.Партия;
				
			КонецЦикла;
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;      
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);                 
КонецПроцедуры // ПриЗаписи()   

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// Если документ новый и в нем были выбраны партии, 
	// то они не нужны и их надо пометить на удаление
	Если Выбран() = 0 Тогда        
		УдалитьВсеПартии();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
СпрПартии = СоздатьОбъект("Справочник.Партии");
