////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"
                        
Перем СтараяДата, СтараяФирма;
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем Парам;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)  
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");  
	
КонецФункции                                                                    
    
//******************************************************************************
// ПроверкаДоступностиСуммыВзаиморасчетов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  .
//
// Описание:
//  Управляет доступностью элемента диалога "Суммы взаиморасчетов",
// 	в зависимости от валюты взаиморасчетов и валюты документа.
//
Процедура ПроверкаДоступностиСуммыВзаиморасчетов()
	                                            
	Если Валюта = Договор.ВалютаВзаиморасчетов Тогда
		Форма.СуммаВзаиморасчетов.Доступность(0);
	Иначе
		Форма.СуммаВзаиморасчетов.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаДоступностиСуммыВзаиморасчетов()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()     
	
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()
	
	Перем Заголовок, Название;
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции //ЗаголовокФормы              

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Пересчитывает сумму в валюте взаиморасчетов для текущей строки документа.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		СуммаВзаиморасчетов=0;
		Возврат "";
	КонецЕсли;
	
	// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
	СуммаВзаиморасчетов		= глПересчет(Сумма,
								Валюта,Курс,
								Договор.ВалютаВзаиморасчетов,ДатаДок);
	
КонецФункции //ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    
	    СтараяДата = ДатаДок;
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
	                ПересчетСуммыВзаиморасчетов();
					ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ВалютаСтарая = Валюта;
	КурсСтарый	 = Курс;
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	Если (ВалютаСтарая<>Валюта) и (КоличествоСтрок()>0) Тогда
		Ответ =	Вопрос("Изменена валюта документа! Пересчитать суммы?","Да+Нет", 60);
		Если Ответ ="Да" Тогда
			НадоПересчитать = 1;
		Иначе
			НадоПересчитать = 0;
		КонецЕсли;	
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Сумма = ?(НадоПересчитать = 0,Сумма,глПересчет(Сумма,ВалютаСтарая,КурсСтарый,Валюта,Курс));
			ПересчетСуммыВзаиморасчетов(); // по текущей строке
		КонецЦикла;
	КонецЕсли;
	ОбновитьНадписи();    
	
КонецПроцедуры	//ПоКнопкеЦены()      

//******************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Контрагент.
//
// Описание:
//  Производит все необходимые пересчеты при изменении контрагента.
//
Процедура ПриИзмененииКонтрагента()
	
	Договор = Контрагент.ОсновнойДоговор;
	ПересчетСуммыВзаиморасчетов();
	//ПоДокументу = ?(ПустоеЗначение(ПоДокументу)=1,Контрагент.ЮрФизЛицо.ПолнНаименование,ПоДокументу);
	ПроверкаДоступностиСуммыВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииКонтрагента()  

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Договор.
//
// Описание:
//  Производит все необходимые пересчеты при изменении договора.
//
Процедура ПриИзмененииДоговора()
	             
	ПересчетСуммыВзаиморасчетов();
	ПроверкаДоступностиСуммыВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииДоговора()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                                                                              
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	ПроверкаДоступностиСуммыВзаиморасчетов();
	
КонецПроцедуры // ПриНачалеРедактированияСтроки()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа - пересчитываем из-за изменения курса
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
		    ПересчетСуммыВзаиморасчетов();
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ВидДокВходящий  = "Приходный кассовый ордер";
	ДатаДокВходящий = ДатаДок;
	
КонецПроцедуры    

//******************************************************************************
// предопределенная процедура
Процедура ПриОткрытии() 
	                      
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		
		Если ПустоеЗначение(Парам.Получить("Команда")) = 0 Тогда
			// печать
			Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
			 или (Парам.Получить("Команда") = "ПечатьНаЭкран") 
			Тогда
				Предупреждение("Документ не имеет печатной формы!", 60);
				СтатусВозврата(0);
				Возврат;
			Иначе
				Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
			
		ИначеЕсли ПустоеЗначение(Парам.Получить("Параметры")) = 0 Тогда
			// ввод нового из авансового отчета
			ДатаДок	= Парам.Получить("ДатаДок");
			Фирма	= Парам.Получить("Фирма");
			ЮрЛицо	= Фирма.ЮрЛицо;
			ФизЛицо	= Парам.Получить("ФизЛицо");
			Валюта	= Парам.Получить("Валюта");
			Курс	= глКурсДляВалюты(Валюта, ДатаДок);
			Проект	= Парам.Получить("Проект");
			
			УстановитьНовыйНомер(СокрЛП( Константа.ПрефиксИБ) + СокрЛП(ЮрЛицо.ПрефиксНомеровДокументов));
			
		Иначе
			
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
              
	НачальнаяДатаДокумента 	= ДатаДок; 
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
                        
	Форма.Контрагент			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Договор				.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма					.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаВзаиморасчетов	.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЦены.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	глАктивизироватьРеквизит(Контекст);
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	
КонецПроцедуры                                                                  
                          
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если (ТипЗначенияСтр(Форма.Параметр) = "ГрупповойКонтекст") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр;
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()

//******************************************************************************

Парам = Форма.Параметр;
