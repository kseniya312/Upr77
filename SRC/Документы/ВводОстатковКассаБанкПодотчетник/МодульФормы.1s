//******************************************************************************
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
                  
// Для контроля необходимости пересчетов
Перем СтараяФирма;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// ПоказатьИтоги()
//
// Параметры:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "..."
//
// Описание:
//  Показывает итоги по колонке "СуммаВал" по валютам.
//
Процедура ПоказатьИтоги()
	
	ТаблИтогов   = СоздатьОбъект("ТаблицаЗначений");
	СписокИтогов = СоздатьОбъект("СписокЗначений");
	
	ВыгрузитьТабличнуюЧасть(ТаблИтогов, "Валюта, СуммаВал");
	ТаблИтогов.Свернуть("Валюта", "СуммаВал");
	
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		СписокИтогов.ДобавитьЗначение(СокрЛП(ТаблИтогов.Валюта) + СимволТабуляции + " = " + СокрЛП(Формат(ТаблИтогов.СуммаВал , "Ч15.2,'")));
	КонецЦикла;
	
	СписокИтогов.ВыбратьЗначение(, "Итоги кол. ""Сумма""", , , 1);
	
КонецПроцедуры // ПоказатьИтоги()

//*****************************************************************************
// ЗаголовокФормы()
//
// Возвращаемое значение: 
//	Строка - Название документа
//
//Описание:
// Формирует название документа и заголовок формы диалога
Функция ЗаголовокФормы() 
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название  = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам Тогда
		Форма.Объект.Заголовок("Касса");
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам Тогда
		Форма.Объект.Заголовок("Банковский счет");
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
		Форма.Объект.Заголовок("Физическое лицо");
	КонецЕсли;
	
	Форма.СуммаРуб.Заголовок("Сумма ("+ТекстВалюты(глРубли)+")");
	Форма.СуммаУпр.Заголовок("Сумма ("+ТекстВалюты(глДоллары)+")");
	
	Форма.РамкаСуммаРуб.Заголовок("Всего (" +ТекстВалюты(глРубли)+")");
	Форма.РамкаСуммаУпр.Заголовок("Всего ("+ТекстВалюты(глДоллары)+")");
	
	Если ФлагСвертки = 1  Тогда
		Заголовок = Заголовок + " (создан при свертке базы)";
	КонецЕсли;

	Форма.Заголовок(Заголовок);
	
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   

//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДоступностью()
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам Тогда
		Форма.Валюта.Доступность(0);
	Иначе //Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам Тогда
		  //Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
		Форма.Валюта.Доступность(1);
	КонецЕсли;
	
	Форма.СуммаРуб.Доступность(?(Валюта = глРубли  , 0, 1));
	Форма.СуммаУпр.Доступность(?(глРубли = глДоллары, 0, ?(Валюта = глДоллары, 0, 1)));
	
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
// ПересчетСумм()
//
// Параметры:
//  Нет
//
// Вызывается из формул элементов диалога:
//  "СуммаВал", "СуммаРуб"
//
// Описание:
//  Пересчитывает реквизиты "СуммаРуб" и "СуммаУпр".
//
Процедура ПересчетСумм()
	
	Реквизит = Форма.АктивныйЭлемент();
	
	Если Валюта.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизит <> "СуммаРуб" Тогда
		СуммаРуб = ?(Валюта = глРубли, СуммаВал, глПересчет(СуммаВал, Валюта, глКурсДляВалюты(Валюта, ДатаДок), глРубли, ДатаДок));
	КонецЕсли;
	
	Если глДоллары = глРубли Тогда
		СуммаУпр = СуммаРуб;
	Иначе
		СуммаУпр = ?(Валюта = глДоллары, СуммаВал, глПересчет(СуммаВал, Валюта, глКурсДляВалюты(Валюта, ДатаДок), глДоллары, ДатаДок));
	КонецЕсли;
	
КонецПроцедуры // ПересчетСумм()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Валюта"
//
Процедура ПриИзмененииВалюты()
	
	ПересчетСумм();
	УправлениеДоступностью();
	
КонецПроцедуры // ПриИзмененииВалюты()

//******************************************************************************
// ПриИзмененииОбъекта()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Объект"
//
Процедура ПриИзмененииОбъекта()      
	
	Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам Тогда
		Если (ПустоеЗначение(Объект.ВалютаСчета) = 0) И (Объект.ВалютаСчета <> Валюта) Тогда
			Валюта = Объект.ВалютаСчета;
			ПриИзмененииВалюты();
		ИначеЕсли (ПустоеЗначение(Объект) = 0) И (Объект.ВалютаСчета.Выбран() = 0) И (глРубли <> Валюта) Тогда
			Валюта = глРубли;
			ПриИзмененииВалюты();
		КонецЕсли;
		
	ИначеЕсли Валюта.Выбран() = 0 Тогда
		Валюта = глРубли;
		ПриИзмененииВалюты();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОбъекта()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = глСоздатьСписокЗначПеречисления("ВидыОперацийПоВводуОстатков", 
					"ОстаткиПоКассам,ОстаткиПоБанкСчетам,ОстаткиПоПодотчЛицам");
	
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		Если ВидОперации <> ВремВидОперации Тогда
			Ответ = "Да";
			Если ВыбратьСтроки() = 1 Тогда
				Ответ = Вопрос("Строки документа будут удалены!
				               |Продолжить?", "Да+Нет", 60);
			КонецЕсли;                   
			Если Ответ = "Да" Тогда
		    	УдалитьСтроки();
				ВидОперации=ВремВидОперации;
				Форма.Обновить(0);
			КонецЕсли;                   
		КонецЕсли;                   
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
Процедура ВводНового(Скопирован)  // предопределенная процедура
	                  
	Если (Скопирован = 1) И (ФлагСвертки = 1) Тогда	//копирование документа
		// нельзя копировать документ, полученный при свертке
		СтатусВозврата(0);
		Предупреждение("Нельзя копировать документ, созданный при сверке!", 60);
		Возврат;
	КонецЕсли;

	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
		    Если Валюта <> глРубли Тогда
				СуммаРуб	= глПересчет(СуммаВал, Валюта, ДатаДок, глРубли, ДатаДок);
		    КонецЕсли;
		КонецЦикла;
	Иначе
		ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам;
		
		Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
			Если Форма.Параметр = "Банк" Тогда  
				ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам;
			ИначеЕсли Форма.Параметр = "Подотчетник" Тогда
				ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам ;
			КонецЕсли;
		КонецЕсли;
		
		ФлагСвертки = 0;
	КонецЕсли;
	
КонецПроцедуры  // ВводНового()            

//******************************************************************************
Процедура ПриОткрытии() // предопределенная процедура            
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;
                  
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
    
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма		   = Фирма;
	
	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если ФлагСвертки = 1 Тогда
		// выписан автоматически при свертке
		Форма.ТолькоПросмотр(1);
		
		Если ВидОперации <> Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
			// КредДокумент используется только для подотчетников
			Форма.КредДокумент.Видимость(0);
		КонецЕсли;
	Иначе
		// при ручном вводе реквизит табличной части КредДокумент не используется
		Форма.КредДокумент.Видимость(0);
	КонецЕсли;
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	Форма.Объект.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Валюта.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаВал.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаРуб.ВыполнятьФормулуТолькоПриИзменении(1);
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		
КонецПроцедуры          

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	УправлениеДоступностью();
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="Объект" Тогда
		
		Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам Тогда
			НазначитьВид(Объект, "Кассы");
			Объект.ВидыДляВыбора("Кассы");
			
		ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам Тогда
			НазначитьВид(Объект, "БанковскиеСчета");
			ЮрФизЛицо = Фирма.ЮрЛицо;
			ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ЮрФизЛицо);
			ФлагСтандОбр = 0;
			
		ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
			НазначитьВид(Объект, "ФизЛица");
			Объект.ВидыДляВыбора("ФизЛица");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;       
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры    
                                            
//******************************************************************************
