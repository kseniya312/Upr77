////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"     

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// УправлениеДиалогом()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Управляет доступностью элементов диалога, в зависимости от установленных
// значений реквизитов
//
Процедура УправлениеДиалогом()
	Если СокрЛП(ВидОперации) = "Снятие резерва по фирме"  Тогда   
		Склад = 0;
	    Форма.Склад.Доступность(0);
		Форма.ТекстСклад.Доступность(0);
	ИначеЕсли СокрЛП(ВидОперации) = "Снятие резерва по складу" тогда
		Форма.Склад.Доступность(1);
		Форма.ТекстСклад.Доступность(1);
	КонецЕсли;                          
КонецПроцедуры
            
Процедура ПриЗаписи()
	   жПокупатели = 1;  
	   ПриЗаписиДокумента(Контекст);
КонецПроцедуры		

//******************************************************************************
// ВыбратьВидОперации(СпособВыбора)
//
// Параметры: 
//  СпособВыбора - вариат выбора для метода ВыбратьЗначение, 
//                 необязательный параметр, по умолчанию - 1.
//
// Возвращаемое значение:
//  Возвращенное значение метода ВыбратьЗначение().
//
// Описание:
//  Служит для запроса у пользователя Вида операции документа
//                                    
Функция ВыбратьВидОперации(СпособВыбора = 1)
	
	// Спросим вид операции
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение("Снятие резерва", 			"Снятие резерва");
	СписокОпераций.ДобавитьЗначение("Установка резерва", 		"Установка резерва");
	СписокОпераций.ДобавитьЗначение("Корректировка резерва", 	"Корректировка резерва");
	ВидОперации = "Корректировка резерва";
	Возврат 1;//СписокОпераций.ВыбратьЗначение(ВидОперации,"Выбор вида операции",,60,СпособВыбора);
КонецФункции // ВыбратьВидОперации()
 
                                           
//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Операция".
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Если ВыбратьВидОперации() = 1 Тогда
		УправлениеДиалогом();
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()                 
                                              
//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:                
//		ИмяРеквизита - идентификатор текущей колонки табличной части
//
// Возвращаемое значение: 
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Операция".
//
// Описание:
//	Производится пересчет всего необходимого при редактировании табличной части.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)
	
	Перем НоваяНоменклатура;
	                                               
	Если ИмяРеквизита = "Номенклатура" Тогда
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			//Очистили Номенклатуру.
			Единица 	= 0;
			Коэффициент = 0;                  
			Количество 	= 0;
			Возврат;
		КонецЕсли;

		// Определим, поменяли ли Номенклатуру?
		НоваяНоменклатура = 0;
		Если ПустоеЗначение(Единица) = 1 Тогда
			НоваяНоменклатура = 1;
		ИначеЕсли Номенклатура <> Единица.Владелец Тогда
			НоваяНоменклатура = 1;
		КонецЕсли;
	
		Если НоваяНоменклатура = 0 Тогда
			Возврат;
		КонецЕсли;
	
		// заполняем единицу
		
		Единица 		= Номенклатура.ОсновнаяЕдиница;
		Коэффициент 	= Единица.Коэффициент;    
			                         
		
	ИначеЕсли ИмяРеквизита = "Единица" Тогда	  
		Коэффициент = Единица.Коэффициент;
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()

//******************************************************************************
// ЗаполнитьТабличнуюЧасть()
//
// Парметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа на основании списка заявок, переданного, 
//  в качестве параметра при открытии формы
//
Процедура ЗаполнитьТабличнуюЧасть()
	Если ТипЗначенияСтр(Форма.Параметр) <> "ТаблицаЗначений" Тогда
	    Возврат;
	КонецЕсли;
	//ТЗИзОтчета = Форма.Параметр;
	//ТЗИзОтчета.ВыбратьСтроки();
	//Пока ТЗИзОтчета.ПолучитьСтроку() = 1  Цикл
	//	Если ТЗИзОтчета.Количество = 0 Тогда
	//	    Продолжить;
	//	КонецЕсли;
	//	НоваяСтрока();
	//	Договор 		= ТЗИзОтчета.Договор;		   
	//	Контрагент 		= ТЗИзОтчета.Договор.Владелец;
	//	Номенклатура 	= ТЗИзОтчета.Номенклатура;
	//	Единица 		= ТЗИзОтчета.Номенклатура.БазоваяЕдиница;
	//	Коэффициент 	= ТЗИзОтчета.Коэффициент;
	//	Количество 		= ТЗИзОтчета.Количество;
	//КонецЦикла;	
КонецПроцедуры

//******************************************************************************
// ПоКнопкеЗаполнить()
//
// Парметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Заполнить".
//
// Описание: 
//	Вызывается при нажатии кнопки "Заполнить" и вызывает форму отчета "Оплата заявок"
//  для заполнения табличной части документа
//
Процедура ПоКнопкеЗаполнить()          
	Если (СокрЛП(ВидОперации) = "Снятие резерва по складу") и (Склад.Выбран() = 0) тогда
		Предупреждение("Не выбран склад!");
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() <> 0 Тогда  
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;    
	
	УдалитьСтроки();
	
	
	СЗПарам = СоздатьОбъект("СписокЗначений"); 
	СЗПарам.Установить("Заголовок", "Выберите заявки.");
	СЗПарам.Установить("ТекстВопроса", "Выберите заявки.");
	
	РегРезервов = СоздатьОбъект("Регистр.РезервыТМЦ2");
	РегРезервов.УстановитьФильтр(,Склад);
	ТЗ = СоздатьОбъект("ТаблицаЗначений");
	РегРезервов.ВыгрузитьИтоги(ТЗ,1,1);
	
	ТЗ.Свернуть("Заявка","");
	СЗПарам.Установить("ТаблЗначений", ТЗ);  
	
	ОткрытьФормуМодально("Обработка.ВыборИЗТаблицыЗначений", СЗПарам, 1);
	
	Если (СЗПарам <> "Нет") и (СЗПарам <> "Отмена") и (ТипЗначенияСтр(СЗПарам) = "ТаблицаЗначений") Тогда
		СЗПарам.ВыбратьСтроки();
		Пока СЗПарам.ПолучитьСтроку() = 1 Цикл
			Если СЗПарам.Использовать = 2 Тогда
				РегРезервов.УстановитьФильтр(,Склад,СЗПарам.Заявка);
				РегРезервов.ВыгрузитьИтоги(ТЗ,1,1);
				ТЗ.ВыбратьСтроки();
				Пока ТЗ.ПолучитьСтроку() = 1 Цикл
					НоваяСтрока();
					Номенклатура 	= ТЗ.Номенклатура;
					Количество 		= ТЗ.Количество;
					КоличествоНовое	= ТЗ.Количество;
					Заявка 			= ТЗ.Заявка;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры  

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
 	              
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции // ЗаголовокФормы   

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()
                                        
//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()


//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Подбор"
//
// Описание:
// Открывает подбор.
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение(Константа.ВалютаБухУчета,          "Валюта");
	Параметры.ДобавитьЗначение(ДатаДок,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
		
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ПредставлениеЭлемента(Покупатель)
//
// Параметры: 
//  Элемент - значение типа Справочник
//
// Возвращаемое значение: 
//  Текстовая строка - наименование элемента справочника или "<автоподбор>", если покупатель не выбран
//
// Описание: 
//  Вызывается из формулы в табличной части документа
//                                                   
Функция ПредставлениеЭлемента(Элемент)
	Если ПустоеЗначение(Элемент) = 1 тогда
		Возврат "<автоподбор>";
	Иначе
		Возврат Строка(Элемент);
	КонецЕсли;
КонецФункции

//////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);     
	глПроверкаРазрешенияРедактирования(Контекст);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=0 Тогда
			Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
			или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
			Тогда
				Предупреждение("Для данного документа печатная форма не предусмотрена!", 60);
				СтатусВозврата(0);Возврат;
			Иначе
				Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
				СтатусВозврата(0);Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
	Иначе
		Если Выбран() = 0 Тогда
			ЗаполнитьТабличнуюЧасть();
		КонецЕсли;
	КонецЕсли;   

	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;

	УправлениеДиалогом();
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(Скопирован)
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	Если ВыбратьВидОперации(0) <> 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;                   
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	ЗаполнитьТабличнуюЧасть();
КонецПроцедуры // ПриПовторномОткрытии() 

Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	//нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	
КонецПроцедуры // ОбработкаПодбора()           

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеРедактированияСтроки()            
	Если Форма.ТекущаяКолонка() = "ТекстПокупатель" Тогда
		Параметр = "Выбор";
		ОткрытьФормуМодально("Справочник.Контрагенты.ДляВыбора", Параметр); 
		Контрагент = Параметр;         
		Если Договор.Владелец <> Контрагент Тогда
			Договор = "";    
		КонецЕсли;
	ИначеЕсли Форма.ТекущаяКолонка() = "ТекстДоговор" Тогда
		Если Контрагент.Выбран() = 0 Тогда
			Параметр = "Выбор";
			ОткрытьФормуМодально("Справочник.Контрагенты.ДляВыбора", Параметр); 
			Контрагент = Параметр;         
		КонецЕсли;
		Параметр = Контрагент;
		ОткрытьФормуМодально("Справочник.Договоры.ДляВыбора", Параметр); 
		Договор = Параметр;         
	КонецЕсли;
КонецПроцедуры
		
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
//Инициализирум список действий по кнопке "Действия"
СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
СписокДействий.ДобавитьЗначение("Перейти в журнал");
СписокДействий.ДобавитьЗначение("Ввести на основании");

