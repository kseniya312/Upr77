////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
                    
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
            
Перем СтараяФирма;

Перем КонтекстОснования; // контекст формы документа - основания
Перем ФормаСумма, ФормаСуммаНДС, ФормаСуммаНП, ИтогПосчитан;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//     
//******************************************************************************
// СуммаДокумента()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сумма по документу (всего с налогами)
//
// Описание:
//  Возвращает сумму всего по документу, прописывает надписи итоговых сумм по НДС 
//  и НП. Вычисление сумм производится по документу - основанию.
//
Функция СуммаДокумента()
	
	Если (КоличествоСтрок() = 0)
	и    (ДокОснование.Выбран() = 1)
	и    (ИтогПосчитан = 1)
	Тогда
		// если расчет производим по документу - основанию - лишний раз не мучаем базу.
		// пересчитаем 1 раз при открытии
	    Возврат ФормаСумма;
	КонецЕсли;
	                                                    
	ИтогПосчитан = 1;
	ФормаСумма    = глСуммаСчетаФактуры(Контекст, ФормаСуммаНДС, ФормаСуммаНП);
	Возврат ФормаСумма;
	
КонецФункции // СуммаДокумента()

//******************************************************************************
// ПодсказкаОРежимеСФ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Текст подсказки.
//
// Вызывается из формул элементов диалога:
//  Текстовое поле в диалоге.
//
// Описание:
//  Возвращает текст подсказки о текущем состоянии СФ.
//
Функция ПодсказкаОРежимеСФ()
	
	Если АвтоКнигаПродаж = 1 Тогда
		ТекстПодсказки = "Записи книги продаж по счету - фактуре будут " +  
		"сформированы автоматически регламентным документом ""Формирование "+
		"книги продаж"".";
	Иначе                   
		ТекстПодсказки = "Записи книги продаж по этому счету - фактуре должны "+
		"быть введены вручную. ";
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции // ПодсказкаОРежимеСФ()     
 
//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Установка доступности элементов
//
Процедура УправлениеДоступностью()
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
		Форма.СФНаАванс.Доступность(1);
	Иначе
		Форма.СФНаАванс.Доступность(0);
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//  НомерЗакладки - номер текущей закладки.
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Установка видимости элементов диалога в зависимости от текущей закладки.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда                 
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // УправлениеВидимостью()    

//******************************************************************************
// УстановкаФлагаАвтоКнигаПродаж()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает доступность и значение реквизита "Автоматические записи 
//  книги продаж" в зависимости от вида документа.
//
Процедура УстановкаФлагаАвтоКнигаПродаж()
	
	Если ДокОснование.Выбран() = 0 Тогда
		Форма.АвтоКнигаПродаж.Доступность(0);
		Если АвтоКнигаПродаж = 1 Тогда
			 АвтоКнигаПродаж = 0;
		КонецЕсли;
	Иначе     
		Форма.АвтоКнигаПродаж.Доступность(1);	   
	КонецЕсли;
		
КонецПроцедуры // УстановкаФлагаАвтоКнигаПродаж()
                                                      
//******************************************************************************
// УстановкаНаличияЗакладок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопки "Очистить док. основание", "Выбрать док. основание".
//
// Описание:
//  Если документ введен на основании, не показываем суммы. (Для 
//	"свободного" документ - показываем на закладке).
//
Процедура УстановкаНаличияЗакладок()
	
	Если (ДокОснование.Выбран() = 1) 
	и    (СФНаАванс = 0) 
	Тогда
		Форма.ИспользоватьЗакладки(0);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
		Если КоличествоСтрок()>0 Тогда
			УдалитьСтроки();
		КонецЕсли;
	Иначе
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		Форма.Закладки.ДобавитьЗначение("Основной");
		Форма.Закладки.ДобавитьЗначение("Суммы");		
		Форма.Закладки.ТекущаяСтрока(1);
		УправлениеВидимостью(1);
	КонецЕсли;
	
КонецПроцедуры // УстановкаНаличияЗакладок()

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	
	Если (КоличествоСтрок() = 0) И (ПустоеЗначение(ДокОснование) = 0) Тогда
		ВидОсн = ДокОснование.Вид();
		
		Если ВидОсн = "ОтчетКомитенту" Тогда
			ДокВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли ВидОсн = "ЗакрытиеМесяца" Тогда
			ДокВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли ВидОсн = "ВводОстатковПокупателя" Тогда
			ДокВалюта = Константа.ВалютаСчетовФактур;
		Иначе
			ДокВалюта = Константа.ВалютаСчетовФактур;
		КонецЕсли;
	Иначе
		ДокВалюта = Валюта;
	КонецЕсли;
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(ДокВалюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(ДокВалюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(ДокВалюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ".Проведен";
		Иначе
			Заголовок = Заголовок + ".Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ".Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
        
//******************************************************************************
// ДополнительнаяПроверкаОснования(ДокОсн)
//
// Параметры: 
//  ДокОсн - документ
//
// Возвращаемое значение:
//  1 - доумент может быть основанием. 0 - нет.
//
// Описание:
//  Выполняет дополнительную проверку документа на то, может он выступать в
//  качестве основания или нет
//
Функция ДополнительнаяПроверкаОснования(ДокОсн, ОписаниеОш)
	
	Рез		= 1;
	ВидДок	= ДокОсн.Вид();
	
	Если "Реализация" = ВидДок Тогда
	    Если ДокОсн.КодОперации = глКО.ПередачаНаРеализацию Тогда
	        ОписаниеОш	= "Документ "+ДокОснование+" является документом передачи на комиссию.
			              |Выписка счета - фактуры не требуется!";
			Рез = 0;
		КонецЕсли;
		
	ИначеЕсли "РеализацияРозница" = ВидДок Тогда
		Если ДокОсн.ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда
	        ОписаниеОш	= "По документу """ + глНазваниеДокументаВЖурнале(ДокОсн) + """
			              |выписка счета - фактуры не требуется!";
			Рез = 0;
		КонецЕсли;
		
	ИначеЕсли  "КорректировкаДолга" = ВидДок Тогда
		Если Перечисление.ВидыОперацийКоррДолга.Поставщик = ДокОсн.ВидОперации Тогда
			ОписаниеОш	= "По документу """ + глНазваниеДокументаВЖурнале(ДокОсн) + """
			              |выписка счета - фактуры не требуется!";
			Рез = 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ДополнительнаяПроверкаОснования()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	            
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание";
	КонецЕсли;
	            
	СФНаАванс = 0;
	
	Если (ДокОснование.Вид() = "ПКО")
	 или (ДокОснование.Вид() = "СтрокаВыпискиПриход") 
	 или (ДокОснование.Вид() = "КорректировкаДолга")
	 Тогда
	 	СФНаАванс = 1;
	КонецЕсли;
	 
	// ввод остатков, которым ввели долг покупателю за полученный аванс.
	Если (ДокОснование.Вид()= "ВводОстатковПокупателя") Тогда 
	    Если (ДокОснование.ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателю) Тогда
			СФНаАванс = 1;
		КонецЕсли;	
	КонецЕсли;
		
	Фирма = ДокОснование.Фирма;
	Если глЕстьРеквизитШапки("Договор", ДокОснование.Вид()) = 1 Тогда
		Контрагент 	= ДокОснование.Контрагент;
		Договор 	= ДокОснование.Договор;    
	КонецЕсли;
	
	Если СФНаАванс = 1 Тогда
		// надо заполнить т.ч.
		СуммаАванса  = 0;
		УдалитьСтроки();
		
		РегПокупатели = СоздатьОбъект("Регистр.Покупатели");
		РегПокупатели.ВыбратьДвиженияДокумента(ДокОснование);
		Пока РегПокупатели.ПолучитьДвижение() = 1 Цикл
			Если (РегПокупатели.Расход = 1) 
			   и (РегПокупатели.ВидДолга = глВД.Аванс) 
			   Тогда
			   	СуммаАванса = СуммаАванса + РегПокупатели.СуммаРуб - РегПокупатели.СуммаНП;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаАванса = 0 Тогда
			Возврат ("По документу "+ДокОснование+" нет движений по полученным авансам!");
		КонецЕсли;
		
		НоваяСтрока();  
		Наименование = "Авансовый платеж";
		Количество   = 1;
		Сумма        = СуммаАванса;
		СтавкаНДС    = Перечисление.СтавкиНДС.НДС20_120;
		глПересчетТаблЧасти(Контекст,"Сумма");
		
	КонецЕсли;                                
	
	Возврат "";
	
КонецФункции //ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание, ОписаниеОш;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	
	Если ПустоеЗначение(Основание) = 1 Тогда
	    Возврат;
	КонецЕсли;
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= Основание.ПредставлениеВида();
	
	Если (ПустоеЗначение(Основание) = 0) и  (ДокОснование <> Основание) Тогда

		// по документу основанию не должен быть выписан другой счет-фактура
		СФ = глНайтиСчетФактуру(Основание, "СчетФактураВыданный");
		Если ПустоеЗначение(СФ) = 0 Тогда      
			Если (СФ <> ТекущийДокумент()) и (СФ.ПометкаУдаления() = 0) Тогда
				Предупреждение("На основании документа " + 
			              СинонимОснования + " " + СокрП(Основание.НомерДок) + " от " + Основание.ДатаДок + " " +
			              "уже выписан документ " + СинонимДокумента + " " + СокрП(СФ.НомерДок) + " от " + СФ.ДатаДок + ". " +
						  "Нельзя выписывать другой!", 60);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если ДополнительнаяПроверкаОснования(Основание, ОписаниеОш) = 0 Тогда
		    Предупреждение(ОписаниеОш, 60);
			Возврат;
		КонецЕсли;

		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		УстановкаНаличияЗакладок();
		УстановкаФлагаАвтоКнигаПродаж();
		
		// после выбора основания нужно пересчитать итоги
		ИтогПосчитан	= 0;      
		УправлениеДоступностью();
	КонецЕсли;
    
КонецПроцедуры //ПоКнопкеОснование()   

//******************************************************************************
// ПоКнопкеОчиститьОснование()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПоКнопкеОчиститьОснование()
	           
	Если ДокОснование.Выбран()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос ("Очистить документ - основание
		|(Счет - фактуру необходимо будет заполнить вручную)?","Да+Нет") = "Нет" Тогда
		Возврат;
	КонецЕсли;
	
	ДокОснование="";    
	Валюта = Константа.ВалютаСчетовФактур; 
    Курс   = 1;
    УстановкаНаличияЗакладок();
	УстановкаФлагаАвтоКнигаПродаж();   
	ОбновитьНадписи(); 
	
КонецПроцедуры // ПоКнопкеОчиститьОснование()   

//******************************************************************************
// ПодготовитьРеквизитыШапки(Рекв)
//
// Параметры:
//  Рекв - реквизиты шапки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  формирует список значений для формирования шапки печатной формы
Процедура ПодготовитьРеквизитыШапки(Рекв)

	//++Валерий МЭТР: для нового юр. лица "ИС"
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));	
	Если Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп"; 
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	КонецЕсли;
	
	Если ВыбЮЛ = "БС" Тогда	
		ЮрФизЛицо = Контрагент.ЮрФизЛицо;
		ЮрФизЛицо = ?(ПустоеЗначение(ЮрФизЛицо) = 1, ПолучитьПустоеЗначение("Справочник.ЮрЛица"), ЮрФизЛицо);
		СчетКонтрагента = РазделительСтрок + " р/с " + Контрагент.ОсновнойСчет.НомерСчета + " в " + Контрагент.ОсновнойСчет.Банк.Наименование + ", БИК " + Контрагент.ОсновнойСчет.Банк.Код+ ", корр/с " + Контрагент.ОсновнойСчет.Банк.КоррСчет;
		СчетОтправителя = РазделительСтрок + " р/с " + Фирма.ОсновнойСчет.НомерСчета + " в " + Фирма.ОсновнойСчет.Банк.Наименование + ", БИК " + Фирма.ОсновнойСчет.Банк.Код+ ", корр/с " + Фирма.ОсновнойСчет.Банк.КоррСчет;
		Рекв 	= СоздатьОбъект("СписокЗначений");  
		
		Рекв.ДобавитьЗначение(Шаблон("Продавец: [Фирма.ЮрЛицо.ПолнНаименование]"), "Поставщик");
		Рекв.ДобавитьЗначение(Шаблон("СЧЕТ-ФАКТУРА № [глНомерНаПечать(ДокОснование)] от [ДатаДок]"), "Номер");
		Рекв.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес)]"), "АдресПоставщика");
		Рекв.ДобавитьЗначение(Шаблон("Телефон: [Фирма.ЮрЛицо.Телефоны]"), "ТелефонПоставщика");
		Рекв.ДобавитьЗначение(Шаблон("ИНН/КПП продавца: [Фирма.ЮрЛицо.ИНН]/[Фирма.ЮрЛицо.КПП]"), "ИННПоставщика");
		
		//++Ерошенко 14.05.2007
		//Рекв.ДобавитьЗначение("Грузоотправитель и его адрес: Он же", "Грузоотправитель"); 
		Рекв.ДобавитьЗначение("Грузоотправитель и его адрес: ООО 'Бизнес-Сервис' 195197,  г.Санкт-Петербург, Полюстровский пр.,  д. 87 " + СчетОтправителя , "Грузоотправитель");
		//--Ерошенко
		
		Рекв.ДобавитьЗначение(Шаблон("Грузополучатель и его адрес: [ЮрФизЛицо.ПолнНаименование], Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ФактАдрес)], [СчетКонтрагента]"), "Грузополучатель");
		Рекв.ДобавитьЗначение(Шаблон("К платежно-расчетному документу:  [НомерПлатРасчДок] от [ДатаПлатРасчДок]"), "ПоДокументу");
		Рекв.ДобавитьЗначение(Шаблон("Покупатель:[СокрП(ЮрФизЛицо.ПолнНаименование)]"), "Покупатель");
		Рекв.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ЮрАдрес)]"), "АдресПокупателя");
		Рекв.ДобавитьЗначение(Шаблон("Телефон: [ЮрФизЛицо.Телефоны]"), "ТелефонПокупателя");
		Рекв.ДобавитьЗначение(Шаблон("ИНН/КПП покупателя: [ЮрФизЛицо.ИНН]/[ЮрФизЛицо.КПП]"), "ИННПокупателя");
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ, Параметры);
		
		ЮрФизЛицо = Контрагент.ЮрФизЛицо;
		ЮрФизЛицо = ?(ПустоеЗначение(ЮрФизЛицо) = 1, ПолучитьПустоеЗначение("Справочник.ЮрЛица"), ЮрФизЛицо);
		СчетКонтрагента = РазделительСтрок + " р/с " + Контрагент.ОсновнойСчет.НомерСчета + " в " + Контрагент.ОсновнойСчет.Банк.Наименование + ", БИК " + Контрагент.ОсновнойСчет.Банк.Код+ ", корр/с " + Контрагент.ОсновнойСчет.Банк.КоррСчет;
		СчетОтправителя = РазделительСтрок + " р/с " + Параметры.Получить("РасчСчет") + " в " + Параметры.Получить("Банк") + ", БИК " + Параметры.Получить("БИК") + ", корр/с " +Параметры.Получить("КоррСчет");
		Рекв 	= СоздатьОбъект("СписокЗначений");  
		
		Рекв.ДобавитьЗначение("Продавец: "+СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы")), "Поставщик");
		Рекв.ДобавитьЗначение(Шаблон("СЧЕТ-ФАКТУРА № [глНомерНаПечать(ДокОснование)] от [ДатаДок]"), "Номер");
		Рекв.ДобавитьЗначение("Адрес: "+СокрЛП(Параметры.Получить("ПредставлениеЮрАдресаФирмы")), "АдресПоставщика");
		Рекв.ДобавитьЗначение("Телефон: "+Параметры.Получить("Телефон")+", "+Параметры.Получить("Факс"), "ТелефонПоставщика");
		Рекв.ДобавитьЗначение("ИНН/КПП продавца: "+Параметры.Получить("ИНН")+"/"+Параметры.Получить("КПП"), "ИННПоставщика");
	
		Рекв.ДобавитьЗначение("Грузоотправитель и его адрес: ООО 'Инженерные системы XXI век' 195197,  г.Санкт-Петербург, Полюстровский пр.,  д. 87 " + СчетОтправителя , "Грузоотправитель");
		
		Рекв.ДобавитьЗначение(Шаблон("Грузополучатель и его адрес: [ЮрФизЛицо.ПолнНаименование], Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ФактАдрес)], [СчетКонтрагента]"), "Грузополучатель");
		Рекв.ДобавитьЗначение(Шаблон("К платежно-расчетному документу:  [НомерПлатРасчДок] от [ДатаПлатРасчДок]"), "ПоДокументу");
		Рекв.ДобавитьЗначение(Шаблон("Покупатель:[СокрП(ЮрФизЛицо.ПолнНаименование)]"), "Покупатель");
		Рекв.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ЮрАдрес)]"), "АдресПокупателя");
		Рекв.ДобавитьЗначение(Шаблон("Телефон: [ЮрФизЛицо.Телефоны]"), "ТелефонПокупателя");
		Рекв.ДобавитьЗначение(Шаблон("ИНН/КПП покупателя: [ЮрФизЛицо.ИНН]/[ЮрФизЛицо.КПП]"), "ИННПокупателя");
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС"
	
КонецПроцедуры // ПодготовитьРеквизитыШапки()

//******************************************************************************
// СоздатьСтруктуру(МнЧ)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура СоздатьСтруктуру(МнЧ)
	
	МнЧ = СоздатьОбъект("ТаблицаЗначений");
	МнЧ.НоваяКолонка("Цена",);
	МнЧ.НоваяКолонка("Сумма",);
	МнЧ.НоваяКолонка("СтавкаНДС");
	МнЧ.НоваяКолонка("СуммаНДС",);
	МнЧ.НоваяКолонка("СуммаНП",);
	МнЧ.НоваяКолонка("ВсегоСНДС",);
	МнЧ.НоваяКолонка("Номенклатура");
	МнЧ.НоваяКолонка("СтранаН");
	МнЧ.НоваяКолонка("НомерГТД");
	МнЧ.НоваяКолонка("Единица");
	МнЧ.НоваяКолонка("Количество");
	МнЧ.НоваяКолонка("АкцизЦена");
	
КонецПроцедуры // СоздатьСтруктуру()

//******************************************************************************
// ПодготовитьТаблицуДокумента(ИсхТабл)
//
// Параметры:
//  Табл - подготовленная таблица
//
// Возвращаемое значение:
//  "пустую строку" - если таблица подготовлена, или строку с описанием ошибки.
//
// Описание:
//  формирует таблицу значений из табличной части документа основания
//
Функция ПодготовитьМнЧосн(МнЧ, Итоги, ФорматКоличества, РегистрУчета)
	
	Перем ТаблицаГТД;
	Перем РегПартии;
	
	ТаблицаГТД = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГТД.НоваяКолонка("Номенклатура");
	ТаблицаГТД.НоваяКолонка("СтранаПроисхождения");
	ТаблицаГТД.НоваяКолонка("ГТД");
	ТаблицаГТД.НоваяКолонка("Количество");  //в базовых единицах
	
	КолвоГТДТов = СоздатьОбъект("СписокЗначений");
	
	// Переберем все партии, которые были списаны документом - основанием. 
	// Если в партии были выбраны страна и ГТД, их следует перенести в СФ
	РегПартии = СоздатьОбъект("Регистр." + РегистрУчета);		
	РегПартии.ВыбратьДвиженияДокумента(ДокОснование);
	
	Пока РегПартии.ПолучитьДвижение() = 1 Цикл
		
		Если (РегПартии.Расход = 1) 
		и    (РегПартии.Партия.Выбран()=1)
		Тогда
			ВремСтрана 	= РегПартии.Партия.СтранаПроисхождения;
			ВремГТД		= РегПартии.Партия.ГТД;
			
			Если (ПустоеЗначение(ВремСтрана) = 0)
			 или (ПустоеЗначение(ВремГТД   ) = 0)
			Тогда
				ТаблицаГТД.НоваяСтрока();
				ТаблицаГТД.Номенклатура        = РегПартии.Номенклатура;
				ТаблицаГТД.СтранаПроисхождения = ВремСтрана;
				ТаблицаГТД.ГТД                 = ВремГТД;
				ТаблицаГТД.Количество          = РегПартии.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СоздатьСтруктуру(МнЧ);
	
	// создадим таблицу документа
	ТаблицаОснования = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаОснования);
	
	// теперь у нас есть таблица, в которой собраны строки документа - основания в нужной валюте
	// надо проставить ГТД
	
	ВидОсн = ДокОснование.Вид();
	
	Если ВидОсн = "ВводОстатковПокупателя" Тогда
		ТаблицаОснования.НоваяКолонка("Сумма");
		ТаблицаОснования.НоваяКолонка("Номенклатура");
	Иначе
		Если глЕстьРеквизитМнЧ("СуммаНП", ВидОсн) = 0 Тогда
			ТаблицаОснования.НоваяКолонка("СуммаНП");
			ОснСуммаВклНП = 0;
		Иначе
			ОснСуммаВклНП = ДокОснование.СуммаВклНП;
		КонецЕсли;
			
		Если глЕстьРеквизитМнЧ("СуммаНДС", ВидОсн) = 0 Тогда
			ТаблицаОснования.НоваяКолонка("СуммаНДС");
			ОснСуммаВклНДС = 0;
		Иначе
			ОснСуммаВклНДС = ДокОснование.СуммаВклНДС;
		КонецЕсли;
	КонецЕсли;
		
	ИтогСумма    = 0;
	ВывелиСтроку = 0;
			итогСумма 	= 0;
		итогНДС 	= 0;
		итогНП 		= 0;

	РаспредГТД = СоздатьОбъект("ТаблицаЗначений");
	РаспредГТД.НоваяКолонка("Колво", "Число", 14, 3);
	РаспредГТД.НоваяКолонка("Страна");
	РаспредГТД.НоваяКолонка("Номер");
	
	ТаблицаОснования . ВыбратьСтроки();
	Пока ТаблицаОснования.ПолучитьСтроку()=1 Цикл
		
		Если ВидОсн = "ВводОстатковПокупателя" Тогда
			ТаблицаОснования.Сумма = ТаблицаОснования.СуммаРуб - ТаблицаОснования.СуммаНДС - ТаблицаОснования.СуммаНП;
		Иначе
			Если ОснСуммаВклНП = 1 Тогда
				ТаблицаОснования.Сумма = ТаблицаОснования.Сумма - ТаблицаОснования.СуммаНП;
			КонецЕсли;
			
			Если ОснСуммаВклНДС = 1 Тогда
				ТаблицаОснования.Сумма = ТаблицаОснования.Сумма - ТаблицаОснования.СуммаНДС;
			КонецЕсли;
		
		КонецЕсли;
		
		МнЧ.НоваяСтрока();
		
		МнЧ.СтранаН      = "";
		МнЧ.НомерГТД     = "";
		МнЧ.АкцизЦена    = "";
		
		Если ПустоеЗначение(ТаблицаОснования.Сумма) = 1 Тогда
			МнЧ.Сумма		= "";
			МнЧ.СтавкаНДС	= "";
			МнЧ.СуммаНДС	= "";
			МнЧ.СуммаНП		= "";
			МнЧ.ВсегоСНДС	= "";
		Иначе
			МнЧ.Сумма        = глФРМ(глПересчет(ТаблицаОснования.Сумма,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1));
			МнЧ.СтавкаНДС	= ?(ТаблицаОснования.СтавкаНДС = Перечисление.СтавкиНДС.безНДС, " Без НДС ", Строка(ТаблицаОснования.СтавкаНДС));
			МнЧ.СуммаНДС	= ?(ТаблицаОснования.СтавкаНДС = Перечисление.СтавкиНДС.безНДС, " -- ", глФРМ(Окр(глПересчет(ТаблицаОснования.СуммаНДС,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1),2)));
			МнЧ.СуммаНП      = глФРМ(ТаблицаОснования.СуммаНП);  
			МнЧ.ВсегоСНДС    = глФРМ(глПересчет(ТаблицаОснования.Сумма + ТаблицаОснования.СуммаНДС,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1));
		КонецЕсли;
		
		Если ВидОсн = "РеализацияПрочее" Тогда
		    МнЧ.Номенклатура = ТаблицаОснования.Содержание;
			ВсегоКол         = 0;
			МнЧ.Количество   = ТаблицаОснования.Количество;
			ТекЕдиница       = "";
			
			МнЧ.Цена         = глФРМ(?(ТаблицаОснования.Количество = 0, 0, ТаблицаОснования.Сумма/ТаблицаОснования.Количество));
		ИначеЕсли ВидОсн = "ВводОстатковПокупателя" Тогда
			МнЧ.Номенклатура = ТаблицаОснования.ВидДолга;
			МнЧ.Количество   = 0;
			ТекЕдиница       = "";
			
			МнЧ.Цена         = "";
		Иначе
			МнЧ.Номенклатура = ТаблицаОснования.Номенклатура.ПолнНаименование;
			МнЧ.Количество   = ТаблицаОснования.Количество;
			ТекЕдиница       = ТаблицаОснования.Единица;
			ВсегоКол 	     = ТаблицаОснования.Количество;

			МнЧ.Цена         = ?(ТаблицаОснования.Количество = 0, 0, ТаблицаОснования.Сумма/ТаблицаОснования.Количество);
			МнЧ.Цена         = глФРМ(глПересчет(МнЧ.Цена,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1));
		КонецЕсли;
		
		итогСумма 	= ИтогСумма + глПересчет(ТаблицаОснования.Сумма,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);
		итогНДС 	= ИтогНДС + глПересчет(ТаблицаОснования.СуммаНДС,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);
		итогНП 		= ИтогНП + Число(МнЧ.СуммаНП);
		
		
		МнЧ.Единица      = ТекЕдиница;
		
		Если (МнЧ.Количество - Цел(МнЧ.Количество)) > 0 Тогда
		    ФорматКоличества = "Ч14.3";
		КонецЕсли;
		
		РаспредГТД.УдалитьСтроки();
		
		НомСтр		= 0;
		ОстКолво	= ВсегоКол;
		
		Если (ВидОсн <> "РеализацияПрочее")
		   и (ВидОсн <> "ВводОстатковПокупателя")
		Тогда
			
			ТекКоэфф	= ТаблицаОснования.Коэффициент;
			ОстКолво	= ОстКолво * ТекКоэфф;

			Пока (ОстКолво > 0) 
			и    (ТаблицаГТД.НайтиЗначение(ТаблицаОснования.Номенклатура, НомСтр, "Номенклатура") <> 0)
			Цикл
				
				ТаблицаГТД.ПолучитьСтрокуПоНомеру(НомСтр);
				
				СписКолво	= Мин(ОстКолво, ТаблицаГТД.Количество);
				
				РаспредГТД.НоваяСтрока();
				РаспредГТД.Колво  = ?(ТекКоэфф = 0, СписКолво, СписКолво / ТекКоэфф);
				РаспредГТД.Номер  = ТаблицаГТД.ГТД;
				РаспредГТД.Страна = ТаблицаГТД.СтранаПроисхождения;
				
				ТаблицаГТД.Количество = ТаблицаГТД.Количество - СписКолво;
				Если ТаблицаГТД.Количество <= 0 Тогда
					// если по ГТД все списали, то удаляем строку
					ТаблицаГТД.УдалитьСтроку();
				КонецЕсли;
				
				ОстКолво = ОстКолво - СписКолво;
				НомСтр   = 0;
			КонецЦикла;
			
			Если (ОстКолво > 0)
			   и (ОстКолво < (ВсегоКол * ТекКоэфф))
			Тогда
				// только часть товара распределилась по ГТД
				РаспредГТД.НоваяСтрока();
				РаспредГТД.Колво  = ?(ТекКоэфф <> 0, ОстКолво / ТекКоэфф, ОстКолво);
				РаспредГТД.Номер  = "";
				РаспредГТД.Страна = "";
			КонецЕсли;
			
			РаспредГТД.Свернуть("Номер, Страна", "Колво");
			
			Если РаспредГТД.КоличествоСтрок() = 1 Тогда
				
				РаспредГТД.ПолучитьСтрокуПоНомеру(1);
				МнЧ.НомерГТД = РаспредГТД.Номер;
				МнЧ.СтранаН  = РаспредГТД.Страна;
				если (ПустаяСтрока(МнЧ.НомерГТД) = 1) и (сокрЛП(МнЧ.СтранаН)<>"") тогда
					МнЧ.НомерГТД="-----";
					МнЧ.СтранаН ="-----";
				КонецЕсли;		
				
			Иначе
				
				РаспредГТД.ВыбратьСтроки();
				Пока РаспредГТД.ПолучитьСтроку() = 1 Цикл
					
//					МнЧ.НоваяСтрока();
//					МнЧ.Номенклатура = "     в т.ч.";
//					МнЧ.Цена		 = " ----- ";
//					МнЧ.Сумма		 = " ----- ";
//					МнЧ.СтавкаНДС	 = " -- ";
//					МнЧ.СуммаНДС	 = " -- ";
//					МнЧ.СуммаНП		 = " -- ";
//					МнЧ.ВсегоСНДС	 = " ----- ";
					
//					МнЧ.Единица     = ТекЕдиница;
//					МнЧ.Количество  = РаспредГТД.Колво;
//					МнЧ.НомерГТД    = РаспредГТД.Номер;
//					МнЧ.СтранаН     = РаспредГТД.Страна;
					
//					Если (МнЧ.Количество - Цел(МнЧ.Количество)) > 0 Тогда
//					    ФорматКоличества = "Ч14.3";
//					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;// по строкам таблицы основания
	
	Если ПустоеЗначение(ФорматКоличества) = 1 Тогда
	    ФорматКоличества	= "Ч010.0";
	КонецЕсли;
	
	Итоги = СоздатьОбъект("СписокЗначений");
	Итоги.ДобавитьЗначение(ИтогСумма	, "ИтогСумма");
	Итоги.ДобавитьЗначение(ИтогНДС, "ИтогСуммаНДС");
	Итоги.ДобавитьЗначение(ИтогСумма + ИтогНДС, "ИтогВсегоСНДС");
	Итоги.ДобавитьЗначение(ИтогНП,  "ИтогСуммаНП");

	Возврат "";
КонецФункции // ПодготовитьМнЧосн()
        
//******************************************************************************
// ПодготовитьПоКнигеПродаж(ИсхТабл)
//
// Параметры:
//  Табл             - подготовленная таблица
//  Итоги            - список значений, содержаний итоговые значения сумм документа
//  ФорматКоличества - формат для вывода в колонку количество
//  ИмяНоменклатуры  - строка, которая будет присвоена ячейкам результирующей таблицы
//                     в колонке Номенклатура.
//
// Возвращаемое значение:
//  "пустую строку" - если таблица подготовлена, или строку с описанием ошибки.
//
// Описание:
//  формирует таблицу значений для печати. Значения для таблицы беруться из 
//  движений документа  по регистру книга продаж.
//
Функция ПодготовитьПоКнигеПродаж(МнЧ, Итоги, ФорматКоличества, ИмяНоменклатуры)
	
	Перем РегКнигаПродаж;
	
	РегКнигаПродаж = СоздатьОбъект("Регистр.КнигаПродаж");
	
	СоздатьСтруктуру(МнЧ);
	
	ИтогСумма     = 0;
	ИтогСуммаНДС  = 0;
	ИтогВсегоСНДС = 0;
	ИтогСуммаНП   = 0;
	
	РегКнигаПродаж.ВыбратьДвиженияДокумента(ДокОснование);
	Пока РегКнигаПродаж.ПолучитьДвижение() = 1 Цикл
		Если РегКнигаПродаж.Приход = 1 Тогда
		    
			Поз = 0;
			ВремИтогСумма = РегКнигаПродаж.СуммаРуб - РегКнигаПродаж.СуммаНДС - РегКнигаПродаж.СуммаНП;
			
			Если МнЧ.НайтиЗначение(РегКнигаПродаж.СтавкаНДС, Поз, "СтавкаНДС") = 0 Тогда
			    МнЧ.НоваяСтрока();
				МнЧ.СтранаН      = "";
				МнЧ.НомерГТД     = "";
				МнЧ.Номенклатура = ИмяНоменклатуры;
				МнЧ.Единица      = "";
				МнЧ.Количество   = "";
				МнЧ.СтавкаНДС    = РегКнигаПродаж.СтавкаНДС;
				МнЧ.СуммаНДС     = РегКнигаПродаж.СуммаНДС;
				МнЧ.СуммаНП      = РегКнигаПродаж.СуммаНП;
				МнЧ.Сумма        = ВремИтогСумма;
				МнЧ.ВсегоСНДС    = РегКнигаПродаж.СуммаРуб;
				
				МнЧ.Цена         = "";
			Иначе
				МнЧ.ПолучитьСтрокуПоНомеру(Поз);
				МнЧ.СуммаНДС     = МнЧ.СуммаНДС  + РегКнигаПродаж.СуммаНДС;
				МнЧ.СуммаНП      = МнЧ.СуммаНП   + РегКнигаПродаж.СуммаНП;
				МнЧ.Сумма        = МнЧ.Сумма     + ВремИтогСумма;
				МнЧ.ВсегоСНДС    = МнЧ.ВсегоСНДС + РегКнигаПродаж.СуммаРуб;
			КонецЕсли;
			
			
			ИтогСуммаНП   = ИтогСуммаНП   + РегКнигаПродаж.СуммаНП;
			ИтогСумма     = ИтогСумма     + ВремИтогСумма;
			ИтогВсегоСНДС = ИтогВсегоСНДС + РегКнигаПродаж.СуммаРуб;
			
		КонецЕсли;
	КонецЦикла;
	                                 
	Итоги = СоздатьОбъект("СписокЗначений");
	//Итоги.ДобавитьЗначение(ИтогСумма	, "ИтогСумма");
	Итоги.ДобавитьЗначение(ИтогСуммаНДС	, "ИтогСуммаНДС");
	Итоги.ДобавитьЗначение(ИтогВсегоСНДС, "ИтогВсегоСНДС");
	Итоги.ДобавитьЗначение(ИтогСуммаНП	, "ИтогСуммаНП");

	Возврат "";
	
КонецФункции // ПодготовитьПоКнигеПродаж()

//******************************************************************************
// ПодготовитьМнЧ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Функция ПодготовитьМнЧ(МнЧ, Итоги, ФорматКоличества)
	
	Итоги = СоздатьОбъект("СписокЗначений");
	СоздатьСтруктуру(МнЧ);
	
	ИтогСумма          = 0;
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		
		МнЧ.НоваяСтрока();
		
		ВывелиСтроку     = 1;
		МнЧ.Номенклатура = СокрП(Наименование);
		МнЧ.Единица      = Единица;
		МнЧ.Количество   = Количество;
		МнЧ.АкцизЦена    = " -- ";
		
		Если ПустоеЗначение(Сумма) = 1 Тогда
			МнЧ.Цена		= "";
			МнЧ.Сумма		= "";
			МнЧ.СтавкаНДС	= " Без НДС ";
			МнЧ.СуммаНДС	= "";
			МнЧ.СуммаНП		= "";
			МнЧ.ВсегоСНДС	= "";
		ИначеЕсли (СтавкаНДС = Перечисление.СтавкиНДС.НДС20_120) или (СтавкаНДС = Перечисление.СтавкиНДС.НДС10_110) Тогда
			МнЧ.Сумма		= глФРМ(глПересчет(Сумма - СуммаНП,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1));
			ИтогСумма		= ИтогСумма + глПересчет(Сумма - СуммаНП,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1);
			МнЧ.Цена		= ?(Количество = 0, 0, глФРМ(глПересчет(Цена - СуммаНП/ Количество,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1)));
			МнЧ.СтавкаНДС	= Строка(СтавкаНДС);
			МнЧ.СуммаНДС	= глФРМ(Окр(глПересчет(СуммаНДС,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1),2));
			МнЧ.ВсегоСНДС	= глФРМ(глПересчет(Сумма - СуммаНП,ДокОснование.Валюта, ДокОснование.Курс,Константа.ВалютаСчетовФактур,1));                                                 
		Иначе
			МнЧ.Сумма		= глФРМ(Сумма - СуммаНДС - СуммаНП);
			ИтогСумма		= ИтогСумма + Сумма - СуммаНДС - СуммаНП;
			МнЧ.Цена		= ?(Количество = 0, 0, глФРМ(Цена - (СуммаНДС + СуммаНП)/ Количество));
			МнЧ.СтавкаНДС	= ?(СтавкаНДС = Перечисление.СтавкиНДС.безНДС, " Без НДС ", Строка(СтавкаНДС));
			МнЧ.СуммаНДС	= ?((СтавкаНДС = Перечисление.СтавкиНДС.безНДС) или (ПустоеЗначение(СтавкаНДС) = 1), " -- ", глФРМ(СуммаНДС));
			МнЧ.ВсегоСНДС	= глФРМ(Сумма - СуммаНП);                                                 
		КонецЕсли;
		
	
		
		
		
		Если ПустоеЗначение(СтранаПроисхождения)=1 Тогда
			МнЧ.СтранаН		= "";
			
			//Если не указал страну, и указал Номер ГТД, то зачем-то это было нужно
			Если ПустаяСтрока(ГТД) = 1 Тогда        
				МнЧ.НомерГТД	= "";
			Иначе
				МнЧ.НомерГТД	= ГТД;
			КонецЕсли;
		Иначе
			МнЧ.СтранаН	= СтранаПроисхождения;
			// Если номер пустой, и указана страна, то позволяем потом вписать номер ГТД 
			// в напечатанном документе руками
			если (ПустаяСтрока(ГТД) = 1) и (сокрЛП(МнЧ.СтранаН)<>"") тогда
				МнЧ.НомерГТД="-----";
				МнЧ.СтранаН ="-----";
			иначе
				МнЧ.НомерГТД	= ГТД;
			конецЕсли;
		КонецЕсли;
	
		Если Количество - Цел(Количество) > 0 Тогда
			ФорматКоличества	= "Ч14.3";
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустоеЗначение(ФорматКоличества) = 1 Тогда
	    ФорматКоличества	= "Ч10.0";
	КонецЕсли;
	
	//Итоги.ДобавитьЗначение(глФРМ(ИтогСумма), "ИтогСумма");
	Итоги.ДобавитьЗначение(Итог("СуммаНДС"), "ИтогСуммаНДС");
	Итоги.ДобавитьЗначение(Итог("Сумма")-Итог("СуммаНП"), "ИтогВсегоСНДС");
	Итоги.ДобавитьЗначение(Итог("СуммаНП"), "ИтогСуммаНП");

	Возврат "";
	
КонецФункции // ПодготовитьМнЧ()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1,ЖукПикта)
	
	Перем МнЧ, Итоги, ФорматКоличества;
	Перем ТекстВал;
	Перем РеквШапки;

	ИсхТабл = СоздатьОбъект("Таблица");
	 	Если ЖукПикта = "Пикта"Тогда 
	 		ИсхТабл.ИсходнаяТаблица("Таблица");
	 	ИначеЕсли  ЖукПикта = "Жук"Тогда
	 		ИсхТабл.ИсходнаяТаблица("Жук");  
	 	ИначеЕсли  ЖукПикта = "Филиппов"Тогда
	 		ИсхТабл.ИсходнаяТаблица("Филиппов");
	 	ИначеЕсли  ЖукПикта = "Орлинский"Тогда
	 		ИсхТабл.ИсходнаяТаблица("Орлинский");
	 	ИначеЕсли  ЖукПикта = "Елистратов"Тогда
	 		ИсхТабл.ИсходнаяТаблица("Елистратов");	
	 	КонецЕсли;
	ПодготовитьРеквизитыШапки(РеквШапки);
	
	Если (КоличествоСтрок() = 0) И (ПустоеЗначение(ДокОснование) = 0) Тогда
		ВидОсн = ДокОснование.Вид();
		
		Если ВидОсн = "ОтчетКомитенту" Тогда
            ПодготовитьПоКнигеПродаж(МнЧ, Итоги, ФорматКоличества, "Комиссионное вознаграждение");
			ПечВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли ВидОсн = "ЗакрытиеМесяца" Тогда
            ПодготовитьПоКнигеПродаж(МнЧ, Итоги, ФорматКоличества, "Корректировка начисленного НДС");
			ПечВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли ВидОсн = "ВводОстатковПокупателя" Тогда
			ПодготовитьМнЧосн(МнЧ, Итоги, ФорматКоличества, "ПартииНаличие");
			ПечВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли ВидОсн = "ОтчетКомиссионера" Тогда
			ПодготовитьМнЧосн(МнЧ, Итоги, ФорматКоличества, "ПартииОтданные");
			ПечВалюта = Константа.ВалютаСчетовФактур;
		ИначеЕсли (ВидОсн = "ПКО") ИЛИ (ВидОсн = "КорректировкаДолга") Тогда
			ПодготовитьМнЧ(МнЧ, Итоги, ФорматКоличества);
			ПечВалюта = Константа.ВалютаСчетовФактур;
		Иначе
		    // есть основание и пустая табличная часть
			ПодготовитьМнЧосн(МнЧ, Итоги, ФорматКоличества, "ПартииНаличие");
			ПечВалюта = Константа.ВалютаСчетовФактур;
		КонецЕсли;
	Иначе
		ПодготовитьМнЧ(МнЧ, Итоги, ФорматКоличества);
		ПечВалюта = Валюта;
	КонецЕсли;
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = ИсхТабл.ВысотаСекции("Заголовок");
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	
	// повторим шапку таблицы на каждой странице
//	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	МнЧ.ВыбратьСтроки();
	Пока МнЧ.ПолучитьСтроку() = 1 Цикл
		//МЭТР+  12.01.12
		если (мнЧ.НомерГТД="-----")или (пустоезначение(мнЧ.НомерГТД)=1) тогда
			Если МнЧ.Номенклатура.НомерГТД.выбран()=1 тогда
				мнЧ.НомерГТД=МнЧ.Номенклатура.НомерГТД;
			конецЕсли;
		конецЕсли;
		//МЭТР
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
	
	ИтогСуммаНП = Итоги.Получить("ИтогСуммаНП");
	Если ИтогСуммаНП = 0 Тогда
	    ПечИтогНП	= "";
	Иначе
		ПечИтогНП	= "Сумма налога с продаж: " + глФРМ(ИтогСуммаНП, ПечВалюта);
	КонецЕсли;
    
	
	        НаСумму	= "на сумму " + глСуммаПрописью(Итоги.Получить("ИтогВсегоСНДС"), глРубли) + " в т.ч. НДС " +глСуммаПрописью(Итоги.Получить("ИтогСуммаНДС"), глРубли)  ;

	ИсхТабл.ВывестиСекцию("Подвал");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0, 0, 0, 0, "ДляСчетаФактурыВыданного", "ДляСчетаФактурыВыданного");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	вызывается по кнопке печать
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;
    
	Если сокрЛП(глПользователь.Полномочия)="Менеджер" тогда
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", нет ИНН - печать официального документа запрещена!");
			НеПроводитьДокумент();
		//	Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан юр. адрес - печать официального документа запрещена!");
			НеПроводитьДокумент();
		//	Возврат;
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Предупреждение("Внимание! У "+контрагент+", не указан факт. адрес - печать официального документа запрещена!");
			НеПроводитьДокумент();
	//		Возврат;  
//	++Горлач
//	Разрешаем менеджерам печать счетов-фактур без КПП (у ИП их нет). Для этого комментим проверку на ввод КПП.
//		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (ДокОснование.Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
//			Предупреждение("Внимание! У "+контрагент+", нет КПП - печать официального документа запрещена!");
			НеПроводитьДокумент();
			Возврат;
		КонецЕсли;
	иначе
		Если (пустоезначение(Контрагент.ЮрФизЛицо.ИНН)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Сообщить("Внимание! У "+контрагент+", нет ИНН!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ЮрАдрес)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Сообщить("Внимание! У "+контрагент+", не указан юр. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.ФактАдрес)=1) и (ДокОснование.Проект.Экспортируемый=1) тогда
			Сообщить("Внимание! У "+контрагент+", не указан факт. адрес!");
		иначеЕсли (пустоезначение(Контрагент.ЮрФизЛицо.КПП)=1) и (ДокОснование.Проект.Экспортируемый=1) и (Контрагент.ЮрФизЛицо.Вид()="ЮрЛица") тогда
			Сообщить("Внимание! У "+контрагент+", нет КПП!");
		КонецЕсли;
	КонецЕсли;
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	  
	//Валерий МЭТР
	//Если (НомерТекущейФормы = 1)  Тогда
	//	
	//	//++Горлач 16.09.09
	//	СпОтветственныхСтарый = СоздатьОбъект("СписокЗначений");
	//	СпОтветственныхСтарый.ДобавитьЗначение("Пикта СчФ старый");
	//	СпОтветственныхСтарый.ДобавитьЗначение("Жук СчФ старый");
	//	СпОтветственныхСтарый.ДобавитьЗначение("Филиппов СчФ старый");
	//	СпОтветственныхСтарый.ДобавитьЗначение("Орлинский СчФ старый");
	//	СпОтветственныхСтарый.ДобавитьЗначение("Елистратов СчФ старый");
	//	ВыбОтв 		= ""; 
	//	ПозСп             = ""; 
	//	Если СпОтветственныхСтарый.ВыбратьЗначение(ВыбОтв,"Выберите ответственного",ПозСп,,1) = 1 Тогда
	//		Параметры = СоздатьОбъект("СписокЗначений");
	//		Параметры.ДобавитьЗначение(ТекущийДокумент(), "Контекст");
	//		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
	//		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
	//		Параметры.ДобавитьЗначение(ВыбОтв,"Ответственный");
	//		Если  ПозСп = 1 Тогда
	//			ЖукПикта = "Пикта"; 
	//			Печать(СразуНаПринтер, КолЭкз, ЖукПикта);	
	//		ИначеЕсли ПозСп = 2 Тогда
	//			ЖукПикта = "Жук"; 
	//			Печать(СразуНаПринтер, КолЭкз, ЖукПикта);
	//		ИначеЕсли ПозСп = 3 Тогда
	//			ЖукПикта = "Филиппов"; 
	//			Печать(СразуНаПринтер, КолЭкз, ЖукПикта);
	//		ИначеЕсли ПозСп = 4 Тогда
	//			ЖукПикта = "Орлинский"; 
	//			Печать(СразуНаПринтер, КолЭкз, ЖукПикта);
	//		ИначеЕсли ПозСп = 5 Тогда
	//			ЖукПикта = "Елистратов"; 
	//			Печать(СразуНаПринтер, КолЭкз, ЖукПикта);	
	//	КонецЕсли;
	//
	//	Иначе
	//		Возврат;
	//	КонецЕсли;  
	////--Горлач		
	//	
	////	ЖукПикта = "Пикта"; 
	////	Печать(СразуНаПринтер, КолЭкз, ЖукПикта); 
	////ИначеЕсли  (НомерТекущейФормы = 2) Тогда 
	////	 	ЖукПикта = "Жук";  
	////	Печать(СразуНаПринтер, КолЭкз, ЖукПикта); 	
	////ИначеЕсли  (НомерТекущейФормы = 3) Тогда 
	////	 	ЖукПикта = "Филиппов"; 	 	
	////	Печать(СразуНаПринтер, КолЭкз, ЖукПикта); 
	////ИначеЕсли  (НомерТекущейФормы = 4) Тогда 
	////	 	ЖукПикта = "Орлинский"; 	 	
	////	Печать(СразуНаПринтер, КолЭкз, ЖукПикта);	
	//ИначеЕсли  (НомерТекущейФормы = 2) Тогда 
	Если  (НомерТекущейФормы = 1) Тогда
		//++
		//Добавлено КАГ 30.06.09
		СразуНаПринтер = 1;
		СпОтветственных = СоздатьОбъект("СписокЗначений"); 
		
		//Валерий МЭТР
		СпОтветственных.ДобавитьЗначение("Без доверенности");
		Если Найти(Фирма.Наименование,"Бизнес-Сервис") = 0 Тогда
			СпОтветственных.ДобавитьЗначение("Жук Д.А.");
			СпОтветственных.ДобавитьЗначение("Пикта В.А.");
		КонецЕсли;
		              		
		//СпОтветственных.ДобавитьЗначение("Пикта В.А.");
		//СпОтветственных.ДобавитьЗначение("Жук Д.А.");
		//СпОтветственных.ДобавитьЗначение("Филиппов В.В.");
		//СпОтветственных.ДобавитьЗначение("Орлинский Е.В."); 
		//СпОтветственных.ДобавитьЗначение("Елистратов Е.Н.");
		ВыбОтвет 		= ""; 
		Доверенность    = "";
		поз             = "";
		Если СпОтветственных.ВыбратьЗначение(ВыбОтвет,"Выберите ответственного",поз,,1) = 1 Тогда
			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.ДобавитьЗначение(ТекущийДокумент(), "Контекст");
			Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
			Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
			Параметры.ДобавитьЗначение(ВыбОтвет,"Ответственный");
			//Валерий МЭТР 
			Если  поз = 1 Тогда
				Доверенность = "";	
			ИначеЕсли поз = 2 Тогда
				Доверенность = "на основании доверенности №2 от 02.11.10";
			ИначеЕсли поз = 3 Тогда
				Доверенность = "на основании доверенности №3 от 01.03.11";
			КонецЕсли;
			
			//Если  поз = 1 Тогда
			//	Доверенность = "на основании доверенности №4 от 18.12.07";	
			//ИначеЕсли поз = 2 Тогда
			//	Доверенность = "на основании доверенности №5 от 18.12.07";
			//ИначеЕсли поз = 3 Тогда
			//	Доверенность = "на основании доверенности б/н от 05.06.09";
			//ИначеЕсли поз = 4 Тогда
			//	Доверенность = "на основании доверенности б/н от 05.06.09";
			//КонецЕсли;
		
			Параметры.ДобавитьЗначение(Доверенность,"Доверенность");
			ОткрытьФорму("Отчет.СчетФактура", Параметры);
		Иначе
			Возврат;
		КонецЕсли;	
		//-- 
	Иначе
	    Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(ТекущийДокумент(), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  Открывает список с выбором способа печати. После выбора способа формирует
//  таблицу по выбранному способу.

Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
                                                  
//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Контрагент".
//
// Описание:
//  Проверяем соответствие выбранных договора и контрагента.
//
Процедура ПриИзмененииКонтрагента()
	
	Если Договор.Владелец <> Контрагент Тогда 
		Договор = "";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Договор = Контрагент.ОсновнойДоговор;
	КонецЕсли;                    
	
КонецПроцедуры // ПриИзмененииКонтрагента()        

//*****************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Договор".
//
// Описание:
//  Проверяем соответствие выбранных договора и контрагента.
//
Процедура ПриИзмененииДоговора()
	
	Если (Договор.Владелец <> Контрагент)
	и    (Договор.Выбран() =  1)
	Тогда 
		Контрагент = Договор.Владелец;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()        

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                                                 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	Перем ОписаниеОш;
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		               """ нельзя вводить на основании """ + СинонимОснования + """",60);
		СтатусВозврата(0);Возврат;
	КонецЕсли;
	              
	Если ДополнительнаяПроверкаОснования(ДокументОснование, ОписаниеОш) = 0 Тогда
	    Предупреждение(ОписаниеОш, 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// документ основание должен быть проведен
	//Если ДокументОснование.Проведен() = 0  Тогда
	//	Предупреждение("Документ """ + ПредставлениеВида() + """ нельзя вводить на основании не проведенного документа!",60);
	//	СтатусВозврата(0);
	//	Возврат;
	//КонецЕсли;
	           
	// Проверим, чтобы не было дублирования СФ
	Сообщение	= "";
	Подчиненные	= СоздатьОбъект("Документ");
	Подчиненные.ВыбратьПодчиненныеДокументы(, , ДокументОснование.ТекущийДокумент());
	Пока Подчиненные.ПолучитьДокумент() = 1 Цикл
		// должен быть счет_фактурой
		Если Подчиненные.Вид() = "СчетФактураВыданный" Тогда
			// не помеченным на удаление
			Если Подчиненные.ПометкаУдаления() = 0 Тогда
				
				Сообщение	= "На основании документа " + 
				              ДокументОснование.ПредставлениеВида() + " " + СокрП(ДокументОснование.НомерДок) + " от " + ДокументОснование.ДатаДок + " " +
				              "уже выписан документ " + ПредставлениеВида() + " " + СокрП(Подчиненные.НомерДок) + " от " + Подчиненные.ДатаДок + ". " +
							  "Нельзя выписывать другой!";
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Сообщение) = 0 Тогда
		// есть сообщение, значит есть дубль
		Предупреждение(Сообщение,60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	
	ДатаДок = ДокументОснование.ДатаДок;  
	// все нормально, заполняем СФ на основании документа - основания
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	Валюта = Константа.ВалютаСчетовФактур;
	
	АвтоКнигаПродаж = 1;
	УчитыватьНДС 	= 1;
	СуммаВклНДС  	= 1;
	УчитыватьНП  	= 1;
	СуммаВклНП   	= 1;
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;

КонецПроцедуры // ВводНаОсновании()        

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	   
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда
		// если документ скопирован, то основание нужно очистить
		ДокОснование = "";
		Возврат;
	КонецЕсли;          
	
	УчитыватьНДС = 1;
	СуммаВклНДС  = 1;
	УчитыватьНП  = 1;
	СуммаВклНП   = 1;
	
КонецПроцедуры    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()
	
	Если Форма.Параметр="ПровестиИЗакрыть" Тогда
		Провести(0);
		Форма.Закрыть();		
	ИначеЕсли Форма.Параметр="СнятьСПроведенияИЗакрыть" Тогда
		СделатьНеПроведенным();
		Форма.Закрыть();
	КонецЕсли;
	
	//++Валерий МЭТР: просмотор только "своих" документов
	Если (сокрЛП(глПользователь.Полномочия) = "Администратор_магазина")или(сокрЛП(глПользователь.Полномочия) = "Администратор_магазина1") Тогда
		Если (ПустоеЗначение(Автор) = 0) И (Автор <> глПользователь) Тогда
			Предупреждение("Вы не имеете правдо доступа к этому документу!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР
	                      
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "Записать" Тогда
			ДатаДок = Парам.Получить("ДатаСчета");
			УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
			
			АвтоВремяКонецДня();
			Записать();
			СтатусВозврата(0);
			Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	Иначе
		КонтекстОснования = Парам;	
	КонецЕсли; 
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		  	= Фирма;  
	НачальнаяДатаДокумента  = ДатаДок;
 	
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
    
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
                                      
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  

	УстановкаНаличияЗакладок();  
	УстановкаФлагаАвтоКнигаПродаж();    
	УправлениеДоступностью();
                                 
КонецПроцедуры // ПриОткрытии()     
              
//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью(НомерЗакладки);
	Если НомерЗакладки = 2 Тогда
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры  // ПриВыбореЗакладки()
              
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	
	Если (ИдентЭлемДиалога = "Наименование") 
	   и (ПустоеЗначение(ВыбЗнач)=0) 
       Тогда
		Наименование = ВыбЗнач.ПолнНаименование;    
		
		// Если в справочнике заданы ГТД и (или) Страна, то 
		// подставим их по умолчанию.
		Если ВыбЗнач.НомерГТД.Выбран() = 1 Тогда
			ГТД = ВыбЗнач.НомерГТД;
		КонецЕсли;
		
		Если ВыбЗнач.СтранаПроисхождения.Выбран() = 1 Тогда
			СтранаПроисхождения = ВыбЗнач.СтранаПроисхождения;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога)
	
	Если ИдентЭлемДиалога = "Наименование" Тогда
		ОткрытьФорму("Справочник.Номенклатура");
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    
	Если СтатусВозврата()<> 0  Тогда
		Валюта = глРубли; 
		Курс   = 1;
		
		Если (ДокОснование.Выбран() = 1) Тогда
			Фирма  = ДокОснование.Фирма; // перезапишем реквизит.
			ВидОсн = ДокОснование.Вид();
			Если (глЕстьРеквизитШапки("Валюта",ВидОсн) = 1)
			и    (СФНаАванс = 0)
			и    ((ВидОсн <> "ОтчетКомитенту") и (ВидОсн <> "ЗакрытиеМесяца"))
			Тогда
				Валюта = ДокОснование.Валюта;
				Курс   = ДокОснование.Курс;
			КонецЕсли;    
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры       

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ТипЗначения(КонтекстОснования) = 100 Тогда
		// Документ основание еще открыт
		Если Выбран() = 1 Тогда
			КонтекстОснования.Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(ТекущийДокумент()));
		КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "СчФ старый";
//ТаблицаПечФорм.Кнопка       = "СчФ старый"; 

//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "Жук";
//ТаблицаПечФорм.Кнопка       = "Жук";  
//
//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "Филиппов";
//ТаблицаПечФорм.Кнопка       = "Филиппов";  
//
//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "Орлинский";
//ТаблицаПечФорм.Кнопка       = "Орлинский"; 

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Счф 09.06.2009";
ТаблицаПечФорм.Кнопка       = "Счф 09.06.2009";
