////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;

Перем ТекущийДолг;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	
	ТекстВсего = ?(КодОперации = глКО.КорректировкаОтгрузкиСторнированиеНП,"Всего (","Сумма (");
	Форма.РамкаВсего	.Заголовок(ТекстВсего + ТекстВалюты(Договор.ВалютаВзаиморасчетов) + ")");
	Форма.СуммаВал      .Заголовок(ТекстВсего + ТекстВалюты(Договор.ВалютаВзаиморасчетов) + ")");
	Форма.РамкаНП		.Заголовок("НП (" + ТекстВалюты(глРубли) + ")");
	Форма.СуммаНП		.Заголовок("НП (" + ТекстВалюты(глРубли) + ")");
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()         
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************        
// ПересчетТаблЧасти()
// 
// Параметры: 
//  ИдКолонки - колонка табличной части из которой вызвана процедура
//
// Возвращаемое значение: 
//  Нет 
//
// Описание:
// 	Вызывается из формул табличной части диалога
// 	Производит пересчет сумм в строке таблицы.
//
Процедура ПересчетТаблЧасти(ИдКолонки) 
	Если (ИдКолонки = "СуммаВал")
	 или (ИдКолонки = "СтавкаНП") Тогда
	 	СуммаРуб = глПереСчет(СуммаВал, Договор.ВалютаВзаиморасчетов, ДатаДок, глРубли, ДатаДок);
	 	Если КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП  Тогда
			СуммаНП = Окр((СуммаРуб * СтавкаНП.Ставка) / 100, 2);  // Сумма без НП  
		Иначе
			СуммаНП = Окр((СуммаРуб * СтавкаНП.Ставка) /(СтавкаНП.Ставка + 100), 2); // Сумма с НП    
	 	КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПересчетТаблЧасти()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда

		// только если изменили
		Если КоличествоСтрок() > 0 Тогда
			Если Вопрос("При смене фирмы табличная часть документа будет очищена!
							    |Продолжить?","Да+Нет",60) <> "Да" Тогда
				Фирма = СтараяФирма;
				Возврат;
			Иначе
				УдалитьСтроки();
			КонецЕсли;    
		КонецЕсли;

		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда

		// только если изменили
		Если КоличествоСтрок() > 0 Тогда
			Если Вопрос("При смене договора табличная часть документа будет очищена!
							    |Продолжить?","Да+Нет",60) <> "Да" Тогда
				Договор = СтарыйДоговор;
				Возврат;
			Иначе
				УдалитьСтроки();
			КонецЕсли;    
		КонецЕсли;

		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();           
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда

		// только если изменили
		Если КоличествоСтрок() > 0 Тогда
			Если Вопрос("При смене контрагента табличная часть документа будет очищена!
							    |Продолжить?","Да+Нет",60) <> "Да" Тогда
				Контрагент = СтарыйКонтрагент;
				Возврат;
			Иначе
				УдалитьСтроки();
			КонецЕсли;    
		КонецЕсли;

		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()     

//*****************************************************************************
// ПоКнопкеВалюты()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеВалюты()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	
КонецПроцедуры	//ПоКнопкеВалюты()
                                      
//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремКодОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(глКО.КорректировкаОтгрузкиНачислениеНП);
	СписокОпераций.ДобавитьЗначение(глКО.КорректировкаОтгрузкиСторнированиеНП);
	
	Если СписокОпераций.ВыбратьЗначение(ВремКодОперации,,,,1)=1 Тогда

		Если ВремКодОперации <> КодОперации Тогда
			// только если изменили
			Если КоличествоСтрок() > 0 Тогда
				Если Вопрос("При смене вида операции табличная часть документа будет очищена!
								    |Продолжить?","Да+Нет",60)  <> "Да"  Тогда
					Возврат;
				Иначе
					УдалитьСтроки();
				КонецЕсли;    
			КонецЕсли;

			КодОперации = ВремКодОперации;
			ОбновитьНадписи();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры	// ПоКнопкеОперация()
                   
//******************************************************************************
// ЗаполнениеПоИтогам(ДокОсн = "")
//
// Параметры: 
//  ДокОсн - Документ-основание (не обязательный). Если не передан, то заполнение итогами по договору
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть остатками долгов по документу основанию, а если его нет, то по договору
//
Процедура ЗаполнениеПоИтогам(ДокОсн = "")
	
	Перем ТабИтогов;

		
	// Должны быть выбраны фирма и договор
	Если Фирма.Выбран() = 0 Тогда
	    Предупреждение("Не выбрана фирма.",60);
		Возврат;
	КонецЕсли;

	Если Договор.Выбран() = 0 Тогда
	    Предупреждение("Не выбран договор.",60);
		Возврат;
	КонецЕсли;
    
	ВалютаВзаиморасчетов = Договор.ВалютаВзаиморасчетов;
	Если ТипЗначенияСтр(ДокОсн) <> "Документ" Тогда
		ДокОсн = ПолучитьПустоеЗначение("Документ");	    
	КонецЕсли;

	СтавкиДляОтбора = СоздатьОбъект("СписокЗначений");

	Если КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП Тогда

		СтавкиДляОтбора.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.СтавкиНП"));    

	ИначеЕсли КодОперации = глКО.КорректировкаОтгрузкиСторнированиеНП Тогда

		СпрСтавки = СоздатьОбъект("Справочник.СтавкиНП");
		СпрСтавки.ВыбратьЭлементы();	
		Пока СпрСтавки.ПолучитьЭлемент() = 1  Цикл
			Если СпрСтавки.Ставка <> 0 Тогда
				СтавкиДляОтбора.ДобавитьЗначение(СпрСтавки.ТекущийЭлемент());    
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	Если СтавкиДляОтбора.РазмерСписка() = 0 Тогда
		Возврат;    
	КонецЕсли;
	
	РегОбщ        = СоздатьОбъект("Регистры");
	РегПокупатели = РегОбщ.Покупатели;
	
	РегПокупатели.УстановитьЗначениеФильтра("Фирма",Фирма);
	РегПокупатели.УстановитьЗначениеФильтра("Договор",Договор);
	РегПокупатели.УстановитьЗначениеФильтра("СтавкаНП",СтавкиДляОтбора,2);

	Если ДокОсн.Выбран() = 1 Тогда
		РегПокупатели.УстановитьЗначениеФильтра("КредДокумент", ДокОсн);
	КонецЕсли;
	
		// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда //Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда // выписываемый задним числом
			РегПокупатели.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе // Сохраненный документ
		Если СравнитьТА() < 1 Тогда // Позиция не больше ТА
			РегПокупатели.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;

	РегПокупатели.ВыгрузитьИтоги(ТабИтогов,1,1);
	ТабИтогов.ВыбратьСтроки();
	Пока ТабИтогов.ПолучитьСтроку() = 1 Цикл
		
		// Заполняем только по документам, на основании которых может выписываться корректировка
		Если глПолучитьСписокВводимыхНаОсновании(ТабИтогов.КредДокумент).НайтиЗначение(Вид()) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
	    НоваяСтрока();

		КредДокумент = ТабИтогов.КредДокумент;
		ВидДолга     = ТабИтогов.ВидДолга;
		СуммаВал     = ТабИтогов.СуммаВал;
		
		Если КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП Тогда

			СтавкаНП = глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
			ПересчетТаблЧасти("СтавкаНП");

		ИначеЕсли КодОперации = глКО.КорректировкаОтгрузкиСторнированиеНП Тогда

			СтавкаНП = ТабИтогов.СтавкаНП; 
			СуммаНП  = ТабИтогов.СуммаНП;

		КонецЕсли;			

	КонецЦикла;
    
КонецПроцедуры // ЗаполнениеПоИтогам

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//                  
// Вызывается из формул диалога:
// по кнопке "Заполнить".
//
// Описание:
// 	Производит автоматическое заполнение табличной части документа
//
Процедура ПоКнопкеЗаполнить()
	Если КоличествоСтрок() > 0 Тогда
		Если Вопрос("Перед заполнением табличная часть будет очищена!
					|Продолжить?","Да+Нет",60) <> "Да" Тогда
			Возврат;
		Иначе
			УдалитьСтроки();
		КонецЕсли;    
	КонецЕсли;

	ЗаполнениеПоИтогам();
КонецПроцедуры // ПоКнопкеЗаполнить()
	
//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
					   """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если ДокументОснование.УчитыватьНП = 1  Тогда
		КодОперации	= глКО.КорректировкаОтгрузкиСторнированиеНП;
	Иначе
		КодОперации	= глКО.КорректировкаОтгрузкиНачислениеНП;
	КонецЕсли;

	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	ЗаполнениеПоИтогам(ДокументОснование);
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	КодОперации	= глКО.КорректировкаОтгрузкиНачислениеНП;
    
КонецПроцедуры // ВводНового()   

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()     
	                        
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма			= Фирма;
	СтарыйДоговор		= Договор;
	СтарыйКонтрагент	= Контрагент;
	
	НачальнаяДатаДокумента	= ДатаДок;
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();

	ОбновитьНадписи();         
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеРедактированияСтроки()
	Если (Форма.ТекущаяКолонка() = "ОткрытьДокумент") Тогда
		Если КредДокумент.Выбран() = 1 Тогда
			ОткрытьФорму(КредДокумент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ПриНачалеРедактированияСтроки()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)

	Если ИдентЭлемДиалога = "КредДокумент" Тогда
		
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение("Контрагент","ВидОтбора");
		Параметры.ДобавитьЗначение( Контрагент ,"Параметр");

		СписокДляПроверки = СоздатьОбъект("СписокЗначений");
		СписокДляПроверки.ДобавитьЗначение(Фирма,"Фирма");
		СписокДляПроверки.ДобавитьЗначение(Контрагент,"Контрагент");
		СписокДляПроверки.ДобавитьЗначение(Договор,"Договор");
		СписокДляПроверки.ДобавитьЗначение("Реализация","ВидДокумента");

		Параметры.ДобавитьЗначение( СписокДляПроверки ,"СписокДляПроверки");
		
		ОткрытьФорму("Журнал.ЖурналОбщий.ФормаСОтбором",Параметры);
		
		ФлагСтандОбр = 0;
		
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// предопределенная процедура
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)

	Если ИдентЭлемДиалога = "КредДокумент" Тогда
		
		ФлагСтандОбр = 0;
		
		Если ВыбЗнач.Фирма <> Фирма Тогда
			Предупреждение("Значение, указанное в реквизите ""Фирма"" выбранного документа, не
						   |соответствует текущему документу ""Корректировка отгрузки"".",60);
		ИначеЕсли ВыбЗнач.Контрагент <> Контрагент Тогда
			Предупреждение("Значение, указанное в реквизите ""Контрагент"" выбранного документа, не
						   |соответствует текущему документу ""Корректировка отгрузки"".",60);
		ИначеЕсли ВыбЗнач.Договор <> Договор Тогда
			Предупреждение("Значение, указанное в реквизите ""Договор"" выбранного документа, не
						   |соответствует текущему документу ""Корректировка отгрузки"".",60);
		ИначеЕсли глПолучитьСписокВводимыхНаОсновании(ВыбЗнач).НайтиЗначение(Вид()) = 0 Тогда
			Предупреждение("Документ вида """ + СокрЛП(ВыбЗнач.Вид()) + """ не может корректироваться данным документом.",60);
		ИначеЕсли (КодОперации = глКО.КорректировкаОтгрузкиНачислениеНП)
		        и (ВыбЗнач.УчитыватьНП = 1) Тогда
			Предупреждение("По выбранному документу не надо доначислять налог с продаж.",60);
		ИначеЕсли (КодОперации = глКО.КорректировкаОтгрузкиСторнированиеНП)
		        и (ВыбЗнач.УчитыватьНП = 0) Тогда
			Предупреждение("По выбранному документу не надо сторнировать налог с продаж.",60);
		Иначе
			ФлагСтандОбр = 1;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);               
КонецПроцедуры // ПриЗаписи() 

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ
