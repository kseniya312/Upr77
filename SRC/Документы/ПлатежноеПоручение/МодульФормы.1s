////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем СтараяФирма; // для контроля необходимости пересчетов
Перем СтарыйКонтрагент, СтарыйДоговор;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПолучитьИНН(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//
Функция ПолучитьИНН(ИННКПП)
	
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	Иначе
		Возврат СокрЛП(ИННКПП);

	КонецЕсли;

КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ИННКПП)

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	Иначе
		Возврат "";

	КонецЕсли;

КонецФункции // ПолучитьКПП()

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Перечисление налога
//
// Описание:
//  Установка видимости слоев и реквизитов на закладках диалога.
//
Процедура УправлениеВидимостью()
	
	// Закладка "Основной"
	Форма.Закладки.Установить("Основной", "Шапка, Сумма, Подвал, Основной, Комментарий");
	// Закладка "Печать".
	Форма.Закладки.Установить("Печать",   "Шапка, Подвал, Печать, Назначение");
	
	// Установка текущей закладки - при открытии формы.
	Если Форма.Закладки.ТекущаяСтрока() = 0 Тогда
		Форма.Закладки.ТекущаяСтрока(1);
	КонецЕсли;
	
	// Текущая закладка.
	ТекущаяЗакладка = Форма.Закладки.ТекущаяСтрока();
	
	// Удаление лишних закладок.
	КоличествоЗакладок = 2;
	Пока КоличествоЗакладок < Форма.Закладки.РазмерСписка() Цикл
		Форма.Закладки.УдалитьЗначение(Форма.Закладки.РазмерСписка());
	КонецЦикла;
	
	Если ПеречислениеНалога = 1 Тогда
		// Закладка "Перечисление налогов" с дополнительными реквизитами платежки.
		Форма.Закладки.Установить("Перечисление налогов",     "Шапка, Подвал, ПеречислениеНалогов, Назначение");
		
	КонецЕсли;
	
	// Отображение текущей закладки.
	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(ТекущаяЗакладка), 2);
		
КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// СформироватьРеквизит(БанкСчет, РеквизитДокумента, РеквизитФормы, ЭлементДиалога)
//
// Параметры:
//  БанкСчет          - Справочник.БанковскиеСчета, элемент справочника по 
//                      которому формируется стандартное представление в 
//                      Платежных документах полей "Плательщик" и "Получатель".
//  РеквизитДокумента - строка – значение редактируемого реквизита в документе.
//  РеквизитФормы     - строка – значение реквизита в диалоге формы.
//  ЭлементДиалога    - строка – идентификатор редактируемго элемента диалога.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Процедура устанавливает доступность редактирования реквизитов 
// "Плательщик", "Получатель" и "Назначение". Если реквизит недоступен, данные  
// поля заполняются стандартным представлением.
//
Процедура СформироватьРеквизит(БанкСчет, РеквизитДокумента, РеквизитФормы, ЭлементДиалога)
	
	Если ПустаяСтрока(РеквизитДокумента) = 1 Тогда
		
		Если ЭлементДиалога = "НазначениеПлатежа" Тогда
			РеквизитФормы = глТекстНазначениеПлатежа(Контекст);
		Иначе
 			//косвенная подстановка согласно содержанию других реквизитов 
			РеквизитФормы = "";

			Параметры = СоздатьОбъект("СписокЗначений");
			Параметры.ДобавитьЗначение(БанкСчет, "БанковскийСчет");
			Параметры.ДобавитьЗначение(1,"Режим");
			глРеквизитыПлательщикаПолучателя(Параметры);
			РеквизитФормы = Параметры.Получить("Результат");
			
		КонецЕсли;

		Форма.ПолучитьАтрибут(ЭлементДиалога).Доступность(0);
	Иначе
		//явная подстановка из реквизита документа
		РеквизитФормы = РеквизитДокумента;
		Форма.ПолучитьАтрибут(ЭлементДиалога).Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // СформироватьРеквизит()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание";
	КонецЕсли;  
	
	ВидОсн = ДокОснование.Вид();
	Если (ВидОсн <> "ВозвратОтПокупателя") и
		 (ВидОсн <> "ЗаказПоставщику") и
		 (ВидОсн <> "ОтчетКомитенту") и
		 (ВидОсн <> "ПоступлениеТМЦ") и
		 (ВидОсн <> "ПоступлениеТМЦРозница") и
		 (ВидОсн <> "ПоступлениеПрочее") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
		

	Если (ВидОсн = "ВозвратОтПокупателя") Тогда
		
		//Возврат оплачиваем по курсу документа возврата
		Сумма = глПересчет(ДокОснование.Итог("Сумма") +
    	                   ?(ДокОснование.СуммаВклНДС = 1, 0,ДокОснование.Итог("СуммаНДС")) +
        	               ?(ДокОснование.СуммаВклНП = 1, 0,ДокОснование.Итог("СуммаНП")),
						   ДокОснование.Валюта, ДокОснование.Курс,
						   глРубли, ДатаДок);
						   
	Иначе // Оплачиваем сумму взаиморасчетов
						
		// Оплачиваем по умолчанию сумму, которую считаем нужным оплатить по взаиморасчетам
		Если ДокОснование.СуммаВзаиморасчетов = 0 Тогда
		    Сумма = 0;
		Иначе
			Сумма = глПересчет(ДокОснование.СуммаВзаиморасчетов,
							   ДокОснование.Договор.ВалютаВзаиморасчетов, ДатаДок,
							   глРубли, ДатаДок);
		КонецЕсли;					   
	КонецЕсли;					   
					   
	// если в каждой строке табличной части документа основания значение
	// ставки НДС отдно и тоже, то эту ставку и пропишем. Если имеются
	// разные ставки, то оставим реквизит СтавкаНДС незаполненным.
			
	Ставка = "";
	ДокОснование.ВыбратьСтроки();
	Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
		Если ДокОснование.НомерСтроки = 1 Тогда
			Ставка = ДокОснование.СтавкаНДС;
		Иначе
			Если Ставка <> ДокОснование.СтавкаНДС Тогда
				Ставка = "";
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(Ставка) = 0 Тогда
		СтавкаНДС = Ставка;
	КонецЕсли;

	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()
                    
//******************************************************************************
// ПоКнопкеЗаполнитьБанковскийСчет()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка кнЗаполнитьБанковскийСчет.
//
// Описание:
//
Процедура ПоКнопкеЗаполнитьБанковскийСчет()
	
	Если БанковскийСчет.Выбран() = 1 Тогда

		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(БанковскийСчет,"БанковскийСчет");
		// 1-заполнение плательщика или получателя, 2-заполнение назначения платежа
		Параметры.ДобавитьЗначение(1,"Режим");
		Параметры.ДобавитьЗначение("РеквизитыПлательщика","РеквизитРезультата");
		Параметры.ДобавитьЗначение(Контекст,"Контекст");
		ОткрытьФормуМодально("Обработка.ВводПлатежныхРеквизитов", Параметры);

		СформироватьРеквизит(БанковскийСчет, РеквизитыПлательщика, Плательщик, "Плательщик");
		Форма.Обновить();

	Иначе
		Предупреждение("Не выбран счет плательщика!", 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнитьБанковскийСчет()

//******************************************************************************
// ПоКнопкеЗаполнитьСчетКонтрагента()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка кнЗаполнитьСчетКонтрагента.
//
// Описание:
//
Процедура ПоКнопкеЗаполнитьСчетКонтрагента()
	
	Если СчетКонтрагента.Выбран() = 1 Тогда

		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(СчетКонтрагента,"БанковскийСчет");
		// 1-заполнение плательщика или получателя, 2-заполнение назначения платежа
		Параметры.ДобавитьЗначение(1,"Режим");
		Параметры.ДобавитьЗначение("РеквизитыПолучателя","РеквизитРезультата");
		Параметры.ДобавитьЗначение(Контекст,"Контекст");
		ОткрытьФормуМодально("Обработка.ВводПлатежныхРеквизитов", Параметры);

		СформироватьРеквизит(СчетКонтрагента, РеквизитыПолучателя, Получатель, "Получатель");

	Иначе
		Предупреждение("Не выбран счет получателя!", 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнитьСчетКонтрагента()

//******************************************************************************
// ПоКнопкеЗаполнитьНазначение()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка кнЗаполнитьНазначение.
//
// Описание:
//
Процедура ПоКнопкеЗаполнитьНазначение()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(СчетКонтрагента,"БанковскийСчет");
	// 1-заполнение плательщика или получателя, 2-заполнение назначения платежа
	Параметры.ДобавитьЗначение(2,"Режим");
	Параметры.ДобавитьЗначение("Назначение","РеквизитРезультата");
	Параметры.ДобавитьЗначение(Контекст,"Контекст");
	ОткрытьФормуМодально("Обработка.ВводПлатежныхРеквизитов", Параметры);

	СформироватьРеквизит("", Назначение, НазначениеПлатежа, "НазначениеПлатежа")
	
КонецПроцедуры // ПоКнопкеЗаполнитьНазначение()

//******************************************************************************
// ПриИзмененииСуммы()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Поля Сумма, СтавкаНДС.
//
// Описание:
//
Процедура ПриИзмененииСуммы()
	
	СформироватьРеквизит("", Назначение, НазначениеПлатежа, "НазначениеПлатежа");
	
КонецПроцедуры //ПриИзмененииСуммы()

//******************************************************************************
// ПоКнопкеПеречислениеНалога()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка КнПеречислениеНалога.
//
// Описание:
//
Процедура ПоКнопкеПеречислениеНалога(Контроль=0)
	
	СтавкаНДС = Перечисление.СтавкиНДС.БезНДС;
	ПриИзмененииСуммы();
	
	ПеречислениеНалога = 1;

	СписокПараметров = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(глВзятьКонтекст(Контекст),"Контекст");
	СписокПараметров.ДобавитьЗначение(СтатусСоставителяПлДок,"П101");
	СписокПараметров.ДобавитьЗначение(КодБК,"П104");
	СписокПараметров.ДобавитьЗначение(КодОКАТО,"П105");
	СписокПараметров.ДобавитьЗначение(ПоказательОснования,"П106");
	СписокПараметров.ДобавитьЗначение(ПоказательПериода,"П107");
	СписокПараметров.ДобавитьЗначение(ПоказательНомера,"П108");
	СписокПараметров.ДобавитьЗначение(?(ПустоеЗначение(ПоказательДаты)=1,"", Формат(ПоказательДаты,"Д ДДММГГГГ")),"П109");
	СписокПараметров.ДобавитьЗначение(ПоказательТипа,"П110");
	СписокПараметров.ДобавитьЗначение(Контроль,"Контроль");
	
	ОткрытьФормуМодально("Обработка.ПеречислениеНалога",СписокПараметров);
	
КонецПроцедуры // ПеречислениеНалога

//******************************************************************************
// ПоКнопкеОснование()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Основание".
//
// Описание:
//
Процедура ПоКнопкеОснование() 
	
	Перем Счетчик, СчетчикВложенный, ВводимыйДок, СтрокаВидов; 
	Перем Док;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Док=СоздатьОбъект("Документ");
	
	СтрокаВидов ="";
	ВидДокум=Вид();
	
	// нам нужно найти документы, на основании которых можно вводить наш документ
	Для Счетчик=1 По Метаданные.Документ() Цикл
		
		АнализДок 		= Метаданные.Документ(Счетчик);
		ВидАнализДок 	= АнализДок.Идентификатор;
		
		Для СчетчикВложенный =1 По АнализДок.ВводимыеНаОснованииДокументы.Количество() Цикл
			
			ВводимыйДок=АнализДок.ВводимыеНаОснованииДокументы.Получить(СчетчикВложенный);
			Если ВидДокум = ВводимыйДок.Идентификатор Тогда
				// то есть наш документ вводится на основании анализируемого
			    Если ПустаяСтрока(СтрокаВидов) = 0 Тогда
					СтрокаВидов = СтрокаВидов + ",";
				КонецЕсли;
				СтрокаВидов = СтрокаВидов + ВидАнализДок;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ПустоеЗначение(СтрокаВидов) = 0 Тогда
		// есть документы, вводимые на основании вида текущего документа
	    Док.ВидыДляВыбора(СтрокаВидов);
		Если Док.Выбрать("Выбор документа основания")=1 Тогда
			глЗаполнитьШапкуНаОсн(Контекст,Док.ТекущийДокумент());
		КонецЕсли;
	Иначе           
		// Основания быть не может
		Предупреждение("У данного документа не может быть документа-основания.", 60);
		Возврат;
	КонецЕсли;   
	
	// далее производится анализ выбранного документа и необходимые пересчеты
		
	ТекстВопроса = "Заполнить по документу основанию?";
		
	Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
		Возврат;
	КонецЕсли;
	
	Сумма = 0;
	глЗаполнитьШапкуНаОсн(Контекст,ДокОснование);
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
		
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
КонецПроцедуры // ПоКнопкеОснование()

//******************************************************************************
// ПоКнопкеКнКПППлательщика()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Основание".
//
// Описание:
//
Процедура ПоКнопкеКнКПППлательщика()

	Если ПустаяСтрока(КПППлательщика) = 1 Тогда
		Если Фирма.Выбран() = 1 Тогда
			КПППлательщика = ?(ПустаяСтрока(КПППлательщика) = 1, ПолучитьКПП(Фирма.ЮрЛицо.ИНН), КПППлательщика);
	
		КонецЕсли;
		
	Иначе
		КПППлательщика = "";
		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеКнКПППлательщика()

//******************************************************************************
// ПоКнопкеКнКПППолучателя()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Основание".
//
// Описание:
//
Процедура ПоКнопкеКнКПППолучателя()

	Если ПустаяСтрока(КПППолучателя) = 1 Тогда
		Если Контрагент.Выбран() = 1 Тогда		
			КПППолучателя =  ?(ПустаяСтрока(КПППолучателя) = 1, ПолучитьКПП(Контрагент.ЮрФизЛицо.ИНН), КПППолучателя);

		КонецЕсли;        
		
	Иначе
		КПППолучателя = "";
		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеКнКПППолучателя()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Печать платежного поручения (печатная форма действительна с 01.06.2003).
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// Проверка правильности заполнения реквизитов по перечислению налогов
  	Если ПеречислениеНалога = 1 Тогда
		ПоКнопкеПеречислениеНалога(1);
	КонецЕсли;

  	Если БанковскийСчет.ВалютаСчета <> глРубли Тогда
		Предупреждение("Данная печатная форма может быть выведена только для рублевого банковского счета!", 60);
		Возврат;
	КонецЕсли;
	
	Если Прав(Строка(НомерДок),3) = "000" Тогда
		Если Вопрос("Номер платежного поручения не может оканчиваться на ""000"".
					|Вернуться к редактированию документа?", "Да+Нет", 60) <> "Нет" Тогда
	    	Активизировать("НомерДок");
			Возврат;
	    КонецЕсли;
	КонецЕсли;
	
  	Таблица = СоздатьОбъект("Таблица");
    Таблица.ИсходнаяТаблица("Форма2003");
	
 	СчетПолучателя  = СчетКонтрагента;
	СчетПлательщика = БанковскийСчет;
	
	СформироватьРеквизит(СчетПолучателя,  РеквизитыПолучателя,  Получатель, "Получатель");
	СформироватьРеквизит(СчетПлательщика, РеквизитыПлательщика, Плательщик, "Плательщик");
	СформироватьРеквизит("", Назначение, НазначениеПлатежа, "НазначениеПлатежа");
	
	НаименованиеНомер = ВРег(СокрП(ПредставлениеВида())) + " № " + глНомерНаПечать(Контекст);
	СтрДаты 	  = глВыводДатыПлатежныхДокументов(ДатаДок, БанковскийСчет);	// Месяц даты числом или прописью
	СуммаЧислом   = глВыводСуммыПлатежныхДокументов(Сумма, БанковскийСчет, 0);	// Сумма без 00 копеек (=) или (-00)
	СуммаПрописью = глВыводСуммыПлатежныхДокументов(Сумма, БанковскийСчет, 1);	// Сумма без 00 копеек (=) или (-00)
	СрокПлатежа	  = "";
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(СчетПлательщика, "БанковскийСчет");
	глРеквизитыПлательщикаПолучателя(Параметры);

	ПлательщикИНН = ИННПлательщика;
	ПлательщикКПП = КПППлательщика;

 	БанкПлательщика       = Параметры.Получить("СтрокаБанка");
	НомерСчетаПлательщика = Параметры.Получить("РасчетныйСчет");
    БИКБанкаПлательщика   = Параметры.Получить("БИК");
	СчетБанкаПлательщика  = Параметры.Получить("КоррСчет");
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(СчетПолучателя, "БанковскийСчет");
	глРеквизитыПлательщикаПолучателя(Параметры);

	ПолучательИНН = ИННПолучателя;
	ПолучательКПП = КПППолучателя;

 	БанкПолучателя       = Параметры.Получить("СтрокаБанка");
	НомерСчетаПолучателя = Параметры.Получить("РасчетныйСчет");
    БИКБанкаПолучателя   = Параметры.Получить("БИК");
	СчетБанкаПолучателя  = Параметры.Получить("КоррСчет");

	Таблица.Вывести();
	
	Если СразуНаПринтер = 0 Тогда
		Таблица.Опции(0,0,0,0,"ОпцииПечатиПлПор","ПараметрыОкнаПлПор");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таблица.Защита(1);
		Иначе
			Таблица.Защита(0);
		КонецЕсли;
		Таблица.ТолькоПросмотр(1);

		Таблица.ПараметрыСтраницы(,,,,0,,0,,,);
		Таблица.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таблица.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таблица.КоличествоЭкземпляров(КолЭкз);
		Таблица.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Печать".
//
// Описание:
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);

	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  Нет.    
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Открывает список для выбора способа печати. 
//  Формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма;
		
		Если ПеречислениеНалога = 1 Тогда
			ИННПлательщика = ПолучитьИНН(Фирма.ЮрЛицо.ИНН);
			КПППлательщика = ПолучитьКПП(Фирма.ЮрЛицо.ИНН);

		Иначе
			ИННПлательщика = ПолучитьИНН(Фирма.ЮрЛицо.ИНН);
			КПППлательщика = "";
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Договор".
// 
// Описание:
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
	    СтарыйДоговор	= Договор;
		
		Если ПустоеЗначение(Контрагент) = 1 Тогда
		    Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
			
			Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
				СчетКонтрагента = Контрагент.ОсновнойСчет;
			Иначе
				СчетКонтрагента = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//******************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Поле "Контрагент".
//
// Описание:
//
Процедура ПриИзмененииКонтрагента()
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		СтарыйКонтрагент	= Контрагент;
		Договор				= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;

		Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
			СчетКонтрагента = Контрагент.ОсновнойСчет;
		Иначе
			СчетКонтрагента = "";
		КонецЕсли;

		Если ПеречислениеНалога = 1 Тогда
			ИННПолучателя = ПолучитьИНН(Контрагент.ЮрФизЛицо.ИНН);
			КПППолучателя = ПолучитьКПП(Контрагент.ЮрФизЛицо.ИНН);

		Иначе
			ИННПолучателя = ПолучитьИНН(Контрагент.ЮрФизЛицо.ИНН);
			КПППолучателя = "";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента()

//******************************************************************************
// ПриВыбореПеречислениеНалога()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Поле "ПеречислениеНалога".
//
// Описание:
//
Процедура ПриВыбореПеречислениеНалога()
	Если ПеречислениеНалога = 1 Тогда
		Если Фирма.Выбран() = 1 Тогда
			ИННПлательщика = ?(ПустаяСтрока(ИННПлательщика) = 1, ПолучитьИНН(Фирма.ЮрЛицо.ИНН), ИННПлательщика);
			КПППлательщика = ?(ПустаяСтрока(КПППлательщика) = 1, ПолучитьКПП(Фирма.ЮрЛицо.ИНН), КПППлательщика);
        
		КонецЕсли;

		Если Контрагент.Выбран() = 1 Тогда		
			ИННПолучателя =  ?(ПустаяСтрока(ИННПолучателя) = 1, ПолучитьИНН(Контрагент.ЮрФизЛицо.ИНН), ИННПолучателя);
			КПППолучателя =  ?(ПустаяСтрока(КПППолучателя) = 1, ПолучитьКПП(Контрагент.ЮрФизЛицо.ИНН), КПППолучателя);
        
		КонецЕсли;

	Иначе
		Если Фирма.Выбран() = 1 Тогда
			ИННПлательщика = ?(ПустаяСтрока(ИННПлательщика) = 1, ПолучитьИНН(Фирма.ЮрЛицо.ИНН), ИННПлательщика);
			КПППлательщика = "";
        
		КонецЕсли;

		Если Контрагент.Выбран() = 1 Тогда		
			ИННПолучателя =  ?(ПустаяСтрока(ИННПолучателя) = 1, ПолучитьИНН(Контрагент.ЮрФизЛицо.ИНН), ИННПолучателя);
			КПППолучателя = "";
        
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриВыбореПеречислениеНалога()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;
	
	ВидПлатежа  = "Электронно";
	Очередность = 6;
	                 
	Если БанковскийСчет.ВалютаСчета <> глРубли Тогда
	    БанковскийСчет = "";
	КонецЕсли;

	ИННПлательщика = ПолучитьИНН(Фирма.ЮрЛицо.ИНН);
	КПППлательщика = "";
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Если БанковскийСчет.ВалютаСчета <> глРубли Тогда
	    БанковскийСчет = "";
	КонецЕсли;
	
	ИННПлательщика = ПолучитьИНН(Фирма.ЮрЛицо.ИНН);
	КПППлательщика = "";
	
	Результат = ЗаполнениеПоДокументуОснованию();
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат, "!");
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	                     
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма			= Фирма;  
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
    
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);

		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		
		Форма.кнЗаполнитьБанковскийСчет.Доступность(0);
		Форма.кнЗаполнитьСчетКонтрагента.Доступность(0);
		Форма.кнЗаполнитьНазначение.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
    
	КонецЕсли;
		
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	УправлениеВидимостью();

	глАктивизироватьРеквизит(Контекст);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога = "БанковскийСчет" Тогда
		Параметр = Фирма.ЮрЛицо;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", Параметр);
		ФлагСтандОбр = 0;
		
	ИначеЕсли ЭлементДиалога = "СчетКонтрагента" Тогда
		Параметр = Контрагент;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", Параметр);
		ФлагСтандОбр = 0;
		
	ИначеЕсли ЭлементДиалога = "ВидПлатежа" Тогда
		Длина = Метаданные.Документ(Вид()).РеквизитШапки("ВидПлатежа").Длина;
		Список = СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение(Формат("Почтой",     "С"+Длина));
		Список.ДобавитьЗначение(Формат("Телеграфом", "С"+Длина)); 
		Список.ДобавитьЗначение(Формат("Электронно", "С"+Длина));
		Список.ВыбратьЗначение(ВидПлатежа, "", 0, 60, 2);
		
	ИначеЕсли ЭлементДиалога = "ПоказательТипа" Тогда
		Список = СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("НС");
		Список.ДобавитьЗначение("АВ");
		Список.ДобавитьЗначение("ПЕ");
		Список.ДобавитьЗначение("ПЦ");
		Список.ДобавитьЗначение("СА");
		Список.ДобавитьЗначение("АШ");
		Список.ДобавитьЗначение("ИШ");
		Список.ВыбратьЗначение(ПоказательТипа, "", 0, 60, 2);
		
	ИначеЕсли ЭлементДиалога = "ПоказательОснования" Тогда
		Список = СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("ТП");
		Список.ДобавитьЗначение("ЗД");
		Список.ДобавитьЗначение("ТР");
		Список.ДобавитьЗначение("РС");
		Список.ДобавитьЗначение("ОТ");
		Список.ДобавитьЗначение("РТ");
		Список.ДобавитьЗначение("ВУ");
		Список.ДобавитьЗначение("ПР");
		Список.ДобавитьЗначение("АП");
		Список.ДобавитьЗначение("АР");
		Список.ВыбратьЗначение(ПоказательОснования, "", 0, 60, 2);
		
	ИначеЕсли ЭлементДиалога = "ПоказательПериода" Тогда
		Список = СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("Д1." + Формат(ДатаМесяц(ДатаДок), "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("Д2." + Формат(ДатаМесяц(ДатаДок), "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("Д3." + Формат(ДатаМесяц(ДатаДок), "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("МС." + Формат(ДатаМесяц(ДатаДок), "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("КВ." + Формат(Цел((ДатаМесяц(ДатаДок) - 1) / 3) + 1, "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("ПЛ." + Формат(Цел((ДатаМесяц(ДатаДок) - 1) / 6) + 1, "Ч(0)2.0") + "." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ДобавитьЗначение("ГД.00." + Формат(ДатаГод(ДатаДок),"Ч(0)4.0"));
		Список.ВыбратьЗначение(ПоказательПериода, "", 0, 60, 2);
		
	ИначеЕсли ЭлементДиалога = "СтатусСоставителяПлДок" Тогда
		Список = СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("01", "01 - налогоплательщик (плательщик сборов)");
		Список.ДобавитьЗначение("02", "02 - налоговый агент");
		Список.ДобавитьЗначение("03", "03 - сборщик налогов и сборов");
		Список.ДобавитьЗначение("04", "04 - налоговый орган");
		Список.ДобавитьЗначение("05", "05 - служба судебных приставов");
		Список.ДобавитьЗначение("06", "06 - участник внешнеэкономической деятельности");
		Список.ДобавитьЗначение("07", "07 - таможенный орган");
		Список.ДобавитьЗначение("08", "08 - плательщик иных обязательных платежей");
		Список.ВыбратьЗначение(СтатусСоставителяПлДок, "", 0, 60, 2);
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(Значение, ЭлементДиалога, ФлагПродолжения)
	
	Если ЭлементДиалога = "БанковскийСчет" Тогда
		Если Значение.ЮрФизЛицо <> Фирма.ЮрЛицо Тогда
			ФлагПродолжения = 0;
		КонецЕсли;
		
		Если Значение.ВалютаСчета <> глРубли Тогда
			Предупреждение("Платежное поручение не может быть выписано по валютному счету!", 60);
	    	ФлагПродолжения = 0;
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "Контрагент" Тогда
		Если Контрагент <> Значение Тогда
			Контрагент = Значение;
			ПриИзмененииКонтрагента();
			ФлагПродолжения = 0;
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "СчетКонтрагента" Тогда
		Если Контрагент.ЮрФизЛицо <> Значение.ЮрФизЛицо Тогда
			Контрагент = "";
			ПриИзмененииКонтрагента();
		КонецЕсли;
		
	ИначеЕсли ЭлементДиалога = "Договор" Тогда
		Если Контрагент <> Значение.Владелец Тогда
			Контрагент = Значение.Владелец;
			ПриИзмененииКонтрагента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи() 
	
	Если Прав(Строка(НомерДок),3) = "000" Тогда
		Если Вопрос("Номер платежного поручения не может оканчиваться на ""000"".
					|Вернуться к редактированию документа?", "Да+Нет", 60) <> "Нет" Тогда
	    	Активизировать("НомерДок");
			СтатусВозврата(0); Возврат;
	    КонецЕсли;
	КонецЕсли;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если Найти(ЗначениеЗакладки, "Печать") <> 0 Тогда                  
		СформироватьРеквизит(БанковскийСчет,  РеквизитыПлательщика, Плательщик, "Плательщик");
		СформироватьРеквизит(СчетКонтрагента, РеквизитыПолучателя, Получатель, "Получатель");

	КонецЕсли;

	Если Найти(ЗначениеЗакладки, "Назначение") <> 0 Тогда                  
		СформироватьРеквизит("", Назначение, НазначениеПлатежа, "НазначениеПлатежа");

	КонецЕсли;
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);

КонецПроцедуры // ПриВыбореЗакладки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

Форма.ИспользоватьЗакладки(1);

// Формирование таблицы печатных форм.
НомерТекущейФормы	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// Добавление информации о встроенной форме.
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Платежное поручение";
ТаблицаПечФорм.Кнопка       = "Печать";
