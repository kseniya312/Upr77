////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
Перем ВидСчетаФактуры;

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма;

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма, НачСумма;

Перем ТекущийДолг;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ   
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет>");
	
КонецФункции  // ТекстВалюты()
            
//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                    
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                       
//******************************************************************************
// ТекстЗнакаДолга()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовую строку про знак долга 
//
// Вызывается из формул элементов диалога
//  Текстовый статик про увеличение/уменьшение долга
// 
// Описание:
//  Формирует текстовую строку про знак долга.
//
Функция ТекстЗнакаДолга()
    
	Если Сумма = 0 Тогда
	    Возврат "";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
	    СуммаВзаим	= 0;
	Иначе
		СуммаВзаим	= глПересчет(СуммаВзаиморасчетов, Договор.ВалютаВзаиморасчетов, ДатаДок, Валюта, Курс);
	КонецЕсли;
	
	Если ВидОперации = Перечисление.ВидыОперацийКоррДолга.Поставщик  Тогда 
		
		РезОперации = глТекущийДолг(Фирма, Договор, "Поставщик") + Сумма;
		Если РезОперации < 0 Тогда // фирма должна

			Если Сумма < 0 Тогда
			    Рез	= "Увеличение долга фирмы перед поставщиком";
			Иначе
				Рез	= "Уменьшение долга фирмы перед поставщиком";
			КонецЕсли;
			
		ИначеЕсли РезОперации > 0 Тогда // контрагент должен
			
			Если Сумма > 0 Тогда
			    Рез	= "Увеличение долга поставщика перед фирмой";
			Иначе
				Рез	= "Уменьшение долга поставщика перед фирмой";
			КонецЕсли;
			
		Иначе	// долга нет
			
			Если Сумма > 0 Тогда
			    Рез	= "Уменьшение долга фирмы перед поставщиком";
			Иначе
				Рез	= "Уменьшение долга поставщика перед фирмой";
			КонецЕсли;
		    
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисление.ВидыОперацийКоррДолга.Покупатель Тогда 
		РезОперации = глТекущийДолг(Фирма, Договор, "Покупатель") + Сумма;
		
		Если РезОперации < 0 Тогда // фирма должна

			Если Сумма < 0 Тогда
			    Рез	= "Увеличение долга фирмы перед покупателем";
			Иначе
				Рез	= "Уменьшение долга фирмы перед покупателем";
			КонецЕсли;
			
		ИначеЕсли РезОперации > 0 Тогда // контрагент должен
			
			Если Сумма > 0 Тогда
			    Рез	= "Увеличение долга покупателя перед фирмой";
			Иначе
				Рез	= "Уменьшение долга покупателя перед фирмой";
			КонецЕсли;
			
		Иначе	// долга нет
			
			Если Сумма > 0 Тогда
			    Рез	= "Уменьшение долга фирмы перед покупателем";
			Иначе
				Рез	= "Уменьшение долга покупателя перед фирмой";
			КонецЕсли;
		    
		КонецЕсли;
	КонецЕсли;	

	Возврат Рез;
КонецФункции // ТекстЗнакаДолга()

//******************************************************************************
Процедура УправлениеВидимостью()
	                                 
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
	    Форма.ИспользоватьСлой("Общий1, Общий2, Контрагент", 2);
		
		Если ВидОперации = Перечисление.ВидыОперацийКоррДолга.Покупатель Тогда
		    Форма.ИспользоватьСлой("СФ", 1);
		КонецЕсли;
		
	Иначе
	    Форма.ИспользоватьСлой("Общий1, Общий2, КоррСчет", 2);
	КонецЕсли;                         
	
КонецПроцедуры
                            
//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДоступностью()
	
	Если Форма.ТолькоПросмотр() = 0 Тогда
		Если Договор.ВалютаВзаиморасчетов = Валюта Тогда
			Форма.кнСуммаВзаиморасчетов.Доступность(0);
		Иначе
			Форма.кнСуммаВзаиморасчетов.Доступность(1);
		КонецЕсли;
		
		Если Валюта = глРубли Тогда
			Форма.Курс.Доступность(0);
		Иначе
			Форма.Курс.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет 
//
// Описание:
// 	Пересчитывает сумму в валюте взаиморасчетов.
//
Процедура ПересчетСуммыВзаиморасчетов()
	     
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов) =1 Тогда
		СуммаВзаиморасчетов	= 0;
		
	Иначе
		СуммаВзаиморасчетов = глПересчет(Сумма,
					Валюта,Курс,
					Договор.ВалютаВзаиморасчетов,ДатаДок);
	КонецЕсли;
	
	Форма.Обновить();
	
КонецПроцедуры // ПересчетСуммыВзаиморасчетов()
 
//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	      
	Если ВидОперации = Перечисление.ВидыОперацийКоррДолга.Покупатель Тогда
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Покупатель");
	Иначе     
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Поставщик");	
	КонецЕсли;
                         
	Форма.ТекстТекущийДолг.Заголовок(глФРМ(ТекущийДолг,Договор.ВалютаВзаиморасчетов));
	
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//******************************************************************************
// ПоКнопкеДолгКлиента()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//
Процедура ПоКнопкеДолгКлиента()
	               
	Если ВидОперации = Перечисление.ВидыОперацийКоррДолга.Покупатель Тогда
		// приход оплаты от покупателя 
		глВзаиморасчеты(Фирма,Договор,"Покупатель");
	Иначе     
		// оплата поставщику 
		глВзаиморасчеты(Фирма,Договор,"Поставщик");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеДолгКлиента()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()                             
	
	РасчетТекущегоДолга();
	ПересчетСуммыВзаиморасчетов();
	УправлениеДоступностью();
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента()       
	
	Если Договор.Владелец <> Контрагент Тогда 
		Договор = "";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Договор = Контрагент.ОсновнойДоговор;
		ПриИзмененииДоговора();
	КонецЕсли;                    
					
КонецПроцедуры  // ПриИзмененииКонтрагента()

//*****************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//	Нет
//
//Описание:
// Процедура вызывается при смене валюты документа
//
Процедура ПриИзмененииВалюты()
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Возврат;
	КонецЕсли;
    
	// При смене валюты зачитываем текущий курс на дату
	Курс = глКурсДляВалюты(Валюта, ДатаДок);
	
	ПересчетСуммыВзаиморасчетов();
	УправлениеДоступностью();
	
КонецПроцедуры // ПриИзмененииВалюты()

//*****************************************************************************
// ПриИзмененииКурса()
//
// Параметры: 
//	Нет
//
// Описание:
// 	Процедура вызывается при смене курса документа
//
Процедура ПриИзмененииКурса()
	
	ПересчетСуммыВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииКурса()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Сумма = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит присвоение типов данных аналитики при изменении счета.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()      

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = глСоздатьСписокЗначПеречисления("ВидыОперацийКоррДолга","Покупатель,Поставщик");
	
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		ВидОперации = ВремВидОперации;
		РасчетТекущегоДолга();
		УправлениеВидимостью();
	КонецЕсли;
	
	
КонецПроцедуры	//ПоКнопкеОперация()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
                                       
//******************************************************************************
//	предопределенная процедура
//
Процедура ВводНового(Скопирован) 
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметр = "Покупатель" Тогда  
		ВидОперации = Перечисление.ВидыОперацийКоррДолга.Покупатель;
	Иначе
		ВидОперации = Перечисление.ВидыОперацийКоррДолга.Поставщик;
	КонецЕсли;     
	
КонецПроцедуры        

//******************************************************************************
// предопределенная процедура            
//
Процедура ПриОткрытии() 
	                           
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");  
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
    
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата       	= ДатаДок;
	СтараяФирма			= Фирма;
	
	НачВалюта			= Валюта;
	НачКурс				= Курс;
	НачДоговор			= Договор;
	НачКонтрагент		= Контрагент; 
	НачФирма			= Фирма;
	НачСумма			= Сумма;
	
	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));

	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнОперация.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		                       
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Контрагент");
	Форма.Закладки.ДобавитьЗначение("Корр. счет");
	          
	Форма.Закладки.ТекущаяСтрока(1);

	РасчетТекущегоДолга();
	
	УправлениеВидимостью();   
	УправлениеДоступностью();     
	
	глПриВыбореБухСчета(Контекст, 1, 1);
	
КонецПроцедуры //ПриОткрытии() 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "Счет")
	 или (ИдентЭлемДиалога = "Субконто1") 
	 или (ИдентЭлемДиалога = "Субконто2") 
	 или (ИдентЭлемДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);  
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш, НачСумма) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;        
				НачСумма		= Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);                        
КонецПроцедуры // ПриЗаписи()
     
//******************************************************************************
// предопределенная процедура
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью();
	
КонецПроцедуры                   

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ВидСчетаФактуры = "СчетФактураВыданный";