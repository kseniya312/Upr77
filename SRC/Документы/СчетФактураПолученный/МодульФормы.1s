////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
                              
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем СтараяФирма;

Перем КонтекстОснования; // контекст формы документа - основания
Перем ФормаСумма, ФормаСуммаНДС, ФормаСуммаНП, ИтогПосчитан;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//     
//******************************************************************************
// СуммаДокумента()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сумма по документу (всего с налогами)
//
// Описание:
//  Возвращает сумму всего по документу, прописывает надписи итоговых сумм по НДС 
//  и НП. Вычисление сумм производится по документу - основанию.
//
Функция СуммаДокумента()
	
	Если (КоличествоСтрок() = 0)
	и    (ДокОснование.Выбран() = 1)
	и    (ИтогПосчитан = 1)
	Тогда
		// если расчет производим по документу-основанию - лишний раз не мучаем базу.
		// пересчитаем 1 раз при открытии
	    Возврат ФормаСумма;
	КонецЕсли;
	                                                    
	ИтогПосчитан = 1;
	ФормаСумма    = глСуммаСчетаФактуры(Контекст, ФормаСуммаНДС, ФормаСуммаНП);
	Возврат ФормаСумма;
	
КонецФункции // СуммаДокумента()
                    
//******************************************************************************
// ПодсказкаОРежимеСФ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Текст подсказки.
//
// Вызывается из формул элементов диалога:
//  Текстовое поле в диалоге.
//
// Описание:
//  Возвращает текст подсказки о текущем состоянии СФ.
//
Функция ПодсказкаОРежимеСФ()
	
	Если АвтоКнигаПокупок = 1 Тогда
		ТекстПодсказки = "Записи книги покупок по счету - фактуре будут " +  
		"сформированы автоматически регламентным документом ""Формирование "+
		"книги покупок"".";
	Иначе                   
		ТекстПодсказки = "Записи книги покупок по этому счету - фактуре должны "+
		"быть введены вручную. ";
	КонецЕсли;
	
	Возврат ТекстПодсказки;
	
КонецФункции // ПодсказкаОРежимеСФ()
 
//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Установка видимости элементов диалога в зависимости от текущей закладки.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда                 
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // УправлениеВидимостью()
    
//******************************************************************************
// УстановкаФлагаАвтоКнигаПокупок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает доступность и значение реквизита "Автоматические записи 
//  книги покупок" в зависимости от вида документа.
//
Процедура УстановкаФлагаАвтоКнигаПокупок()
	
	Если (ДокОснование.Выбран() = 0)
	или  (ДокОснование.Вид() = "ПоступлениеТМЦИмпорт")
	Тогда
		Форма.АвтоКнигаПокупок.Доступность(0);
		Если АвтоКнигаПокупок = 1 Тогда
			 АвтоКнигаПокупок = 0;
		КонецЕсли;
	Иначе     
		Форма.АвтоКнигаПокупок.Доступность(1);	   
	КонецЕсли;
		
КонецПроцедуры // УстановкаФлагаАвтоКнигаПокупок()

//******************************************************************************
// УстановкаНаличияЗакладок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопки "Очистить док. основание", "Выбрать док. основание".
//
// Описание:
//  Если документ введен на основании, не показываем суммы. (Для 
//	"свободного" документ - показываем на закладке).
//
Процедура УстановкаНаличияЗакладок()
	
	Если ДокОснование.Выбран() = 1 Тогда
		Форма.ИспользоватьЗакладки(0);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
		Если КоличествоСтрок()>0 Тогда
			УдалитьСтроки();
		КонецЕсли;
	Иначе
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.УдалитьВсе();
		Форма.Закладки.ДобавитьЗначение("Основной");
		Форма.Закладки.ДобавитьЗначение("Суммы");		
		Форма.Закладки.ТекущаяСтрока(1);
		УправлениеВидимостью(1);
	КонецЕсли;
	
КонецПроцедуры // УстановкаНаличияЗакладок()

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("  +ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("    +ТекстВалюты(Валюта)+")");
	Форма.РамкаБезНДС	.Заголовок("Без НДС ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ".Проведен";
		Иначе
			Заголовок = Заголовок + ".Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ".Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
        
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	            
	Фирма		= ДокОснование.Фирма;
	Если ДокОснование.Вид() = "ПоступлениеТМЦИмпорт" Тогда
		Контрагент 	= ДокОснование.Таможня;
		Договор 	= ДокОснование.ДоговорТаможниРуб;     
	ИначеЕсли (ДокОснование.Вид() = "СтрокаАвансОтчетаПрочее") 
	      или (ДокОснование.Вид() = "СтрокаАвансОтчетаТМЦ") 
		Тогда
		Контрагент 	= "";
		Договор 	= "";     
	Иначе
		Контрагент 	= ДокОснование.Контрагент;
		Договор 	= ДокОснование.Договор;
	КонецЕсли;

	Возврат "";
	
КонецФункции //ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если (ПустоеЗначение(Основание) = 0) и (ДокОснование <> Основание) Тогда
		// проверим основание
		СинонимДокумента	= ПредставлениеВида();
		СинонимОснования	= Основание.ПредставлениеВида();
		
		Список	= глПолучитьСписокВводимыхНаОсновании(Основание);
		Поз		= Список.НайтиЗначение(Вид());
		
		// выполним проверку, можно ли вводить документ на основании ДокументОснование
		Если Поз = 0 Тогда
			// ДокументОснование не найден в списке разрешенных
			Предупреждение("Нельзя выбирать в качестве основания """ + СинонимОснования + """", 60);
			Возврат;
		КонецЕсли;
		              
		// документ основание должен быть проведен
		Если Основание.Проведен() = 0  Тогда
			Предупреждение("Нельзя выбирать в качестве основания не проведенный документ!", 60);;
			Возврат;
		КонецЕсли;
		           
		// по документу основанию не должен быть выписан другой счет-фактура
		СФ = глНайтиСчетФактуру(Основание, "СчетФактураПолученный");
		Если ПустоеЗначение(СФ) = 0 Тогда      
			Если (СФ <> ТекущийДокумент()) и (СФ.ПометкаУдаления() = 0) Тогда
				Предупреждение("На основании документа " + 
			              СинонимОснования + " " + СокрП(Основание.НомерДок) + " от " + Основание.ДатаДок + " " +
			              "уже выписан документ " + СинонимДокумента + " " + СокрП(СФ.НомерДок) + " от " + СФ.ДатаДок + ". " +
						  "Нельзя выписывать другой!", 60);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// документ основание не должен быть приемом на комиссию
		Рез	= 1;
		Если Основание.Вид() = "ПоступлениеТМЦ" Тогда
			Если Основание.КодОперации = глКО.ПриемНаРеализацию Тогда
				Рез = 0;
			КонецЕсли;
		ИначеЕсли Основание.Вид() = "ПоступлениеТМЦРозница" Тогда
			Если Основание.КодОперации = глКО.ПриемНаРеализациюРозница Тогда
				Рез = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если Рез = 0 Тогда
			Предупреждение("Документ " + Основание + " является документом приема на комиссию.
			              |Выписка счета - фактуры не требуется!", 60);
			Возврат;
		КонецЕсли;

		глЗаполнитьШапкуНаОсн(Контекст, Основание);
		ЗаполнениеПоДокументуОснованию();
		
		УстановкаНаличияЗакладок();
		УстановкаФлагаАвтоКнигаПокупок();
		ОбновитьНадписи();
		
		// после выбора основания нужно пересчитать итоги
		ИтогПосчитан	= 0;
	КонецЕсли;
    
КонецПроцедуры //ПоКнопкеОснование()   

//******************************************************************************
// ПоКнопкеОчиститьОснование()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Здесь можно перечислить элементы диалога.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПоКнопкеОчиститьОснование()
	           
	Если ДокОснование.Выбран()= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Вопрос ("Очистить документ - основание
		|(Счет - фактуру необходимо будет заполнить вручную)?","Да+Нет") = "Нет" Тогда
		Возврат;
	КонецЕсли;
	                 
	Валюта = глРубли;
    Курс   = 1;

	ДокОснование="";
	УстановкаНаличияЗакладок();
	УстановкаФлагаАвтоКнигаПокупок();  
	ОбновитьНадписи();    
	
КонецПроцедуры // ПоКнопкеОчиститьОснование()
                          
//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Реквизиты табличной части.
//
// Описание:
//  Производит пересчеты при изменении реквизитов табличной части.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)
	
	Если (ИмяРеквизита = "Сумма") или (ИмяРеквизита = "СтавкаНДС") Тогда
		СуммаНДС 	= глВыделяемыйНДС(СтавкаНДС)*Сумма;
		СуммаБезНДС = Сумма - СуммаНДС;
		
	ИначеЕсли ИмяРеквизита = "СуммаНДС" Тогда          
		СуммаБезНДС = Сумма - СуммаНДС;
		
	ИначеЕсли ИмяРеквизита = "СуммаБезНДС" Тогда
		СуммаНДС 	= Сумма - СуммаБезНДС;
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()
                                          
//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Контрагент".
//
// Описание:
//  Проверяем соответствие выбранных договора и контрагента.
//
Процедура ПриИзмененииКонтрагента()
	
	Если Договор.Владелец <> Контрагент Тогда 
		Договор = "";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Договор = Контрагент.ОсновнойДоговор;
	КонецЕсли;
	
	ОбновитьНадписи();
	
КонецПроцедуры // ПриИзмененииКонтрагента()     

//*****************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Договор".
//
// Описание:
//  Проверяем соответствие выбранных договора и контрагента.
//
Процедура ПриИзмененииДоговора()
	
	Если (Договор.Владелец <> Контрагент)
	и    (Договор.Выбран() =  1)
	Тогда 
		Контрагент = Договор.Владелец;
	КонецЕсли;
	
	ОбновитьНадписи();
	
КонецПроцедуры // ПриИзмененииДоговора()        

//******************************************************************************
// ПодготовитьРеквизитыШапки(Рекв)
//
// Параметры:
//  Рекв - реквизиты шапки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  формирует список значений для формирования шапки печатной формы
Процедура ПодготовитьРеквизитыШапки(Рекв)
	
	ЮрФизЛицо = Контрагент.ЮрФизЛицо;
	ЮрФизЛицо = ?(ПустоеЗначение(ЮрФизЛицо) = 1, ПолучитьПустоеЗначение("Справочник.ЮрЛица"), ЮрФизЛицо);
	
	Рекв 	= СоздатьОбъект("СписокЗначений");  
	
	Рекв.ДобавитьЗначение(Шаблон("СЧЕТ-ФАКТУРА № [глНомерНаПечать(Контекст)] от [?(ПустоеЗначение(ДатаДокВходящий) = 0, ДатаДокВходящий, ДатаДок)]"), "Номер");
	
	Рекв.ДобавитьЗначение(Шаблон("Продавец: [СокрП(ЮрФизЛицо.ПолнНаименование)]"), "Поставщик");
	Рекв.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ЮрАдрес)]"), "АдресПоставщика");
	Рекв.ДобавитьЗначение(Шаблон("Телефон: [СокрЛП(ЮрФизЛицо.Телефоны)]"), "ТелефонПоставщика");
	Рекв.ДобавитьЗначение(Шаблон("Идентификационный номер продавца (ИНН) [СокрЛП(ЮрФизЛицо.ИНН)]"), "ИННПоставщика");
	
	//Рекв.ДобавитьЗначение("Грузоотправитель и его адрес: Он же", "Грузоотправитель");
	Рекв.ДобавитьЗначение("Грузоотправитель и его адрес: ООО 'Профи' 195197, Санкт-Петербург, Полюстровский пр.. д.87", "Грузоотправитель");
	Рекв.ДобавитьЗначение(Шаблон("Грузополучатель и его адрес: [СокрЛП(Фирма.ЮрЛицо.ПолнНаименование)], Адрес: [глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес)]"), "Грузополучатель");
	//Рекв.ДобавитьЗначение(Шаблон("К платежно-расчетному документу  [НомерПлатРасчДок] от [ДатаПлатРасчДок]"), "ПоДокументу");
	Рекв.ДобавитьЗначение("К платежно-расчетному документу:", "ПоДокументу");
	
	Рекв.ДобавитьЗначение(Шаблон("Покупатель:[СокрЛП(Фирма.ЮрЛицо.ПолнНаименование)]"), "Покупатель");
	Рекв.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес)]"), "АдресПокупателя");
	Рекв.ДобавитьЗначение(Шаблон("Телефон: [СокрЛП(Фирма.ЮрЛицо.Телефоны)]"), "ТелефонПокупателя");
	Рекв.ДобавитьЗначение(Шаблон("Идентификационный номер покупателя (ИНН) [СокрЛП(Фирма.ЮрЛицо.ИНН)]"), "ИННПокупателя");
	
КонецПроцедуры // ПодготовитьРеквизитыШапки()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1,ЖукПикта)
	Перем МнЧ, Итоги, ФорматКоличества;
	Перем ТекстВал;
	Перем РеквШапки;
	
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
	    Предупреждение("Печатается только документ, введенный на основании", 60);
		Возврат;
	КонецЕсли;
	
	ПодготовитьРеквизитыШапки(РеквШапки);
	
	ВидОсн = ДокОснование.Вид();
	
	Если ВидОсн = "ВводОстатковПоставщика" Тогда
		ПечВалюта = глРубли;
	ИначеЕсли ВидОсн = "ПоступлениеДопРасходы" Тогда
		ПечВалюта = ДокОснование.Валюта;
	ИначеЕсли ВидОсн = "ПоступлениеПрочее" Тогда
		ПечВалюта = ДокОснование.Валюта;
	ИначеЕсли ВидОсн = "ПоступлениеТМЦ" Тогда
		ПечВалюта = ДокОснование.Валюта;
	ИначеЕсли ВидОсн = "ПоступлениеТМЦРозница" Тогда
		ПечВалюта = ДокОснование.Валюта;
	ИначеЕсли ВидОсн = "ПоступлениеТМЦИмпорт" Тогда
		ПечВалюта = глРубли;
	ИначеЕсли ВидОсн = "СтрокаАвансОтчетаПрочее" Тогда
		ПечВалюта = ДокОснование.Валюта;
	ИначеЕсли ВидОсн = "СтрокаАвансОтчетаТМЦ" Тогда
		ПечВалюта = ДокОснование.Валюта;
	КонецЕсли;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	Если ЖукПикта = "Пикта" Тогда
		ИсхТабл.ИсходнаяТаблица("ТАблица");
	Иначе
		ИсхТабл.ИсходнаяТаблица("Жук");
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = ИсхТабл.ВысотаСекции("Заголовок");
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	
	// повторим шапку таблицы на каждой странице
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	ПечИтогСуммаНДС = 0;
	ПечИтогСуммаСналогом = 0;

	ДокОснование.ВыбратьСтроки();
	Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
		Если ВидОсн = "ВводОстатковПоставщика" Тогда
			Наименование		= СокрЛП(ДокОснование.ВидДолга);
			ПечСумма 			= ДокОснование.СуммаРуб - ДокОснование.СуммаНДС - ДокОснование.СуммаНП;
			ПечСуммаСналогом	= ДокОснование.СуммаРуб - ДокОснование.СуммаНП;
			ПечЦена				= ПечСумма;
			ПечКоличество		= 1;  
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			ПечГТД				= "-----";
			ПечСтрана			= "-----";
			ПечЕдиница			= "";
		ИначеЕсли ВидОсн = "ПоступлениеДопРасходы" Тогда
			Наименование		= СокрЛП(ДокОснование.Содержание);
			ПечСумма 			= ДокОснование.Сумма - 
								?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечСуммаСналогом	= ДокОснование.Сумма + 
								?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			ПечГТД				= "-----";
			ПечСтрана			= "-----";
			ПечЕдиница			= "";
		ИначеЕсли ВидОсн = "ПоступлениеПрочее" Тогда
			Наименование		= СокрЛП(ДокОснование.Содержание);
			ПечСумма 			= ДокОснование.Сумма - 
								?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечСуммаСналогом	= ДокОснование.Сумма + 
								?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			ПечГТД				= "-----";
			ПечСтрана			= "-----";
			ПечЕдиница			= "";
		ИначеЕсли (ВидОсн = "ПоступлениеТМЦ") или (ВидОсн = "ПоступлениеТМЦРозница") Тогда
			Наименование		= СокрЛП(ДокОснование.Номенклатура.ПолнНаименование);
			ПечСумма 			= ДокОснование.Сумма - 
								?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечСуммаСналогом	= ДокОснование.Сумма + 
								?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			//МЭТР+12.01.12
			//ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД, "-----");
			ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД, ?(пустоезначение(ДокОснование.Номенклатура.НомерГТД)=0,ДокОснование.Номенклатура.НомерГТД,"-----"));
			//МЭТР-
			ПечСтрана			= ?(ПустоеЗначение(ДокОснование.Партия.СтранаПроисхождения) = 0, ДокОснование.Партия.СтранаПроисхождения, "-----");
			ПечЕдиница			= ДокОснование.Единица;
		ИначеЕсли ВидОсн = "ПоступлениеТМЦИмпорт" Тогда
			Наименование		= СокрЛП(ДокОснование.Номенклатура.ПолнНаименование);
			ПечСумма 			= ДокОснование.ТаможеннаяСтоимость + ДокОснование.СуммаПошлиныРуб;
			ПечСуммаСналогом	= ПечСумма + ДокОснование.СуммаНДСРуб;
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДСРуб;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДСРуб) = 1, "--", глФРМ(ДокОснование.СуммаНДСРуб));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДСРуб) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			//МЭТР+12.01.12
			//ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД,"-----");
			ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД, ?(пустоезначение(ДокОснование.Номенклатура.НомерГТД)=0,ДокОснование.Номенклатура.НомерГТД,"-----"));
			//МЭТР-
			ПечСтрана			= ?(ПустоеЗначение(ДокОснование.Партия.СтранаПроисхождения) = 0, ДокОснование.Партия.СтранаПроисхождения, "-----");
			ПечЕдиница			= ДокОснование.Единица;
		ИначеЕсли ВидОсн = "СтрокаАвансОтчетаПрочее" Тогда
			Наименование		= СокрЛП(ДокОснование.Содержание);
			ПечСумма 			= ДокОснование.Сумма - 
								?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечСуммаСналогом	= ДокОснование.Сумма + 
								?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			ПечГТД				= "-----";
			ПечСтрана			= "-----";
			ПечЕдиница			= "";
		ИначеЕсли ВидОсн = "СтрокаАвансОтчетаТМЦ" Тогда
			Наименование		= СокрЛП(ДокОснование.Номенклатура.ПолнНаименование);
			ПечСумма 			= ДокОснование.Сумма - 
								?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечСуммаСналогом	= ДокОснование.Сумма + 
								?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
								?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
			ПечЦена				= ?(ДокОснование.Количество = 0, 0, ПечСумма / ДокОснование.Количество);
			ПечКоличество		= ДокОснование.Количество;
			ЧСуммаНДС			= ДокОснование.СуммаНДС;
			ПечСуммаНДС         = ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "--", глФРМ(ЧСуммаНДС));
			ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "Без НДС", ДокОснование.СтавкаНДС);
			//МЭТР+12.01.12
			//ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД,"-----");
			ПечГТД				= ?(ПустоеЗначение(ДокОснование.Партия.ГТД) = 0, ДокОснование.Партия.ГТД, ?(пустоезначение(ДокОснование.Номенклатура.НомерГТД)=0,ДокОснование.Номенклатура.НомерГТД,"-----"));
			//МЭТР-
			ПечСтрана			= ?(ПустоеЗначение(ДокОснование.Партия.СтранаПроисхождения) = 0, ДокОснование.Партия.СтранаПроисхождения, "-----");
			ПечЕдиница			= ДокОснование.Единица;
		КонецЕсли;
		
		ПечИтогСуммаНДС			= ПечИтогСуммаНДС + ЧСуммаНДС;
		ПечИтогСуммаСналогом	= ПечИтогСуммаСналогом + ПечСуммаСналогом;
		
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
	
	ИсхТабл.ВывестиСекцию("Подвал");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0, 0, 0, 0, "ДляСчетаФактурыПолученного", "ДляСчетаФактурыПолученного");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	вызывается по кнопке печать
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз,"Пикта"); 
	ИначеЕсли НомерТекущейФормы = 2 Тогда
		Печать(СразуНаПринтер,КолЭкз,"Жук");
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  Открывает список с выбором способа печати. После выбора способа формирует
//  таблицу по выбранному способу.

Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
                                                  
//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                                                 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	// проверим основание
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		              """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	              
	// документ основание должен быть проведен
	Если ДокументОснование.Проведен() = 0  Тогда
		Предупреждение("Документ """ + СинонимДокумента + """ нельзя вводить на основании не проведенного документа!", 60);
		Возврат;
	КонецЕсли;
	           
	// по документу основанию не должен быть выписан другой счет-фактура
	СФ = глНайтиСчетФактуру(ДокументОснование, "СчетФактураПолученный");
	Если ПустоеЗначение(СФ) = 0 Тогда
		Предупреждение("На основании документа " + 
		              СинонимОснования + " " + СокрП(ДокументОснование.НомерДок) + " от " + ДокументОснование.ДатаДок + " " +
		              "уже выписан документ " + СинонимДокумента + " " + СокрП(СФ.НомерДок) + " от " + СФ.ДатаДок + ". " +
					  "Нельзя выписывать другой!", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	// документ основание не должен быть приемом на комиссию
	Рез	= 1;
	Если ДокументОснование.Вид() = "ПоступлениеТМЦ" Тогда
		Если ДокументОснование.КодОперации = глКО.ПриемНаРеализацию Тогда
			Рез = 0;
		КонецЕсли;
	ИначеЕсли ДокументОснование.Вид() = "ПоступлениеТМЦРозница" Тогда
		Если ДокументОснование.КодОперации = глКО.ПриемНаРеализациюРозница Тогда
			Рез = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если Рез = 0 Тогда
		Предупреждение("Документ " + ДокументОснование + " является документом приема на комиссию.
		              |Выписка счета - фактуры не требуется!", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	глЗаполнитьШапкуНаОсн(Контекст, ДокументОснование);
	Если глЕстьРеквизитШапки("Валюта",ДокументОснование.Вид()) = 1 Тогда
	    Валюта = ДокументОснование.Валюта;
	КонецЕсли;

	ДатаДок 			= ДокументОснование.ДатаДок;
	ДатаДокВходящий 	= ДатаДок;
	АвтоКнигаПокупок 	= 1;
	
	ЗаполнениеПоДокументуОснованию();
	
КонецПроцедуры // ВводНаОсновании()        

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)

	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()    
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
    Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	Иначе
		КонтекстОснования = Парам;	
	КонецЕсли;         
	                           
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		  	= Фирма;  
	НачальнаяДатаДокумента  = ДатаДок;

	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаБезНДС	.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
                                         
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	                   
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	
	УстановкаНаличияЗакладок();  
	УстановкаФлагаАвтоКнигаПокупок();

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью(НомерЗакладки);
	
КонецПроцедуры  // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)
	
	Если Элемент = "ВидДолга" Тогда
		
		СписокВидов = глСоздатьСписокЗначПеречисления("ВидыДолга", "ДолгЗаТовары,ДолгЗаУслуги,ДолгЗаМатериалы,ДолгЗаОС,ДолгЗаНМА");
		
		СписокВидов.ВыбратьЗначение(ВидДолга,,,,2);
		ФлагПродолжения = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;            
	
	Если СтатусВозврата() <> 0 Тогда
		Валюта = глРубли;
		Курс   = 1;
		
		Если ДокОснование.Выбран() = 1 Тогда
			Фирма  = ДокОснование.Фирма; // перезапишем реквизит.
			ВидОсн = ДокОснование.Вид();
			Если глЕстьРеквизитШапки("Валюта",ВидОсн) = 1 Тогда
				Валюта = ДокОснование.Валюта;    
				Курс   = ДокОснование.Курс;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры       

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если ТипЗначения(КонтекстОснования) = 100 Тогда
		// Документ основание еще открыт
		Если Выбран() = 1 Тогда
			КонтекстОснования.Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(ТекущийДокумент()));
		КонецЕсли;
	КонецЕсли;   
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Пикта";
ТаблицаПечФорм.Кнопка       = "Пикта"; 

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Жук";
ТаблицаПечФорм.Кнопка       = "Жук";