Перем ДанныеПоДолгам, ТекстКлиента;
Перем КлиентКредит,СтараяНоменклатураФирм;
Перем СтараяОплата, СтарыйКонтрагент, НачислитБонусПроцент, СтарыйПроект;	//Работа с обновлением данных
Перем ТЗ_Долги;	//Тут развёрнутая информация по текущим долгам
Перем ТЗ_Проценты;	//Тут развёрнутая информация по текущим процентам
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы, Бонус;
Перем СписокДоступныхПроектов;
Перем СписокДействий;//Список доступных для выбора проектов
Процедура ИзменениеКлиента() Далее 
Процедура ОбновиНадписи() Далее
Процедура РасчитатьСкидкуОтРозницы() Далее     
Процедура РасчётНаценки() Далее
Процедура ОбновитьБонус() Далее 
Процедура ПриИзмененииЦеныПоставки() Далее 

Функция ЕстьПроведеннаяПродажа(ТекДокумент) Далее
        
Процедура кнРасчитатьБонус()
	НачислитБонусПроцент = глФРМ(глПолучитьКоличествоНачиляемыхБонусовПроцентов(Контекст),);	
КонецПроцедуры
               
Функция ПолучитьНомерПиктограммы()
	ПиктограммаОстатковФирмы = глНетОстаткаПоФирме(Контекст, Проект);
КонецФункции	
       
Процедура ПолучитьНомераПиктограмм()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ПолучитьНомерПиктограммы();  
	КонецЦикла;	
КонецПроцедуры	

Процедура кнПрибратьПартии()     
	глПрибратьПартии(Контекст, Проект);
КонецПроцедуры	

Функция ПолучитьРасшифровкуДляОтчета(ТекОтчет)
	
	// Общая часть
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", ТекОтчет);
	Расшифровка.Установить("ВыбНачПериода", Дата("01.01.1980"));
	Расшифровка.Установить("ВыбКонПериода", ДатаДок);
	Расшифровка.Установить("Контрагент", 	Контрагент); 
	Расшифровка.Установить("Склад", 		Склад);
	
	Возврат Расшифровка;

КонецФункции // ПолучитьРасшифровкуДляОтчета()

Процедура ПоКнопкеИсторияБонусов()
	Расшифровка = ПолучитьРасшифровкуДляОтчета("ВедомостьПоПокупателямРозница");
	ОткрытьФорму("Отчет.ВедомостьПоПокупателямРозница", Расшифровка);
КонецПроцедуры	

Процедура УстановитьДоступностьФлагБонусы()
	Если Контрагент.Выбран() = 1 Тогда
		Если (Контрагент.флТолькоБонусы = 1) 
		и (сокрЛП(ИмяПользователя())<>"Филиппов")
		и (сокрЛП(ИмяПользователя())<>"Кожемякин") Тогда
			Форма.флНачислитьБонусы.Доступность(0);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ОбновитьБонус()
	Если Выбран() = 1 Тогда
		Бонус = глФРМ(глПолучитьБонусыКлиента(Контрагент, ПолучитьПозицию(), 1),глРубли);
	Иначе
		Бонус = глФРМ(глПолучитьБонусыКлиента(Контрагент, ДатаДок),глРубли);  
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииНачислитьБонусы()  
	Если ФиксСкидка <> 0 Тогда
		Если флНачислитьБонусы = 1 Тогда
			ФиксСкидка = ФиксСкидка * Константа.КоэффициентПереводаВБонусы;	
		Иначе         
			Если Константа.КоэффициентПереводаВБонусы <> 0 Тогда
				ФиксСкидка = ФиксСкидка / Константа.КоэффициентПереводаВБонусы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ПоказатьСсылкуДляОплаты()
	тСсылкаДляОплаты = СсылкаДляОплаты;
	ВвестиСтроку(тСсылкаДляОплаты,"Ссылка для оплаты на сайте.",,1,); 
	СсылкаДляОплаты = тСсылкаДляОплаты;
КонецПроцедуры	
              
Процедура КопСсылкуДляОплатыВБуфер()       
	objHTM = "";
	objHTM = CreateObject("htmlfile");
	objHTM.ParentWindow.ClipboardData.Setdata("Text", СсылкаДляОплаты);
	Сообщить("Ссылка скопирована в буфер обмена.");
КонецПроцедуры	

Процедура ЗаписатьСМСПоАвтору()
	//проверим наличие отправленных СМС по автору
    //если нет СМС записываем новое
	Если ПустоеЗначение(Автор) = 1 Тогда
		Возврат;
	КонецЕсли;	
	
    //Если ПустоеЗначение(НомерЗаявкиСайт) = 1 Тогда
	//	Предупреждение("Не указан номер заявки.");
	//	Возврат;
	//КонецЕсли;
	       
	Если ПустоеЗначение(НомерЗаявкиСайт) = 1 Тогда
		мНомерЗаявкиСайт = НомерДок;
	Иначе
		мНомерЗаявкиСайт = НомерЗаявкиСайт;
	КонецЕсли;

	Если ПустоеЗначение(НомерТелефона) = 1 Тогда
		Предупреждение("Не указан номер телефона.");
		Возврат;
	КонецЕсли;
	
	ЕстьПоАтору 		= 0;
	ЕстьПоСменеАвтора 	= 0;
	
	СправочникСМС = СоздатьОбъект("Справочник.СМС");
	СправочникСМС.ВыбратьЭлементыПоРеквизиту("Заявка", ТекущийДокумент());
	Пока СправочникСМС.ПолучитьЭлемент() = 1 Цикл
		Если СправочникСМС.Менеджер = Автор Тогда
			ЕстьПоАтору = 1;
			ЕстьПоСменеАвтора 	= 0;
		ИначеЕсли (СправочникСМС.Менеджер <> Автор) 
			и (ЕстьПоАтору = 1) Тогда
			ЕстьПоСменеАвтора 	= 1;
		КонецЕсли;	
	КонецЦикла; 
	
	Если (ЕстьПоАтору = 0) 
		или ((ЕстьПоАтору = 1) и (ЕстьПоСменеАвтора = 1)) Тогда
			Попытка
				СправочникСМС.Новый();	
				СправочникСМС.ИспользоватьДату(ТекущаяДата());
				СправочникСМС.Заявка 		= ТекущийДокумент();
				СправочникСМС.Менеджер 		= Автор;
				СправочникСМС.Статус 		= Перечисление.СтатусыСМС.НеОтправлено;
				СправочникСМС.ТипСМС 		= Перечисление.ТипыСМС.ЗаказОбрабатывается;
				СправочникСМС.ЛогОтправки 	= "СМС сформировано."; 
				СправочникСМС.НомерТелефона 	= СокрЛП(НомерТелефона);
				СправочникСМС.Текст		 	= "Заказ N"+СокрЛП(мНомерЗаявкиСайт)+" обрабатывается. Ваш менеджер "+СокрЛП(Автор)+" ,телефон для связи "+ СокрЛП(Автор.НомерТелефона);
				СправочникСМС.Записать();
				Предупреждение("СМС записано в очередь на отправку.");
			Исключение
			КонецПопытки;
	Иначе		
	    Предупреждение("СМС уже отправлено.");
	КонецЕсли;	
КонецПроцедуры
          
Процедура ПриИзмененииИндивидРасчет(НеПересчитывать = 0)
	Если ДатаДок < Дата("22.05.2017") Тогда
		Возврат;	
	КонецЕсли;
	
	Если флИндивидРасчет = 1 Тогда
		Форма.ФиксСкидка.Доступность(1);  
		//Форма.Скидка.Доступность(1);
		Форма.СрНаценка.Доступность(1);
		Форма.РучнаяНаценка.Доступность(1);   
		Форма.ЦенаСоСКидкой.Доступность(1);
		Форма.Наценка.Доступность(1);
	Иначе
		Форма.ФиксСкидка.Доступность(0);
		//Форма.Скидка.Доступность(0);
		Форма.СрНаценка.Доступность(0);
		Форма.РучнаяНаценка.Доступность(0);   
		Форма.ЦенаСоСКидкой.Доступность(0);
		Форма.Наценка.Доступность(0);
		
		Если НеПересчитывать = 0 Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл  
				ЦенаЦены 	= 0;
				ЕдЦены		= "";
				ВалютаЦены  = "";
				
				Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
					ЦенаСоСкидкой = Цена;
				Иначе 
					Цена		  = ЦенаЦены;
					ЦенаСоСкидкой = ЦенаЦены; 
				КонецЕсли;
				
				глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");
				
				Если ЦенаПоступления <> 0 Тогда 
					ЦенаЗакупки		= ЦенаПоступления;
					
					//ЦенаСоСкидкой	= ЦенаЗакупки + (ЦенаЗакупки/100)*Наценка;	
					
					//глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");
					СуммаПродажи = (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС));
					СуммаПрихода = ЦенаЗакупки * Количество;
					
					Если СуммаПрихода = 0 Тогда
						Наценка 		= 0;
						Прибыль 		= 0;
					Иначе	
						Наценка		= ((СуммаПродажи*100)/СуммаПрихода)-100;
						
						Прибыль		= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (ЦенаЗакупки * Количество);  
					КонецЕсли;
				Иначе
					Наценка 		= 0;
					Прибыль 		= 0;
					//СкидкаОтРозницы = 0;
				КонецЕсли;
				//ОбновиНадписи();
			КонецЦикла;	
			РасчитатьСкидкуОтРозницы();
			Если ПустоеЗначение(Контрагент) = 0 Тогда
				ИзменениеКлиента(); 
			КонецЕсли;	
			ОбновиНадписи(); 
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры	

Процедура ЗаписатьСМСПоОплате()
	//проверим наличие отправленных СМС по автору
    //если нет СМС записываем новое
	Если ПустоеЗначение(СсылкаДляОплаты) = 1 Тогда
		Возврат;
	КонецЕсли;	
	
    Если ПустоеЗначение(НомерЗаявкиСайт) = 1 Тогда
		Предупреждение("Не указан номер заявки.");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(НомерТелефона) = 1 Тогда
		Предупреждение("Не указан номер телефона.");
		Возврат;
	КонецЕсли;
	
	ЕстьПоОплате 		= 0;

	СправочникСМС = СоздатьОбъект("Справочник.СМС");
	СправочникСМС.ВыбратьЭлементыПоРеквизиту("Заявка", ТекущийДокумент());
	Пока СправочникСМС.ПолучитьЭлемент() = 1 Цикл
		Если СправочникСМС.ТипСМС = Перечисление.ТипыСМС.СсылкаНаОплату Тогда
			ЕстьПоОплате = 1;
		КонецЕсли;	
	КонецЦикла; 
	
	Если (ЕстьПоОплате = 0) Тогда
			Попытка
				СправочникСМС.Новый();	
				СправочникСМС.ИспользоватьДату(ТекущаяДата());
				СправочникСМС.Заявка 		= ТекущийДокумент();
				СправочникСМС.Менеджер 		= Автор;
				СправочникСМС.Статус 		= Перечисление.СтатусыСМС.НеОтправлено;
				СправочникСМС.ТипСМС 		= Перечисление.ТипыСМС.СсылкаНаОплату;
				СправочникСМС.ЛогОтправки 	= "СМС сформировано."; 
				СправочникСМС.НомерТелефона = СокрЛП(НомерТелефона);
				СправочникСМС.Текст		 	= "Заказ N"+СокрЛП(НомерЗаявкиСайт)+" можно оплачивать. Ссылка на оплату "+СокрЛП(СсылкаДляОплаты)+" ,телефон для связи "+ СокрЛП(Автор.НомерТелефона);
				СправочникСМС.Записать();
				Предупреждение("СМС записано в очередь на отправку.");
			Исключение
			КонецПопытки;
	Иначе		
	    Предупреждение("СМС уже отправлено.");
	КонецЕсли;	
КонецПроцедуры

Процедура ОтправитьСМС() 
	Если ПустоеЗначение(СсылкаДляОплаты) = 1 Тогда
		ЗаписатьСМСПоАвтору();	
	Иначе     
		//Меню = СоздатьОбъект("СписокЗначений");
		//Меню.ДобавитьЗначение("СМС по заказу.");
		//Меню.ДобавитьЗначение("СМС на оплату."); 
		//ПунктМеню = "";
		//Если Меню.ВыбратьЗначение(ПунктМеню,,,,1) = 1 Тогда
			//Если ПунктМеню = "СМС по заказу." Тогда
				ЗаписатьСМСПоАвтору();	
			//Иначе
			//	ЗаписатьСМСПоОплате();
			//КонецЕсли;	
		//КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПриИзмененииЦеныПоставки()
	Если ЦенаПоступления <> 0 Тогда 
		ЦенаЗакупки		= ЦенаПоступления;
		
		//ЦенаСоСкидкой	= ЦенаЗакупки + (ЦенаЗакупки/100)*Наценка;	
		
		//глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");
		СуммаПродажи = (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС));
		СуммаПрихода = ЦенаЗакупки * Количество;
		
		Если СуммаПрихода = 0 Тогда
			Наценка 		= 0;
			Прибыль 		= 0;
		Иначе	
			Наценка		= ((СуммаПродажи*100)/СуммаПрихода)-100;
			
			Прибыль		= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (ЦенаЗакупки * Количество);  
		КонецЕсли;
	Иначе
		Наценка 		= 0;
		Прибыль 		= 0;
		//СкидкаОтРозницы = 0;
	КонецЕсли; 
	 
	РасчитатьСкидкуОтРозницы();
	ОбновиНадписи();
КонецПроцедуры	
     
//Процедура ПриИзмененииЦены()
//	Если ЦенаПоступления <> 0 Тогда
//		ЦенаЗакупки		= ЦенаПоступления;
//		
//		//ЦенаСоСкидкой	= ЦенаЗакупки + (ЦенаЗакупки/100)*Наценка;	
//		
//		//глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");
//		СуммаПродажи = (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС));
//		СуммаПрихода = ЦенаЗакупки * Количество;
//		
//		Наценка		= ((СуммаПродажи*100)/СуммаПрихода)-100;
//		
//		Прибыль		= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (ЦенаЗакупки * Количество);
//	Иначе
//		Наценка 		= 0;
//		Прибыль 		= 0;
//		//СкидкаОтРозницы = 0;
//	КонецЕсли; 
//	 
//	РасчитатьСкидкуОтРозницы();
//	ОбновиНадписи();
//КонецПроцедуры

Процедура ПриИзмененииНаценки()
	__Ном = Номенклатура;
		
	НомСтроки = НомСтроки + 1;
		
	__Ном.ИспользоватьДату(ДатаДок);
		
	Валюта1 = Валюта;
	Курс1	= Курс; 
	
	Валюта2 = Константа.ВалютаУпрУчета;
	Валюта2.ИспользоватьДату(ДатаДок);
	Курс2	= Валюта2.Курс; 
		
	Если ЦенаПоступления = 0 Тогда
		РасчётНаценки();
	КонецЕсли;
	
	//ЦенаЗакупки 	= глПересчет (__Ном.ПоследняяЦенаПрихода,Валюта2,Курс2,Валюта1,Курс1);
	ЦенаЗакупки		= ЦенаПоступления;
	
	ЦенаСоСкидкой	= ЦенаЗакупки + (ЦенаЗакупки/100)*Наценка;	
		
	глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");	
	
	Прибыль			= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (ЦенаЗакупки * Количество);
	  
	РасчитатьСкидкуОтРозницы();
	ОбновиНадписи();
КонецПроцедуры	

Процедура кнУстановитьНаценку()
	Если Найти(НазваниеНабораПрав(),"Администратор") = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ПустоеЗначение(РучнаяНаценка) = 1 Тогда
		Предупреждение("Не указана наценка!");
		Возврат;
	КонецЕсли;
	
	РасчётНаценки();
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		//__Ном = Номенклатура;
		//
		//НомСтроки = НомСтроки + 1;
		//
		//__Ном.ИспользоватьДату(ДатаДок);
		//
		//Валюта1 = Валюта;
		//Курс1	= Курс; 
		//
		//Валюта2 = Константа.ВалютаУпрУчета;
		//Валюта2.ИспользоватьДату(ДатаДок);
		//Курс2	= Валюта2.Курс; 
		
		//ЦенаЗакупки 	= глПересчет (__Ном.ПоследняяЦенаПрихода,Валюта2,Курс2,Валюта1,Курс1);
		ЦенаЗакупки		= ЦенаПоступления;
		ЦенаСоСкидкой	= ЦенаЗакупки + (ЦенаЗакупки/100)*РучнаяНаценка;	
		
		Наценка			= РучнаяНаценка;
		
		глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");	
		
		Прибыль			= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (ЦенаЗакупки * Количество);
	КонецЦикла;
	
	РасчитатьСкидкуОтРозницы();
	ОбновиНадписи();
	СрНаценка = РучнаяНаценка;
КонецПроцедуры	

Процедура ПриВыбореПроекта()
	//Временно убрано 02.04.17 нужно выбирать разнве проекты.
	//Если СписокДоступныхПроектов.НайтиЗначение(Проект) = 0 Тогда
	//	Если Вопрос("Для данного вида документа установлено ограничение выбираемых проектов." + РазделительСтрок +
	//				"Выбрать из списка разрешенных?", 4) = 7 Тогда
	//		Проект = "";
	//	Иначе
	//		Если СписокДоступныхПроектов.ВыбратьЗначение(Проект) = 0 Тогда
	//			Проект = "";
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	Если Проект.Выбран() = 1 Тогда
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.НайтиПоРеквизиту("Проект", Проект, 1) = 1 Тогда
			Контрагент = СпрКонтрагенты.ТекущийЭлемент(); 
			ИзменениеКлиента();
			ОбновиНадписи();
		КонецЕсли;
	КонецЕсли; 
	
	Если Проект <> СтарыйПроект Тогда
		РасчётНаценки();  
		СтарыйПроект = Проект;
	КонецЕсли;
КонецПроцедуры
                
//======================================================================
Процедура ПриИзмененииТипЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		глПересчетТЧ_розница(Контекст, "ТипЦен");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ПриИзмененииТипЦены()

Процедура СоздатьЗаявкуНаСклад()
	ОткрытьФорму("Документ.ЗаявкаПокупателя",Контекст,ТекущийДокумент());	
КонецПроцедуры	

// МЭТР: наценка
Процедура РасчётНаценки()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		Наценка = 0;
		ВыбНоменклатура = Номенклатура;
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС
		|Обрабатывать НеПомеченныеНаУдаление;
		|Фирма			= Регистр.ПартииНаличие.Фирма;     
		|ДатаПартии 	= Регистр.ПартииНаличие.ДатаПартии;
		|Номенклатура 	= Регистр.ПартииНаличие.Номенклатура; 
		|МОЛ 			= Регистр.ПартииНаличие.МОЛ;
		|Партия 		= Регистр.ПартииНаличие.Партия;
		|Сумма 			= Регистр.ПартииНаличие.СуммаРуб;
		|Количество 	= Регистр.ПартииНаличие.Количество;
		|Функция КоличествоНаличие = КонОст(Количество);
		|Функция СуммаНаличие = КонОст(Сумма);    
		|Группировка Фирма;
		|Группировка ДатаПартии;
		|Группировка Партия Упорядочить по Партия.ПриходныйДокумент.ДатаДок;
		|Условие(Номенклатура = ВыбНоменклатура);
		//|Условие(Партия.ПриходныйДокумент.ДатаДок <= ДатаДок); 
		|Условие(МОЛ = ТекМол);
		|";
		
		ТекМол = Склад.МОЛ;
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТаблИтогов = СоздатьОбъект("ТаблицаЗначений");
		
		Запрос.Выгрузить(ТаблИтогов,0,0);
		 
		СуммаПрихода 		= 0;
		КоличествоПрихода 	= Количество;
		Прибыль 			= 0; 
		ТекКолНаценки		= 0;
		      
		Если ТаблИтогов.КоличествоСтрок() <> 0 Тогда        
			Если ДатаДок >= Дата("01.07.2017") Тогда
		    	ЦенаПоступления = 0;
			КонецЕсли;
			
			ТаблИтогов.НоваяКолонка("ДокПартии", "Документ");
			ТаблИтогов.НоваяКолонка("КодПартии", "Строка");
			ТаблИтогов.НоваяКолонка("КоэфСебестоимости", "Число",10,2);
			ТаблИтогов.НоваяКолонка("ПриоритетПартии", "Число");
			
			ТаблИтогов.ВыбратьСтроки();
			Пока ТаблИтогов.ПолучитьСтроку() = 1  Цикл    
				ТаблИтогов.КодПартии = ТаблИтогов.Партия.Код;
				ТаблИтогов.ДокПартии = ТаблИтогов.Партия.ПриходныйДокумент;
				ТаблИтогов.КоэфСебестоимости = 1;  
				ТаблИтогов.ПриоритетПартии = 0;
				
				флИсключениеПоставщик = 0;
				Если (ТаблИтогов.Партия.Поставщик.Выбран() = 1) Тогда
					Если (ТаблИтогов.Партия.Поставщик.Наименование = "Tiemme Raccorderie") 
					или (ТаблИтогов.Партия.Поставщик.Наименование = "Watts Industries") 
					или (ТаблИтогов.Партия.Поставщик.Наименование = "RBM") Тогда
						флИсключениеПоставщик = 1;
					КонецЕсли;
				КонецЕсли;
				
				Если ДатаДок >= Дата("01.07.2017") Тогда
					Если (Проект.Выбран() = 1) Тогда  
						Если (ПустоеЗначение(ТаблИтогов.ДокПартии) = 0) Тогда
							Если ПустоеЗначение(ТаблИтогов.ДокПартии.Проект) = 0 Тогда
								Если флИсключениеПоставщик = 0 Тогда
									Если СокрЛП(Проект.ФирмаОстатков) = "Эталон" Тогда
										Если СокрЛП(ТаблИтогов.ДокПартии.Проект.ФирмаОстатков) <> "Эталон" Тогда
											ТаблИтогов.КоэфСебестоимости = 1.30;	
										КонецЕсли;	
									Иначе
										Если СокрЛП(ТаблИтогов.ДокПартии.Проект.ФирмаОстатков) = "Эталон" Тогда
											ТаблИтогов.КоэфСебестоимости = 1.05;	
										КонецЕсли;
									КонецЕсли; 
								КонецЕсли;
								Если Проект.ФирмаОстатков = ТаблИтогов.ДокПартии.Проект.ФирмаОстатков Тогда
									ТаблИтогов.ПриоритетПартии = 1;	
								КонецЕсли;	
							КонецЕсли; 
						КонецЕсли;  
					Иначе
						Если (ПустоеЗначение(ТаблИтогов.ДокПартии) = 0) Тогда
							Если ПустоеЗначение(ТаблИтогов.ДокПартии.Проект) = 0 Тогда
								Если флИсключениеПоставщик = 0 Тогда
									Если СокрЛП(ТаблИтогов.ДокПартии.Проект.ФирмаОстатков) = "Эталон" Тогда
										ТаблИтогов.КоэфСебестоимости = 1.05;	
									КонецЕсли;    
								КонецЕсли; 
								
								Если СокрЛП(ТаблИтогов.ДокПартии.Проект.ФирмаОстатков) = "Эксперт" Тогда
									ТаблИтогов.ПриоритетПартии = 1;	
								КонецЕсли;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;	 
				КонецЕсли;
			КонецЦикла;
			
			// Подготовим таблицу итогов взависимости от настройки контроля остатков
			//ПодготовитьТаблИтогов(ТаблИтогов, Фирма);
			МетодРасчетаСебестоимости = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок);
			Если ПустоеЗначение(МетодРасчетаСебестоимости)=1 Тогда
				ЗнакСортировки="+";
			ИначеЕсли МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.FIFO Тогда
				ЗнакСортировки="+";
			Иначе     
				ЗнакСортировки="-";
			КонецЕсли; 
			ТаблИтогов.Свернуть("Фирма,ПриоритетПартии,Партия,ДатаПартии,Номенклатура,МОЛ,ДокПартии,КодПартии,КоэфСебестоимости", 
			"КоличествоНаличие,СуммаНаличие");
			//Если РегистрУчета="ПартииНаличие" Тогда
			ТаблИтогов.Сортировать("-Фирма,-ПриоритетПартии,"+ЗнакСортировки+"ДатаПартии,"+ЗнакСортировки+"ДокПартии,"+ЗнакСортировки+"КодПартии",1);
			//КонецЕсли;
			
			
			ТаблИтогов.ВыбратьСтроки();
			//Пока Запрос.Группировка("Партия",1) = 1 Цикл
			Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл	
				Если КоличествоПрихода <= 0 Тогда
					Прервать;
				КонецЕсли;
				        
				Если ТаблИтогов.КоличествоНаличие <= 0 Тогда
					Продолжить;	
				КонецЕсли;	
				
				Если ТаблИтогов.КоличествоНаличие >= КоличествоПрихода Тогда 
					
					СуммаПрихода = СуммаПрихода + (ТаблИтогов.СуммаНаличие * ТаблИтогов.КоэфСебестоимости / ТаблИтогов.КоличествоНаличие) * КоличествоПрихода;
					КоличествоПрихода = 0; 
					
				Иначе
					
					СуммаПрихода = СуммаПрихода + (ТаблИтогов.СуммаНаличие * ТаблИтогов.КоэфСебестоимости);
					КоличествоПрихода = КоличествоПрихода - ТаблИтогов.КоличествоНаличие;
					
				КонецЕсли;	
				
				//ЦенаПрихода = ЦенаСоСкидкой;
				//
				//Если (Запрос.Количество > 0) И (Запрос.Сумма > 0) Тогда
				ЦенаПрихода 		= Окр(ТаблИтогов.СуммаНаличие * ТаблИтогов.КоэфСебестоимости/ ТаблИтогов.КоличествоНаличие,2);
				//	//КолвоНаценка 		= КолвоНаценка + 1;
				//	КоличествоПрихода 	= КоличествоПрихода - Запрос.Количество;
				//КонецЕсли;
				//
				//Если ЦенаПрихода > 0 Тогда
				//	ЦенаПродажи 	= ЦенаСоСкидкой;
				//    Базовая 		= ЦенаПрихода; 
				//    X 			= (ЦенаПродажи*100)/Базовая;
				//    Процент 		= ((X/100)-1)*100;
				//	Наценка 		= Наценка + Процент;
				//	ТекКолНаценки   = ТекКолНаценки + 1;
				//Иначе
				//	Наценка = 0;
				//КонецЕсли;
				
				//СуммаНаценка 	= СуммаНаценка + Наценка;			
				//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
				Сообщить(Номенклатура.Наименование + " цена пр. " + ЦенаПрихода + "цена " + ЦенаСоСкидкой + " " +Формат(ТаблИтогов.Партия.ПриходныйДокумент,""));
				
				//Прибыль	= Прибыль + ((ЦенаСоСкидкой*Запрос.Количество)+?(СуммаВклНП=1,0,(СуммаНП/Количество) * Запрос.Количество)+?(СуммаВклНДС=1,0,(СуммаНДС/Количество) * Запрос.Количество)) - (ЦенаПрихода * Запрос.Количество);
			КонецЦикла;  		
			
		КонецЕсли;
		
		КолвоНаценка 	= КолвоНаценка + 1;
		СуммаПродажи 	= (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС));
		     
		СуммаПрихода 	= Окр(СуммаПрихода,2);
		
		//Если ЦенаПоступления = 0 Тогда
		//	ЦенаПоступления	= СуммаПрихода / (Количество-КоличествоПрихода);
		//КонецЕсли;
		
		Если (СуммаПрихода <> 0) и (ЦенаПоступления = 0) Тогда
			ЦенаПоступления	= СуммаПрихода / (Количество-КоличествоПрихода);
			СуммаПрихода	= ЦенаПоступления * Количество;
			Наценка 		= ((СуммаПродажи*100)/СуммаПрихода)-100;
			Прибыль			= СуммаПродажи - СуммаПрихода; 
		Иначе
			Если ЦенаПоступления = 0 Тогда
				__Ном = Номенклатура;
				
				//__Ном.ИспользоватьДату(ДатаДок);
				
				Валюта1 = Валюта;
				Курс1	= Курс; 
				
				Валюта2 = Константа.ВалютаУпрУчета;
				Валюта2.ИспользоватьДату(ДатаДок);
				Курс2	= Валюта2.Курс; 
				
				ЦенаЗакупки 	= 	глПересчет (__Ном.ПоследняяЦенаПрихода.Получить(ДатаДок),Валюта2,Курс2,Валюта1,Курс1);
				
				Если ПустоеЗначение(ЦенаЗакупки) = 0 Тогда
					ЦенаПоступления	= ЦенаЗакупки;
					СуммаПрихода	= ЦенаПоступления * Количество;
				
					Наценка 		= ((СуммаПродажи*100)/СуммаПрихода)-100;
					Прибыль			= СуммаПродажи - СуммаПрихода;
					//ЦенаПоступления	= СуммаПрихода / Количество;
				КонецЕсли;	
			Иначе
				СуммаПрихода	= (ЦенаПоступления * Количество);
				Наценка 		= ((СуммаПродажи*100)/СуммаПрихода)-100;
				Прибыль			= СуммаПродажи - СуммаПрихода;
				//ЦенаПоступления	= СуммаПрихода / Количество;
			КонецЕсли;	
		КонецЕсли;
		
		СуммаНаценка 	= СуммаНаценка + Наценка;
	КонецЦикла;
	  
	РасчитатьСкидкуОтРозницы();
	
	Сообщить("Наценка " + СуммаНаценка);            
	
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчётНаценкиПоПоследнейЗакупке()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		__Ном = Номенклатура;
		
		НомСтроки = НомСтроки + 1;
		             
		__Ном.ИспользоватьДату(ДатаДок);
		
		Валюта1 = Валюта;
		Курс1	= Курс; 

		Валюта2 = Константа.ВалютаУпрУчета;
		Валюта2.ИспользоватьДату(ДатаДок);
		Курс2	= Валюта2.Курс; 
		
		ЦенаЗакупки = 	глПересчет (__Ном.ПоследняяЦенаПрихода,Валюта2,Курс2,Валюта1,Курс1);
		
		ЦенаРозничная 	= ЦенаСоСкидкой;
		
		НаценкаРасч 	= ЦенаРозничная - ЦенаЗакупки;
		
		Наценка = НаценкаРасч / (ЦенаРозничная-НаценкаРасч)*100;
		
		
		КолвоНаценка = КолвоНаценка + 1;
		СуммаНаценка = СуммаНаценка + Наценка;			
		//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
		Сообщить(Номенклатура.Наименование + " цена пр. " + ЦенаЗакупки + " цена " + ЦенаСоСкидкой);
		КонецЦикла;
	Сообщить("Наценка " + СуммаНаценка);            
	
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры


Процедура ВводНаОсновании(ДокумОснование)
	ДокОснование = ДокумОснование;
	Фирма = ДокумОснование.Фирма;
	Проект = ДокОснование.Проект;
	Если ДокОснование.Вид() = "СчетБнРозница" Тогда
		//УстановитьНовыйНомер();
		Фирма 	= ДокОснование.Фирма; 
		Валюта  = ДокОснование.Валюта;
		Склад 	= ДокОснование.Склад;
		Контрагент  = ДокОснование.Контрагент;
		Договор		= ДокОснование.Договор;
		ТипЦен 	= ДокОснование.ТипЦен;  
		УстановитьНовыйНомер("Зк"+Склад.ПрефиксНомеровДокументов);
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура 		= ДокОснование.Номенклатура;
			Единица 			= ДокОснование.Единица;
			Количество 			= ДокОснование.Количество;
			Коэффициент 		= ДокОснование.Коэффициент;
			Цена 				= ДокОснование.Цена;
			ЦенаСоСкидкой 		= ДокОснование.Цена;
			Сумма 				= ДокОснование.Сумма;
			СуммаНДС 			= ДокОснование.СуммаНДС;
			СуммаНП 			= ДокОснование.СуммаНП;
			СтавкаНДС 			= ДокОснование.СтавкаНДС;
			СтавкаНП 			= ДокОснование.СтавкаНП;
			СуммаСкидки 		= ДокОснование.СуммаСкидки;
			СуммаБезСкидки 		= ДокОснование.СуммаБезСкидки;
			СуммаНДСбезСкидки 	= ДокОснование.СуммаНДСбезСкидки;
		КонецЦикла;
	Иначе
		
	КонецЕсли;
КонецПроцедуры

//Принимает решение о возможности частичной оплаты клиентом
//плюс анализирует правильность внесённых данных
Процедура РассмотриВозможностьКредитов()
	
	Если СтараяОплата=Оплачено Тогда
	    возврат;
	КонецЕсли;
	
	СуммаКредита	= Контрагент.ОсновнойДоговор.СуммаКредита;	//на какую сумму возможен кредит, ВСЕ ВЗАИМОРАСЧЁТЫ ТОЛЬКО ПО ОСНОВНОМУ ДОГОВОРУ!!!
	ВсегоОплатить	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	Если Оплачено>ВсегоОплатить Тогда
		Оплачено	= ВсегоОплатить;
		Сообщить("Нельзя брать с человека больше денег, чем он должен.");
		Сообщить("		Сумма оплаты изменена до максимально допустимой.");
	КонецЕсли;
	СтараяОплата	= Оплачено;
КонецПроцедуры
                                                                            

//Производит пересчёт скидок в текущем документе
//	в соответствии с параметрами заданными в карточке клиента
//	режим = 1 - пересчитать ТЧ
//	режим = 0 - ничего не пересчитывать, а только обновить форму
Процедура РасчётСкидки(режим)
	Если ПустоеЗначение(Контрагент)=0 Тогда
		
		//++Валерий МЭТР: повышение
		СкидкаКонтрагента = Контрагент.Скидка_Розница.Получить(ДатаДок);
		//Если Повышение = 1 Тогда
		//	ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
		//	СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
		//КонецЕсли;
		//--Валерий МЭТР: повышение
		
		Если Режим = 1 Тогда	//полный пересчёт 
			
			Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 Тогда				
				//++Валерий МЭТР: механизм деления скидки
				ВыданоСоСкидкой	= 1;
				Скидка = СкидкаКонтрагента;
				//--Валерий МЭТР: механизм деления скидки
			КонецЕсли;
			
			//++Валерий МЭТР: механизм деления скидки
			Если Скидка > 0 Тогда
				ВыданоСоСкидкой = 1;
			ИначеЕсли Контрагент.СкидкаСразу.Получить(ДатаДок) = 0 Тогда
				ВыданоСоСкидкой = 0;
			КонецЕсли;             
			//--Валерий МЭТР: механизм деления скидки
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Скидка = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//Если Скидка > СкидкаКонтрагента Тогда
				//	Скидка = СкидкаКонтрагента;
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";				
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
					Форма.ВыданоСоСкидкой.Доступность(0);
				Иначе
					Форма.ВыданоСоСкидкой.Доступность(1);
				КонецЕсли;
				глПересчитатьСкидкиРозница(Контекст);
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0% -=Допустима скидка: "+Контрагент.Скидка_Розница.Получить(ДатаДок)+"%=-";
				//Скидка			= 0;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				глПересчитатьСкидкиРозница(Контекст);
			КонецЕсли;
			
		ИначеЕсли Режим <> 1 Тогда	//Иногда надо просто обновить экранные данные, без пересчёта таблицы 
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Если СкидкаСразу > Контрагент.Скидка_Розница.Получить(ДатаДок) Тогда
				//	СкидкаСразу = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				//_Скидка			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок)=1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
				КонецЕсли;
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0%"+" -=Допустима скидка: "+Скидка+"%=-";
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
КонецПроцедуры

//Проверка на наличие долгов клиента и наличие процентов для выплаты
Процедура ПроверкаКредитов(режим)
	Перем Запрос, ТекстЗапроса,а;
	Запрос 	= СоздатьОбъект("Запрос");
	Состояние("Расчёт таблицы текущих долгов...");
	если режим=1 тогда	//Мы просто рассчитаем сумму без доп. аналитики
	ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
	ДанныеПоДолгам	= "Долги: ";
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиСводная)
		|Без итогов;
		|Клиент = Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия = Регистр.Покупатели_розница.ВидВзаимодействия;
		|СуммаРуб = Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
		КонецЕсли;
	ИначеЕсли режим=2 Тогда	//Надо вывести информацию в виде таблицы
	ДанныеПоДолгам	= "Долги: ";
		ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиТаблица)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим долгам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				ТЗ_Долги.СуммаРубКонОст=(-1)*ТЗ_Долги.СуммаРубКонОст;
				Таб.ВывестиСекцию("Строка_1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("ДанныеПоДолгам","");
		КонецЕсли;
	ИначеЕсли режим=3 Тогда	//Надо вывести информацию о бонусах в виде таблицы
		ВвестиЧисло(а,"Пароль",6,0,30);
		Если а<>281280 Тогда
		    возврат;
		КонецЕсли;
		ВЗ		= Перечисление.ВидВзаимодействия.Проценты;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеБонусы)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих бонусах...");
		Запрос.Выгрузить(ТЗ_Долги);
		//Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
		//	ДанныеПоДолгам	= "Долги: не обнаружены";
		//	Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		//Иначе
		//	Таб = СоздатьОбъект("Таблица");
		//	Таб.ИсходнаяТаблица("ДанныеПоДолгам");
		//	Название = "Данные по текущим бонусам";
		//	Таб.ВывестиСекцию("Шапка");
		//	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
		//	ТЗ_Долги.ВыбратьСтроки();
		//	Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
		//		Таб.ВывестиСекцию("Строка_1");
		//	КонецЦикла;
		//	Таб.ВывестиСекцию("Подвал");
		//	Таб.ТолькоПросмотр(1);
		//	Таб.Показать("Данные по бонусам","");
		//КонецЕсли;
			ТЗ_Проценты = глНайтиПроцентыИзДок2(Контрагент,"",Дата(0),Дата(0),"");
		Если (ТЗ_Долги.Итог("СуммаРубКонОст")=0)и(ТЗ_Проценты.Итог("Сумма")=0) Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
			Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим бонусам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			итого=0;
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				Если ТЗ_Долги.КредДокумент.Вид()<>"РасходнаяНакладнаяРозницаБезнал" тогда
				Таб.ВывестиСекцию("Строка_1");
				итого=итого+ТЗ_Долги.СуммаРубКонОст;
				конецЕсли;
			КонецЦикла;
			ТЗ_Проценты.ВыбратьСтроки();
			Пока ТЗ_Проценты.ПолучитьСтроку()=1 Цикл
				Таб.ВывестиСекцию("Строка_2");
				итого=итого+ТЗ_Проценты.Сумма;
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал_2");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("Данные по бонусам","");
		КонецЕсли;
КонецЕсли;
КонецПроцедуры


Процедура РасчитатьСкидкуОтРозницы()
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		ЦенаЦены 	= 0;
		ЕдЦены		= "";
		ВалютаЦены  = "";
		// получим параметры цены
		Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
			СкидкаОтРозницы = 0;
		Иначе
			СкидкаОтРозницы = (Сумма+?(СуммаВклНП=1,0,СуммаНП)+?(СуммаВклНДС=1,0,СуммаНДС)) - (Количество*ЦенаЦены); 
		КонецЕсли;    
	
	КонецЦикла;
КонецПроцедуры	

//Производит пересчёт всех необходимых данных
Процедура ОбновиНадписи()
	РассмотриВозможностьКредитов();	
	РасчётСкидки(0);     
КонецПроцедуры                 


//Восстановим все параметры по умолчанию, а потом уже 
//решим чего надо закрыть, а чего оставить у данного клиента
Процедура ИзменениеКлиента()
	Если Контрагент = СтарыйКонтрагент Тогда
		РасчётСкидки(0);
		возврат;
	КонецЕсли;
	Если Контрагент.РозничныйКлиент<>1 Тогда
		Сообщить("Клиент ("+Контрагент+") не является розничным покупателем - его нельзя добавлять в этот документ!","!");
		Контрагент = СтарыйКонтрагент;
	КонецЕсли;
	Договор				= Контрагент.ОсновнойДоговор;
	ВыданоСоСкидкой		= 0;
	Форма.ВыданоСоСкидкой.Доступность(1);
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	СтарыйКонтрагент	= Контрагент;   
	
	//++Ерошенко 03.05.2007
	ПроверитьКонтрагентаВДокументе(Контрагент); 
	//--Ерошенко
	
	Если Контрагент.Проект.Выбран() = 1 Тогда
		Проект = Контрагент.Проект;
	КонецЕсли;   
	
	ОбновитьБонус(); 
	УстановитьДоступностьФлагБонусы();
КонецПроцедуры

//-----------------------------------------------      
Функция СуммаПрописьюРасхНакл()
	Перем ПолнаяСумма;
	
	ПолнаяСумма = Итог("Сумма");
    ВалютаПечати=Валюта;
	Если ФС.СуществуетФайл(КаталогИБ()+ВалютаПечати.ИмяФайлаПрописи)=1 Тогда
		Пропись(ВалютаПечати.ИмяФайлаПрописи);
	КонецЕсли;
	СтрокаСуммы=Формат(ПолнаяСумма,"ЧПДС");
	Пропись("");
	Возврат СтрокаСуммы;
КонецФункции

Процедура ПечатьТовЧек()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТовЧек");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	ВыбратьСтроки();
	ном=0;
	Пока ПолучитьСтроку()=1 Цикл
		ном=ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	ПечИтогоСумма=СуммаПрописьюРасхНакл();
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Товарный чек","");
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//		ВыборФормы =
//   	1, если перед печатью необходимо выбрать печатную форму, 
//		0, если надо напечатать, используя последнюю выбранную
//
// Описание:
// 	Вызывается по кнопке "Печать" и по кнопке "Выбор печатной формы" (небольшая 
// 	кнопка рядом с кнопкой печати)
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьТовЧек();
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Функция ВыборПродавца()
	
	СписокПродавцов = СоздатьОбъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.Родитель.Наименование = "Продавцы" тогда
			Если Спр.ОсновнойСклад = глПользователь.ОсновнойСклад тогда
			 	СписокПродавцов.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;		 	
		КонецЕсли;	
	КонецЦикла;	
	__Автор = Автор;        
	Если СписокПродавцов.ВыбратьЗначение(__Автор,"Автор документа") = 1 тогда
		Возврат __Автор;
	иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

Процедура ВводНового(Скопирован)
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	УстановитьНовыйНомер("Зк"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
//******************************************************************************
	//Дополнения для продавцов
	Если НазваниеНабораПрав() = "Продавец_розница" тогда
		Форма.Склад.Доступность(0);
		Форма.ТипЦен.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.НомерДок.Доступность(0);
		Форма.ЦенаСоСкидкой.Доступность(0);
		Форма.Сумма.Доступность(0);
		Форма.Единица.Доступность(0);
		
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	флНачислитьБонусы = 1;    
	
	УстановитьДоступностьФлагБонусы(); 
	флИндивидРасчет = 0;
	
КонецПроцедуры    
           
//******************************************************************************
//		ШТАТНЫЕ ПРОЦЕДУРЫ
Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);
	Форма.Номенклатура.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ЦенаСоСкидкой.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Оплачено.ВыполнятьФормулуТолькоПриИзменении(1);
	ПроверкаКредитов(1);
	РасчётСкидки(0);
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);

	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Форма.НомерДок.Доступность(0);
	    Форма.Склад.Доступность(0);
	    Форма.ДатаДок.Доступность(0);
	    Форма.ТипЦен.Доступность(0);
	    Форма.Единица.Доступность(0);
	    Форма.ЦенаСоСкидкой.Доступность(0);
	    Форма.Сумма.Доступность(0);
	КонецЕсли;
	//заполним количество факт***********************************************************
	ТЗ 	= СоздатьОбъект("ТаблицаЗначений");
	Рег	= СоздатьОбъект("Регистр.ЗаявкиНаСклад");
	Рег.УстановитьФильтр(ТекущийДокумент(),,);
	Рег.ВыгрузитьИтоги(ТЗ,1,1); 
	Рег2	= СоздатьОбъект("Регистр.ЗаявкиНаСкладОтгружено");
	ТЗ.Свернуть("Номенклатура","КоличествоОбработано");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл  
		ВсегоОтгружено	 	= Рег2.СводныйИтог(ТекущийДокумент(),Номенклатура,,"КоличествоОтгружено");
		х = 0;
		Если ТЗ.НайтиЗначение(Номенклатура,х,"Номенклатура") = 1 Тогда
			ТекущееКоличество = ТЗ.ПолучитьЗначение(х,"КоличествоОбработано") + ВсегоОтгружено;
			
			Если ТекущееКоличество <= Количество Тогда
				КоличествоФакт = ТекущееКоличество;
			Иначе
				КоличествоФакт = Количество;
			КонецЕсли;
			ТЗ.УстановитьЗначение(х,"КоличествоОбработано",ТекущееКоличество - КоличествоФакт);
		Иначе
			КоличествоФакт = ВсегоОтгружено;				
		КонецЕсли;
	КонецЦикла;
	//***********************************************************************************
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если ПустоеЗначение(Автор) = 0 Тогда
		Если //(Автор <> глПользователь)
			//и 
			(глПользователь.Наименование <> "Филиппов") 
			и (глПользователь.Наименование <> "Бородицкий Максим")
			и (глПользователь.Наименование <> "Кожемякин") 
			и (глПользователь.Наименование <> "Кудряшова") Тогда
			Форма.Автор.Доступность(0);	
			Форма.кнОчиститьАвтор.Доступность(0);
			Форма.НомерЗаявкиСайт.Доступность(0);
		КонецЕсли;	
	КонецЕсли;

	Если Найти(НазваниеНабораПрав(),"Администратор") = 0 Тогда
		Форма.кнУстановитьНаценку.Доступность(0);
		Форма.РучнаяНаценка.Доступность(0);
		Форма.Наценка.Доступность(0);
		Форма.СкидкаОтРозницы.Видимость(0); 
		Форма.РамкаПрибыль.Видимость(0);
		Форма.НадписьПрибыль.Видимость(0);
		Форма.Прибыль.Видимость(0);
	КонецЕсли;
	
	ОбновитьБонус();
	
	Если Выбран() = 1 Тогда  
		Если (ИмяПользователя()<>"Назаренко") и (ИмяПользователя()<>"Кожемякин") Тогда
			Если ЕстьПроведеннаяПродажа(ТекущийДокумент()) = 1 Тогда
				Форма.ТолькоПросмотр(1);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;   
	
	УстановитьДоступностьФлагБонусы();
	ПриИзмененииИндивидРасчет(1);  
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	Если (ИмяПользователя()="Назаренко") или (ИмяПользователя()="Кожемякин") Тогда
		Форма.КонтрагентЮЛ.Доступность(1);
		//Форма.ДоговорЮЛ.Доступность(1);
	КонецЕсли;    
	
	 
	
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Фирма","Справочник",,,,15);
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Количество","число",15,2,"Кол.",4);
	
	СтарыйПроект = Проект;
КонецПроцедуры  

Функция ЕстьПроведеннаяПродажа(ТекДокумент)
	текПроверка = 0;
	
	ПодчДокументы = СоздатьОбъект("Документ");	
	ПодчДокументы.ВыбратьПодчиненныеДокументы(,,ТекДокумент); 
	Пока ПодчДокументы.ПолучитьДокумент() = 1 Цикл
		Если (ПодчДокументы.Вид() = "РасходнаяНакладнаяРозницаБезнал") и (ПодчДокументы.Проведен() = 1) Тогда
			текПроверка = 1;
			Прервать;
		ИначеЕсли (ПодчДокументы.Вид() = "РасходнаяНакладнаяРозница") и (ПодчДокументы.Проведен() = 1) Тогда
			текПроверка = 1;
			Прервать;	
		ИначеЕсли ПодчДокументы.Вид() = "СчетБнРозница" Тогда
			текПроверка = ЕстьПроведеннаяПродажа(ПодчДокументы.ТекущийДокумент());
			Если текПроверка = 1 Тогда
				Прервать;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;

	Возврат текПроверка;	
КонецФункции	
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		//ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	//РасчётСкидки(1);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(глПользователь.ОсновнойТипЦенПродажи,          "ТипЦен");      
	Параметры.ДобавитьЗначение(глРубли,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);

КонецПроцедуры // ПоКнопкеПодбор()

Процедура ПриЗаписи()
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
	ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.ЗаявкаКлиентаРозница)+сокрЛП(склад);
	Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
	    ЭтоРозница=проба.ТекущийЭлемент();
	Иначе
		проба.новый();
		проба.наименование=ЭР;
		проба.записать();
		ЭтоРозница=проба.ТекущийЭлемент();
	КонецЕсли; 
	
	//Запишем СМС о получении заказа с сайта
	Если (ПустоеЗначение(НомерЗаявкиСайт) = 0)
		и (Выбран() = 1) 
		и (ПустоеЗначение(НомерТелефона) = 0) Тогда
		СправочникСМС = СоздатьОбъект("Справочник.СМС");
		СправочникСМС.ВыбратьЭлементыПоРеквизиту("Заявка", ТекущийДокумент());
		ЕстьСМС = 0;
		
		Пока СправочникСМС.ПолучитьЭлемент() = 1 Цикл
			Если СправочникСМС.ТипСМС = Перечисление.ТипыСМС.ЗаказПринят Тогда
				ЕстьСМС = 1;
			КонецЕсли;	
		КонецЦикла; 
		
		Если (ЕстьСМС = 0) Тогда
			Попытка
				СправочникСМС.Новый();	
				СправочникСМС.ИспользоватьДату(ТекущаяДата());
				СправочникСМС.Заявка 		= ТекущийДокумент();
				СправочникСМС.Менеджер 		= Автор;
				СправочникСМС.Статус 		= Перечисление.СтатусыСМС.НеОтправлено;
				СправочникСМС.ТипСМС 		= Перечисление.ТипыСМС.ЗаказПринят;
				СправочникСМС.ЛогОтправки 	= "СМС сформировано."; 
				СправочникСМС.НомерТелефона	= СокрЛП(НомерТелефона);
				СправочникСМС.Текст		 	= "Ваш заказ N"+СокрЛП(НомерЗаявкиСайт)+" принят. Мы свяжемся с Вами в ближайшее время.";
				СправочникСМС.Записать();
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры

//======================================================================
Функция НомерПиктограммы()
	Если ОтгружаетсяСоСклада = Перечисление.ВариантыОтгрузки.СЦентральногоСклада Тогда
		Если Количество = КоличествоФакт Тогда
			Возврат 1;
		Иначе
			Возврат 2;
		КонецЕсли;
	Иначе
		Возврат 3;
	КонецЕсли;
КонецФункции // НомерПиктограммы

Процедура СкладПриИзменении()
	УстановитьНовыйНомер("Зк"+Склад.ПрефиксНомеровДокументов); 
КонецПроцедуры  

Процедура ПриОкончанииРедактированияСтроки(НовСтр)
	 АртикулИМ = Номенклатура.АртикулИМ; 
	 ПриИзмененииЦеныПоставки();
КонецПроцедуры	

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Товарный чек";
ТаблицаПечФорм.Кнопка       = "Тов. чек";

ДанныеПоДолгам	= "Долги: не обнаружены";
ТекстКлиента	= "";
КодОперации		= Перечисление.КодыОпераций.Продажа;

ТЗ_Долги		= СоздатьОбъект("ТаблицаЗначений");
ТЗ_Проценты		= СоздатьОбъект("ТаблицаЗначений");

СписокДоступныхПроектов = СоздатьОбъект("СписокЗначений");
СпрПроекты = СоздатьОбъект("Справочник.Проекты");
Если СпрПроекты.НайтиПоНаименованию("Эксперт Инт. магазин нал") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;

СтараяНоменклатураФирм = "";