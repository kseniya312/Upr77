////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент, СтарыйСклад;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

Перем ТекущийДолг;

Перем ОбщРег, ОстаткиТМЦ, СписокПараметров;

Перем ВопросДоговор, ВопросДокОснование;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
Функция ЗаполнениеПоИтогам() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
КонецФункции                                                                    

//******************************************************************************
// Наименование: УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"

Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
	КонецЕсли;
	                                             
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "поставщик");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()                         

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                      
	                  
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок + " №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы   

//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//  Также управляет видимостью реквизита "Номер и дата СФ"
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
	// Номер и дату СФ следует указвать только если нет основания
	Если (ПустоеЗначение(ДокОснование) = 0)
	 или (КодОперации = глКО.ВозвратКомитенту)
	 или (КодОперации = глКО.ВозвратКомитентуИзРозницы)
	Тогда
		Форма.     НомерДатаСФ.Видимость(0);
		Форма.ТекстНомерДатаСФ.Видимость(0);
	Иначе
		Форма.     НомерДатаСФ.Видимость(1);
		Форма.ТекстНомерДатаСФ.Видимость(1);
	КонецЕсли;                                     
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустаяСтрока(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()   

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПолучитьРозничнуюЦену()
//
// Параметры: 
//  Товар	- номенклатура
//  ЕдИзм	- единица измерения
//
// Возвращаемое значение:
//  Число, розничная цена
//
// Описание:
//  Получает для заданного товара с заданной единицей первую розничную цену,
//  если розничных цен несколько
//
Функция ПолучитьРозничнуюЦену(Тов, Ед)
	
	Перем ТовЦена;
				
	РознЦена	= 0;
	
	глПолучитьРозничныйОстатокЦену(Тов, Ед, ОстаткиТМЦ, , ТовЦена);
	СписокЦен	= ЗначениеИзСтроки(ТовЦена);
					
	Если СписокЦен.РазмерСписка() > 0  Тогда
		РознЦена	= СписокЦен.ПолучитьЗначение(1);
	КонецЕсли;
	
	Возврат РознЦена;
	
КонецФункции // ПолучитьРозничнуюЦену()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// УстановитьКодОперации(СтарСклад, НовСклад)
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает код операции в зависимости от кода операции основания
//
Процедура УстановитьКодОперации()
	
	Если ДокОснование.КодОперации = глКО.Закупка Тогда
		// выписан на основании ПоступлениеТМЦ
		КодОперации	= глКО.ВозвратПоставщику;
		
	ИначеЕсли ДокОснование.КодОперации = глКО.ПриемНаРеализацию Тогда
		// выписан на основании ПоступлениеТМЦ (комиссия)
		КодОперации	= глКО.ВозвратКомитенту;
		
	ИначеЕсли ДокОснование.КодОперации = глКО.ЗакупкаРозница Тогда
		// выписан на основании ПоступлениеТМЦ (розница)
		КодОперации	= глКО.ВозвратПоставщикуИзРозницы;
		
	ИначеЕсли ДокОснование.КодОперации = глКО.ПриемНаРеализациюРозница Тогда
		// выписан на основании ПоступлениеТМЦ (розница, комиссия)
		КодОперации	= глКО.ВозвратКомитентуИзРозницы;
		
	Иначе
		КодОперации	= глКО.ВозвратПоставщику;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьКодОперации()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если СтарыйСклад <> Склад Тогда
		Если СтарыйСклад.РозничныйСклад <> Склад.РозничныйСклад Тогда
			
			Если Склад.РозничныйСклад = 1 Тогда
				
				// пропишем розничную цену
				ВыбратьСтроки();
				Пока ПолучитьСтроку() = 1 Цикл
					РозничнаяЦена	= ПолучитьРозничнуюЦену(Номенклатура, Единица);
				КонецЦикла;
				
				Форма.РозничнаяЦена.Видимость(1);
				
				Если КодОперации = глКО.ВозвратКомитенту Тогда
					КодОперации	= глКО.ВозвратКомитентуИзРозницы;
				ИначеЕсли КодОперации = глКО.ВозвратПоставщику Тогда
					КодОперации	= глКО.ВозвратПоставщикуИзРозницы;
				КонецЕсли;
			Иначе
				Форма.РозничнаяЦена.Видимость(0);
				
				Если КодОперации = глКО.ВозвратКомитентуИзРозницы Тогда
					КодОперации	= глКО.ВозвратКомитенту;
				ИначеЕсли КодОперации = глКО.ВозвратПоставщикуИзРозницы Тогда
					КодОперации	= глКО.ВозвратПоставщику;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		СтарыйСклад	= Склад;
	КонецЕсли;
		
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
		
		Если (КодОперации = глКО.ВозвратКомитенту)
		 ИЛИ (КодОперации = глКО.ВозвратКомитентуИзРозницы)
		Тогда
			ТекстВопроса = ВопросДоговор;
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоИтогам();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
		
		Если (КодОперации = глКО.ВозвратКомитенту)
		 ИЛИ (КодОперации = глКО.ВозвратКомитентуИзРозницы)
		Тогда
			ТекстВопроса = ВопросДоговор;
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоИтогам();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()      
                                                
//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	глПересчетТаблЧасти(Контекст, Форма.ТекущаяКолонка(), СписокПараметров);
	
КонецПроцедуры // ПриИзмененииНоменклатуры()        
    
//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                       
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран() = 0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;  
	
	Если (ДокОснование.Вид() <> "ПоступлениеТМЦ") и (ДокОснование.Вид() <> "ПоступлениеТМЦРозница")Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
	
	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;
	ДатаОплаты 	= ДокОснование.ДатаОплаты;   
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	// очищаем наш документ
	УдалитьСтроки();
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		
		НоваяСтрока();
		Номенклатура= ТаблицаДокумента.Номенклатура;
		Количество 	= ТаблицаДокумента.Количество; 
		Единица 	= ТаблицаДокумента.Единица;
		Коэффициент = ТаблицаДокумента.Коэффициент;
		Цена 		= ТаблицаДокумента.Цена;    
		
		Если глЕстьРеквизитМнЧ("РозничнаяЦена", ДокОснование.Вид()) = 1 Тогда
		    РозничнаяЦена	= ТаблицаДокумента.РозничнаяЦена;
		КонецЕсли;
		
		Сумма 		= ТаблицаДокумента.Сумма;
		СуммаНДС 	= ТаблицаДокумента.СуммаНДС;
		СуммаНП 	= ТаблицаДокумента.СуммаНП;
		СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
		СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
	КонецЦикла; // по строкам основания
	
	СуммаВзаиморасчетов	= ДокОснование.СуммаВзаиморасчетов;

	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе основании не заполнена табличная часть";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// ЗаполнитьПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Функция ЗаполнениеПоИтогам()
	Перем НереализованныеТовары, МнЧ;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	УдалитьСтроки();
	
	ОбщРег = СоздатьОбъект("Регистры");
	регПартии = ОбщРег.ПартииНаличие;
	
	// установим фильтры на измерения
	регПартии.УстановитьЗначениеФильтра("СтатусПартии", Перечисление.СтатусыПартии.Т_Принятый, 1);
	регПартии.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// Выписываемый задним числом
			регПартии.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе
		// сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			// Позиция не больше ТА.
			регПартии.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	регПартии.ВыгрузитьИтоги(НереализованныеТовары, 1, 1);
	
	МнЧ = СоздатьОбъект("ТаблицаЗначений");
	МнЧ.НоваяКолонка("Номенклатура");
	МнЧ.НоваяКолонка("Количество");
	МнЧ.НоваяКолонка("Цена");
	МнЧ.НоваяКолонка("Сумма");
	МнЧ.НоваяКолонка("СуммаНДС");
	МнЧ.НоваяКолонка("СуммаНП");
	
	НереализованныеТовары.ВыбратьСтроки();
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		
		Если НереализованныеТовары.Партия.ДоговорПоставщика <> Договор Тогда
			// Отсекаем партии с другим договором
			Продолжить;
		КонецЕсли;
		
		МнЧ.НоваяСтрока();
		
		МнЧ.Номенклатура = НереализованныеТовары.Номенклатура;
		ВремКоэфф        = МнЧ.Номенклатура.ОсновнаяЕдиница.Коэффициент;
		МнЧ.Количество   = НереализованныеТовары.Количество / ?(ВремКоэфф = 0, 1, ВремКоэфф);
		
		ОбщСумма     = глПересчет(НереализованныеТовары.Партия.ЗакупочнаяЦена 
		                        * НереализованныеТовары.Количество,
		                          Договор.ВалютаВзаиморасчетов, ДатаДок,
                                  Валюта, Курс);
		СуммаБезНП   = ОбщСумма;  // для расчета НДС
		
		// расчет суммы и цены и налогов
		Если УчитыватьНП = 1 Тогда
			ПроцНП      = МнЧ.Номенклатура.СтавкаНП.Ставка;
			МнЧ.СуммаНП = ОбщСумма * ПроцНП / (100 + ПроцНП);
			СуммаБезНП  = ОбщСумма - МнЧ.СуммаНП;
			
			Если СуммаВклНП = 0 Тогда
				ОбщСумма = СуммаБезНП;
			КонецЕсли;
		КонецЕсли;
		
		Если УчитыватьНДС = 1 Тогда
			МнЧ.СуммаНДС = СуммаБезНП * глВыделяемыйНДС(МнЧ.Номенклатура.СтавкаНДС);
			
			Если СуммаВклНДС = 0 Тогда
				ОбщСумма = ОбщСумма - МнЧ.СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		МнЧ.Сумма = ОбщСумма;
		Если МнЧ.Количество <> 0 Тогда
			МнЧ.Цена = МнЧ.Сумма / МнЧ.Количество;
		Иначе
			МнЧ.Цена = МнЧ.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МнЧ.КоличествоСтрок() = 0 Тогда
		Возврат "Отсутствуют товары, полученные по договору от комитента, но еще не реализованные";
	Иначе
		// свернем таблице по одиниковым товарам с одиниковой ценой
		МнЧ.Свернуть("Номенклатура,Цена", "Количество,Сумма,СуммаНДС,СуммаНП");
		
		МнЧ.ВыбратьСтроки();
		Пока МнЧ.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			
			Номенклатура = МнЧ.Номенклатура;
			Количество   = МнЧ.Количество;
			Единица      = Номенклатура.ОсновнаяЕдиница;
			Коэффициент  = Единица.Коэффициент;
			Цена         = МнЧ.Цена;
			Сумма        = МнЧ.Сумма;
			СтавкаНДС    = Номенклатура.СтавкаНДС;
			СуммаНДС     = МнЧ.СуммаНДС;
			СтавкаНП     = Номенклатура.СтавкаНП;
			СуммаНП      = МнЧ.СуммаНП;
			
			Если Склад.РозничныйСклад = 1 Тогда
			    РозничнаяЦена	= ПолучитьРозничнуюЦену(Номенклатура, Единица);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьПоИтогам()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст, Основание);
		УстановитьКодОперации();
		Форма.РозничнаяЦена.Видимость(Склад.РозничныйСклад);
		
		СтараяФирма			= Фирма;
		СтарыйСклад			= Склад;
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;

		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремКодОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	Если Склад.РозничныйСклад = 0 Тогда
		СписокОпераций.ДобавитьЗначение(глКО.ВозвратПоставщику);
		СписокОпераций.ДобавитьЗначение(глКО.ВозвратКомитенту);
	Иначе
		СписокОпераций.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);
		СписокОпераций.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);
	КонецЕсли;
	
	Если СписокОпераций.ВыбратьЗначение(ВремКодОперации,,,,1)=1 Тогда
		КодОперации	= ВремКодОперации;
	КонецЕсли;
	
КонецПроцедуры	//ПоКнопкеОперация()
                   
//******************************************************************************
// МожноЗаполнитьСостав(ТекстВопроса)
//
// Параметры: 
//  ТекстВопроса	- строка, текст вопроса
//
// Возвращаемое значение:
//  1 - состав можно перезаполнить, 0 - нет
//
// Описание:
//  Выводит запрос на подтверждение перезаполнения состава
//
Функция МожноЗаполнитьСостав(ТекстВопроса)
	
	Рез	= 1;
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос(ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
			Рез	= 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // МожноЗаполнитьСостав()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Результат	= "";
	
	Если (КодОперации = глКО.ВозвратКомитенту)
	 ИЛИ (КодОперации = глКО.ВозвратКомитентуИзРозницы)
	Тогда
		Если МожноЗаполнитьСостав(ВопросДоговор) = 1 Тогда
		    Результат = ЗаполнениеПоИтогам();
		КонецЕсли;
	Иначе
		Если МожноЗаполнитьСостав(ВопросДокОснование) = 1 Тогда
			Результат = ЗаполнениеПоДокументуОснованию();
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ФормПарПечШапки(Парметры)
//
// Параметры:
//  Параметры - сисок, содержащий значения для формирования шапки печатной формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список, содержащий значения полей для печати шапки документа
//
Процедура ФормПарПечШапки(Параметры)
	                     
	Параметры 	= СоздатьОбъект("СписокЗначений");
	// собственная фирма
	
	Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
	
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "БС";
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));	
	Если Проект.Наименование = "Сантехника безнал." Тогда
		ВыбЮЛ = "ИнжСантехника";
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп"; 
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	КонецЕсли;
	
	Если ВыбЮЛ = "БС" Тогда	
		глПлатежныеРеквизиты(Фирма.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			ФирмаРеквизиты = "";
		Иначе
			ФирмаРеквизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
		Параметры.ДобавитьЗначение(Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок),"ФИОДиректора");
		Параметры.ДобавитьЗначение(Фирма.ЮрЛицо.Глбухгалтер.Получить(ДатаДок),"ФИОГлБуха");
		Параметры.ДобавитьЗначение("","ФИООтпускающего");
		Параметры.ДобавитьЗначение("","Позиции");			
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) + ?(ПустоеЗначение(Фирма.ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(Фирма.ЮрЛицо.ИНН), ""), "Фирма");
		Параметры.ДобавитьЗначение(глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес), "ФирмаАдрес");
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.Телефоны), "ФирмаТелефоны");
		Параметры.ДобавитьЗначение(ФирмаРеквизиты, "ФирмаРеквизиты");
		Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ОКПО), "ФирмаОКПО");
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Реквизиты);
	    Параметры.ДобавитьЗначение(Реквизиты.Получить("ГенДир"),"ФИОДиректора");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ГлавБух"),"ФИОГлБуха");
		Параметры.ДобавитьЗначение("","ФИООтпускающего");
		Параметры.ДобавитьЗначение("","Позиции");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ПолноеНаименованиеФирмы")+", ИНН "+Реквизиты.Получить("ИНН")+"/"+Реквизиты.Получить("КПП"),"Фирма");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ПредставлениеЮрАдресаФирмы"), "ФирмаАдрес");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("Телефон")+", "+Реквизиты.Получить("Факс"), "ФирмаТелефоны");
		Параметры.ДобавитьЗначение("р/с "+Реквизиты.Получить("РасчСчет")+" в "+Реквизиты.Получить("Банк")+", БИК "+Реквизиты.Получить("БИК")+
							  ", корр/с "+Реквизиты.Получить("КоррСчет"),"ФирмаРеквизиты");
		Параметры.ДобавитьЗначение(Реквизиты.Получить("ОКПО"), "ФирмаОКПО");		
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС"
	
	// контрагент
	
	Клиент			= "";
	КлиентЮрАдрес	= "";
	КлиентФактАдрес	= "";
	КлиентОКПО		= "";
	КлиентРевизиты	= "";
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Клиент			= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование) +
		                  ?(ПустоеЗначение(Контрагент.ЮрФизЛицо.ИНН) = 0, ", ИНН" + СокрЛП(Контрагент.ЮрФизЛицо.ИНН), "");
		КлиентЮрАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ЮрАдрес);
		КлиентФактАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ФактАдрес);
		
		// у физ. лиц нет ОКПО
		Если Контрагент.ЮрФизЛицо.Вид() <> "ФизЛица" Тогда
			КлиентОКПО	= СокрЛП(Контрагент.ЮрФизЛицо.ОКПО);
		КонецЕсли;
		
		Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
		глПлатежныеРеквизиты(Контрагент.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			КлиентРевизиты = "";
		Иначе
			КлиентРевизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ДобавитьЗначение(Клиент, "Клиент");
	Параметры.ДобавитьЗначение(КлиентЮрАдрес, "КлиентЮрАдрес");
	Параметры.ДобавитьЗначение(КлиентФактАдрес, "КлиентФактАдрес");
	Параметры.ДобавитьЗначение(КлиентОКПО, "КлиентОКПО");
	Параметры.ДобавитьЗначение(КлиентРевизиты, "КлиентРеквизиты");
	
КонецПроцедуры // ФормПарПечШапки()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПарамШапки;
	
	ПечТабл = СоздатьОбъект("Таблица");
	ПечТабл.ИсходнаяТаблица("ТОРГ12");
	
	// инициализация переменных для печати шапки
	ФормПарПечШапки(ПарамШапки);
	
	// собственная фирма   
	ВремФирма		= ПарамШапки.Получить("Фирма");
	ФирмаАдрес		= ПарамШапки.Получить("ФирмаАдрес");
	ФирмаТелефоны	= ПарамШапки.Получить("ФирмаТелефоны");
	ФирмаРеквизиты	= ПарамШапки.Получить("ФирмаРеквизиты");
	ФирмаОКПО		= ПарамШапки.Получить("ФирмаОКПО");
		
	ПечОрг			= ВремФирма +
	?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
	?(ПустоеЗначение(ФирмаТелефоны) = 0, ", тел. " + ФирмаТелефоны, "") +
	?(ПустоеЗначение(ФирмаРеквизиты) = 0, ", " + ФирмаРеквизиты, "");
	
	ПечФирма		= ВремФирма +
	?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
	?(ПустоеЗначение(ФирмаРеквизиты) = 0, ", " + ФирмаРеквизиты, "");
	// контрагент
	
	Клиент			= ПарамШапки.Получить("Клиент");
	КлиентЮрАдрес	= ПарамШапки.Получить("КлиентЮрАдрес");
	КлиентФактАдрес	= ПарамШапки.Получить("КлиентФактАдрес");
	КлиентРеквизиты	= ПарамШапки.Получить("КлиентРеквизиты");
	КлиентОКПО		= ПарамШапки.Получить("КлиентОКПО");
	
	ПечКлиент		= Клиент +
	                  ?(ПустоеЗначение(КлиентЮрАдрес) = 0, ", " + КлиентЮрАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
					  
	ПечГрузополучатель = Клиент +
	                  ?(ПустоеЗначение(КлиентФактАдрес) = 0, ", " + КлиентФактАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
	
	Если ПустоеЗначение(ДокОснование) = 1 Тогда
	    ПечДокОснование	= "";
	Иначе
		ПечДокОснование	= глПредставлениеДокумента(ДокОснование);
	КонецЕсли;
	
	// выясним, какую вертикальную секцию будем использовать
	Если УчитыватьНП = 0 Тогда
		ВертСекция = "";
	Иначе
		ВертСекция = "_НП";
	КонецЕсли;
	
	// Выводим шапку таблицы. Шапка печатается на каждом листе.
	ПечТабл.ВывестиСекцию("Шапка");
	
	// Выводим спецификацию
	
	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице	= 22;
	
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки		= 10;
	СтрокПодвала	= 9;
	
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	НомерСтраницы	= 1;

	Если КоличествоСтрок() = 1 Тогда
		ПереноситьПоследнююСтроку	= 0;
	Иначе
		ЦелыхСтраницСПодвалом		= Цел((СтрокШапки + КоличествоСтрок() + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала		= Цел((СтрокШапки + КоличествоСтрок() - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку	= ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице	= 0;
	ИтогоСуммаНаСтранице		= 0;
	ИтогоНДСНаСтранице			= 0;
	ИтогоСуммаСНДСНаСтранице	= 0;
	ИтогоНГСМНаСтранице			= 0;
	ИтогоНПНаСтранице			= 0;

	// инициализация итогов по документу
	ИтогоКоличество	= 0;
	ИтогоСумма		= 0;
	ИтогоНДС		= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоНГСМ		= 0;
	ИтогоНП			= 0;

	Ном	= 0;
	
	КурсРублей = глКурсДляВалюты(глРубли, ДатаДок);
	
	ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном	= Ном + 1;
		
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница	= (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок())) Тогда
			ПечТабл.ВывестиСекцию("ИтогоПоСтранице"+ВертСекция);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице	= 0;
			ИтогоСуммаНаСтранице		= 0;
			ИтогоНДСНаСтранице			= 0;
			ИтогоСуммаСНДСНаСтранице	= 0;
			ИтогоНГСМНаСтранице			= 0;
			ИтогоНПНаСтранице			= 0;
			
			ПечТабл.НоваяСтраница();
			НомерСтраницы	= НомерСтраницы + 1;
			ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
		КонецЕсли;

		ПечТовар		= СокрЛП(Номенклатура.ПолнНаименование);
		ПечЕдиница		= СокрЛП(Единица.ОКЕИ.Наименование);
		ПечОКЕИ			= СокрЛП(Единица.ОКЕИ.Код);
		
		ПечКоличество	= Количество;
		КолВо			= ?(Количество = 0, 1, Количество);
		
		ПечКолвоВОдномМесте = ?(Коэффициент <= 1, "", Коэффициент);
		ПечКоличествоМест = ?(Коэффициент <= 1, "", Количество);
                                                                         
		СуммаПеч    = глПересчет(Сумма   , Валюта, Курс, глРубли, КурсРублей);
		СуммаНДСПеч = глПересчет(СуммаНДС, Валюта, Курс, глРубли, КурсРублей);
		СуммаНППеч  = глПересчет(СуммаНП , Валюта, Курс, глРубли, КурсРублей);
		
		Если СуммаВклНП = 1 Тогда
			СуммаБезНП = СуммаПеч - СуммаНППеч;
		Иначе
			СуммаБезНП = СуммаПеч;
		КонецЕсли;
		
		Если СуммаВклНДС = 1 Тогда
            СуммаБезНДС = СуммаБезНП - СуммаНДСПеч;
			СуммаСНДС   = СуммаБезНП;
		Иначе
            СуммаБезНДС = СуммаБезНП;
			СуммаСНДС   = СуммаБезНП + СуммаНДСПеч;
		КонецЕсли;
		
		ПечНДС			= СуммаНДСПеч;
		
		Если Найти(ВремФирма, "ЭКСПЕРТ") <>  0  Тогда
			СуммаБезНДС = СуммаСНДС;
			ПечНДС = 0;
		КонецЕсли;
		
		Если УчитыватьНП = 1 Тогда
		    ПечНП = СуммаНППеч;
		Иначе
			ПечНП = "";
		КонецЕсли;
		
		ПечЦена = ?(Количество <> 0, СуммаБезНДС / Количество, СуммаБезНДС);
		
		ПечТабл.ВывестиСекцию("Строка" + ВертСекция);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице	= ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице + СуммаБезНДС;
		ИтогоНДСНаСтранице			= ИтогоНДСНаСтранице + ПечНДС;
		ИтогоСуммаСНДСНаСтранице	= ИтогоСуммаСНДСНаСтранице + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНПНаСтранице = ИтогоНПНаСтранице + ПечНП;
		КонецЕсли;

		// увеличим итоги по дукументу
		ИтогоКоличество	= ИтогоКоличество + Количество;
		ИтогоСумма		= ИтогоСумма + СуммаБезНДС;
		ИтогоНДС		= ИтогоНДС + ПечНДС;
		ИтогоСуммаСНДС	= ИтогоСуммаСНДС + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНП = ИтогоНП + ПечНП;
		КонецЕсли;
	КонецЦикла;

	ПечТабл.ВывестиСекцию("ИтогоПоСтранице" + ВертСекция);
	ПечТабл.ВывестиСекцию("Всего" + ВертСекция);
	
	// выводим подвал
	НаСумму	= "на сумму " + глСуммаПрописью(ИтогоСуммаСНДС + ИтогоНП, глРубли);

	// формируем строку для вывода количества листов накладной
	// Слово лист склоняется
	Если (НомерСтраницы > 10) И (НомерСтраницы < 20) Тогда
		Слово	= " листах";
	Иначе
		ПоследняяЦифра	= НомерСтраницы % 10;
		
		Если ПоследняяЦифра = 1 Тогда
		    Слово	= " листе";
		Иначе
		    Слово	= " листах";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКоличествоЛистов	= Строка(НомерСтраницы) + Слово;
	
	ФИОДиректора	= ПарамШапки.Получить("ФИОДиректора");
	ФИОГлБуха		= ПарамШапки.Получить("ФИОГлБуха");
	ФИООтпускающего	= ПарамШапки.Получить("ФИООтпускающего");
	Позиции			= ПарамШапки.Получить("Позиции");

	ПечТабл.ВывестиСекцию("Подвал");

	// показать сформированную таблицу
	             
	Если СразуНаПринтер = 0 Тогда
		ПечТабл.Опции(0, 0, 0, 0, "ДляРеализации", "ДляРеализации");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечТабл.Защита(1);
		Иначе
			ПечТабл.Защита(0);
		КонецЕсли;
		ПечТабл.ТолькоПросмотр(1);

		ПечТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечТабл.КоличествоЭкземпляров(КолЭкз);
		ПечТабл.Напечатать(0);
	КонецЕсли;
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//*****************************************************************************
// предопределенная процедура                
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
		       
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат)  = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
	УстановитьКодОперации();
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "Покупка");
	
	Если Скопирован = 1 Тогда	//копирование документа - очистим партии
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметр = "Комиссия" Тогда  
		Если Склад.РозничныйСклад = 0 Тогда
			КодОперации		= глКО.ВозвратКомитенту;
		Иначе
			КодОперации		= глКО.ВозвратКомитентуИзРозницы;
		КонецЕсли;
	Иначе
		Если Склад.РозничныйСклад = 0 Тогда
			КодОперации	= глКО.ВозвратПоставщику;
		Иначе
			КодОперации	= глКО.ВозвратПоставщикуИзРозницы;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ВводНового()

//******************************************************************************
// предопределенная процедура
Процедура ПриОткрытии() 
	                      
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйСклад				= Склад;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	УстановкаВидимостиСуммВПодвале();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	ОбновитьНадписи();
	
	Форма.РозничнаяЦена.Видимость(Склад.РозничныйСклад);
КонецПроцедуры // ПриОткрытии()                                                                 
                     
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "РозничнаяЦена" Тогда 
		Если (Склад.РозничныйСклад = 1) И (Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга) Тогда
			ФлагСтандОбр	= 0;
			ТовЦена			= "";
			
			Если глПересчетРегистров(Контекст, СписокПараметров) = 1 Тогда
				глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				СписокЦен.ВыбратьЗначение(РозничнаяЦена,,, 60,2);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
		Форма.РозничнаяЦена.Видимость(Склад.РозничныйСклад);
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры                        

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;        
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры
	                                         
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	//есть ставки налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 0);
	
	// пропишем розничную цену
	Если Склад.РозничныйСклад = 1 Тогда
		Если глПересчетРегистров(Контекст, СписокПараметров) = 1 Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если ПустоеЗначение(РозничнаяЦена) = 1 Тогда
					// розничная цена могла быть уже задана
					РозничнаяЦена	= ПолучитьРозничнуюЦену(Номенклатура, Единица);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()                                               

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица"     , "Справочник.Единицы");
				ТаблицаПодбора.НоваяКолонка("Количество"  , "Число");
				ТаблицаПодбора.НоваяКолонка("Цена"        , "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
			    
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 0);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

//////////////////////////////////////////////////////////////////////////////////

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-12";
ТаблицаПечФорм.Кнопка       = "ТОРГ-12";

ВопросДоговор		= "Заполнить по договору товарами принятыми от комитента, но еще не реализованными?";
ВопросДокОснование	= "Заполнить по документу основанию?";

// Для выбора цен
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);