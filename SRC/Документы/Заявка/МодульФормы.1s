//*****************************************************************************
// Описание переменных 
Перем Дат;
Перем КодыСтатусов;
Перем СписокПечати;
Перем СписокДействий;
Перем СтараяДата;
Перем НачальнаяДатаДокумента; // Для контроля даты документа
Перем ДатаЗаявки, ДатаПрихода, СкладыДляОстатков;
////////
//////////**Это для формирования экспорта
////////Перем ИмяФайла;
////////перем ЭтоНовыйДядька;
////////
////////Процедура ДобавитьНовыйВБазу() далее
Процедура ОбновитьСтроку() далее
Процедура ПоКнопкеОбновить() далее
Процедура РасчетРасхода(ТОВ) далее 
Процедура РасчетРасхода1(ТОВ) далее 
////////
////////Процедура ОбновиНадписи()		//Отображение ркквизитов формы
////////	Если рОст=0 тогда
////////		Форма.Остаток.Видимость(0);
////////		Форма.Оборот.Видимость(0);
////////	иначе
////////		Форма.Остаток.Видимость(1);
////////		Форма.Оборот.Видимость(1);
////////	КонецЕсли;
////////	Форма.Товар.ВыполнятьФормулуТолькоПриИзменении(1);
////////	
////////КонецПроцедуры
////////
//////// 
 //******************************************************************************
// ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
//
// Параметры: 
//  СписТоваров		- список значений, содержащий товары для установки фильтра
//                    по ним.
//  ТолькоОстатки	- установить фильтр только по номенклатуре, которая
//                    присутствует в составе
//  ОстаткиТМЦ		- выходной параметр. Таблица значений с остатками регистра 
//                    ОстаткиТМЦ
//  РегПартии		- выходной параметр. Таблица значений с остатками регистра 
//                    ПартииНаличие.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Формирует таблицы значений из остатков регистров ОстаткиТМЦ
//       
Процедура ВывестиИзлишкиПоСкладам()
	Перем Запрос, ТекстЗапроса;
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	   
	//ВыбСкладМол = ВыбСклад.МОЛ;
	ТекНоменклатура = Номенклатура;
	ВыбНачПериода = ТекущаяДата();
	
	Если ВыбНачПериода > ПолучитьДатуТА() Тогда
		ВыбНачПериода = ПолучитьДатуТА();
		Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Номенклатура 		= Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад				= Регистр.ОстаткиТМЦ.Склад;
	|Количество 		= Регистр.ОстаткиТМЦ.Количество;
	|Функция ТекОстаток = КонОст(Количество);
	|Группировка Склад без групп;
	|Условие(Номенклатура = ТекНоменклатура); 
	|Условие(Склад в СкладыДляОстатков);  
	|"//}}ЗАПРОС
	;   
	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
              
	
	// Валерий МЭТР
	СпрОстаткиНоменклатуры 	= СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	КоэффициентСезонности 	= 1;
	СтарыйМол				= "";
	 
	ИзлишекЦС 	= 0;
	ИзлишекК 	= 0;
	ИзлишекЭ 	= 0;
	ИзлишекЛенс = 0;
	ИзлишекЛен 	= 0;
	ИзлишекРад 	= 0;
	ИзлишекСтах = 0;
	ИзлишекТур 	= 0;
	
	Пока Запрос.Группировка(1) = 1 Цикл	
		Если Запрос.ТекОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		МаксОстаток = 0;		
		// Валерий МЭТР
		СпрОстаткиНоменклатуры.ИспользоватьВладельца(Запрос.Номенклатура);
		СпрОстаткиНоменклатуры.ИспользоватьДату(ТекущаяДата());
		СпрОстаткиНоменклатуры.ВыбратьЭлементы();
		Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
			Если (СпрОстаткиНоменклатуры.Склад = Запрос.Склад)
				И (СпрОстаткиНоменклатуры.ПометкаУдаления() = 0) Тогда
				//МинОстаток 	= СпрОстаткиНоменклатуры.МинимальныйОстаток * КоэффициентСезонности; 
				МаксОстаток = СпрОстаткиНоменклатуры.МаксимальныйОстаток;
				
				МаксОстаток = Цел(МаксОстаток);
				Прервать;
			КонецЕсли;		
		КонецЦикла;		
		
		ТЗОтклонение = 0;      
		Если Запрос.ТекОстаток > МаксОстаток Тогда
			ТЗОтклонение = Запрос.ТекОстаток - МаксОстаток;
			Если Запрос.Склад.Код = "00020" Тогда  
				ИзлишекК = ТЗОтклонение;
			//ИначеЕсли Запрос.Склад.Код = "00013" Тогда 
				//ИзлишекЦС = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00002" Тогда 
				ИзлишекЭ = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00004" Тогда 
				ИзлишекЛенс = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00029" Тогда
				ИзлишекЛен = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00006" Тогда
				ИзлишекРад = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00005" Тогда
				ИзлишекСтах = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00017" Тогда
				ИзлишекТур = ТЗОтклонение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры 

Процедура ОбрфлСкрытьСклады()     
	//Форма.ИзлишекЦС.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекК.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЭ.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЛенс.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЛен.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекРад.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекСтах.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекТур.Видимость(1-флСкрытьСклады);
	
	//Форма.ЗабратьЦС.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьК.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЭ.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЛенс.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЛен.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьРад.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьСтах.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьТур.Видимость(1-флСкрытьСклады); 
КонецПроцедуры

Процедура кнОбновитьИзлишки()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ВывестиИзлишкиПоСкладам();	
	КонецЦикла;	
КонецПроцедуры	

Процедура СоздатьПеремещения() 
	                                       
	
	//ПеремещениеЦС 	= СоздатьОбъект("Документ.ПеремещениеТМЦ");
	ПеремещениеЭ 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеК 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеЛенс = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеЛен 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеРад 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеСтах = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеТур 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	
	СпрСклады = СоздатьОбъект("Справочник.Склады");
	               
	ПеремещениеЭ.Новый();            
	ПеремещениеЭ.ДатаДок			= ТекущаяДата();
	ПеремещениеЭ.Валюта				= глРубли;
	ПеремещениеЭ.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00002");
	ПеремещениеЭ.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеЭ.Фирма				= Фирма;
	ПеремещениеЭ.СкладПолучатель	= Склад;
	ПеремещениеЭ.ФирмаПолучатель	= Фирма;
	ПеремещениеЭ.УчитыватьНДС		= 1;
	ПеремещениеЭ.СуммаВклНДС		= 1;
	ПеремещениеЭ.УчитыватьНП		= 1;
	ПеремещениеЭ.СуммаВклНП			= 1;  
	ПеремещениеЭ.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	//ПеремещениеЦС.Новый();            
	//ПеремещениеЦС.ДатаДок			= ТекущаяДата();
	//ПеремещениеЦС.Валюта				= глРубли;
	//ПеремещениеЦС.Курс				= 1;    
	//СпрСклады.НайтиПоКоду("00013");
	//ПеремещениеЦС.Склад				= СпрСклады.ТекущийЭлемент();
	//ПеремещениеЦС.Фирма				= Фирма;
	//ПеремещениеЦС.СкладПолучатель	= Склад;
	//ПеремещениеЦС.ФирмаПолучатель	= Фирма;
	//ПеремещениеЦС.УчитыватьНДС		= 1;
	//ПеремещениеЦС.СуммаВклНДС		= 1;
	//ПеремещениеЦС.УчитыватьНП		= 1;
	//ПеремещениеЦС.СуммаВклНП			= 1;  
	//ПеремещениеЦС.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
		
	ПеремещениеК.Новый();            
	ПеремещениеК.ДатаДок			= ТекущаяДата();
	ПеремещениеК.Валюта				= глРубли;
	ПеремещениеК.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00020");
	ПеремещениеК.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеК.Фирма				= Фирма;
	ПеремещениеК.СкладПолучатель	= Склад;
	ПеремещениеК.ФирмаПолучатель	= Фирма;
	ПеремещениеК.УчитыватьНДС		= 1;
	ПеремещениеК.СуммаВклНДС		= 1;
	ПеремещениеК.УчитыватьНП		= 1;
	ПеремещениеК.СуммаВклНП			= 1;  
	ПеремещениеК.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеЛенс.Новый();            
	ПеремещениеЛенс.ДатаДок			= ТекущаяДата();
	ПеремещениеЛенс.Валюта			= глРубли;
	ПеремещениеЛенс.Курс			= 1;    
	СпрСклады.НайтиПоКоду("00004");
	ПеремещениеЛенс.Склад			= СпрСклады.ТекущийЭлемент();
	ПеремещениеЛенс.Фирма			= Фирма;
	ПеремещениеЛенс.СкладПолучатель	= Склад;
	ПеремещениеЛенс.ФирмаПолучатель	= Фирма;
	ПеремещениеЛенс.УчитыватьНДС	= 1;
	ПеремещениеЛенс.СуммаВклНДС		= 1;
	ПеремещениеЛенс.УчитыватьНП		= 1;
	ПеремещениеЛенс.СуммаВклНП		= 1;  
	ПеремещениеЛенс.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеЛен.Новый();            
	ПеремещениеЛен.ДатаДок			= ТекущаяДата();
	ПеремещениеЛен.Валюта				= глРубли;
	ПеремещениеЛен.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00029");
	ПеремещениеЛен.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеЛен.Фирма				= Фирма;
	ПеремещениеЛен.СкладПолучатель	= Склад;
	ПеремещениеЛен.ФирмаПолучатель	= Фирма;
	ПеремещениеЛен.УчитыватьНДС		= 1;
	ПеремещениеЛен.СуммаВклНДС		= 1;
	ПеремещениеЛен.УчитыватьНП		= 1;
	ПеремещениеЛен.СуммаВклНП			= 1;  
	ПеремещениеЛен.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеРад.Новый();            
	ПеремещениеРад.ДатаДок			= ТекущаяДата();
	ПеремещениеРад.Валюта				= глРубли;
	ПеремещениеРад.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00006");
	ПеремещениеРад.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеРад.Фирма				= Фирма;
	ПеремещениеРад.СкладПолучатель	= Склад;
	ПеремещениеРад.ФирмаПолучатель	= Фирма;
	ПеремещениеРад.УчитыватьНДС		= 1;
	ПеремещениеРад.СуммаВклНДС		= 1;
	ПеремещениеРад.УчитыватьНП		= 1;
	ПеремещениеРад.СуммаВклНП			= 1;  
	ПеремещениеРад.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеСтах.Новый();            
	ПеремещениеСтах.ДатаДок			= ТекущаяДата();
	ПеремещениеСтах.Валюта				= глРубли;
	ПеремещениеСтах.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00005");
	ПеремещениеСтах.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеСтах.Фирма				= Фирма;
	ПеремещениеСтах.СкладПолучатель	= Склад;
	ПеремещениеСтах.ФирмаПолучатель	= Фирма;
	ПеремещениеСтах.УчитыватьНДС		= 1;
	ПеремещениеСтах.СуммаВклНДС		= 1;
	ПеремещениеСтах.УчитыватьНП		= 1;
	ПеремещениеСтах.СуммаВклНП			= 1;  
	ПеремещениеСтах.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеТур.Новый();            
	ПеремещениеТур.ДатаДок			= ТекущаяДата();
	ПеремещениеТур.Валюта				= глРубли;
	ПеремещениеТур.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00017");
	ПеремещениеТур.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеТур.Фирма				= Фирма;
	ПеремещениеТур.СкладПолучатель	= Склад;
	ПеремещениеТур.ФирмаПолучатель	= Фирма;
	ПеремещениеТур.УчитыватьНДС		= 1;
	ПеремещениеТур.СуммаВклНДС		= 1;
	ПеремещениеТур.УчитыватьНП		= 1;
	ПеремещениеТур.СуммаВклНП			= 1;  
	ПеремещениеТур.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		//Если ЗабратьЦС <> 0 Тогда
		//	ПеремещениеЦС.НоваяСтрока();
		//	ПеремещениеЦС.Номенклатура = Номенклатура;
		//	ПеремещениеЦС.Количество   = ЗабратьЦС;
		//	ПеремещениеЦС.Единица      = Номенклатура.ОсновнаяЕдиница;
		//	ПеремещениеЦС.Коэффициент = 1;
		//	глПересчетТаблЧасти(ПеремещениеЦС, "Количество");
		//	
		//	//СпрНом.ИспользоватьДату(ДатаДок);
		//	//СпрНом.НайтиЭлемент(Номенклатура);
		//	//ПеремещениеЦС.Цена = СпрНом.ПоследняяЦенаПрихода;
		//	//ПеремещениеЦС.Сумма = ПеремещениеК.Количество*ПеремещениеК.Цена; 
		//	
		//КонецЕсли;
		Если ЗабратьК <> 0 Тогда
			ПеремещениеК.НоваяСтрока();
			ПеремещениеК.Номенклатура = Номенклатура;
			ПеремещениеК.Количество   = ЗабратьК;
			ПеремещениеК.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеК.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеК, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеК.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеК.Сумма = ПеремещениеК.Количество*ПеремещениеК.Цена; 
			
		КонецЕсли;
		Если ЗабратьЭ <> 0 Тогда 
			ПеремещениеЭ.НоваяСтрока();
			ПеремещениеЭ.Номенклатура = Номенклатура;
			ПеремещениеЭ.Количество   = ЗабратьЭ;
			ПеремещениеЭ.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеЭ.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЭ, "Количество");  
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЭ.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЭ.Сумма = ПеремещениеЭ.Количество*ПеремещениеЭ.Цена;
		КонецЕсли;
		Если ЗабратьСтах <> 0 Тогда                    
			ПеремещениеСтах.НоваяСтрока();
			ПеремещениеСтах.Номенклатура = Номенклатура;
			ПеремещениеСтах.Количество   = ЗабратьСтах;
			ПеремещениеСтах.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеСтах.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеСтах, "Количество");    
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеСтах.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеСтах.Сумма = ПеремещениеСтах.Количество*ПеремещениеСтах.Цена;
		КонецЕсли;
		Если ЗабратьЛен <> 0 Тогда                     
			ПеремещениеЛен.НоваяСтрока();
			ПеремещениеЛен.Номенклатура = Номенклатура;
			ПеремещениеЛен.Количество   = ЗабратьЛен;
			ПеремещениеЛен.Единица      = Номенклатура.ОсновнаяЕдиница; 
			ПеремещениеЛен.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЛен, "Количество");   
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЛен.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЛен.Сумма = ПеремещениеЛен.Количество*ПеремещениеЛен.Цена;
		КонецЕсли;
		Если ЗабратьЛенс <> 0 Тогда                    
			ПеремещениеЛенс.НоваяСтрока();
			ПеремещениеЛенс.Номенклатура = Номенклатура;
			ПеремещениеЛенс.Количество   = ЗабратьЛенс;
			ПеремещениеЛенс.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеЛенс.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЛенс, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЛенс.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЛенс.Сумма = ПеремещениеЛенс.Количество*ПеремещениеЛенс.Цена;
		КонецЕсли;
		Если ЗабратьТур <> 0 Тогда                     
			ПеремещениеТур.НоваяСтрока();
			ПеремещениеТур.Номенклатура = Номенклатура;
			ПеремещениеТур.Количество   = ЗабратьТур;
			ПеремещениеТур.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеТур.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеТур, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеТур.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеТур.Сумма = ПеремещениеТур.Количество*ПеремещениеТур.Цена;
		КонецЕсли;
		Если ЗабратьРад <> 0 Тогда
			ПеремещениеРад.НоваяСтрока();
			ПеремещениеРад.Номенклатура = Номенклатура;
			ПеремещениеРад.Количество   = ЗабратьРад;
			ПеремещениеРад.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеРад.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеРад, "Количество"); 
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеРад.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеРад.Сумма = ПеремещениеРад.Количество*ПеремещениеРад.Цена;
		КонецЕсли;	
	КонецЦикла;		
	          
	//Если ПеремещениеЦС.КоличествоСтрок() <> 0 Тогда
	//	ПеремещениеЦС.УстановитьНовыйНомер("Пр"+ПеремещениеЦС.СкладПолучатель.ПрефиксНомеровДокументов);
	//	ПеремещениеЦС.Записать();  
	//	Сообщить("Создано перемещение: "+ПеремещениеЦС.ТекущийДокумент());
	//КонецЕсли;
	Если ПеремещениеЭ.КоличествоСтрок() <> 0 Тогда
		ПеремещениеЭ.УстановитьНовыйНомер("Пр"+ПеремещениеЭ.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЭ.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЭ.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеЛенс.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеЛенс.УстановитьНовыйНомер("Пр"+ПеремещениеЛенс.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЛенс.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЛенс.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеЛен.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеЛен.УстановитьНовыйНомер("Пр"+ПеремещениеЛен.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЛен.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЛен.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеРад.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеРад.УстановитьНовыйНомер("Пр"+ПеремещениеРад.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеРад.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеРад.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеСтах.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеСтах.УстановитьНовыйНомер("Пр"+ПеремещениеСтах.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеСтах.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеСтах.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеТур.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеТур.УстановитьНовыйНомер("Пр"+ПеремещениеТур.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеТур.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеТур.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеК.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеК.УстановитьНовыйНомер("Пр"+ПеремещениеК.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеК.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеК.ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры

Процедура ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ)
	
	ВремРегистры	= СоздатьОбъект("Регистры");
	РегОстатки		= ВремРегистры.ОстаткиТМЦ;
	РегОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
	
	Если (ПустоеЗначение(СписТоваров) = 0) Тогда
		РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);
	КонецЕсли;

	// в этом случае надо сделать временный расчет итогов
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	ОстаткиТМЦ	= СоздатьОбъект("ТаблицаЗначений");
	РегОстатки.ВыгрузитьИтоги(ОстаткиТМЦ, 1, 1);
	
КонецПроцедуры // ПолучитьОстатки()
////////
////////
////////////Обеспечивает правильность заполнения данными при работе с подбром товара
Процедура Пересчет(Подбор=0)
	Если Номенклатура.Выбран() = 1 Тогда
        Единица		= Номенклатура.БазоваяЕдиница;
		Коэффициент	= 1;
	конецесли;
	Если Единица.Выбран() = 1 Тогда
        Коэффициент	= 1;
	конецесли;
	ОбновитьСтроку();
КонецПроцедуры
////////
Процедура ПриВыбореСклада();
    УстановитьНовыйНомер("Зк"+Склад.ПрефиксНомеровДокументов);
КонецПроцедуры
////////
////////
//////////Обработка автоматического заполнения заявки на основании документов реализации за период
//////////указанный в диалоге
////////
//////////Обновление остатков в форме
Процедура ПоКнопкеОбновить() 
	ТОВ=СоздатьОбъект("СписокЗначений");

	ВыбратьСтроки();
	пока получитьСтроку()=1 цикл
		ТОВ.ДобавитьЗначение(Номенклатура);
	КонецЦикла;
	РасчетРасхода(ТОВ);  
    РасчетРасхода1(ТОВ);
КонецПроцедуры
////////
Процедура ОбновитьСтроку()
	РасчетРасхода(Номенклатура);
	РасчетРасхода1(Номенклатура);
КонецПроцедуры

//Процедура УстановитьФлаг()
//	Если Важность="!!!" тогда 
//		Важность="";
//	иначе
//		Важность="!!!";
//	КонецЕсли;
//КонецПроцедуры  

Процедура Печать()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Печать");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	ВыбратьСтроки();
	а=0;
	Пока ПолучитьСтроку()=1 Цикл
		а=а+1;
		Таб.ВывестиСекцию("Строка_1");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Заявка","");
КонецПроцедуры    
////////
//*******************************************
// Процедура генерации запроса РасчетРасхода.
//
Процедура РасчетРасхода(ТОВ)
	Перем Запрос, ТекстЗапроса, ТЗ;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(РасчетРасхода)
	|Период с (получитьДатуТА()-7);
	|ОстатокТовара	= Регистр.ОстаткиТМЦ.Количество;
	|Фирма 			= Регистр.ОстаткиТМЦ.Фирма;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад1			= Регистр.ОстаткиТМЦ.Склад;
	|Функция ОстатокТовараРасход = Расход(ОстатокТовара);
	|Функция ОстатокТовараКонОст = КонОст(ОстатокТовара);
	|Группировка Номенклатура без групп;
	|Условие(Номенклатура в ТОВ);
	|Условие(Склад1 = Склад);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	если Запрос.Выгрузить(ТЗ)=1 тогда
		ВыбратьСтроки();
		пока ПолучитьСтроку()=1 цикл	//Проставляем продажи
			стр=ПолучитьПустоеЗначение(стр);кол=ПолучитьПустоеЗначение(кол);
			если ТЗ.НайтиЗначение(Номенклатура,стр,кол)=1 тогда
				Оборот	= ТЗ.получитьЗначение(стр,2);
				Остаток	= окр(ТЗ.получитьЗначение(стр,3),0,2); 
			КонецЕсли;
		КонецЦикла;
	иначе 
		сообщить("Запрос не выполнен! Продажи за период не посчитаны");
		возврат;
	КонецЕсли;	//Условие на запрос()
	
КонецПроцедуры

Процедура РасчетРасхода1(ТОВ)
	Перем Запрос, ТекстЗапроса, ТЗ; 
	
	Склад2 = Константа.ОсновнойСклад2;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(РасчетРасхода)
	|Период с (получитьДатуТА()-7);
	|ОстатокТовара	= Регистр.ОстаткиТМЦ.Количество;
	|Фирма 			= Регистр.ОстаткиТМЦ.Фирма;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад1			= Регистр.ОстаткиТМЦ.Склад;
	|Функция ОстатокТовараРасход = Расход(ОстатокТовара);
	|Функция ОстатокТовараКонОст = КонОст(ОстатокТовара);
	|Группировка Номенклатура без групп;
	|Условие(Номенклатура в ТОВ);
	|Условие(Склад1 = Склад2);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	если Запрос.Выгрузить(ТЗ)=1 тогда
		ВыбратьСтроки();
		пока ПолучитьСтроку()=1 цикл	//Проставляем продажи
			стр=ПолучитьПустоеЗначение(стр);кол=ПолучитьПустоеЗначение(кол);
			если ТЗ.НайтиЗначение(Номенклатура,стр,кол)=1 тогда
			//	Оборот	= ТЗ.получитьЗначение(стр,2);
				ОснСкл= окр(ТЗ.получитьЗначение(стр,3),0,2); 
			КонецЕсли;
		КонецЦикла;
	иначе 
		сообщить("Запрос не выполнен! Продажи за период не посчитаны");
		возврат;
	КонецЕсли;	//Условие на запрос()
	
КонецПроцедуры 


Процедура ПриОткрытии()
	Если (НазваниеНабораПрав()="Продавец_розница") и (глПользователь.ОсновнойСклад<>Склад) тогда
		сообщить("Этот документ зарегистрирован для другого магазина, вы не можете его открывать!");
		форма.закрыть(0);
	КонецЕсли;
	Форма.ИспользоватьСлой("Основной",2);
	
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);
	    
	СпрСклады = СоздатьОбъект("Справочник.Склады"); 
	СпрСклады.ВыбратьЭлементы();
	СкладыДляОстатков = СоздатьОбъект("СписокЗначений");
	
	Пока СпрСклады.ПолучитьЭлемент() = 1 Цикл
		Если (СпрСклады.Код = "00020") 
		или (СпрСклады.Код = "00002") 
		или (СпрСклады.Код = "00004") 
		или (СпрСклады.Код = "00029") 
		или (СпрСклады.Код = "00006") 
		или (СпрСклады.Код = "00005") 
		или (СпрСклады.Код = "00017")
		//или (СпрСклады.Код = "00013") 
		Тогда
			СкладыДляОстатков.ДобавитьЗначение(СпрСклады.ТекущийЭлемент());	
		КонецЕсли;	
	КонецЦикла;	
	
	флСкрытьСклады = 1;
	ОбрфлСкрытьСклады();
	
КонецПроцедуры 

Процедура ПоКнопкеАвто()
	Если КоличествоСтрок()>0 тогда
		а=Вопрос("Все текущие данные в документе будут замещены, ВЫ уверены в этом?", 1);
		если а=2 тогда
			возврат;
		конецесли;
	КонецЕсли;
	Форма.ИспользоватьСлой("Автомат",2); 
	//Поиск предыдущей заявки
	Состояние("Ищем предыдущую заявку...");
	Заявки=СоздатьОбъект("Документ.Заявка");
	Заявки.ВыбратьДокументы();
	Пока Заявки.ПолучитьДокумент()=1 цикл
		Если Заявки.Склад=Склад тогда
			ДатаЗаявки=Заявки.ДатаДок;
		КонецЕсли;
	КонецЦикла;
	ВыбНачПериода=ДатаЗаявки;
	ВыбКонПериода=ТекущаяДата();
	Форма.Обновить();
КонецПроцедуры


Процедура ПоКнопкеСформировать()
	Перем ТаблОстатков;
	Перем СписТоваров;
	Состояние("Подождите... Идёт процесс формирования заявки"); 
	Док=СоздатьОбъект("Документ.РасходнаяНакладнаяРозница");
	ТЗ1=СоздатьОбъект("ТаблицаЗначений");
	Док.ВыбратьДокументы(ВыбНачПериода,ВыбКонПериода);
	ЧислоДок=0;
	ЧислоСтрок=0;
	Пока Док.ПолучитьДокумент()=1 цикл
		Если (Док.Склад=Склад) и (Док.Проведен()=1) тогда		//Все документы проведены и нужного склада
			ЧислоДок=ЧислоДок+1;
			Состояние("Обрабатывается документ:  "+СокрЛП(Док));
			//Впихиваем всё это в документ и потом сожмём по необходимости
			Пока Док.ПолучитьСтроку()=1  цикл
				Если Док.Номенклатура.ВидНоменклатуры<>Перечисление.ВидыНоменклатуры.Услуга тогда
					НоваяСтрока();
					ЧислоСтрок	  = ЧислоСтрок+1;
					Номенклатура  = Док.Номенклатура;
					Количество	  = Док.Количество;
					Единица		  = Док.Единица;
					Коэффициент	= 1;
				КонецЕсли;
			Конеццикла;
		КонецЕсли;
	КонецЦикла;
	Состояние("Свёртываются строки таблицы...");
	ВыгрузитьТабличнуюЧасть(ТЗ1);
	ТЗ1.Свернуть("Номенклатура,Единица,Коэффициент,Остаток","Количество");
	Состояние("Рассчитываем остатки на складе...");
	УдалитьСтроки();
	ЗагрузитьТабличнуюЧасть(ТЗ1);
//	ПоКнопкеОбновить(); 

	Форма.Обновить();
КонецПроцедуры 

Процедура ПоКнопкеОбратно()
   	Форма.ИспользоватьСлой("Основной",2);
КонецПроцедуры 

Функция ВыборПродавца()
	СписокПродавцов	= "";	
	СписокПродавцов = СоздатьОбъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.Родитель.Наименование = "Продавцы" тогда
			Если Спр.ОсновнойСклад = глПользователь.ОсновнойСклад тогда
			 	СписокПродавцов.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;		 	
		КонецЕсли;	
	КонецЦикла;	
	__Автор = Автор;        
	Если СписокПродавцов.ВыбратьЗначение(__Автор,"Автор документа") = 1 тогда
		Возврат __Автор;
	иначе 
		Возврат "";
	КонецЕсли;
КонецФункции

//======================================================================
Процедура ВводНаОсновании(Основание)
	ДокОснование 	= Основание;
	Склад 			= Основание.Склад;
	Автор 			= глПользователь;
	УстановитьНовыйНомер("Зя"+Склад.ПрефиксНомеровДокументов);
	Основание.ВыбратьСтроки();
	Пока Основание.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		Номенклатура = Основание.Номенклатура;
		Единица = Основание.Единица;
		Количество = Основание.Количество;
		Коэффициент = Основание.Коэффициент;
	КонецЦикла;	
КонецПроцедуры // ВводНаСоновании

Процедура ВводНового(Скопирован)
	глЗаполнитьШапку(Контекст,Скопирован);
	УстановитьНовыйНомер("Зя"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
	
	//Дополнения для продавцов
	Если НазваниеНабораПрав() = "Продавец_розница" тогда
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры


//******************************************************************************
//			Тут подбор

Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
КонецПроцедуры // ОбработкаПодбора()

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
//	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(глПользователь.ОсновнойТипЦенПродажи,          "ТипЦен");      
	Параметры.ДобавитьЗначение(глРубли,		    "Валюта");
	Параметры.ДобавитьЗначение(глКурсДляВалюты(глРубли,ДатаДок), "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);

КонецПроцедуры // ПоКнопкеПодбор()
	
//***************************************************
//***************************************************
Процедура ЭкспортДокумента()
	
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		сообщить("Нельзя вам это нажимать!");
		Возврат;
	КонецЕсли;
	//Если (рОст=0) тогда
	//	сообщить("Пока не будут рассчитаны остатки и обороты, экспорт невозможен!");
	//	сообщить("Для продолжения нажмите: 1. флаг !Учитывать остатки!; 2. кнопку !Обновить!");
	//	возврат;
	//КонецЕсли;
	
	Розн=СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(Розн);
	Если Розн.КоличествоСтрок()=0 тогда 
		Сообщить("Нет товара для выгрузки в обработку товара");
		возврат;
	КонецЕсли;

	Розн.НоваяКолонка("КодР","число",6,0,,6);
	Розн.НоваяКолонка("Код","строка",8,0,,8);
	Розн.НоваяКолонка("ВажностьР","число",1,0,,2);	//Если "!!!", тогда это важная строка
	Розн.НоваяКолонка("ТоварР","строка",100,0);
	Розн.НоваяКолонка("ЕдиницаР","строка",10,0,,5);
	Розн.НоваяКолонка("КолвоР","число",15,2,,5);
	Розн.НоваяКолонка("ОстатокР","число",15,2,,5); 
	Розн.НоваяКолонка("ОборотР","число",15,2,,5);
	Розн.ВыбратьСтроки();
	состояние("Преобразование исходных данных");
	пока Розн.получитьСтроку()=1 цикл
		Розн.КодР=Розн.Номенклатура.КодРозницы;
		Если Розн.Важность="!!!" тогда
			Розн.ВажностьР=1;
		иначе
			Розн.ВажностьР=0;
		КонецЕсли;
			
		Розн.ТоварР		= строка(Розн.Номенклатура);
		Розн.ЕдиницаР	= строка(Розн.Единица);
		Розн.КолвоР		= Розн.Количество;
		Розн.ОстатокР	= Розн.Остаток;
		Розн.ОборотР	= Розн.Оборот;
		Розн.Код		= Розн.Номенклатура.Код;
	КонецЦикла;
	
	//Дублирующие данные, которые можно прибить
	Розн.УдалитьКолонку("Номенклатура");
	Розн.УдалитьКолонку("Важность");
	Розн.УдалитьКолонку("Единица");
	Розн.УдалитьКолонку("Коэффициент");
	Розн.УдалитьКолонку("Остаток");
	Розн.УдалитьКолонку("Оборот");
	
	
//****************************************************************************************************
//********** Это было ранее *************************************************************************
//**************************************************************************************************
	Док 	= СоздатьОбъект("Документ.ИмпортЗаявокИзРозницы2");
	//Поиск уже созданного документа с таким кодом
	Док.ВыбратьДокументы();
	Если Док.ВыбратьДокументы()=0 тогда
		Док.Новый(); //Если нет документа, то создаём новый
		Док.Фирма		    = глПользователь.ОсновнаяФирма;
		Док.Комментарий	    = "Розн: "+ТекущийДокумент().ПредставлениеВида()+" №"+СокрЛП(НомерДок)+" от "+ДатаДок+"; Подразделение: "+СокрЛП(Склад);
		Док.ДанныеРозница	= ЗначениеВСтроку(Розн);
		Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок;
		Док.УжеНовыйТип		= 1;
		Док.Записать();
		Сообщить("Документ "+СокрЛП(Док.ПредставлениеВида()+" №"+сокрлп(Док.НомерДок))+" успешно создан!");
		Сообщить("Экспорт закончен успешно...");
		
		возврат;
	КонецЕсли;
	уже=0;
	//Пока Док.ПолучитьДокумент()=1 цикл
	//		если Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок тогда
	//		Если Док.Выбран()=1 тогда
	//			ош=Вопрос("Такой документ уже существует, хотите перезаписать его?","Да+Нет");
	//			если ош<>"Да" тогда
	//				сообщить("Экспорт не был закончен, т.к. поступила команда отмены.");
	//				возврат;
	//			конецЕсли;
	//			Док.СделатьНеПроведенным();
	//			Док.УдалитьСтроки();
	//			Док.Фирма		    = глПользователь.ОсновнаяФирма;
	//			Док.Комментарий	    = "Розн: "+ТекущийДокумент().ПредставлениеВида()+" №"+СокрЛП(НомерДок)+" от "+ДатаДок+"; Подразделение: "+СокрЛП(Склад);
	//			Док.ДанныеРозница	= ЗначениеВСтроку(Розн);
	//			Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок;	//Чтобы новые документы не плодить
	//			Док.УжеНовыйТип		= 1;
	//			Док.Записать();
	//			Сообщить("Документ "+СокрЛП(Док.ПредставлениеВида()+" №"+сокрлп(Док.НомерДок))+" от "+ДатаДок+" успешно создан!");
	//			уже=1;
	//		КонецЕсли;				
	//	КонецЕсли;
	//КонецЦикла;  
		Пока Док.ПолучитьДокумент()=1 цикл
			если док.ДатаДок>дата(НачГода(ТекущаяДата())) тогда
			если  Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок тогда
			Если Док.Выбран()=1 тогда
				ош=Вопрос("Такой документ уже существует, хотите перезаписать его?","Да+Нет");
				если ош<>"Да" тогда
					сообщить("Экспорт не был закончен, т.к. поступила команда отмены.");
					возврат;
				конецЕсли;
				Док.СделатьНеПроведенным();
				Док.УдалитьСтроки();
				Док.Фирма		    = глПользователь.ОсновнаяФирма;
				Док.Комментарий	    = "Розн: "+ТекущийДокумент().ПредставлениеВида()+" №"+СокрЛП(НомерДок)+" от "+ДатаДок+"; Подразделение: "+СокрЛП(Склад);
				Док.ДанныеРозница	= ЗначениеВСтроку(Розн);
				Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок;	//Чтобы новые документы не плодить
				Док.УжеНовыйТип		= 1;
				Док.Записать();
				Сообщить("Документ "+СокрЛП(Док.ПредставлениеВида()+" №"+сокрлп(Док.НомерДок))+" от "+ДатаДок+" успешно создан!");
				уже=1;
			КонецЕсли;	
			КонецЕсли;				
		КонецЕсли;
	КонецЦикла;

	если уже<>1 тогда
		Док.Новый(); //Если нет документа, то создаём новый
		Док.Фирма		    = глПользователь.ОсновнаяФирма;
		Док.Комментарий	    = "Розн: "+ТекущийДокумент().ПредставлениеВида()+" №"+СокрЛП(НомерДок)+" от "+ДатаДок+"; Подразделение: "+СокрЛП(Склад);
		Док.ДанныеРозница	= ЗначениеВСтроку(Розн);
		Док.КодРозничногоДокумента=ТекущийДокумент().НомерДок;
		Док.УжеНовыйТип		= 1;
		Док.Записать();
		Сообщить("Документ "+СокрЛП(Док.ПредставлениеВида()+" №"+сокрлп(Док.НомерДок))+" успешно создан!");
	конецесли;
	
	Сообщить("Экспорт закончен успешно...");
КонецПроцедуры

Процедура ПриЗаписи()
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
	ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.ПлановаяЗаявка)+сокрЛП(склад);
	Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
	    ЭтоРозница=проба.ТекущийЭлемент();
	Иначе
		проба.новый();
		проба.наименование=ЭР;
		проба.записать();
		ЭтоРозница=проба.ТекущийЭлемент();
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры
