Перем СписокДействий; // для механизма кнопки "Действия"
Перем ОстатокНаНачалоДня;
                             
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем ВыбДокумент;
Перем СтараяДата,СтараяФирма,СтароеФизЛицо,СтараяВалюта;
Перем НачДата;  // начальная дата текущего авансового отчета (дата предыдущего авансового отчета)

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы()         
	
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок+" №";	
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы

//******************************************************************************
// ОтчетПоПодОтчетнику()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Долг под. лица".
//
// Описание:
//  Открывает отчето по подотчетному лицу.
//
Процедура ОтчетПоПодОтчетнику()
	
	Если ПустоеЗначение(ДатаДок) =1 Тогда
		Предупреждение("Не указана дата документа!",60);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Фирма) =1 Тогда
		Предупреждение("Не выбрана фирма!",60);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ФизЛицо) =1 Тогда
		Предупреждение("Не выбрано физ. лицо!",60);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) =1 Тогда
		Предупреждение("Не выбрана валюта!",60);
		Возврат;
	КонецЕсли;
	
	Группировки = СоздатьОбъект("СписокЗначений");
	Группировки.ДобавитьЗначение("Фирма", 		"Фирма");
	Группировки.ДобавитьЗначение("ФизЛицо", 	"Физ. лицо");
	Группировки.ДобавитьЗначение("Валюта", 		"Валюта");
	Группировки.ДобавитьЗначение("КредДокумент","Кредитный документ");
	Группировки.ДобавитьЗначение("Документ", 	"Документы движения");
	
	Группировки.Пометка(1, 1);	
	Группировки.Пометка(2, 1);
	Группировки.Пометка(3, 1);
		
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ВедомостьПоПодотчетникам");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаДок);
    Расшифровка.Установить("ДатаКонца", 	ДатаДок);
	Расшифровка.Установить("ВыбРазделитель1",Фирма);
	Расшифровка.Установить("ВыбРазделитель2","");
	Расшифровка.Установить("ВыбРазделитель3","");
	Расшифровка.Установить("ВидРазделителя",1);   
	
	Расшифровка.Установить("ВыбФизЛицо", 	ФизЛицо);
	Расшифровка.Установить("ПоОперациям", 	1);
	Расшифровка.Установить("ВыбВидВалюты", 	1);// бух учет
	
	Расшифровка.Установить("Группировки",	Группировки);
	
	глОбработкаРасшифровки(Расшифровка,"","");
	
КонецПроцедуры // ОтчетПоПодОтчетнику()

//******************************************************************************
// СтатусДока(Док)
//
// Параметры:
//  Док
//
// Возвращаемое значение:
//  Номер картинки, соответствующий статусу документа.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Анализирует документ (проведен, помечен, и т.д.)
//
Функция СтатусДока(Док)
	
	Если Док.Выбран() = 0 Тогда
		Возврат (0);
	ИначеЕсли Док.ПометкаУдаления()=1 Тогда
		Возврат (7);
	ИначеЕсли Док.Проведен()=0 Тогда
		Возврат (1);
	ИначеЕсли Док.Проведен()=1 Тогда
		Возврат (2);
	КонецЕсли;
	
КонецФункции // СтатусДока()

//******************************************************************************
// ПолучитьНачальнуюДату()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Определяет начальную дату авансового отчета - дату последнего введенного документа авансовый отчет
//
Процедура ПолучитьНачальнуюДату()

	Если (ПустоеЗначение(ДатаДок)=1) или
		 (ПустоеЗначение(Фирма)=1)   или
		 (ПустоеЗначение(ФизЛицо)=1) или 
		 (ПустоеЗначение(Валюта)=1) Тогда
		НачДата = ПолучитьПустоеЗначение("Дата");
		Возврат;
	КонецЕсли;         
	
	// Выберем отчеты между точкой актуальности и текущем документом, поскольку в 
	// запрос они не попадают
	Док = СоздатьОбъект("Документ.АвансовыйОтчет");
	Док.ОбратныйПорядок(1);
	Док.ВыбратьДокументы(ДатаДок-1, ТекущийДокумент());
	Пока Док.ПолучитьДокумент() = 1 Цикл    
		Если (Док.ФизЛицо = ФизЛицо) И (Док.Фирма = Фирма) И (Док.Валюта = Валюта) 
			И (Док.ТекущийДокумент() <> ТекущийДокумент()) И (Док.ПометкаУдаления() = 0) Тогда
			НачДата = Док.ТекущийДокумент();      
			Прервать;
		КонецЕсли;
	КонецЦикла;
		
	Если ПустоеЗначение(НачДата) = 1 Тогда
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|ФирмаДок   = Документ.АвансовыйОтчет.Фирма;
		|ФизЛицоДок = Документ.АвансовыйОтчет.ФизЛицо;
		|ВалютаДок  = Документ.АвансовыйОтчет.Валюта;                   
		|ТекДок     = Документ.АвансовыйОтчет.ТекущийДокумент;          
		|Группировка ТекДок упорядочить по ТекДок.ДатаДок, ТекДок.ВремяДок;
		|Условие(ФирмаДок   = Фирма);
		|Условие(ФизЛицоДок = ФизЛицо);
		|Условие(ВалютаДок  = Валюта);
		|Условие(ТекДок.ДатаДок < ДатаДок);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;          
		
		НачДата = ПолучитьПустоеЗначение("Дата");
		Пока Запрос.Группировка(1,-1) = 1 Цикл
			Если Выбран() = 1 Тогда
				// Если в проведенном документе увеличили дату, то он попадет в запрос
			    Если Запрос.ТекДок <> ТекущийДокумент() Тогда
			        НачДата = Запрос.ТекДок;
					Прервать;
				КонецЕсли;
			Иначе
				НачДата = Запрос.ТекДок;  
				Прервать;
			КонецЕсли;
		КонецЦикла;  
	КонецЕсли;
    
	// Отображаем начальныю дату в форме
	Форма.ДатаНачала.Заголовок(""+НачДата);
	
КонецПроцедуры //ПолучитьНачальнуюДату()

//******************************************************************************
// ЗаполнитьТаблицу()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Заполняет таблицу документов - строк выписки
//
Процедура ЗаполнитьТаблицу()
	
	ТабДокументов.УдалитьСтроки();
	
	Если (ПустоеЗначение(ДатаДок)=1) или
		 (ПустоеЗначение(Фирма)=1)   или
		 (ПустоеЗначение(ФизЛицо)=1) или 
		 (ПустоеЗначение(Валюта)=1) или
	 	 (ПолучитьДатуТА() < ДатаДок) Тогда
		Возврат;
	КонецЕсли;
	Док = СоздатьОбъект("Документ");
	
	Док.ВыбратьПоЗначению(НачДата, ТекущийДокумент(), "ФизЛицо", ФизЛицо);
	Пока Док.ПолучитьДокумент()=1 Цикл
		
		Если (Док.Фирма <> Фирма) Тогда
			Продолжить;
		КонецЕсли;
		               
		ВидДок = Док.Вид();
		
		Если (ВидДок = "РКО") Тогда
		    Если Док.КодОперации <> глКО.ВыдачаПодотчет Тогда
			   	Продолжить;
		    КонецЕсли;
		КонецЕсли;           
		
		Если ВидДок = "ПКО" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВидДок = "ВводОстатковКассаБанкПодотчетник" Тогда
			Если Док.ВидОперации <> Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам Тогда
			    Продолжить;
			КонецЕсли;
			
			Док.ВыбратьСтроки();
			Пока Док.ПолучитьСтроку() = 1 Цикл
			    
				Если Док.Объект <> ФизЛицо Тогда
			        Продолжить;
				КонецЕсли;
				
				Если Док.Валюта <> Валюта Тогда
				    Продолжить;
				КонецЕсли;
				
				Если Док.СуммаВал = 0 Тогда
				    Продолжить;
				КонецЕсли;
				
				ТекДок	= Док.ТекущийДокумент();
				
				ТабДокументов.НоваяСтрока();
				ТабДокументов.Статус 			= СтатусДока(ТекДок);
				ТабДокументов.Документ			= ТекДок;
				ТабДокументов.Валюта			= ТекДок.Валюта;
				ТабДокументов.СтрокаДокумента	= глНазваниеДокументаВЖурнале(ТекДок) + " " + ТекДок.НомерДок;
				
				Если Док.СуммаВал > 0 Тогда
					ТабДокументов.Приход 			= Док.СуммаВал;
					ТабДокументов.ПриходПроведен 	= ?((Док.Проведен() = 1), Док.СуммаВал, 0);
				Иначе
					ТабДокументов.Расход 			= -Док.СуммаВал;
					ТабДокументов.РасходПроведен 	= ?((Док.Проведен() = 1), -Док.СуммаВал, 0);
				КонецЕсли;
			КонецЦикла;
		Иначе
			
			Если Док.Валюта <> Валюта Тогда
			    Продолжить;
			КонецЕсли;
			
			ТабДокументов.НоваяСтрока();
			ТабДокументов.Статус 	= СтатусДока(Док);
			ТабДокументов.Документ 	= Док.ТекущийДокумент();
			ТабДокументов.Валюта	= Док.Валюта;
			ТабДокументов.СтрокаДокумента = глНазваниеДокументаВЖурнале(ТабДокументов.Документ)+" "+ТабДокументов.Документ.НомерДок;
			Если ВидДок = "РКО" Тогда
				ТабДокументов.Приход 			= Док.Сумма;
				ТабДокументов.ПриходПроведен 	= ?((Док.Проведен()=1),ТабДокументов.Приход,0);
			ИначеЕсли (ВидДок = "СтрокаАвансОтчетаТМЦ")  или 
					  (ВидДок = "СтрокаАвансОтчетаПрочее")Тогда
				ТабДокументов.Расход 			= Док.Итог("Сумма")+
							?(Док.СуммаВклНДС=1,0,Док.Итог("СуммаНДС"))+
							?(Док.СуммаВклНП=1,0,Док.Итог("СуммаНП"));
				ТабДокументов.РасходПроведен 	= ?((Док.Проведен()=1),ТабДокументов.Расход,0);	
			ИначеЕсли ВидДок = "СтрокаАвансОтчетаОплата"	Тогда
				ТабДокументов.Расход 			= Док.Итог("Сумма");
				ТабДокументов.РасходПроведен 	= ?((Док.Проведен()=1),ТабДокументов.Расход,0);	
			Иначе
				Сообщить("Обнаружен неизвестный вид документа !"+ ВидДок,"i");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДокументов.Сортировать("Документ", 1);

	Если ТабДокументов.КоличествоСтрок() > 0 Тогда
		// корректируем начальную дату авансового отчета датой самого раннего найденного документа по подотчетнику	    
		НачДата = ТабДокументов.ПолучитьЗначение(1,"Документ");
	КонецЕсли;

	// Отображаем начальныю дату в форме
	Форма.ДатаНачала.Заголовок(""+?(ТипЗначенияСтр(НачДата) = "Документ", НачДата.ДатаДок, НачДата));
	
КонецПроцедуры // ЗаполнитьТаблицу()
                                         
//******************************************************************************
// ВвестиДокумент(ВидДвижения)
//
// Параметры:
//  ВидДвижения - строка  - "Приход" или "Расход"
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопки "Приход", "Расход"
//
// Описание:
//  Производит ввод нового документа.
//
Процедура ВвестиДокумент(ВидДокумента)
	Перем КонтФормы;
	
	Если ПустоеЗначение(ДатаДок) =1 Тогда
		Предупреждение("Не заполнена дата документа!",60);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Фирма) =1 Тогда
		Предупреждение("Не выбрана фирма!",60);
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(ФизЛицо) =1 Тогда
		Предупреждение("Не выбрано физ. лицо!",60);
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(Валюта) = 1 Тогда
		Предупреждение("Не выбрана валюта!",60);
		Возврат;
	КонецЕсли;
	                    
	Парам	= СоздатьОбъект("СписокЗначений");
	Парам.Установить("Параметры", 1);
	Парам.Установить("ДатаДок"	, ДатаДок);
	Парам.Установить("Фирма"	, Фирма);
	Парам.Установить("ФизЛицо"	, ФизЛицо);
	Парам.Установить("Валюта"	, Валюта);
	Парам.Установить("Проект"	, Проект);
	
	ОткрытьФорму("Документ." + ВидДокумента, Парам);
		
КонецПроцедуры // ВвестиДокумент()

//******************************************************************************
// ПосчитатьОстатокНаНачалоДня()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Производит расчет остатка на начало дня. Заполняет переменную ОстатокНаНачалоДня
//
Процедура ПосчитатьОстатокНаНачалоДня()
	    
	Если (ПустоеЗначение(ДатаДок)=1) или
		 (ПустоеЗначение(Фирма)=1) или
		 (ПустоеЗначение(ФизЛицо)=1) или
		 (ПустоеЗначение(Валюта)=1) Тогда
		ОстатокНаНачалоДня = 0;
		Возврат;
	КонецЕсли;
	
	ВремРегистры 		= СоздатьОбъект("Регистры");
	РегПодотчетныеЛица 	= ВремРегистры.ПодотчетныеЛица;
	РегПодотчетныеЛица.УстановитьЗначениеФильтра("Фирма", 	Фирма, 1);
	РегПодотчетныеЛица.УстановитьЗначениеФильтра("ФизЛицо", ФизЛицо,1);
	РегПодотчетныеЛица.УстановитьЗначениеФильтра("Валюта", 	Валюта,1);
	
	Если ПустоеЗначение(НачДата) = 1 Тогда
	    // не было авансовых отчетов до этого
		ОстатокНаНачалоДня	= 0;
	Иначе
		
		// в этом случае надо сделать временный расчет итогов
		ДатаСравнения = ?(ТипЗначенияСтр(НачДата) = "Документ", НачДата.ПолучитьПозицию(), НачДата);
		СЧемСравнивать = ?(ТипЗначенияСтр(НачДата) = "Документ", ПолучитьПозициюТА(), ПолучитьДатуТА());
		Если (ДатаСравнения > СЧемСравнивать) Тогда
			Сообщить( "Остаток не может быть посчитан: позиция документа превышает позицию ТА!");
			ОстатокНаНачалоДня = 0;
		Иначе
			РегПодотчетныеЛица.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(НачДата);
			ОстатокНаНачалоДня	= РегПодотчетныеЛица.СводныйОстаток(Фирма,ФизЛицо,Валюта,,"СуммаВал");
		КонецЕсли;                                                                                    
		
	КонецЕсли;
	                                            
КонецПроцедуры // ПосчитатьОстатокНаНачалоДня()

//******************************************************************************
// ИзменитьДокумент()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Таблица документов
//
// Описание:
//  Открывает форму текущего (выбранного в таблице) документа.
//
Процедура ИзменитьДокумент()
	Перем КонтФормы;
	
	ТекСтрока = ТабДокументов.ТекущаяСтрока();
	Если ТекСтрока <> 0 Тогда                  
		КонтФормы = глВзятьКонтекст(Контекст);
		ОткрытьФорму(ТабДокументов.ПолучитьЗначение(ТекСтрока,"Документ"),КонтФормы);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьДокумент()
                          
//******************************************************************************
// УдалитьДокумент()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Удалить"
//
// Описание:
//  Удаляет текущий документ.
//
Процедура УдалитьДокумент()
	
	ТекСтрока = ТабДокументов.ТекущаяСтрока();
	Если ТекСтрока <> 0 Тогда                                            
		ТекДок = ТабДокументов.ПолучитьЗначение(ТекСтрока,"Документ");
		
		Док = СоздатьОбъект("Документ");
		Если Док.НайтиДокумент(ТекДок)=1 Тогда
			Если Док.ПометкаУдаления() = 1 Тогда
				Если Вопрос("Снять пометку удаления: " + ТекДок+"?", "Да+Нет",60) <> "Да" Тогда
					Возврат;
				КонецЕсли;
				Док.СнятьПометкуУдаления();
			Иначе   
				Если Вопрос("Удалить документ: " + ТекДок+"?", "Да+Нет",60) <> "Да" Тогда
					Возврат;
				КонецЕсли;
				Док.Удалить(0);
			КонецЕсли;
			ЗаполнитьТаблицу();
		КонецЕсли;
	Иначе
		Предупреждение("Не выбран документ в строке таблицы!",60);
	КонецЕсли;
	    
КонецПроцедуры // УдалитьДокумент()

//******************************************************************************
// ПроверитьИОбновить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Невидимое текстовое поле.
//
// Описание:
//  Проверяет и, при необходимости, перечитывает список документов
//
Функция ПроверитьИОбновить()
	
	Если НадоОбновить = 1 Тогда
		
		ЗаполнитьТаблицу(); 
		ПосчитатьОстатокНаНачалоДня();

		НадоОбновить = 0;
	КонецЕсли;
	
КонецФункции // ПроверитьИОбновить()

//******************************************************************************
// ПриИзмененииДатыДок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  ДатаДок
//
// Описание:
//  Производит все необходимые действия при изменении даты выписки
//
Процедура ПриИзмененииДатыДок()

	Если (СтараяДата <> ДатаДок)  Тогда
		
		Если ТабДокументов.КоличествоСтрок() > 0 Тогда
		    
			Если Вопрос("Внимание при смене даты авансового отчета
					     |таблица будет очищена! Продолжить?","Да+Нет", 60) <> "Да" Тогда
    	        ДатаДок = СтараяДата;
				Возврат;    
			КонецЕсли;
		КонецЕсли;
		СтараяДата = ДатаДок;

		ПолучитьНачальнуюДату();
		ЗаполнитьТаблицу(); 
		ПосчитатьОстатокНаНачалоДня();

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДатыДок()       

//******************************************************************************
// ПриИзмененииПодотчетника()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  ФизЛицо.
//
// Описание:
//  Производит все необходимые действия при изменении подотчетника.
//
Процедура ПриИзмененииПодотчетника()
	                       
	Если (СтароеФизЛицо <> ФизЛицо) Тогда
		Если ТабДокументов.КоличествоСтрок() > 0 Тогда
		    
			Если Вопрос("Внимание при смене подотчетного лица
					     |таблица будет очищена! Продолжить?","Да+Нет", 60) <> "Да" Тогда
				ФизЛицо = СтароеФизЛицо;
				Возврат;    
			КонецЕсли;
		КонецЕсли;
		СтароеФизЛицо = ФизЛицо;

		ПолучитьНачальнуюДату();
		ЗаполнитьТаблицу(); 
		ПосчитатьОстатокНаНачалоДня();

	КонецЕсли;

КонецПроцедуры // ПриИзмененииПодотчетника()
                 
//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Фирма.
//
// Описание:
//  Производит все необходимые действия при изменении фирмы
//
Процедура ПриИзмененииФирмы()
	                   
	Если (СтараяФирма <> Фирма) Тогда
		Если ТабДокументов.КоличествоСтрок() > 0 Тогда
		    
			Если Вопрос("Внимание при смене фирмы 
					     |таблица будет очищена! Продолжить?","Да+Нет", 60) <> "Да" Тогда
				Фирма = СтараяФирма;
				Возврат;    
			КонецЕсли;
		КонецЕсли;
		СтараяФирма = Фирма;
		глПриИзмененииФирмы(Контекст);   

		ПолучитьНачальнуюДату();
		ЗаполнитьТаблицу(); 
		ПосчитатьОстатокНаНачалоДня();

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииВалюты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Валюта.
//
// Описание:
//  Производит все необходимые действия при изменении валюты.
//
Процедура ПриИзмененииВалюты()
	
	Если (СтараяВалюта <> Валюта) Тогда
		Если ТабДокументов.КоличествоСтрок() > 0 Тогда
		    
			Если Вопрос("Внимание при смене валюты 
					     |таблица будет очищена! Продолжить?","Да+Нет", 60) <> "Да" Тогда
				Валюта = СтараяВалюта;
				Возврат;    
			КонецЕсли;
		КонецЕсли;
		СтараяВалюта = Валюта;

		ПолучитьНачальнуюДату();
		ЗаполнитьТаблицу(); 
		ПосчитатьОстатокНаНачалоДня();

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВалюты()
                                          
//******************************************************************************
// ИтоговаяСтрока()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Здесь описывается функция.
//
Функция ИтоговаяСтрока()
	    
	// в этом случае там содержится описание ошибки!
	Если ТипЗначенияСтр(ОстатокНаНачалоДня) = "Строка" Тогда
		Возврат (ОстатокНаНачалоДня);
	КонецЕсли;
	
	ПриходВсего = ТабДокументов.Итог("ПриходПроведен");
	РасходВсего = ТабДокументов.Итог("РасходПроведен");
	
	ОстатокНаКонецДня = ОстатокНаНачалоДня + ПриходВсего - РасходВсего;
	//Форма.ТекстНаНачало.Заголовок(""+глФРМ(ОстатокНаНачалоДня));
	Форма.ТекстВыдано.Заголовок(""+глФРМ(ПриходВсего));
	Форма.ТекстОтчеты.Заголовок(""+глФРМ(РасходВсего));
	Форма.ТекстНаКонец.Заголовок(""+глФРМ(ОстатокНаКонецДня));

	Возврат глФРМ(ОстатокНаНачалоДня);
	
КонецФункции // ИтоговаяСтрока()
                        
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	
	ПосчитатьОстатокНаНачалоДня();
	
	Если ПустоеЗначение(ФизЛицо) = 1 Тогда
	    Предупреждение("Авансовый отчет не может быть распечатан: не выбрано подотчетное лицо.", 60);
		Возврат;
	КонецЕсли;
	
	Если ДатаДок > ПолучитьДатуТА() Тогда
	    Предупреждение("Авансовый отчет не может быть распечатан: дата документа превышает дату ТА!", 60);
		Возврат;
	КонецЕсли;
	
	Таб	= СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	
	ФирмаНаименование = СокрЛП(Фирма.ЮрЛицо.ПолнНаименование);
	ФирмаОКПО         = СокрЛП(Фирма.ЮрЛицо.ОКПО);
	ФирмаРуководительДолжность = СокрЛП(Фирма.ЮрЛицо.ДолжностьРуководителя);
	ФирмаРуководительФИО       = СокрЛП(Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок));
	ФирмаГлБухгалтерФИО        = СокрЛП(Фирма.ЮрЛицо.ГлБухгалтер.Получить(ДатаДок));
	
	НаименованиеАванса  = "";
	
	ОстатокНаНачалоДняРуб = глПересчет(ОстатокНаНачалоДня, Валюта, ДатаДок, глРубли, ДатаДок);
	ВремКон               = ОстатокНаНачалоДняРуб;
	
	НачальныйОстаток    = ?(ОстатокНаНачалоДняРуб > 0, глФРМ(ОстатокНаНачалоДняРуб)       , "-");
	НачальныйПерерасход = ?(ОстатокНаНачалоДняРуб < 0, глФРМ(ОстатокНаНачалоДняРуб * (-1)), "-");
	
	Врем                = ТабДокументов.Итог("ПриходПроведен");
	ВремРуб             = глПересчет(Врем, Валюта, ДатаДок, глРубли, ДатаДок);
	
	ИтогоПолучено       = ?(ВремРуб = 0, "-", глФРМ(ВремРуб));
	ВремКон             = ВремКон + ВремРуб;
	
	СуммаРуб            = ИтогоПолучено;
	
	Если (Валюта <> глРубли) И (Врем <> 0) Тогда
		СуммаРубВал = глФРМ(Врем);
	Иначе
		СуммаРубВал = "-";
	КонецЕсли;
	
	
	ВремРуб              = глПересчет(ТабДокументов.Итог("РасходПроведен"), Валюта, ДатаДок, глРубли, ДатаДок);
	
	Если ВремРуб > 0 Тогда
		ВремКон               = ВремКон - ВремРуб;
		Израсходовано         = глФРМ(ВремРуб);
		ИзрасходованоПрописью = глСуммаПрописью(ВремРуб, глРубли);
		ИзрасходованоЦел      = Цел(ВремРуб);
		ИзрасходованоКоп      = Формат((ВремРуб - ИзрасходованоЦел)*100, "Ч(0)2");
	Иначе
		ИзрасходованоЦел      = "0";
		ИзрасходованоКоп      = "00";
		Израсходовано         = "-";
		ИзрасходованоПрописью = "";
	КонецЕсли;
	
	КонечныйОстаток     = ?(ВремКон > 0, глФРМ(ВремКон)       , "-");
	КонечныйПерерасход  = ?(ВремКон < 0, глФРМ(ВремКон * (-1)), "-");
	
	СчетКредитаДляПечати = "";
	ТекстРасписки = "";

	//список корреспонденций для титульного листа
	ТабКорДебет = СоздатьОбъект("ТаблицаЗначений");
	ТабКорКредит= СоздатьОбъект("ТаблицаЗначений");
	ТабКорДебет.НоваяКолонка("КорСчет","Строка",10);
	ТабКорДебет.НоваяКолонка("Сумма","Число",15,2);
	ТабКорДебет.Выгрузить(ТабКорКредит);

	//заполняем список корреспонденций для титульного листа
	ТабДокументов.ВыбратьСтроки();
	Пока ТабДокументов.ПолучитьСтроку() = 1 Цикл
		Если ТипЗначенияСтр(ТабДокументов.Документ)="Документ" Тогда
			Если ТабДокументов.Документ.Проведен()=1 Тогда
				Рез = "";
				глОпределитьКоррСчетаДокумента(ТабДокументов.Документ,Рез,"71",2);
				ТабКор = СоздатьОбъект("ТаблицаЗначений");
				ТабКор = Рез.Получить("ТаблицаКорреспонденций");
				ТабКор.ВыбратьСтроки();
				Пока ТабКор.ПолучитьСтроку()=1 Цикл
					СчетКредитаДляПечати = ?(Найти(СчетКредитаДляПечати,"71")=0,ТабКор.СчетК,СчетКредитаДляПечати);
					Если (Найти(?(ТипЗначенияСтр(ТабКор.СчетД)="Счет",ТабКор.СчетД.Код,Строка(ТабКор.СчетД)),"71")<>1)И
						 (Найти(?(ТипЗначенияСтр(ТабКор.СчетК)="Счет",ТабКор.СчетК.Код,Строка(ТабКор.СчетК)),"71")<>1)ИЛИ
						 (Найти(?(ТипЗначенияСтр(ТабКор.СчетК)="Счет",ТабКор.СчетК.Код,Строка(ТабКор.СчетК)),"50")=1) Тогда
						Продолжить;   //отфильтровываем проводки, в которых нет 71 счета
					ИначеЕсли Найти(?(ТипЗначенияСтр(ТабКор.СчетД)="Счет",ТабКор.СчетД.Код,Строка(ТабКор.СчетД)),"71")=1 Тогда
						ТабКорКредит.НоваяСтрока();
						ТабКорКредит.КорСчет = Строка(ТабКор.СчетК);
						ТабКорКредит.Сумма   = ТабКор.Сумма;
					ИначеЕсли Найти(?(ТипЗначенияСтр(ТабКор.СчетК)="Счет",ТабКор.СчетК.Код,Строка(ТабКор.СчетК)),"71")=1 Тогда
						ТабКорДебет.НоваяСтрока();
						ТабКорДебет.КорСчет = Строка(ТабКор.СчетД);
						ТабКорДебет.Сумма   = ТабКор.Сумма;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТабКорДебет.Свернуть("КорСчет","Сумма");
	ТабКорКредит.Свернуть("КорСчет","Сумма");
	ТабКорДебет.КоличествоСтрок(8);
	ТабКорКредит.КоличествоСтрок(8);
		
	Таб.ВывестиСекцию("Титул");
	Таб.НоваяСтраница();
	Таб.ВывестиСекцию("Шапка");
	
	Ном = 1;
	
	Если Валюта = глРубли Тогда
		ПоОтчетуИтог = 0;
		ПоУчетуИтог  = 0;
		
	Иначе
		ПоОтчетуВалИтог = 0;
		ПоУчетуВалИтог  = 0;
		
		ПоОтчетуИтог = 0;
		ПоУчетуИтог  = 0;
	КонецЕсли;
	
	ТабДокументов.ВыбратьСтроки();
	Пока ТабДокументов.ПолучитьСтроку() = 1 Цикл
	    Если ТабДокументов.Документ.Проведен() = 0 Тогда
	        // не учитываем непроведенные документы
			Продолжить;
		КонецЕсли;
		
		Если (ТабДокументов.Расход = 0) И (ТабДокументов.РасходПроведен = 0) Тогда
			Продолжить;
	    КонецЕсли;
		
		Если глЕстьРеквизитШапки("ВидДокВходящий", ТабДокументов.Документ.Вид()) = 0 Тогда
			ДокументДата  = ТабДокументов.Документ.ДатаДок;
			ДокументНомер = ТабДокументов.Документ.НомерДок;
			ДокументСтрока= глНазваниеДокументаВЖурнале(ТабДокументов.Документ);
		Иначе
			// выводим не сам документ, а его первичный
			ДокументДата  = ТабДокументов.Документ.ДатаДокВходящий;
			ДокументНомер = ТабДокументов.Документ.НомерДокВходящий;
			ДокументСтрока= ТабДокументов.Документ.ВидДокВходящий;
		КонецЕсли;
		
		Если Валюта = глРубли Тогда
			ПоОтчету = глФРМ(ТабДокументов.Расход);
			ПоУчету  = глФРМ(ТабДокументов.РасходПроведен);
			
			ПоОтчетуИтог = ПоОтчетуИтог + ТабДокументов.Расход;
			ПоУчетуИтог  = ПоУчетуИтог  + ТабДокументов.РасходПроведен;
			
		Иначе
			ПоОтчетуВал = глФРМ(ТабДокументов.Расход);
			ПоУчетуВал  = глФРМ(ТабДокументов.РасходПроведен);
			
			ПоОтчетуВалИтог = ПоОтчетуВалИтог + ТабДокументов.Расход;
			ПоУчетуВалИтог  = ПоУчетуВалИтог  + ТабДокументов.РасходПроведен;
			
			ВремПоОтчету = глПересчет(ТабДокументов.Расход, Валюта, ДатаДок, глРубли, ДатаДок);
			ВремПоУчету  = глПересчет(ТабДокументов.РасходПроведен, Валюта, ДатаДок, глРубли, ДатаДок);
			
			ПоОтчету = глФРМ(ВремПоОтчету);
			ПоУчету  = глФРМ(ВремПоУчету);

			ПоОтчетуИтог = ПоОтчетуИтог + ВремПоОтчету;
			ПоУчетуИтог  = ПоУчетуИтог  + ВремПоУчету;
		КонецЕсли;

		Если ТипЗначенияСтр(ТабДокументов.Документ)="Документ" Тогда
			Если ТабДокументов.Документ.Проведен()=1 Тогда
				Рез = "";
				глОпределитьКоррСчетаДокумента(ТабДокументов.Документ,Рез,"71",2);
				КрСчДб = Рез.Получить("СчетаДебета");
				КрСчКр = Рез.Получить("СчетаКредита");
			КонецЕсли;
		КонецЕсли;
		
	 	Таб.ВывестиСекцию("Строка");
		Ном = Ном + 1;
	КонецЦикла;
	
	Если Валюта = глРубли Тогда
		ПоОтчетуИтог = глФРМ(ПоОтчетуИтог);
		ПоУчетуИтог  = глФРМ(ПоУчетуИтог);
		
		ПоОтчетуВалИтог = "-";
		ПоУчетуВалИтог  = "-";
	Иначе
		ПоОтчетуВалИтог = глФРМ(ПоОтчетуВалИтог);
		ПоУчетуВалИтог  = глФРМ(ПоУчетуВалИтог);
		
		ПоОтчетуИтог = глФРМ(ПоОтчетуИтог);
		ПоУчетуИтог  = глФРМ(ПоУчетуИтог);
	КонецЕсли;

	Таб.ВывестиСекцию("Подвал");
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиАвансовогоОтчета", "ОпцииПечатиАвансовогоОтчета");
		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Авансовый отчет","");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 
КонецПроцедуры // Печать()    
	                     
//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()    
	
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ.АвансовыйОтчет", ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)             

	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа - очистим партии
		Возврат;
	КонецЕсли;
	
КонецПроцедуры //ВводНового()    

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()     
	
	СтараяДата    = ДатаДок;
	СтараяФирма   = Фирма;
	СтароеФизЛицо = ФизЛицо;
	СтараяВалюта  = Валюта;
	
	ПолучитьНачальнуюДату();
	ЗаполнитьТаблицу(); 
	ПосчитатьОстатокНаНачалоДня();
	
	ИтоговаяСтрока();            
	
	АвтоВремяПослеТА();
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
КонецПроцедуры // ПриОткрытии()    
           
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	КонецЕсли;
        
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()    

////////////////////////////////////////////////////////////////////////////////
// 
ТабДокументов.НоваяКолонка("Статус",,,,"",5);
ТабДокументов.НоваяКолонка("Документ");
ТабДокументов.НоваяКолонка("СтрокаДокумента",,,,"Документ",30);
ТабДокументов.НоваяКолонка("Валюта",,,,"Вал",5);
ТабДокументов.НоваяКолонка("Приход","Число",15,2,"Выдано под отчет",15,"Ч15.2.'",2);
ТабДокументов.НоваяКолонка("Расход","Число",15,2,"Отчеты, возвращено",15,"Ч15.2.'",2);
ТабДокументов.НоваяКолонка("ПриходПроведен","Число",15,2);
ТабДокументов.НоваяКолонка("РасходПроведен","Число",15,2);
ТабДокументов.ВидимостьКолонки("Документ", 0);
ТабДокументов.ВидимостьКолонки("ПриходПроведен", 0);
ТабДокументов.ВидимостьКолонки("РасходПроведен", 0);
ТабДокументов.ВыводитьПиктограммы("Статус",1); 
ТабДокументов.Фиксировать(0,1); // первую колонку фиксируем

ФизЛицо.ВыборГруппы(0);

// формируем таблицу печатных форм
НомерТекущейФормы 	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печать";
ТаблицаПечФорм.Кнопка       = "Печать";

ОстатокНаНачалоДня = 0;
