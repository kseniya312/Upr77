////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ВидДолгаПоТМЦ(пВидТМЦ)
//
// Параметры:
//  пВидТМЦ - Перечисление.ВидыТМЦ - вид отгруженного ТМЦ
//
// Возвращаемое значение:
//  Значение перечисления ВидыДолга, соотв. переданному виду ТМЦ
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  По переданному значению вида ТМЦ возвращает соответствующий вид долга отгрузки.
//
Функция ВидДолгаПоТМЦ(пВидТМЦ)
	
	Если пВидТМЦ=Перечисление.ВидыТМЦ.Товар Тогда
		Возврат глВД.ДолгЗаТовары;
	ИначеЕсли пВидТМЦ=Перечисление.ВидыТМЦ.Материал Тогда
		Возврат глВД.ДолгЗаМатериалы;
	Иначе
		глСообщениеПроведения("Неизвестный вид ТМЦ: "+пВидТМЦ, ТекущийДокумент(),,,1);
	КонецЕсли;
	
КонецФункции //ВидДолгаПоТМЦ()

//******************************************************************************
// ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Установка фильтров для отбора итогов регистров Заказы, ЗаказыЗаявки.
//
Процедура ФильтрЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
	
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	ВремЗаказы.УстановитьЗначениеФильтра("Фирма",	            ФирмаДляОстатковТМЦ , 2);
	ВремЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика",	Договор             , 1);
	
	ВидОсн = ДокОснование.Вид();
	Если (ДокОснование.Выбран()=1) и (ВидОсн = "ЗаказПоставщику") Тогда
		// если выбран заказ, то гасим только его !!!
		ВремЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику",	ДокОснование,1);
	КонецЕсли;
	
	Если ИтогиАктуальны()=0 Тогда
		СписокТМЦ = СоздатьОбъект("СписокЗначений");
		ТаблицаТМЦ.Выгрузить(СписокТМЦ,,,"Номенклатура");
		
		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписокТМЦ, 2);
		
		ВремЗаказы.      ВременныйРасчет();      
		ВремЗаказыЗаявки.ВременныйРасчет();
	КонецЕсли;
	
КонецПроцедуры // ФильтрЗаказов()

//******************************************************************************
// ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
//
// Параметры:
//  ТаблицаТМЦ - подготовленная таблица документа.
//  ВремЗаказы       - объект "Регистр.Заказы",       должным образом рассчитанный и отфильтрованный
//  ВремЗаказыЗаявки - объект "Регистр.ЗаказыЗаявки", должным образом рассчитанный и отфильтрованный
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит списание по регистру "Заказы"
//
Процедура ДвижениеЗаказов(ТаблицаТМЦ, ВремЗаказы, ВремЗаказыЗаявки)
	Перем ТИЗаказы, ТИЗЗ;  
	
	// общие для всех движений измерения
	Регистр.Заказы.    Фирма			= Фирма;
	Регистр.РезервыТМЦ.Фирма			= Фирма;
	
	ТаблицаТМЦ.ВыбратьСтроки();
	Пока ТаблицаТМЦ.ПолучитьСтроку()=1 Цикл  
		
		ТекНоменк = ТаблицаТМЦ.Номенклатура;
		
		// общие для всех движений измерения
		Регистр.Заказы.      Номенклатура 	= ТекНоменк;
		Регистр.РезервыТМЦ.  Номенклатура 	= ТекНоменк;
		Регистр.ЗаказыЗаявки.Номенклатура 	= ТекНоменк;
		
		ВремЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
		ВремЗаказы.      УстановитьЗначениеФильтра("Номенклатура",	ТекНоменк,1);
		
		ВремЗаказы.ВыгрузитьИтоги(ТИЗаказы,1,1);
		
		ПогаситьКолВо = ТаблицаТМЦ.Количество;
		
		ТИЗаказы.ВыбратьСтроки();
		Пока (ТИЗаказы.ПолучитьСтроку()=1) 
		и    (ПогаситьКолВо>0) 
		Цикл
			ОстЗакКПриход = ТИЗаказы.КоличествоПриход;
			ОстЗакСПриход = ТИЗаказы.СтоимостьПриход;
			
			ПогЗакКПриход = Макс(Мин(ОстЗакКПриход, ПогаситьКолВо),0);
			ПогЗакСПриход = ?(ОстЗакКПриход = 0, 0, ОстЗакСПриход * ПогЗакКПриход / ОстЗакКПриход);
			
			Если ПогЗакКПриход <> 0 Тогда
				
				Регистр.Заказы.ДоговорПоставщика= ТИЗаказы.ДоговорПоставщика;
				Регистр.Заказы.ЗаказПоставщику	= ТИЗаказы.ЗаказПоставщику;
				
				Регистр.Заказы.КоличествоПриход	= ПогЗакКПриход;
				Регистр.Заказы.СтоимостьПриход	= ПогЗакСПриход;
				
				Регистр.Заказы.ДвижениеРасходВыполнить();      
				
				ПогаситьКолВо = ПогаситьКолВо - ПогЗакКПриход; 
				
				// посмотрим, а не числилась ли привязка к заказу поставщика по заявке?
				ВремЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаказПоставщику",ТИЗаказы.ЗаказПоставщику,1);
				ВремЗаказыЗаявки.ВыгрузитьИтоги(ТИЗЗ,1,1);
				ОстПогКПоЗаказу = ПогЗакКПриход;
				
				ТИЗЗ.ВыбратьСтроки();
				Пока (ТИЗЗ.ПолучитьСтроку()=1)
				и    (ОстПогКПоЗаказу <> 0)
				Цикл                                       
					ОстПоЗаявке  = ТИЗЗ.Количество;
					ПогКПоЗаявке = Макс(Мин(ОстПогКПоЗаказу, ОстПоЗаявке),0);
					Если ПогКПоЗаявке <> 0 Тогда
						// измерения
						Регистр.ЗаказыЗаявки.ЗаявкаПокупателя = ТИЗЗ.ЗаявкаПокупателя;
						Регистр.ЗаказыЗаявки.ЗаказПоставщику  = ТИЗЗ.ЗаказПоставщику;
						// ресурсы
						Регистр.ЗаказыЗаявки.Количество       = ПогКПоЗаявке;
						// выполним движение
						Регистр.ЗаказыЗаявки.ДвижениеРасходВыполнить();
						
						// и сразу зарезервируем за покупателем эти ТМЦ 
						// измерения
						Регистр.РезервыТМЦ.Номенклатура      = ТекНоменк;
						// если приходуем на другой склад - резерв выставляем в целом по фирме
						Регистр.РезервыТМЦ.Склад		     = ?(ТИЗЗ.ЗаявкаПокупателя.Склад = Склад,Склад,"");
						Регистр.РезервыТМЦ.ДоговорПокупателя = ТИЗЗ.ЗаявкаПокупателя.Договор;
						Регистр.РезервыТМЦ.ЗаявкаПокупателя  = ТИЗЗ.ЗаявкаПокупателя;
						// ресурс
						Регистр.РезервыТМЦ.Количество	     = ПогКПоЗаявке;
						// выполняем движение
						Регистр.РезервыТМЦ.ДвижениеПриходВыполнить();
						
						ОстПогКПоЗаказу = ОстПогКПоЗаказу - ПогКПоЗаявке;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли; // если надо погасить заказ
			
		КонецЦикла; // по выбранным итогам
		
	КонецЦикла; // по строкам документа
	
КонецПроцедуры // ДвижениеЗаказов()

//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры;
	Перем ВремПоставщики, ВремЗаказы, ВремЗаказыЗаявки;
	если НовыйТипДокумента=1 Тогда
		Если ПустоеЗначение(Принят_к_учету)=1 Тогда
			НеПроводитьДокумент();
			сообщить("Документ не принят к учёту, движения по нему сформированы не будут!","!");
			возврат;
		КонецЕсли;
		Если Набран=0 Тогда
			НеПроводитьДокумент();
			сообщить("Документ не заполнен полностью (нет отмашки о готовности), документ не будет проведён!","!");
			возврат;
		КонецЕсли;
	КонецЕсли;
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
	
	ТаблицаДокумента=глПодготовитьТаблицуДокумента(Контекст);
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");
	
	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
	
	ВремРегистры     = СоздатьОбъект("Регистры");
	ВремЗаказы	     = ВремРегистры.Заказы;
	ВремЗаказыЗаявки = ВремРегистры.ЗаказыЗаявки;
	
	ФильтрЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
	
	Если КодОперации=Перечисление.КодыОпераций.Закупка Тогда
		ВремПоставщики = ВремРегистры.Поставщики;
		глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПоставщики);
	КонецЕсли;
	
	Если ИтогиАктуальны() = 0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	// Принимать на реализацию будет только товары
	Если КодОперации=Перечисление.КодыОпераций.ПриемНаРеализацию  Тогда
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			ТаблицаДокумента.ВидТМЦ		= Перечисление.ВидыТМЦ.Товар;
		КонецЦикла;      
	КонецЕсли;    
	
	ДвижениеЗаказов(ТаблицаДокумента, ВремЗаказы, ВремЗаказыЗаявки);
	
	//В партии запишем только тот товар, который не имеет расхождений, все расхождения НИКОГДА не будут записаны, пока не будут выравнены
	ТЗ2=СоздатьОбъект("ТаблицаЗначений");
	ТаблицаДокумента.Выгрузить(ТЗ2);
	ТЗ2.УдалитьСтроки();
	ТаблицаДокумента.ВыбратьСтроки();
	пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		Если ТаблицаДокумента.Количество=ТаблицаДокумента.Количество2 Тогда
			тз2.НоваяСтрока();
			ТЗ2.НомерСтрокиДокумента	= ТаблицаДокумента.номерСтрокиДокумента;
			ТЗ2.ВидТМЦ					= ТаблицаДокумента.ВидТМЦ;
			ТЗ2.Номенклатура    		= ТаблицаДокумента.Номенклатура;
			ТЗ2.Количество			    = ТаблицаДокумента.Количество;
			ТЗ2.Количество2    			= ТаблицаДокумента.Количество2;
			ТЗ2.Единица				    = ТаблицаДокумента.Единица;
			ТЗ2.Коэффициент	    		= ТаблицаДокумента.Коэффициент;
			ТЗ2.Цена				    = ТаблицаДокумента.Цена;
			ТЗ2.Сумма				    = ТаблицаДокумента.Сумма;
			ТЗ2.СтавкаНДС			    = ТаблицаДокумента.СтавкаНДС;
			ТЗ2.СуммаНДС	    		= ТаблицаДокумента.СуммаНДС;
			ТЗ2.СтавкаНП			    = ТаблицаДокумента.СтавкаНП;
			ТЗ2.СуммаНП	    			= ТаблицаДокумента.СуммаНП;
			ТЗ2.Партия		   			= ТаблицаДокумента.Партия;
			ТЗ2.СуммаУпр			    = ТаблицаДокумента.СуммаУпр;
			ТЗ2.СуммаРуб				= ТаблицаДокумента.СуммаРуб;
			ТЗ2.СкидкаРуб			    = ТаблицаДокумента.СкидкаРуб;
			ТЗ2.ПродСтоимость   		= ТаблицаДокумента.ПродСтоимость;
			ТЗ2.ЦенаПрод			    = ТаблицаДокумента.ЦенаПрод;
			ТЗ2.ЦенаПродПриход  		= ТаблицаДокумента.ЦенаПродПриход;
		КонецЕсли;
	КонецЦикла;
	
	глПриходОстатковТМЦ	    (Контекст,ТЗ2,СписокПараметров);
	глОприходованиеПартийТМЦ(Контекст,ТЗ2,СписокПараметров);
	
	//а по взаиморасчётам пишем полную сумму
	Если КодОперации=Перечисление.КодыОпераций.Закупка Тогда
		
		ТаблицаДокумента.Свернуть("ВидТМЦ,СтавкаНДС","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
		ТаблицаДокумента.НоваяКолонка("ВидДолга");
		ТаблицаДокумента.НоваяКолонка("КредДокумент");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			ТаблицаДокумента.ВидДолга		= ВидДолгаПоТМЦ(ТаблицаДокумента.ВидТМЦ);
			ТаблицаДокумента.КредДокумент   = ТекущийДокумент();
		КонецЦикла;      
		
		СписокПараметров.Установить("ЗнакДвижения", -1); // уменьшение долга контрагента
		глДвижениеДолгов(Контекст, Договор, ТаблицаДокумента,СписокПараметров,ВремПоставщики);
	КонецЕсли;    
	
	
КонецПроцедуры // ПроведениеПоРегистрам()


Процедура ОбработкаУдаленияПроведения()
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Сообщить("Вы не можете отменять проведение данного документа");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
// *****************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)   
	
	// Проверка заполненности обязательных реквизитов.
	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
	"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);
	
	//Warning "Заполнение последней цены прихода"
	ОчиститьДвижения("Справочник");   
	
	Если БудетДооценка = 1 Тогда   
		ВыбНачПериода = ДатаДок;
		ВыбКонПериода = ДатаДок + 30;
		ВыбДокументПоставки = ТекущийДокумент();
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|Период с ВыбНачПериода по ВыбКонПериода;
		|Обрабатывать НеПомеченныеНаУдаление;
		|Без итогов;
		|Сумма = Документ.ПоступлениеДопРасходы.Сумма;
		|ДокументПоставки = Документ.ПоступлениеДопРасходы.ДокументПоставки;
		|Функция СуммаСумма = Сумма(Сумма);
		|Условие(ДокументПоставки = ВыбДокументПоставки);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		СуммаДопРасходов = 0;
		Пока Запрос.Группировка() = 1 Цикл    
			СуммаДопРасходов = Запрос.СуммаСумма;
		КонецЦикла;
		ИтогПоТЧ = Итог("Сумма");
	КонецЕсли;
	//^Warning^ "Заполнение последней цены прихода"
	
	Спр = СоздатьОбъект("Справочник.Номенклатура");
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Спр.НайтиЭлемент(Номенклатура);
		
		Валюта1 = Валюта;
		Курс1	= Курс; 
		
		Валюта2 = Константа.ВалютаУпрУчета;
		Валюта2.ИспользоватьДату(ДатаДок);
		Курс2	= Валюта2.Курс; 
		
		если сокрЛП(Склад)="Энгельса" Тогда
			спр.ПризнакОтбораЭнгельса=1;
		ИначеЕсли сокрЛП(Склад)="Некрасова" Тогда
			спр.ПризнакОтбораНекрасова=1;
		ИначеЕсли сокрЛП(Склад)="Стахановцев" Тогда
			спр.ПризнакОтбораСтахановцев=1;
		ИначеЕсли сокрЛП(Склад)="Савушкина" Тогда
			спр.ПризнакОтбораСавушкина=1;
		ИначеЕсли сокрЛП(Склад)="Ленсовета" Тогда
			спр.ПризнакОтбораЛенсовета=1;
			//ИначеЕсли сокрЛП(Склад)="Антонова-Овсеенко" Тогда
			//	спр.ПризнакОтбораАнтоноваОвсеенко=1; 
		ИначеЕсли сокрЛП(Склад)="Коллонтай" Тогда
			спр.ПризнакОтбораКоллонтай=1;
		ИначеЕсли сокрЛП(Склад)="Радищева" Тогда
			спр.ПризнакОтбораРадищева=1;
		ИначеЕсли сокрЛП(Склад)="Туристская" Тогда
			спр.ПризнакОтбораТуристская=1;
		ИначеЕсли сокрЛП(Склад)="Ленинский" Тогда
			спр.ПризнакОтбораЛенинский=1;	
		КонецЕсли;
		
		//Warning "Заполнение последней цены прихода"		
		Если БудетДооценка = 0 Тогда			 
			Если ПустоеЗначение(Цена) = 0  Тогда
				УстановитьРеквизитСправочника(Номенклатура, "ПоследняяЦенаПрихода", глПересчет(Цена,Валюта1,Курс1,Валюта2,Курс2), ДатаДок);
			КонецЕсли;
		ИначеЕсли (СуммаДопРасходов > 0) и (Количество > 0) Тогда
			К = ?(Сумма = 0, 0, Сумма / ИтогПоТЧ);
			НоваяЦенаПрихода = глПересчет(Цена,Валюта1,Курс1,Валюта2,Курс2) + СуммаДопРасходов * К / Количество;
			Если ПустоеЗначение(НоваяЦенаПрихода) = 0  Тогда
				УстановитьРеквизитСправочника(Номенклатура, "ПоследняяЦенаПрихода", НоваяЦенаПрихода, ДатаДок);
			КонецЕсли;
		КонецЕсли; 
		//^Warning^ "Заполнение последней цены прихода"
		
		Спр.Записать();
		
	КонецЦикла;	 
	
	Регистр.Взаиморасчеты2.Контрагент 	= Контрагент;
	Регистр.Взаиморасчеты2.Склад 		= Склад;
	если ПустоеЗначение(Проект)=1 Тогда
		НеПроводитьДокумент();
		Сообщить("Не указан проект - нет возможности отнести к определенному виду оплаты
		|документ не проводится!");
		Возврат;
	Иначе
		Регистр.Взаиморасчеты2.Долг		= Итог("Сумма");
		Регистр.Взаиморасчеты2.Скидка	= 0;
		Регистр.Взаиморасчеты2.Валюта	= Валюта;
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			Регистр.Взаиморасчеты2.ДокументРасчета	= ТекущийДокумент();
		Иначе
			Регистр.Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(Контекст);
		КонецЕсли;
		
		Если Проект.ВидОплаты=глКО.Наличные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Наличные;
			Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.Безнал Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Безнал;
			Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.Прочее Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Прочее;
			Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		ИначеЕсли Проект.ВидОплаты=глКО.СтарыеДанные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
			Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		Иначе
			НеПроводитьДокумент();
			Сообщить("Проект не отнесен к определенному виду оплаты
			|документ не проводится!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
