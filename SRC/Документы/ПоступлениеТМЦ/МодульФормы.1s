////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"            

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;

Перем СпрПартии; // для обработки партий документа

Перем корректировка;	//Для ввода продавцом документа корректировки
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//
Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		
		Если КодОперации = глКО.ПриемНаРеализацию Тогда
			Форма.ВидТМЦ.Видимость(0);
		Иначе
			Форма.ВидТМЦ.Видимость(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	//Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()    

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма,Договор, "поставщик");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
                
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+ " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                 
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));

КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции //ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// СоздатьПартию(ПартияИсточник = 0) 
//
// Параметры: 
//  ПартияИсточник - элемент справочника партий, необязательный параметр,
//                   если задан, то ГТД, Страна и свойство копируются из него.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Если для текущего ТМЦ в справочнике Номенклатура задана Страна и ГТД по умолчанию, то 
//  автоматически создается и записывается соответствующий элемент справочника партий,
//  при копировании строки параметры партии наследуются.
//
Процедура СоздатьПартию(ПартияИсточник = 0, ГТД, СтранаП)
	Если (пустоезначение(ГТД)=0)или(пустоезначение(СтранаП)=0) тогда 
	Если (ГТД.Выбран()=1)и(СтранаП.Выбран()=1) тогда 	
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			Возврат;
		КонецЕсли;  
		Если ПустоеЗначение(Партия) = 0 Тогда
			// если партия уже записана - не трогаем ее!
			Возврат;
		КонецЕсли;  
		
		Если (ПустоеЗначение(ПартияИсточник) = 0)и(ПартияИсточник.ГТД=ГТД.ТекущийЭлемент())и(ПартияИсточник.СтранаПроисхождения=СтранаП.ТекущийЭлемент()) Тогда
			Если (ПартияИсточник.ГТД.Выбран() = 1) 
			или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
			или  (ПартияИсточник.Свойство.Выбран() = 1) 
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ПартияИсточник.ГТД;
				СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
				СпрПартии.Свойство            = ПартияИсточник.Свойство;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		Иначе    
			Если (Номенклатура.НомерГТД.Выбран() = 1) 
			или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ГТД.ТекущийЭлемент();
				СпрПартии.СтранаПроисхождения = СтранаП.ТекущийЭлемент();
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ГТД.Выбран()=1)и(СтранаП.Выбран()=0) тогда
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			Возврат;
		КонецЕсли;  
		Если ПустоеЗначение(Партия) = 0 Тогда
			// если партия уже записана - не трогаем ее!
			Возврат;
		КонецЕсли;  
		
		Если (ПустоеЗначение(ПартияИсточник) = 0)и(ПартияИсточник.ГТД=ГТД.ТекущийЭлемент()) Тогда
			Если (ПартияИсточник.ГТД.Выбран() = 1) 
			или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
			или  (ПартияИсточник.Свойство.Выбран() = 1) 
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ПартияИсточник.ГТД;
				СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
				СпрПартии.Свойство            = ПартияИсточник.Свойство;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		Иначе    
			Если (Номенклатура.НомерГТД.Выбран() = 1) 
			или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ГТД.ТекущийЭлемент();
				СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ГТД.Выбран()=0)и(СтранаП.Выбран()=1) тогда
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			Возврат;
		КонецЕсли;  
		Если ПустоеЗначение(Партия) = 0 Тогда
			// если партия уже записана - не трогаем ее!
			Возврат;
		КонецЕсли;  
		
		Если (ПустоеЗначение(ПартияИсточник) = 0)и(ПартияИсточник.СтранаПроисхождения=СтранаП.ТекущийЭлемент()) Тогда
			Если (ПартияИсточник.ГТД.Выбран() = 1) 
			или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
			или  (ПартияИсточник.Свойство.Выбран() = 1) 
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ПартияИсточник.ГТД;
				СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
				СпрПартии.Свойство            = ПартияИсточник.Свойство;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		Иначе    
			Если (Номенклатура.НомерГТД.Выбран() = 1) 
			или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = Номенклатура.НомерГТД;
				СпрПартии.СтранаПроисхождения = СтранаП.ТекущийЭлемент();
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
		КонецЕсли;

	иначе
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			Возврат;
		КонецЕсли;  
		Если ПустоеЗначение(Партия) = 0 Тогда
			// если партия уже записана - не трогаем ее!
			Возврат;
		КонецЕсли;  
		
		Если ПустоеЗначение(ПартияИсточник) = 0 Тогда
			Если (ПартияИсточник.ГТД.Выбран() = 1) 
			или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
			или  (ПартияИсточник.Свойство.Выбран() = 1) 
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ПартияИсточник.ГТД;
				СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
				СпрПартии.Свойство            = ПартияИсточник.Свойство;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		Иначе    
			Если (Номенклатура.НомерГТД.Выбран() = 1) 
			или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
			Тогда
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = Номенклатура.НомерГТД;
				СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
				Попытка
					СпрПартии.Записать();
				Исключение   
					Сообщить(ОписаниеОшибки(),"I");
					Возврат;
				КонецПопытки;
				Партия = СпрПартии.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьПартию()

//******************************************************************************
// УдалитьПартию()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие выбранную партию в текущей строке документа.
//
Процедура УдалитьПартию()

	Если Партия.Выбран() = 1 Тогда
		Если СпрПартии.НайтиЭлемент(Партия) = 1 Тогда
			СпрПартии.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПартию()

//******************************************************************************
// УдалитьВсеПартии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие все выбранные партии во всех строках документа.
//
Процедура УдалитьВсеПартии()
	
    ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдалитьПартию();
	КонецЦикла;                     
	
КонецПроцедуры // УдалитьВсеПартии()

//******************************************************************************
// ЗаполнитьГТД()
//
// Параметры: 
//  Нет
//
// Описание:
//  Если в справочнике Номенклатура для подобранной позиции указан номер ГТД
//  и (или) страна происхождения, то переносим эти значения в документ, создавая партии.
//
Процедура ЗаполнитьГТД()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    СоздатьПартию(СпрПартии,"","");
	КонецЦикла;
КонецПроцедуры // ЗаполнитьГТД()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только на оптовый склад!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.

Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда    
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();  
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		
		ОбновитьНадписи();    
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!
			|Для оформления поступления услуг воспользуйтесь документом """
			+ ПолучитьПустоеЗначение("Документ.ПоступлениеПрочее").ПредставлениеВида()+""".",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;     
    
	СтараяПартия = Партия; 
	Если ПустоеЗначение(Партия) = 0 Тогда
		Если Партия.Владелец <>  Номенклатура Тогда
			УдалитьПартию(); // реквизит Партия будет очищен в глПересчетТаблЧасти
		КонецЕсли;
	КонецЕсли;
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());	
	                                                     
    СоздатьПартию(СтараяПартия,"","");
	
	//Валерий МЭТР: иначе СтранаПроисхождения остается прежней
	Партия.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;

КонецПроцедуры // ПриИзмененииНоменклатуры()
             
//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                   
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ основание";
	КонецЕсли;  
	
	//++Валерий МЭТР: добваление основания - СолянкаПоПсотавкам
	//Если (ДокОснование.Вид() <> "ЗаказПоставщику") Тогда
	//	Возврат "Неверный вид документа - основания!";
	//КонецЕсли; // вид ДокОснования
	
	Если ДокОснование.Вид() = "ЗаказПоставщику" Тогда		
		
		Валюта 		= ДокОснование.Валюта;
		Курс 		= ДокОснование.Курс;
		ДатаОплаты 	= ДокОснование.ДатаОплаты;   
		
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		ТаблицаДокумента.Свернуть("Номенклатура,Единица,Коэффициент,Цена,СтавкаНДС,СтавкаНП", "Количество,Сумма,СуммаНДС,СуммаНП");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();    
			ВидТМЦ 		= Перечисление.ВидыТМЦ.Товар;
			Номенклатура= ТаблицаДокумента.Номенклатура;
			Количество 	= ТаблицаДокумента.Количество; 
			Единица 	= ТаблицаДокумента.Единица;
			Коэффициент = ТаблицаДокумента.Коэффициент;
			Цена 		= ТаблицаДокумента.Цена;
			Сумма 		= ТаблицаДокумента.Сумма;
			СуммаНДС 	= ТаблицаДокумента.СуммаНДС;
			СуммаНП 	= ТаблицаДокумента.СуммаНП;
			СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
			СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
			
			СоздатьПартию(,"",""); // Пропишем ГТД и страну по умолчанию
			
		КонецЦикла; // по строкам основания
		
		СуммаВзаиморасчетов	= ДокОснование.СуммаВзаиморасчетов;
		
		Если КоличествоСтрок()=0 Тогда
			Возврат "По документу - основанию не числится остатка заказов!";
		КонецЕсли;
		
		Возврат ""; 
	
	ИначеЕсли ДокОснование.Вид() = "СолянкаПоПоставкам" Тогда
		
		//Валюта 		= ДокОснование.Валюта;
		//Курс 		= ДокОснование.Курс;
		//ДатаОплаты 	= ДокОснование.ДатаОплаты;   
		
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		ТаблицаДокумента.Свернуть("Номенклатура,Артикул,Производитель,Единица,Коэффициент,Цена", "Количество,Сумма");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			НоваяСтрока();    
			ВидТМЦ 		= Перечисление.ВидыТМЦ.Товар;
			Номенклатура= ТаблицаДокумента.Номенклатура;
			Количество 	= ТаблицаДокумента.Количество; 
			Единица 	= ТаблицаДокумента.Единица;
			Коэффициент = ТаблицаДокумента.Коэффициент;
			Цена 		= ТаблицаДокумента.Цена;
			Сумма 		= ТаблицаДокумента.Сумма;
			//СуммаНДС 	= ТаблицаДокумента.СуммаНДС;
			//СуммаНП 	= ТаблицаДокумента.СуммаНП;
			СтавкаНДС 	= Перечисление.СтавкиНДС.НДС18;
			//СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
			
			СоздатьПартию(,"",""); // Пропишем ГТД и страну по умолчанию
			
		КонецЦикла; // по строкам основания
		
		//СуммаВзаиморасчетов	= ДокОснование.СуммаВзаиморасчетов;
		
		Если КоличествоСтрок()=0 Тогда
			Возврат "По документу - основанию не числится остатка заказов!";
		КонецЕсли;
		
		Возврат "";
		
	Иначе  		
		Возврат "Неверный вид документа - основания!"; 		
	КонецЕсли; 
	//--Валерий МЭТР:
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
//
// Параметры:
//  Нет
//
// Описание:
//
Процедура РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
	
	Если УчитыватьНП = 1 Тогда
		ПарСуммаНП = ПарСуммаВсего * КоэффНП;
		СуммаБезНП = ПарСуммаВсего - ПарСуммаНП;
		Если СуммаВклНП = 0 Тогда
			ПарСумма = СуммаБезНП;
		Иначе
			ПарСумма = ПарСуммаВсего;
		КонецЕсли;
	Иначе
		ПарСумма   = ПарСуммаВсего;
		СуммаБезНП = ПарСуммаВсего;
		ПарСуммаНП = 0;
	КонецЕсли;
	
	Если УчитыватьНДС = 1 Тогда
		ПарСуммаНДС = СуммаБезНП * КоэффНДС;
		Если СуммаВклНДС = 0 Тогда
			ПарСумма = ПарСумма - ПарСуммаНДС;
		КонецЕсли;
	Иначе
		ПарСуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыПоВарианту()

//******************************************************************************
// ЗаполнениеПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть товарами по догувору, переданными комиссионеру,
//  но еще не реализованными.
//
Функция ЗаполнениеПоИтогам()
	Перем НедополученныеТовары, ТекСтрокаИтогов;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	РегОбщ    = СоздатьОбъект("Регистры");
	РегЗаказы = РегОбщ.Заказы;
	
	// установим фильтры на измерения
	РегЗаказы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
	
	ЗаполнятьПоОснованию = 1; // Флаг варианта заполнения
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		// если есть заказ, то заполняем недополученными по нему товарами
		РегЗаказы.УстановитьЗначениеФильтра("ЗаказПоставщику", ДокОснование, 1);
		ЗаполнятьПоОснованию = 1; 
	Иначе
		// заказ отсутствует. заполняем недополученными по договору товарами
		РегЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика", Договор, 1);
	КонецЕсли;
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегЗаказы.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегЗаказы.ВременныйРасчет();
			РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегЗаказы.ВыгрузитьИтоги(НедополученныеТовары, 1, 1);
	НедополученныеТовары.Свернуть("Номенклатура", "КоличествоПриход,СтоимостьПриход");

	Если ЗаполнятьПоОснованию = 0  Тогда
		
		СуммаВзаиморасчетов = 0;
		НедополученныеТовары.ВыбратьСтроки();
	
		Пока НедополученныеТовары.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
		
			ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
			Номенклатура = НедополученныеТовары.Номенклатура;
			Единица      = Номенклатура.ОсновнаяЕдиница;
			Коэффициент  = Единица.Коэффициент;
			Количество   = НедополученныеТовары.КоличествоПриход / ?(Коэффициент = 0, 1, Коэффициент);
		
			Если УчитыватьНДС = 1 Тогда
				СтавкаНДС = Номенклатура.СтавкаНДС;
			КонецЕсли;
			Если УчитыватьНП = 1 Тогда
				СтавкаНП = Номенклатура.СтавкаНП;
			КонецЕсли;
		
			ОбщСумма     = глПересчет(НедополученныеТовары.СтоимостьПриход, 
            	                      Договор.ВалютаВзаиморасчетов, ДатаДок,
		        	                  Валюта, Курс);
		
        	ВремСтавкаНП = Номенклатура.СтавкаНП.Ставка;
		
        	РассчитатьСуммыПоВарианту
			(
		    	ОбщСумма, 
				глВыделяемыйНДС(Номенклатура.СтавкаНДС), // коэффициент выделяемого НДС
				ВремСтавкаНП/(100 + ВремСтавкаНП),       // коэффициент выделяемого НП
				Сумма, СуммаНДС, СуммаНП
			);
		
			Если Количество <> 0 Тогда
				Цена = Сумма / Количество;
			Иначе
				Цена = Сумма;
			КонецЕсли;
			
			СоздатьПартию(,"","");
		
		КонецЦикла;
	Иначе // Заполняем по основанию
		
		// При заполнении на основании Заказа цены, суммы и скидки надо брать из основания
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		ТаблицаДокумента.Свернуть("Номенклатура,Единица,Коэффициент,Цена,СтавкаНДС,СтавкаНП", "Количество,Сумма,СуммаНДС,СуммаНП");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			
			// Есть остатки по этой строке?   
			Если Не (ДокОснование.Вид() = "ЗаявкаКлиентаРозница") Тогда
				ТекСтрокаИтогов = 0;
				Если НедополученныеТовары.НайтиЗначение(ТаблицаДокумента.Номенклатура, ТекСтрокаИтогов, "Номенклатура") = 0 Тогда // нет остатков
					Продолжить;
				КонецЕсли;
				
				КоличествоПриход = НедополученныеТовары.ПолучитьЗначение(ТекСтрокаИтогов, "КоличествоПриход");
				Если КоличествоПриход = 0 Тогда // нет остатков
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока();
			ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
			СтавкаНДС 	 = ТаблицаДокумента.СтавкаНДС;
			СтавкаНП 	 = ТаблицаДокумента.СтавкаНП;
			Номенклатура = ТаблицаДокумента.Номенклатура;
			Единица 	 = ТаблицаДокумента.Единица;
			Коэффициент  = ТаблицаДокумента.Коэффициент;
			Количество 	 = Мин(ТаблицаДокумента.Количество, КоличествоПриход / Коэффициент ); 
			Сумма 		 = ТаблицаДокумента.Сумма * Количество / ТаблицаДокумента.Количество;
			глПересчетТаблЧасти(Контекст,"Сумма");
			
			СоздатьПартию(,"","");
			
		КонецЦикла; // по строкам основания
		
		ОснованиеСумма = ДокОснование.Итог("Сумма");  
		Попытка
			СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, ДокОснование.СуммаВзаиморасчетов * Итог("Сумма") / ОснованиеСумма);
		Исключение
		КонецПопытки;
		
	КонецЕсли; // ЗаполнятьПоОснованию = 0
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Все заказанные товары получены!";
	КонецЕсли;
	
	Возврат "";	// успешное завершение
	
КонецФункции // ЗаполнениеПоИтогам()

//******************************************************************************
// ЗаполнитьИзТерминала()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Пустая строка.
//
// Описание:
//  Заполняет табличную часть из терминала сбора данных. Вызывается по кнопке
//  Заполнить, если терминал сбора данных подключен.
//
Функция ЗаполнитьИзТерминала()
	Перем ТермДанные;
	Перем УдаляемыеСтроки;
	Перем ВремНоменклатура, ВремЕдиница, ВремКолво;
	Перем ЦенаТов, ЕдиницаЦены;
	
	// 1. загружаем данные из терминала
	Если глТерминалЗагрузитьДанные(ТермДанные) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	// 2. преобразуем таблицу, полученную из обработки терминала в формат для
	// передачи в процедуру обработки подбора
	                                    
	ТермДанные.НоваяКолонка("ВидТМЦ");
	ТермДанные.НоваяКолонка("Номенклатура");
	ТермДанные.НоваяКолонка("Единица");
	ТермДанные.НоваяКолонка("Цена", "Число",);
	
	УдаляемыеСтроки = СоздатьОбъект("СписокЗначений");
	ТермДанные.ВыбратьСтроки();
	
	Пока ТермДанные.ПолучитьСтроку() = 1 Цикл
	    Если глПолучитьТоварПоШтрихкоду(ТермДанные.Штрихкод, ВремНоменклатура, ВремЕдиница, ВремКолво) = 0 Тогда
			// штрихкод не найден. сохраним номер строки для дальнейшего ее удаления
			УдаляемыеСтроки.ДобавитьЗначение(ТермДанные.НомерСтроки);
		Иначе
			ТермДанные.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
			ТермДанные.Номенклатура = ВремНоменклатура;
			ТермДанные.Единица      = ВремЕдиница;
			ТермДанные.Количество	= ТермДанные.Количество * ВремКолво;
			ТермДанные.Цена			= глПолучитьЦену(ВремНоменклатура, ТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
		КонецЕсли;
	КонецЦикла;
	

	// 3. удалим строки, по которым не удалось идентифицировать товар
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По УдаляемыеСтроки.РазмерСписка() Цикл
		УдСтр = УдаляемыеСтроки.ПолучитьЗначение(СчетчикЦикла);
		ТермДанные.УдалитьСтроку(УдСтр - СчетчикЦикла + 1);
	КонецЦикла;
	
	ТермДанные.Свернуть("ВидТМЦ,Номенклатура, Единица, Цена", "Количество");
	
	ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
	ПараметрыПодбора.ДобавитьЗначение(1              , "ЕстьВидТМЦ");
	ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
	ПараметрыПодбора.ДобавитьЗначение(ТермДанные     , "ТаблицаПодбора");

	глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
	ЗаполнитьГТД();
	// 4. Спросим про очистку памяти терминала
	Если Вопрос("Очистить память терминала сбора данных?", "Да+Нет", 60) = "Да" Тогда
	    глТерминалОчиститьПамять();
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьИзТерминала()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
		
		// очищаем наш документ
		// перед удалением строк надо удалить все партии
		УдалитьВсеПартии();
		УдалитьСтроки();
	
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
		
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремКодОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(глКО.Закупка);
	СписокОпераций.ДобавитьЗначение(глКО.ЗакупкаКорректировка);
	СписокОпераций.ДобавитьЗначение(глКО.ПриемНаРеализацию);
	
	Если СписокОпераций.ВыбратьЗначение(ВремКодОперации,,,,1)=1 Тогда
		КодОперации=ВремКодОперации;
		УправлениеВидимостью();
		Если КодОперации = глКО.ПриемНаРеализацию Тогда
			ВыбратьСтроки();
		    Пока ПолучитьСтроку()=1 Цикл
		    	ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		    КонецЦикла;
		КонецЕсли;
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()
                   
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	Перем ВариантЗап;
	
	Если глТерминалВключен() = 1 Тогда
		СписВариантов = СоздатьОбъект("СписокЗначений");
		СписВариантов.ДобавитьЗначение(1, "Заполнить по остаткам");
		СписВариантов.ДобавитьЗначение(2, "Заполнить из терминала");
		
		Если СписВариантов.ВыбратьЗначение(ВариантЗап, , , 60, 1) <> 1 Тогда
		    Возврат;
		КонецЕсли;
	Иначе
	    // терминал не включен. Заполняем всегда по остаткам
		ВариантЗап = 1;
	КонецЕсли;
	
	Если ВариантЗап = 1 Тогда
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;    
		
		// перед удалением строк надо удалить все партии
		УдалитьВсеПартии();
		УдалитьСтроки();
	    Результат = ЗаполнениеПоИтогам();
	Иначе
		Результат = ЗаполнитьИзТерминала();
	КонецЕсли;
	
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(1,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение(1,               "НеПодбиратьУслуги");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если КодОперации = глКО.ПриемНаРеализацию Тогда
		Параметры.ДобавитьЗначение(Перечисление.ВидыТМЦ.Товар,            "ВидТМЦ");
	КонецЕсли;
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	// инициализация таблицы
	Таб = СоздатьОбъект("Таблица");  
	
	// формирование шапки
	СекцияШапка = Таб.ПолучитьСекцию("Шапка");
	СекцияШапка.Номер                    = глНомерНаПечать(Контекст, 1);
	СекцияШапка.ДатаСоставления          = Формат(ДатаДок, "Д (0)ДДММГГГГ");
	
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "БС";
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));	
	Если Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп"; 
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	КонецЕсли;
	
	Если ВыбЮЛ = "БС" Тогда
		СекцияШапка.Организация              = "Организация: " + СокрЛП(Фирма.ЮрЛицо.ПолнНаименование);
		СекцияШапка.КодОКПО                  = СокрЛП(Фирма.ЮрЛицо.ОКПО);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Параметры);
		
		СекцияШапка.Организация              = "Организация: " + СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы"));
		СекцияШапка.КодОКПО                  = СокрЛП(Параметры.Получить("ОКПО"));		
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС" 	
	
	СекцияШапка.СтруктурноеПодразделение = "Структурное подразделение: ";
	СекцияШапка.МестоХранения            = Склад;
	
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		СекцияШапка.Поставщик                = Контрагент.ЮрФизЛицо.ПолнНаименование;
	КонецЕсли;
	
	СекцияШапка.КодПоставщика            = Контрагент.Код;
	//СекцияШапка.КорСчет                  = "60.1";
	Таб.ВывестиСекцию(СекцияШапка);

	СуммаВсегоИтогПеч  = 0;
	СуммаБезНДСИтогПеч = 0;
	СуммаНДСИтогПеч    = 0;
	
	// формирование строк
	СекцияСтрока = Таб.ПолучитьСекцию("Строка");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл

		СекцияСтрока.Материал            = СокрЛП(Номенклатура.ПолнНаименование);
		СекцияСтрока.НоменклатурныйНомер = Номенклатура.Код;
		СекцияСтрока.КодЕдиницыИзмерения = Единица.ОКЕИ.Код;
		СекцияСтрока.ЕдиницаИзмерения    = Единица.ОКЕИ.Наименование;
		СекцияСтрока.Принято             = СокрЛ(Формат(Количество, "Ч 15.3."));
		
		СуммаПеч    = глПересчет(Сумма   , Валюта, Курс, глРубли, ДатаДок);
		СуммаНДСПеч = глПересчет(СуммаНДС, Валюта, Курс, глРубли, ДатаДок);
		СуммаНППеч  = глПересчет(СуммаНП , Валюта, Курс, глРубли, ДатаДок);
		
		// сумма без НДС должна включать НП, если он есть
		Если СуммаВклНП = 1 Тогда
			СуммаБезНДСПеч = СуммаПеч;
		Иначе
			СуммаБезНДСПеч = СуммаПеч + СуммаНППеч;
		КонецЕсли;
		
		СуммаВсегоПеч  = СуммаБезНДСПеч;
		
		Если СуммаВклНДС = 1 Тогда
			СуммаБезНДСПеч = СуммаБезНДСПеч - СуммаНДСПеч;
		Иначе
			СуммаВсегоПеч  = СуммаВсегоПеч + СуммаНДСПеч;
		КонецЕсли;
		
		СуммаВсегоИтогПеч  = СуммаВсегоИтогПеч + СуммаВсегоПеч;
		СуммаБезНДСИтогПеч = СуммаБезНДСИтогПеч + СуммаБезНДСПеч;
		СуммаНДСИтогПеч    = СуммаНДСИтогПеч + СуммаНДСПеч;
		
		СекцияСтрока.Цена                = глФРМ(?(Количество = 0, 0, СуммаБезНДСПеч/Количество));
		СекцияСтрока.Сумма               = глФРМ(СуммаБезНДСПеч);
		СекцияСтрока.НДС                 = глФРМ(СуммаНДСПеч);
		СекцияСтрока.Всего               = глФРМ(СуммаВсегоПеч);
		
		Таб.ВывестиСекцию(СекцияСтрока);
		Состояние("Выведено строк: " + НомерСтроки);
	КонецЦикла;

	// формирование подвала
	СекцияПодвал	= Таб.ПолучитьСекцию("Подвал");
	
	СекцияПодвал.ИтогоКоличество = СокрЛ(Формат(Итог("Количество"), "Ч 15.3."));
	СекцияПодвал.ИтогоСумма      = глФРМ(СуммаБезНДСИтогПеч);
	СекцияПодвал.ИтогоВсего      = глФРМ(СуммаВсегоИтогПеч);
	СекцияПодвал.ИтогоНДС        = глФРМ(СуммаНДСИтогПеч);
	
	Таб.ВывестиСекцию(СекцияПодвал);

	// вывод результирующей таблицы на экран
	Таб.ПовторятьПриПечатиСтроки(15, 15);
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиМ4","ОкноМ4");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииВидаТМЦ()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Выполняется при выборе вида ТМЦ
//
Процедура ПриИзмененииВидаТМЦ()
	                                              
	Если ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
		Предупреждение("Продукцию закупать нельзя! Для оприходования продукции
		| на склад используйте документ ""Оприходование ТМЦ""",60);
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли; 
	                 
	Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
		СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаТМЦ()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриРедактированииНовойСтроки()
	
	СтараяПартия = Партия;
	Партия = "";
	Если Номенклатура.Выбран() = 1 Тогда // Копирование
		Если СтараяПартия.Выбран() = 1 Тогда // Была выбрана партия, копируем ее
			СоздатьПартию(СтараяПартия,"","");
		КонецЕсли;
	Иначе    
		Если КодОперации = глКО.ПриемНаРеализацию Тогда
			ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		Иначе
			ВидТМЦ = ВосстановитьЗначение("ВидТМЦПоУмолчанию");
		КонецЕсли;
	КонецЕсли; // Номенклатура.Выбран() = 1
	
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//*****************************************************************************
// предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	ЭлементДиалога=Форма.ТекущаяКолонка();
	
	Если (ЭлементДиалога="ГТД") 
	или  (ЭлементДиалога="СтранаПроисхождения") 
	или  (ЭлементДиалога="Свойство") 
	Тогда
		
		Если Номенклатура.Выбран()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Парам=СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Контекст,"КонтекстДокумента");
		Парам.ДобавитьЗначение(НомерСтроки,"НомерСтроки");
		Парам.ДобавитьЗначение(ЭлементДиалога,"ЭлементДиалога"); 
		
		Если Партия.Выбран()=1 Тогда
			ОткрытьФормуМодально(Партия,Парам,0);
		Иначе                                  
			ОткрытьФормуМодально("Элемент.Партии",Парам,,,Номенклатура);
		КонецЕсли;                       
		
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;    
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                  
//*****************************************************************************
// предопределенная процедура
//
Процедура ПриУдаленииСтроки()
	если НазваниеНабораПрав()="Продавец_розница" Тогда
		Сообщить("Нельзя удалять строки из этого документа");
		СтатусВозврата(0);
		Возврат;
	Иначеесли ПустоеЗначение(Принят_к_учету)=0 Тогда
		Сообщить("Нельзя удалять строки из этого документа");
		СтатусВозврата(0);
		Возврат;
	иначе
		УдалитьПартию();
	КонецЕсли;	
КонецПроцедуры // ПриУдаленииСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)


	Если ДокументОснование.Вид() = "СолянкаПоПоставкам" Тогда
		КодОперации	= глКО.Закупка;
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		ДатаДокВходящий = ДатаДок;
	//	Договор=Контрагент.ОсновнойДоговор;
	//	Склад = ДокументОснование.Склад;
	//	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование); 
	   
		Контрагент = ПолучитьПустоеЗначение();
		
		Договор = ПолучитьПустоеЗначение();
		     
	    Склад = Константа.СкладПолюстровский;
		
    	Проект = Константа.БНП;
		
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			ВидТМЦ			=	Перечисление.ВидыТМЦ.Товар;
			Номенклатура 	= ДокументОснование.Номенклатура;
			Количество 		= ДокументОснование.Количество;
			Количество2		= ДокументОснование.Количество;
			Единица 		= ДокументОснование.Единица;
			Коэффициент		= ДокументОснование.Коэффициент;
			Цена 			= ДокументОснование.Цена;
			Сумма 			= ДокументОснование.Сумма; 
			//--------
			СтавкаНДС = Номенклатура.СтавкаНДС;
		ЗаполнитьГТД();
			
		КонецЦикла;
		НовыйТипДокумента	= 1;
		Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
		Набран				= 0;

		возврат;
	иначеесли ДокументОснование.Вид() = "Заявка" Тогда
		КодОперации	= глКО.Закупка;
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		ДатаДокВходящий = ДатаДок;
		Контрагент = ПолучитьПустоеЗначение();
		
		Договор = ПолучитьПустоеЗначение();
		
		Склад = Константа.СкладПолюстровский;
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			ВидТМЦ			=	Перечисление.ВидыТМЦ.Товар;
			Номенклатура 	= ДокументОснование.Номенклатура;
			Количество 		= ДокументОснование.Количество;
			Количество2		= ДокументОснование.Количество;
			Единица 		= ДокументОснование.Единица;
			Коэффициент		= ДокументОснование.Коэффициент;
			СтавкаНДС = Номенклатура.СтавкаНДС;
			ЗаполнитьГТД();
			
		КонецЦикла;
		НовыйТипДокумента	= 1;
		Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
		Набран				= 0;
		
		возврат;
	иначеесли ДокументОснование.Вид() = "ПоступлениеТМЦ" Тогда
		если ДокументОснование.НовыйТипДокумента=1 Тогда
			КодОперации			= глКО.ЗакупкаКорректировка;
			глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
			ДатаДокВходящий 	= ДатаДок;
			//Договор				= Контрагент.ОсновнойДоговор;
			//Склад 				= ДокументОснование.Склад;
			глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
			Валюта				= ДокументОснование.Валюта;
			Курс				= ДокументОснование.Курс;
			УчитыватьНДС		= ДокументОснование.УчитыватьНДС;
			СуммаВклНДС			= ДокументОснование.СуммаВклНДС;
			ТипЦен				= ДокументОснование.ТипЦен;
			
			ДокументОснование.ВыбратьСтроки();
			Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
				если ДокументОснование.Количество2<>ДокументОснование.Количество Тогда
					НоваяСтрока();
					ВидТМЦ			= Перечисление.ВидыТМЦ.Товар;
					Номенклатура 	= ДокументОснование.Номенклатура;
					Количество		= ДокументОснование.Количество2;
					Количество2		= ДокументОснование.Количество2;
					Единица			= ДокументОснование.Единица;
					Коэффициент		= ДокументОснование.Коэффициент;
					Цена 			= ДокументОснование.Цена;
					СтавкаНДС		= ДокументОснование.СтавкаНДС;
					//Сумма 			= ДокументОснование.Сумма;
					глПересчетТаблЧасти(Контекст,"Цена");
				КонецЕсли;
			КонецЦикла;
			НовыйТипДокумента	= 1;
			Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
			Набран				= 0;
			Корректировка		= 1;
			Комментарий			= "Корр: "+ДокументОснование.НомерДок+" от "+ДокументОснование.ДатаДок+"; "+ДокументОснование.Комментарий; 
		Иначе
			сообщить("Это документ старого типа, вводить корректировки на его основании невозможно");
		КонецЕсли;
		возврат;
	ИначеЕсли ДокументОснование.Вид() = "ЗаявкаПокупателя" Тогда
		Если ДокументОснование.ВидОперации <> Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
			КодОперации	= глКО.Закупка;
			глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
			ДатаДокВходящий = ДатаДок;
			//	Договор=Контрагент.ОсновнойДоговор;
			//	Склад = ДокументОснование.Склад;
			//	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование); 
			Валюта				= ДокументОснование.Валюта;
			Курс				= ДокументОснование.Курс;
			УчитыватьНДС		= ДокументОснование.УчитыватьНДС;
			СуммаВклНДС			= ДокументОснование.СуммаВклНДС;
			ТипЦен				= ДокументОснование.ТипЦен;
			
					
			Склад = Константа.СкладПолюстровский;
			
			Проект = Константа.БНП;
			
			ДокументОснование.ВыбратьСтроки();
			Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
				НоваяСтрока();
				ВидТМЦ			=	Перечисление.ВидыТМЦ.Товар;
				Номенклатура 	= ДокументОснование.Номенклатура;
				Количество 		= ДокументОснование.Количество;
				Количество2		= ДокументОснование.Количество;
				Единица 		= ДокументОснование.Единица;
				Коэффициент		= ДокументОснование.Коэффициент;
				Цена 			= ДокументОснование.Цена;
				Сумма 			= ДокументОснование.Сумма; 
				//--------
				СтавкаНДС = Номенклатура.СтавкаНДС;
				глПересчетТаблЧасти(Контекст,"Цена");
				ЗаполнитьГТД();
				
			КонецЦикла;
			НовыйТипДокумента	= 1;
			Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
			Набран				= 0;
			
			возврат;
		КонецЕсли;
	КонецЕсли;

	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	    
	КодОперации	= глКО.Закупка;
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	ДатаДокВходящий = ДатаДок;
	
	// По умолчанию выписываем в той же валюте и по тому же курсу, что и документ-основание
	Валюта = ДокументОснование.Валюта;
	Курс   = ДокументОснование.Курс;
	                 
	Если (ДокументОснование.Вид() = "ЗаявкаПокупателя") ИЛИ (ДокументОснование.Вид() = "Реализация") Тогда
	                                      
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1  Цикл
		    НоваяСтрока();
			Номенклатура = ДокументОснование.Номенклатура;
			Единица 	 = ДокументОснование.Единица;
			Коэффициент  = ДокументОснование.Коэффициент;
			Количество 	 = ДокументОснование.Количество; 
			Сумма 		 = ДокументОснование.Сумма;
			глПересчетТаблЧасти(Контекст,"Сумма");
			
		КонецЦикла;
		
	иначе	

		Результат = ЗаполнениеПоИтогам();

		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
	
		// Документы оптовой торговли можно оформлять только с оптового склада
		Если (Склад.РозничныйСклад = 1) Тогда
	    	Склад = "";
		КонецЕсли;              

		
	КонецЕсли;
	НовыйТипДокумента	= 1;
	Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
	Набран				= 0;
	
	УчитыватьНП = 0;
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	//Если НазваниеНабораПрав()="Продавец_розница" Тогда
	//	Сообщить("Вы не можете вводить данные документы!");
	//	СтатусВозврата(0);
	//	форма.Закрыть(0);
	//КонецЕсли;
	
	Выгружать=0;
	Выгр=Выгружать;
	Если сокрЛП(глПользователь.Полномочия)<>"Бухгалтер" тогда
		Форма.Выгр.Доступность(0);
	КонецЕсли;
	глЗаполнитьШапку(Контекст, Скопирован, "Покупка");
	
	Если Скопирован = 1 Тогда	
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		//копирование документа - очистим партии, если нужно создадим новые
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			СтараяПартия = Партия;
			Партия="";            
			СоздатьПартию(СтараяПартия,"","");
		КонецЦикла;
		НовыйТипДокумента	= 1;
		Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
		Набран				= 0;
		НеобхКорректировка	= 0;
		ПересчетСуммыВзаиморасчетов();
		// *************** КОНЕЦ ********************************
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметр = "Комиссия" Тогда  
		КодОперации = глКО.ПриемНаРеализацию;
	Иначе
		КодОперации = глКО.Закупка;
	КонецЕсли;                  
	
	ДатаДокВходящий = ДатаДок;
	
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;
	НовыйТипДокумента	= 1;
	Принят_к_учету		= ПолучитьПустоеЗначение(Принят_к_учету);
	Набран				= 0;
	НеобхКорректировка	= 0;
	
	УчитыватьНП = 0;
КонецПроцедуры //ВводНового()    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии()   
	Выгр=Выгружать;
	Если сокрЛП(глПользователь.Полномочия)<>"Бухгалтер" тогда	//нефиг остальным лазить
		Форма.Выгр.Доступность(0);
	КонецЕсли;
	Если НазваниеНабораПрав()="Продавец_розница"  Тогда
		
		//если (Набран=0) Тогда
		//	форма.закрыть(0);
		//	сообщить("Вам нельзя видеть незавершённый документ");
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли;
		Форма.Набран.Доступность(0);
		форма.Принят_к_учету.Доступность(0);
		форма.НеобхКорректировка.Доступность(0);
		Набран	= 1;
	КонецЕсли;
	если (глПользователь<>Автор) и (Набран=1) Тогда
		форма.Количество.Доступность(0);
	КонецЕсли;
	Если ПустоеЗначение(Принят_к_учету)=0 Тогда
		форма.Количество2.Доступность(0);
	КонецЕсли;
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата       		= ДатаДок;
	СтараяФирма   		  	= Фирма;  
	СтарыйДоговор    		= Договор;
	СтарыйКонтрагент 		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
		
	НачальнаяДатаДокумента 	= ДатаДок;                     
	                         
	НачВалюта		= Валюта;
	НачКурс			= Курс;
	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;
	НачФирма		= Фирма;

	Форма.ВидТМЦ		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	СписокДействий = СоздатьОбъект("СписокЗначений");
	
	если НовыйТипДокумента=1 Тогда
		Если Проведен()=1 Тогда
			если Набран=1 Тогда
				Если ПустоеЗначение(Принят_к_учету)=0 Тогда
					Форма.ТолькоПросмотр(1);
					//форма.кнДействия.Доступность(0);
					//Инициализирум список действий по кнопке "Действия"
					СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
					СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
					СписокДействий.ДобавитьЗначение("Структура подчиненности");
					СписокДействий.ДобавитьЗначение("Ввести на основании");
					СписокДействий.ДобавитьЗначение("Перейти в журнал");
				КонецЕсли;
			КонецЕсли;
		Иначе
			//Инициализирум список действий по кнопке "Действия"
			СписокДействий.ДобавитьЗначение("Заполнить по последним приходам");
			СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
			СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
			СписокДействий.ДобавитьЗначение("Структура подчиненности");
			СписокДействий.ДобавитьЗначение("Ввести на основании");
			СписокДействий.ДобавитьЗначение("Перейти в журнал");
			СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
		КонецЕсли;
	Иначе
		//Инициализирум список действий по кнопке "Действия"
		СписокДействий.ДобавитьЗначение("Заполнить по последним приходам");
		СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
		СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
		СписокДействий.ДобавитьЗначение("Структура подчиненности");
		СписокДействий.ДобавитьЗначение("Ввести на основании");
		СписокДействий.ДобавитьЗначение("Перейти в журнал");
		СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	КонецЕсли;
	
		СписокДействий.ДобавитьЗначение("Проставь ГТД как 1-е");	//для ГТД-шек
		СписокДействий.ДобавитьЗначение("Проставь 2-е количество");	//для совместимости
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	УстановкаВидимостиСуммВПодвале();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	
	ОбновитьНадписи();         
	
КонецПроцедуры  //ПриОткрытии()                                                                 
                                    
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	Выгружать=Выгр;
	
	//Признак необходимости отображения в "журнале корректировки"
	Если глСоотвКоличества(Контекст,"Количество","Количество2")=0 Тогда
		Если Выбран()=1 Тогда	//Флаг наличия записанного документа
			док=СоздатьОбъект("Документ");
			НеобхКорректировка=1;
			Если док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент())=1 Тогда	//Значит возможно были корректировки
				Пока док.ПолучитьДокумент()=1 Цикл
					если док.вид()="ПоступлениеТМЦ" Тогда
						если (док.КодОперации=глКО.ЗакупкаКорректировка) и (док.ПометкаУдаления()=0) Тогда
							НеобхКорректировка=0;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе		//Это новый документ
			НеобхКорректировка=1;
		КонецЕсли;
	КонецЕсли;

	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПокупок", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПокупок", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
                           
    // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO)
	 или (КодОперации = глКО.ПриемНаРеализацию) Тогда
		ОтменитьЗапись = 0;
		
		// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
		// после записи всех партий - пропишем их в документ всех сразу
		ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
		ТЗПартии.НоваяКолонка("НомерСтрокиДок");
		ТЗПартии.НоваяКолонка("Партия");
		
		НачатьТранзакцию();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Партия.Выбран()=0) и (Номенклатура.Выбран()=1) Тогда
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки());
					ОтменитьЗапись=1;
					Прервать;
				КонецПопытки;
				
				ТЗПартии.НоваяСтрока();
				ТЗПартии.НомерСтрокиДок=НомерСтроки;
				ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
				
			КонецЕсли;
		КонецЦикла; 
		
		Если ОтменитьЗапись=0 Тогда  
			// запишем созданные партии
			ЗафиксироватьТранзакцию();
			
			// теперь занесем партии в спецификацию нашего документа
			ТЗПартии.ВыбратьСтроки();
			Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
				
				ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
				Партия=ТЗПартии.Партия;
				
			КонецЦикла;
			если (Склад.Магазин=1) или (Склад.Код="00018") Тогда	//Зададим признак отбора в рознице
				проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
				ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.ПоступлениеРозница)+сокрЛП(склад);
				Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
					ЭтоРозница=проба.ТекущийЭлемент();
				Иначе
					проба.новый();
					проба.наименование=ЭР;
					проба.записать();
					ЭтоРозница=проба.ТекущийЭлемент();
				КонецЕсли;
			Иначе
				ЭтоРозница = ПолучитьПустоеЗначение("Справочник.ОтборРознДокум");
			КонецЕсли;
			
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;
	
	//Пропишем данные по ГТД в справочник номенклатуры
	//просьба Иванова Т. 20/07/2008
	ВыбратьСтроки();
	состояние("Обрабатываем ГТД");
	спр	= СоздатьОбъект("Справочник.Номенклатура");
	Пока ПолучитьСтроку()=1 цикл
		если Номенклатура.НомерГТД<>Партия.ГТД тогда
			Если пустоеЗначение(Партия.ГТД)=1 тогда
				продолжить;
			КонецЕсли;
			спр.НайтиЭлемент(Номенклатура);
			Попытка
				спр.НомерГТД	= Партия.ГТД;
				спр.Записать();
				сообщить("Для номенклатуры: "+сокрЛП(спр)+" изменено ГТД. Новое ГТД: "+спр.НомерГТД,"i");
			Исключение
				сообщить("Для номенклатуры: "+сокрЛП(спр)+" изменение ГТД не произведено, т.к. карточка товара открыта","!");
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	ПриЗаписиДокумента(Контекст);               
КонецПроцедуры //ПриЗаписи()       

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	// Если документ новый и в нем были выбраны партии, 
	// то они не нужны и их надо пометить на удаление
	Если Выбран() = 0 Тогда        
		УдалитьВсеПартии();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

//МЭТР Екатерина13.02.2012
Процедура ОбработкаПодбора_Док(Конт, ВыбЗнач, ЕстьНДС, ЕстьНП, ЕстьСкидка)  Экспорт
	
	Перем ТаблЧасть, ТаблицаПодбора;
	
	ТипЗнач		= ТипЗначенияСтр(ВыбЗнач);
	Если ТипЗнач = "СписокЗначений" Тогда
		
		ЕстьВидТМЦ   = ВыбЗнач.Получить("ЕстьВидТМЦ"); // нужно заполнять при подборе вид ТМЦ
		
		ЦенаВподборе = ВыбЗнач.Получить("ЦенаВподборе");
		Если (ЦенаВПодборе = "ИзСправочника") или (ЦенаВподборе = "Розница") Тогда
			ЕстьЦена = 1; // нужно заполнять при подборе цену ТМЦ
		Иначе
			
			// (ЦенаВподборе = "Нет") или (ПустоеЗначение(ЦенаВподборе) = 1)
			ЕстьЦена = 0;
		КонецЕсли;
		ТипЦенТЧ = ВыбЗнач.Получить("ТипЦен");
		
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
	Иначе
		
		// если не список ничего не делаем
		Возврат;
	КонецЕсли;	
	
	// Инициализация переменных
	ФлагиИзТипаЦен = 1;
	ЦенаВклНП      = 1;
	ЦенаВклНДС     = 1;
	УчитыватьНП    = ЕстьНП;
	УчитыватьНДС   = ЕстьНДС;
	
	Если ЕстьЦена = 1 Тогда
		
		// Флаги включения налогов в сумму определяеются типом цен, 
		// кроме случая перемещения из розницы (цены в этом случае берутся из регистра с налогами)
		Если ЦенаВподборе = "Розница" Тогда 
			ФлагиИзТипаЦен = 0;
		КонецЕсли;
		
		ФлагиИзТипаЦен = ФлагиИзТипаЦен * ?(ПустоеЗначение(ТипЦенТЧ) = 1, 0, 1);
		
		Если ФлагиИзТипаЦен  = 1 Тогда 
			
			// Подбирали по ценам с налогами, заданными в типе цен
			ЦенаВклНП  = ТипЦен.ЦенаВклНП;
			ЦенаВклНДС = ТипЦен.ЦенаВклНДС; 
		Иначе // считаем, что подбирали в соответствии с флагами в документе
			
			// По умолчанию считаем, что если нет в документе флагов учета налогов, 
			// то цена со всеми налогами (как в рознице)
			Если глЕстьРеквизитШапки("СуммаВклНП", Вид()) = 1 Тогда
				ЦенаВклНП   = СуммаВклНП;
			КонецЕсли;	
			
			Если глЕстьРеквизитШапки("СуммаВклНДС", Вид()) = 1 Тогда
				ЦенаВклНДС  = СуммаВклНДС;
			КонецЕсли;	
		КонецЕсли;	
		
		// Выкручивать или накручивать налоги надо только если они в документе учитываются
		Если глЕстьРеквизитШапки("УчитыватьНП", Вид()) = 1 Тогда
			УчитыватьНП = ЕстьНП * УчитыватьНП;
		КонецЕсли;	
		
		Если глЕстьРеквизитШапки("УчитыватьНДС", Вид()) = 1 Тогда
			УчитыватьНДС = ЕстьНДС * УчитыватьНДС;
		КонецЕсли;	
		
	КонецЕсли;
	
	ТипЗнач		= ТипЗначенияСтр(ТаблицаПодбора);
	Если ТипЗнач = "ТаблицаЗначений" Тогда
		
		РеквизитыТаблЧастиСтрока = "Единица, НомерСтроки, Партия";
		Если (ЦенаВподборе = "Розница") И (глЕстьРеквизитМнЧ("Цена", Вид()) = 1) Тогда
			РеквизитыТаблЧастиСтрока = РеквизитыТаблЧастиСтрока + ", Цена";
		КонецЕсли;
		
		ВыгрузитьТабличнуюЧасть(ТаблЧасть, РеквизитыТаблЧастиСтрока);
		
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() <> 0 Цикл
			НоменклатураТЧ	= ТаблицаПодбора.Номенклатура;
			ЕдиницаТЧ			= ТаблицаПодбора.Единица;
			
			Если НоменклатураТЧ <> ЕдиницаТЧ.Владелец Тогда
				Сообщить("В подборе выбрана единица другого элемента справочника Номенклатура.
				|Проверьте правильность указания базовой и основной единицы для элемента
				|""" + СокрЛП(НоменклатураТЧ) + """, а также правильность указания единиц измерения 
				|в справочниках единиц и цен для данной позиции номенклатуры." );
				//Валерий МЭТР: тест
				//Сообщить(Номенклатура.Код+"="+Единица.Владелец.Код);				
				Продолжить;
			КонецЕсли;
			
			// ищем номенклатуру среди подобранных
			Поз	= 0; 
			Если (ЦенаВподборе = "Розница") И (глЕстьРеквизитМнЧ("Цена", Вид()) = 1) Тогда
				// Для розницы ищем номенклатуру вместе с ценой
				ТаблЧасть.ВыбратьСтроки();
				Пока ТаблЧасть.ПолучитьСтроку() = 1 Цикл
					Если (ТаблЧасть.Цена = ТаблицаПодбора.Цена) И (ТаблЧасть.Единица = ЕдиницаТЧ)и(ТаблЧасть.Партия.ГТД=ТаблицаПодбора.ГТД)и(ТаблЧасть.Партия.СтранаПроисхождения=ТаблицаПодбора.СтранаП) Тогда
						Поз = ТаблЧасть.НомерСтроки;
						Прервать;  // Нашли
					КонецЕсли;
				КонецЦикла;
			Иначе
				//ТаблЧасть.НайтиЗначение(ЕдиницаТЧ, Поз, "Единица");
				ТаблЧасть.ВыбратьСтроки();
				Пока ТаблЧасть.ПолучитьСтроку() = 1 Цикл
					Если (ТаблЧасть.Единица = ЕдиницаТЧ)и(ТаблЧасть.Партия.ГТД=ТаблицаПодбора.ГТД)и(ТаблЧасть.Партия.СтранаПроисхождения=ТаблицаПодбора.СтранаП) Тогда
						Поз = ТаблЧасть.НомерСтроки;
						Прервать;  // Нашли
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если (Поз > 0) и (глПользователь <> Константа.ПользовательПодборНовойПозиции)Тогда
				
				// нашли, увеличиваем количество
				ПолучитьСтрокуПоНомеру(Поз);
				Количество = Количество + ТаблицаПодбора.Количество;
				
				// Вызывать пересчет имеет смысл только если есть цена
				Если ЕстьЦена = 1 Тогда
					глПересчетТаблЧасти(Конт,"Количество");			
				КонецЕсли;
			Иначе
				
				// не нашли, добавляем новую строку
				НоваяСтрока();
				Если ЕстьВидТМЦ = 1 Тогда
					ВидТМЦ = ТаблицаПодбора.ВидТМЦ;
				КонецЕсли;
				
				Номенклатура = НоменклатураТЧ;
				
				//Для ИмпортЗаявкиИзРозницы2	************************************************************* (начало)
				Если глЕстьРеквизитМнЧ("Количество2",  Вид()) = 1 Тогда
					Количество  	= ТаблицаПодбора.Количество;
					Количество2   	= ТаблицаПодбора.Количество;
				иначеесли глЕстьРеквизитМнЧ("КолСклад",  Вид()) = 1 Тогда
					КолСклад		= ТаблицаПодбора.Количество;
					Производитель	= Номенклатура.Производитель;
					КодЭлемента	= Номенклатура.Код;
				иначеесли глЕстьРеквизитМнЧ("Количество", Вид()) =1 Тогда
					Количество   	= ТаблицаПодбора.Количество;
				КонецЕсли;
				//Для ИмпортЗаявкиИзРозницы2	************************************************************* (конец)
				
				Единица      = ЕдиницаТЧ;
				Коэффициент  = Единица.Коэффициент;    
				
				Если ЕстьНДС = 1 Тогда
					СтавкаНДС = Номенклатура.СтавкаНДС;
				КонецЕсли;	
				
				Если ЕстьНП= 1 Тогда
					СтавкаНП  = Номенклатура.СтавкаНП;
				КонецЕсли;	
				
				Если глЕстьРеквизитМнЧ("РозничнаяНаценка",  Вид()) = 1 Тогда
					Если Конт.РозничнаяНаценка = 0 Тогда
						// получим наценку из розничной цены
						РознНаценка	= 0;
						глВернутьЦену(Номенклатура, Константа.РозничныйТипЦен, ДатаДок, , , , РознНаценка, );
						Если РознНаценка = 0 Тогда
							РозничнаяНаценка	= Константа.РозничныйТипЦен.Процент;
						Иначе
							РозничнаяНаценка	= РознНаценка;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;                                                                     
				СоздатьПартию(СпрПартии,ТаблицаПодбора.ГТД, ТаблицаПодбора.СтранаП);
				
				Попытка
					Если ЕстьЦена = 1 Тогда
					глПересчитатьЦенуВДокументе(Конт, УчитыватьНП, УчитыватьНДС, ТаблицаПодбора.Цена, Конт.Валюта, 
					ЦенаВклНП, ЦенаВклНДС);
						глПересчетТаблЧасти(Конт,"Цена");			
					КонецЕсли; 
				Исключение
					//Сообщить("Не удалось пересчитать цену...");
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Форма.Обновить(0);
	Активизировать("Количество");
	АктивизироватьСтроку();
	
КонецПроцедуры // глОбработкаПодбора()     
//МЭТР Екатерина13.02.2012-
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, нет скидки
	ОбработкаПодбора_Док(Контекст, ВыбЗнач, 1, 1, 0);
	//ОбработкаПодбора_Док(Контекст, ВыбЗнач, 1, 1, 0);
	
	// надо заполнить ГТД по умолчанию по подобранным позициям
	//ЗаполнитьГТД();
	
КонецПроцедуры // ОбработкаПодбора()
                        
//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	//Перем Упаковка,ТекКоличество, Спецификация;
	//Перем ВремТовар, ВремЕдиница, ВремКоличество;
	//Перем ВремЦена, ЕдЦены;
	//
	//Если Событие = "BarCodeValue" Тогда
    //    Если Форма.ТолькоПросмотр() = 0 Тогда
	//		
	//		Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
	//			ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
	//			ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
	//			ТаблицаПодбора.НоваяКолонка("Номенклатура");
	//			ТаблицаПодбора.НоваяКолонка("Единица");
	//			ТаблицаПодбора.НоваяКолонка("Количество", "Число");
	//			ТаблицаПодбора.НоваяКолонка("Цена", "Число");
	//			
	//			ТаблицаПодбора.НоваяСтрока();
	//			ТаблицаПодбора.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
	//			ТаблицаПодбора.Номенклатура = ВремТовар;
	//			ТаблицаПодбора.Единица      = ВремЕдиница;
	//			ТаблицаПодбора.Количество   = ВремКоличество;
	//			ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
	//			
	//			ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
	//			ПараметрыПодбора.ДобавитьЗначение(1              , "ЕстьВидТМЦ");
	//			ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	//			ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
	//			ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
	//		    
	//			глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 0);
	//			
	//			ЗаполнитьГТД();
	//		КонецЕсли;
	//
	//	КонецЕсли;
	//	
	//	// Обработка закончена. Готовы к получению нового штрихкода.
	//	глСканерПосылкаДанных(1);
	//Иначе
	//	глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	//КонецЕсли;
	Scaner.EventNumber	= Число(Данные);
	Карта				= Scaner.ScanData;	//Данные со штрихкода
	Scaner.DeleteEvent();
	Scaner.DataEventEnabled = 1;
	
	Если ПустоеЗначение(Карта)=0 тогда
		если лев(карта,2)="99"	тогда	//Это продавец
			Прод=СоздатьОбъект("Справочник.Пользователи");
			если Прод.ВыбратьЭлементыПоРеквизиту("КартаАвторизации", сокрЛП(карта),0)=1 тогда
				Прод.ПолучитьЭлемент();
				Принят_к_учету	= Прод.ТекущийЭлемент();
			иначе
				сообщить("Не смогли найти соответствие для вашей карты, ЗВОНИТЕ В ОФИС!");
				возврат;
			КонецЕсли;
		иначе
			сообщить("Внимание! Кодировка карты не принадлежит продавцу нашей фирмы!");
			возврат;
		конецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

Процедура ВсеТутЗаполни()
	УдалитьСтроки();
	спр=СоздатьОбъект("Справочник.Номенклатура");
	спр.ВыбратьЭлементы();
	пока спр.ПолучитьЭлемент()=1 Цикл
		если спр.ЭтоГруппа()=0 Тогда
			Состояние("Тек.элем:"+спр.ТекущийЭлемент());
			НоваяСтрока();    
			ВидТМЦ 		= Перечисление.ВидыТМЦ.Товар;
			Номенклатура= спр.ТекущийЭлемент();
			Количество 	= 100; 
			Количество2	= 100;
			Единица 	= Номенклатура.БазоваяЕдиница;
			Коэффициент = 1;
			Цена 		= Номенклатура.ПоследняяЦенаПрихода.Получить(ДатаДок);
			Сумма 		= Цена*Количество;
			СуммаНДС 	= Цена*18/118*Количество;
			СуммаНП 	= 0;
			СтавкаНДС 	= глПользователь.ОсновнаяСтавкаНДС;
			СтавкаНП 	= глПользователь.ОсновнаяСтавкаНП;
		
			СоздатьПартию(,"",""); // Пропишем ГТД и страну по умолчанию
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
		
	

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ    
//
СпрПартии = СоздатьОбъект("Справочник.Партии");

ВидСчетаФактуры="СчетФактураПолученный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 1;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Печатная форма М-4";
ТаблицаПечФорм.Кнопка	= "М-4";
