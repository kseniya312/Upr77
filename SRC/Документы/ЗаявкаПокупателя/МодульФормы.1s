////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем ВнешнийВид;

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

Перем СтарыйТовар;

Перем ТекущийДолг;

Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; // для показа остатков

//Перем __ОстатокНаСкладе, __ОстатокПоФирме , __Резерв , __ТовСкидка; // для показа остатков
Перем __ТовСкидка;

Перем Рег1, Рег2, Рег4, Склад_темп, ТЗ, ТЗ2, КонтРезерв, ТЗ4;	//Работа с остатками

Процедура ВнешнийВид() Далее	
Процедура ВидимостьКолонокТЧ(парам1) Далее
Процедура ПечатьАнализПродажи(СразуНаПринтер = 0,КолЭкз = 1) Далее
Процедура АвтоСклад(Знач ТекущийНомерСтроки = "") Далее
Функция ПокажиОстаткиПартии() Далее
Процедура ПроверитьОстаткиПоЮрЛицам() Далее
    
Процедура ПодтвердитьВEDO()   
	Если Вопрос("Будет отправлено подтверждение в Корус. Продолжить?", "Да+Нет") = "Да" Тогда
		Парам = СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение("ОтправитьЗакрыть", "Команда");
		Парам.ДобавитьЗначение(Контекст, "ДокОтправки");
		
		ОткрытьФормуМодально("Обработка.ПолучениеОтправкаEDI", Парам);
		Предупреждение("Подтверждение отправлено");    
	КонецЕсли;
КонецПроцедуры	

Функция ПолучитьПиктДрЮр()
	Возврат ПиктДрЮр;
КонецФункции	

Процедура ПоКнПроверитьОстаткиПоЮр()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ПроверитьОстаткиПоЮрЛицам();	
	КонецЦикла;	
КонецПроцедуры	
              
Функция НайтиЗаявкуПервоеЮР()   
	ДокРез = "";
	
	Докум = СоздатьОбъект("Документ");
	Докум.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());	
	 
	Пока Докум.ПолучитьДокумент() = 1 Цикл
		Если (Докум.Вид() = "ЗаявкаПокупателя") Тогда
			Если  (Докум.ПервоеЮрЛицо = 1) и (Докум.ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная) Тогда
				ДокРез = Докум.ТекущийДокумент();
				Прервать;     
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДокРез;
КонецФункции	
	
Функция НайтиЗаявкуВтороеЮР()
	ДокРез = "";
	
	Докум = СоздатьОбъект("Документ");
	Докум.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());	
	 
	Пока Докум.ПолучитьДокумент() = 1 Цикл
		Если (Докум.Вид() = "ЗаявкаПокупателя") Тогда
			Если  (Докум.ПервоеЮрЛицо = 0) и (Докум.ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная) Тогда
				ДокРез = Докум.ТекущийДокумент();
				Прервать;     
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ДокРез;
КонецФункции

Процедура ПоКнРазбитьПоЮр()
	Если Выбран()=0 Тогда
		Предупреждение("Документ не записан! Сначала следует записать документ!", 60);
		Возврат;
	КонецЕсли;   
	
	Если Итог("КоличествоДругогоЮрЛица") <> 0 Тогда
		ЗаявкаПервоеЮр 	= НайтиЗаявкуПервоеЮР();
		Если ПустоеЗначение(ЗаявкаПервоеЮр) = 1 Тогда
			Если Модифицированность() = 1 Тогда
				Предупреждение("Документ был изменен! Сначала следует записать документ!", 60);
				Возврат;
			КонецЕсли;            
			Пар = СоздатьОбъект("СписокЗначений");   
			Пар.ДобавитьЗначение(ТекущийДокумент(), "ДокОснование"); 
			Пар.ДобавитьЗначение(1, "ПервоеЮр");
			Пар.ДобавитьЗначение("ЗаписатьИЗакрыть", "Команда");
			ОткрытьФорму("Документ.ЗаявкаПокупателя",Пар, ТекущийДокумент());
		Иначе                  
			//Пар = СоздатьОбъект("СписокЗначений");   
			//Пар.ДобавитьЗначение(ТекущийДокумент(), "ДокОснование"); 
			//Пар.ДобавитьЗначение(1, "ПервоеЮр");     
			//Пар.ДобавитьЗначение("ЗаписатьИЗакрыть", "Команда");
			//ОткрытьФорму(ЗаявкаПервоеЮр,Пар);      
			ОткрытьФорму(ЗаявкаПервоеЮр);
		КонецЕсли;  
		
		
		ЗаявкаВтороеЮр 	= НайтиЗаявкуВтороеЮР();
		Если ПустоеЗначение(ЗаявкаВтороеЮр) = 1 Тогда
			Если Модифицированность() = 1 Тогда
				Предупреждение("Документ был изменен! Сначала следует записать документ!", 60);
				Возврат;
			КонецЕсли;            
			Пар = СоздатьОбъект("СписокЗначений");   
			Пар.ДобавитьЗначение(ТекущийДокумент(), "ДокОснование"); 
			Пар.ДобавитьЗначение(0, "ПервоеЮр");
			Пар.ДобавитьЗначение("ЗаписатьИЗакрыть", "Команда");
			ОткрытьФорму("Документ.ЗаявкаПокупателя",Пар,  ТекущийДокумент());
		Иначе                  
			//Пар = СоздатьОбъект("СписокЗначений");   
			//Пар.ДобавитьЗначение(ТекущийДокумент(), "ДокОснование"); 
			//Пар.ДобавитьЗначение(0, "ПервоеЮр");    
			//Пар.ДобавитьЗначение("ЗаписатьИЗакрыть", "Команда");
			//ОткрытьФорму(ЗаявкаВтороеЮр,Пар);
			ОткрытьФорму(ЗаявкаВтороеЮр);
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры	

Процедура ПроверитьОстаткиПоЮрЛицам()
	Перем Запрос, ТекстЗапроса;
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	флРеверс = 0;
	КоличествоДругогоЮрЛица = 0;
	Если ПустоеЗначение(Проект)  = 0 Тогда 
		//если проект указан Эталона тогда реверс
		Если (Проект.Код = "00031")
		или (Проект.Код = "00030") Тогда
			флРеверс = 1;
			//Возврат;
		КонецЕсли;
	КонецЕсли;	
	   
	//ВыбСкладМол = ВыбСклад.МОЛ;
	ТекНоменклатура = Номенклатура;
	ТекМол = Склад.МОЛ;
	ВыбНачПериода = ТекущаяДата();
	
	Если ВыбНачПериода > ПолучитьДатуТА() Тогда
		ВыбНачПериода = ПолучитьДатуТА();
		//Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура;
	|МОЛ			= Регистр.ПартииНаличие.МОЛ;
	|Партия			= Регистр.ПартииНаличие.Партия;
	|Количество			= Регистр.ПартииНаличие.Количество;
	|Функция ТекОстаток = КонОст(Количество);
	|Группировка Партия без групп;
	|Группировка Номенклатура без групп;
	|Условие(Номенклатура = ТекНоменклатура); 
	|Условие(МОЛ = ТекМол);  
	|"//}}ЗАПРОС
	;   
	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
              
	
	// Валерий МЭТР 
	//перове юр это не Эталон
	ОстатокПероеЮр = 0;
	ОстатокВтороеЮр = 0;
	Пока Запрос.Группировка(1) = 1 Цикл	
		//Если Запрос.ТекОстаток <= 0 Тогда
		//	Продолжить;
		//КонецЕсли;	
		
		Если ПустоеЗначение(Запрос.Партия) = 1 Тогда
			ОстатокПероеЮр = ОстатокПероеЮр + Запрос.ТекОстаток;	
		Иначе
			Если ПустоеЗначение(Запрос.Партия.ПриходныйДокумент) = 1 Тогда
				ОстатокПероеЮр = ОстатокПероеЮр + Запрос.ТекОстаток;
			Иначе
				Если ПустоеЗначение(Запрос.Партия.ПриходныйДокумент.Проект) = 1 Тогда
					ОстатокПероеЮр = ОстатокПероеЮр + Запрос.ТекОстаток;
				Иначе
					Если (Запрос.Партия.ПриходныйДокумент.Проект.Код = "00032")
						//или (Запрос.Партия.ПриходныйДокумент.Проект.Код = "00030") 
						Тогда
						ОстатокВтороеЮр = ОстатокВтороеЮр + Запрос.ТекОстаток;
					Иначе
						ОстатокПероеЮр = ОстатокПероеЮр + Запрос.ТекОстаток;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;   
	           
	Если ОстатокПероеЮр < 0 Тогда ОстатокПероеЮр = 0; КонецЕсли; 
	Если ОстатокВтороеЮр < 0 Тогда ОстатокВтороеЮр = 0; КонецЕсли;
	
	Если флРеверс = 0 Тогда
		Если (Количество > ОстатокПероеЮр) и (ОстатокВтороеЮр > 0) Тогда
			КоличествоДругогоЮрЛица = Мин(Количество - ОстатокПероеЮр,ОстатокВтороеЮр);	
		КонецЕсли;	           
	Иначе
		Если (Количество > ОстатокВтороеЮр) и (ОстатокПероеЮр > 0) Тогда
			КоличествоДругогоЮрЛица = Мин(Количество - ОстатокВтороеЮр,ОстатокПероеЮр);	
		КонецЕсли; 
	КонецЕсли;
	
	Если Количество > (ОстатокПероеЮр + ОстатокВтороеЮр) Тогда
		ПиктДрЮр = 2;
	Иначе
		ПиктДрЮр = 0;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьДокументПартии()
	ТекущаяСтрока  = ТЗ_ОстатокПартии.ТекущаяСтрока(); 
	
	Если ТекущаяСтрока = 0 Тогда
	    Возврат;
	КонецЕсли;
	
	ТекущаяКолонка 	= ТЗ_ОстатокПартии.ТекущаяКолонка();
	ИмяКолонки 		= "Партия";
	Значение = ТЗ_ОстатокПартии.ПолучитьЗначение(ТекущаяСтрока,ИмяКолонки); 
	ОткрытьФормуМодально(Значение.ТекущийДокумент());
КонецПроцедуры

Процедура ОбработкаОбработки()
	Если ВидОбработкиЗаявки.Выбран() = 0 Тогда
	    ВидОбработкиЗаявки = Перечисление.ВидыОбработкиЗаявки.Срочно;
		Форма.ДатаСборкиЗаявки.Видимость(0); 
	иначе
		Если ВидОбработкиЗаявки = Перечисление.ВидыОбработкиЗаявки.Срочно Тогда 
			Форма.ДатаСборкиЗаявки.Видимость(0); 
		иначе 	
			Форма.ДатаСборкиЗаявки.Видимость(1); 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПокажиОстатки() далее


Функция РасчетПроцентаСкидки()
	Если  Итог("СуммаБезСкидки") <>0 Тогда
		Возврат ГлФРМ(Итог("СуммаСкидки")/Итог("СуммаБезСкидки")*100)+"%";
	иначе 	
		Возврат 0;
	КонецЕсли;  
КонецФункции	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//******************************************************************************
// ВыбратьВидОперации(СпособВыбора)
//
// Параметры: 
//  СпособВыбора - вариат выбора для метода ВыбратьЗначение, 
//                 необязательный параметр, по умолчанию - 1.
//
// Возвращаемое значение:
//  Возвращенное значение метода ВыбратьЗначение().
//
// Описание:
//  Служит для запроса у пользователя Вида операции документа
//
Функция ВыбратьВидОперации(СпособВыбора = 1)
	
	// Спросим вид операции
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийЗаявок.Неподтвержденная);
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийЗаявок.НаСклад);
	
	Возврат СписокОпераций.ВыбратьЗначение(ВидОперации,"Выбор вида операции",,60,СпособВыбора);
КонецФункции // ВыбратьВидОперации()
 
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции      

//******************************************************************************
// УправлениеДиалогомРезерв()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	Флаги "Подтвержденный заказ", "Резервировать ТМЦ"
//
// Описание:
//  Управляет доступностью элементов диалога в зависимости от статуса заказа.
//
Процедура УправлениеДиалогомРезерв()
	
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная) Тогда
		ВидРезерва      = 1;
		Форма.ВидРезерва.Доступность(1);
		Форма.ВидРезерва2.Доступность(1);
		Форма.Склад.     Доступность(1);
		Форма.ТекстСклад.Доступность(1);
		Форма.СпособРезервирования.Доступность(1);
		Если Склад.Выбран()=1 Тогда
			//Склад = "";
		КонецЕсли;
	ИначеЕсли (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда
		ВидРезерва      = 2;             
		СпособРезервирования = Перечисление.СпособыРезервирования.Остаток;
		Форма.ВидРезерва.Доступность(0); 
		Форма.ВидРезерва2.Доступность(0);
		Форма.Склад.     Доступность(1);
		Форма.ТекстСклад.Доступность(1);
		Форма.СпособРезервирования.Доступность(0);
	ИначеЕсли (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку) Тогда
		ВидРезерва      = Макс(ВидРезерва,1); // не нулевой
		Форма.ВидРезерва.Доступность(1); 
		Форма.ВидРезерва2.Доступность(1);
		Форма.СпособРезервирования.Доступность(1);
		Форма.Склад.     Доступность(?(ВидРезерва=2,1,0));
		Форма.ТекстСклад.Доступность(?(ВидРезерва=2,1,0));
		Если (Склад.Выбран()= 1)
		и    (ВидРезерва    = 1)
		Тогда // при резервировании по фирме склад не нужен
			//Склад = "";
		КонецЕсли;                              
		Если СпособРезервирования.Выбран() = 0 Тогда                      
			СпособРезервирования = Перечисление.СпособыРезервирования.ЗаказыОстаток;
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогомРезерв()


// МЭТР: наценка
Процедура РасчётНаценки()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		ВыбНоменклатура = Номенклатура;
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(УстановитьЦеныУчета)
		|Обрабатывать НеПомеченныеНаУдаление;
		|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
		|Партия = Регистр.ПартииНаличие.Партия;
		|Сумма = Регистр.ПартииНаличие.СуммаРуб;
		|Количество = Регистр.ПартииНаличие.Количество;
		|Функция КоличествоНаличие = КонОст(Количество);
		|Функция СуммаНаличие = КонОст(Сумма);
		|Группировка Партия Упорядочить по Партия.ПриходныйДокумент.ДатаДок;
		|Условие(Номенклатура = ВыбНоменклатура);
		|Условие(Партия.ПриходныйДокумент.ДатаДок <= ДатаДок);
		|";
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Запрос.Группировка("Партия",1) = 1 Тогда
			
			ЦенаПрихода = ЦенаСоСкидкой;
			Если (Запрос.Количество > 0) И (Запрос.Сумма > 0) Тогда
				ЦенаПрихода = Запрос.Сумма / Запрос.Количество;
				КолвоНаценка = КолвоНаценка + 1;
			КонецЕсли;
			Если ЦенаПрихода > 0 Тогда
				ЦенаПродажи = ЦенаСоСкидкой;
			    Базовая = ЦенаПрихода; 
			    X = (ЦенаПродажи*100)/Базовая;
			    Процент = ((X/100)-1)*100;
				Наценка = Процент;
			Иначе
				Наценка = 0;
			КонецЕсли;
			
			СуммаНаценка = СуммаНаценка + Наценка;			
			//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
			Сообщить(НОменклатура.Наименование + " цена пр. " + ЦенаПрихода + "цена " + ЦенаСоСкидкой + " " +Формат(Запрос.Партия.ПриходныйДокумент,""));
			
		КонецЕсли;  		
		
	КонецЦикла;
	Сообщить("Наценка " + СуммаНаценка);            
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчётНаценкиПоПоследнейЗакупке()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		__Ном = Номенклатура;
		
		НомСтроки = НомСтроки + 1;
		             
		__Ном.ИспользоватьДату(ДатаДок);
		
		Валюта1 = Валюта;
		Курс1	= Курс; 

		Валюта2 = Константа.ВалютаУпрУчета;
		Валюта2.ИспользоватьДату(ДатаДок);
		Курс2	= Валюта2.Курс; 
		
		ЦенаЗакупки = 	глПересчет (__Ном.ПоследняяЦенаПрихода,Валюта2,Курс2,Валюта1,Курс1);
		
		ЦенаРозничная = Цена;//?(ЦенаСоСкидкой = 0, Цена, ЦенаСоСкидкой);
		       
		НаценкаРасч 	= ЦенаРозничная - ЦенаЗакупки;       
		Наценка 		= НаценкаРасч / (ЦенаРозничная-НаценкаРасч)*100;
		
		КолвоНаценка = КолвоНаценка + 1;
		
		СуммаНаценка = СуммаНаценка + Наценка;			
		//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
		Сообщить(Номенклатура.Наименование + " цена пр. " + ЦенаЗакупки + " цена " + ЦенаРозничная);
		КонецЦикла;
	Сообщить("Наценка " + СуммаНаценка);            
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//

Процедура УправлениеВидимостью()
	
	Если ВнешнийВид=1 Тогда	//только тогда - эта фигня имеет смысл
		Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
			Форма.СуммаНП	.Видимость(УчитыватьНП);
			Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
			Форма.СуммаНДС	.Видимость(УчитыватьНДС);
			Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
			Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
				Форма.Всего.Видимость(0);
			Иначе
				Форма.Всего.Видимость(1);
			КонецЕсли;    
		
			Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
			Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
 	              
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Если ДокОснование.Выбран() = 1 Тогда
		Если (ДокОснование.Вид()<>"ЗаявкаСССервис") и (ДокОснование.Вид()<>"ЗаявкаКлиентаРозница") и (ДокОснование.Вид()<>"ПеремещениеТМЦ_Розница") тогда
			Если ДокОснование.ВидОперации = ВидОперации Тогда
				Заголовок = Заголовок + " (корр.)";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                                              
	
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                      
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;

	//Форма.РамкаВзаимПодвал.Видимость(Флаг);
	//Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	Перем ОстатокНаСкладе, ОстатокПоФирме , Резерв , ТовСкидка; // для показа остатков
	Перем ОстатокНаСкладеТранзит, ОстатокПоФирмеТранзит; // для показа остатков по транзиту
	Перем ОстатокНаСкладеОпт2, ОстатокПоФирмеОпт2; // для показа остатков по транзиту

	Если СтарыйТовар = Номенклатура тогда
		ИнфоТекст=СокрЛП(Номенклатура.Наименование);
		Возврат(ИнфоТекст);
	иначе
		СтарыйТовар=Номенклатура;
	КонецЕсли;
	
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	                                
	ТовСкидка = Номенклатура.Родитель.Скидка.Получить(ДатаДок);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Пост. "+СокрЛП(Номенклатура.Производитель.Наименование);
	КонецЕсли;
	


    ПокажиОстатки();

	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только на оптовый склад!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		Скидка	= Контрагент.ОсновнаяСкидка; 		 	
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();   
		УстановкаВидимостиСуммВПодвале(); 
		
		//++Ерошенко 03.05.2007
		ПроверитьКонтрагентаВДокументе(Контрагент); 
		//--Ерошенко
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()      
                                            
//******************************************************************************
// ПриИзмененииВидРезерва()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вид Резерва (переключатель)
//
// Описание:
//  Производит все необходимые пересчеты при изменении вида резерва.
//
Процедура ПриИзмененииВидРезерва()
	
	УправлениеДиалогомРезерв();
	
КонецПроцедуры // ПриИзмененииВидРезерва()

//*****************************************************************************
// ВыборЦен()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	глПересчетТаблЧасти(Контекст,,);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();  
	Форма.Обновить(0);
	                               
	
	
КонецПроцедуры	//ВыборЦен()     
//Пересчитать документ после изменения мультиплексора
Процедура ПоКнопкеМультик()
	Перем КонтекстДокумента;
	  Если Мульт=1 тогда
	  	Мультик=1;
	  иначе 
	  	Мультик=0;
	  конецЕсли;
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	глПересчитатьСкидки(Контекст);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();  
	Форма.Обновить(0);
	
КонецПроцедуры	//ПоКнопкеМультик()     
                               
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	Перем ЗарезервированниеТовары, ТекСтрокаИтогов;
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	ВидОсн      = ДокОснование.Вид();
	
	Если ВидОсн = "ЗаявкаПокупателя" Тогда	//Стандартная схема
		//посмотрим отработанные заявки***********************************************************
		ТЗ 	= СоздатьОбъект("ТаблицаЗначений");
		
		ТЗОтгруженоИспользовано = СоздатьОбъект("ТаблицаЗначений"); 
		ТЗОтгруженоИспользовано.НоваяКолонка("Номенклатура");
		ТЗОтгруженоИспользовано.НоваяКолонка("Отгружено");
		
		Рег	= СоздатьОбъект("Регистр.ЗаявкиНаСклад");
		Рег.УстановитьФильтр(ДокОснование,,);
		Рег.ВыгрузитьИтоги(ТЗ,1,1);
		ТЗ.Свернуть("Номенклатура","КоличествоВОбработке,КоличествоОбработано");  
		
		Рег3	= СоздатьОбъект("Регистр.ЗаявкиНаСкладОтгружено");
		//****************************************************************************************
		
		Меню=СоздатьОбъект("СписокЗначений");
		Меню.ДобавитьЗначение("Отгрузка","Использовать колонку ""Отгрузка""");
		Меню.ДобавитьЗначение("Заказ","Использовать колонку ""Заказ""");
		Меню.ДобавитьЗначение("Количество","Использовать колонку ""Количество""");
		
		
		КолонкаКоличества = "";
		Если Меню.ВыбратьЗначение(КолонкаКоличества,,,10,1)>0 Тогда
			
		Иначе
			Возврат "Выберите колонку для заполнения количества.";
		КонецЕсли;
		
		Проект 		= ДокОснование.Проект;
		РегОбщ    	= СоздатьОбъект("Регистры");
		РегЗаявки 	= РегОбщ.Заявки;
		
		// заполняем недополученными по заявке товарами
		РегЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ДокОснование, 1);
		
		// если нужно, то выполним временный расчет регистра
		Если Выбран() = 0 Тогда //Новый документ
			Если ДатаДок < ПолучитьДатуТА() Тогда // выписываемый задним числом
				РегЗаявки.ВременныйРасчет();
				РегОбщ.РассчитатьРегистрыПо(ДатаДок);
			КонецЕсли;
		Иначе // Сохраненный документ
			Если СравнитьТА() < 1 Тогда // Позиция не больше ТА
				РегЗаявки.ВременныйРасчет();
				РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
			КонецЕсли;
		КонецЕсли;
		
		//РегЗаявки.ВыгрузитьИтоги(ЗарезервированниеТовары, 1, 1);
		//ЗарезервированниеТовары.Свернуть("Номенклатура", "КоличествоРасход,СтоимостьРасход");
		
		ВалОстатков = Договор.ВалютаВзаиморасчетов;
		
		// При заполнении на основании Заявки цены, суммы и скидки надо брать из основания
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		 
		//ТаблицаОтгруженоИспользовано = СоздатьОбъект("ТаблицаЗначений");
	    //ТаблицаОтгруженоИспользовано.НоваяКолонка("Номенклатура");
		//ТаблицаОтгруженоИспользовано.НоваяКолонка("КоличествоИспользовано");
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			
			// Есть остатки по этой строке? 
			//ТекСтрокаИтогов = 0;
			//Если ЗарезервированниеТовары.НайтиЗначение(ТаблицаДокумента.Номенклатура, ТекСтрокаИтогов, "Номенклатура") = 0 Тогда // нет остатков
			//	Продолжить;
			//КонецЕсли;
			//
			//КоличествоРасход = ЗарезервированниеТовары.ПолучитьЗначение(ТекСтрокаИтогов, "КоличествоРасход");
			//Если КоличествоРасход = 0 Тогда // нет остатков
			//	Продолжить;
			//КонецЕсли;
			
			Если КолонкаКоличества = "Количество" Тогда
				КоличествоПроверки = ТаблицаДокумента.Количество;
			ИначеЕсли КолонкаКоличества = "Заказ" Тогда
				КоличествоПроверки = ТаблицаДокумента.Заказ2;
			ИначеЕсли КолонкаКоличества = "Отгрузка"  Тогда
				КоличествоПроверки = ТаблицаДокумента.Отгрузка2;
			КонецЕсли;
			
			х = 0;  
			ВсегоОтгружено	  = 0;
			ВсегоОтгружено	  = Рег3.СводныйИтог(ДокОснование,ТаблицаДокумента.Номенклатура,,"КоличествоОтгружено");
			
			Если ТЗОтгруженоИспользовано.НайтиЗначение(ТаблицаДокумента.Номенклатура,х,"Номенклатура") = 1 Тогда
				ВсегоОтгружено = ВсегоОтгружено - ТЗОтгруженоИспользовано.ПолучитьЗначение(х,"Отгружено");
			КонецЕсли;
			
			х = 0;
			Если ТЗ.НайтиЗначение(ТаблицаДокумента.Номенклатура,х,"Номенклатура") = 1 Тогда
				ТекущееКоличество = ТаблицаДокумента.Количество - ТЗ.ПолучитьЗначение(х,"КоличествоВОбработке") - ТЗ.ПолучитьЗначение(х,"КоличествоОбработано") - ВсегоОтгружено;
				ТекущееКоличество = Мин(КоличествоПроверки,ТекущееКоличество);
				
				НужноПогасить = ТЗ.ПолучитьЗначение(х,"КоличествоВОбработке") + ТЗ.ПолучитьЗначение(х,"КоличествоОбработано");
				
				Если ТаблицаДокумента.Количество >= НужноПогасить Тогда
					 ТЗ.УстановитьЗначение(х,"КоличествоВОбработке",0);
					 ТЗ.УстановитьЗначение(х,"КоличествоОбработано",0);
				Иначе
			         Если ТаблицаДокумента.Количество >= ТЗ.ПолучитьЗначение(х,"КоличествоОбработано") Тогда
					 	ТЗ.УстановитьЗначение(х,"КоличествоОбработано",0);
					 	ТЗ.УстановитьЗначение(х,"КоличествоВОбработке",ТаблицаДокумента.Количество - ТЗ.ПолучитьЗначение(х,"КоличествоОбработано"));
					 Иначе
					 	ТЗ.УстановитьЗначение(х,"КоличествоВОбработке",0);
					 	ТЗ.УстановитьЗначение(х,"КоличествоОбработано",ТаблицаДокумента.Количество - ТЗ.ПолучитьЗначение(х,"КоличествоВОбработке"));
					 КонецЕсли;	
			    КонецЕсли;
				
				Если ТекущееКоличество <= 0 Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				ТекущееКоличество = КоличествоПроверки - ВсегоОтгружено;				
			КонецЕсли;
			
			ТЗОтгруженоИспользовано.НоваяСтрока();
			ТЗОтгруженоИспользовано.Номенклатура 	= ТаблицаДокумента.Номенклатура;
			ТЗОтгруженоИспользовано.Отгружено 		= ВсегоОтгружено; 
			ТЗОтгруженоИспользовано.Свернуть("Номенклатура","Отгружено");
			
			Если ТекущееКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			СтавкаНДС	= ТаблицаДокумента.СтавкаНДС;
			СтавкаНП	= ТаблицаДокумента.СтавкаНП;
			Номенклатура= ТаблицаДокумента.Номенклатура;
			Единица		= ТаблицаДокумента.Единица;
			Коэффициент	= ТаблицаДокумента.Коэффициент;
			Если ДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
				Если ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку Тогда
					
					Количество = ТаблицаДокумента.ВНаличии;
				ИначеЕсли ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
					
					Количество		= ТекущееКоличество; 
					ВНаличии    	= ТекущееКоличество;
					КоличествоФакт 	= ТекущееКоличество;
				иначе 
					Количество	= ТаблицаДокумента.Количество; 
				КонецЕсли;
			иначе 
				Количество	= ТаблицаДокумента.Количество; 
			КонецЕсли;
			
			Цена		= глПересчет(ТаблицаДокумента.Цена, ДокОснование.Валюта, ДокОснование.Курс, Валюта, Курс);
			ВремСумма	= ТаблицаДокумента.Сумма * Количество / ТаблицаДокумента.Количество; // для учета скидок в документе основании
			Сумма		= глПересчет(ВремСумма, ДокОснование.Валюта, ДокОснование.Курс, Валюта, Курс);
			Коммент 	= ТаблицаДокумента.Коммент;
			//глПересчетТаблЧасти(Контекст,"Сумма");
		КонецЦикла; // по строкам основания
		Комментарий = ДокОснование.Комментарий;
		ОснованиеСумма = ДокОснование.Итог("Сумма");
		СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, ДокОснование.СуммаВзаиморасчетов * Итог("Сумма") / ОснованиеСумма);
		
		Если КоличествоСтрок() = 0 Тогда
			Возврат "Заявка покупателя складом обработана полностью!";
		КонецЕсли;
	иначеесли (ВидОсн = "ЗаявкаСССервис") или (ВидОсн = "ЗаявкаКлиентаРозница") или (ВидОсн = "ПеремещениеТМЦ_Розница") тогда	//Заполним по Заявке из СС_Сервиса
		Если ВидОсн = "ПеремещениеТМЦ_Розница" Тогда
			Склад = ДокОснование.Склад;
		КонецЕсли;
		Если ВидОсн = "ЗаявкаКлиентаРозница" Тогда
			Склад = Константа.СкладОтделаПродаж2
		КонецЕсли;
		
		//посмотрим отработанные заявки***********************************************************
		ТЗ 	= СоздатьОбъект("ТаблицаЗначений");
		Рег	= СоздатьОбъект("Регистр.ЗаявкиНаСклад");
		Рег.УстановитьФильтр(ДокОснование,,);
		Рег.ВыгрузитьИтоги(ТЗ,1,1);
		ТЗ.Свернуть("Номенклатура","КоличествоВОбработке,КоличествоОбработано");
		
		Рег3	= СоздатьОбъект("Регистр.ЗаявкиНаСкладОтгружено");
		
		//****************************************************************************************
		
		ДокОснование.ВыбратьСтроки();
		УдалитьСтроки();
		Пока ДокОснование.ПолучитьСтроку()=1 Цикл
			Если (ВидОсн = "ЗаявкаКлиентаРозница") или (ВидОсн = "ПеремещениеТМЦ_Розница") Тогда
				Если ВидОсн = "ЗаявкаКлиентаРозница" Тогда
					Если ДокОснование.ОтгружаетсяСоСклада <>  Перечисление.ВариантыОтгрузки.СЦентральногоСклада Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				х = 0;
				Если ТЗ.НайтиЗначение(ДокОснование.Номенклатура,х,"Номенклатура") = 1 Тогда
					ВсегоОтгружено	 	= Рег3.СводныйИтог(ДокОснование,ДокОснование.Номенклатура,,"КоличествоОтгружено");
					ТекущееКоличество = ДокОснование.Количество - ТЗ.ПолучитьЗначение(х,"КоличествоВОбработке") - ТЗ.ПолучитьЗначение(х,"КоличествоОбработано") - ВсегоОтгружено;
					Если ТекущееКоличество <= 0 Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					ТекущееКоличество = ДокОснование.Количество;
				КонецЕсли;
			Иначе
				ТекущееКоличество = ДокОснование.Количество;
			КонецЕсли;
			
			НоваяСтрока();
			Номенклатура	= ДокОснование.Номенклатура;
			//Количество		= ДокОснование.Количество;
			Количество		= ТекущееКоличество;
			КоличествоФакт 	= ТекущееКоличество;
			Единица			= ДокОснование.Единица;
			Коэффициент		= ДокОснование.Коэффициент;
			Цена			= ДокОснование.Цена;
			Сумма			= ДокОснование.Сумма 			* Количество / ДокОснование.Количество;
			
			Если ВидОсн = "ЗаявкаКлиентаРозница" Тогда
				СуммаСкидки		= ДокОснование.СуммаСкидки 		* Количество / ДокОснование.Количество;
				СуммаБезСкидки	= ДокОснование.СуммаБезСкидки 	* Количество / ДокОснование.Количество;
			КонецЕсли;
			
			СтавкаНДС		= ДокОснование.СтавкаНДС 		* Количество / ДокОснование.Количество;
			СуммаНДС		= ДокОснование.СуммаНДС 		* Количество / ДокОснование.Количество;
			СтавкаНП		= ДокОснование.СтавкаНП 		* Количество / ДокОснование.Количество;
			СуммаНП			= ДокОснование.СуммаНП 			* Количество / ДокОснование.Количество;
			Коммент			= ДокОснование.Коммент;
		КонецЦикла; 
		Комментарий = ДокОснование.Комментарий;
	иначе	//Тут говорим - что это не наш документ основания
		Возврат "Неверный вид документа - основания!";
	КонецЕсли;
	
	Возврат "";	// успешное завершение
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			УправлениеДиалогомРезерв();
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию(); 
		УправлениеДиалогомРезерв();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		
		Если СтарыйДоговор <> Договор Тогда
		    // при изменении договора могла измениться глубина кредита
			ДатаОплаты		= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
			СтарыйДоговор	= Договор;
		КонецЕсли;
		
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()
                                           
//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Если ВыбратьВидОперации() =1 Тогда
		УправлениеДиалогомРезерв();
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	    
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос("Заполнить по документу - основанию (перед заполнением табличная часть будет очищена)?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки();                                 
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
	Форма.Обновить(0);
	
КонецПроцедуры //ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	
	
	глПодбор(Контекст, Параметры);
	
	//ПолучитьСтрокуПоНомеру(КоличествоСтрок());
	//Активизировать("Количество"); 

КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// Секция ЗаголовокСчета
	ПечФирма = ""; Банк = ""; Счет = ""; БИК = ""; СчетБанка = "";
    
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "БС";
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));	
	Если Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп"; 
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	КонецЕсли;
	
	Если ВыбЮЛ = "БС" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(БанковскийСчет, "БанковскийСчет");
		Параметры.ДобавитьЗначение(1, "Режим");
		глРеквизитыПлательщикаПолучателя(Параметры);
		ПечФирма 	= Параметры.Получить("Результат");
		Банк		= Параметры.Получить("СтрокаБанка");
		Счет		= Параметры.Получить("РасчетныйСчет");
	    БИК			= Параметры.Получить("БИК");
		СчетБанка	= Параметры.Получить("КоррСчет");
		
		// Секция Поставщик
		Поставщик = "ИНН " +СокрЛП(Фирма.ЮрЛицо.ИНН) + " " +
		            СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) + " " +
					глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес); 					

	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ, Параметры);
		
		ПечФирма = Параметры.Получить("ПолноеНаименованиеФирмы");
		Банк = Параметры.Получить("Банк");
		Счет = Параметры.Получить("РасчСчет");
	    БИК	= Параметры.Получить("БИК");
		СчетБанка = Параметры.Получить("КоррСчет");
		
		Поставщик = "ИНН " + Параметры.Получить("ИНН") + "/" + Параметры.Получить("КПП") + " " + 
							СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы")) + " " +
							СокрЛП(Параметры.Получить("ПредставлениеЮрАдресаФирмы"));			
			
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС"
					
	// Секция Покупатель
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Покупатель = СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
		Если ПустоеЗначение(Контрагент.ЮрФизЛицо.ИНН) = 0 Тогда
		    Покупатель = "ИНН " + СокрЛП(Контрагент.ЮрФизЛицо.ИНН) + " " + Покупатель;
		КонецЕсли;
	Иначе
		Покупатель = "";
	КонецЕсли;

	
	ИсхТабл.ВывестиСекцию("Шапка");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Шапка");
	
	// выводим табличную часть
	НомСтроки = 0;
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
	
	// секция ИтогоНДС
	Если УчитыватьНДС = 1 Тогда
		СуммаНДСИтог = Итог("СуммаНДС");
		Если СуммаВклНДС = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНДСИтог;
		КонецЕсли;
	КонецЕсли;
		
	// секция ИтогоНП
	Если УчитыватьНП = 1 Тогда
		СуммаНПИтог = Итог("СуммаНП");
		Если СуммаВклНП = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНПИтог;
		КонецЕсли;
	КонецЕсли;
    
	Если ВыбЮЛ = "Эксп" Тогда	
	    СуммаНДСИтог = 0;
	КонецЕсли;
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подвал");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//		ВыборФормы =
//   	1, если перед печатью необходимо выбрать печатную форму, 
//		0, если надо напечатать, используя последнюю выбранную
//
// Описание:
// 	Вызывается по кнопке "Печать" и по кнопке "Выбор печатной формы" (небольшая 
// 	кнопка рядом с кнопкой печати)
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)

	// проверим полномочия печати непроведенных документов
	НазваниеПечФормы = ""; 
	НазваниеПечФормы = ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Название");
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;      
	
	Если (ИмяПользователя()="ОптМенеджер4") и (НазваниеПечФормы = "Анализ") Тогда
	    сообщить("У вас нет прав на вывод данной печатной формы");
		Форма.Закрыть(0);
		возврат;
	КонецЕсли;
	
	Если (НомерТекущейФормы = 1)  //Тогда
	//	Печать(СразуНаПринтер, КолЭкз);
	//ИначеЕсли (НомерТекущейФормы = 2) 
		и (НазваниеПечФормы = "Анализ") Тогда
		ПечатьАнализПродажи(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьТаблИтогов(ТаблИтогов, Фирма)
	
	Если (Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме) 
	или (Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать) Тогда
		Возврат; // при такой настройке считаем ТЗ уже готовой к списанию
	КонецЕсли;
	
	// В цикле по ТЗ заменим значения всех фирм, кроме переданной, на пустое значение,
	// а для переданной, пустое значение значение проставим для отрицательных остатков
	ПустаяФирма = ПолучитьПустоеЗначение("Справочник.Фирмы");
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		Если ТаблИтогов.Фирма <> Фирма Тогда
			ТаблИтогов.Фирма = ПустаяФирма;
		ИначеЕсли ТаблИтогов.Количество < 0 Тогда
			ТаблИтогов.Фирма = ПустаяФирма;
		КонецЕсли;
	КонецЦикла;
	
	// Свернем таблицу по фирме и партии
	ТаблИтогов.Свернуть("Фирма,Партия,СтатусПартии,ДатаПартии,Номенклатура,МОЛ,Договор,ДокументПередачи,ДокПартии,ЦенаПрод", 
	"Количество,СуммаУпр,СуммаРуб,СуммаБезНДС,ПродСтоимость");
	
	// В цикле по ТЗ заменим для всех отрицательных остатков значения пустых фирм, на переданное значение
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		Если ТаблИтогов.Количество < 0 Тогда
			ТаблИтогов.Фирма = Фирма;
		КонецЕсли;
	КонецЦикла;
	
	// Свернем таблицу по фирме и партии
	ТаблИтогов.Свернуть("Фирма,Партия,СтатусПартии,ДатаПартии,Номенклатура,МОЛ,Договор,ДокументПередачи,ДокПартии,ЦенаПрод", 
	"Количество,СуммаУпр,СуммаРуб,СуммаБезНДС,ПродСтоимость");
	
КонецПроцедуры // ПодготовитьТаблИтогов()

//======================================================================
Процедура ПечатьАнализПродажи(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	Перем ТаблИтогов; // ТЗ, в которую выгружаем итоги       
	Перем ОстПогКоличество, ОстПогСумма, ОстПогСуммаПродУпр, ОстПогСуммаПродРуб, ОстПогСуммаНДС, ОстПогСуммаНП;
	
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	ИсхТабл.ИсходнаяТаблица("АнализПродажи");
	ИсхТабл.ВывестиСекцию("Шапка");
	ТаблСписПартий=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартий.НоваяКолонка("Фирма");
	ТаблСписПартий.НоваяКолонка("МОЛ");
	ТаблСписПартий.НоваяКолонка("Номенклатура");
	ТаблСписПартий.НоваяКолонка("СтатусПартии");
	ТаблСписПартий.НоваяКолонка("Партия");
	ТаблСписПартий.НоваяКолонка("ДатаПартии");
	ТаблСписПартий.НоваяКолонка("ЦенаПрод");
	ТаблСписПартий.НоваяКолонка("Количество");
	ТаблСписПартий.НоваяКолонка("СуммаУпр");
	ТаблСписПартий.НоваяКолонка("СуммаРуб");
	ТаблСписПартий.НоваяКолонка("СуммаБезНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНДС");
	ТаблСписПартий.НоваяКолонка("СтавкаНП");
	ТаблСписПартий.НоваяКолонка("СуммаПрод");
	ТаблСписПартий.НоваяКолонка("СуммаПродРуб");
	ТаблСписПартий.НоваяКолонка("СуммаПродУпр");
	ТаблСписПартий.НоваяКолонка("СуммаДокРуб");
	ТаблСписПартий.НоваяКолонка("НДСПрод");
	ТаблСписПартий.НоваяКолонка("НППрод");
	ТаблСписПартий.НоваяКолонка("ДоговорКомитента");
	ТаблСписПартий.НоваяКолонка("НомерСтрокиДокумента");
	ТаблСписПартий.НоваяКолонка("СкидкаРуб");
	
	ТаблСписПартийКом=СоздатьОбъект("ТаблицаЗначений");
	ТаблСписПартийКом.Загрузить(ТаблСписПартий); // копируем структуру
	
	Регистры = СоздатьОбъект("Регистры");
	//РегистрУчета = ВремПартии.Вид();      
	//
	//Если РегистрУчета="ПартииНаличие" Тогда
		РегПартии	= Регистры.ПартииНаличие;
		ВремПартии  = Регистры.ПартииНаличие;
		//РегПартии.ВременныйРасчет(1);
		//Регистры.РассчитатьРегистрыПо(ТекущийДокумент(),);
	//Иначе    
	//	РегПартии	= Конт.Регистр.ПартииОтданные;
	//КонецЕсли;
	
	//Фирма		    = СписокПараметров.Получить("Фирма");
	//Склад			= СписокПараметров.Получить("Склад");
	//Договор			= СписокПараметров.Получить("Договор");
	//КодОперации		= СписокПараметров.Получить("КодОперации"); 
	
	//Если РегистрУчета="ПартииНаличие" Тогда
		МОЛ			= Склад.МОЛ;
	//КонецЕсли;
	
	МетодРасчетаСебестоимости = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок);
	Если ПустоеЗначение(МетодРасчетаСебестоимости)=1 Тогда
		//глНеПроводить(Конт,"Не определен метод расчета себестоимости для юр. лица """+Фирма.ЮрЛицо.Наименование+"""");
		Сообщить("Не определен метод расчета себестоимости для юр. лица """+Фирма.ЮрЛицо.Наименование+"""");
		Возврат;
	КонецЕсли;
	
	Если МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.FIFO Тогда
		ЗнакСортировки="+";
	Иначе     
		ЗнакСортировки="-";
	КонецЕсли;
	
	СуммаИтог 			= 0;
	ПрибыльИтог 		= 0;
	НомСтроки 			= 0;
	ПрибыльИтогПроцент  = 0;
	СебестоимостьИтог 	= 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку()=1 Цикл
		
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;
		
		ОстПогКоличество	= Количество;
		ОстПогСуммаПрод		= Сумма;
				
		ВремПартии.УстановитьЗначениеФильтра("Номенклатура",Номенклатура,1);
				
		ВремПартии.ВыгрузитьИтоги(ТаблИтогов,1,1);     
		
		ТаблИтогов.НоваяКолонка("ДокПартии", "Документ");
		ТаблИтогов.ВыбратьСтроки();
		Пока ТаблИтогов.ПолучитьСтроку() = 1  Цикл
			ТаблИтогов.ДокПартии = ТаблИтогов.Партия.ПриходныйДокумент;
		КонецЦикла;
		
		// Подготовим таблицу итогов взависимости от настройки контроля остатков
		ПодготовитьТаблИтогов(ТаблИтогов, Фирма);
		
		ТаблИтогов.Сортировать("-Фирма,"+ЗнакСортировки+"ДатаПартии,"+ЗнакСортировки+"ДокПартии",1);
		
		Партия 				= "";
		КоличествоПартии 	= 0;
		Себестоимость 		= 0;
		Прибыль				= 0;
		ПрибыльПроцент      = 0;
		
		ТаблИтогов.ВыбратьСтроки();
		Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ОстПогКоличество>0) Цикл
			//Партия 				= "";
			//КоличествоПартии 		= 0;
			//Себестоимость 		= 0;
			//Прибыль				= 0;
			
			Если ТаблИтогов.МОЛ <> МОЛ Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТаблИтогов.Количество<=0 Тогда
				Продолжить;
			КонецЕсли;                                    
			
			Если ТаблИтогов.Количество >= ОстПогКоличество Тогда 
				// остаток партии больше, чем нам надо списать
				КоэффСписания = ОстПогКоличество / ТаблИтогов.Количество;
			Иначе
				КоэффСписания=1;
			КонецЕсли;
			
			//измерения
			//НомСтроки 			= НомСтроки + 1;
			//Партия 				= ТаблИтогов.Партия.ПриходныйДокумент;
			КоличествоПартии 	= КоличествоПартии 	+ Окр(ТаблИтогов.Количество	*КоэффСписания,5,1);
			Себестоимость 		= Себестоимость 	+ Окр(ТаблИтогов.СуммаРуб	*КоэффСписания,2,1);
			ЦенаЗакупки			= Себестоимость 	/ КоличествоПартии;
			Если СуммаСкидки <> 0 Тогда
				Если Количество <> 0 Тогда
					ЦенаАнализа 		= Цена - СуммаСкидки / Количество;
				Иначе
					ЦенаАнализа 		= 0;
				КонецЕсли;	
				СуммаПродажи		= ЦенаАнализа 		* КоличествоПартии;
			Иначе 
				ЦенаАнализа 		= Цена;
				СуммаПродажи		= ЦенаАнализа		* КоличествоПартии;
			КонецЕсли;
			Прибыль				= СуммаПродажи - Себестоимость;
			//СуммаИтог 		= СуммаИтог 	+ СуммПродажи;
			//ПрибыльИтог 		= ПрибыльИтог 	+ Прибыль;
			
			//ИсхТабл.ВывестиСекцию("Строка");
			
			КоэффПогашения = КоличествоПартии/ОстПогКоличество;
			
			// корректировка остатка продажной стоимости к списанию
			ОстПогКоличество = Количество - КоличествоПартии;
		КонецЦикла; // по строкам ТаблИтогов
		
		НомСтроки 			= НомСтроки + 1;
		
		Если КоличествоПартии > 0 Тогда
			СуммаИтог 			= СуммаИтог 		+ СуммаПродажи;  
			СебестоимостьИтог   = СебестоимостьИтог + Себестоимость;
			ПрибыльИтог 		= ПрибыльИтог 		+ Прибыль;
			Если Себестоимость > 0 Тогда
				ПрибыльПроцент      = СокрЛ(Формат(СуммаПродажи * 100 / Себестоимость - 100,"Ч12.3")+"%");
			Иначе
				ПрибыльПроцент      = СокрЛ(Формат(0,"Ч12.3")+"%");
			КонецЕсли;	
			ИсхТабл.ВывестиСекцию("Строка");
		КонецЕсли;
		
		Если ОстПогКоличество>0 Тогда
			// значит мы расходуем Номенклатуру
			// а Партии, которые надо погашать исчерпаны,
			// значит надо выдать сообщение об этом инциденте
			// и записать текущий документ как Партию с отриц. знаком
			Сообщить("При анализе партий ТМЦ по "+ТекущийДокумент()+" от "+ДатаДок+" по ТМЦ "
				+СокрЛП(Номенклатура)+" не распределилось по партиям "+ОстПогКоличество+" "+Номенклатура.БазоваяЕдиница);
		КонецЕсли;
		
	КонецЦикла; // по строкам ТаблНоменклатуры
	
	// секция Подписи 
	ПрибыльИтогПроцент      = СокрЛ(Формат(СуммаИтог * 100 / СебестоимостьИтог - 100,"Ч12.3")+"%");
	ИсхТабл.ВывестиСекцию("Подвал");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли;
	РегПартии.ВременныйРасчет(0);
КонецПроцедуры // ПечатьАнализПродажи

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
                   
Функция ПолучитьПроект(ПоискФирма)
	СпрПроекты = СоздатьОбъект("Справочник.Проекты");
	
	Если ПоискФирма = "Эталон" Тогда 
		СпрПроекты.НайтиПоКоду("00030");
		Возврат СпрПроекты.ТекущийЭлемент();
	Иначе
		СпрПроекты.НайтиПоКоду("00011");
		Возврат СпрПроекты.ТекущийЭлемент();
	КонецЕсли;	
КонецФункции

Функция ПолучитьДоговор(ПоискФирма)
	Если Контрагент.Выбран() = 1 Тогда
		СпрДоговоры = СоздатьОбъект("Справочник.Договоры");
		СпрДоговоры.ИспользоватьВладельца(Контрагент.ТекущийЭлемент());
		
		СпрДоговоры.ВыбратьЭлементы();
		Пока СпрДоговоры.ПолучитьЭлемент() = 1 Цикл
			Если Найти(СпрДоговоры.Наименование,ПоискФирма) <> 0 Тогда 
				Возврат СпрДоговоры.ТекущийЭлемент();
			КонецЕсли;
		КонецЦикла	
	КонецЕсли;
	
	Возврат Договор;
КонецФункции

//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
      
Процедура ПриИзмененииПроекта()
	Если Найти(Проект.Наименование, "Эталон") = 0 Тогда 
		Договор = ПолучитьДоговор("Форсаж");
	Иначе
		Договор = ПолучитьДоговор("Эталон");
	КонецЕсли;	
КонецПроцедуры	

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)      
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Параметр = Форма.Параметр;
	Иначе
		Параметр = "";
	КонецЕсли; 
	
	Если ТипЗначенияСтр(Параметр) = "СписокЗначений" Тогда
		ПервоеЮрЛицо = Параметр.ПолучитьЗначение(2); 
		мДокументОснование = Параметр.ПолучитьЗначение(1);
		ДокументОснование = мДокументОснование;
		
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);   
		Если ПустоеЗначение(Проект) = 0 Тогда
			Если ПервоеЮрЛицо = 0 Тогда
				Если Найти(Проект.Наименование, "Эталон") <> 0 Тогда 
					Договор = ПолучитьДоговор("Форсаж");
					Проект 	= ПолучитьПроект("Форсаж");
				Иначе
					Договор = ПолучитьДоговор("Эталон");
					Проект 	= ПолучитьПроект("Эталон");
				КонецЕсли;	
			Иначе
				Если Найти(Проект.Наименование, "Эталон") = 0 Тогда 
					Договор = ПолучитьДоговор("Форсаж");
					Проект 	= ПолучитьПроект("Форсаж");
				Иначе
					Договор = ПолучитьДоговор("Эталон");
					Проект 	= ПолучитьПроект("Эталон");
				КонецЕсли;
			КонецЕсли;	                         
		КонецЕсли;
		
		ДатаДок = ТекущаяДата();
		// По умолчанию выписываем в той же валюте, что и документ-основание
		Валюта		= ДокументОснование.Валюта;
		Курс		= глКурсДляВалюты(Валюта, ДатаДок);
		ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная;	
		ДатаОплаты	= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
		Склад = ДокументОснование.Склад;
		
		Комментарий = ДокументОснование.Комментарий; 
		
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл 
			Если ПервоеЮрЛицо = 1 Тогда
				мКоличество = ДокументОснование.Количество - ДокументОснование.КоличествоДругогоЮрЛица;	
			Иначе
				мКоличество = ДокументОснование.КоличествоДругогоЮрЛица;
			КонецЕсли;
			  
			Если мКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока();
			СтавкаНДС	= ДокументОснование.СтавкаНДС;
			СтавкаНП	= ДокументОснование.СтавкаНП;
			Номенклатура= ДокументОснование.Номенклатура;
			Единица		= ДокументОснование.Единица;
			Коэффициент	= ДокументОснование.Коэффициент;
			
			Если ПервоеЮрЛицо = 1 Тогда
				Количество = ДокументОснование.Количество - ДокументОснование.КоличествоДругогоЮрЛица;	
			Иначе
				Количество = ДокументОснование.КоличествоДругогоЮрЛица;
			КонецЕсли;
			
			Цена		= глПересчет(ДокументОснование.Цена, ДокументОснование.Валюта, ДокументОснование.Курс, Валюта, Курс);
			//ВремСумма	= ДокументОснование.Сумма * Количество / ДокументОснование.Количество; // для учета скидок в документе основании
			ВремСумма	= ДокументОснование.Сумма;
			Сумма		= глПересчет(ВремСумма, ДокументОснование.Валюта, ДокументОснование.Курс, Валюта, Курс);
			Коммент 	= ДокументОснование.Коммент;
				
		КонецЦикла;
		    
		//АвтоСклад();
		
		Если Итог("Количество") = 0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	
	Иначе
		СинонимДокумента	= ПредставлениеВида();
		СинонимОснования	= ДокументОснование.ПредставлениеВида();
		
		Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
		Поз		= Список.НайтиЗначение(Вид());
		
		// выполним проверку, можно ли вводить документ на основании ДокументОснование
		Если (Поз = 0) Тогда
			// ДокументОснование не найден в списке разрешенных
			Предупреждение("Документ """ + СинонимДокумента +
			""" нельзя вводить на основании """ + СинонимОснования + """", 60);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		Если ДокументОснование.Вид()="ЗаявкаПокупателя" Тогда
			Если  ДокументОснование.ВидОперации <> Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
				Предупреждение("Документ """ + СинонимДокумента +
				""" нельзя вводить на основании """ + СинонимОснования + """", 60);
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);   
		
		// По умолчанию выписываем в той же валюте, что и документ-основание
		Валюта		= ДокументОснование.Валюта;
		Курс		= глКурсДляВалюты(Валюта, ДатаДок);
		Если ДокументОснование.Вид()="ЗаявкаСССервис" тогда 	//Там всегда неподтв. заявка
			ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
			Объект		= ДокОснование.Объект;
		ИначеЕсли ДокументОснование.Вид()="ЗаявкаКлиентаРозница" тогда
			ВидОперации	= Перечисление.ВидыОперацийЗаявок.НаСклад;
			Объект		= ДокОснование.Объект;
		ИначеЕсли (ДокументОснование.Вид()="ЗаявкаПокупателя") Тогда
			Если (ДокументОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная) Тогда
				ВидОперации	= Перечисление.ВидыОперацийЗаявок.НаСклад;
				Объект		= ДокОснование.Объект;
			КонецЕсли;
		ИначеЕсли (ДокументОснование.Вид()="ПеремещениеТМЦ_Розница") тогда
			ВидОперации	= Перечисление.ВидыОперацийЗаявок.НаСклад;
			СкладПолучатель = ДокументОснование.СкладПолучатель;
			//Объект		= ДокОснование.Объект;	
		иначе
			ВидОперации = ДокОснование.ВидОперации;
		КонецЕсли;
		
		ДатаОплаты	= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
		
		Если (ДокументОснование.Вид()<>"ЗаявкаСССервис") и (ДокументОснование.Вид()<>"ЗаявкаКлиентаРозница")
		и ((ДокументОснование.Вид() <> "ЗаявкаПокупателя")) и (ДокументОснование.Вид()<>"ПеремещениеТМЦ_Розница") тогда	//В СС и ЗаявкаКлиентаРозница мы всегда знаем, что это такое
			Если ВыбратьВидОперации(0) <> 1 Тогда
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;                   
		КонецЕсли;
		
		Результат   = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Сообщить(Результат);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
    
	                       
	                  
	глПересчетТаблЧасти(Контекст,,);
	глПересчитатьСкидки(Контекст);
	
	
	
	флРезервировать = 0;
	ДатаВремяСозданиеЗаявки 			= "" + ТекущаяДата() +" "+ ТекущееВремя();
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	  
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		Параметр = Форма.Параметр;
	Иначе
		Параметр = "";
	КонецЕсли; 
	
	Если ТипЗначенияСтр(Параметр) = "СписокЗначений" Тогда
		ПервоеЮрЛицо = Параметр.ПолучитьЗначение(2); 
		мДокументОснование = Параметр.ПолучитьЗначение(1);
		ДокументОснование = мДокументОснование;
		
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);   
		
		// По умолчанию выписываем в той же валюте, что и документ-основание
		Валюта		= ДокументОснование.Валюта;
		Курс		= глКурсДляВалюты(Валюта, ДатаДок);
		ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная;	
		ДатаОплаты	= глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита);
		
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл 
			Если ПервоеЮрЛицо = 1 Тогда
				мКоличество = ДокументОснование.Количество - ДокументОснование.КоличествоДругогоЮрЛица;	
			Иначе
				мКоличество = ДокументОснование.КоличествоДругогоЮрЛица;
			КонецЕсли;
			
			Если мКоличество = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока();
			СтавкаНДС	= ДокументОснование.СтавкаНДС;
			СтавкаНП	= ДокументОснование.СтавкаНП;
			Номенклатура= ДокументОснование.Номенклатура;
			Единица		= ДокументОснование.Единица;
			Коэффициент	= ДокументОснование.Коэффициент;
			
			Если ПервоеЮрЛицо = 1 Тогда
				Количество = ДокументОснование.Количество - ДокументОснование.КоличествоДругогоЮрЛица;	
			Иначе
				Количество = ДокументОснование.КоличествоДругогоЮрЛица;
			КонецЕсли;
			
			Цена		= глПересчет(ДокументОснование.Цена, ДокументОснование.Валюта, ДокументОснование.Курс, Валюта, Курс);
			//ВремСумма	= ДокументОснование.Сумма * Количество / ДокументОснование.Количество; // для учета скидок в документе основании
			ВремСумма	= ДокументОснование.Сумма;
			Сумма		= глПересчет(ВремСумма, ДокументОснование.Валюта, ДокументОснование.Курс, Валюта, Курс);
			Коммент 	= ДокументОснование.Коммент;
			
		КонецЦикла;
		
		Если Итог("Количество") = 0 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
		Форма.Параметр = "";
	Иначе
		
		глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
		
		ДатаОтгрузки	= ТекущаяДата() + Константа.БазовоеЧислоДнейРезерва.Получить(ТекущаяДата());
		
		Если Скопирован = 1 Тогда
			ПересчетСуммыВзаиморасчетов();
			Возврат;
		КонецЕсли;
		
		ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;  
		Форма.СпособРезервирования.Доступность(0);
		Проект = "";
		Если ВыбратьВидОперации(0) <> 1 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;                   
		
		Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
			Если Форма.Параметр = "Склад" Тогда  
				ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад;
			ИначеЕсли Форма.Параметр = "Поставка" Тогда
				ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку;
			КонецЕсли;
		КонецЕсли;    
	КонецЕсли;
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
		Склад = "";
	КонецЕсли;
	
	ДатаВремяСозданиеЗаявки 			= "" + ТекущаяДата() +" "+ ТекущееВремя();
КонецПроцедуры // ВводНового()   

Процедура ПриУдаленииСтроки() 
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) и (ЗаявкаВзятаВРаботу = 1) Тогда
		Если (НазваниеНабораПрав()<>"Администратор") Тогда
			Предупреждение("Вы не имеете право удалять строки документа");// со статусом """"Взята в работу""""!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриВводеСтроки() 
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) и (ЗаявкаВзятаВРаботу = 1) Тогда
		Если (НазваниеНабораПрав()<>"Администратор") Тогда
			Предупреждение("Вы не имеете право добавлять строки документа");// со статусом """"Взята в работу""""!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//******************************************************************************
// предопределенная процедура

Процедура ПриОткрытии() 
	    
	Парам = Форма.Параметр;
	
	Если ТипЗначенияСтр(Парам) = "СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда")) = 0 Тогда
			Если (Парам.Получить("Команда") = "ЗаписатьИЗакрыть") Тогда 
				Если ПустоеЗначение(ДатаДок) = 1 Тогда
					ДатаДок = ТекущаяДата();
				КонецЕсли;					
				Записать();
				Сообщить("Записан:"+ТекущийДокумент());
				СтатусВозврата(0);
				Возврат;
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	//++Валерий МЭТР: просмотор только "своих" документов
	//Если (сокрЛП(глПользователь.Полномочия) = "Администратор_магазина") или (сокрЛП(глПользователь.Полномочия) = "Администратор_магазина1") Тогда
		//Если (ПустоеЗначение(Автор) = 0) И (Автор <> глПользователь) Тогда
		//	Предупреждение("Вы не имеете правдо доступа к этому документу!");
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли;
	//КонецЕсли;
	//--Валерий МЭТР
	
	//++Валерий МЭТР: интернет-магазин
	//Если (НазваниеНабораПрав() = "Продавец_розница") И (Выбран() = 1) Тогда
		//Если (глПроектИнтернетМагазин(Проект) = 0) ИЛИ (Автор <> глПользователь) Тогда
		//	Предупреждение("Вы не имеете права доступа к этому документу!");
		//	СтатусВозврата(0);
		//	Возврат;
		//КонецЕсли;
	//КонецЕсли;
	//--Валерий МЭТР: интернет-магазин

	Если Форма.Параметр="УстановитьПеремещеноИЗакрыть" Тогда
		ЗаявкаПеремещена = 1;
		Записать();
		Форма.Закрыть();		
	ИначеЕсли Форма.Параметр="УбратьПеремещеноИЗакрыть" Тогда
		ЗаявкаПеремещена = 0;
		Записать();
		Форма.Закрыть();
	КонецЕсли;
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Если НазваниеНабораПрав()="Склад" Тогда
		ТаблицаПечФорм.ВыбратьСтроки(); 
		КоличествоСтрок = ТаблицаПечФорм.КоличествоСтрок();
		Пока КоличествоСтрок > 0 Цикл 
			ТаблицаПечФорм.ПолучитьСтрокуПоНомеру(КоличествоСтрок);
			Если (ТаблицаПечФорм.Название <> "Отгрузка")
			и (ТаблицаПечФорм.Название <> "Печатная форма") Тогда
				ТаблицаПечФорм.УдалитьСтроку(КоличествоСтрок);	
			КонецЕсли;	
			КоличествоСтрок = КоличествоСтрок - 1;	
		КонецЦикла;
		НомерТекущейФормы = 1;
		ЗагловокКнПечать  = ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка");
		Форма.кнПечать.Заголовок(ЗагловокКнПечать);
	КонецЕсли;
	
	ДопСклад	= Константа.СкладДляТранзита;	
	Опт2Склад	= Константа.ДополнительныйСклад;	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	
	Если (ЗаявкаВзятаВРаботу = 1) 
	и (НазваниеНабораПрав()<>"Склад") 
	и (НазваниеНабораПрав()<>"Администратор") 
	и (ИмяПользователя() <> "Бородицкий") 
	и (ИмяПользователя() <> "Кожемякин")
	и (ИмяПользователя() <> "Иванова")Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная) и (НазваниеНабораПрав()="Склад") Тогда
		Форма.ТолькоПросмотр(1);	
	КонецЕсли;	
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнОперация.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о состоянии заявки");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	Если ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
		СписокДействий.ДобавитьЗначение("Сформировать заявку на склад");
		СписокДействий.ДобавитьЗначение("Сформировать реализацию");
	Иначе
		СписокДействий.ДобавитьЗначение("Сформировать перемещение в магазин");
	КонецЕсли;
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал,БазовыйВид");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал,БазовыйВид");
	КонецЕсли;
                      
	УстановкаВидимостиСуммВПодвале();
	
	ВидимостьКолонокТЧ(1);	//Как положено для базового вида
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	ОбновитьНадписи();                           
	ВидРезерва    = 2;
	УправлениеДиалогомРезерв();
	                   
	//ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад;

	Если ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
		Форма.Вналичии.Видимость(0); 
		Если ЗаявкаВзятаВРаботу = 1 Тогда
			Форма.Количество.Доступность(0);
	    КонецЕсли;
	иначе 
		Форма.Вналичии.Видимость(0);
	КонецЕсли;
	
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда 
		Форма.флРезервировать.Доступность(0);
		Форма.ВидРезерва.Доступность(0);
		Форма.ВидРезерва2.Доступность(0);
		Форма.СпособРезервирования.Доступность(0);
		//*****************************************************************
		Форма.флРезервировать.Видимость(0);
		Форма.ВидРезерва.Видимость(0);
		Форма.ВидРезерва2.Видимость(0);
		Форма.СпособРезервирования.Видимость(0);
		Форма.кнРаскидай.Видимость(0);
		Форма.ПоКнПроверитьОстаткиПоЮр.Видимость(0);
		Форма.ПоКнРазбитьПоЮр.Видимость(0);
		Форма.кнВыполни.Видимость(0);
		Форма.кнВид.Видимость(0);
		Форма.ГруппаРезервирование.Видимость(0);
		//Настроим видимость колонок***************************************
		Форма.Цена.Видимость(0);
		Форма.БезСкидки.Видимость(0);
		Форма.Сумма.Видимость(0);
		Форма.СуммаСкидки.Видимость(0);
		Форма.СтавкаНДС.Видимость(0);
		Форма.СуммаНДС.Видимость(0);
		Форма.Наценка.Видимость(0);
		Форма.АртикулИМ.Видимость(0); 
		Форма.КоличествоДругогоЮрЛица.Видимость(0);
		//*****************************************************************
		Если (ЗаявкаВзятаВРаботу = 0) Тогда
			 Форма.кнПодбор.Доступность(1);
		КонецЕсли;
		//Проверим есть ли проведенное перемещение в розницу**********************************
		//если есть установим признак "Перемещено"********************************************
		Если (ДокОснование.Вид() = "ЗаявкаКлиентаРозница") и (Выбран() = 1) Тогда
			Если ЗаявкаПеремещена = 0 Тогда
				ДокПодч			= СоздатьОбъект("Документ");
				ЕстьПеремещение = 0;
				ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
				Пока ДокПодч.ПолучитьДокумент()=1 Цикл
					Если (ДокПодч.Вид() = "ПеремещениеТМЦ_Розница") и (ЕстьПеремещение = 0) Тогда
						Если (ДокПодч.ПометкаУдаления() = 0) и (ДокПодч.Проведен() = 1) Тогда
							ЕстьПеремещение = 1;
							Прервать;
						КонецЕсли;	
					КонецЕсли;
				КонецЦикла;
				ЗаявкаПеремещена = ЕстьПеремещение;
			КонецЕсли;
		КонецЕсли;
		//************************************************************************************
	ИначеЕсли (ВидОперации = Перечисление.ВидыОперацийЗаявок.Неподтвержденная)  Тогда
		//Форма.КоличествоФакт.Видимость(0);
		//заполним количество факт***********************************************************
		ТЗ 	= СоздатьОбъект("ТаблицаЗначений");
		ТЗОтгруженоИспользовано = СоздатьОбъект("ТаблицаЗначений"); 
		ТЗОтгруженоИспользовано.НоваяКолонка("Номенклатура");
		ТЗОтгруженоИспользовано.НоваяКолонка("Отгружено");
		
		Рег	= СоздатьОбъект("Регистр.ЗаявкиНаСклад");
		Рег.УстановитьФильтр(ТекущийДокумент(),,);
		Рег.ВыгрузитьИтоги(ТЗ,1,1);  
		Рег3	= СоздатьОбъект("Регистр.ЗаявкиНаСкладОтгружено");
		
		ТЗ.Свернуть("Номенклатура","КоличествоОбработано");
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ВсегоОтгружено	 	= Рег3.СводныйИтог(ТекущийДокумент(),Номенклатура,,"КоличествоОтгружено");
			х = 0;
			Если ТЗОтгруженоИспользовано.НайтиЗначение(Номенклатура,х,"Номенклатура") = 1 Тогда
				ВсегоОтгружено = ВсегоОтгружено - ТЗОтгруженоИспользовано.ПолучитьЗначение(х,"Отгружено");
			КонецЕсли;	
			х = 0;
			Если ТЗ.НайтиЗначение(Номенклатура,х,"Номенклатура") = 1 Тогда
				ТекущееКоличество = ТЗ.ПолучитьЗначение(х,"КоличествоОбработано") + ВсегоОтгружено;
				
				Если ТекущееКоличество <= Количество Тогда
					Если КоличествоФакт <> ТекущееКоличество Тогда
						КоличествоФакт = ТекущееКоличество;
					КонецЕсли;
				Иначе 
					Если КоличествоФакт <> ТекущееКоличество Тогда
						КоличествоФакт = Количество; 
					КонецЕсли;
				КонецЕсли;
				ТЗ.УстановитьЗначение(х,"КоличествоОбработано",ТекущееКоличество - КоличествоФакт);
			Иначе
				Если КоличествоФакт <> ВсегоОтгружено Тогда
					КоличествоФакт = ВсегоОтгружено;
				КонецЕсли;	
			КонецЕсли;
			ТЗОтгруженоИспользовано.НоваяСтрока();
			ТЗОтгруженоИспользовано.Номенклатура = Номенклатура;
			ТЗОтгруженоИспользовано.Отгружено = ВсегоОтгружено; 
			ТЗОтгруженоИспользовано.Свернуть("Номенклатура","Отгружено");
		КонецЦикла;
		//***********************************************************************************
		Форма.КоличествоФакт.Редактирование(0);
		Форма.АртикулИМ.Видимость(0);
	КонецЕсли;
	
	Если (НазваниеНабораПрав()<>"Склад") 
	и (НазваниеНабораПрав()<>"Администратор") 
	и (ИмяПользователя() <> "Бородицкий") 
	и (ИмяПользователя() <> "Кожемякин")
	и (ИмяПользователя() <> "Иванова") Тогда
		Форма.ЗаявкаВзятаВРаботу.Доступность(0);
		//Форма.НадписьЗаявкаОбработана.Доступность(0);
		Форма.ЗаявкаОбработана.Доступность(0);
	КонецЕсли;
	
	
	//Форма.кнХОснование.Доступность(0);
	
    Форма.кнОперация.Видимость(0);
	
	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,11);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,4);
	ТЗ_Остаток.НоваяКолонка("Резерв","число",15,2,,3);
	
	ТЗ_ОстатокПартии.НоваяКолонка("Партия","Документ",,,,15);
	ТЗ_ОстатокПартии.НоваяКолонка("Количество","число",15,2,"Кол.",4);
	ТЗ_ОстатокПартии.НоваяКолонка("Цена","число",15,2,,4);
	ТЗ_ОстатокПартии.НоваяКолонка("Сумма","число",15,2,,4);
	
	 
	Если ((глПользователь.Код<>"Кожемякин") и (глПользователь.Код<>"Пикта") и (глПользователь.Код<>"Жук") и (глПользователь.Код<>"ОптМенеджер3") и (глПользователь.Код<>"ОфисМенеджер")) или (СокрЛП(ИдентификаторEDO) = "") Тогда
		Форма.ПодтвердитьEDO.Доступность(0); 
	КонецЕсли;
	
КонецПроцедуры                                                                  
                             
//******************************************************************************
// предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "Цена"    ) 
	или  (Форма.ТекущаяКолонка() = "Сумма"   )
	или  (Форма.ТекущаяКолонка() = "СуммаНП" )
	или  (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
 // предопределенная процедура

 Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,			Подвал,БазовыйВид");
	Иначеесли ВнешнийВид=1 Тогда
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,	Подвал,БазовыйВид");
	ИначеЕсли ВнешнийВид=2 тогда
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,	Подвал,ВидЗаказа");
	КонецЕсли;        
	УстановкаВидимостиСуммВПодвале();
	
	Если (ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда 
		Форма.флРезервировать.Доступность(0);
		Форма.ВидРезерва.Доступность(0);
		Форма.ВидРезерва2.Доступность(0);
		Форма.СпособРезервирования.Доступность(0);
		//*****************************************************************
		Форма.флРезервировать.Видимость(0);
		Форма.ВидРезерва.Видимость(0);
		Форма.ВидРезерва2.Видимость(0);
		Форма.СпособРезервирования.Видимость(0);
		Форма.кнРаскидай.Видимость(0);
		Форма.кнВыполни.Видимость(0);
		Форма.кнВид.Видимость(0);
		Форма.ГруппаРезервирование.Видимость(0);
		//Настроим видимость колонок***************************************
		Форма.Цена.Видимость(0);
		Форма.БезСкидки.Видимость(0);
		Форма.Сумма.Видимость(0);
		Форма.СуммаСкидки.Видимость(0);
		Форма.СтавкаНДС.Видимость(0);
		Форма.СуммаНДС.Видимость(0);
		Форма.Наценка.Видимость(0);
		//*****************************************************************
	КонецЕсли;
	
	Форма.кнОперация.Видимость(0);
КонецПроцедуры                                                                  

//******************************************************************************
//Предопределенная процедура

Процедура ПриЗаписи() 
	 
	//++Валерий МЭТР: интернет-магазин
	Если (НазваниеНабораПрав() = "Продавец_розница") Тогда
		Если (глПроектИнтернетМагазин(Проект) = 0) Тогда
			Предупреждение("Вы можете записывать только документы интернет-магазина!");
			СтатусВозврата(0);
			//Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР: интернет-магазин
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	//Кожемякин****************************************************************
//	если Склад.Магазин=1 Тогда	//Зададим признак отбора в рознице
		Тип = "";
		Если (ДокОснование.Вид() = "ПеремещениеТМЦ_Розница") Тогда
			Тип = "Перемещение";
		ИначеЕсли (ДокОснование.Вид() = "ЗаявкаКлиентаРозница") Тогда
			Тип = "Розница";
		ИначеЕсли (ДокОснование.Вид() = "ЗаявкаПокупателя") Тогда
			Тип = "Опт";
		КонецЕсли;
		
		//вид документа + склад
		проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
		ЭР			= сокрЛП(ВидОперации)+сокрЛП(склад);
		Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
			ЭтоРозница=проба.ТекущийЭлемент();
		Иначе
			проба.новый();
			проба.наименование=ЭР;
			проба.записать();
			ЭтоРозница=проба.ТекущийЭлемент();
		КонецЕсли;
		//вид документа
		проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
		ЭР			= сокрЛП(ВидОперации);
		Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
			ЭтоРозницаБезСклада=проба.ТекущийЭлемент();
		Иначе
			проба.новый();
			проба.наименование=ЭР;
			проба.записать();
			ЭтоРозницаБезСклада=проба.ТекущийЭлемент();
		КонецЕсли;
		
		//вид документа + тип + склад
		проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
		ЭР			= сокрЛП(ВидОперации)+ Тип +сокрЛП(склад);
		Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
			ЭтоРозницаТип=проба.ТекущийЭлемент();
		Иначе
			проба.новый();
			проба.наименование=ЭР;
			проба.записать();
			ЭтоРозницаТип=проба.ТекущийЭлемент();
		КонецЕсли;
		//вид документа + тип 
		проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
		ЭР			= сокрЛП(ВидОперации)+Тип;
		Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
			ЭтоРозницаТипБезСклада=проба.ТекущийЭлемент();
		Иначе
			проба.новый();
			проба.наименование=ЭР;
			проба.записать();
			ЭтоРозницаТипБезСклада=проба.ТекущийЭлемент();
		КонецЕсли;
	//КонецЕсли;
	//*************************************************************************
	
	жПокупатели = 1;
	Если Мульт=1 тогда
	    Мультик=1
	иначе Мультик=0;
	КонецЕсли;  
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	ВсегоСтрок = КоличествоСтрок();
	ТекущаяСтрока = 1;
	Пока ТекущаяСтрока <= ВсегоСтрок Цикл
		АвтоСклад(ТекущаяСтрока);
		ТекущаяСтрока = ТекущаяСтрока + 1; 
		ПроверитьОстаткиПоЮрЛицам();
	КонецЦикла;
//	
//	Форма.Обновить();
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="БанковскийСчет" Тогда
		ЮрФизЛицо = Фирма.ЮрЛицо;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ЮрФизЛицо);
		ФлагСтандОбр = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
			    
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

Функция ПокажиОстаткиПартии()
	Перем стр;
    
	//Если СтарыйТовар = Номенклатура Тогда
	//    возврат 0;
	//КонецЕсли;
        
	стр="";
	ТЗ_ОстатокПартии.УдалитьСтроки();
	
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		//если ВсеОстатки=0 Тогда
			если Склад_темп.Магазин=0 Тогда			
				Рег4.УстановитьФильтр(,Склад_темп.МОЛ,Номенклатура,);
				Рег4.ВыгрузитьИтоги(ТЗ4,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
				
				ТЗ4.ВыбратьСтроки();
				Пока ТЗ4.ПолучитьСтроку() = 1 Цикл
					ТЗ_ОстатокПартии.НоваяСтрока();
					ТЗ_ОстатокПартии.Партия 	= ТЗ4.Партия.ПриходныйДокумент;
					ТЗ_ОстатокПартии.Сумма 		= ТЗ4.СуммаРуб;
					ТЗ_ОстатокПартии.Количество = ТЗ4.Количество;
					ТЗ_ОстатокПартии.Цена 		= ?(ТЗ4.Количество <= 0,0,ТЗ4.СуммаРуб / ТЗ4.Количество);
				КонецЦикла; 
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	
	СтарыйТовар=Номенклатура;
	стрк="";
	возврат стрк;
КонецФункции

//Обработка складов
Функция ПокажиОстатки()
	Перем стр;

	Если НазваниеНабораПрав()="Сервис" Тогда
		возврат 0;
	КонецЕсли;
        
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		если Склад_темп.Магазин=0 Тогда
			Рег1.УстановитьФильтр(,Номенклатура,Склад_темп);
			Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
			
			рег2.УстановитьФильтр(Номенклатура,Склад_темп);
			//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
			рег2.ВыгрузитьИтоги(ТЗ2,1,1);
			
			ТЗ2.Свернуть("Номенклатура","Количество");
			х					= ПолучитьПустоеЗначение(х);
			у					= 1;
			
			а=0;
			
			Если ТЗ2.НайтиЗначение(Номенклатура,х,у)=1 Тогда	//Сначала общий резерв
				а=1;
				ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				ТЗ_Остаток.Резерв	= ТЗ2.ПолучитьЗначение(х,"Количество");
				х					= ПолучитьПустоеЗначение(х);
			КонецЕсли;
			//Теперь из остатков ТМЦ
			х			= ПолучитьПустоеЗначение(х);
			у			= 2;
			Если ТЗ.НайтиЗначение(Номенклатура,х,у)=1 Тогда
				Если а=0 Тогда
					ТЗ_Остаток.НоваяСтрока();
					ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				КонецЕсли;
				ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ПокажиОстаткиПартии();
	стрк="";
	возврат стрк;
КонецФункции

Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
	    возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= Номенклатура;
	ТекД= ДокОснование;
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
	
	
КонецПроцедуры

//Автоматически распределяет товар по складам учёта оптового подразделения
Процедура АвтоСклад(Знач ТекущийНомерСтроки = "")
	
	Если ТекущийНомерСтроки <>  "" Тогда
		Если ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
			Возврат;	
		КонецЕсли;	
	КонецЕсли;
	
	Если ТекущийНомерСтроки =  "" Тогда
		а=Вопрос("Распределить товар по 
		|складам оптового подразделения?",4,50);
		Если а<>6  Тогда
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	скл1	= Константа.СкладОтделаПродаж1; //Пискарёвка
	скл2	= Константа.СкладОтделаПродаж2;	//Полюстровский
	
	склОбщ1	= Константа.ОсновнойСклад; 	//Пискарёвка
	склОбщ2	= Константа.ОсновнойСклад2;	//Полюстровский
	
	
	БП		= Константа.БазовыйПоставщикСкладаОтделаПродаж1;	//Наш Tiemme будет пихаться на склад ОП1
	ВыбратьСтроки(); 
	Пока ПолучитьСтроку()=1 Цикл
		Если ТекущийНомерСтроки <>  "" Тогда
			Если НомерСтроки <> ТекущийНомерСтроки Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		ПокажиОстатки();   
		                     
		остСкл=0; остСклРез=0;
		
		остСкл1=0; остСкл1Рез=0;
		остСкл2=0; остСкл2Рез=0;
		
		остСклОбщ1=0; остСклОбщ1Рез=0;
		остСклОбщ2=0; остСклОбщ2Рез=0;
		
		ТЗ_Остаток.ВыбратьСтроки();
		Пока ТЗ_Остаток.ПолучитьСтроку()=1 Цикл	//Найдем чего у нас находится на складах
			Если ДатаДок > '10.10.16' Тогда 
				Если Склад = ТЗ_Остаток.Склад Тогда
					остСкл		= ТЗ_Остаток.Остаток;
					остСклРез	= ТЗ_Остаток.Резерв;
					
					Если УчитыватьРезерв=1 Тогда
						остСкл	= остСкл-остСклРез;
					КонецЕсли;
					если остСкл<0 тогда 
						остСкл1=0;	//Нам "-" не нужны
					КонецЕсли;   
				КонецЕсли;
			Иначе
				Если скл1=ТЗ_Остаток.Склад Тогда
					остСкл1		= ТЗ_Остаток.Остаток;
					остСкл1Рез	= ТЗ_Остаток.Резерв;
					
					Если УчитыватьРезерв=1 Тогда
						остСкл1	= остСкл1-остСкл1Рез;
					КонецЕсли;
					если остСкл1<0 тогда 
						остСкл1=0;	//Нам "-" не нужны
					КонецЕсли;
				ИначеЕсли скл2=ТЗ_Остаток.Склад Тогда
					остСкл2		= ТЗ_Остаток.Остаток;
					остСкл2Рез	= ТЗ_Остаток.Резерв;
					
					Если УчитыватьРезерв=1 Тогда
						остСкл2	= остСкл2-остСкл2Рез;
					КонецЕсли;
					если остСкл2<0 тогда 
						остСкл2=0;	//Нам "-" не нужны
					КонецЕсли;
				ИначеЕсли склОбщ1=ТЗ_Остаток.Склад Тогда
					остСклОбщ1		= ТЗ_Остаток.Остаток;
					остСклОбщ1Рез	= ТЗ_Остаток.Резерв;
					
					Если УчитыватьРезерв=1 Тогда
						остСклОбщ1	= остСклОбщ1-остСклОбщ1Рез;
					КонецЕсли;
					если остСклОбщ1<0 тогда 
						остСклОбщ1=0;	//Нам "-" не нужны
					КонецЕсли;
				ИначеЕсли склОбщ2=ТЗ_Остаток.Склад Тогда
					остСклОбщ2		= ТЗ_Остаток.Остаток;
					остСклОбщ2Рез	= ТЗ_Остаток.Резерв;
					
					Если УчитыватьРезерв=1 Тогда
						остСклОбщ2	= остСклОбщ2-остСклОбщ2Рез;
					КонецЕсли;
					если остСклОбщ2<0 тогда 
						остСклОбщ2=0;	//Нам "-" не нужны
					КонецЕсли;
				КонецЕсли;  
			КонецЕсли;	
		КонецЦикла;
		//Теперь распределим, свободный остаток (резерв не будем считать (пока не просят))
		//	1. Все что для 1-го склада
		//	2. Все что останется для 2-го склада
		Всё	= Количество;
		Заказ2	= 0; 
		Отгрузка2	= 0;
		Если ДатаДок > '10.10.16' Тогда
			если остСкл-Всё>=0 Тогда 
				//++Ерошенко 17.05.2007
				// по заявке Корыхалова
				//Отгрузка1	= Всё;
				Отгрузка2	= Всё; 
				//--Ерошенко
				Продолжить;
			ИначеЕсли остСкл-Всё<0 Тогда  
				//++Ерошенко 17.05.2007
				// по заявке Корыхалова
				//Отгрузка1	= остСкл1;
				//Всё			= Всё-Отгрузка1;   
				Отгрузка2	= остСкл;
				Всё			= Всё-Отгрузка2;   
			КонецЕсли;     
		Иначе
			если остСкл1-Всё>=0 Тогда 
				//++Ерошенко 17.05.2007
				// по заявке Корыхалова
				//Отгрузка1	= Всё;
				Отгрузка2	= Всё; 
				//--Ерошенко
				Продолжить;
			ИначеЕсли остСкл1-Всё<0 Тогда  
				//++Ерошенко 17.05.2007
				// по заявке Корыхалова
				//Отгрузка1	= остСкл1;
				//Всё			= Всё-Отгрузка1;   
				Отгрузка2	= остСкл1;
				Всё			= Всё-Отгрузка2;   
				//--Ерошенко
				Если остСкл2-Всё>=0 Тогда
					Отгрузка2	=Всё;
					Продолжить;
				ИначеЕсли остСкл2-Всё<0 Тогда
					Отгрузка2	= остСкл2;
					Всё			= Всё-Отгрузка2;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		//Если распределять по Остаткам, то на производителя нам пока пофиг
		Если Всё>0 Тогда
			если ПоОстаткам=1 Тогда    
				Если ДатаДок > '10.10.16' Тогда  
					Заказ2	= Всё;
					Всё		= Всё-Заказ2;
				Иначе	
					если остСклОбщ1-Всё>=0 Тогда  
						//++Ерошенко 17.05.2007
						// по заявке Корыхалова
						//Заказ1	= Всё;
						Заказ2	= Всё;
						//--Ерошенко
						Продолжить;
					ИначеЕсли остСклОбщ1-Всё<0 Тогда 
						//++Ерошенко 17.05.2007
						// по заявке Корыхалова
						//Заказ1	= остСклОбщ1;
						//Всё		= Всё-Заказ1;
						Заказ2	= остСклОбщ1;
						Всё		= Всё-Заказ2;
						//--Ерошенко
						Если остСклОбщ2-Всё>=0 Тогда
							Заказ2	=Всё;
							Продолжить;
						ИначеЕсли остСклОбщ2-Всё<0 Тогда
							Заказ2	= остСклОбщ2;
							Всё		= Всё-Заказ2;
						КонецЕсли;
					КонецЕсли;   
				КонецЕсли;
			Иначе  
				//++Ерошенко 17.05.2007
				// по заявке Корыхалова
				//Заказ1	= 0; 
				//--Ерошенко
				Заказ2	= 0;
			КонецЕсли;				
		КонецЕсли;	
				
				
		//Если осталось чего-нить, то надо раскидать по заказам
		//Если Tiemme, то на склад 1 иначе на 2-ой склад
		Если Всё>0 Тогда
			если Номенклатура.Производитель=БП Тогда 
				//++Ерошенко 
				// по заявке Корыхалова
				//Заказ1=Заказ1+Всё;  
				Заказ2=Заказ2+Всё;  
				//--Ерошенко
			иначе
		        Заказ2=Заказ2+Всё;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВнешнийВид()
	Если ВнешнийВид=1 Тогда
		ВнешнийВид=2;
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,	Подвал,ВидЗаказа");
		УстановкаВидимостиСуммВПодвале();
		ВидимостьКолонокТЧ(2);
	Иначе
		ВнешнийВид=1;
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,	Подвал,БазовыйВид");
		УстановкаВидимостиСуммВПодвале();
		ВидимостьКолонокТЧ(1);
	КонецЕсли;		
КонецПроцедуры

// Какие из колонок будут видны в каждом из видов "Базовый"/"ВидЗаказа"
Процедура ВидимостьКолонокТЧ(парам1)
	если парам1=1 Тогда	//Базовый вид
		форма.Номенклатура.	Видимость(1);
		Форма.Артикул.		Видимость(1);
		форма.Производитель.Видимость(1);
		Форма.Количество.	Видимость(1);
		Форма.Единица.		Видимость(1);
		Форма.Коэффициент.	Видимость(0);	//у нас он равен 1 всегда
		Форма.Цена.			Видимость(1);
		форма.БезСкидки.	Видимость(1);
		форма.СуммаСкидки.	Видимость(1);
		форма.Сумма.		Видимость(1);
		форма.Всего.		Видимость(0);
		форма.СтавкаНДС.	Видимость(1);
		Форма.СуммаНДС.		Видимость(1);
		форма.СтавкаНП.		Видимость(0);
		форма.СуммаНП.		Видимость(0);
		//++Ерошенко 
		// по заявке Корыхалова
		//форма.Заказ1.		Видимость(0);  
		//--Ерошенко
		форма.Заказ2.		Видимость(0);
		//++Ерошенко 
		// по заявке Корыхалова
		//форма.Отгрузка1.	Видимость(0); 
		//--Ерошенко
		форма.Отгрузка2.	Видимость(0);
	иначеесли парам1=2 Тогда	//Вид формирования заказа
		форма.Номенклатура.	Видимость(1);
		Форма.Артикул.		Видимость(1);
		форма.Производитель.Видимость(1);
		Форма.Количество.	Видимость(1);
		Форма.Единица.		Видимость(1);
		Форма.Коэффициент.	Видимость(0);	//у нас он равен 1 всегда
		Форма.Цена.			Видимость(0);
		форма.БезСкидки.	Видимость(0);
		форма.СуммаСкидки.	Видимость(0);
		форма.Сумма.		Видимость(0);
		форма.Всего.		Видимость(0);
		форма.СтавкаНДС.	Видимость(0);
		Форма.СуммаНДС.		Видимость(0);
		форма.СтавкаНП.		Видимость(0);
		форма.СуммаНП.		Видимость(0); 
		//++Ерошенко 
		// по заявке Корыхалова
		//форма.Заказ1.		Видимость(1); 
		//--Ерошенко
		форма.Заказ2.		Видимость(1); 
		//++Ерошенко 
		// по заявке Корыхалова
		//форма.Отгрузка1.	Видимость(1); 
		//--Ерошенко
		форма.Отгрузка2.	Видимость(1);
	КонецЕсли;
КонецПроцедуры

Процедура ПодготовьНеобходимыеДокументы()
	//Создание 2-х документов "Перемещение ТМЦ". 
	//Если они уже были созданы, то происходит модификация содержимого.
	//Если документы открыты, то появляется диалог с просьбой закрыть его.
	перем Пр1, Пр2;
	
	
	Если Модифицированность()=1 тогда
		Записать();
	КонецЕсли;
	склад1	= Константа.СкладОтделаПродаж1; 	//Пискарёвка
	склад2	= Константа.СкладОтделаПродаж2;	//Полюстровский
	
	Скл1=0;Скл2=0;Скл3=0;	//Уже есть или еще нет документов
	ВыбратьСтроки();	//Шоб потом не упираться
	Док=СоздатьОбъект("Документ");	
	Док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
	
	Пока Док.ПолучитьДокумент()=1 цикл		//Проверяем на присутствие документов
		Если глЕстьРеквизитШапки("Коммент2",док.вид())=1 Тогда
			Если (Док.Вид()="СолянкаПоПоставкам") и //Если есть, то заполняем заново
			(Док.Коммент2="Автозаполнение по докОснованию: "+сокрЛП(ТекущийДокумент())) тогда
				Док.СделатьНеПроведенным();                                    
				Док.СнятьПометкуУдаления();
				Док.УдалитьСтроки();
				Если (Док.Склад=Склад1) тогда	//Это пр1
					Пока ПолучитьСтроку()=1 цикл 
						//++Ерошенко 
						// по заявке Корыхалова
						//Если Заказ1<>0 тогда  
						Если Заказ2<>0 тогда  
						//--Ерошенко
						
							Док.НоваяСтрока();
							Док.Номенклатура	= Номенклатура;
							Док.Артикул			= Номенклатура.Артикул;
							Док.Производитель	= Номенклатура.Производитель;
							//++Ерошенко 
							// по заявке Корыхалова
							//Док.Количество		= Заказ1;
							//Док.КоличествоФакт	= Заказ1;  
							Док.Количество		= Заказ2;
							Док.КоличествоФакт	= Заказ2;  
							//--Ерошенко
							Док.Единица			= Единица;
							Док.Коэффициент		= Коэффициент;
							Док.Цена			= Цена;
							//++Ерошенко 
							// по заявке Корыхалова
							//Док.Сумма			= Цена*Заказ1;
							Док.Сумма			= Цена*Заказ2;
							//--Ерошенко
							Док.СрокФакт		= ДатаДок+1;
							Док.СрокПоставки	= ДатаДок+1;
							Док.ВидТМЦ			= Номенклатура.ВидНоменклатуры;
						КонецЕсли;
					КонецЦикла;
					попытка
						Док.Записать();
						Скл1=1;
						сообщить("Обновление содержимого документа: "+Док+", прошло успешно.");
					исключение
						сообщить("Заказ, который вы пытаетесь изменить, уже открыт! Закройте его!");
						возврат;
					КонецПопытки;
				ИначеЕсли (Док.Склад=Склад2) тогда	//Это пр2
					Пока ПолучитьСтроку()=1 цикл
						Если Заказ2<>0 тогда
							Док.НоваяСтрока();
							Док.Номенклатура	= Номенклатура;
							Док.Артикул			= Номенклатура.Артикул;
							Док.Производитель	= Номенклатура.Производитель;
							Док.Количество		= Заказ2;
							Док.КоличествоФакт	= Заказ2;
							Док.Единица			= Единица;
							Док.Коэффициент		= Коэффициент;
							Док.Цена			= Цена;
							Док.Сумма			= Цена*Заказ2;
							Док.СрокФакт		= ДатаДок+1;
							Док.СрокПоставки	= ДатаДок+1;
							Док.ВидТМЦ			= Номенклатура.ВидНоменклатуры;
						КонецЕсли;
					КонецЦикла;
					попытка
						Док.Записать();
						Скл2=1;
						сообщить("Обновление содержимого документа: "+Док+", прошло успешно.");
					исключение
						сообщить("Заказ, который вы пытаетесь изменить, уже открыт! Закройте его!");
						возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	//А теперь, если доков нет, то заполним их.
	
	//++Ерошенко 17.05.2007
	// по заявке Корыхалова
	//Если (Скл1=0) и (итог("Заказ1")<>0) тогда
	//	Док="";	//Обнулим
	//	Док=СоздатьОбъект("Документ.СолянкаПоПоставкам");
	//	Док.Новый();
	//	Док.Склад		= склад1;
	//	Док.Автор		= Автор;
	//	Док.ЮрЛицо		= глПользователь.ОсновнаяФирма.ЮрЛицо;
	//	Док.Фирма		= глПользователь.ОсновнаяФирма;
	//	Док.Коммент2	= "Автозаполнение по докОснованию: "+сокрЛП(ТекущийДокумент());
	//	Док.Контрагент	= Контрагент;
	//	Док.ДокОснование= ТекущийДокумент();
	//	
	//	Пока ПолучитьСтроку()=1 цикл
	//		Если Заказ1<>0 тогда
	//			Док.НоваяСтрока();
	//			Док.Номенклатура	= Номенклатура;
	//			Док.Артикул			= Номенклатура.Артикул;
	//			Док.Производитель	= Производитель;
	//			Док.Единица			= Единица;
	//			Док.Коэффициент		= Коэффициент;
	//			Док.Количество		= Заказ1;
	//			Док.КоличествоФакт	= Заказ1;
	//			Док.СрокПоставки	= ДатаДок+1;
	//			Док.СрокФакт		= ДатаДок+1;
	//			Док.ВидТМЦ			= Номенклатура.ВидНоменклатуры;
	//			//Док.ВидТМЦ 			= Перечисление.ВидыТМЦ.Товар;
	//		КонецЕсли;
	//	КонецЦикла;			
	//	попытка
	//		Док.Записать();
	//		сообщить("Запись нового документа: "+Док+", прошла успешно.");
	//	исключение
	//		сообщить("Ошибка при попытке записи нового документа!");
	//		возврат;
	//	КонецПопытки;
	//КонецЕсли; 
	//--Ерошенко
	
	Если (Скл2=0) и (итог("Заказ2")<>0) тогда
		Док="";	//Обнулим
		Док=СоздатьОбъект("Документ.СолянкаПоПоставкам");
		Док.Новый();
		Док.Склад		= склад2;
		Док.Автор		= Автор;
		Док.ЮрЛицо		= глПользователь.ОсновнаяФирма.ЮрЛицо;
		Док.Фирма		= глПользователь.ОсновнаяФирма;
		Док.Коммент2	= "Автозаполнение по докОснованию: "+ТекущийДокумент();
		Док.Контрагент	= Контрагент;
		Док.ДокОснование= ТекущийДокумент();
		
		Пока ПолучитьСтроку()=1 цикл
			Если Заказ2<>0 тогда
				Док.НоваяСтрока();
				Док.Номенклатура	= Номенклатура;
				Док.Артикул			= Номенклатура.Артикул;
				Док.Производитель	= Производитель;
				Док.Единица			= Единица;
				Док.Коэффициент		= Коэффициент;
				Док.Количество		= Заказ2;
				Док.КоличествоФакт	= Заказ2;
				Док.СрокПоставки	= ДатаДок+1;
				Док.СрокФакт		= ДатаДок+1;
				Док.ВидТМЦ			= Номенклатура.ВидНоменклатуры;
				//Док.ВидТМЦ 			= Перечисление.ВидыТМЦ.Товар;
			КонецЕсли;
		КонецЦикла;			
		попытка
			Док.Записать();
			сообщить("Запись нового документа: "+Док+", прошла успешно.");
		исключение
			сообщить("Ошибка при попытке записи нового документа!");
			возврат;
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполниПоПроекту()
	Если КоличествоСтрок()<>0 Тогда
		Если вопрос("Перезаполнить документ по данному проекту?",4,30)<>6 Тогда
			Возврат;
		КонецЕсли;
		док=СоздатьОбъект("Документ");
		УдалитьСтроки();
		док.ВыбратьПоЗначению(,,"ОбъектЗаявкаСС",Объект);
		пока док.получитьДокумент()=1 Цикл
			если док.вид()="ЗаявкаСССервис" Тогда
				Сообщить("Докум: "+док+", "+док.объект);
				док.выбратьСтроки();
				пока док.получитьстроку()=1 Цикл
					НоваяСтрока();
					Номенклатура	= док.номенклатура;
					Количество		= док.Количество;
					Единица			= док.Единица;
					Коэффициент		= 1;
					Коммент			= док.коммент;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		тз_темп = СоздатьОбъект("ТаблицаЗначений");
		ВыгрузитьТабличнуюЧасть(ТЗ_темп);
		тз_темп.свернуть("Номенклатура,Единица,Коэффициент,Коммент","Количество");
		тз_темп.выбратьСтроки();
		УдалитьСтроки();
		пока тз_темп.получитьСтроку()=1 Цикл
			НоваяСтрока();
			Номенклатура	= тз_темп.номенклатура;
			Количество		= тз_темп.Количество;
			Единица			= тз_темп.Единица;
			Коммент			= тз_темп.коммент;
			Коэффициент		= 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Функция НомерПиктограммы()
	Если Количество <> КоличествоФакт Тогда
		Возврат 2;
	Иначе
		Возврат 1;
	КонецЕсли;
КонецФункции // глНомерПиктограммы()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ
// формируем таблицу печатных форм
НомерТекущейФормы = 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
//ТаблицаПечФорм.НоваяСтрока();
//ТаблицаПечФорм.Название     = "Печатная форма";
//ТаблицаПечФорм.Кнопка       = "Печать";

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Анализ";
ТаблицаПечФорм.Кнопка       = "Анализ";

ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("РезервыТМЦ"          , РезервыТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);

ТЗ			= СоздатьОбъект("ТаблицаЗначений");
ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
ТЗ4			= СоздатьОбъект("ТаблицаЗначений");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		= СоздатьОбъект("Регистр.РезервыТМЦ2");
Рег4		= СоздатьОбъект("Регистр.ПартииНаличие");
Склад_темп	= СоздатьОбъект("Справочник.Склады");

ВнешнийВид		= 1;	//1 - классический вид, 2 - вид для разбора по складам

ПоОстаткам		= 1;
УчитыватьРезерв	= 1;

ОбработкаОбработки();

