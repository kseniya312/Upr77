//******************************************************************************
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров
                  
Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
// Для контроля необходимости пересчетов
Перем СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;

// для контроля изменений при записи 
Перем НачКонтрагент, НачДоговор, НачФирма;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//*****************************************************************************
// ЗаголовокФормы()
//
// Возвращаемое значение: 
//	Строка - Название документа
//
//Описание:
// Формирует название документа и заголовок формы диалога
Функция ЗаголовокФормы() 
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название  = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Если ФлагСвертки = 1  Тогда
		Заголовок = Заголовок + " (создан при свертке базы)";
	КонецЕсли;

	Форма.Заголовок(Заголовок);               

	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Установка видимости элементов диалога в зависимости от текущей закладки.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	    
	ДопВидимыйСлой = "";
	Если (ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателю)
	   и (ФлагСвертки = 0)
	Тогда
		ДопВидимыйСлой = ",СФ";
	КонецЕсли;
	
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,ИтогСуммаВал,Подвал" + ДопВидимыйСлой, 2);
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,ИтогСуммаВал,Подвал" + ДопВидимыйСлой, 2);
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостью()    

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Валюта = Договор.ВалютаВзаиморасчетов;
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	
	Если ФлагСвертки = 0 Тогда
	    Форма.СуммаВал.Заголовок("Сумма ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
		Форма.РамкаСуммаВал.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
		Форма.РамкаСуммаНДС.Заголовок("НДС ("+ТекстВалюты(глРубли)+")");
		Форма.РамкаСуммаНП .Заголовок("НП ("+ТекстВалюты(глРубли)+")");
	Иначе
		Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиКнигиПродаж Тогда
			Форма.СуммаВал.Заголовок("");
			Форма.РамкаСуммаВал.Заголовок("");
			Форма.РамкаСуммаНП .Заголовок("");
			Форма.РамкаСуммаНДС.Заголовок("НДС ("+ТекстВалюты(глРубли)+")");
		Иначе
			Форма.РамкаСуммаНП .Заголовок("НП ("+ТекстВалюты(глРубли)+")");
			Форма.РамкаСуммаНДС .Заголовок("");
		КонецЕсли;
	КонецЕсли;
	
	Форма.СуммаРуб.Заголовок("Сумма ("+ТекстВалюты(глРубли)+")");
	Форма.СуммаУпр.Заголовок("Сумма ("+ТекстВалюты(глДоллары)+")");
	
	
	Форма.РамкаСуммаРуб.Заголовок("Всего ("+ТекстВалюты(глРубли)+")");
	
	Форма.ИспользоватьСлой("ИтогСуммаВал", ?(Валюта = глРубли   , 0, 1));
	Форма.СуммаРуб.Доступность(?(Валюта = глРубли   , 0, 1));
	Форма.СуммаУпр.Доступность(?(глРубли = глДоллары, 0, ?(Валюта = глДоллары, 0, 1)));

КонецПроцедуры //ОбновитьНадписи()    

//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДоступностью()
	
	Если ВидДолга = Перечисление.ВидыДолга.ДолгЗаТовары Тогда
		Форма.Себестоимость.Доступность(1);
		
	Иначе
		Форма.Себестоимость.Доступность(0);
		Если Себестоимость <> 0 Тогда
			Себестоимость = 0;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФирмы()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = глСоздатьСписокЗначПеречисления("ВидыОперацийПоВводуОстатков", 
					"ОстаткиДолгаПокупателяНам,ОстаткиДолгаПокупателю");
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		Если ВидОперации <> ВремВидОперации Тогда
			Ответ = "Да";
			Если ВыбратьСтроки() = 1 Тогда
				Ответ = Вопрос("Строки документа будут удалены!
				               |Продолжить?", "Да+Нет", 60);
			КонецЕсли;                   
			Если Ответ = "Да" Тогда
		    	УдалитьСтроки();
				ВидОперации=ВремВидОперации;
			КонецЕсли;                   
		КонецЕсли;                   
	КонецЕсли;                   
	
КонецПроцедуры	//ПоКнопкеОперация()

//******************************************************************************
// ПересчетСумм()
//
// Параметры:
//  Нет
//
// Вызывается из формул элементов диалога:
//  "СуммаВал", "СуммаРуб", "СтавкаНДС", "СтавкаНП", "СуммаНП"
//
// Описание:
//  Пересчитывает значения реквизитов "СуммаРуб", "СуммаУпр", "СуммаНДС" и "СуммаНП".
//
Процедура ПересчетСумм()
	
	Реквизит = Форма.АктивныйЭлемент();
	
	Если Договор.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = Договор.ВалютаВзаиморасчетов;
	
	Если Реквизит = "СуммаВал" Тогда
		СуммаРуб = ?(Валюта = глРубли, СуммаВал, глПересчет(СуммаВал, Валюта, глКурсДляВалюты(Валюта, ДатаДок), глРубли, ДатаДок));
	КонецЕсли;
	
	Если (Прав(Реквизит, 3) <> "НДС") и (Прав(Реквизит, 2) <> "НП") Тогда
		Если глДоллары = глРубли Тогда
			СуммаУпр = СуммаРуб;
		Иначе
			СуммаУпр = ?(Валюта = глДоллары, СуммаВал, глПересчет(СуммаВал, Валюта, глКурсДляВалюты(Валюта, ДатаДок), глДоллары, ДатаДок));
		КонецЕсли;
	КонецЕсли;
	
	Если Реквизит <> "СуммаНП" Тогда
		СтНП     = СтавкаНП.Ставка / 100;
		СуммаНП  = СуммаРуб * СтНП / (1 + СтНП);
	КонецЕсли;
	
	СуммаНДС = (СуммаРуб - СуммаНП)  * глВыделяемыйНДС(СтавкаНДС);
	
КонецПроцедуры // ПересчетСумм()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.

Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда    
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		
		ОбновитьНадписи();    
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
Процедура ВводНового(Скопирован)  // предопределенная процедура
	                  
	Если (Скопирован = 1) И (ФлагСвертки = 1) Тогда	//копирование документа
		// нельзя копировать документ, полученный при свертке
		СтатусВозврата(0);
		Предупреждение("Нельзя копировать документ, созданный при сверке!", 60);
		Возврат;
	КонецЕсли;

	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		ВалВзаим		= Договор.ВалютаВзаиморасчетов;
		
		Если ВалВзаим <> глРубли Тогда
			КурсВалВзаим	= глКурсДляВалюты(ВалВзаим, ДатаДок);
			КурсРуб			= глКурсДляВалюты(глРубли, ДатаДок);
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
			    СуммаРуб	= глПересчет(СуммаВал, ВалВзаим, КурсВалВзаим, глРубли, КурсРуб);
				СуммаНП		= СуммаРуб * СтавкаНП.Ставка / (100 + СтавкаНП.Ставка);
				СуммаНДС	= (СуммаРуб - СуммаНП) * глВыделяемыйНДС(СтавкаНДС);
			КонецЦикла;
		КонецЕсли;
	Иначе
		ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателяНам;
		ФлагСвертки = 0;
	КонецЕсли;
	
КонецПроцедуры  // ВводНового()       

//******************************************************************************
Процедура ПриОткрытии() // предопределенная процедура            
	                                           
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		  	= Фирма;  
	СтарыйДоговор    		= Договор;
	СтарыйКонтрагент 		= Контрагент;
	
	НачальнаяДатаДокумента = ДатаДок;

	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;
	НачФирма		= Фирма;
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
    
	Если ФлагСвертки = 1 Тогда
		// выписан автоматически при свертке
		Форма.ТолькоПросмотр(1);
		
		Если ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиКнигиПродаж Тогда
			Форма.СуммаУпр.Видимость(0);
			Форма.Себестоимость.Видимость(0);
			
			Форма.СтавкаНП.Видимость(0);
			Форма.СуммаНП.Видимость(0);
		Иначе
			Форма.СтавкаНДС.Видимость(0);
			Форма.СуммаНДС.Видимость(0);
		КонецЕсли;
	Иначе
		// при ручном вводе реквизит табличной части КредДокумент не используется
		Форма.КредДокумент.Видимость(0);
		СписокДействий.ДобавитьЗначение("Структура подчиненности");
		СписокДействий.ДобавитьЗначение("Ввести на основании");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	Форма.СуммаВал .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаРуб .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП .ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП  .ВыполнятьФормулуТолькоПриИзменении(1);
	
		Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		НомерЗакладки	= 1;
	Иначе
		// введенный документ открываем на второй закладке
		НомерЗакладки	= 2;
	КонецЕсли;
	
	Форма.Закладки.ТекущаяСтрока(НомерЗакладки);
	УправлениеВидимостью(НомерЗакладки);
    ОбновитьНадписи();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		
КонецПроцедуры          

//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью(НомерЗакладки);
	ОбновитьНадписи();
	
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	
	УправлениеДоступностью();
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)
	
	Если Элемент = "ВидДолга" Тогда
		
		Если      ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателяНам Тогда
			СписокВидов = глСоздатьСписокЗначПеречисления("ВидыДолга", "ДолгЗаТовары,ДолгЗаТоварыПринятые,ДолгЗаУслуги,ДолгЗаПродукцию,ДолгЗаМатериалы,Аванс");
		ИначеЕсли ВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателю Тогда
			СписокВидов = глСоздатьСписокЗначПеречисления("ВидыДолга", "Аванс,ДолгЗаТовары,ДолгЗаТоварыПринятые,ДолгЗаУслуги,ДолгЗаПродукцию,ДолгЗаМатериалы");
		КонецЕсли;
		
		СписокВидов.ВыбратьЗначение(ВидДолга,,,,2);
		ФлагПродолжения = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//*****************************************************************************
Процедура ПриЗаписи() //Предопределенная процедура
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);  
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
		    СтатусВозврата(0);
			Предупреждение(ОписаниеОш, 60);
		Иначе
			НачКонтрагент	= Контрагент;
			НачДоговор		= Договор;
			НачФирма		= Фирма;
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);               
КонецПроцедуры    
                                            
//******************************************************************************

ВидСчетаФактуры = "СчетФактураВыданный";
