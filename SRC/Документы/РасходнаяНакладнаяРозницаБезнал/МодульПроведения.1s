Перем ФирмаДляОстатковТМЦ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//       
//******************************************************************************
// КонтрольДатыОплаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  В случае, если дата оплаты корректна возвращается пустая строка, 
//  в противном случае - соответствующий текст предупреждения.
//
// Описание:
//  Проверяет соответствует ли дата оплаты документа глубине кредита, заданного
//  для данного договора. Вызывается из модулей документов реализации.
//
Функция КонтрольДатыОплаты() 
	Возврат "";	
КонецФункции // глКонтрольДатыОплаты()

//******************************************************************************
// КонтрольКредитаПройден(ВремПокупатели)
//
// Параметры:
//  ВремПокупатели- регистр "Покупатели", рассчитанный при необходимости
//
// Возвращаемое значение:
//  1 - контроль пройден (можно проводить), 0 - не пройден (не проводить!).
//
// Описание:
//  Проводит контроль величины кредита.
//
Функция КонтрольКредитаПройден(ВремПокупатели)
	
	Возврат 1;
	
КонецФункции // КонтрольКредитаПройден()

Функция КонтрольКоличества()
	Перем ТаблицаТоваров;
	Перем ТаблицаСчета;
	
	ТаблицаТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТоваров.НоваяКолонка("Номенклатура");
	ТаблицаТоваров.НоваяКолонка("Количество");
	ТаблицаСчета = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаСчета.НоваяКолонка("Номенклатура");
	ТаблицаСчета.НоваяКолонка("Количество");
	
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаСчета, "Номенклатура, Количество");
	ТаблицаСчета.Свернуть("Номенклатура", "Количество");

	сп	= СоздатьОбъект("Документ");
	сп.ВыбратьПодчиненныеДокументы(,,ДокОснование);
	Пока сп.ПолучитьДокумент() = 1 Цикл
		если (Найти(сп.Вид(), "РасходнаяНакладная") > 0) Тогда
			Если (Сп.НомерДок <> НомерДок) и (Сп.Проведен() = 1) Тогда
				Сп.ВыбратьСтроки();
				Пока Сп.ПолучитьСтроку() = 1 Цикл
					ТаблицаТоваров.НОваяСтрока();
					ТаблицаТоваров.Номенклатура = Сп.Номенклатура;
					ТаблицаТОваров.Количество = Сп.Количество;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	ТаблицаТоваров.Свернуть("Номенклатура", "Количество");
	ВыбратьСтроки();
	ЗначениеВозврата = 1;
	Пока ПолучитьСтроку() = 1 Цикл
		КолПродано = Количество;
		НомСтр = "";
		Если ТаблицаСчета.НайтиЗначение (Номенклатура, НомСтр, "Номенклатура")	= 1 Тогда
			ТаблицаСчета.ПолучитьСтрокуПоНомеру(НомСтр);
			КолВСчете = ТаблицаСчета.Количество;
			НомСтр = "";
			Если ТаблицаТоваров.НайтиЗначение(Номенклатура, НомСтр, "Номенклатура")	= 1 Тогда
				ТаблицаТоваров.ПолучитьСтрокуПоНомеру(НомСтр);
				КолПродано = КолПродано + ТаблицаТоваров.Количество; 
			КонецЕсли;
			Если Константа.ПроверкаКолваЗаказанногоРНРБн = 1 Тогда
			Если КолПродано > КолВСчете Тогда
				Сообщить("Обнаружено превышение заказанного количества товара:" +
						 Номенклатура + " заказано:" + КолВСчете + " продается:" + КолПродано + ", счет №" + ДокОснование.НомерДок);
				ЗначениеВозврата = 0;
			КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗначениеВозврата;
КонецФункции

//******************************************************************************
// ВидДолгаПоСтатусу(СтатусПартии)
//
// Параметры:
//  СтатусПартии - значение перечисления статуса партии
//
// Возвращаемое значение:
//  Значение перечисления видов долга.
//
// Описание:
//  Возвращает вид долга, соответствующий статусу партии.
//
Функция ВидДолгаПоСтатусу(СтатусПартии)
		
	Если (СтатусПартии	= глСП.Т_Купленный) или
        (СтатусПартии	= глСП.Т_ВРознице) или
		(СтатусПартии	= глСП.Т_Тара) Тогда     
		Если СтатусПартии = глСП.Т_ВРознице Тогда
		    глСообщениеПроведения("На складе обнаружены розничные партии!", ТекущийДокумент(),,,1);
		КонецЕсли;
		Возврат глВД.ДолгЗаТовары;
		
	ИначеЕсли СтатусПартии	= глСП.Т_Принятый Тогда
		Возврат глВД.ДолгЗаТоварыПринятые;
		
	ИначеЕсли СтатусПартии	= глСП.Продукция Тогда
		Возврат глВД.ДолгЗаПродукцию;
		
	ИначеЕсли Лев(СтатусПартии.Идентификатор(),2)	= "М_" Тогда
		Возврат глВД.ДолгЗаМатериалы;
		
	Иначе
		глСообщениеПроведения("Неизвестный статус партии: "+СтатусПартии,ТекущийДокумент(),,,1);
	КонецЕсли;	
	
КонецФункции // ВидДолгаПоСтатусу()
    

//******************************************************************************
//			ДвижениеЗаявокПокупателя()
//	Тут мы списываем с регистра Заявки с учётом РезервыТМЦ2 и прав 
//		пользователя на влезания в чужой резерв
Процедура ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2)

КонецПроцедуры


//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий, ТаблСписПартийКом;    
	Перем ВремРегистры;
	Перем ВремЗаявки, ВремЗаказыЗаявки, ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие, ВремПокупатели;  

	
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
   	
	ТаблицаУслуг = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ   = глПодготовитьТаблицуДокумента(Контекст,1,ТаблицаУслуг);
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");  
	
	// Сформируем список статусов партий
	СтатусПартии = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
	
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремЗаявки                      = ВремРегистры.Заявки;	//Оставлено для совместимости
	//////ВремЗаказыЗаявки                = ВремРегистры.ЗаказыЗаявки;
	ВремОстаткиТМЦ  				= ВремРегистры.ОстаткиТМЦ;
	ВремРезервыТМЦ  				= ВремРегистры.РезервыТМЦ;	//Оставлено для совместимости
	ВремРезервыТМЦ2  				= ВремРегистры.РезервыТМЦ2;	//Оставлено для совместимости
	ВремПартииНаличие 				= ВремРегистры.ПартииНаличие;
	ВремПокупатели 					= ВремРегистры.Покупатели;	//Учёт на отдельном регистре взаиморасчётов
	    
//	ФильтрЗаявок         (ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки);	//Стандартый механизм изменён
	глФильтрОстатковТМЦ  (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремОстаткиТМЦ,ВремРезервыТМЦ  );
	глФильтрПартийТМЦ    (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремПартииНаличие              );     
	//Если КодОперации=Перечисление.КодыОпераций.Продажа Тогда
	глФильтрДолгов   (Контекст, ДоговорЮЛ, 	СписокПараметров, 	ВремПокупатели                 );				//Этого по ЮрЛицуК
	//КонецЕсли;                  
	
	Если ИтогиАктуальны()=0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	//// контроль величины кредита клиенту (с учетом права пользователя превышать его)
	//Если КодОперации = глКО.Продажа Тогда
	//	Если КонтрольКредитаПройден(ВремПокупатели) = 0 Тогда
	//		Возврат;
	//	КонецЕсли;   
	//КонецЕсли;

	//******************************************************************************
	// Всё что касается заявки и Регистра РезервыТМЦ2
	//	СТАНДАРТНЫЙ МЕХАНИЗМ РАБОТЫ С ЗАЯВКАМИ ИЗМЕНЁН!!!!
//	ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2); // по ТМЦ
	////////ДвижениеЗаявокПокупателя(ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ); // по услугам
	
	// остатки ТМЦ
	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаТМЦ,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
		Возврат;
	КонецЕсли;
	              
	// партии ТМЦ
	глСписаниеПартийТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом);
	                   
	Если КодОперации=Перечисление.КодыОпераций.Продажа Тогда   
		
		// движение оборотного регистра "продажи" 
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									ТаблСписПартий.Партия.Поставщик,
									ТаблСписПартий.Номенклатура,
									ТаблСписПартий.Количество,
									ТаблСписПартий.СуммаУпр,
									ТаблСписПартий.СуммаПродУпр,
									Объект);
		КонецЦикла;
		
		ТаблСписПартий.Свернуть("СтатусПартии,СтавкаНП,СтавкаНДС,ДоговорКомитента","СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СуммаБезНДС");
		ТаблСписПартий.НоваяКолонка("КредДокумент");
		ТаблСписПартий.НоваяКолонка("ВидДолга");
		ТаблСписПартий.НоваяКолонка("Сумма");
		ТаблСписПартий.НоваяКолонка("СуммаУпр");
		ТаблСписПартий.НоваяКолонка("СуммаРуб");
		ТаблСписПартий.НоваяКолонка("СуммаНДС");
		ТаблСписПартий.НоваяКолонка("СуммаНП");
		ТаблСписПартий.НоваяКолонка("Себестоимость");
		ТаблСписПартий.НоваяКолонка("ОблагаетсяНП");
		
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			ТаблСписПартий.КредДокумент = ТекущийДокумент();
			ТаблСписПартий.ВидДолга		= ВидДолгаПоСтатусу(ТаблСписПартий.СтатусПартии);
			ТаблСписПартий.Себестоимость= ТаблСписПартий.СуммаБезНДС;
			ТаблСписПартий.СуммаНДС		= ТаблСписПартий.НДСПрод;
		 	ТаблСписПартий.СуммаНП		= ТаблСписПартий.НППрод;
			ТаблСписПартий.Сумма		= ТаблСписПартий.СуммаПрод;
			ТаблСписПартий.СуммаУпр		= ТаблСписПартий.СуммаПродУпр;
			ТаблСписПартий.СуммаРуб		= ТаблСписПартий.СуммаПродРуб;
			ТаблСписПартий.ОблагаетсяНП = УчитыватьНП;
		КонецЦикла;                                                                       
		                                                            
		СписокПараметров.Установить("ЗнакДвижения", 1); // идет увеличение долга
		глДвижениеДолгов(Контекст,ДоговорЮЛ,ТаблСписПартий,СписокПараметров,ВремПокупатели);
		
		// запомним, что мы продали принятые на комиссию товары...
		ТаблСписПартийКом.ВыбратьСтроки();
		Пока ТаблСписПартийКом.ПолучитьСтроку()=1 Цикл                    
			Регистр.РеализованныйТовар.Фирма			= ТаблСписПартийКом.Фирма;
			Регистр.РеализованныйТовар.Договор			= ТаблСписПартийКом.Партия.ДоговорПоставщика;
			Регистр.РеализованныйТовар.Номенклатура 	= ТаблСписПартийКом.Номенклатура;
			Регистр.РеализованныйТовар.Партия 			= ТаблСписПартийКом.Партия;
			Регистр.РеализованныйТовар.ДокПродажи		= ТекущийДокумент();
			Регистр.РеализованныйТовар.Количество 		= ТаблСписПартийКом.Количество;
			Регистр.РеализованныйТовар.ПродСтоимость 	= ТаблСписПартийКом.СуммаПродРуб - ТаблСписПартийКом.НППрод;
			Регистр.РеализованныйТовар.ДвижениеПриходВыполнить();
		КонецЦикла;                                                                       
		                                                            
		// реализация услуг  
		глДвижениеПартийУслуг(Контекст, ТаблицаУслуг, СписокПараметров);
		
		// сначала увеличим обороты продаж по услугам
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									"",
									ТаблицаУслуг.Номенклатура,
									ТаблицаУслуг.Количество,
									0,
									ТаблицаУслуг.СуммаУпр,
									Объект);
		КонецЦикла;
		
		// теперь задолженность покупателя за отпущенные услуги
		СписокПараметров.Установить("ЗнакДвижения",1); // увеличился долг клиента
		
		ТаблицаУслуг.Свернуть("СтавкаНДС,СтавкаНП","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
		
		ТаблицаУслуг.НоваяКолонка("КредДокумент");
		ТаблицаУслуг.НоваяКолонка("ВидДолга");
		ТаблицаУслуг.НоваяКолонка("Себестоимость");
		ТаблицаУслуг.НоваяКолонка("ДоговорКомитента");
		ТаблицаУслуг.НоваяКолонка("ОблагаетсяНП");
	
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
		
			ТаблицаУслуг.КредДокумент 	= ТекущийДокумент();
			ТаблицаУслуг.ВидДолга		= глВД.ДолгЗаУслуги;
			ТаблицаУслуг.Себестоимость	= 0;
			ТаблицаУслуг.ОблагаетсяНП 	= УчитыватьНП;
		
		КонецЦикла;                                                                       
	
		глДвижениеДолгов(Контекст,ДоговорЮЛ,ТаблицаУслуг,СписокПараметров,ВремПокупатели);
		
	КонецЕсли;
	
	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Контрагент,Договор,КонтрагентЮЛ,ДоговорЮЛ")=0 Тогда
		Возврат;
	КонецЕсли;
	              
	Если (Склад.РозничныйСклад = 1) Тогда
	    глНеПроводить(Контекст,"Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с оптового склада!");
		Возврат;             
	КонецЕсли;
    
	Если ДокОснование.Вид() = "СчетБнРозница" Тогда
		Если КонтрольКоличества() = 0 Тогда
	    глНеПроводить(Контекст,"В документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" обнаружено
		|превышение заказанного количества товара!");
			
		Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	Если НазваниеНабораПрав() <> "Администратор"  Тогда
		Если (глПроверитьОплату(Контекст) = 0) и (КонтрагентЮЛ.флМожноОтгружатьБезОплаты = 0) Тогда 
			глНеПроводить(Контекст,"Документ """+ глНазваниеДокументаВЖурнале(Контекст)+"""
			|нужно провести оплату. Отгрузка без оплаты запрещена!");
			Возврат;	
		КонецЕсли;
	КонецЕсли;   
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);

	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Регистр.РезервыРозницы.КредДокумент = ДокОснование;
		Регистр.РезервыРозницы.Номенклатура = Номенклатура;
		Регистр.РезервыРозницы.Количество 	= Количество;
		Регистр.РезервыРозницы.СуммаРуб 	= Сумма;
		Регистр.РезервыРозницы.ДвижениеРасходВыполнить();
	КонецЦикла;       
	
	глЗакрытьРезервы(Контекст);
КонецПроцедуры //ОбработкаПроведения()
       

Процедура ОбработкаУдаленияПроведения()
	ПодчДокумент = СоздатьОбъект("Документ");
	ПодчДокумент.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
	Пока ПодчДокумент.ПолучитьДокумент() = 1 Цикл
		Если ((ПодчДокумент.Вид() = "Реализация"))
		и (ПодчДокумент.Проведен() = 1) Тогда
			Попытка
				ПодчДокумент.СделатьНеПроведенным();
				//ТекстСообщения = ТекстСообщения + ПодчДокумент+РазделительСтрок;
				Сообщить("Снят с проведения документ: "+ПодчДокумент);
			Исключение
			КонецПопытки;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

