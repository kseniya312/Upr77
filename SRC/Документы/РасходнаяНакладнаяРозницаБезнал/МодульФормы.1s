Перем ДанныеПоДолгам, ТекстКлиента;
Перем КлиентКредит;
Перем СтараяОплата, СтарыйКонтрагент, СтарыйКонтрагентЮЛ;	//Работа с обновлением данных
Перем ТЗ_Долги;	//Тут развёрнутая информация по текущим долгам
Перем ТЗ_Проценты;	//Тут развёрнутая информация по текущим процентам
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем МожноВДолг;	//Признак продажи в долг
Перем текОстаток, Склад_Темп, рег1, ТЗ, СтараяНоменклатура;
Перем СписокДействий;
Перем __Автор, ОстатокБонусов,СтараяНоменклатураФирм;
Перем СписокДоступныхПроектов; //Список доступных для выбора проектов

Процедура ОбновиНадписи() Далее
             
Функция ПолучитьНомерПиктограммы()
	ПиктограммаОстатковФирмы = глНетОстаткаПоФирме(Контекст, Проект);
КонецФункции	
       
Процедура ПолучитьНомераПиктограмм()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ПолучитьНомерПиктограммы();  
	КонецЦикла;	
КонецПроцедуры	
                  
Процедура кнПрибратьПартии()     
	глПрибратьПартии(Контекст, Проект);
КонецПроцедуры

Процедура УстановитьДоступностьФлагБонусы()
	Если Контрагент.Выбран() = 1 Тогда
		Если (Контрагент.флТолькоБонусы = 1) 
		и (сокрЛП(ИмяПользователя())<>"Филиппов")
		и (сокрЛП(ИмяПользователя())<>"Кожемякин") Тогда
			Форма.флНачислитьБонусы.Доступность(0);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииТипЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		глПересчетТЧ_розница(Контекст, "ТипЦен");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ПриИзмененииТипЦены()

Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;

	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

Процедура ПриВыбореПроекта()
	Если СписокДоступныхПроектов.НайтиЗначение(Проект) = 0 Тогда
		Если Вопрос("Для данного вида документа установлено ограничение выбираемых проектов." + РазделительСтрок +
					"Выбрать из списка разрешенных?", 4) = 7 Тогда
			Проект = "";
		Иначе
			Если СписокДоступныхПроектов.ВыбратьЗначение(Проект) = 0 Тогда
				Проект = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриВыбореЗначения(Об)
	Если Об="кнВводНаОсновании" Тогда 
		Если Выбран()=0 Тогда
			Сообщить("Документ необходимо записать");
			Возврат;
		КонецЕсли;	
		Док 			= СоздатьОбъект("Документ");
		ДокРеализация   = СоздатьОбъект("Документ.Реализация");
		НашлиРеализация = 0;
		ПроведенРеализация = 0;
		Док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока Док.ПолучитьДокумент()=1 Цикл
			Если Док.Вид() = "Реализация" Тогда
				ДокРеализация.НайтиДокумент(Док);
				НашлиРеализация = 1;
				Если ДокРеализация.Проведен()=1 Тогда
					ПроведенРеализация = 1;	
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		Если (НашлиРеализация = 1) и (ПроведенРеализация = 0) Тогда
			Если Вопрос("Есть не проведенный документ реализация"+РазделительСтрок+"Перезаполнить?","Да+Нет")="Да" Тогда
				Если ДокРеализация.ПометкаУдаления()=1 Тогда
					ДокРеализация.СнятьПометкуУдаления();
				КонецЕсли;	
				ОткрытьФорму(ДокРеализация.ТекущийДокумент(), Контекст);
			Иначе
				глВыписатьПодчиненныйДокумент(Контекст);
			КонецЕсли;
		ИначеЕсли (НашлиРеализация = 1) и (ПроведенРеализация = 1) Тогда
			Сообщить("Документ "+ДокРеализация+" сформирован и проведен");
		Иначе
			глВыписатьПодчиненныйДокумент(Контекст);	
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

//Принимает решение о возможности частичной оплаты клиентом
//плюс анализирует правильность внесённых данных
Процедура РассмотриВозможностьКредитов()
	
//	Если СтараяОплата=Оплачено Тогда
//	    возврат;
//	КонецЕсли;
//	
//	СуммаКредита	= Контрагент.ОсновнойДоговор.СуммаКредита;	//на какую сумму возможен кредит, ВСЕ ВЗАИМОРАСЧЁТЫ ТОЛЬКО ПО ОСНОВНОМУ ДОГОВОРУ!!!
////	НеКонтрКредит	= Договор.НеКонтролироватьКредит;
//	ВсегоОплатить	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
//	Если (СуммаКредита=0) Тогда
//		//Форма.Оплачено.Доступность(0);
//		Оплачено	= ВсегоОплатить;
//	ИначеЕсли ВсегоОплатить-Оплачено>СуммаКредита Тогда
//		Форма.Оплачено.Доступность(1);
//		Сообщить("Вы превысили кредит клиента. Удостоверьтесь в правильности указанной суммы оплаты!");	
//		Сообщить("		Максимально допустимый кредит для данного клиента: "+глФРМ(СуммаКредита)+" руб.");
//		Сообщить("		Минимальная сумма оплаты составляет: "+глФРМ(ВсегоОплатить-СуммаКредита));
//		Сообщить("		Для получения большей скидки, вам необходимо разрешение руководства.");
//		Оплачено	= ВсегоОплатить;
//	ИначеЕсли Оплачено>ВсегоОплатить Тогда
//		Оплачено	= ВсегоОплатить;
//		Сообщить("Нельзя брать с человека больше денег, чем он должен.");
//		Сообщить("		Сумма оплаты изменена до максимально допустимой.");
//	КонецЕсли;
//	СтараяОплата	= Оплачено;
КонецПроцедуры


//Производит пересчёт скидок в текущем документе
//	в соответствии с параметрами заданными в карточке клиента
//	режим = 1 - пересчитать ТЧ
//	режим = 0 - ничего не пересчитывать, а только обновить форму
Процедура РасчётСкидки(Режим)
	
	Если ПустоеЗначение(Контрагент)=0 Тогда
		
		СкидкаКонтрагента = Контрагент.Скидка_Розница.Получить(ДатаДок);
		
		Если Режим = 1 Тогда	//полный пересчёт
			
			Если Контрагент.СкидкаСразу.Получить(ДатаДок)=1 Тогда
				//++Валерий МЭТР: механизм деления скидки
				ВыданоСоСкидкой	= 1;
				Скидка = СкидкаКонтрагента;
				//--Валерий МЭТР: механизм деления скидки
			КонецЕсли;
			
			//++Валерий МЭТР: механизм деления скидки
			Если Скидка > 0 Тогда
				ВыданоСоСкидкой = 1;
			ИначеЕсли Контрагент.СкидкаСразу.Получить(ДатаДок) = 0 Тогда
				ВыданоСоСкидкой = 0;
			КонецЕсли;             
			//--Валерий МЭТР: механизм деления скидки
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Скидка = Контрагент.Скидка_Розница.Получить(ДатаДок);
				Если Скидка > СкидкаКонтрагента Тогда
					Скидка = СкидкаКонтрагента;
				КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";				
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
;
				Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 Тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
					Форма.ВыданоСоСкидкой.Доступность(0);
				Иначе
					Форма.ВыданоСоСкидкой.Доступность(1);
				КонецЕсли;
				глПересчитатьСкидкиРозница(Контекст);
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0% -=Допустима скидка: "+Контрагент.Скидка_Розница.Получить(ДатаДок)+"%=-";
				//Скидка			= 0;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				глПересчитатьСкидкиРозница(Контекст);
			КонецЕсли;
		
		ИначеЕсли Режим <> 1 Тогда	//Иногда надо просто обновить экранные данные, без пересчёта таблицы
			
			Если ВыданоСоСкидкой=1 Тогда				
				//++Валерий МЭТР: механизм деления скидки				
				//_Скидка			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 Тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
				КонецЕсли;
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0%"+" -=Допустима скидка: "+Скидка+"%=-";
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//Проверка на наличие долгов клиента и наличие процентов для выплаты
Процедура ПроверкаКредитов(режим)
	Перем Запрос, ТекстЗапроса,а;
	Запрос 	= СоздатьОбъект("Запрос");
	Состояние("Расчёт таблицы текущих долгов...");
	если режим=1 тогда	//Мы просто рассчитаем сумму без доп. аналитики
	ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
	ДанныеПоДолгам	= "Долги: ";
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиСводная)
		|Без итогов;
		|Клиент = Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия = Регистр.Покупатели_розница.ВидВзаимодействия;
		|СуммаРуб = Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
		КонецЕсли;
	ИначеЕсли режим=2 Тогда	//Надо вывести информацию в виде таблицы
	ДанныеПоДолгам	= "Долги: ";
		ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиТаблица)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим долгам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				ТЗ_Долги.СуммаРубКонОст=(-1)*ТЗ_Долги.СуммаРубКонОст;
				Таб.ВывестиСекцию("Строка_1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("ДанныеПоДолгам","");
		КонецЕсли;
	ИначеЕсли режим=3 Тогда	//Надо вывести информацию о бонусах в виде таблицы
		//ВвестиЧисло(а,"Пароль",6,0,30);
		//Если а<>281280 Тогда
		//    возврат;
		//КонецЕсли;
		ВЗ		= Перечисление.ВидВзаимодействия.Проценты;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеБонусы)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих бонусах...");
		Запрос.Выгрузить(ТЗ_Долги);
		//Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
		//	ДанныеПоДолгам	= "Долги: не обнаружены";
		//	Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		//Иначе
		//	Таб = СоздатьОбъект("Таблица");
		//	Таб.ИсходнаяТаблица("ДанныеПоДолгам");
		//	Название = "Данные по текущим бонусам";
		//	Таб.ВывестиСекцию("Шапка");
		//	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
		//	ТЗ_Долги.ВыбратьСтроки();
		//	Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
		//		Таб.ВывестиСекцию("Строка_1");
		//	КонецЦикла;
		//	Таб.ВывестиСекцию("Подвал");
		//	Таб.ТолькоПросмотр(1);
		//	Таб.Показать("Данные по бонусам","");
		//КонецЕсли;
		ТЗ_Проценты = глНайтиПроцентыИзДок2(Контрагент,"",Дата(0),Дата(0),"");
		Если (ТЗ_Долги.Итог("СуммаРубКонОст")=0)и(ТЗ_Проценты.Итог("Сумма")=0) Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
			Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим бонусам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			итого=0;
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				Если ТЗ_Долги.КредДокумент.Вид()<>"РасходнаяНакладнаяРозницаБезнал" тогда
				Таб.ВывестиСекцию("Строка_1");
				итого=итого+ТЗ_Долги.СуммаРубКонОст;
				конецЕсли;
			КонецЦикла;
			ТЗ_Проценты.ВыбратьСтроки();
			Пока ТЗ_Проценты.ПолучитьСтроку()=1 Цикл
				Таб.ВывестиСекцию("Строка_2");
				итого=итого+ТЗ_Проценты.Сумма;
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал_2");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("Данные по бонусам","");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Отображает остаток товара, на указанном складе в момент ТА
Процедура ПокажиКоличество()
////	если стараяНоменклатура<>Номенклатура.ТекущийЭлемент() Тогда
//	спис=СоздатьОбъект("СписокЗначений");
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку()=1 Цикл
//		спис.ДобавитьЗначение(Номенклатура.ТекущийЭлемент());
//	КонецЦикла;
//		Склад_Темп.ВыбратьЭлементы();
//		Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
//			если сокрЛП(Склад_темп)=сокрЛП(Склад) Тогда
//				Рег1.УстановитьФильтр(,спис,Склад_темп);
//				Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
//				
//				ВыбратьСтроки();
//				пока ПолучитьСтроку()=1 Цикл
//					х			= ПолучитьПустоеЗначение(х);
//					у			= 2;
//					Если ТЗ.НайтиЗначение(Номенклатура.ТекущийЭлемент(),х,у)=1 Тогда
//						Ост	= ТЗ.ПолучитьЗначение(х,"Количество");
//					Иначе
//						Ост	= 0;
//					КонецЕсли;
//				КонецЦикла;
//				Возврат;
//			КонецЕсли;
//		КонецЦикла;
////	КонецЕсли;
//	Форма.Обновить(0);
КонецПроцедуры


//Производит пересчёт всех необходимых данных
Процедура ОбновиНадписи()
	РассмотриВозможностьКредитов();	
	РасчётСкидки(0);
	ПокажиКоличество();
КонецПроцедуры

//Восстановим все параметры по умолчанию, а потом уже 
//решим чего надо закрыть, а чего оставить у данного клиента
Процедура ИзменениеКлиента()
	Если Контрагент = СтарыйКонтрагент Тогда
		РасчётСкидки(0);
		возврат;
	КонецЕсли;
	Если Контрагент.РозничныйКлиент<>1 Тогда
		Сообщить("Клиент ("+Контрагент+") не является розничным покупателем - его нельзя добавлять в этот документ!","!");
		Контрагент = СтарыйКонтрагент;
	КонецЕсли;
	Договор	= Контрагент.ОсновнойДоговор;
	ВыданоСоСкидкой	= 0;
	Форма.ВыданоСоСкидкой.Доступность(1);
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	СтарыйКонтрагент= Контрагент;  
	
	//++Ерошенко 03.05.2007
	ПроверитьКонтрагентаВДокументе(Контрагент); 
	//--Ерошенко                 
	УстановитьДоступностьФлагБонусы();
КонецПроцедуры

//-----------------------------------------------      
Функция СуммаПрописьюРасхНакл()
	Перем ПолнаяСумма;
	
	ПолнаяСумма = Итог("Сумма");
    ВалютаПечати=Валюта;
	Если ФС.СуществуетФайл(КаталогИБ()+ВалютаПечати.ИмяФайлаПрописи)=1 Тогда
		Пропись(ВалютаПечати.ИмяФайлаПрописи);
	КонецЕсли;
	СтрокаСуммы=Формат(ПолнаяСумма,"ЧПДС");
	Пропись("");
	Возврат СтрокаСуммы;
КонецФункции

Процедура ПечатьТовЧек()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ТовЧек");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	ВыбратьСтроки();
	ном=0;
	Пока ПолучитьСтроку()=1 Цикл
		ном=ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	ПечИтогоСумма=СуммаПрописьюРасхНакл();
	Таб.ВывестиСекцию("Подвал");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Товарный чек","");
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьТовЧек();
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Функция ВыборПродавца()
	
	СписокПродавцов	= "";	
	СписокПродавцов = СоздатьОбъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.Родитель.Наименование = "Продавцы" тогда
			Если Спр.ОсновнойСклад = глПользователь.ОсновнойСклад тогда
			 	СписокПродавцов.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;		 	
		КонецЕсли;	
	КонецЦикла;	
	__Автор = Автор;        
	Если СписокПродавцов.ВыбратьЗначение(__Автор,"Автор документа") = 1 тогда
		Возврат __Автор;
	иначе 
		Возврат "";
	КонецЕсли;
КонецФункции


//******************************************************************************
//		ШТАТНЫЕ ПРОЦЕДУРЫ

Процедура ВводНового(Скопирован)

	Предупреждение("Данный тип документов не предназначен для непосредсвенного ввода информации...
	|Он заполняется только через механизм оснований!",100);
	СтатусВозврата(0);
	Возврат;
	
//	
//	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
//	РасчётСкидки(1);
//	ПроверкаКредитов(1);
//	УстановитьНовыйНомер("Рн"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
////******************************************************************************
//	//Дополнения для продавцов
//	Если НазваниеНабораПрав() = "Продавец_розница" тогда
//		Форма.Склад.Доступность(0);
//		Форма.ТипЦен.Доступность(0);
//		Форма.ДатаДок.Доступность(0);
//		Форма.НомерДок.Доступность(0);
//		Форма.ЦенаСоСкидкой.Доступность(0);
//		Форма.Сумма.Доступность(0);
//		Форма.Единица.Доступность(0);
//		Если МожноВДолг=1 Тогда
//			Форма.Оплачено.Доступность(1);
//		Иначе
//			//Форма.Оплачено.Доступность(0);
//		КонецЕсли;
//		
//		_Автор = ВыборПродавца();
//		Если ПустоеЗначение(_Автор) = 0 тогда
//			Автор  = _Автор;
//		иначе 
//			Предупреждение("Продавец не выбран !
//			|Документ не может быть введен!", 5);
//			СтатусВозврата(0); Возврат;
//		КонецЕсли;	
//	КонецЕсли;
КонецПроцедуры

Процедура ПечатьТТНСчФ()
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
	Параметры.ДобавитьЗначение(0, "Устройство");
	Параметры.ДобавитьЗначение(1, "КоличествоКопий");
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("ТТН");
	Меню.ДобавитьЗначение("Счет-Фактура (выданная)");
	Меню.ДобавитьЗначение("Торг-12");
	поз = 1;
	Если Меню.ВыбратьЗначение(,,поз,,1)=0 Тогда
		Возврат;
	КонецЕсли;

	Если поз = 1 Тогда
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+"TTNPRINT.ERT");
	ИначеЕсли поз = 2 Тогда
		Док 			= СоздатьОбъект("Документ");
		СчФ 			= СоздатьОбъект("Документ.СчетФактураВыданный");
		ДокРеализация   = СоздатьОбъект("Документ.Реализация");
		НашлиРеализация = 0;
		Док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока Док.ПолучитьДокумент()=1 Цикл
			Если Док.Вид() = "Реализация" Тогда
				ДокРеализация.НайтиДокумент(Док);
				НашлиРеализация = 1;
			КонецЕсли;	
		КонецЦикла;
		
		НашлиСчФ    = 0;
		Если НашлиРеализация = 1 Тогда
			Док.ВыбратьПодчиненныеДокументы(,,ДокРеализация.ТекущийДокумент());
			Пока Док.ПолучитьДокумент()=1 Цикл
				Если Док.Вид() = "СчетФактураВыданный" Тогда
					СчФ.НайтиДокумент(Док);
					НашлиСчФ = 1;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		Если НашлиСчФ = 1 Тогда
			Параметры.ДобавитьЗначение("ПечатьНаЭкран","Команда");
			ОткрытьФорму(СчФ.ТекущийДокумент(), Параметры);
		Иначе
			Сообщить("Документ Счет-Фактура (выданный) не сформирована");
		КонецЕсли;	
	ИначеЕсли поз = 3 ТОгда
		Док 			= СоздатьОбъект("Документ");
		СчФ 			= СоздатьОбъект("Документ.СчетФактураВыданный");
		ДокРеализация   = СоздатьОбъект("Документ.Реализация");
		НашлиРеализация = 0;
		Док.ВыбратьПодчиненныеДокументы(,,ТекущийДокумент());
		Пока Док.ПолучитьДокумент()=1 Цикл
			Если Док.Вид() = "Реализация" Тогда
				ДокРеализация.НайтиДокумент(Док);
				НашлиРеализация = 1;
			КонецЕсли;	
		КонецЦикла;
		Если НашлиРеализация = 1 Тогда
			Парам = СоздатьОбъект("СписокЗначений");
			Парам.ДобавитьЗначение("ПечатьНаЭкран","Команда");
			ОткрытьФорму(ДокРеализация.ТекущийДокумент(), Парам);
		Иначе
			Сообщить("Документ Счет-Фактура (выданный) не сформирована");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
        

Процедура ПриОткрытии()
	если глПроверкаПравДоступа(Контекст)=0 Тогда
		Предупреждение("У вас нет прав на доступ к данному документу!",30);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	ПриЗаписиПерепроводить(1);
	Форма.Номенклатура.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ЦенаСоСкидкой.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Оплачено.ВыполнятьФормулуТолькоПриИзменении(1);
	ПроверкаКредитов(1); 
	если ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда
		ВремЗалог=ДокОснование.Оплачено;
		Если ВремЗалог<>Залог тогда
			Залог=ВремЗалог;
		КонецЕсли;
	Иначе
		мЗаявкаКлиента = глПолучитьЗаявку(Контекст);
		Если ПустоеЗначение(мЗаявкаКлиента)=0 Тогда
			ВремЗалог=мЗаявкаКлиента.Оплачено;
			Если ВремЗалог<>Залог тогда
				Залог=ВремЗалог;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
	РасчётСкидки(0);
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	//проставим права продавцов
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Форма.НомерДок.Доступность(0);
	    Форма.Склад.Доступность(0);
	    Форма.ДатаДок.Доступность(0);
	    Форма.ТипЦен.Доступность(0);
	    Форма.Единица.Доступность(0);
	    //Форма.ЦенаСоСкидкой.Доступность(0);
	    Форма.Сумма.Доступность(0);
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
	    Форма.кнОснование.Доступность(0);
	    Форма.кнХОснование.Доступность(0);
	КонецЕсли;
	
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);	
	СтарыйКонтрагентЮЛ = КонтрагентЮЛ;
	Если Выбран() = 1 Тогда
		ОстатокБонусов = глФРМ(глПолучитьБонусыКлиента(Контрагент, ПолучитьПозицию(), 1),глРубли);
	Иначе
		ОстатокБонусов = глФРМ(глПолучитьБонусыКлиента(Контрагент, ДатаДок),глРубли);  
	КонецЕсли;
	//ОстатокБонусов = глПолучитьБонусыКлиента(Контрагент, ПолучитьПозицию());  
	УстановитьДоступностьФлагБонусы();  
	
	Если (ИмяПользователя()="Назаренко") или (ИмяПользователя()="Кожемякин") или (ИмяПользователя()="Филиппов") Тогда
		Форма.КонтрагентЮЛ.Доступность(1);
		Форма.ДоговорЮЛ.Доступность(1);
	КонецЕсли;
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");	    
	
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Фирма","Справочник",,,,15);
	ТЗ_ОстатокПоФирмам.НоваяКолонка("Количество","число",15,2,"Кол.",4);
КонецПроцедуры                          
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		//ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	ВыбратьСтроки();
	
	Пока получитьСтроку()=1 Цикл
	    глПересчетТЧ_розница(Контекст,"Количество");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);

КонецПроцедуры // ПоКнопкеПодбор()

Процедура ПриЗаписи() 
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	АвтоВремяКонецДня();
	проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
	ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.РеализацияРозницаБезнал)+сокрЛП(склад);
	Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
	    ЭтоРозница=проба.ТекущийЭлемент();
	Иначе
		проба.новый();
		проба.наименование=ЭР;
		проба.записать();
		ЭтоРозница=проба.ТекущийЭлемент();
	КонецЕсли;
	
	АналитикаПроценты = глПолучитьАналитику(Контекст);
	Если ДокОснование.Вид() = "СчетБнРозница" Тогда
		АналитикаСчетБезналПроценты = ДокОснование.АналитикаСчетБезналПроценты;
		Если ПустоеЗначение(АналитикаСчетБезналПроценты) = 1 Тогда
			АналитикаСчетБезналПроценты = глПолучитьАналитику(Контекст, "АналитикаСчетБезналПроценты");	
		КонецЕсли;
	КонецЕсли;
	
	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);	
КонецПроцедуры

Процедура ВводНаОсновании(ДокумОснование)
	Перем Запрос, ТекстЗапроса,а;
	Если ДокумОснование.Вид() = "СчетБнРозница" Тогда
		ДокОснование	= ДокумОснование;
		АналитикаСчетБезналПроценты = ДокОснование.АналитикаСчетБезналПроценты;
		Фирма			= ДокОснование.Фирма;
		ЮрЛицо			= ДокОснование.ЮрЛицо;
		Автор			= глПользователь;
		КодОперации		= глКО.Продажа;
		Контрагент 		= ДокОснование.Контрагент;
		КонтрагентЮЛ	= ДокОснование.КонтрагентЮЛ;
		Склад			= ДокОснование.Склад;
		Договор			= ДокОснование.Договор;
		ДоговорЮЛ		= ДокОснование.ДоговорЮЛ;
		Валюта			= ДокОснование.Валюта;
		Курс			= ДокОснование.Курс;
		УчитыватьНДС	= ДокОснование.УчитыватьНДС;
		СуммаВклНДС		= ДокОснование.СуммаВклНДС;
		УчитыватьНП		= ДокОснование.УчитыватьНП;
		СуммаВклНП		= ДокОснование.СуммаВклНП;
		ТипЦен			= ДокОснование.ТипЦен;
		Скидка			= ДокОснование.Скидка;
		ВыданоСоСкидкой = ДокОснование.ВыданоСоСкидкой;
		Объект			= ДокОснование.Объект;
		Оплачено		= ДокОснование.Оплачено; 
		флНачислитьБонусы = ДокОснование.флНачислитьБонусы;
		УстановитьНовыйНомер("Рб"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
		ДокОснование.ВыбратьСтроки();
		Запрос 	= СоздатьОбъект("Запрос");
		Состояние("Расчёт таблицы остатков товаров по заявке...");
		
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеБонусы)
		|Без итогов;
		|КредДокумент		= Регистр.РезервыРозницы.КредДокумент;
		|Номенклатура		= Регистр.РезервыРозницы.Номенклатура;
		|СуммаРуб 			= Регистр.РезервыРозницы.СуммаРуб;
		|Колво				= Регистр.РезервыРозницы.Количество;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Функция КолвоКонОст	= КонОст(Колво);
		|Группировка КредДокумент без Групп;
		|Группировка Номенклатура без групп;
		|Условие(КредДокумент = ДокОснование);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		ТЗ=СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ТЗ);
		Если (ТЗ.КоличествоСтрок()=0) или (ТЗ.Итог("КолвоКонОст")=0) Тогда
			Сообщить("Товар по данной заявке полностью отгружен...");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		ТЗ.ВыбратьСтроки();
		пока ТЗ.ПолучитьСтроку()=1 Цикл
			Если ТЗ.КолвоКонОст <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			Номенклатура 	= ТЗ.Номенклатура;
			Количество 		= ТЗ.КолвоКонОст;
			Единица			= Номенклатура.БазоваяЕдиница;
			Коэффициент		= 1;
			Сумма			= ТЗ.СуммаРубКонОст;
			Цена 			= Сумма/Количество;
		КонецЦикла;		
	КонецЕсли;
	Проект = ДокОснование.Проект;
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	//******************************************************************************
	//Дополнения для продавцов
	Если НазваниеНабораПрав() = "Продавец_розница" тогда
		Форма.Склад.Доступность(0);
		Форма.ТипЦен.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.НомерДок.Доступность(0);
		//Форма.ЦенаСоСкидкой.Доступность(0);
		Форма.Сумма.Доступность(0);
		Форма.Единица.Доступность(0);
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
		
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;
	//АвторЗаявки = ДокумОснование.Автор; 
	
	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);	
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;
	
	Форма.Обновить();
КонецПроцедуры

Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
КонецПроцедуры //ПоКнопкеОснование()

//Обрабатываем данные с ридера
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные);
	Scaner.EventNumber=Число(Данные);
	Карта=Scaner.ScanData;	//Данные со штрихкода
	Scaner.DeleteEvent();
	Scaner.DataEventEnabled = 1;
	
	Если ПустоеЗначение(Карта)=0 тогда
		//Если первые 2 символа "00" тогда - это контрагент 
		Если (лев(карта,2)="00") или (сокрЛП(карта)="29051980") или (сокрЛП(карта)="29051981") или (сокрЛП(карта)="29051982") тогда	//29051980 Для ЧЛ со скидкой, т.к. Корыхалов!!! забыл его проставить по основной схеме.
			Контр=СоздатьОбъект("Справочник.Контрагенты");
			если Контр.ВыбратьЭлементыПоРеквизиту("ШтрихКарта", сокрЛП(карта), 0)=1 тогда
				контр.ПолучитьЭлемент();
				Если Контр.ТекущийЭлемент()=Контрагент Тогда	//всё ОК, возможна работа в кредит
					Форма.Оплачено.Доступность(1);
					сообщить("Теперь возможна продажа в кредит");
					МожноВДолг=1;
					РасчётСкидки(1);
					ОбновиНадписи();
				Иначе
					Форма.Оплачено.Доступность(1);
					Контрагент	= Контр.ТекущийЭлемент();
					МожноВДолг=1;
					РасчётСкидки(1);
					ОбновиНадписи();
				КонецЕсли;
			иначе
				сообщить("Не смогли найти соответствие для клиента, ЗВОНИТЕ В ОФИС!");
				возврат;
			КонецЕсли;
		конецЕсли;
	КонецЕсли;
КонецПроцедуры

  
Процедура ИзменениеКонтрагентаЮЛ()
    Если КонтрагентЮЛ <> СтарыйКонтрагентЮЛ Тогда
		ТекстСообщения = "";
	
		глПроверитьКонтрагентаВЦепочке(Контекст, КонтрагентЮЛ, ТекстСообщения);
	
		Если СтрДлина(ТекстСообщения) <> 0 Тогда
			ТекстСообщения = "Нужно внести изменения в другие документы!"+РазделительСтрок+"Есть документы с другим контрагентом!"+РазделительСтрок+ТекстСообщения;
			Предупреждение(ТекстСообщения); 
			//КонтрагентЮЛ = СтарыйКонтрагентЮЛ;
			//Возврат;
		КонецЕсли; 
		СтарыйКонтрагентЮЛ = КонтрагентЮЛ;
	КонецЕсли;	
КонецПроцедуры	

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Товарный чек";
ТаблицаПечФорм.Кнопка       = "Тов. чек";

ДанныеПоДолгам	= "Долги: не обнаружены";
ТекстКлиента	= "";
КодОперации		= Перечисление.КодыОпераций.Продажа;

ТЗ_Долги		= СоздатьОбъект("ТаблицаЗначений");
ТЗ_Проценты		= СоздатьОбъект("ТаблицаЗначений");

Если НазваниеНабораПрав()="Продавец_розница" Тогда	//нельзя по умолчанию - выдавать товар в долг
	МожноВДолг=0;
Иначе
	МожноВДолг=1;
КонецЕсли;

Склад_Темп	= СоздатьОбъект("Справочник.Склады");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
ТЗ			= СоздатьОбъект("ТаблицаЗначений");

СписокДоступныхПроектов = СоздатьОбъект("СписокЗначений");
СпрПроекты = СоздатьОбъект("Справочник.Проекты");
Если СпрПроекты.НайтиПоНаименованию("Эксперт Инт. магазин безнал") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;
СтараяНоменклатураФирм = "";