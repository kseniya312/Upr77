////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем СтараяФирма;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
КонецФункции                    

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Управление видимостью элементов диалога в зависимости от вида документа
//
Процедура УправлениеВидимостью()
	
	Если КодОперации = Перечисление.КодыОпераций.Сборка Тогда
		Форма.ВидТМЦ.Видимость(0);
		Форма.ЦеновойКоэфф.Видимость(0);
		Форма.СуммовойКоэфф.Видимость(0);
		Форма.ТекстИтог.Видимость(0);
		Форма.РамкаИтог.Видимость(0);
		Форма.ТекстПартия.Видимость(1);
		Форма.ОткрытьПартию.Видимость(1);
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
			Форма.ВидТМЦКомп.Видимость(1);
			Форма.ТекстВидТМЦКомп.Видимость(1);
		КонецЕсли;
		
	Иначе // разукомплектация
		Форма.ТекстИтог.Видимость(1);
		Форма.РамкаИтог.Видимость(1);
		Форма.ТекстПартия.Видимость(0);
		Форма.ОткрытьПартию.Видимость(0);
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
			Форма.ВидТМЦКомп.Видимость(0);
			Форма.ТекстВидТМЦКомп.Видимость(0);
		Иначе
			Форма.ЦеновойКоэфф.Видимость(1);
			Форма.СуммовойКоэфф.Видимость(1);
			Форма.ВидТМЦ.Видимость(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы			.Заголовок(глСтрокаФирмы	(Контекст));
	Форма.ТекстСклада			.Заголовок(глСтрокаСклада(Склад));   
	Форма.ТекстСкладаПолучателя	.Заголовок(глСтрокаСклада(СкладПолучатель));
	Форма.ТекстКомплекта		.Заголовок(?(Комплект.Выбран()=1,Комплект.Наименование+" в количестве " + КоличествоКомп+" "+ЕдиницаКомп,"<Не выбран>"));   
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
                     
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустаяСтрока(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()
                                              
//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:                
//		ИмяРеквизита - идентификатор текущей колонки табличной части
//
// Описание:
//	Производится пересчет всего необходимого при редактировании табличной части.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)
	
	Перем НоваяНоменклатура;
	                                               
	Если ИмяРеквизита = "Номенклатура" Тогда
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
			//Очистили Номенклатуру.
			Единица 	= 0;
			Коэффициент = 0;                  
			Количество 	= 0;
			Возврат;
		КонецЕсли;

		// Определим, поменяли ли Номенклатуру?
		НоваяНоменклатура = 0;
		Если ПустоеЗначение(Единица) = 1 Тогда
			НоваяНоменклатура = 1;
		ИначеЕсли Номенклатура <> Единица.Владелец Тогда
			НоваяНоменклатура = 1;
		КонецЕсли;
	
		Если НоваяНоменклатура = 0 Тогда
			Возврат;
		КонецЕсли;
	
		// заполняем единицу
		
		Единица 		= Номенклатура.ОсновнаяЕдиница;
		Коэффициент 	= Единица.Коэффициент;    
			                         
	ИначеЕсли (ИмяРеквизита = "Количество") или (ИмяРеквизита = "ЦеновойКоэфф") Тогда	
		СуммовойКоэфф = ЦеновойКоэфф * Количество;
		
	ИначеЕсли ИмяРеквизита = "Единица" Тогда	  
		// сохраним старый коэффициент
		ВремКоэфф = Коэффициент;
		// заполним коэффициент в документе из единицы
		Коэффициент = Единица.Коэффициент;
		Если ВремКоэфф <> 0 Тогда
			// цена была за другой коэффициент. Пересчитываем
			ВремЦена = ЦеновойКоэфф * Коэффициент / ВремКоэфф;
		КонецЕсли;
		ЦеновойКоэфф  = ВремЦена;            
		СуммовойКоэфф = ЦеновойКоэфф * Количество;
		
	ИначеЕсли ИмяРеквизита = "СуммовойКоэфф" Тогда	  
		ЦеновойКоэфф = ?(Количество = 0, 0, СуммовойКоэфф/Количество);
		
	КонецЕсли;
	
КонецПроцедуры // ПересчетТаблЧасти()
                            
//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	ПересчетТаблЧасти(Форма.ТекущаяКолонка());	
	
КонецПроцедуры // ПриИзмененииНоменклатуры()    

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ЗаполнитьСоставКомплекта()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполняет состав документа в соответствии с составом комплекта.
//
Процедура ЗаполнитьСоставКомплекта()
	    
	Если Комплект.Выбран() = 0 Тогда
		Предупреждение("Не выбран комплект.",60);
		Возврат;
	КонецЕсли;
	ТекстВопроса = "Заполнить список комплектующих";
	Если КоличествоСтрок() > 0 Тогда
		ТекстВопроса = ТекстВопроса + " (существующие строки будут удалены)";
	КонецЕсли;
	
	Если Вопрос(ТекстВопроса + "?",	"Да+Нет", 60) = "Да" Тогда	
		
		УдалитьСтроки();
		
		СпрКомплектация = СоздатьОбъект("Справочник.Комплектация");
		СпрКомплектация.ИспользоватьВладельца(Комплект);
		СпрКомплектация.ВыбратьЭлементы();
		
		Пока СпрКомплектация.ПолучитьЭлемент()=1 Цикл
			Комплектующее = СпрКомплектация.Номенклатура;
			Если Комплектующее.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
				Продолжить;
			КонецЕсли;     
			
			НоваяСтрока();
			ВидТМЦ	=	ВосстановитьЗначение("ВидТМЦПоУмолчанию");
			Если ПустоеЗначение(ВидТМЦ)=1 Тогда
				ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
			КонецЕсли;  
			
			Номенклатура 	= Комплектующее;
			Единица 	 	= Комплектующее.БазоваяЕдиница;
			ПересчетТаблЧасти("Единица");
			Количество	 	= КоличествоКомп * КоэффициентКомп * СпрКомплектация.Количество;
			ЦеновойКоэфф 	= СпрКомплектация.ЦеновойКоэфф;
			ПересчетТаблЧасти("ЦеновойКоэфф");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСоставКомплекта()

//******************************************************************************
// ЗаполнитьЦеновыеКоэффициенты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет ценовые коэффициенты у выбранных в составе комплектующих.
//
Процедура ЗаполнитьЦеновыеКоэффициенты()
	Перем ЦенаЦены, ЕдЦены, ВалЦены;
	
	СпрТипыЦен	= СоздатьОбъект("Справочник.ТипыЦен");
	
	Если СпрТипыЦен.Выбрать("Выбор типа цены", ) = 1 Тогда
		ВыбТип	= СпрТипыЦен.ТекущийЭлемент();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
		    ЦеновойКоэфф	= глПолучитьЦену(Номенклатура, ВыбТип, ДатаДок, Единица);
			СуммовойКоэфф	= ЦеновойКоэфф * Количество;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЦеновыеКоэффициенты()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	Перем Действие;
	
	Если (КоличествоСтрок() > 0) И (КодОперации = Перечисление.КодыОпераций.Разукомплектация) Тогда
		СписДействий	= СоздатьОбъект("СписокЗначений");
		СписДействий.ДобавитьЗначение(1, "Заполнить состав комплекта");
		СписДействий.ДобавитьЗначение(2, "Заполнить ценовые коэффициенты по типу...");
		
		Если СписДействий.ВыбратьЗначение(Действие, , , 60, 1) = 1 Тогда
		    Если Действие = 1 Тогда
		        ЗаполнитьСоставКомплекта();
			Иначе
				ЗаполнитьЦеновыеКоэффициенты();
		    КонецЕсли;
		КонецЕсли;
	Иначе
	    ЗаполнитьСоставКомплекта();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеЗаполнить()
    
//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Если КодОперации = Перечисление.КодыОпераций.Сборка Тогда
		Параметры.ДобавитьЗначение(0,           "ЕстьВидТМЦ");
	Иначе // разукомплектация
		Параметры.ДобавитьЗначение(1,           "ЕстьВидТМЦ");
	КонецЕсли;
	Параметры.ДобавитьЗначение("Нет",           "ЦенаВподборе");
//	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
//	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
//	Параметры.ДобавитьЗначение(Курс,            "Курс");

	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	Название = "" + КодОперации;
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Организация
	Организация = СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Организация");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Организация");
	
	ИсхТабл.ВывестиСекцию("Комплект");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комплект");

	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("Шапка");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("Шапка");
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// выводим табличную часть
	НомСтроки = 0;
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	// секция Разделитель
	ИсхТабл.ВывестиСекцию("Разделитель");
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
	    ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииВидаТМЦ()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Выполняется при выборе вида ТМЦ.

Процедура ПриИзмененииВидаТМЦ()
	                                      
	Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
		СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаТМЦ()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Склад"
//
Процедура ПриИзмененииСклада()      
	
	Если Склад.РозничныйСклад = 1 Тогда
		Предупреждение("Выбранный склад является розничным!
		|Комплектация на таком складе не производится!",60);
		Склад = "";
	КонецЕсли;
		
	Если СкладПолучатель.Выбран()=0 Тогда
		СкладПолучатель = Склад;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииСкладаПолучателя()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "СкладПолучатель"
//
Процедура ПриИзмененииСкладаПолучателя()      
	
	Если СкладПолучатель.РозничныйСклад = 1 Тогда
		Предупреждение("Выбранный склад является розничным!
		|Комплектация на таком складе не производится!",60);
		СкладСкладПолучатель = "";
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииСкладаПолучателя()

//******************************************************************************
// ПриВыбореКомплекта()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Комплект.
//
// Описание:
//  При выборе комплекта производит перезаполнение связанных реквизитов.
//
Процедура ПриВыбореКомплекта()
	
	Если ПустоеЗначение(глКомплектуется(Комплект)) = 1 Тогда
		Если Вопрос("Выбранная позиция номенклатуры не имеет комплектующих!
		             |Продолжить?","Да+Нет",60) <> "Да"Тогда
			Комплект = "";
		КонецЕсли;
		//Предупреждение("Выбранная позиция номенклатуры не имеет комплектующих!",60);
		//Комплект = "";
	КонецЕсли;
	
	Если ПустоеЗначение(Комплект) = 1 Тогда                                                          
		//Очистили комплект.
		ЕдиницаКомп 	= 0;
		ПартияКомп		= 0;
		КоэффициентКомп = 0;                  
		КоличествоКомп 	= 0;
		Возврат;
	КонецЕсли;                  
	
	// Определим, поменяли ли комплект?
	НовыйКомп = 0;
	Если ПустоеЗначение(ЕдиницаКомп) = 1 Тогда
		НовыйКомп = 1;
	ИначеЕсли Комплект <> ЕдиницаКомп.Владелец Тогда
		НовыйКомп = 1;
	КонецЕсли;
	
	Если НовыйКомп = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// заполняем единицу
	ЕдиницаКомп		= Комплект.ОсновнаяЕдиница;
	КоэффициентКомп	= ЕдиницаКомп.Коэффициент;
	ПартияКомп		= "";
	
КонецПроцедуры	//ПриВыбореКомплекта()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.

Процедура ПриРедактированииНовойСтроки()
	
	Партия = "";
	
	ВидТМЦ	=	ВосстановитьЗначение("ВидТМЦПоУмолчанию");
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()
          
//*****************************************************************************
// предопределенная процедура                
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Склад = ?(Склад.РозничныйСклад = 1,"",Склад); // розничный не даем выбрать
	
	Если Скопирован = 1 Тогда	//копирование документа 
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Партия="";
		КонецЦикла;
		ПартияКомп = "";
		// *************** КОНЕЦ ********************************
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Форма.Параметр)=0 Тогда
		КодОперации=Перечисление.КодыОпераций.ЗначениеПоИдентификатору(Форма.Параметр);
	КонецЕсли;
	
	// спросим - сборка это или соответственно разукомплектация
	Если ПустоеЗначение(КодОперации)=1 Тогда
		СписокОпераций = СоздатьОбъект("СписокЗначений");
		СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.Сборка);
		СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.Разукомплектация);
		Если СписокОпераций.ВыбратьЗначение(КодОперации,"Выбор вида операции",, 60) <> 1 Тогда
			СтатусВозврата(0); Возврат;
		КонецЕсли;  
	КонецЕсли;
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// предопределенная процедура      
//
Процедура ПриОткрытии() 
	                         
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");  
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
              
	НачальнаяДатаДокумента 	= ДатаДок;  
	СтараяФирма 			= Фирма;

	Форма.ВидТМЦ		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ЦеновойКоэфф	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммовойКоэфф	.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();     
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка"); 
	Если КодОперации = Перечисление.КодыОпераций.Сборка Тогда
		Форма.Закладки.ДобавитьЗначение("Списать комплектующие");
	Иначе     
		Форма.Закладки.ДобавитьЗначение("Оприходовать комплектующие");
	КонецЕсли;
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли; 
	
	УправлениеВидимостью();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	
КонецПроцедуры // ПриОткрытии()
                  
//******************************************************************************
// предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)  
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
		УправлениеВидимостью();
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
		УправлениеВидимостью();
	КонецЕсли;       

КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    
	 // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда
		СпрПартии=СоздатьОбъект("Справочник.Партии");
	
		Если КодОперации = Перечисление.КодыОпераций.Разукомплектация Тогда
			ОтменитьЗапись=0;
			                                         
			// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
			// после записи всех партий - пропишем их в документ всех сразу
			ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
			ТЗПартии.НоваяКолонка("НомерСтрокиДок");
			ТЗПартии.НоваяКолонка("Партия");
			
			НачатьТранзакцию();
			
			ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
				Если (Партия.Выбран()=0) и (Номенклатура.Выбран()=1) Тогда
					
					СпрПартии.ИспользоватьВладельца(Номенклатура);
					СпрПартии.Новый();
					Попытка
						СпрПартии.Записать();
					Исключение  
						Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки(),"i");
						ОтменитьЗапись=1;
						Прервать;
					КонецПопытки;
					
					ТЗПартии.НоваяСтрока();
					ТЗПартии.НомерСтрокиДок=НомерСтроки;
					ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
					
				КонецЕсли;
			КонецЦикла; 
			
			Если ОтменитьЗапись=0 Тогда  
				// запишем созданные партии
				ЗафиксироватьТранзакцию();
				
				// теперь занесем партии в спецификацию нашего документа
				ТЗПартии.ВыбратьСтроки();
				Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
					
					ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
					Партия=ТЗПартии.Партия;
					
				КонецЦикла;
			Иначе
				ОтменитьТранзакцию();
				СтатусВозврата(0);
			КонецЕсли;    
			
		Иначе // сборка
			Если (ПартияКомп.Выбран()=0) и (Комплект.Выбран()=1) Тогда
					
				СпрПартии.ИспользоватьВладельца(Комплект);
				СпрПартии.Новый();
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Ошибка: "+ОписаниеОшибки());
					СтатусВозврата(0); Возврат;
				КонецПопытки;
				
				ПартияКомп = СпрПартии.ТекущийЭлемент();
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// ***************************** КОНЕЦ ************************************
	ПриЗаписиДокумента(Контекст);                           
КонецПроцедуры // ПриЗаписи()
	                                         
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	Перем ЕстьВидТМЦ;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				
				Если КодОперации = Перечисление.КодыОпераций.Сборка Тогда
					ЕстьВидТМЦ = 0;
				Иначе // разукомплектация
					ЕстьВидТМЦ = 1;
				КонецЕсли;
				Если ЕстьВидТМЦ = 1 Тогда
					ТаблицаПодбора.ВидТМЦ   = Перечисление.ВидыТМЦ.Товар;
				КонецЕсли;
				
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(ЕстьВидТМЦ     , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("Нет"          , "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 0, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";