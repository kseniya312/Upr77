////////// //////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"            

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма;

// Для восстановления значений при некорректном вводе(редактировании) строки
Перем СтараяСтрока;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
Функция ЗаполнениеПоСкладу(ТипЗаполнения) Далее
Функция ЗаполнениеПоРознице(ТипЗаполнения) Далее
Процедура ЗаполнитьРеквСтрокиПоРознице(ТолькоУчет) Далее
Процедура ЗаполнитьРеквСтрокиПоСкладу() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции // ТекстВалюты()                                                                   

//******************************************************************************
// УстановкаВидимостиСлоев(НомерЗакладки)
//
// Параметры:
//  НомерЗакладки
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Устанавливает видимость слоев формы в зависимости от текущей закладки.
//
Процедура УстановкаВидимостиСлоев(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе                                                                
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // УстановкаВидимостиСлоев()

//******************************************************************************
// УправлениеДиалогомВидИнвентаризации()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	Переключатель вид инвентаризации
//
// Описание:
//  Управляет доступностью элементов диалога в зависимости от вида инвентаризации.
//
Процедура УправлениеДиалогомВидИнвентаризации()
	
	ВидИнвентаризации = Макс(ВидИнвентаризации, 1); // не нулевой
	Форма.Фирма.     Доступность(?(ВидИнвентаризации = 1, 1, 0));
	Форма.ТекстФирма.Доступность(?(ВидИнвентаризации = 1, 1, 0));
	Если (Фирма.Выбран()= 1) И (ВидИнвентаризации = 2) Тогда // при инвентаризации по компании фирма не нужна
		Фирма = "";
		СтараяФирма = Фирма;     
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогомВидИнвентаризации()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(?(ВидИнвентаризации = 1, глСтрокаФирмы(Контекст), "По компании"));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаПоУчету	.Заголовок("По учету ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаПоФакту	.Заголовок("По факту ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры // ОбновитьНадписи()    

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Название операции
//
// Вызывается из формул элементов диалога:
//  Текст "НазваниеДокумента"
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;

	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
		
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы()                                                   
                                 
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Вызывается из формул элементов диалога:
//  Текст ""
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;

	Возврат(ИнфоТекст);
	
КонецФункции // ИнформацияОНоменклатуре()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит "ДатаДок"
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    
	    СтараяДата = ДатаДок;
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
	                ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииВидаИнвентаризации()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вид Инвентаризации (переключатель)
//
// Описание:
//  Производит все необходимые действия при изменении вида инвентаризации.
//
Процедура ПриИзмененииВидаИнвентаризации()
	
	УправлениеДиалогомВидИнвентаризации();
	
	// Надо перезаполнить фактическое количество
	Если КоличествоСтрок() > 0 Тогда
		ТипЗаполнения = "Обновить";
		
		Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу Тогда
			Результат = ЗаполнениеПоСкладу(ТипЗаполнения);
		ИначеЕсли ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
			Результат = ЗаполнениеПоРознице(ТипЗаполнения);
		КонецЕсли;
		
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаИнвентаризации()
    
//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит "Фирма"
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма;     
		
		// Надо перезаполнить фактическое количество
		Если КоличествоСтрок() > 0 Тогда
			ТипЗаполнения = "Обновить";
			
			Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу Тогда
				Результат = ЗаполнениеПоСкладу(ТипЗаполнения);
			ИначеЕсли ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
				Результат = ЗаполнениеПоРознице(ТипЗаполнения);
			КонецЕсли;
			
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПроверкаСклада()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  "" или строка с описанием ошибки в случае ошибки.
//
// Описание:
//  Проверяет допустимость выбранного склада.
//
Функция ПроверкаСклада()
	
	ТекстОш = "";
	Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу Тогда
		Если Склад.РозничныйСклад = 1 Тогда
			ТекстОш = ""+ВидОперации+" не может производиться 
			|с розничного склада";
			Склад = 0;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда 
		Если (Склад.Выбран()=1) и (Склад.РозничныйСклад = 0) Тогда
			ТекстОш = ""+ВидОперации+" может производиться 
			|только с розничного склада";
			Склад = 0;
		КонецЕсли;
		
	КонецЕсли;   
	
	Возврат ТекстОш;
	
КонецФункции // ПроверкаСклада()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Склад.
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	                               
	Результат = ПроверкаСклада();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() > 0 Тогда
		ТипЗаполнения = "Обновить";
		
		Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу Тогда
			Результат = ЗаполнениеПоСкладу(ТипЗаполнения);
		ИначеЕсли ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
			Результат = ЗаполнениеПоРознице(ТипЗаполнения);
		КонецЕсли;
		
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ЕстьТоварПоСкладу(ТМЦ, ВыбНомерСтроки)
//
// Параметры:
//  ТМЦ			   - Справочник.Номенклатыра - выбранное значение номенклатуры в документе
//  ВыбНомерСтроки - число - номер текущей (которую редактируем) строки в документе
//
// Возвращаемое значение:
//  Строка - текст ошибки. Если нет ошибки то возвращает ""
//
// Описание:
//  Проверяет есть ли выбранный товар в таб.части.
//
Функция ЕстьТоварПоСкладу(ТМЦ, ВыбНомерСтроки)
	
	Перем ТабДок;
	Перем ТекСтрока;
	
	ТекстОш = "";
	
	// выгрузим табличную часть документа в таблицу значений
	ТабДок	= СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабДок, "НомерСтроки, Номенклатура");
	
	ТабДок.Сортировать("Номенклатура");
	
	ТекСтрока = 0;
	Если ТабДок.НайтиЗначение(ТМЦ, ТекСтрока, "Номенклатура") = 1 Тогда
		КолСтрок = ТабДок.КоличествоСтрок();
		
		Пока ТекСтрока <= КолСтрок Цикл
			ТабДок.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
			Если ТабДок.Номенклатура <> ТМЦ Тогда
				Прервать; // уже не тот товар
			КонецЕсли;
			
			Если ТабДок.НомерСтрокиДокумента <> ВыбНомерСтроки Тогда
				ТекстОш = "Выбранное значение номенклатуры
				|совпадает со значением в строке № "+ТабДок.НомерСтрокиДокумента+".
				|Будет восстановлено предыдущее значение.";
				Прервать;
			КонецЕсли;
			
			ТекСтрока = ТекСтрока + 1;
		КонецЦикла;
		
	КонецЕсли;	

	Возврат ТекстОш;
	
КонецФункции // ЕстьТоварПоСкладу()

//******************************************************************************
// ЕстьТоварПоРознице(ТМЦ, ВыбНомерСтроки, ВыбКоэфф, ВыбЦена)
//
// Параметры:
//  ТМЦ			   - Справочник.Номенклатыра - выбранное значение номенклатуры в документе
//  ВыбНомерСтроки - номер текущей (которую редактируем) строки в документе
//  ВыбКоэфф       - коэффициент выбранной единицы измерения текущей строки документа
//  ВыбЦена        - значение цены в текущей строке документа  
//
// Возвращаемое значение:
//  Строка - текст ошибки. Если нет ошибки то возвращает ""
//
// Описание:
//  Проверяет есть ли выбранная пара (товар, цена)  в таб.части.
//
Функция ЕстьТоварПоРознице(ТМЦ, ВыбНомерСтроки, ВыбКоэфф, ВыбЦена)
	
	Перем ТабДок;
	Перем ТекСтрока;
	
	ТекстОш = "";
	
	// выгрузим табличную часть документа в таблицу значений
	ТабДок	= СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТабДок, "НомерСтроки, Номенклатура, Единица, Цена");
	
	ТабДок.Сортировать("Номенклатура");
	
	ТекСтрока = 0;
	Если ТабДок.НайтиЗначение(ТМЦ, ТекСтрока, "Номенклатура") = 1 Тогда
		КолСтрок = ТабДок.КоличествоСтрок();
		
		Пока ТекСтрока <= КолСтрок Цикл
			ТабДок.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
			Если ТабДок.Номенклатура <> ТМЦ Тогда
				Прервать; // уже не та номенклатура
			КонецЕсли;
			
			// посчитаем цены в базовых единицах
			ВремКоэфф = ТабДок.Единица.Коэффициент;
			ВремЦенаТекСтрока = ?(ВремКоэфф <> 0, Окр(ТабДок.Цена/ВремКоэфф, 2), 0);
			ВремЦенаНов = ?(ВыбКоэфф <> 0, Окр(ВыбЦена / ВыбКоэфф, 2), 0);
				
			Если (ВремЦенаТекСтрока = ВремЦенаНов) И (ТабДок.НомерСтрокиДокумента <> ВыбНомерСтроки) Тогда
				ТекстОш = "Выбранные значения Номенклатуры, Цены
				|совпадают со значениями в строке № "+ТабДок.НомерСтрокиДокумента+".
				|Будут восстановлены предыдущие значения.";
				Прервать;
			КонецЕсли;
			
			ТекСтрока = ТекСтрока + 1;
		КонецЦикла;
		
	КонецЕсли;	

	Возврат ТекстОш;
	
КонецФункции // ЕстьТоварПоРознице()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	
	Если Склад.РозничныйСклад = 1 Тогда
		Результат = ЕстьТоварПоРознице(Номенклатура, НомерСтроки, Единица.Коэффициент, Цена);
		Если ПустоеЗначение(Результат) = 0 Тогда // такая пара (номенклатура, цена) уже есть
			Предупреждение(Результат, 60);
		     // восстанавливаем старое значение
			Номенклатура = СтараяСтрока.Получить("Номенклатура");
		Иначе
			ЗаполнитьРеквСтрокиПоРознице(0); // все реквизиты строки
		КонецЕсли;
	Иначе
		Результат = ЕстьТоварПоСкладу(Номенклатура, НомерСтроки);
		Если ПустоеЗначение(Результат) = 0 Тогда // такая номенклатура уже есть
			Предупреждение(Результат, 60);
		     // восстанавливаем старое значение
			Номенклатура = СтараяСтрока.Получить("Номенклатура");
 		Иначе	
			ЗаполнитьРеквСтрокиПоСкладу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатуры()

//******************************************************************************
// ПриИзмененииЕдиницы()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Реквизит "Единица" табличной части
//
// Описание:
//  Пересчитывает Количество, КоличествоУчет, а также связанные реквизиты при
// изменении Единицы.
//
Процедура ПриИзмененииЕдиницы()
	
	Перем ВремКоличество, ВремКоличествоУчет;

	// сохраним старый коэффициент
	ВремКоэфф = Коэффициент;
	
	// пересчитаем Количество, КоличествоУчет
	Если Единица.Выбран() = 1 Тогда
		Если Единица.Коэффициент <> 0 Тогда
			ВремКоэфф = ВремКоэфф / Единица.Коэффициент;
			
			ВремКоличество = Количество * ВремКоэфф;         
			ВремКоличествоУчет = КоличествоУчет * ВремКоэфф;         
		КонецЕсли;
	КонецЕсли;
	Количество = ВремКоличество;
	КоличествоУчет = ВремКоличествоУчет;
	
	глПересчетТаблЧасти(Контекст, "Единица");

КонецПроцедуры // ПриИзмененииЕдиницы()

//******************************************************************************
// ПриИзмененииЦеныИлиСуммы(ИмяРеквизита)
//
// Параметры:
//  ИмяРеквизита - строка - при изменении какого реквизита таб.части вызываем.
//                 Равен "Цена" или "Сумма"
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Пересчитывает КоличествоУчет, СуммаУчет (когда по рознице), а также
// связанные реквизиты при изменении Цены или Суммы.
//
Процедура ПриИзмененииЦеныИлиСуммы(ИмяРеквизита)
		
	глПересчетТаблЧасти(Контекст, ИмяРеквизита);
	
	Если Склад.РозничныйСклад = 1 Тогда
		Результат = ЕстьТоварПоРознице(Номенклатура, НомерСтроки, Единица.Коэффициент, Цена);
		Если ПустоеЗначение(Результат) = 0 Тогда // такая пара (номенклатура, цена) уже есть
			Предупреждение(Результат, 60);
		    // восстанавливаем старые значения цены и суммы
			Цена = СтараяСтрока.Получить("Цена");
			Сумма = СтараяСтрока.Получить("Сумма");
		Иначе	
			// пересчитываем факт
			ЗаполнитьРеквСтрокиПоРознице(1); // заполняем только КоличествоУчет, СуммаУчет
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЦеныИлиСуммы()
                                                    
//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Операция"
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремВидОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	                  
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыИнвентаризаций.ПоСкладу);
	СписокОпераций.ДобавитьЗначение(Перечисление.ВидыИнвентаризаций.ПоРознице);
	
	Если СписокОпераций.ВыбратьЗначение(ВремВидОперации,,,,1)=1 Тогда
		Если ВидОперации <> ВремВидОперации Тогда
			Если КоличествоСтрок() > 0 Тогда
				Если Вопрос ("При смене типа инвентаризации табличная часть будет очищена. Продолжить?","Да+Нет") = "Нет" Тогда
					Возврат;
				КонецЕсли;  
				УдалитьСтроки();
			КонецЕсли; 
			ВидОперации = ВремВидОперации;
			
			ТекстОш = ПроверкаСклада();
			Если ТекстОш <> "" Тогда
				Предупреждение(ТекстОш+" Склад будет очищен.", 60);
			КонецЕсли;    
			Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
			    Валюта = глРубли;   
				Курс = 1;
				ОбновитьНадписи();
			КонецЕсли;
		КонецЕсли; // операция другая
	КонецЕсли; //если выбрать значение
	
КонецПроцедуры // ПоКнопкеОперация()         

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "&Цены ..."
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;   
	
	Если КоличествоСтрок() > 0 Тогда
		Предупреждение("Изменить валюту заполненной инвентаризации нельзя!",60);
		Возврат;
	КонецЕсли;
	           
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	
	ОбновитьНадписи();
	
КонецПроцедуры	// ПоКнопкеЦены()    

//******************************************************************************
// ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
//
// Параметры: 
//  СписТоваров		- список значений, содержащий товары для установки фильтра
//                    по ним.
//  ТолькоОстатки	- установить фильтр только по номенклатуре, которая
//                    присутствует в составе
//  ОстаткиТМЦ		- выходной параметр. Таблица значений с остатками регистра 
//                    ОстаткиТМЦ
//  РегПартии		- выходной параметр. Таблица значений с остатками регистра 
//                    ПартииНаличие.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Формирует таблицы значений из остатков регистров ОстаткиТМЦ и ПартииНаличие
//
Процедура ПолучитьОстатки(СписТоваров, ТолькоОстатки, ОстаткиТМЦ, ОстаткиПартий)
	
	ВремРегистры	= СоздатьОбъект("Регистры");
	РегОстатки		= ВремРегистры.ОстаткиТМЦ;
	Если ВидИнвентаризации = 1 Тогда
		РегОстатки.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	КонецЕсли;
	РегОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
	
	Если ТолькоОстатки = 0 Тогда
		РегПартии = ВремРегистры.ПартииНаличие;
		Если ВидИнвентаризации = 1 Тогда
			РегПартии.УстановитьЗначениеФильтра("Фирма"	, Фирма		, 1);
		КонецЕсли;
		РегПартии.УстановитьЗначениеФильтра("МОЛ"	, Склад.МОЛ	, 1);
	КонецЕсли;
	
	Если (ПустоеЗначение(СписТоваров) = 0) Тогда
		РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);
		Если ТолькоОстатки = 0 Тогда
			РегПартии.УстановитьЗначениеФильтра("Номенклатура", СписТоваров, 2);
		КонецЕсли;
	КонецЕсли;

	// в этом случае надо сделать временный расчет итогов
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			Если ТолькоОстатки = 0 Тогда
				РегПартии.ВременныйРасчет();
			КонецЕсли;
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			Если ТолькоОстатки = 0 Тогда
				РегПартии.ВременныйРасчет();
			КонецЕсли;
			РегОстатки.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	ОстаткиТМЦ	= СоздатьОбъект("ТаблицаЗначений");
	РегОстатки.ВыгрузитьИтоги(ОстаткиТМЦ, 1, 1);
	
	Если ТолькоОстатки = 0 Тогда
		ОстаткиПартий	= СоздатьОбъект("ТаблицаЗначений");
		РегПартии.ВыгрузитьИтоги(ОстаткиПартий, 1, 1);
	КонецЕсли;

КонецПроцедуры // ПолучитьОстатки()

//******************************************************************************
// ЗаполнитьРеквСтрокиПоСкладу()
//
// Параметры: 
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  ТекстОписания
//
Процедура ЗаполнитьРеквСтрокиПоСкладу()
	
	Перем ТаблСуммы, ТаблОстатков;
	Перем СписТоваров;
	
	СписТоваров	= СоздатьОбъект("СписокЗначений");
	СписТоваров.ДобавитьЗначение(Номенклатура);
	
	ПолучитьОстатки(СписТоваров, 0, ТаблОстатков, ТаблСуммы);
	ТаблСуммы.Свернуть("Номенклатура","Количество,СуммаБезНДС");
	
	Если ТаблОстатков.КоличествоСтрок() > 0 Тогда
		ТаблОстатков.ПолучитьСтрокуПоНомеру(1);
		Единица			= Номенклатура.БазоваяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		КоличествоУчет 	= ТаблОстатков.Количество;
		Количество	 	= ТаблОстатков.Количество;
             Артикул		= Номенклатура.Артикул;
		Производитель	=Номенклатура.Производитель;			
		
		НомСтр = 0;
		Если ТаблСуммы.НайтиЗначение(Номенклатура,НомСтр,"Номенклатура") = 1 Тогда
			ТаблСуммы.ПолучитьСтрокуПоНомеру(НомСтр);
			Если ТаблСуммы.Количество <> 0 Тогда
				ВремСумма	= ТаблСуммы.СуммаБезНДС * КоличествоУчет / ТаблСуммы.Количество;
				СуммаУчет	= глПересчет(ВремСумма, глРубли, ДатаДок, Валюта, Курс);
			Иначе
				СуммаУчет	= 0;
			КонецЕсли;
		Иначе
			СуммаУчет = 0;
		КонецЕсли;                   
		Сумма 		= СуммаУчет;
		Цена 		= ?(КоличествоУчет = 0,0, СуммаУчет / КоличествоУчет);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквСтрокиПоСкладу()

//******************************************************************************
// ЗаполнитьРеквСтрокиПоРознице(ТолькоУчет)
//
// Параметры:
//  ТолькоУчет - (0) заполняем все реквизиты строки,
//               (1) заполняем только КоличествоУчет, СуммаУчет
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  ТекстОписания.
//
Процедура ЗаполнитьРеквСтрокиПоРознице(ТолькоУчет)
	
	Перем ТаблОстатков;
	Перем СписТоваров;
	
	СписТоваров	= СоздатьОбъект("СписокЗначений");
	СписТоваров.ДобавитьЗначение(Номенклатура);
	
	ПолучитьОстатки(СписТоваров, 1, ТаблОстатков, );
	
	ТаблОстатков.Сортировать("Номенклатура");
		
	КоличествоУчет = 0;
	СуммаУчет      = 0;
	Поз = 0;
	Если ТаблОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") > 0 Тогда
		
		Для СчетчикЦикла = Поз По ТаблОстатков.КоличествоСтрок() Цикл
			
			ТекТов = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "Номенклатура");
			Если ТекТов = Номенклатура Тогда
				
				ВремЦена = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "ЦенаПрод");
				
				// посчитаем цену в базовых единицах
				ВремКоэфф = Единица.Коэффициент;
				ЦенаБазЕд = ?(ВремКоэфф <> 0, Окр(Цена / ВремКоэфф, 2), 0);
				
				// проверим, подходит ли цена 
				Если ЦенаБазЕд = ВремЦена Тогда
					Если ВремКоэфф <> 0 Тогда
						КоличествоУчет = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "Количество") / ВремКоэфф;
					Иначе	
						КоличествоУчет = 0;    
					КонецЕсли;
					СуммаУчет = Цена * КоличествоУчет;
					Прервать; // нужная цена м.б. только одна
				КонецЕсли;
			Иначе
				// в таблице пошел другой товар
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТолькоУчет = 0 Тогда
		Единица			= Номенклатура.БазоваяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		Количество	 	= КоличествоУчет;
		Сумма 			= СуммаУчет;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквСтрокиПоРознице()

//******************************************************************************
// ЗаполнениеПоСкладу(ТипЗаполнения)
//
// Параметры:
//  ТипЗаполнения - строка - "Обновить" или "Перезаполнить"
//
// Возвращаемое значение:
//  Пустая строка
//
// Описание:
//  Производит заполнение инвентаризации по складу.
//
Функция ЗаполнениеПоСкладу(ТипЗаполнения)
	
	Перем ТаблСуммы, ТаблОстатков;
	Перем СписТоваров;
	                
	Если ТипЗаполнения = "Обновить" Тогда
		СписТоваров = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(СписТоваров, "Номенклатура");
		
		ПолучитьОстатки(СписТоваров, 0, ТаблОстатков, ТаблСуммы);
		
		ТаблОстатков.Свернуть("Номенклатура", "Количество");
		ТаблСуммы.Свернуть("Номенклатура","Количество,СуммаБезНДС");
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Поз = 0;
			Если ТаблОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 0 Тогда
				КоличествоУчет = 0;
				СуммаУчет      = 0;
		             Артикул		= Номенклатура.Артикул;
				Производитель	=Номенклатура.Производитель;			

			Иначе
				ВремКоличествоУчет = ТаблОстатков.ПолучитьЗначение(Поз, "Количество");
				Поз = 0;
				Если ТаблСуммы.НайтиЗначение(Номенклатура, Поз,"Номенклатура") = 1 Тогда
					ТаблСуммы.ПолучитьСтрокуПоНомеру(Поз);
					Если ТаблСуммы.Количество <> 0 Тогда
					ВремСумма	  = ТаблСуммы.СуммаБезНДС * ВремКоличествоУчет / ТаблСуммы.Количество;
						ВремСуммаУчет = глПересчет(ВремСумма, глРубли, ДатаДок, Валюта, Курс);
					Иначе
						ВремСуммаУчет = 0;
					КонецЕсли;
				Иначе
					ВремСуммаУчет = 0;
				КонецЕсли;
				
	            // пересчитаем КоличествоУчет из базовых в текущие единицы
				Если Коэффициент <> 0 Тогда
					ВремКоличествоУчет = ВремКоличествоУчет / Коэффициент;
				Иначе	
					ВремКоличествоУчет = 0;
					ВремСуммаУчет = 0;
				КонецЕсли;
				
				КоличествоУчет = ВремКоличествоУчет;
				СуммаУчет      = ВремСуммаУчет;
	             Артикул		= Номенклатура.Артикул;
			Производитель	=Номенклатура.Производитель;			

			КонецЕсли;
		КонецЦикла;
	Иначе
		УдалитьСтроки();
		
		ПолучитьОстатки(СписТоваров, 0, ТаблОстатков, ТаблСуммы);
		
		ТаблОстатков.Свернуть("Номенклатура", "Количество");
		ТаблСуммы.Свернуть("Номенклатура", "Количество, СуммаБезНДС");
		
		ТаблОстатков.ВыбратьСтроки();
		Пока ТаблОстатков.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура 	= ТаблОстатков.Номенклатура;	
			КоличествоУчет 	= ТаблОстатков.Количество;
			Количество	 	= ТаблОстатков.Количество;
			Единица			= Номенклатура.БазоваяЕдиница;
			Коэффициент 	= Единица.Коэффициент;
	             Артикул		= Номенклатура.Артикул;
			Производитель	=Номенклатура.Производитель;			
			                                           
			НомСтр = 0;
			Если ТаблСуммы.НайтиЗначение(Номенклатура,НомСтр,"Номенклатура") = 1 Тогда
				ТаблСуммы.ПолучитьСтрокуПоНомеру(НомСтр);
				Если ТаблСуммы.Количество <> 0 Тогда
					ВремСумма	= ТаблСуммы.СуммаБезНДС * КоличествоУчет / ТаблСуммы.Количество;
					СуммаУчет	= глПересчет(ВремСумма, глРубли, ДатаДок, Валюта, Курс);
				Иначе
					СуммаУчет	= 0;
				КонецЕсли;
			Иначе
				СуммаУчет = 0;
			КонецЕсли;                   
			Сумма 		= СуммаУчет;
			Цена 		= ?(КоличествоУчет = 0,0, СуммаУчет / КоличествоУчет);
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоСкладу()

//******************************************************************************
// ЗаполнениеПоРознице(ТипЗаполнения)
//
// Параметры:
//  ТипЗаполнения - строка - "Обновить" или "Перезаполнить"
//
// Возвращаемое значение:
//  Пустая строка
//
// Описание:
//  Производит заполнение инвентаризации по розничному складу.
//
Функция ЗаполнениеПоРознице(ТипЗаполнения)
	Перем ТаблОстатков;
	Перем СписТоваров;
	
	Если ТипЗаполнения = "Обновить" Тогда
		
		// при обновлении нужно перебирать табличную часть,
		// обновляя учетные количество и сумму
		
		СписТоваров = СоздатьОбъект("СписокЗначений");
		ВыгрузитьТабличнуюЧасть(СписТоваров, "Номенклатура");
		ПолучитьОстатки(СписТоваров, 1, ТаблОстатков, );
		
		ТаблОстатков.Сортировать("Номенклатура");
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
		    
			Поз = 0;
			Если ТаблОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 0 Тогда
				// нет остатков
				КоличествоУчет = 0;
				СуммаУчет      = 0;
			Иначе
				
				ВремКоличествоУчет = 0;
				ВремСуммаУчет      = 0;
				
				Для СчетчикЦикла = Поз По ТаблОстатков.КоличествоСтрок() Цикл
					
					ТекТов = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "Номенклатура");
					Если ТекТов = Номенклатура Тогда
						
						ВремЦена = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "ЦенаПрод");
						
						// посчитаем цену в базовых единицах
						ВремКоэфф = Единица.Коэффициент;
						ЦенаБазЕд = ?(ВремКоэфф <> 0, Окр(Цена / ВремКоэфф, 2), 0);
						
						// проверим, подходит ли цена 
						Если ЦенаБазЕд = ВремЦена Тогда
							Если ВремКоэфф <> 0 Тогда
								ВремКоличествоУчет = ТаблОстатков.ПолучитьЗначение(СчетчикЦикла, "Количество") / ВремКоэфф;
							Иначе	
								ВремКоличествоУчет = 0;    
							КонецЕсли;
							ВремСуммаУчет = Цена * ВремКоличествоУчет;
							Прервать; // нужная цена м.б. только одна
						КонецЕсли;
					Иначе
						// в таблице пошел другой товар
						Прервать;
					КонецЕсли;
				КонецЦикла;
			
				КоличествоУчет = ВремКоличествоУчет;
				СуммаУчет      = ВремСуммаУчет;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// при перезаполнении перебираем остатки регистра
		
		УдалитьСтроки();
		ПолучитьОстатки(СписТоваров, 1, ТаблОстатков, );

		ТаблОстатков.ВыбратьСтроки();
		Пока ТаблОстатков.ПолучитьСтроку() = 1 Цикл
			
			ВремЦена  = ТаблОстатков.ЦенаПрод;
			ВремCумма = ВремЦена * ТаблОстатков.Количество;
			
			НоваяСтрока();
			Номенклатура   = ТаблОстатков.Номенклатура;	
			Количество     = ТаблОстатков.Количество;
			Единица        = Номенклатура.БазоваяЕдиница;
			Коэффициент    = Единица.Коэффициент;
	             Артикул		= Номенклатура.Артикул;
			Производитель	=Номенклатура.Производитель;			
			Цена           = ВремЦена;    
			Сумма          = ВремCумма;
			КоличествоУчет = Количество;
			СуммаУчет      = Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоРознице()

//******************************************************************************
// ЗаполнитьИзТерминала()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Пустая строка.
//
// Описание:
//  Заполняет табличную часть из терминала сбора данных. Вызывается по кнопке
//  Заполнить, если терминал сбора данных подключен.
//
Функция ЗаполнитьИзТерминала()
	Перем ВремНоменклатура, ВремЕдиница, ВремКоличество; 
	Перем ТаблОстатков, ТаблСуммы;
	Перем ТермДанные;
	Перем ТаблЧасть;
	
	Если глТерминалЗагрузитьДанные(ТермДанные) = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ТермДанные.КоличествоСтрок() = 0 Тогда
	    Предупреждение("Из терминала сбора данных не загружено ни одного товара", 60);
	Иначе
		
		ДобТовары	= СоздатьОбъект("ТаблицаЗначений");
		ДобТовары.НоваяКолонка("Номенклатура");
		ДобТовары.НоваяКолонка("Единица");
		ДобТовары.НоваяКолонка("РеалКоличество");
		
		ТермДанные.ВыбратьСтроки();
		Пока ТермДанные.ПолучитьСтроку() = 1 Цикл
		    Если глПолучитьТоварПоШтрихкоду(ТермДанные.Штрихкод, ВремНоменклатура, ВремЕдиница, ВремКоличество) = 0 Тогда
				// штрихкод не найден. сохраним номер строки для дальнейшего ее удаления
				Сообщить("Товар со штрихкодом " + ТермДанные.Штрихкод + " не найден!");
			Иначе
				ДобТовары.НоваяСтрока();
				ДобТовары.Номенклатура		= ВремНоменклатура;
				ДобТовары.Единица			= ВремЕдиница;
				// для штучных ВремКоличество = 1, для весовых - вес из штрихкода
				ДобТовары.РеалКоличество	= ВремКоличество * ТермДанные.Количество;
			КонецЕсли;
		КонецЦикла;
	
		ДобТовары.Свернуть("Номенклатура,Единица", "РеалКоличество");

		ВыгрузитьТабличнуюЧасть(ТаблЧасть);
		ТаблЧасть.Сортировать("Номенклатура");
		
		СписТоваров = СоздатьОбъект("СписокЗначений");
		ДобТовары.Выгрузить(СписТоваров,,,"Номенклатура");
		
		ПоСкладу = Перечисление.ВидыИнвентаризаций.ПоСкладу;

		Если ВидОперации = ПоСкладу Тогда
			ПолучитьОстатки(СписТоваров, 0, ТаблОстатков, ТаблСуммы);
			ТаблСуммы.Свернуть("Номенклатура","Количество,СуммаБезНДС");
			ТаблОстатков.Свернуть("Номенклатура" + ?(ВидОперации = ПоСкладу, "", ",ЦенаПрод"), "Количество");
			ТаблОстатков.Сортировать("Номенклатура"+ ?(ВидОперации = ПоСкладу, "", ",ЦенаПрод"));
		Иначе
			ПолучитьОстатки(СписТоваров, 1, ТаблОстатков, );
			ТаблОстатков.Свернуть("Номенклатура,ЦенаПрод", "Количество");
			ТаблОстатков.Сортировать("Номенклатура,ЦенаПрод");
		КонецЕсли;
			
		ДобТовары.ВыбратьСтроки();
		Пока ДобТовары.ПолучитьСтроку() = 1 Цикл
			Если ВидОперации = ПоСкладу Тогда
				// сначала поищем товар в табличной части
				Поз = 0;
				Если ТаблЧасть.НайтиЗначение(ДобТовары.Номенклатура, Поз, "Номенклатура") = 1 Тогда
					// изменяем только реальное количество у первой найденной позиции товара
					// для любой инвентаризации, так как даже если инвентаризация по рознице,
					// то неизвестно, по какой заносить количество.
					ТаблЧасть.ПолучитьСтрокуПоНомеру(Поз);
					ТаблЧасть.Количество	= ТаблЧасть.Количество + ДобТовары.РеалКоличество
					                                                 // сначала пересчитаем в базовую единицу
					                                                 * ДобТовары.Единица.Коэффициент
																	 // в табличной части может быть и не базовая единица
																	 / ?(ПустоеЗначение(ТаблЧасть.Единица.Коэффициент) = 1,
																	   1, ТаблЧасть.Единица.Коэффициент);
					ТаблЧасть.Сумма			= ТаблЧасть.Количество * ТаблЧасть.Цена;
				Иначе
					ТаблЧасть.НоваяСтрока();
					ТаблЧасть.Номенклатура	= ДобТовары.Номенклатура;
					ТаблЧасть.Единица		= ДобТовары.Номенклатура.БазоваяЕдиница;
					ТаблЧасть.Коэффициент	= 1;
					ТаблЧасть.Количество	= ДобТовары.РеалКоличество * ДобТовары.Единица.Коэффициент;
				
					// получим из регистра реальное учетное количество
					Поз = 0;
					Если ТаблОстатков.НайтиЗначение(ДобТовары.Номенклатура, Поз, "Номенклатура") = 1 Тогда
						ТаблЧасть.КоличествоУчет = ТаблОстатков.ПолучитьЗначение(Поз, "Количество");
					Иначе
						ТаблЧасть.КоличествоУчет = 0;
					КонецЕсли;
			    
					НомСтр = 0;
					Если ТаблСуммы.НайтиЗначение(ДобТовары.Номенклатура, НомСтр, "Номенклатура") = 1 Тогда
						ТаблСуммы.ПолучитьСтрокуПоНомеру(НомСтр);
						Если ТаблСуммы.Количество = 0 Тогда
						    ТаблЧасть.СуммаУчет	= 0;
							ТаблЧасть.Цена		= 0;
							ТаблЧасть.Сумма		= 0;
						Иначе
							ТаблЧасть.Цена		= глПересчет(ТаблСуммы.СуммаБезНДС / ТаблСуммы.Количество, глРубли, 1, Валюта, Курс);
							ТаблЧасть.СуммаУчет	= ТаблЧасть.Цена * ТаблЧасть.КоличествоУчет;
							ТаблЧасть.Сумма		= ТаблЧасть.Цена * ТаблЧасть.Количество;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли; // Если ТаблЧасть.НайтиЗначение(ДобТовары.Номенклатура, Поз, "Номенклатура") = 1 Тогда
				
			Иначе // Если ВидОперации = ПоСкладу Тогда
				
				// По рознице
				
				// распределяем остатки по ценам
				
				ТермОстаток = ДобТовары.РеалКоличество * ДобТовары.Единица.Коэффициент;
				
				Если ТермОстаток > 0 Тогда
					// не обрабатываем нулевые количества
					
					Поз = 0;
					Если ТаблЧасть.НайтиЗначение(ДобТовары.Номенклатура, Поз, "Номенклатура") = 0 Тогда
						// товар в табличной части не нашли
						// добавим в табличную часть данные по остаткам из остатков
						
						ПозОст = 0;
						Если ТаблОстатков.НайтиЗначение(ДобТовары.Номенклатура, ПозОст, "Номенклатура") = 1 Тогда
							
							// установим позициют, начиная с которой будем распределять количество из терминала
							Поз = ТаблЧасть.КоличествоСтрок() + 1;
							
							Для Счетчик = ПозОст По ТаблОстатков.КоличествоСтрок() Цикл
								ТаблОстатков.ПолучитьСтрокуПоНомеру(Счетчик);
								Если ТаблОстатков.Номенклатура <> ДобТовары.Номенклатура Тогда
									// начались остатки другого товара
									Прервать;
								КонецЕсли;
								
								ТаблЧасть.НоваяСтрока();
								ТаблЧасть.Номенклатура		= ТаблОстатков.Номенклатура;
								ТаблЧасть.Единица			= ТаблОстатков.Номенклатура.БазоваяЕдиница;
								ТаблЧасть.Коэффициент		= ТаблЧасть.Единица.Коэффициент;
								ТаблЧасть.Цена				= ТаблОстатков.ЦенаПрод;
								ТаблЧасть.КоличествоУчет	= ТаблОстатков.Количество;
								ТаблЧасть.СуммаУчет			= ТаблОстатков.Количество * ТаблЧасть.Цена;
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
					
					Если Поз > 0 Тогда
						КонПоз = Поз; // последняя строка с текущим товаром
						Для Сч = Поз По ТаблЧасть.КоличествоСтрок() Цикл
							ТаблЧасть.ПолучитьСтрокуПоНомеру(Сч);
							
							Если ТермОстаток <= 0 Тогда
								// закончился реальный остаток
								Прервать;
							КонецЕсли;
							
							Если ТаблЧасть.Номенклатура <> ДобТовары.Номенклатура Тогда
								// началась другая позиция номенклатуры
								Прервать;
							КонецЕсли;
							
							// пересчитаем остаток количества из терминала в единицу из табличной части
							ВремОстаток	= ТермОстаток / ?(ПустоеЗначение(ТаблЧасть.Коэффициент) = 1, 1, ТаблЧасть.Коэффициент);
							
							// добаляемое количество - это минимум между остком количества из терминала и 
							// разницей Учетного и Фактического из строки табличной части
							ДобКолво	= Мин(ТаблЧасть.КоличествоУчет - ТаблЧасть.Количество, ВремОстаток);
							
							Если ДобКолво > 0 Тогда
								
								// если есть что добавлять
								ТаблЧасть.Количество	= ТаблЧасть.Количество + ДобКолво;
								
								// уменьшаем остаток количества из терминала на добавленное количество
								ТермОстаток				= ТермОстаток - ДобКолво * ТаблЧасть.Коэффициент;
							КонецЕсли;
							
							ТаблЧасть.Сумма	= ТаблЧасть.Цена * ТаблЧасть.Количество;
							КонПоз = Сч;
						КонецЦикла;
						
						Если ТермОстаток > 0 Тогда
							// Не все количество, полученное из терминала, распределилось.
							// Добавим нераспределенное количесво в к фактическому в последнюю строку текущего товара.
							ТаблЧасть.ПолучитьСтрокуПоНомеру(КонПоз);
							ТаблЧасть.Количество	= ТаблЧасть.Количество + ТермОстаток / 
							                         ?(ПустоеЗначение(ТаблЧасть.Единица.Коэффициент) = 1, 1, ТаблЧасть.Единица.Коэффициент);
						КонецЕсли;	
					Иначе
						// Строки с текущим товаром отсуствовали. Добавим новую строку без учетных характеристик
						ТаблЧасть.НоваяСтрока();
						ТаблЧасть.Номенклатура	= ДобТовары.Номенклатура;
						ТаблЧасть.Единица		= ДобТовары.Номенклатура.БазоваяЕдиница;
						ТаблЧасть.Коэффициент	= ТаблЧасть.Единица.Коэффициент;
						ТаблЧасть.Количество	= ТермОстаток / ?(ПустоеЗначение(ТаблЧасть.Коэффициент) = 1, 1, ТаблЧасть.Коэффициент);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли; // Если ВидОперации = ПоСкладу Тогда
			
		КонецЦикла; // Пока ДобТовары.ПолучитьСтроку() = 1 Цикл
		
		ТаблЧасть.Сортировать("НомерСтрокиДокумента");
		ЗагрузитьТабличнуюЧасть(ТаблЧасть);
		
		Если Вопрос("Очистить память терминала сбора данных?", "Да+Нет", 60) = "Да" Тогда
		    глТерминалОчиститьПамять();
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
КонецФункции // ЗаполнитьИзТерминала()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет.
//
// Возвращаемое значение: 
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "Заполнить"
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и вызов процедуры заполнения документа
//
Процедура ПоКнопкеЗаполнить()
	
	Перем ТипЗаполнения;
	
	Если (ВидИнвентаризации = 1) И (Фирма.Выбран() = 0) Тогда
		Предупреждение("Не указана фирма, заполнение невозможно!", 60);
		Возврат;
	КонецЕсли;
	
	Если Склад.Выбран() = 0 Тогда
		Предупреждение("Не указан склад, заполнение невозможно!", 60);
		Возврат;
	КонецЕсли;

	СписокТипов = СоздатьОбъект("СписокЗначений");
	СписокТипов.ДобавитьЗначение("Перезаполнить");

	Если (КоличествоСтрок() <> 0) Тогда
		СписокТипов.ДобавитьЗначение("Обновить");
	КонецЕсли;
	
	Если глТерминалВключен() = 1 Тогда
		СписокТипов.ДобавитьЗначение("Заполнить из терминала");
	КонецЕсли;
	
	Если СписокТипов.РазмерСписка() = 1 Тогда
		ТипЗаполнения = СписокТипов.ПолучитьЗначение(1);
	Иначе
		Если СписокТипов.ВыбратьЗначение(ТипЗаполнения, , , 60, 1) <> 1 Тогда
		    Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗаполнения = "Заполнить из терминала" Тогда
		Результат = ЗаполнитьИзТерминала();
	Иначе
		
		// Спросим выполнять ли заполнение документа, если позиция документа находится после ГП
		СтрСооб="документ может быть заполнен неактуальными данными. "+
				"Возможно, следует восстановить последовательность. "+
				"Для этого можно воспользоваться проведением документов (пункт меню ""Операции"") либо групповой обработкой документов. "+
				"Продолжить заполнение документа?";
		Если Последовательность.ОсновнаяПоследовательность.Проверить(?(Выбран()=0, ДатаДок, ТекущийДокумент())) = 0 Тогда
			Результат = Вопрос("Позициия документа находится после"+РазделительСтрок+"Границы последовательности документов ("
					+Последовательность.ОсновнаяПоследовательность.Получить()+"), "+РазделительСтрок+СтрСооб,"Да+Нет", 60);
			Если Результат <> "Да" Тогда
				Возврат;
			КонецЕсли;	
		КонецЕсли;
		
		Если ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу Тогда
			Результат = ЗаполнениеПоСкладу(ТипЗаполнения);
		ИначеЕсли ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
			Результат = ЗаполнениеПоРознице(ТипЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	                      
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Если ВидИнвентаризации = 2 Тогда
	    Предупреждение("При инвентаризации по компании заполнение методом подбора не выполняется!", 60);
		Возврат;
	КонецЕсли;               
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма, "Фирма");
	Параметры.ДобавитьЗначение(Склад, "Склад");
	Параметры.ДобавитьЗначение(0,     "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет", "ЦенаВподборе");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
    
//******************************************************************************
// ПечатьСверкиНаличия(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//
Процедура ПечатьСверкиНаличия(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ИсхТабл;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	ИсхТабл.ИсходнаяТаблица("СверкаНаличия");
	ИсхТабл.ВывестиСекцию("Шапка");
	ИсхТабл.ПовторятьПриПечатиСтроки(1, ИсхТабл.ВысотаСекции("Шапка"));
	
	Ном = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном = Ном + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
	      
	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // ПечатьСверкиНаличия

//******************************************************************************
// ПечатьИнвОписи(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//
Процедура ПечатьИнвОписи(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ИсхТабл;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	ИсхТабл.ИсходнаяТаблица("ИнвентаризационнаяОпись");
	
	// титульный лист описи
	ИсхТабл.ВывестиСекцию("Титул");
	ИсхТабл.НоваяСтраница();
	
	КолСтрокНаЛисте	= 17;
	ТекСтрока		= КолСтрокНаЛисте;
	
	// фактические остатки
	ИтогСуммаОпись = 0;
	ИтогКоличОпись = 0;
	ИтогСуммаСтр   = 0;
	ИтогКоличСтр   = 0;
	          
	// по бух. учету
	ИтогСуммаУчетОпись = 0;
	ИтогКоличУчетОпись = 0;
	ИтогСуммаУчетСтр   = 0;
	ИтогКоличУчетСтр   = 0;
	
	ПризнакНовСтраница = 0;
	НомерСтр           = 2;
	
	// Количество строк на текущей странице
	КолНомСтр = 0;
    Ном       = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		
		Если ТекСтрока = КолСтрокНаЛисте Тогда
			
			Если ПризнакНовСтраница = 1 Тогда
				ИсхТабл.НоваяСтраница();
				// обнуляем итоги по странице
				// по документам
				ИтогСуммаУчетСтр = 0;
				ИтогКоличУчетСтр = 0;
				
				// реальное 
				ИтогСуммаСтр = 0;
				ИтогКоличСтр = 0;
				
				КолНомСтр = 0;
				НомерСтр  = НомерСтр + 1;
			КонецЕсли;
			
			ПризнакНовСтраница	= 1;
			ТекСтрока			= 0;
			ИсхТабл.ВывестиСекцию("Шапка");
		КонецЕсли;
		
		ПечСуммаУчет = глПересчет(СуммаУчет, Валюта, Курс, глРубли, ДатаДок);
		ПечСуммаФакт = глПересчет(Сумма, Валюта, Курс, глРубли, ДатаДок);
		
		ПечЦенаФакт  = ?(Количество <> 0, ПечСуммаФакт/Количество, ПечСуммаФакт);
		
		// итоги по данным бухгалтерского учета
		ИтогСуммаУчетОпись = ИтогСуммаУчетОпись + ПечСуммаУчет;
		ИтогКоличУчетОпись = ИтогКоличУчетОпись + КоличествоУчет;
		ИтогСуммаУчетСтр   = ИтогСуммаУчетСтр   + ПечСуммаУчет;
		ИтогКоличУчетСтр   = ИтогКоличУчетСтр   + КоличествоУчет;
		
		// фактические итоги
		ИтогСуммаОпись = ИтогСуммаОпись + ПечСуммаФакт;
		ИтогКоличОпись = ИтогКоличОпись + Количество;
		ИтогСуммаСтр   = ИтогСуммаСтр   + ПечСуммаФакт;
		ИтогКоличСтр   = ИтогКоличСтр   + Количество;
		
		
		КолНомСтр = КолНомСтр + 1;
		Ном       = Ном       + 1;
		ТекСтрока = ТекСтрока + 1;
		ИсхТабл.ВывестиСекцию("Строка");
		
		Если ТекСтрока = КолСтрокНаЛисте Тогда
		  	ИсхТабл.ВывестиСекцию("ИтСтрЧ");
		  	ИсхТабл.ВывестиСекцию("ИтСтрП");
		КонецЕсли;
		  
	КонецЦикла;
	
	Если ТекСтрока < КолСтрокНаЛисте Тогда
  		ИсхТабл.ВывестиСекцию("ИтСтрЧ");
  	КонецЕсли;
  	
	Если ТекСтрока  <КолСтрокНаЛисте Тогда
		ИсхТабл.ВывестиСекцию("ИтСтрП");
  	КонецЕсли;
	
	// постедняя страница
  	ИсхТабл.НоваяСтраница();
	НомерСтр = НомерСтр + 1;
	ИсхТабл.ВывестиСекцию("Итог");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // ПечатьИнвОписи

//******************************************************************************
// ПечатьСличВедомости(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//
Процедура ПечатьСличВедомости(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ИсхТабл;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	ИсхТабл.ИсходнаяТаблица("СличительнаяВедомость");
	ИсхТабл.ВывестиСекцию("Титул");
	ИсхТабл.ВывестиСекцию("Шапка");
	
	ИтогИзлишек        = 0;
	ИтогСуммаИзлишек   = 0;
	ИтогНедостача      = 0;
	ИтогСуммаНедостача = 0;
	
	Ном = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		
		СуммаУчетПеч = глПересчет(СуммаУчет, Валюта, Курс, глРубли, ДатаДок);
		СуммаФактПеч = глПересчет(Сумма    , Валюта, Курс, глРубли, ДатаДок);
		
		Если Количество > КоличествоУчет Тогда
			Излишек      = Количество   - КоличествоУчет;
			СуммаИзлишек = СуммаФактПеч - СуммаУчетПеч;
			
			ИтогИзлишек        = ИтогИзлишек      + Излишек;
			ИтогСуммаИзлишек   = ИтогСуммаИзлишек + СуммаИзлишек;
			
			Недостача      = 0;
			СуммаНедостача = 0;
		ИначеЕсли КоличествоУчет > Количество Тогда
			Недостача      = КоличествоУчет - Количество;
			СуммаНедостача = СуммаУчетПеч   - СуммаФактПеч;
			
			ИтогНедостача      = ИтогНедостача      + Недостача;
			ИтогСуммаНедостача = ИтогСуммаНедостача + СуммаНедостача;
			
			Излишек      = 0;
			СуммаИзлишек = 0;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Ном = Ном + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
	
	ИсхТабл.ВывестиСекцию("Итого");
	ИсхТабл.ВывестиСекцию("Подвал");
	
	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // ПечатьСличВедомости()

//******************************************************************************
// ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
// 
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "&Печать"
//
// Описание:
// 	Вызывается по кнопке "Печать" и по кнопке "Выбор печатной формы" (небольшая 
// 	кнопка рядом с кнопкой печати)
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьСверкиНаличия(СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы = 2  Тогда
		ПечатьИнвОписи(СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы = 3  Тогда
		ПечатьСличВедомости(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыбПечать"
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриОбработкеПодбора(ВыбЗнач)
//
// Параметры: 
//  ВыбЗнач - значение, поступившее из формы подбора
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Процедура обработки подбора
//
Процедура ПриОбработкеПодбора(ВыбЗнач)

	Перем ТаблЧасть, ТаблицаПодбора;
	
	Если ТипЗначенияСтр(ВыбЗнач) = "СписокЗначений" Тогда
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
	Иначе
		Возврат; // если не список ничего не делаем
	КонецЕсли;	
	
	Если ТипЗначенияСтр(ТаблицаПодбора) = "ТаблицаЗначений" Тогда
		
		ВыгрузитьТабличнуюЧасть(ТаблЧасть, "Единица, НомерСтроки");
		
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() <> 0 Цикл
			ВыбНоменклатура	= ТаблицаПодбора.Номенклатура;
			ВыбЕдиница		= ТаблицаПодбора.Единица;
			
			Если ВыбНоменклатура <> ВыбЕдиница.Владелец Тогда
			    Сообщить("В подборе выбрана единица другого элемента справочника Номенклатура.
				         |Проверьте правильность указания базовой и основной единицы для элемента
						 |""" + СокрЛП(ВыбНоменклатура) + """, а также правильность указания единиц измерения 
						 |в справочниках единиц и цен для данной позиции номенклатуры." );
				Продолжить;
			КонецЕсли;
			
			// Ищем номенклатуру среди подобранных
			Поз	= 0; 
		    ТаблЧасть.НайтиЗначение(ВыбЕдиница, Поз, "Единица");
			
			Если Поз > 0 Тогда
				
				// нашли, увеличиваем количество
				ПолучитьСтрокуПоНомеру(Поз);
				Количество = Количество + ТаблицаПодбора.Количество;
				
				глПересчетТаблЧасти(Контекст, "Количество");			
			Иначе
				
				// не нашли, добавляем новую строку
				НоваяСтрока();
				
				Номенклатура = ВыбНоменклатура;
				Количество   = ТаблицаПодбора.Количество;
				Единица      = ВыбЕдиница;
				Коэффициент  = ВыбЕдиница.Коэффициент;    
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПриОбработкеПодбора()      
	
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//     
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	
		Возврат;
	КонецЕсли;
	
	Если Форма.Параметр = "ПоРознице" Тогда  
		ВидОперации = Перечисление.ВидыИнвентаризаций.ПоРознице;
		
		//Если склад по умолчанию не розничный, то не заполняем реквизит
		Если ПустоеЗначение(Склад.РозничныйСклад) = 1 Тогда
			Склад = "";
		КонецЕсли;
	Иначе
		ВидОперации = Перечисление.ВидыИнвентаризаций.ПоСкладу;
		
		//Если склад по умолчанию розничный, то не заполняем реквизит
		Если ПустоеЗначение(Склад.РозничныйСклад) = 0 Тогда
			Склад = "";
		КонецЕсли;
	КонецЕсли;       
	
КонецПроцедуры // ВводНового()    

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	                         
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата       		= ДатаДок;
	СтараяФирма   		  	= Фирма;  
		
	НачальнаяДатаДокумента 	= ДатаДок;                     
	                         
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнЦены.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
	КонецЕсли;
	
	УстановкаВидимостиСлоев(Форма.Закладки.ТекущаяСтрока());
	ОбновитьНадписи();
	ВидИнвентаризации = ?(Фирма.Выбран() = 1, 1, 2);
	УправлениеДиалогомВидИнвентаризации();
	
КонецПроцедуры  // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриРедактированииНовойСтроки()
	
	// инициализация списка пустыми значениями
	СтараяСтрока.Установить("Номенклатура", "");
	СтараяСтрока.Установить("Цена", 0);
	СтараяСтрока.Установить("Сумма", 0);
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "Цена"    ) 
	или  (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0 Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
	// инициализация списка текущими значениями строки
	СтараяСтрока.Установить("Номенклатура", Номенклатура);
	СтараяСтрока.Установить("Цена", Цена);
	СтараяСтрока.Установить("Сумма", Сумма);
	
КонецПроцедуры // ПриНачалеРедактированияСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	                    
	УстановкаВидимостиСлоев(Форма.Закладки.ТекущаяСтрока());
	Если НомерЗакладки=2 Тогда
		ОбновитьНадписи();
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()                                                                 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);             
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)

	ПриОбработкеПодбора(ВыбЗнач);
	
КонецПроцедуры // ОбработкаПодбора()

Процедура ОчистиКолФакт()	//Чтобы всё было чистым :)
	а=вопрос("Вы уверены, что хотите очистить (кол-во факт.)?",1,50);
	ВыбратьСтроки();
	Если а=1 тогда
		Пока ПолучитьСтроку()=1 Цикл
		    Количество=0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
	
Процедура Результат()
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Инвент");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	
	ценник=1;
	
	//******************************************************************************
	ВыбратьСтроки();номер=0;СписаноСумма=0;ОприхСумма=0;
	КатЦены	= Константа.РозничныйТипЦен;
	пока получитьСтроку()=1 цикл
		Если КоличествоУчет<>Количество тогда
			Если Количество-КоличествоУчет<0 тогда
				ценник		= глПолучитьЦену(Номенклатура, КатЦены, ДатаДок);
				Списано		= (Количество - КоличествоУчет) * (-1) * Ценник;
				СписаноСумма= СписаноСумма + Списано;
				Оприх		= 0;
				номер		= номер + 1;
			иначе
				ценник		= глПолучитьЦену(Номенклатура, КатЦены, ДатаДок);
				Оприх		= (КоличествоУчет - Количество) * (-1) * Ценник;
				Списано		= 0;
				ОприхСумма	= ОприхСумма + Оприх;
				номер		= номер + 1;
			КонецЕсли;
			Таб.ВывестиСекцию("Строка");
		КонецЕсли;
	КонецЦикла;



	Таб.ВывестиСекцию("Дно");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Сводный отчёт по инвентаризации...","");
КонецПроцедуры



          Процедура СортироватьТ() 
     
	ПолеСортировки = "Номенклатура";
    ТЗ = СоздатьОбъект("ТаблицаЗначений");
     ВыгрузитьТабличнуюЧасть(ТЗ);
	 
	       	ТЗ.НоваяКолонка("Родитель");
			ТЗ.ВыбратьСтроки();
			Пока ТЗ.ПолучитьСтроку() = 1 Цикл
				ТЗ.Родитель = ТЗ.Номенклатура.Родитель;
			КонецЦикла;
			ТЗ.Сортировать("Родитель,Номенклатура");
			
	  	      
	 
     УдалитьСтроки();
     ЗагрузитьТабличнуюЧасть(ТЗ);
КонецПроцедуры

Процедура ЗаполнитьЦены()
	//Объявление переменных
	Меню 				= СоздатьОбъект("СписокЗначений");
	СписокНоменклатуры  = СоздатьОбъект("СписокЗначений");
	ТаблЗапроса 		= СоздатьОбъект("ТаблицаЗначений");
	СпрЦены 			= СоздатьОбъект("Справочник.Цены");
	ДатаОпрСеб 			= "";
	Выб 				= "";
	Меню.ДобавитьЗначение("Себестоимость РубНДС");
	Меню.ДобавитьЗначение("Себестоимость РубБезНДС");
	Меню.ДобавитьЗначение("Себестоимость Упр");
	Меню.ДобавитьЗначение("Розничные Руб");
	
	//Проверка заполнения табличной части
	Если КоличествоСтрок()=0 Тогда
		Сообщить("Табличная часть пуста","!!!");
		Возврат;
	КонецЕсли;	
	
	Если Меню.ВыбратьЗначение(Выб,,,,1)=1 Тогда
		//Расчет себестоимости
		ВыгрузитьТабличнуюЧасть(СписокНоменклатуры,"Номенклатура");
		Если Выб <> "Розничные Руб" Тогда
			Если ВвестиДату(ДатаОпрСеб,"Себестоимость на дату")=0 Тогда
				Сообщить("Не выбрана дата для себестоимости","!!!");
				Возврат;
			КонецЕсли;
			Состояние("Расчет себестоимости");
			МОЛотбора = Склад.МОЛ;
			ФирмаОтбора = Фирма;
			Запрос = СоздатьОбъект("Запрос");
			ТекстЗапроса = 
			"//{{ЗАПРОС(Сформировать)
			|Период с ДатаОпрСеб по ДатаОпрСеб;
			|Фирма		= Регистр.ПартииНаличие.Фирма;
			|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
			|МОЛ = Регистр.ПартииНаличие.МОЛ;
			|Количество = Регистр.ПартииНаличие.Количество;";
			
			Если Выб = "Себестоимость РубНДС" Тогда // бух с НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб;";
				
			ИначеЕсли Выб = "Себестоимость РубБезНДС" Тогда // бух без НДС
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаБезНДС;";
				
			ИначеЕсли Выб = "Себестоимость Упр" Тогда
				ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаУпр;";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"Функция КонОстС = НачОст(Сумма);
			|Функция КонОстК = НачОст(Количество);
			|Группировка Номенклатура без групп;
			|Условие((МОЛ = МОЛотбора) и (Номенклатура в СписокНоменклатуры) и (Фирма = ФирмаОтбора));
			|";
			// Если ошибка в запросе, то выход из процедуры
			Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
				Возврат;
			КонецЕсли;
			//Выгружаем данные запроса			
			Запрос.Выгрузить(ТаблЗапроса,0,0);
		КонецЕсли;
		// обработка табличной части, пересчет цен
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Состояние("Обработка табличной части: "+НомерСтроки);
			Если Выб = "Розничные Руб" Тогда
				СпрЦены.ИспользоватьВладельца(Номенклатура);
				СпрЦены.ВыбратьЭлементы();
				Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
					Если СокрЛП(СпрЦены.ТипЦен.Наименование) = "Розничная" Тогда
						Цена = СпрЦены.Цена.Получить(ДатаДок);
						ПриИзмененииЦеныИлиСуммы("Цена");
					КонецЕсли;	
				КонецЦикла;
			Иначе
				стр = "";
				ТемпЦена = 0;
				Если ТаблЗапроса.НайтиЗначение(Номенклатура,стр,"Номенклатура")=1 Тогда
					 ТемпЦена  = ТаблЗапроса.ПолучитьЗначение(стр,"КонОстС")/ТаблЗапроса.ПолучитьЗначение(стр,"КонОстК");
					 СуммаУчет = ТемпЦена*КоличествоУчет;
					 Сумма     = ТемпЦена*Количество;
					 Цена      = ТемпЦена;
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
		Сообщить("Цены пересчитаны","");
	КонецЕсли;
КонецПроцедуры










////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название",		"Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл",			"Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка",		"Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания",	"Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма сверки наличия";
ТаблицаПечФорм.Кнопка       = "Сверка";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма инвентаризационной описи ИНВ-3";
ТаблицаПечФорм.Кнопка       = "ИНВ-3";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма сличительной ведомости ИНВ-19";
ТаблицаПечФорм.Кнопка       = "ИНВ-19";

СтараяСтрока = СоздатьОбъект("СписокЗначений");