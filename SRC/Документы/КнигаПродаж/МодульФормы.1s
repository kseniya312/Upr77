////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"   
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем СтараяФирма; // для контроля необходимости пересчетов

Перем Трассировка;  

Перем Таб;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                                
//******************************************************************************
// ПодсказкаОДокументе()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Текст подстказки о документе "Книга покупок".
//
// Вызывается из формул элементов диалога:
//  Текстовая надпись в диалоге.
//
// Описание:
//  Формирование строки подсказки о предназначении документа.
//
Функция ПодсказкаОДокументе()
	
	Возврат "Автоматическое формирование записей книги продаж 
			|за период c "+Формат(НачМесяца(ДатаДок), "ДДДММГГГГ")+" по "+Формат(ДатаДок, "ДДДММГГГГ")+",
			|метод определения выручки """+Нрег(Фирма.ЮрЛицо.МетодОпределенияВыручки.Получить(ДатаДок))+"""."
	
КонецФункции // ПодсказкаОДокументе()


//******************************************************************************
// УправлениеДиалогом()
// Параметры:
//  нет
//
// Возвращаемое значение:
//  нет
//
// Вызывается из формул элементов диалога:
// "ФлагВыпискиАвансов"
//
// Описание: для управления формой диалога
Процедура УправлениеДиалогом()                   
	
	Форма.ДатаСчетов.Доступность(ФлагВыпискиАвансов);    
	Форма.ДатаСчетов1.Доступность(ФлагВыпискиАвансов); 
	
КонецПроцедуры  // УправлениеДиалогом()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()


//******************************************************************************
// ПроверкаАвансовыхСчетов()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
//	Нет
// 
// Описание: 
//	Просматриваем все "протянутые" авансы и проверяем наличие введенных
// на их основании с/ф на аванс

Процедура ПроверкаАвансовыхСчетов()  
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	ДатаНачала = НачМесяца(ДатаДок);
	ДатаКонца  = ДатаДок;
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|ЗапрФирма = Регистр.Покупатели.Фирма.ТекущийЭлемент;
	|Контрагент = Регистр.Покупатели.Договор.Владелец.ТекущийЭлемент;
	|ДокАванса = Регистр.Покупатели.КредДокумент.ТекущийДокумент;
	|СтавкаНП = Регистр.Покупатели.СтавкаНП;
	|Договор = Регистр.Покупатели.Договор;
	|ВидДолга = Регистр.Покупатели.ВидДолга;
	|Остаток = Регистр.Покупатели.СуммаРуб;
	|Функция Аванс	   = Расход(Остаток);
	|Функция ОстАванса = КонОст(Остаток);
	|Группировка ДокАванса;
	|Условие(ЗапрФирма = Фирма);
	|Условие(ВидДолга = Перечисление.ВидыДолга.Аванс);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда    
		Возврат;
	КонецЕсли;
    
	ТабАвансов = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТабАвансов,"ЗапрФирма,Договор,СтавкаНП,ДокАванса,Контрагент,ОстАванса,Аванс",0);
	ТабАвансов.НоваяКолонка("СчФактАванс","Документ");
                                                               
	ЕстьАвансы = 0;
	
	ТабАвансов.ВыбратьСтроки();
	Пока ТабАвансов.ПолучитьСтроку()=1 Цикл
		Если ТабАвансов.ДокАванса.Выбран()=1 Тогда            
			Если ТабАвансов.ОстАванса > 0 Тогда
			    Продолжить;
			КонецЕсли;
			
			//проверяем наличие подчиненных документов "СчетФактураВыданный", не помеченных на удаление
			ТабАвансов.СчФактАванс = глНайтиСчетФактуру(ТабАвансов.ДокАванса,"СчетФактураВыданный", 0);
			ЕстьАвансы = ?(ТабАвансов.СчФактАванс.Выбран()=0,1,ЕстьАвансы);
		КонецЕсли;    
	КонецЦикла;    
	
	Выписывать = 0;
	Если ФлагВыпискиАвансов = 0 Тогда
		Расшифровка = СоздатьОбъект("СписокЗначений");
	    Расшифровка.Установить("Отчет", "КнигаПродаж");
		
		// все настройки помещаем в список
		Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
	    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
		Расшифровка.Установить("ВыбЮрЛицо",     Фирма.ЮрЛицо);
		Расшифровка.Установить("ФлагВыпискиАвансов",ФлагВыпискиАвансов);
		Расшифровка.Установить("ДатаСчетов",        ДатаСчетов);
		Расшифровка.Установить("ПоКлиентам",        0);
		Расшифровка.Установить("ОтборПоКлиентам",   "");
		Расшифровка.Установить("ВыбКонтрагент",     "");

		
		Если (ТипЗначенияСтр(Таб) <> "Таблица") Тогда
		   	Таб = СоздатьОбъект("Таблица");
		Иначе
		 	Таб.Очистить();
		КонецЕсли;      

		Если ЕстьАвансы = 1 Тогда
			Таб.ИсходнаяТаблица("ПроверкаВыписки");
			Таб.ВывестиСекцию("Шапка");
	
			НомСтр = 1;
			ТабАвансов.ВыбратьСтроки();
			Пока ТабАвансов.ПолучитьСтроку()=1 Цикл
				Если (ТабАвансов.СчФактАванс.Выбран() = 0)
				   и (ТабАвансов.ДокАванса.Вид() <> "РКО") Тогда
					Если ТабАвансов.ОстАванса > 0 Тогда
					    Продолжить;
					КонецЕсли;
					Печнарушение = "Отсутствует счет-фактура на аванс!";
					Таб.ВывестиСекцию("Строка");
					НомСтр = НомСтр +1;
				КонецЕсли;
			КонецЦикла;
	
			Таб.ВывестиСекцию("Подвал");
	
			Таб.ОбластьПечати(2);
			Таб.Опции(0,0,2,0, "ПроверкаВыпискиСФ", "ПроверкаВыпискиСФ");
			Таб.ТолькоПросмотр(1);
			Таб.ОбластьПечати(2);
			Таб.Показать("Проверка выписки Счетов-фактур");    
		КонецЕсли;
		
	Иначе 
		ТабАвансов.ВыбратьСтроки();
		Пока ТабАвансов.ПолучитьСтроку()=1 Цикл
			Если (ТабАвансов.СчФактАванс.Выбран()=0) 
			   и (ТабАвансов.ДокАванса.Вид() <> "РКО") Тогда
			   	Выписывать = 1;
	
			   	//создаем новую счета-фактуру на аванс
				Парам = СоздатьОбъект("СписокЗначений");
				Парам.ДобавитьЗначение("Записать","Команда");
				ДтАв  = ТабАвансов.ДокАванса.ДатаДок;
				
				// Получим время документа
				Часов = 0; Минут =0; Секунд = 0;
				ТабАвансов.ДокАванса.ПолучитьВремя(Часов, Минут, Секунд);
				
				Если ДатаСчетов = 1 Тогда  // Надо выписывать СФ на аванс на дату аванса 
					ДтСч  = ДтАв;
					
					//Вычислим время СФ на аванс
					Если Секунд < 60  Тогда
					    Секунд = Секунд + 1;
					ИначеЕсли Минут < 60 Тогда
						Минут  = Минут + 1;
						Секунд = 0;
					ИначеЕсли Часов < 24 Тогда
						Часов  = Часов + 1;
						Минут  = 0;
						Секунд = 0; 
					КонецЕсли;
				
				Иначе // Надо выписчывать СФ на аванс на конец месяца
					ДтСч  = Мин(КонМесяца(ДтАв),ПолучитьДатуТА());
				КонецЕсли;
				ДтСч  = ?(ДатаСчетов=1,ДтАв,Мин(КонМесяца(ДтАв),ПолучитьДатуТА()));
				Парам.ДобавитьЗначение(ДтСч      ,"ДатаСчета");
				
				Если ДтСч > Константа.ДатаЗапретаРедактирования Тогда            
					Если ТабАвансов.Аванс > 0 Тогда
						Если (ДтСч >= НачМесяца(ДатаДок)) и (ДтСч <= ДатаДок) Тогда      
						Иначе
							глСообщениеПроведения("Не выписан счет-фактура на аванс прошлого периода!" 
							+ глПредставлениеДокумента(ТабАвансов.ДокАванса),ТабАвансов.ДокАванса,,ТекущийДокумент());
							Продолжить;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ДатаСчетов = 1  Тогда // выписываем на дату аванса
						ОткрытьФорму("Документ.СчетФактураВыданный",Парам,ТабАвансов.ДокАванса);

						//проверка записи счета - фактуры
						ДокТест = "";
						ДокТест = глНайтиСчетФактуру(ТабАвансов.ДокАванса,"СчетФактураВыданный", 0);
			
						Док = СоздатьОбъект("Документ." + ДокТест.Вид());
						Док.НайтиДокумент(ДокТест);           
			    		Док.УстановитьВремя(Часов,Минут,Секунд);   
						Док.Записать();
						Док.Провести();   
					Иначе     
						
						// Надо пересчитать сумму, а для этого надо знать какая сумма аванса осталась на конец
						// месяца по этому документу
						ВремРег = СоздатьОбъект("Регистры");  
						ВремПокупатели = ВремРег.Покупатели;
						ВремПокупатели.УстановитьЗначениеФильтра("Фирма"		,ТабАвансов.ДокАванса.Фирма,1);
						ВремПокупатели.УстановитьЗначениеФильтра("Договор"		,ТабАвансов.Договор,1);
						ВремПокупатели.УстановитьЗначениеФильтра("СтавкаНП"		,ТабАвансов.СтавкаНП,1);
						ВремПокупатели.УстановитьЗначениеФильтра("КредДокумент"	,ТабАвансов.ДокАванса);
						ВремПокупатели.УстановитьЗначениеФильтра("ВидДолга"		,глВД.Аванс);
						ТИПокупатели = СоздатьОбъект("ТаблицаЗначений");
						
						Если ДатаДок <> ПолучитьДатуТА() Тогда              
							ВремПокупатели.ВременныйРасчет();               
							ВремРег.Актуальность(1);
							ВремРег.РассчитатьРегистрыПо(ДатаДок);
						КонецЕсли;
						
						ВремПокупатели.ВыгрузитьИтоги(ТИПокупатели,1,1);    
						Если ТИПокупатели.Итог("СуммаРуб") < 0 Тогда 
							ОткрытьФорму("Документ.СчетФактураВыданный",Парам,ТабАвансов.ДокАванса);

							//проверка записи счета - фактуры
							ДокТест = "";
							ДокТест = глНайтиСчетФактуру(ТабАвансов.ДокАванса,"СчетФактураВыданный", 0);
				
							Док = СоздатьОбъект("Документ." + ДокТест.Вид());
							Док.НайтиДокумент(ДокТест);           
						
							Док.ВыбратьСтроки();
							Если Док.ПолучитьСтроку() = 1 Тогда
								Если Док.Сумма <> - ТИПокупатели.Итог("СуммаРуб") Тогда
									Док.Сумма =  - ТИПокупатели.Итог("СуммаРуб");
									Док.СуммаНДС=Док.Сумма*глВыделяемыйНДС(Док.СтавкаНДС);//0.1667, 0.16666(6),...
									Док.Цена = ?(Док.Количество = 0, 0, Док.Сумма/Док.Количество);
								КонецЕсли;
							КонецЕсли;
							Док.Записать();
							Док.Провести();   
						КонецЕсли;
					КонецЕсли; 
					

					Если ПустоеЗначение(глНайтиСчетФактуру(ТабАвансов.ДокАванса,"СчетФактураВыданный",0))=0 Тогда
						глСообщениеПроведения("Выписан документ "+ДокТест+" на основании: "+ТабАвансов.ДокАванса, ТабАвансов.ДокАванса,,ТекущийДокумент());    
					КонецЕсли;
				Иначе
					глСообщениеПроведения("Нельзя записывать документы с датой, более ранней чем дата запрета редактирования документов!",ТабАвансов.ДокАванса,, ТекущийДокумент());
					глСообщениеПроведения("Счет-фактура на аванс не выписан!",ТабАвансов.ДокАванса,,ТекущийДокумент());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		Если Выписывать = 0 Тогда
			глСообщениеПроведения("Авансов, по которым не оформлены счета-фактуры не найдено!",ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	СохранитьЗначение("ДатаАвансовыхСчетов", ДатаСчетов);
	
КонецПроцедуры //ПроверкаАвансовыхСчетов()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                                
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового(Скопирован) 
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
	Если Скопирован = 1 Тогда	//копирование документа
		Возврат;
	КонецЕсли;

КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()      
	
	УправлениеДиалогом();
	                       
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		
		Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
		или  (Парам.Получить("Команда") = "ПечатьНаЭкран") 
		Тогда
			Предупреждение("Документ не имеет печатной формы!", 60);
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	                                                      
	глПроверкаРазрешенияРедактирования(Контекст);   

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		  	= Фирма;
	НачальнаяДатаДокумента = ДатаДок;
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           

	ДатаСчетов = ВосстановитьЗначение("ДатаАвансовыхСчетов"); 
	
	Если ПустоеЗначение(ДатаСчетов) = 1 Тогда
		ДатаСчетов = 1;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()
                                     
//*****************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗаписи()   
	
	Если ДатаДок > ПолучитьДатуТА() Тогда
		Предупреждение("Документ нельзя записывать датой после даты точки актуальности!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0); 
	Иначе
		ПроверкаАвансовыхСчетов();
	КонецЕсли;
	
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
