////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//  Делает невидимой колонку всего, если все налоги в сумме
Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		
	КонецЕсли;
	                            
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале(); 
		
		//++Ерошенко 03.05.2007
		ПроверитьКонтрагентаВДокументе(Контрагент); 
		//--Ерошенко
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()      

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                          
//******************************************************************************
// ФормПарПечШапки(Парметры)
//
// Параметры:
//  Параметры - сисок, содержащий значения для формирования шапки печатной формы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список, содержащий значения полей для печати шапки документа
//
Процедура ФормПарПечШапки(Параметры)
	                     
	Параметры 	= СоздатьОбъект("СписокЗначений");
	// собственная фирма
	
	Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
	глПлатежныеРеквизиты(Фирма.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);

	Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
		ФирмаРеквизиты = "";
	Иначе
		ФирмаРеквизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
		                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
						  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
	КонецЕсли;
				
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) + ?(ПустоеЗначение(Фирма.ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(Фирма.ЮрЛицо.ИНН), ""), "Фирма");
	Параметры.ДобавитьЗначение(глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес), "ФирмаАдрес");
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.Телефоны), "ФирмаТелефоны");
	Параметры.ДобавитьЗначение(ФирмаРеквизиты, "ФирмаРеквизиты");
	Параметры.ДобавитьЗначение(СокрЛП(Фирма.ЮрЛицо.ОКПО), "ФирмаОКПО");
	
	// контрагент
	
	Клиент			= "";
	КлиентЮрАдрес	= "";
	КлиентФактАдрес	= "";
	КлиентОКПО		= "";
	КлиентРевизиты	= "";
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Клиент			= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование) +
		                  ?(ПустоеЗначение(Контрагент.ЮрФизЛицо.ИНН) = 0, ", ИНН" + СокрЛП(Контрагент.ЮрФизЛицо.ИНН), "");
		КлиентЮрАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ЮрАдрес);
		КлиентФактАдрес		= глПредставлениеАдреса(Контрагент.ЮрФизЛицо.ФактАдрес);
		
		// у физ. лиц нет ОКПО
		Если Контрагент.ЮрФизЛицо.Вид() <> "ФизЛица" Тогда
			КлиентОКПО	= СокрЛП(Контрагент.ЮрФизЛицо.ОКПО);
		КонецЕсли;
		
		Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
		глПлатежныеРеквизиты(Контрагент.ОсновнойСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
		Если (ПустоеЗначение(НомерСчета) = 1) ИЛИ (ПустоеЗначение(Банк) = 1) Тогда
			КлиентРевизиты = "";
		Иначе
			КлиентРевизиты	= "р/с " + СокрЛП(НомерСчета) + " в " + СокрЛП(Банк) + 
			                  ?(ПустоеЗначение(БИКБанка) = 0, " ,БИК " + СокрЛП(БИКБанка), "") +
							  ?(ПустоеЗначение(СчетБанка) = 0, " ,корр/с " + СокрЛП(СчетБанка), "");
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ДобавитьЗначение(Клиент, "Клиент");
	Параметры.ДобавитьЗначение(КлиентЮрАдрес, "КлиентЮрАдрес");
	Параметры.ДобавитьЗначение(КлиентФактАдрес, "КлиентФактАдрес");
	Параметры.ДобавитьЗначение(КлиентОКПО, "КлиентОКПО");
	Параметры.ДобавитьЗначение(КлиентРевизиты, "КлиентРеквизиты");
	
КонецПроцедуры // ФормПарПечШапки()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПарамШапки;
	
	ПечТабл = СоздатьОбъект("Таблица");
	ПечТабл.ИсходнаяТаблица("ТОРГ12");
	
	// инициализация переменных для печати шапки
	ФормПарПечШапки(ПарамШапки);
	
	// собственная фирма
	ВремФирма		= ПарамШапки.Получить("Фирма");
	ФирмаАдрес		= ПарамШапки.Получить("ФирмаАдрес");
	ФирмаТелефоны	= ПарамШапки.Получить("ФирмаТелефоны");
	ФирмаРеквизиты	= ПарамШапки.Получить("ФирмаРеквизиты");
	ФирмаОКПО		= ПарамШапки.Получить("ФирмаОКПО");
	
	ПечОрг			= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаТелефоны) = 0, ", тел. " + ФирмаТелефоны, "") +
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, " ," + ФирмаРеквизиты, "");
	
	ПечФирма		= ВремФирма +
	                  ?(ПустоеЗначение(ФирмаАдрес) = 0, ", " + ФирмаАдрес, "")+
					  ?(ПустоеЗначение(ФирмаРеквизиты) = 0, " ," + ФирмаРеквизиты, "");
	
	// контрагент
	
	Клиент			= ПарамШапки.Получить("Клиент");
	КлиентЮрАдрес	= ПарамШапки.Получить("КлиентЮрАдрес");
	КлиентФактАдрес	= ПарамШапки.Получить("КлиентФактАдрес");
	КлиентРеквизиты	= ПарамШапки.Получить("КлиентРеквизиты");
	КлиентОКПО		= ПарамШапки.Получить("КлиентОКПО");
	
	ПечКлиент		= Клиент +
	                  ?(ПустоеЗначение(КлиентЮрАдрес) = 0, ", " + КлиентЮрАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
					  
	ПечГрузополучатель = Клиент +
	                  ?(ПустоеЗначение(КлиентФактАдрес) = 0, ", " + КлиентФактАдрес, "")+
					  ?(ПустоеЗначение(КлиентРеквизиты) = 0, ", " + КлиентРеквизиты, "");
	
    ПечДокОснование	= "";
	
	// выясним, какую вертикальную секцию будем использовать
	Если УчитыватьНП = 0 Тогда
		ВертСекция = "";
	Иначе
		ВертСекция = "_НП";
	КонецЕсли;
	
	// Выводим шапку таблицы. Шапка печатается на каждом листе.
	ПечТабл.ВывестиСекцию("Шапка");
	
	// Выводим спецификацию
	
	//Для простоты настройки печатной формы примем следующие соглашения:
	//	-	высота строк в таблице печатной формы задана жестко,
	//		тогда известно, сколько строк помещается на странице;
	СтрокНаСтранице	= 22;
	
	//	-	высота шапки и подвала задана жестко и кратна высоте строк таблицы,
	//		тогда можно указать, сколько строк занимают шапка и подвал
	//		в пересчете на строки таблицы;
	СтрокШапки		= 10;
	СтрокПодвала	= 9;
	
	//	-	для нормальной работы алгоритма необходимо, чтобы шапка и подвал
	//		могли поместиться на одной странице + хотя бы одна строка таблицы:
	//		СтрокНаСтранице >= СтрокШапки + СтрокПодвала + 1
	//	-	если подвал не помещается на странице, он переносится на другую
	//		страницу с последней строкой; исключение составляет случай,
	//		когда в таблице всего одна строка.
	НомерСтраницы	= 1;

	Если КоличествоСтрок() = 1 Тогда
		ПереноситьПоследнююСтроку	= 0;
	Иначе
		ЦелыхСтраницСПодвалом		= Цел((СтрокШапки  +КоличествоСтрок() + СтрокПодвала) / СтрокНаСтранице);
		ЦелыхСтраницБезПодвала		= Цел((СтрокШапки  +КоличествоСтрок() - 1) / СтрокНаСтранице);
		ПереноситьПоследнююСтроку	= ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
	КонецЕсли;
	
	// инициализация итогов по странице
	ИтогоКоличествоНаСтранице	= 0;
	ИтогоСуммаНаСтранице		= 0;
	ИтогоНДСНаСтранице			= 0;
	ИтогоСуммаСНДСНаСтранице	= 0;
	ИтогоНГСМНаСтранице			= 0;
	ИтогоНПНаСтранице			= 0;

	// инициализация итогов по документу
	ИтогоКоличество	= 0;
	ИтогоСумма		= 0;
	ИтогоНДС		= 0;
	ИтогоСуммаСНДС	= 0;
	ИтогоНГСМ		= 0;
	ИтогоНП			= 0;

	Ном	= 0;
	
	КурсРублей = глКурсДляВалюты(глРубли, ДатаДок);
	
	ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Ном	= Ном + 1;
		
		//Начинаем новую страницу, если предыдущая строка была последней на странице
		//или пора переносить последнюю строку на последнюю страницу с подвалом.
		ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
		
		Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
		 или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок())) Тогда
			ПечТабл.ВывестиСекцию("ИтогоПоСтранице"+ВертСекция);
			
			// очистим итоги по странице
			ИтогоКоличествоНаСтранице	= 0;
			ИтогоСуммаНаСтранице		= 0;
			ИтогоНДСНаСтранице			= 0;
			ИтогоСуммаСНДСНаСтранице	= 0;
			ИтогоНГСМНаСтранице			= 0;
			ИтогоНПНаСтранице			= 0;
			
			ПечТабл.НоваяСтраница();
			НомерСтраницы	= НомерСтраницы + 1;
			ПечТабл.ВывестиСекцию("ЗаголовокТаб" + ВертСекция);
		КонецЕсли;

		ПечТовар		= СокрЛП(Содержание);
		ПечЕдиница		= "";
		ПечОКЕИ			= "";
		
		ПечКоличество	= Количество;
		КолВо			= ?(Количество = 0, 1, Количество);
		
		ПечКолвоВОдномМесте = "";
		ПечКоличествоМест = "";
                                                                         
		СуммаПеч    = глПересчет(Сумма   , Валюта, Курс, глРубли, ДатаДок);
		СуммаНДСПеч = глПересчет(СуммаНДС, Валюта, Курс, глРубли, ДатаДок);
		СуммаНППеч  = глПересчет(СуммаНП , Валюта, Курс, глРубли, ДатаДок);
		
		Если СуммаВклНП = 1 Тогда
			СуммаБезНП = СуммаПеч - СуммаНППеч;
		Иначе
			СуммаБезНП = СуммаПеч;
		КонецЕсли;
		
		Если СуммаВклНДС = 1 Тогда
            СуммаБезНДС = СуммаБезНП - СуммаНДСПеч;
			СуммаСНДС   = СуммаБезНП;
		Иначе
            СуммаБезНДС = СуммаБезНП;
			СуммаСНДС   = СуммаБезНП + СуммаНДСПеч;
		КонецЕсли;
		
		ПечНДС			= СуммаНДСПеч;
		
		Если УчитыватьНП = 1 Тогда
		    ПечНП = СуммаНППеч;
		Иначе
			ПечНП = "";
		КонецЕсли;
		
		ПечЦена = ?(Количество <> 0, СуммаБезНДС / Количество, СуммаБезНДС);
		ПечТабл.ВывестиСекцию("Строка" + ВертСекция);

		// увеличим итоги по странице
		ИтогоКоличествоНаСтранице	= ИтогоКоличествоНаСтранице + Количество;
		ИтогоСуммаНаСтранице		= ИтогоСуммаНаСтранице + СуммаБезНДС;
		ИтогоНДСНаСтранице			= ИтогоНДСНаСтранице + ПечНДС;
		ИтогоСуммаСНДСНаСтранице	= ИтогоСуммаСНДСНаСтранице + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНПНаСтранице = ИтогоНПНаСтранице + ПечНП;
		КонецЕсли;

		// увеличим итоги по дукументу
		ИтогоКоличество	= ИтогоКоличество + Количество;
		ИтогоСумма		= ИтогоСумма + СуммаБезНДС;
		ИтогоНДС		= ИтогоНДС + ПечНДС;
		ИтогоСуммаСНДС	= ИтогоСуммаСНДС + СуммаСНДС;
		
		Если УчитыватьНП = 1 Тогда
			ИтогоНП = ИтогоНП + ПечНП;
		КонецЕсли;
	КонецЦикла;

	ПечТабл.ВывестиСекцию("ИтогоПоСтранице" + ВертСекция);
	ПечТабл.ВывестиСекцию("Всего" + ВертСекция);
	
	// выводим подвал
	НаСумму	= "на сумму " + глСуммаПрописью(ИтогоСуммаСНДС + ИтогоНП, глРубли);

	// формируем строку для вывода количества листов накладной
	// Слово лист склоняется
	Если (НомерСтраницы > 10) И (НомерСтраницы < 20) Тогда
		Слово	= " листах";
	Иначе
		ПоследняяЦифра	= НомерСтраницы % 10;
		Если ПоследняяЦифра = 1 Тогда
		    Слово	= " листе";
		Иначе
		    Слово	= " листах";
		КонецЕсли;
	КонецЕсли;
	
	СтрокаКоличествоЛистов	= Строка(НомерСтраницы) + Слово;
	
	ПечТабл.ВывестиСекцию("Подвал");

	// показать сформированную таблицу
	             
	Если СразуНаПринтер = 0 Тогда
		ПечТабл.Опции(0, 0, 0, 0, ПарСтрДок, ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ПечТабл.Защита(1);
		Иначе
			ПечТабл.Защита(0);
		КонецЕсли;
		ПечТабл.ТолькоПросмотр(1);

		ПечТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ПечТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ПечТабл.КоличествоЭкземпляров(КолЭкз);
		ПечТабл.Напечатать(0);
	КонецЕсли;
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    НомерТекущейФормы = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	
	Если НомерТекущейФормы > 0 Тогда
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда
	    ПересчетСуммыВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры    

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()     
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         

	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	НачВалюта		= Валюта;
	НачКурс			= Курс;
	НачДоговор		= Договор;
	НачКонтрагент	= Контрагент;
	НачФирма		= Фирма;

	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	
	УстановкаВидимостиСуммВПодвале();

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();

	ОбновитьНадписи();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);               
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
ВидСчетаФактуры		= "СчетФактураВыданный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-12";
ТаблицаПечФорм.Кнопка       = "ТОРГ-12";