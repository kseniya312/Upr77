////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент, СтарыйКонтрагентПоставщика, СтараяФирмаПокупателя, СтарыйДоговорПоставщика;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

Перем ТекущийДолг;         
Перем ТаблицаДокумента;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции //ТекстВалюты()    

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//
Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
		
		Форма.БезСкидки.Видимость(Скидка.Выбран());
		Форма.СуммаСкидки.Видимость(Скидка.Выбран());
	КонецЕсли;
	
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа.
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры // ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
 	              
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	
	Название 	= Заголовок;
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                      
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);   
		
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
			Если КонтрагентПоставщика.Выбран() <> 0 тогда
				Если Фирма.ЮрЛицо <> КонтрагентПоставщика.ЮрФизЛицо Тогда
				    Предупреждение("Фирма и контрагент должны иметь одно и то же юр. лицо!"); 
					Фирма = СтараяФирма;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииФирмыПокупателя()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "ФирмаПокупателя"
//
Процедура ПриИзмененииФирмыПокупателя()      
	
	Если СтараяФирмаПокупателя <> ФирмаПокупателя Тогда
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
			Если Контрагент.Выбран() <> 0 тогда
				Если ФирмаПокупателя.ЮрЛицо <> Контрагент.ЮрФизЛицо Тогда
				    Предупреждение("Фирма и контрагент должны иметь одно и то же юр. лицо!");
					ФирмаПокупателя = СтараяФирмаПокупателя;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтараяФирмаПокупателя = ФирмаПокупателя; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмыПокупателя()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
			Если (Договор.Выбран() = 1) и (Договор.Владелец.ЮрФизЛицо.Вид() <> "СвоиЮрЛица") Тогда
			    Предупреждение("Можно выбирать договор только с собственными юр. лицами.");
				Договор = СтарыйДоговор;
			ИначеЕсли (ФирмаПокупателя.Выбран() = 1) тогда
				Если Договор.Владелец.ЮрФизЛицо <> ФирмаПокупателя.ЮрЛицо  Тогда
				    Предупреждение("Юр. лица фирмы-покупателя и контрагента-покупателя должны совпадать!");
					Договор = СтарыйДоговор;
				КонецЕсли;
			КонецЕсли;        
		КонецЕсли;
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале(); 
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//******************************************************************************
// ПриИзмененииДоговораПоставщика()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговораПоставщика()
	
	Если СтарыйДоговорПоставщика <> ДоговорПоставщика Тогда
		
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
			Если (ДоговорПоставщика.Выбран() = 1) и (ДоговорПоставщика.Владелец.ЮрФизЛицо.Вид() <> "СвоиЮрЛица") Тогда
			    Предупреждение("Можно выбирать договор только с собственными юр. лицами."); 
				ДоговорПоставщика = СтарыйДоговорПоставщика;
			ИначеЕсли (Фирма.Выбран() = 1) тогда
				Если ДоговорПоставщика.Владелец.ЮрФизЛицо <> Фирма.ЮрЛицо  Тогда
				    Предупреждение("Юр. лица фирмы-покупателя и контрагента-покупателя должны совпадать!");
					ДоговорПоставщика = СтарыйДоговорПоставщика;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале(); 
		СтарыйДоговорПоставщика = ДоговорПоставщика;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговораПоставщика()


//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
	
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
			Если (Контрагент.ЮрФизЛицо.Вид() <> "СвоиЮрЛица") и (Контрагент.Выбран() <> 0) Тогда
				Предупреждение("В данном документе в качестве контрагента можно вводить только собственные юр. лица!");
				Контрагент = СтарыйКонтрагент;
			ИначеЕсли (ФирмаПокупателя.Выбран() <> 0) и (Контрагент.Выбран() <> 0) тогда
				Если ФирмаПокупателя.ЮрЛицо <> Контрагент.ЮрФизЛицо Тогда
				    Предупреждение("Фирма и контрагент должны иметь одно и то же юр. лицо!");
					Контрагент = СтарыйКонтрагент;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();   
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;     
КонецПроцедуры //ПриИзмененииКонтрагента()      
              

//*****************************************************************************
// ПриИзмененииКонтрагентаПоставщика()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента поставщика.
//
Процедура ПриИзмененииКонтрагентаПоставщика()  
	Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
		Если (КонтрагентПоставщика.ЮрФизЛицо.Вид() <> "СвоиЮрЛица") и (КонтрагентПоставщика.Выбран() <> 0) Тогда
			Предупреждение("В данном документе в качестве контрагента можно вводить только собственные юр. лица!");
			КонтрагентПоставщика = СтарыйКонтрагентПоставщика;
		ИначеЕсли (Фирма.Выбран() <> 0) и (КонтрагентПоставщика.Выбран() <> 0) тогда
			Если Фирма.ЮрЛицо <> КонтрагентПоставщика.ЮрФизЛицо Тогда
			    Предупреждение("Фирма и контрагент должны иметь одно и то же юр. лицо!");
				КонтрагентПоставщика = СтарыйКонтрагентПоставщика;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                                 
	ДоговорПоставщика = КонтрагентПоставщика.ОсновнойДоговор;
	СтарыйКонтрагентПоставщика = КонтрагентПоставщика;
КонецПроцедуры // ПриИзмененииКонтрагентаПоставщика()

                                                 
//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с оптового склада!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииСкладаПокупателя()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСкладаПокупателя()
	    
	Если (СкладПокупателя.Выбран()=1) 
	и    (СкладПокупателя.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только на оптовый склад!",60);
		СкладПокупателя = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСкладаПокупателя()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();
	
	Форма.Обновить();
	
КонецПроцедуры	//ПоКнопкеЦены()     

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма	, "Фирма");
	Параметры.ДобавитьЗначение(Склад	, "Склад");
	Параметры.ДобавитьЗначение(0		, "ЕстьВидТМЦ");
	
	Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
		Параметры.ДобавитьЗначение(1, "НеПодбиратьУслуги");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("ИзСправочника"	, "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен			, "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта	, "Валюта");
	Параметры.ДобавитьЗначение(Курс		, "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата"	, "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок	, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция"		, "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
		
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ПриИзмененииНастроекБыстройПродажи()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Флаги настройки параметров быстрой продажи.
//
// Описание:
//  Установка доступности элементов при изменении настроек быстрой продажи.
//
Процедура ПриИзмененииНастроекБыстройПродажи()
	
	  Форма.БП_ПечатьЗаявка.    Доступность(БП_ЕстьЗаявка);
	  Форма.МЗаявка.            Доступность(БП_ЕстьЗаявка);
	  Форма.БЗаявка.            Доступность(БП_ЕстьЗаявка);
	  
	  Форма.БП_ПечатьРеализация.Доступность(БП_ЕстьРеализация);
	  Форма.МРеализация.        Доступность(БП_ЕстьРеализация);
	  Форма.БРеализация.        Доступность(БП_ЕстьРеализация);
	  
	  Форма.БП_ПечатьПКО.       Доступность(БП_ЕстьПКО);
	  Форма.МПКО.               Доступность(БП_ЕстьПКО);
	  Форма.БПКО.               Доступность(БП_ЕстьПКО);
	  
	  Форма.БП_ПечатьСФ.        Доступность(БП_ЕстьСФ);
	  Форма.МСФ.                Доступность(БП_ЕстьСФ);
	  Форма.БСФ.                Доступность(БП_ЕстьСФ);

	  Форма.БП_ПечатьСФ1.       Доступность(БП_ЕстьСФ1);
	  Форма.МСФ1.               Доступность(БП_ЕстьСФ1);
	  Форма.БСФ1.               Доступность(БП_ЕстьСФ1);
	  
КонецПроцедуры // ПриИзмененииНастроекБыстройПродажи()   
                                                    
//******************************************************************************
// ДействияПриОткрытии()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Содержит код предопределенной процедуры "При открытии".
//
Процедура ДействияПриОткрытии()
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата					= ДатаДок;
	СтараяФирма					= Фирма;
	СтарыйДоговор				= Договор;
	СтарыйКонтрагент			= Контрагент;      
	СтарыйКонтрагентПоставщика	= КонтрагентПоставщика;  
	СтарыйДоговорПоставщика		= ДоговорПоставщика;
	СтараяФирмаПокупателя 		= ФирмаПокупателя;
	СуммаДокументаСтараяРуб 	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб 	= глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента		= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
    
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.    Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.  Доступность(0); 
				
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;

	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	Форма.Закладки.ДобавитьЗначение("Настройка");
	          
	глАктивизироватьРеквизит(Контекст);
		
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	                  
	УстановкаВидимостиСуммВПодвале();
	
	РасчетТекущегоДолга();
	ОбновитьНадписи();      
	
	Если Форма.Параметр = "Перемещение" Тогда   
		ВидОперации 		= "Продажа собственной фирме";
		Форма				.ИспользоватьСлой("Перемещение", 1);
		Форма.БП_ЕстьПКО	.Заголовок("Кассовые ордера");
		Форма.БП_ЕстьСФ		.Заголовок("Счет-фактуру (выд.)");
		БП_ЕстьРеализацияПеремещение   	= 1;     
		БП_ЕстьПоступление 				= 1;                             
		БП_ПечатьПоступление 			= ВосстановитьЗначение("БП_ПечатьПоступлениеПерем");
		БП_ПечатьРеализацияПеремещение 	= ВосстановитьЗначение("БП_ПечатьРеализацияПерем");         
		БП_ЕстьПКО          = ВосстановитьЗначение("БП_ЕстьПКОПерем");
		БП_ПечатьПКО        = ВосстановитьЗначение("БП_ПечатьПКОПерем");
		БП_ЕстьСФ           = ВосстановитьЗначение("БП_ЕстьСФПерем");
		БП_ЕстьСФ1           = ВосстановитьЗначение("БП_ЕстьСФ1Перем");
		БП_ПечатьСФ         = ВосстановитьЗначение("БП_ПечатьСФПерем");
		БП_ПечатьСФ1        = ВосстановитьЗначение("БП_ПечатьСФ1Перем");
	Иначе
	    ВидОперации = "Быстрая продажа";
		// восстановление настроек быстрой продажи
	    Форма.ИспользоватьСлой("Взаиморасчеты", 1);       
		БП_ЕстьРеализация   = 1;
		БП_ПечатьРеализация = ВосстановитьЗначение("БП_ПечатьРеализация");
		БП_ЕстьЗаявка       = ВосстановитьЗначение("БП_ЕстьЗаявка");
		БП_ПечатьЗаявка     = ВосстановитьЗначение("БП_ПечатьЗаявка");
		БП_ЕстьПКО          = ВосстановитьЗначение("БП_ЕстьПКО");
		БП_ПечатьПКО        = ВосстановитьЗначение("БП_ПечатьПКО");
		БП_ЕстьСФ           = ВосстановитьЗначение("БП_ЕстьСФ");
		БП_ПечатьСФ         = ВосстановитьЗначение("БП_ПечатьСФ");
		
	КонецЕсли;
	БПСпособПечати      = Макс(1,Число(ВосстановитьЗначение("БПСпособПечати")));
		                                     
	ПриИзмененииНастроекБыстройПродажи();
КонецПроцедуры // ДействияПриОткрытии()
    
//******************************************************************************
// ДействияВводНового(Скопирован)
//
// Параметры:
//  Скопирован -  флаг скопированности документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит начальное заполнение нового документа.
//
Процедура ДействияВводНового(Скопирован)
	
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда
		Возврат;
	КонецЕсли;
	
	СкладПокупателя	= глЗначениеПоУмолчанию("ОсновнойСклад");
	
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              

	Если (СкладПокупателя.РозничныйСклад = 1) Тогда
	    СкладПокупателя = "";
	КонецЕсли;              
	
КонецПроцедуры // ДействияВводНового()

//******************************************************************************
// СкопироватьРеквизитыШапки(ДокОткуда, ДокКуда)
//
// Параметры:
//  ДокОткуда - документ, из которого производится копирование реквизитов
//  ДокКуда   - документ, в который производится копирование реквизитов
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит копирование реквизитов общих и шапки, имеющих один. идентификатор.
//
Процедура СкопироватьРеквизитыШапки(ДокОткуда, ДокКуда)
	
	// общие реквизиты
	Для Сч = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
		ИдентРекв = Метаданные.ОбщийРеквизитДокумента(Сч).Идентификатор;
		ДокКуда.УстановитьАтрибут(ИдентРекв,ДокОткуда.ПолучитьАтрибут(ИдентРекв));
	КонецЦикла;
	// совпадающие реквизиты шапки
	Для Сч = 1 По Метаданные.Документ(ДокОткуда.Вид()).РеквизитШапки() Цикл
		ИдентРекв = Метаданные.Документ(ДокОткуда.Вид()).РеквизитШапки(Сч).Идентификатор;
		Если Метаданные.Документ(ДокКуда.Вид()).РеквизитШапки(ИдентРекв).Выбран()=1 Тогда
			ДокКуда.УстановитьАтрибут(ИдентРекв,ДокОткуда.ПолучитьАтрибут(ИдентРекв));
		КонецЕсли;
	КонецЦикла;
	
    ДокКуда.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
	
КонецПроцедуры // СкопироватьРеквизитыШапки()          


//******************************************************************************
// ВопросОформитьНовую()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Задает вопрос "Оформить новую операцию?" и, в зависимости от ответа закрывает
//	форму или подготавливает документ к оформлению новой операции.
//                                         
Процедура ВопросОформитьНовую()                       
	Если Вопрос("Оформить следующую операцию?","Да+Нет",60) = "Да" Тогда
		// очистка документа
		УдалитьСтроки();
		// общие реквизиты
		Для Сч = 1 По Метаданные.ОбщийРеквизитДокумента() Цикл
			ИдентРекв = Метаданные.ОбщийРеквизитДокумента(Сч).Идентификатор;
			УстановитьАтрибут(ИдентРекв,"");
		КонецЦикла;
		//  реквизиты шапки
		Для Сч = 1 По Метаданные.Документ(Вид()).РеквизитШапки() Цикл 
			ИдентРекв = Метаданные.Документ(Вид()).РеквизитШапки(Сч).Идентификатор;  
			Если ИдентРекв = "КонтрагентПоставщика" Тогда
			    Продолжить;
			КонецЕсли;
			УстановитьАтрибут(ИдентРекв,"");
		КонецЦикла;
		
		Форма.Закладки.УдалитьВсе();
		// заполним документ заново
		ДействияВводНового(0);
		ДействияПриОткрытии();
		Если (Фирма.Выбран() <> 0) и (КонтрагентПоставщика.Выбран() <> 0) тогда
			Если Фирма.ЮрЛицо <> КонтрагентПоставщика.ЮрФизЛицо Тогда
				КонтрагентПоставщика = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.Закрыть(0);
	КонецЕсли;
КонецПроцедуры	                           



//******************************************************************************
// Перемещение()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Перемещение".
//
// Описание:
//  Проведение перемещения между юр. лицами.
//                                         
Процедура Перемещение()    
	
    // Проверка заполнения реквизитов
	Если КоличествоСтрок() = 0 Тогда
		Предупреждение("Не заполнена табличная часть.
		                |Операция не выполнена!",60);
		Возврат;
	КонецЕсли;      

	Если (БП_ЕстьПКО = 1)  
	   и (ПустоеЗначение(глЗначениеПоУмолчанию("ОсновнаяКасса")) = 1) Тогда
		Предупреждение("У текущего пользователя не выбрана касса по умолчанию. 
		                |Операция не выполнена!",60);
		Возврат;
	КонецЕсли;
	
	СохранитьЗначение("БП_ПечатьРеализацияПерем", 	БП_ПечатьРеализацияПеремещение);
	СохранитьЗначение("БП_ПечатьПоступлениеПерем",	БП_ПечатьПоступление);
	СохранитьЗначение("БП_ЕстьПКОПерем",         	БП_ЕстьПКО     );
	СохранитьЗначение("БП_ПечатьПКОПерем",       	БП_ПечатьПКО   );
	СохранитьЗначение("БП_ЕстьСФПерем",          	БП_ЕстьСФ      );
	СохранитьЗначение("БП_ЕстьСФ1Перем",          	БП_ЕстьСФ1     );
	СохранитьЗначение("БП_ПечатьСФПерем",        	БП_ПечатьСФ    );           
	СохранитьЗначение("БП_ПечатьСФ1",       	 	БП_ПечатьСФ1   );           
	
	СтрокаКомментария = "Оформлен операцией ""Продажа собственной фирме""";
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	Попытка
		НачатьТранзакцию();
		ДокРеализация = СоздатьОбъект("Документ.Реализация");
		ДокРеализация.Новый();                               
		ДокРеализация.ДатаДок = ДатаДок;
		ДокРеализация.АвтоВремяТекущее();
		// идентичные реквизиты шапки
		СкопироватьРеквизитыШапки(Контекст, ДокРеализация);
		// уникальные реквизиты шапки
		ДокРеализация.КодОперации = глКО.Продажа;
		ДокРеализация.ДатаОплаты   = ДатаДок; 
		// табличная часть
		ДокРеализация.ЗагрузитьТабличнуюЧасть(ТаблицаДокумента);
		ДокРеализация.Комментарий = СтрокаКомментария;
		                         
		ДокРеализация.Записать();
		
		ДокРеализация.Провести(1);
		Если ДокРеализация.Проведен() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;        
			
		
		
		ДокПоступление = СоздатьОбъект("Документ.ПоступлениеТМЦ");  
		ДокПоступление.Новый();                                   
		ДокПоступление.ДатаДок = ДатаДок;
		ДокПоступление.АвтоВремяТекущее();  
		// идентичные реквизиты шапки
		СкопироватьРеквизитыШапки(Контекст, ДокПоступление);
		// отличающиеся реквизиты шапки
		ДокПоступление.Фирма = ФирмаПокупателя;    
		ДокПоступление.УстановитьНовыйНомер(ФирмаПокупателя.ЮрЛицо.ПрефиксНомеровДокументов);
		ДокПоступление.Контрагент = КонтрагентПоставщика;
		ДокПоступление.Договор = ДоговорПоставщика;
		ДокПоступление.Склад = СкладПокупателя;
		// уникальные реквизиты шапки
		ДокПоступление.КодОперации = глКО.Закупка;
		ДокПоступление.ДатаОплаты   = ДатаДок; 
		// табличная часть
		РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");
		ТабПартий = СоздатьОбъект("ТаблицаЗначений");
		ДокПоступление.ВыгрузитьТабличнуюЧасть(ТабПартий);   
		ТабПартий.НоваяКолонка("ГТД", "Справочник.ГТД");
		ТабПартий.НоваяКолонка("СтранаПроисхождения", "Справочник.ОКСМ");
		ТабПартий.НоваяКолонка("Свойство", "Справочник.ЗначенияСвойств");
		ДокРеализация.ВыбратьСтроки();
		ТабДвижений = СоздатьОбъект("ТаблицаЗначений");
		ТабДвижений.НоваяКолонка("НомСтроки", "Число", 19, 3);
		ТабДвижений.НоваяКолонка("Количество", "Число", 19, 3);
		ТабДвижений.НоваяКолонка("ГТД", "Справочник.ГТД");
		ТабДвижений.НоваяКолонка("СтранаПроисхождения", "Справочник.ОКСМ");
		ТабДвижений.НоваяКолонка("Свойство", "Справочник.ЗначенияСвойств");
		РегПартии.ВыбратьДвиженияДокумента(ДокРеализация.ТекущийДокумент());
		Пока РегПартии.ПолучитьДвижение()=1 Цикл   
			ТабДвижений.НоваяСтрока();  
			ТабДвижений.НомСтроки = РегПартии.НомерСтроки();
			ТабДвижений.Количество = РегПартии.Количество;
			ТабДвижений.ГТД = РегПартии.Партия.ГТД;
			ТабДвижений.СтранаПроисхождения = РегПартии.Партия.СтранаПроисхождения;
			ТабДвижений.Свойство = РегПартии.Партия.Свойство;
		КонецЦикла;
		ТабДвижений.Свернуть("НомСтроки, ГТД, СтранаПроисхождения, Свойство", "Количество");  
		Пока ДокРеализация.ПолучитьСтроку() = 1 Цикл                           
			// Посчитаем количество строк по данной строке документа в таблице движений
			КолСтрок = 0;                                                              
			ТабДвижений.ВыбратьСтроки();
			Пока ТабДвижений.ПолучитьСтроку() = 1 Цикл
				Если ТабДвижений.НомСтроки = ДокРеализация.НомерСтроки Тогда
					КолСтрок = КолСтрок + 1;
				КонецЕсли;
			КонецЦикла;
			
			// Если в таблице движений больше одной строки, то придется разбивать
			// по ГТД и стране происхождения
			Если КолСтрок > 1 Тогда       
				ОстСумма = ДокРеализация.Сумма;
				ОстНДС 	 = ДокРеализация.СуммаНДС;
				ОстНП 	 = ДокРеализация.СуммаНП;
				Для к = 1 по ТабДвижений.КоличествоСтрок() Цикл   
					ТабДвижений.ПолучитьСтрокуПоНомеру(к);
					Если ТабДвижений.НомСтроки <> ДокРеализация.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					ТабПартий.НоваяСтрока();
					ТабПартий.Номенклатура = ДокРеализация.Номенклатура;
					ТабПартий.Количество = ТабДвижений.Количество;                 
					ТабПартий.Единица = ДокРеализация.Единица;
					ТабПартий.Коэффициент = ДокРеализация.Коэффициент;
					ТабПартий.Цена = ДокРеализация.Цена;
					ТабПартий.Сумма = ?(к = ТабДвижений.КоличествоСтрок(), ОстСумма, 
					ДокРеализация.Сумма * ТабДвижений.Количество/(ДокРеализация.Количество*ДокРеализация.Коэффициент));
					ТабПартий.СуммаНДС = ?(к = ТабДвижений.КоличествоСтрок(), ОстНДС, 
					ДокРеализация.СуммаНДС * ТабДвижений.Количество/(ДокРеализация.Количество*ДокРеализация.Коэффициент));
					ТабПартий.СуммаНП = ?(к = ТабДвижений.КоличествоСтрок(), ОстНП, 
					ДокРеализация.СуммаНП * ТабДвижений.Количество/(ДокРеализация.Количество*ДокРеализация.Коэффициент));
					ТабПартий.СтавкаНДС = ДокРеализация.СтавкаНДС;
					ТабПартий.СтавкаНП = ДокРеализация.СтавкаНП;  
					ТабПартий.ГТД = ТабДвижений.ГТД;
					ТабПартий.СтранаПроисхождения = ТабДвижений.СтранаПроисхождения;
					ТабПартий.Свойство = ТабДвижений.Свойство;
					ОстСумма = ОстСумма - ТабПартий.Сумма;
					ОстНДС 	 = ОстНДС - ТабПартий.СуммаНДС;
					ОстНП 	 = ОстНП - ТабПартий.СуммаНП;
				КонецЦикла;
			Иначе                           
				// Если в таблице движений только одна сторока или меньше можно
				// копировать строку документа реализации без изменений
				ТабПартий.НоваяСтрока();
				ТабПартий.Номенклатура = ДокРеализация.Номенклатура;
				ТабПартий.Количество = ДокРеализация.Количество;                 
				ТабПартий.Единица = ДокРеализация.Единица;
				ТабПартий.Коэффициент = ДокРеализация.Коэффициент;
				ТабПартий.Цена = ДокРеализация.Цена;
				ТабПартий.СтавкаНДС = ДокРеализация.СтавкаНДС;
				ТабПартий.СтавкаНП = ДокРеализация.СтавкаНП;  
				ТабПартий.Сумма = ДокРеализация.Сумма;
				ТабПартий.СуммаНДС = ДокРеализация.СуммаНДС;
				ТабПартий.СуммаНП  = ДокРеализация.СуммаНП;             
				
				// Если строка в таблице движений есть, надо запомнимть ГТД и 
				// страну происхождения для формирования партии
				ТабДвижений.ВыбратьСтроки();
				Пока ТабДвижений.ПолучитьСтроку() = 1 Цикл
					Если ТабДвижений.НомСтроки <> ДокРеализация.НомерСтроки Тогда
						Продолжить;
					КонецЕсли;
					ТабПартий.ГТД = ТабДвижений.ГТД;
					ТабПартий.СтранаПроисхождения = ТабДвижений.СтранаПроисхождения;
					ТабПартий.Свойство = ТабДвижений.Свойство;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;   
		
		ТабПартий.Свернуть("Номенклатура, Количество, Цена, Единица, Коэффициент, СтавкаНДС, СтавкаНП, ГТД, СтранаПроисхождения, Свойство",
							"Сумма, СуммаНДС, СуммаНП, Партия");
	    СпрПартий = СоздатьОбъект("Справочник.Партии");
		ТабПартий.ВыбратьСтроки();
		Пока ТабПартий.ПолучитьСтроку() = 1 Цикл
			Попытка  
				СпрПартий.ИспользоватьВладельца(ТабПартий.Номенклатура);
				СпрПартий.Новый();
				СпрПартий.ГТД = ТабПартий.ГТД;
				СпрПартий.СтранаПроисхождения = ТабПартий.СтранаПроисхождения;
				СпрПартий.Свойство= ТабПартий.Свойство;
				СпрПартий.Записать();
				ТабПартий.Партия = СпрПартий.ТекущийЭлемент();
			Исключение
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
		ДокПоступление.ЗагрузитьТабличнуюЧасть(ТабПартий);   
		ДокПоступление.Записать();
		
		ДокПоступление.ВыбратьСтроки();  
		ДокПоступление.НомерДокВходящий = ДокРеализация.НомерДок;
		ДокПоступление.ДатаДокВходящий  = ДокРеализация.ДатаДок;
		Пока ДокПоступление.ПолучитьСтроку() = 1 Цикл
		    ДокПоступление.ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
		КонецЦикла;
		               
		ДокПоступление.Комментарий = СтрокаКомментария;
		ДокПоступление.Записать();
		
		ДокПоступление.Провести(1);
		Если ДокПоступление.Проведен() = 0 Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;                

		Если БП_ЕстьПКО = 1 Тогда
			ДокПКО = СоздатьОбъект("Документ.ПКО");
			ДокПКО.Новый();              
			ДокПКО.ДатаДок = ДатаДок;
			ДокПКО.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокПКО);
			// уникальные реквизиты шапки
			ДокПКО.ДокОснование    = ДокРеализация.ТекущийДокумент();
			ДокПКО.Касса           = глЗначениеПоУмолчанию("ОсновнаяКасса");
			ДокПКО.КодОперации     = глКО.ОплатаОтПокупателя;
			ДокПКО.ОблагаетсяНП    = УчитыватьНП;
			
			ДокПКО.Сумма	    = Итог("Сумма");
		    Если СуммаВклНП = 0 Тогда
				ДокПКО.Сумма = ДокПКО.Сумма + Итог("СуммаНП");
			КонецЕсли;
			Если СуммаВклНДС = 0 Тогда
				ДокПКО.Сумма = ДокПКО.Сумма + Итог("СуммаНДС");
			КонецЕсли;
			ДокПКО.ПринятоОт = Контрагент.ЮрФизЛицо.ПолнНаименование; 
			глПриВыбореБухСчета(ДокПКО,0);

			// табличная часть
			// ------ нет ее --------------
			
			ДокПКО.Комментарий = СтрокаКомментария;
			ДокПКО.Записать();
			ДокПКО.Провести(1);
			Если ДокПКО.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
			
			ДокРКО = СоздатьОбъект("Документ.РКО");
			ДокРКО.Новый();          
			ДокРКО.ДатаДок = ДатаДок;
			ДокРКО.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(ДокПоступление.ТекущийДокумент(), ДокРКО);
			// уникальные реквизиты шапки
			ДокРКО.УстановитьНовыйНомер(ФирмаПокупателя.ЮрЛицо.ПрефиксНомеровДокументов);
			ДокРКО.ДокОснование    = ДокПоступление.ТекущийДокумент();
			ДокРКО.Касса           = глЗначениеПоУмолчанию("ОсновнаяКасса");
			ДокРКО.КодОперации     = глКО.ОплатаПоставщику;
			ДокРКО.ОблагаетсяНП    = УчитыватьНП;
			
			ДокРКО.Сумма	       = Итог("Сумма");
		    Если СуммаВклНП = 0 Тогда
				ДокРКО.Сумма = ДокРКО.Сумма + Итог("СуммаНП");
			КонецЕсли;
			Если СуммаВклНДС = 0 Тогда
				ДокРКО.Сумма = ДокРКО.Сумма + Итог("СуммаНДС");
			КонецЕсли;
			ДокРКО.Выдать = КонтрагентПоставщика.ЮрФизЛицо.ПолнНаименование; 
			глПриВыбореБухСчета(ДокРКО,0);

			// табличная часть
			// ------ нет ее --------------
			
			ДокРКО.Комментарий = СтрокаКомментария;
			ДокРКО.Записать();
			ДокРКО.Провести(1);
			Если ДокРКО.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;

		Если БП_ЕстьСФ = 1 Тогда
			ДокСФ = СоздатьОбъект("Документ.СчетФактураВыданный");
			ДокСФ.Новый();           
			ДокСФ.ДатаДок = ДатаДок;
			ДокСФ.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокСФ);
			// уникальные реквизиты шапки
			ДокСФ.АвтоКнигаПродаж = 1; 
			ДокСФ.ДокОснование    = ДокРеализация.ТекущийДокумент();
			// табличная часть
			// ------ нет ее --------------
			
			ДокСФ.Комментарий = СтрокаКомментария;
			ДокСФ.Записать();
			ДокСФ.Провести(1);
			Если ДокСФ.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли; 
		КонецЕсли;
                  
		Если БП_ЕстьСФ1 = 1 тогда
			ДокСФПолученный = СоздатьОбъект("Документ.СчетФактураПолученный");
			ДокСФПолученный.Новый();
			ДокСФПолученный.ДатаДок = ДатаДок;
			ДокСФПолученный.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(ДокПоступление.ТекущийДокумент(), ДокСФПолученный);
			// уникальные реквизиты шапки
			ДокСФПолученный.АвтоКнигаПокупок = 1; 
			ДокСФПолученный.ДокОснование    = ДокПоступление.ТекущийДокумент();
			ДокСФПолученный.УстановитьНовыйНомер(ФирмаПокупателя.ЮрЛицо.ПрефиксНомеровДокументов);
			Если БП_ЕстьСФ = 1 Тогда
				ДокСФПолученный.НомерДокВходящий = ДокСФ.НомерДок;
				ДокСФПолученный.ДатаДокВходящий = ДокСФ.ДатаДок;
			КонецЕсли;
			// табличная часть
			// ------ нет ее --------------
			
			ДокСФПолученный.Комментарий = СтрокаКомментария;
			ДокСФПолученный.Записать();
			ДокСФПолученный.Провести(1);
			Если ДокСФПолученный.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;

		КонецЕсли;

		ЗафиксироватьТранзакцию();  
	Исключение
		
		// при возникновении ошибки отменяем все изменения
		// здесь можно выдать сообщение об ошибке
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки(),"!");
		Возврат;
		
	КонецПопытки;	

	// далее - напечатаем созданные документы
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	Если БПСпособПечати = 1 Тогда
		СписокПараметров.Установить("Команда","ПечатьНаЭкран");
	Иначе
		СписокПараметров.Установить("Команда","ПечатьНаПринтер");	
	КонецЕсли;
	
	Если (БП_ЕстьРеализацияПеремещение = 1) 
	и    (БП_ПечатьРеализацияПеремещение > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьРеализацияПеремещение);	
		ОткрытьФорму(ДокРеализация.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;

	Если (БП_ЕстьПоступление = 1) 
	и    (БП_ПечатьПоступление > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьПоступление);	
		ОткрытьФорму(ДокПоступление.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;                          
	Если (БП_ЕстьСФ = 1) 
	и    (БП_ПечатьСФ > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьСФ);	
		ОткрытьФорму(ДокСФ.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
	Если (БП_ЕстьСФ1 = 1) 
	и    (БП_ПечатьСФ1 > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьСФ1);	
		ОткрытьФорму(ДокСФПолученный.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
	
	Если (БП_ЕстьПКО = 1) 
	и    (БП_ПечатьПКО > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьПКО);	
		ОткрытьФорму(ДокПКО.ТекущийДокумент(),СписокПараметров);
		ОткрытьФорму(ДокРКО.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
	ВопросОформитьНовую();      
	
КонецПроцедуры // Перемещение()
                                                              
//******************************************************************************
// БыстраяПродажа()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Быстрая продажа".
//
// Описание:
//  Проведение быстрой продажи.
//
Процедура БыстраяПродажа()      
	
	Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
		// проверим, чтобы в документе не было услуг
		ВыбратьСтроки();
		
		Пока ПолучитьСтроку() = 1 Цикл
		    Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		        Предупреждение("В составе обнаружены услуги.
				               |Продавать услуги собственной фирме нельзя!");
				Возврат;
		    КонецЕсли;
		КонецЦикла;

		Перемещение();  
		Возврат;
	КонецЕсли;
	
	Если КоличествоСтрок() = 0 Тогда
		Предупреждение("Документ пуст! Проведение быстрой продажи не выполнено!",60);
		Возврат;
	КонецЕсли;          
	
	Если (БП_ЕстьПКО = 1)  
	   и (ПустоеЗначение(глЗначениеПоУмолчанию("ОсновнаяКасса")) = 1) Тогда
		Предупреждение("У текущего пользователя не выбрана касса по умолчанию. 
		                |Проведение быстрой продажи не выполнено!",60);
		Возврат;
	КонецЕсли;
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
		Возврат;
	КонецЕсли;            
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		Возврат;
	КонецЕсли;                                                              
	
	СохранитьЗначение("БП_ПечатьРеализация",БП_ПечатьРеализация);
	СохранитьЗначение("БП_ЕстьЗаявка",      БП_ЕстьЗаявка  );
	СохранитьЗначение("БП_ПечатьЗаявка",    БП_ПечатьЗаявка);
	СохранитьЗначение("БП_ЕстьПКО",         БП_ЕстьПКО     );
	СохранитьЗначение("БП_ПечатьПКО",       БП_ПечатьПКО   );
	СохранитьЗначение("БП_ЕстьСФ",          БП_ЕстьСФ      );
	СохранитьЗначение("БП_ПечатьСФ",        БП_ПечатьСФ    );
	СохранитьЗначение("БПСпособПечати",     БПСпособПечати );
        
	СтрокаКомментария = "Оформлен операцией ""Быстрая продажа""";

	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	Попытка
		
		НачатьТранзакцию();
		
		Если БП_ЕстьЗаявка = 1 Тогда
			ДокЗаявка = СоздатьОбъект("Документ.ЗаявкаПокупателя");
			ДокЗаявка.Новый();    
			ДокЗаявка.ДатаДок = ДатаДок;
			ДокЗаявка.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокЗаявка);
			// уникальные реквизиты шапки
			ДокЗаявка.ВидОперации    = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
			ДокЗаявка.ДатаОтгрузки   = ДатаДок;
			ДокЗаявка.ДатаОплаты     = ДатаДок;
			ДокЗаявка.БанковскийСчет = Фирма.ОсновнойСчет;

			// табличная часть
			ДокЗаявка.ЗагрузитьТабличнуюЧасть(ТаблицаДокумента);
			
			ДокЗаявка.Комментарий = СтрокаКомментария;
			ДокЗаявка.Записать();
			ДокЗаявка.Провести(1);
			Если ДокЗаявка.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Если БП_ЕстьРеализация = 1 Тогда
			ДокРеализация = СоздатьОбъект("Документ.Реализация");
			ДокРеализация.Новый();      
			ДокРеализация.ДатаДок = ДатаДок;
			ДокРеализация.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокРеализация);
			// уникальные реквизиты шапки
			ДокРеализация.КодОперации = глКО.Продажа;
			ДокРеализация.ДатаОплаты   = ДатаДок; 
			Если БП_ЕстьЗаявка = 1 Тогда
				ДокРеализация.ДокОснование = ДокЗаявка.ТекущийДокумент();
			КонецЕсли;
			// табличная часть
			ДокРеализация.ЗагрузитьТабличнуюЧасть(ТаблицаДокумента);
			                         
			ДокРеализация.Комментарий = СтрокаКомментария;
			ДокРеализация.Записать();
			Если БП_ЕстьПКО = 1 Тогда
				// для того, чтобы не ругалась на превышение кредита, отключим контроль 
				// на время проведения документа
				СпрДоговор = СоздатьОбъект("Справочник.Договоры");
				СпрДоговор.НайтиЭлемент(Договор);     
				СтарыйНеКонтролироватьКредит = СпрДоговор.НеКонтролироватьКредит;
				СпрДоговор.НеКонтролироватьКредит = 1;
				СпрДоговор.Записать();
			КонецЕсли;
			
			ДокРеализация.Провести(1);
			                         
			Если БП_ЕстьПКО = 1 Тогда
				СпрДоговор.НеКонтролироватьКредит = СтарыйНеКонтролироватьКредит;
				СпрДоговор.Записать();
			КонецЕсли;
			
			Если ДокРеализация.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;                    
		КонецЕсли;


		Если БП_ЕстьПКО = 1 Тогда
			ДокПКО = СоздатьОбъект("Документ.ПКО");
			ДокПКО.Новый();         
			ДокПКО.ДатаДок = ДатаДок;
			ДокПКО.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокПКО);
			// уникальные реквизиты шапки
			ДокПКО.ДокОснование = ДокРеализация.ТекущийДокумент();
			ДокПКО.Касса        = глЗначениеПоУмолчанию("ОсновнаяКасса");
			ДокПКО.КодОперации  = глКО.ОплатаОтПокупателя;
			ДокПКО.ОблагаетсяНП = УчитыватьНП;
			
			ДокПКО.Сумма	    = Итог("Сумма");
		    Если СуммаВклНП = 0 Тогда
				ДокПКО.Сумма = ДокПКО.Сумма + Итог("СуммаНП");
			КонецЕсли;
			Если СуммаВклНДС = 0 Тогда
				ДокПКО.Сумма = ДокПКО.Сумма + Итог("СуммаНДС");
			КонецЕсли;
			ДокПКО.ПринятоОт = Контрагент.ЮрФизЛицо.ПолнНаименование; 
			глПриВыбореБухСчета(ДокПКО,0);

			// табличная часть
			// ------ нет ее --------------
			
			ДокПКО.Комментарий = СтрокаКомментария;
			ДокПКО.Записать();
			ДокПКО.Провести(1);
			Если ДокПКО.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если БП_ЕстьСФ = 1 Тогда
			ДокСФ = СоздатьОбъект("Документ.СчетФактураВыданный");
			ДокСФ.Новый();                  
			ДокСФ.ДатаДок = ДатаДок;
			ДокСФ.АвтоВремяТекущее();
			// идентичные реквизиты шапки
			СкопироватьРеквизитыШапки(Контекст, ДокСФ);
			// уникальные реквизиты шапки
			ДокСФ.АвтоКнигаПродаж = 1; 
			ДокСФ.ДокОснование    = ДокРеализация.ТекущийДокумент();
			// табличная часть
			// ------ нет ее --------------
			
			ДокСФ.Комментарий = СтрокаКомментария;
			ДокСФ.Записать();
			ДокСФ.Провести(1);
			Если ДокСФ.Проведен() = 0 Тогда
				ОтменитьТранзакцию();
				Возврат;
			КонецЕсли;
		КонецЕсли;

		// фиксируем все изменения
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		// при возникновении ошибки отменяем все изменения
		// здесь можно выдать сообщение об ошибке
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки(),"!");
		Возврат;
		
	КонецПопытки;
	                  
	// далее - напечатаем созданные документы
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	Если БПСпособПечати = 1 Тогда
		СписокПараметров.Установить("Команда","ПечатьНаЭкран");
	Иначе
		СписокПараметров.Установить("Команда","ПечатьНаПринтер");	
	КонецЕсли;
	
	Если (БП_ЕстьЗаявка = 1) 
	и    (БП_ПечатьЗаявка > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьЗаявка);	
		ОткрытьФорму(ДокЗаявка.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;

	Если (БП_ЕстьРеализация = 1) 
	и    (БП_ПечатьРеализация > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьРеализация);	
		ОткрытьФорму(ДокРеализация.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
				
	Если (БП_ЕстьСФ = 1) 
	и    (БП_ПечатьСФ > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьСФ);	
		ОткрытьФорму(ДокСФ.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
	
	Если (БП_ЕстьПКО = 1) 
	и    (БП_ПечатьПКО > 0)
	Тогда
		СписокПараметров.Установить("КолЭкз",БП_ПечатьПКО);	
		ОткрытьФорму(ДокПКО.ТекущийДокумент(),СписокПараметров);
	КонецЕсли;
	ВопросОформитьНовую();
КонецПроцедуры // БыстраяПродажа()
     
//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	ДействияВводНового(Скопирован);
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	
	ДействияПриОткрытии();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//                               
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
		           
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда
		    Форма.ИспользоватьСлой("Перемещение", 1);       
		Иначе
		    Форма.ИспользоватьСлой("Взаиморасчеты", 1);       
		КонецЕсли;
		
	ИначеЕсли НомерЗакладки=2 Тогда
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
		
	Иначе
		Форма.ИспользоватьСлой("Шапка,Настройка,Подвал");
		Если СокрЛП(ВидОперации) = "Продажа собственной фирме" Тогда    
			Форма.ИспользоватьСлой("НастройкаПеремещение", 1);
		Иначе
			Форма.ИспользоватьСлой("НастройкаПродажа", 1);
		КонецЕсли;
	КонецЕсли;
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	                  
	Предупреждение("Документ не требуется сохранять!",60);
	СтатусВозврата(0);
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()     

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	//есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	
КонецПроцедуры // ОбработкаПодбора()
