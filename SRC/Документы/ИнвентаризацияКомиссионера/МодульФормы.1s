////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"            

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйКонтрагент, СтарыйДоговор;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ЗаполнениеПоКомиссионеру() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УстановкаВидимостиСлоев(НомерЗакладки)
//
// Параметры:
//  НомерЗакладки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Нет
//
// Описание:
//  Устанавливает видимость слоев формы в зависимости от текущей закладки.
//
Процедура УстановкаВидимостиСлоев(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе                                                                
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // УстановкаВидимостиСлоев()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаПоУчету	.Заголовок("По учету ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаПоФакту	.Заголовок("По факту ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()    

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;

	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
		
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                 
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;

	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()
                                          
//*****************************************************************************
// ПриИзмененииДоговора()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе договора
//
Процедура ПриИзмененииДоговора() 
	
	Если СтарыйДоговор <> Договор Тогда
		
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор		= Договор;
		СтарыйКонтрагент	= Контрагент;
		
		Если ПустоеЗначение(Контрагент) = 0 Тогда
			ТекстВопроса = "Заполнить документ по остаткам ТМЦ на реализации у комиссионера?";
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоКомиссионеру();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииДоговора()   

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда 
		
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор;
		
		Если ПустоеЗначение(Контрагент) = 0 Тогда
			ТекстВопроса = "Заполнить документ по остаткам ТМЦ на реализации у комиссионера?";
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да"  Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоКомиссионеру();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   
    
//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());	
	
КонецПроцедуры // ПриИзмененииНоменклатуры() 

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;   
	
	Если КоличествоСтрок() > 0 Тогда
		Предупреждение("Изменить валюту заполненной инвентаризации нельзя!",60);
		Возврат;
	КонецЕсли;
	           
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	
	ОбновитьНадписи();
	
КонецПроцедуры	//ПоКнопкеЦены()    

//******************************************************************************
// ЗаполнениеПоКомиссионеру()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Нет.
//
// Описание:
//  Производит заполнение инвентаризации по комиссионеру.
//
Функция ЗаполнениеПоКомиссионеру()
	
	Перем ВремРегистры, ВремПартии;  
	Перем НереализованныеТовары;
	                
	Если (Контрагент.Выбран() = 0) или (Договор.Выбран()=0) Тогда
		Возврат "Не указан контрагент или договор, заполнение невозможно!";
	КонецЕсли;
	
	ТекДок 			= ТекущийДокумент();
	ВремРегистры 	= СоздатьОбъект("Регистры");
	
	ВремПартии 		= ВремРегистры.ПартииОтданные;
	
	ВремПартии.	УстановитьЗначениеФильтра("Фирма",		Фирма,		1);
	ВремПартии.	УстановитьЗначениеФильтра("Договор",	Договор,	1);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			ВремПартии.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			ВремПартии.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	ВремПартии.ВыгрузитьИтоги(НереализованныеТовары, 1, 1);
	
	// свернем таблицу по цене
	НереализованныеТовары.НоваяКолонка("Цена", "Число");
	НереализованныеТовары.ВыбратьСтроки();
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		Если НереализованныеТовары.Количество > 0 Тогда
			НереализованныеТовары.Цена = НереализованныеТовары.Продстоимость / НереализованныеТовары.Количество;
		КонецЕсли;
	КонецЦикла;
	НереализованныеТовары.Свернуть("Номенклатура,Цена", "Количество,Продстоимость");

	НереализованныеТовары.ВыбратьСтроки();
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		
		Если НереализованныеТовары.Количество <= 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		НоваяСтрока();
		
		Номенклатура	= НереализованныеТовары.Номенклатура;
		Единица			= Номенклатура.ОсновнаяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		Количество		= НереализованныеТовары.Количество / ?(Коэффициент = 0, 1, Коэффициент);
		КоличествоУчет 	= Количество;
		Сумма		    = глПересчет(НереализованныеТовары.ПродСтоимость, 
		                             Договор.ВалютаВзаиморасчетов, ДатаДок,
									 Валюта,                       Курс);
		СуммаУчет       = Сумма;							 
	    Если Количество <> 0 Тогда
			Цена = Сумма / Количество;
		Иначе
			Цена = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ""
	
КонецФункции // ЗаполнениеПоКомиссионеру()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и вызов процедуры заполнения документа
//
Процедура ПоКнопкеЗаполнить()
	
	Сообщение = "Заполнить документ по остаткам ТМЦ на реализации у комиссионера?";

	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос(Сообщение + РазделительСтрок + " (перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки();
	
	Результат = ЗаполнениеПоКомиссионеру();
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	                      
КонецПроцедуры //ПоКнопкеЗаполнить()
           
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ИсхТабл;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	
	НачПовт = 0;
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Комитент
	Комитент	= СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Комитент");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комитент");
	
	// Секция Комиссионер
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Комиссионер	= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
	Иначе
		Комиссионер	= "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Комиссионер");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комиссионер");
	
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	НомСтр = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтр = НомСтр + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;

	ИсхТабл.ВывестиСекцию("Итого");
	ИсхТабл.ВывестиСекцию("СуммаПрописью");
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 

КонецПроцедуры // Печать

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
    
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//     
//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	
КонецПроцедуры //ВводНового()    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии() 
	                       
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата       		= ДатаДок;
	СтараяФирма   		  	= Фирма;  
	СтарыйКонтрагент 		= Контрагент;
	СтарыйДоговор			= Договор;
		
	НачальнаяДатаДокумента 	= ДатаДок;                     
	                         
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнЦены.Доступность(0);
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
	КонецЕсли;
	УстановкаВидимостиСлоев(Форма.Закладки.ТекущаяСтрока());
	
	ОбновитьНадписи();         
	
КонецПроцедуры  //ПриОткрытии()                                                                 

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "Цена"    ) 
	или  (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                    
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	                    
	УстановкаВидимостиСлоев(Форма.Закладки.ТекущаяСтрока());
	Если НомерЗакладки=2 Тогда
		ОбновитьНадписи();
	КонецЕсли;       
	
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);             
КонецПроцедуры //ПриЗаписи()   

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ    
//
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название",		"Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл",			"Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка",		"Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания",	"Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";