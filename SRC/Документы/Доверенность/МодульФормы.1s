////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"            

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяФирма, СтарыйКонтрагент, СтарыйДоговор;

Перем ВопросПередЗаполнением;
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстЛица		.Заголовок(ДоверенноеЛицо.Наименование);
	                   
КонецПроцедуры //ОбновитьНадписи()    

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
                
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                 
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()     

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
// 	Процедура вызывается при выборе договора
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
	    СтарыйДоговор	= Договор;
		
		Если ПустоеЗначение(Контрагент) = 1 Тогда
		    Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
			
			Если ПустоеЗначение(НаПолучениеОт) = 1 Тогда
				Если ПустоеЗначение(Контрагент.ЮрФизЛицо) = 0 Тогда
				    НаПолучениеОт	= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент	= Контрагент;
		Договор				= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;
		
		ОбновитьНадписи();
		
		Если ПустоеЗначение(НаПолучениеОт) = 1 Тогда
			Если ПустоеЗначение(Контрагент.ЮрФизЛицо) = 0 Тогда
		    	НаПолучениеОт	= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()   

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;  
	
	Если ДокОснование.Вид() <> "ЗаказПоставщику" Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
		
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	ТаблицаДокумента.Свернуть("Номенклатура, Единица", "Количество");
	
	// очищаем наш документ
	УдалитьСтроки();
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		
		НоваяСтрока();    
		НаименованиеТМЦ	= СокрЛП(ТаблицаДокумента.Номенклатура.ПолнНаименование);
		Количество 		= ТаблицаДокумента.Количество; 
		ОКЕИ 			= ТаблицаДокумента.Единица.ОКЕИ;
	КонецЦикла; // по строкам основания
	
	Если КоличествоСтрок()=0 Тогда
		Предупреждение("Документ - основание пуст!",60);
	КонецЕсли;
	
	ДатаДействия = ДатаДок + 10;
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе - основании не заполнена табличная часть";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()
                                              
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
	    ПриИзмененииКонтрагента();
		
		Если ПустоеЗначение(ПоДокументу) = 1 Тогда
		     ПоДокументу = глПредставлениеДокумента(Основание);
		КонецЕсли;
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
		
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()
                   
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос(ВопросПередЗаполнением, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
		
КонецПроцедуры //ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	//Параметры.ДобавитьЗначение(Склад,         "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет",           "ЦенаВподборе");
	//Параметры.ДобавитьЗначение(ТипЦен,        "ТипЦен");
	//Параметры.ДобавитьЗначение(Валюта,        "Валюта");
	//Параметры.ДобавитьЗначение(Курс,          "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                     
//******************************************************************************
// ЧислоПрописью()
//
// Параметры:
//  ЗначЧисло - число, которое нужно представить прописью
//
// Возвращаемое значение:
//  строка, число представленное прописью.
//
// Описание:
//  Преобразует число в его представление пропись. В отличии от стандартной
//  функции формат умеет преобразовывать дробные числа с точностью до 3-х
//  знаков после запятой.
Функция ЧислоПрописью(ЗначЧисло) Экспорт
	
	Перем Возвр;
	Перем ЦелЧасть, ДробЧасть;
	Перем Дробная;
	Перем Окончание;
	Перем ПоследнееСлово;

	ЦелЧасть	= Цел(ЗначЧисло);
	ДробЧасть	= Окр(ЗначЧисло - ЦелЧасть, 3);
	                          
	Если ДробЧасть=Окр(ДробЧасть,0) Тогда
		ДробЧасть	= 0;
		Дробная		= "";
		
	ИначеЕсли ДробЧасть = Окр(ДробЧасть, 1) Тогда
		ДробЧасть	= Окр(ДробЧасть, 1) * 10;
		Дробная		= "десят";
		
	ИначеЕсли ДробЧасть = Окр(ДробЧасть, 2) Тогда
		ДробЧасть	= Окр(ДробЧасть, 2) * 100;
		Дробная		= "сот";
	Иначе
		ДробЧасть	= ДробЧасть * 1000;
		Дробная		= "тысячн";
	КонецЕсли;

	Возвр = "";

	Возвр = Возвр + ?(ПустоеЗначение(ЦелЧасть) = 1, "Ноль", СокрЛП(Формат(ЦелЧасть, "ЧП")));

	Если Дробная <> "" Тогда	// есть дробная часть

		// теперь займемся окончанием последнего слова целой части
		ПоследнееСлово = "";
		Окончание = "";

		Пока (Возвр <> "") И (Возвр = СокрП(Возвр)) Цикл	// последний символ в строке не пробел
			ПоследнееСлово	= Прав(Возвр, 1) + ПоследнееСлово;	// добавляем последнюю букву
			Возвр			= Лев(Возвр, СтрДлина(Возвр) - 1);    // отрезаем последнюю букву
		КонецЦикла;
		
		Если Врег(ПоследнееСлово) = "ОДИН" Тогда
			// первую букву слова оставляем
			ПоследнееСлово	= Лев(ПоследнееСлово, 1) + "дна";
			Окончание		= "ая";
		Иначе
			Если (Врег(ПоследнееСлово) = "ДВА") Тогда
				ПоследнееСлово = Лев(ПоследнееСлово, 1) + "ве";
			КонецЕсли;
			Окончание = "ых";
		КонецЕсли;

		Возвр = Возвр + ПоследнееСлово + " цел" + Окончание + " " + НРег(СокрЛП(Формат(ДробЧасть, "ЧП")));

		// теперь займемся окончанием последнего слова дробной части
		ПоследнееСлово	= "";
		Окончание		= "";
		
		Пока Возвр = СокрП(Возвр) Цикл	// последний символ в строке не пробел
			ПоследнееСлово	= Прав(Возвр, 1) + ПоследнееСлово;	// добавляем последнюю букву
			Возвр			= Лев(Возвр, СтрДлина(Возвр) - 1);    // отрезаем последнюю букву
		КонецЦикла;
		
		Если Врег(ПоследнееСлово) = "ОДИН" Тогда
			// первую букву слова оставляем
			ПоследнееСлово	= Лев(ПоследнееСлово, 1) + "дна";
			Окончание		= "ая";
		Иначе
			Если (Врег(ПоследнееСлово) = "ДВА") Тогда
				ПоследнееСлово = Лев(ПоследнееСлово, 1) + "ве";
			КонецЕсли;
			
			Окончание = "ых";
		КонецЕсли;
		
		Возвр = Возвр + ПоследнееСлово + " " + Дробная + Окончание;
	КонецЕсли;

	Возврат Возвр;
	
КонецФункции // ЧислоПрописью()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  Вид - если 1, то печать М-2, если 2, то печать М-2а
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(Вид, СразуНаПринтер = 0,КолЭкз = 1)
	
	Если Вид = 1 Тогда
		НомерФормы = "Типовая межотраслевая форма № М-2";
		ОКУД = "0315001";
	Иначе
		НомерФормы = "Типовая межотраслевая форма № М-2а";
		ОКУД = "0315002";
	КонецЕсли;

	// собственная фирма. Наименование, адрес, реквизиты
	ОргПлательщик = "";
	БанкРекв="";  
	
	глДобавитьРеквизит(ОргПлательщик, "", Фирма.ЮрЛицо.ПолнНаименование);
	глДобавитьРеквизит(ОргПлательщик, "", ?(ПустоеЗначение(Фирма.ЮрЛицо.ИНН)=0, ", ИНН " + СокрЛП(Фирма.ЮрЛицо.ИНН), ""));
	глДобавитьРеквизит(ОргПлательщик, ", ", глПредставлениеАдреса(Фирма.ЮрЛицо.ФактАдрес) );
	РС = БанковскийСчет;

	Банк = "";НомерСчета = "";БИКБанка = "";СчетБанка = "";
	глПлатежныеРеквизиты(БанковскийСчет, , Банк, НомерСчета, БИКБанка, СчетБанка);
	
	глДобавитьРеквизит(БанкРекв, "Счет № ", НомерСчета);
	глДобавитьРеквизит(БанкРекв," в ",Банк);
	глДобавитьРеквизит(БанкРекв,", БИК ",БИКБанка);
	глДобавитьРеквизит(БанкРекв,", корр.сч. ",СчетБанка);
	
	Список = глРазложитьДокУдостоверяющийЛичность(ДоверенноеЛицо.ДокументУдЛичность);
	ДокументВид        = ?(0 < Список.РазмерСписка(), Список.ПолучитьЗначение(1), "");
	ДокументСерия      = ?(1 < Список.РазмерСписка(), Список.ПолучитьЗначение(2), "");
	ДокументНомер      = ?(2 < Список.РазмерСписка(), Список.ПолучитьЗначение(3), "");
	ДокументДатаВыдачи = ?(3 < Список.РазмерСписка(), СокрЛ(Список.ПолучитьЗначение(4)), "");
	ДокументКемВыдан   = ?(4 < Список.РазмерСписка(), Список.ПолучитьЗначение(5), "");

	// контрагент
	
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		ПоставщикНаим = Контрагент.ЮрФизЛицо.ПолнНаименование;
	Иначе
		ПоставщикНаим = "";
	КонецЕсли;
		
	Таб = СоздатьОбъект("Таблица");
	Если Вид = 1 Тогда
	    Таб.ВывестиСекцию("ШапкаМ2");
	КонецЕсли;
	
	Таб.ВывестиСекцию("Шапка");
	
	ВыбратьСтроки();
	Ном=0;
	Пока ПолучитьСтроку() = 1 Цикл
		Ном=Ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	Таб.ВывестиСекцию("Подвал");
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиДоверенности"+Вид,"ОпцииПечатиДоверенности"+Вид);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли;
        
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		НомерТекущейФормы = 1;
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(1, СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы = 2  Тогда
		Печать(2, СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()
       
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	    
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "Покупка");
	ДатаДействия = ДатаДок + 10;
	                
КонецПроцедуры //ВводНового()    

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии() 
	                         
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1, КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма   		= Фирма;  
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
	НачальнаяДатаДокумента 	= ДатаДок;                     
	                         
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
	
	ОбновитьНадписи();         
	
КонецПроцедуры  //ПриОткрытии()                                                                 
                                    
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
КонецПроцедуры                                                                  
                           
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="БанковскийСчет" Тогда
		ЮрФизЛицо = Фирма.ЮрЛицо;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ЮрФизЛицо);
		ФлагСтандОбр = 0;
		
	ИначеЕсли ЭлементДиалога="НаименованиеТМЦ" Тогда
		ФлагСтандОбр = 0;
		ОткрытьПодбор("Справочник.Номенклатура", , , 0);
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="НаименованиеТМЦ" Тогда
		ФлагСтандОбр	= 0;
		НаименованиеТМЦ	= ВыбЗнач.ПолнНаименование;
		ОКЕИ			= ВыбЗнач.ОсновнаяЕдиница.ОКЕИ;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()


//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);             
КонецПроцедуры //ПриЗаписи()   

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	Перем ТаблЧасть, ТаблицаПодбора;
	
	ТипЗнач		= ТипЗначенияСтр(ВыбЗнач);
	Если ТипЗнач = "СписокЗначений" Тогда
		
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
	Иначе
		
		// если не список ничего не делаем
		Возврат;
	КонецЕсли;
	
	Если ТипЗначенияСтр(ТаблицаПодбора) = "ТаблицаЗначений" Тогда
		ВыгрузитьТабличнуюЧасть(ТаблЧасть, "НаименованиеТМЦ, НомерСтроки");
		
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() = 1 Цикл
			
			НаимТМЦ					= СокрЛП(ТаблицаПодбора.Номенклатура.ПолнНаименование);
			НомерСтрокиДокумента	= 0;
			
			ТаблЧасть.ВыбратьСтроки();
			Пока ТаблЧасть.ПолучитьСтроку() = 1 Цикл
			    Если НаимТМЦ = СокрЛП(ТаблЧасть.НаименованиеТМЦ) Тогда
			        НомерСтрокиДокумента	= ТаблЧасть.НомерСтрокиДокумента;
					Прервать;
			    КонецЕсли;
			КонецЦикла;
			
			Если НомерСтрокиДокумента <> 0 Тогда
			    // есть такой товар. увеличим количество
				ПолучитьСтрокуПоНомеру(НомерСтрокиДокумента);
				Количество	= Количество + ТаблицаПодбора.Количество;
			Иначе
				// нет выбранного товара. добавим строку.
				НоваяСтрока();
				НаименованиеТМЦ	= НаимТМЦ;
				ОКЕИ			= ТаблицаПодбора.Единица.ОКЕИ;
				Количество		= ТаблицаПодбора.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ  
//
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название = "Печатная форма М-2";
ТаблицаПечФорм.Кнопка = "М-2";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название = "Печатная форма М-2а";
ТаблицаПечФорм.Кнопка = "М-2а";

ВопросПередЗаполнением = "Заполнить по дукументу - основанию (перед заполнением табличная часть будет очищена)?";