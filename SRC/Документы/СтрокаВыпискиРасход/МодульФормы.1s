////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ
//
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтараяВалюта, СтарыйКурс;
Перем СтарыйДоговор, СтарыйКонтрагент;

Перем ТекущийДолг;

Перем текстСписокСтатей;

Процедура ПриИзмененииБанковскогоСчета() далее
Процедура ПриИзмененииВидаОплаты() далее
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ     
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет>");
	
КонецФункции  // ТекстВалюты()
            
//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                    
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                       
//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//	Нет
//
// Описание:
//  Управляет видимостью реквизитов в зависимости от кода операции.
//
Процедура УправлениеВидимостью()

	Если (КодОперации = глКО.СтатьиДР) или (КодОперации = глКО.ВыдачаАкционерам) Тогда
		Форма.ИспользоватьСлой("Общий1, Общий2, СписокСтатейДР", 2);
	ИначеЕсли КодОперации <> Перечисление.КодыОпераций.Прочее Тогда
		Форма.ИспользоватьСлой("Общий1, Общий2, Взаиморасчеты", 2);
	Иначе
		Форма.ИспользоватьСлой("Общий1, Общий2, Прочее", 2);
	КонецЕсли;
	
КонецПроцедуры  // УправлениеВидимостью()
              
//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДоступностью()
	
	Если Форма.ТолькоПросмотр() = 0 Тогда
		Если Договор.ВалютаВзаиморасчетов = Валюта Тогда
			Форма.кнСуммаВзаиморасчетов.Доступность(0);
		Иначе
			Форма.кнСуммаВзаиморасчетов.Доступность(1);
		КонецЕсли;
		
		Если Валюта = глРубли Тогда
			Форма.Курс.Доступность(0);
		Иначе
			Форма.Курс.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
// ЗаполнитьСписокВидовОплаты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполняет представленный в диалоге список видов оплат всеми возможными значениями.
//
Процедура ЗаполнитьСписокВидовОплаты()
	
	СписокВидовОплаты.ДобавитьЗначение(глКО.ОплатаПоставщику);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыПокупателю);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВыдачаАкционерам);
	СписокВидовОплаты.ДобавитьЗначение(глКО.Прочее);
	СписокВидовОплаты.ДобавитьЗначение(глКО.СтатьиДР);
	
КонецПроцедуры // ЗаполнитьСписокВидовОплаты()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет 
//
// Описание:
// 	Пересчитывает сумму в валюте взаиморасчетов.
//
Процедура ПересчетСуммыВзаиморасчетов()
	     
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов) =1 Тогда
		СуммаВзаиморасчетов	= 0;
		
	Иначе
		СуммаВзаиморасчетов = глПересчет(Сумма,
					Валюта,Курс,
					Договор.ВалютаВзаиморасчетов,ДатаДок);
	КонецЕсли;
	
	Форма.Обновить();
	
КонецПроцедуры // ПересчетСуммыВзаиморасчетов()
 
//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	                 
	Если  (КодОперации = глКО.ВозвратОплатыПокупателю) Тогда
		 // расход - возврат покупателю
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Покупатель");
		
	ИначеЕсли (КодОперации = глКО.ОплатаПоставщику) Тогда
		// расход - оплата поставщику
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Поставщик");
	
	Иначе
		ТекущийДолг = 0;
	КонецЕсли;
	                     
	Форма.ТекстТекущийДолг.Заголовок(глФРМ(ТекущийДолг,Договор.ВалютаВзаиморасчетов));
	
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание";
	КонецЕсли;  
	
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн <> "ВозвратОтПокупателя") и
	     (ВидОсн <> "ЗаказПоставщику") и
		 (ВидОсн <> "ОтчетКомитенту") и
		 (ВидОсн <> "ПоступлениеДопРасходы") и
		 (ВидОсн <> "ПоступлениеТМЦ") и
		 (ВидОсн <> "ПоступлениеТМЦИмпорт") и
		 (ВидОсн <> "ПоступлениеТМЦРозница") и
		 (ВидОсн <> "ПоступлениеПрочее") и
		 (ВидОсн <> "ПлатежноеПоручение") и
		 (ВидОсн <> "СтрокаВыпискиПриход") и
		 (ВидОсн <> "РабочийДень") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли;
	
	СуммаОсн = 0;
	
	Если (ВидОсн = "СтрокаВыпискиПриход") Тогда
		если глКонтроль="ТерминальныеПродажиКомиссия" Тогда
			ВалютаОсн	= глРубли;
			КурсОсн		= глКурсДляВалюты(глРубли,ДатаДок);
			СуммаОсн	= ДокОснование.СуммаВзаиморасчетов*0.02;	//Нам надо 2 процента отдать банку
			Сумма		= глПересчет(СуммаОсн, ВалютаОсн, КурсОсн, Валюта, Курс);
			ПересчетСуммыВзаиморасчетов();      
			КодОперации = глКО.СтатьиДР;
			Контрагент	= глПользователь.ОсновнойПокупатель;
			
			КодОперации = глКО.СтатьиДР;
			УправлениеВидимостью(); 
			РасчетТекущегоДолга();
			Комментарий		= "";
			СписокСтатейДР	= Константа.СтатьяДоходаРасходаПоКомиссииТерминала;
			Подчинение1		= ПолучитьПустоеЗначение(Подчинение1);
			ДляКого			= ПолучитьПустоеЗначение(ДляКого);
			Филиал			= ПолучитьПустоеЗначение(Филиал);
			Прочее			= ПолучитьПустоеЗначение(Прочее);

			Комментарий	= "Комиссия банка за использование банковских карт";
		Иначе
			ВалютаОсн    = ДокОснование.Валюта;
			КурсОсн      = ДокОснование.Курс;
			СуммаОсн     = ДокОснование.Сумма;
			ОблагаетсяНП = ДокОснование.ОблагаетсяНП;
			СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
			Сумма        = глПересчет(СуммаОсн, ВалютаОсн, КурсОсн, Валюта, Курс);
		КонецЕсли;

	ИначеЕсли (ВидОсн = "ВозвратОтПокупателя") Тогда
		ВалютаОсн    = ДокОснование.Валюта;
		КурсОсн      = ДокОснование.Курс;
		ОблагаетсяНП = ДокОснование.УчитыватьНП;
		СуммаОсн     = ДокОснование.Итог("Сумма") +
				      ?(ДокОснование.СуммаВклНП  = 1, 0, ДокОснование.Итог("СуммаНП")) +
				      ?(ДокОснование.СуммаВклНДС = 1, 0, ДокОснование.Итог("СуммаНДС"));
		СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
		Сумма        = глПересчет(СуммаОсн, ВалютаОсн, КурсОсн, Валюта, Курс);

	ИначеЕсли (ВидОсн = "ПлатежноеПоручение") Тогда
		ВалютаОсн    = глРубли;
		КурсОсн      = глКурсДляВалюты(глРубли, ДатаДок);
		СуммаОсн     = ДокОснование.Сумма;
		Сумма        = глПересчет(СуммаОсн, ВалютаОсн, КурсОсн, Валюта, Курс);
		ПересчетСуммыВзаиморасчетов();      

	ИначеЕсли (ВидОсн = "ОтчетКомитенту") Тогда
		ВалютаОсн	= ДокОснование.Договор.ВалютаВзаиморасчетов;
		КурсОсн		= глКурсДляВалюты(ВалютаОсн,ДатаДок);
	
		РегПоставщики = СоздатьОбъект("Регистр.Поставщики");
		РегПоставщики.ВыбратьДвиженияДокумента(ДокОснование);
		Пока РегПоставщики.ПолучитьДвижение() = 1 Цикл
		    Если РегПоставщики.КодОперации = глКО.ОтчетКомитенту Тогда
		        СуммаОсн = СуммаОсн +  РегПоставщики.СуммаВал;
		    КонецЕсли;
		КонецЦикла;                                            
		
		СуммаВзаиморасчетов = СуммаОсн;
		Сумма = глПересчет(СуммаОсн, ВалютаОсн, КурсОсн, Валюта, Курс);
	
	Иначе
		СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;  
		Попытка
			ОблагаетсяНП        = ДокОснование.УчитыватьНП;  
		Исключение
		КонецПопытки;	
		// Оплачиваем по умолчанию сумму, которую считаем нужным оплатить по взаиморасчетам
		Если СуммаВзаиморасчетов = 0 Тогда
		    Сумма = 0;
		Иначе
			Сумма = глПересчет(СуммаВзаиморасчетов, Договор.ВалютаВзаиморасчетов, ДатаДок, Валюта, Курс);  
		КонецЕсли; 
	КонецЕсли;
	
	
	Если (ВидОсн = "ВозвратОтПокупателя")
	 или (ВидОсн = "СтрокаВыпискиПриход") Тогда
	 	если глКонтроль <> "ТерминальныеПродажиКомиссия" Тогда
	 		КодОперации = глКО.ВозвратОплатыПокупателю;
	 	Иначе
	 		//все уже присвоено ранее
	 	КонецЕсли;
	Иначе
		КодОперации = глКО.ОплатаПоставщику;
	КонецЕсли;
		
	СтараяВалюта = Валюта; 
	СтарыйКурс   = Курс;

	Возврат "";

КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		Если ПустоеЗначение(БанковскийСчет) = 0 Тогда
			Валюта = БанковскийСчет.ВалютаСчета;
		КонецЕсли;

		
		ТекстВопроса = "Заполнить сумму по документу основанию?";
		Если Сумма <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +"(перед заполнением сумма будет обнулена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		Сумма = 0;
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		РасчетТекущегоДолга();           
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//******************************************************************************
// ПоКнопкеДолгКлиента()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//
Процедура ПоКнопкеДолгКлиента()
	
	Если      (КодОперации = глКО.ВозвратОплатыПокупателю) Тогда
		// расход - возврат покупателю
		глВзаиморасчеты(Фирма,Договор,"Покупатель");
		
	ИначеЕсли (КодОперации = глКО.ОплатаПоставщику) Тогда
		//  расход - оплата поставщику
		глВзаиморасчеты(Фирма,Договор,"Поставщик");
		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеДолгКлиента()

//******************************************************************************
// ПриИзмененииВидаОплаты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вид оплаты.
//
// Описание:
//  Производит все необходимые пересчеты при изменении вида оплаты.
//
Процедура ПриИзмененииВидаОплаты()
	
	КодОперации = СписокВидовОплаты.ПолучитьЗначение(СписокВидовОплаты.ТекущаяСтрока());
	УправлениеВидимостью(); 
	РасчетТекущегоДолга();

	Комментарий		= "";
	СписокСтатейДР	= ПолучитьПустоеЗначение(СписокСтатейДР);
	Подчинение1		= ПолучитьПустоеЗначение(Подчинение1);
	ДляКого			= ПолучитьПустоеЗначение(ДляКого);
	Филиал			= ПолучитьПустоеЗначение(Филиал);
	Прочее			= ПолучитьПустоеЗначение(Прочее);
КонецПроцедуры //ПриИзмененииВидаОплаты()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()                             
	
	Если СтарыйДоговор <> Договор Тогда
		СтарыйДоговор	= Договор;
		
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеДоступностью();
		
		Если ПустоеЗначение(Контрагент) = 1 Тогда
			Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента()       
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		СтарыйКонтрагент	= Контрагент;
		Договор 			= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;

		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеДоступностью();
	КонецЕсли;
	
КонецПроцедуры  // ПриИзмененииКонтрагента()

//*****************************************************************************
// ПриИзмененииВалюты()
//
// Параметры: 
//	Нет
//
//Описание:
// Процедура вызывается при смене валюты документа
//
Процедура ПриИзмененииВалюты()
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Возврат;
	КонецЕсли;
    
	// При смене валюты зачитываем текущий курс на дату
	Курс = глКурсДляВалюты(Валюта, ДатаДок);
	
	Если Сумма <> 0 Тогда
		Если Вопрос("Изменилась валюта документа. Пересчитать сумму?", "Да+Нет", 60) = "Да" Тогда
			Сумма = глПересчет(Сумма, СтараяВалюта, СтарыйКурс, Валюта, Курс);
		КонецЕсли;
	КонецЕсли;
	
	СтараяВалюта = Валюта; СтарыйКурс = Курс;
	
	ПересчетСуммыВзаиморасчетов();
	УправлениеДоступностью();
	
КонецПроцедуры // ПриИзмененииВалюты()

//*****************************************************************************
// ПриИзмененииКурса()
//
// Параметры: 
//	Нет
//
// Описание:
// 	Процедура вызывается при смене курса документа
//
Процедура ПриИзмененииКурса()
	
	ПересчетСуммыВзаиморасчетов();
	
КонецПроцедуры // ПриИзмененииКурса()

//*****************************************************************************
// ПриИзмененииБанковскогоСчета()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Банковский счет.
//
// Описание:
//  Производит необходимые пересчеты при смене банковского счета.
//
Процедура ПриИзмененииБанковскогоСчета()
	
	Если БанковскийСчет.ВалютаСчета <> Валюта Тогда
		Валюта = БанковскийСчет.ВалютаСчета;
		Форма.Обновить(0); // иначе не видно изменение валюты после изменения фирмы
		ПриИзмененииВалюты();
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииБанковскогоСчета()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Сумма = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПриИзмененииКурса();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма;                  
		
		ПриИзмененииБанковскогоСчета(); // Мог поменяться банковский счет 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
                                       
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	ПриИзмененииБанковскогоСчета();
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
//	предопределенная процедура
//
Процедура ВводНового(Скопирован) 
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	ПриИзмененииБанковскогоСчета();
	
	Если Скопирован = 1 Тогда	//копирование документа
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	КодОперации = глКО.ОплатаПоставщику;
	
КонецПроцедуры        

//******************************************************************************
// предопределенная процедура            
//
Процедура ПриОткрытии() 
	                      
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам) = "СписокЗначений" Тогда
		
		Если ПустоеЗначение(Парам.Получить("Команда")) = 0 Тогда
			// печать
			
			Если (Парам.Получить("Команда") = "ПечатьНаПринтер")
			 или (Парам.Получить("Команда") = "ПечатьНаЭкран") 
			Тогда
				Предупреждение("Документ не имеет печатной формы!", 60);
				СтатусВозврата(0);
				Возврат;
			Иначе
				Сообщить("В форму документа " + Вид() + " передана неверная команда " + Парам.Получить("Команда") + "!", "I");
				СтатусВозврата(0);
				Возврат;
			КонецЕсли; 
			
		ИначеЕсли ПустоеЗначение(Парам.Получить("Параметры")) = 0 Тогда
			// ввод нового из выписки банка
			Если ПустоеЗначение(Парам.Получить("ДатаДок")) = 0 Тогда
				ДатаДок			= Парам.Получить("ДатаДок");
			КонецЕсли;
			
			Если ПустоеЗначение(Парам.Получить("Фирма")) = 0 Тогда
				Фирма			= Парам.Получить("Фирма");
				ЮрЛицо			= Фирма.ЮрЛицо;
				УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(ЮрЛицо.ПрефиксНомеровДокументов));
			КонецЕсли;
			
			Если ПустоеЗначение(Парам.Получить("БанковскийСчет")) = 0 Тогда
				БанковскийСчет	= Парам.Получить("БанковскийСчет");
				ВалютаСчета		= БанковскийСчет.ВалютаСчета;
				КурсВалютаСчета	= глКурсДляВалюты(ВалютаСчета, ДатаДок);
				
				Сумма			= глПересчет(Сумма, Валюта, Курс, ВалютаСчета, КурсВалютаСчета);
				Валюта			= ВалютаСчета;
				Курс			= КурсВалютаСчета;
			КонецЕсли;
			
			Если ПустоеЗначение(Парам.Получить("Контрагент")) = 0 Тогда
				Контрагент		= Парам.Получить("Контрагент");
				Договор			= Контрагент.ОсновнойДоговор;
			КонецЕсли;

		Иначе
			Сообщить("В форму документа " + Вид() + " передан неверный параметр!", "I");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата	= ДатаДок;
	СтараяФирма	= Фирма;
	
	СтраыйДоговор		= Договор;
	СтарыйКонтрагент	= Контрагент;
	
	ЗаполнитьСписокВидовОплаты();
	
	Форма.СписокСтатейДР.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Комментарий.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Подчинение1.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ДляКого.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Филиал.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Прочее.ВыполнятьФормулуТолькоПриИзменении(1);
	
	Если СписокВидовОплаты.РазмерСписка() > 0 Тогда
		Позиция	= СписокВидовОплаты.НайтиЗначение(КодОперации);
		Если Позиция > 1 Тогда
			СписокВидовОплаты.ТекущаяСтрока(Позиция);
		КонецЕсли;
	КонецЕсли;
	
	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
    
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
	
	СтараяВалюта = Валюта;
	СтарыйКурс   = Курс;

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;
	
	РасчетТекущегоДолга();
	
	УправлениеВидимостью();   
	УправлениеДоступностью();
	
	глПриВыбореБухСчета(Контекст, 1, 1);
	
КонецПроцедуры //ПриОткрытии() 

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	
	Если КодОперации = глКО.Прочее Тогда
	    Контрагент	= "";
		Договор		= "";
	Иначе
		Счет		= "";
		Субконто1	= "";
		Субконто2	= "";
		Субконто3	= "";
	КонецЕсли;   
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	
	Если (ТипЗначенияСтр(Форма.Параметр) = "ГрупповойКонтекст") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр;
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	ИначеЕсли (ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр.Получить("Контекст");
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ПриЗакрытии()
                                
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="БанковскийСчет" Тогда
		ЮрФизЛицо = Фирма.ЮрЛицо;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ЮрФизЛицо);
		ФлагСтандОбр = 0;
	ИначеЕсли (ЭлементДиалога = "Счет")
	 или (ЭлементДиалога = "Субконто1") 
	 или (ЭлементДиалога = "Субконто2") 
	 или (ЭлементДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);  
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

Процедура ОбновиТекст()
	текстСписокСтатей	= СписокСтатейДР.ПолноеНаименование();
	Комментарий			= текстСписокСтатей;
КонецПроцедуры

ОбновиТекст();