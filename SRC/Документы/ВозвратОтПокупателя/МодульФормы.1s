////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"      

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов
Перем ТекущийДолг;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//******************************************************************************
// ПредставлениеПартии(Партия)
//
// Параметры:
//  Партия   - элемент справочника "Партии"
//
// Возвращаемое значение:
//  Строка - представление партии.
//
// Вызывается из формул элементов диалога:
//  Колонка "Патртия"
//
// Описание:
//  Возвращает представление партии 
//
Функция ПредставлениеПартии(Партия) 
	
	Если ПустоеЗначение(Партия) = 1 Тогда
		Возврат "<автоподбор>";
	Иначе
		Если (Выбран() = 1) 
		   и (Партия.ПриходныйДокумент = ТекущийДокумент())  Тогда
			Возврат "<автоподбор>";
		КонецЕсли;
		Возврат ""+Партия.ПриходныйДокумент;
	КонецЕсли;
	
КонецФункции // глПредставлениеПартии()   

//******************************************************************************
// ВопросПередЗаполнением()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текст вопроса перед начальным заполнением
//
// Описание:
//  Формирует текст вопроса перед начальным заполнением.
//
Функция ВопросПередЗаполнением()
	
	Если КодОперации = глКО.ВозвратОтРеализатора Тогда
		ВопросПередЗаполнением = "Заполнить по договору товарами переданными, но не реализованными комиссионером?";
	Иначе
		ВопросПередЗаполнением = "Заполнить по документу - основанию?";
	КонецЕсли;      
	
	Возврат ВопросПередЗаполнением;
	
КонецФункции // ВопросПередЗаполнением()

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                

//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************
// УстановкаВидимостиНалогов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//
Процедура УстановкаВидимостиНалогов()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
	КонецЕсли;    
	
КонецПроцедуры // УстановкаВидимостиНалогов()

//******************************************************************************
// УправлениеВидимостью()
//
// Параметры:
//	НомерЗакладки - номер закладки
//
// Описание:
// 	Устанавливает видимость элементов диалога в зависимости от текущей закладки.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
		Если НомерЗакладки = 2 Тогда
			Форма.Цена             .Видимость(1);
			Форма.Сумма            .Видимость(1);
			Форма.СебестоимостьНДС .Видимость(0);
			Форма.Себестоимость.    Видимость(0);
			Форма.СебестоимостьЦена.Видимость(0);
			Форма.ВидСтатус 	   .Видимость(0);
			Форма.ТекстПартия 	   .Видимость(0);
			Форма.ОткрытьПартию    .Видимость(0);
			Форма.НомерДатаСФ      .Видимость(0);
			Форма.ТекстНомерДатаСФ .Видимость(0);
			УстановкаВидимостиНалогов();
			
			Форма.БезСкидки.Видимость(Скидка.Выбран());
			Форма.СуммаСкидки.Видимость(Скидка.Выбран());
		Иначе
			Форма.Цена      .Видимость(0);
			Форма.Сумма     .Видимость(0);
			
			Форма.СуммаНП	.Видимость(0);
			Форма.СтавкаНП	.Видимость(0);
		    Форма.СуммаНДС	.Видимость(0);
			Форма.СтавкаНДС	.Видимость(0);
			Форма.Всего	    .Видимость(0);
			
			Форма.Себестоимость    .Видимость(1);
			Форма.СебестоимостьНДС .Видимость(1);
			Форма.СебестоимостьЦена.Видимость(1);
			Форма.ВидСтатус 	   .Видимость(1);    
			Форма.ТекстПартия 	   .Видимость(1);
			Форма.ОткрытьПартию    .Видимость(1);
			Форма.НомерДатаСФ      .Видимость(1);
			Форма.ТекстНомерДатаСФ .Видимость(1);
			
			Форма.БезСкидки.Видимость(0);
			Форма.СуммаСкидки.Видимость(0);
		КонецЕсли;
	КонецЕсли;       
	УстановкаВидимостиСуммВПодвале();	
	
КонецПроцедуры //УправлениеВидимостью()
                        
//******************************************************************************
// УстановкаНаличияЗакладок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит управление закладками в зависимости от вида документа.
//
Процедура УстановкаНаличияЗакладок()
	     
	Если Форма.Закладки.РазмерСписка()=0 Тогда
		Форма.Закладки.ДобавитьЗначение("Шапка");
		Форма.Закладки.ДобавитьЗначение("ТМЦ и услуги (по отпускным ценам)");
	КонецЕсли;
	
	Если (ДокОснование.Выбран()=1) Тогда
		Если глЕстьРеквизитШапки("ФлагСвертки", ДокОснование.Вид())=1 Тогда
			Если ДокОснование.ФлагСвертки = 1 Тогда
				Если Форма.Закладки.РазмерСписка()<3 Тогда
					Форма.Закладки.ДобавитьЗначение("Себестоимость ТМЦ");
				КонецЕсли;
			Иначе 
				Если Форма.Закладки.РазмерСписка()>2 Тогда
					Если Форма.Закладки.ТекущаяСтрока() = 3 Тогда
						Форма.Закладки.ТекущаяСтрока(2);
					КонецЕсли;
					Форма.Закладки.УдалитьЗначение(3);
				КонецЕсли;
			КонецЕсли;	
		Иначе
			Если Форма.Закладки.РазмерСписка()>2 Тогда
				Если Форма.Закладки.ТекущаяСтрока() = 3 Тогда
					Форма.Закладки.ТекущаяСтрока(2);
				КонецЕсли;
				Форма.Закладки.УдалитьЗначение(3);
			КонецЕсли;
		КонецЕсли;  
	ИначеЕсли (ДокОснование.Выбран()=1)  или
	(КодОперации = глКО.ВозвратОтРеализатора) Тогда
		Если Форма.Закладки.РазмерСписка()>2 Тогда
			Если Форма.Закладки.ТекущаяСтрока() = 3 Тогда
				Форма.Закладки.ТекущаяСтрока(2);
			КонецЕсли;
			Форма.Закладки.УдалитьЗначение(3);
		КонецЕсли;
	Иначе
		Если Форма.Закладки.РазмерСписка()<3 Тогда
			Форма.Закладки.ДобавитьЗначение("Себестоимость ТМЦ");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
	
КонецПроцедуры // УстановкаНаличияЗакладок()
            
//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	                                                                  
	Форма.СебестоимостьЦена.Заголовок("Себ. ("+СокрЛП(глРубли)+")");
	
КонецПроцедуры //ОбновитьНадписи()
                                           
//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "покупатель");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                        
	Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название 	= Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                      
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустаяСтрока(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
	ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()        

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()
                   
//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

Функция ЗаполнениеПоИтогам() Далее

//******************************************************************************
// ПроверкаСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  "" или строка с описанием ошибки в случае ошибки.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Проверяет допустимость выбранного склада.
//
Функция ПроверкаСклада()
	
	ТекстОш = "";
	Если Склад.РозничныйСклад = 1 Тогда
		Если (Договор.Выбран()=1) и (Договор.ВалютаВзаиморасчетов <> глРубли) Тогда  
			ТекстОш = "На розничном складе операции возврата и продажи 
			|могут осуществляться только по рублевым договорам!";      
		ИначеЕсли Валюта <> глРубли Тогда
			ТекстОш = "Валюта документа возврта на розничный склад не может 
			|отличаться от валюты бухгалтерского учета!";
		КонецЕсли;
	КонецЕсли;

	Если КодОперации = глКО.ВозвратОтРеализатора Тогда
		Если Склад.РозничныйСклад = 1 Тогда
			ТекстОш = ""+КодОперации+" не может производиться 
			|с розничного склада";
		КонецЕсли;
		
	КонецЕсли;   
	
	Возврат ТекстОш;
	
КонецФункции // ПроверкаСклада()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()

	Результат = ПроверкаСклада();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
		Склад = ПолучитьПустоеЗначение("Справочник.Склады");
		Возврат;
	КонецЕсли;
	
	Если Склад.Выбран()=1 Тогда   
		
		Если (Склад.РозничныйСклад = 1) и (Склад.ОблагаетсяЕНВД = 1) Тогда
			НовоеОблагаетсяЕНВД = 1;
		Иначе     
			НовоеОблагаетсяЕНВД = 0;
		КонецЕсли;                           
		
		// зададим вопрос о пересчете налогов
		Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) и (КоличествоСтрок()>0) Тогда
			ТекстВопроса = "Для склада """ + Склад.Наименование + " порядок 
				|налогообложения отличается от установленного в документе."+
				?(НовоеОблагаетсяЕНВД=1,"  Не облагается ЕНВД -> облагается ЕНВД."
				,"  Облагается ЕНВД -> не облагается ЕНВД.");
			ТекстВопроса = ТекстВопроса + РазделительСтрок+"Пересчитать суммы налогов в документе?";
			Если Вопрос(ТекстВопроса ,"Да+Нет", 60)  <> "Да"Тогда 
				НовоеОблагаетсяЕНВД = ОблагаетсяЕНВД; // не изменяем
			КонецЕсли;
		КонецЕсли;             
		
		// пересчитаем документ
		Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) Тогда
			ОблагаетсяЕНВД 	= НовоеОблагаетсяЕНВД;
			УчитыватьНДС 	= ?(ОблагаетсяЕНВД=1,0,1);
			УчитыватьНП 	= ?(ОблагаетсяЕНВД=1,0,1);
			глПересчитатьНалоги(Контекст, СуммаВклНП, СуммаВклНДС);
		КонецЕсли;
	КонецЕсли;
	
	Если ОблагаетсяЕНВД = 1 Тогда // Возврата от реализатора с ЕНВД быть не должно (отследили выше)
		КодОперации = глКО.ВозвратОтПокупателяЕНВД;
	ИначеЕсли КодОперации = глКО.ВозвратОтПокупателяЕНВД Тогда
	    КодОперации = глКО.ВозвратОтПокупателя;
	КонецЕсли;
	
	ОбновитьНадписи();   	
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()     
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
		
		Если КодОперации = Перечисление.КодыОпераций.ВозвратОтРеализатора Тогда
			
			ТекстВопроса = ВопросПередЗаполнением();
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоИтогам();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()       
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
		
		Если КодОперации = Перечисление.КодыОпераций.ВозвратОтРеализатора Тогда
			
			ТекстВопроса = ВопросПередЗаполнением();
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок + " (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
			
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
			
			УдалитьСтроки();
			Результат = ЗаполнениеПоИтогам();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
		КонецЕсли;
		
		//++Ерошенко 03.05.2007
		ПроверитьКонтрагентаВДокументе(Контрагент);
		//--Ерошенко
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()      

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	Если ОблагаетсяЕНВД = 1 Тогда
	    КодОперации = глКО.ВозвратОтПокупателяЕНВД; // Возврата от реализатора с ЕНВД быть не должно
		// Проверим склад (д.б. розничным)
		Результат = ПроверкаСклада();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
			Склад = ПолучитьПустоеЗначение("Справочник.Склады");
		КонецЕсли; 
	ИначеЕсли КодОперации = глКО.ВозвратОтПокупателяЕНВД Тогда
	    КодОперации = глКО.ВозвратОтПокупателя;
	КонецЕсли;

	ОбновитьНадписи();
	УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
	УстановкаВидимостиНалогов();
	Форма.Обновить(0);
	
КонецПроцедуры	//ПоКнопкеЦены()
                                    
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран() = 0 Тогда
		Возврат "Документ основание не выбран!";
	КонецЕсли;  
	
	ВидОсн = ДокОснование.Вид();
	
	// очищаем наш документ
	УдалитьСтроки();
		
	Если (ВидОсн = "Реализация") Тогда
		Если ДокОснование.КодОперации = Перечисление.КодыОпераций.ПередачаНаРеализацию Тогда
			КодОперации = Перечисление.КодыОпераций.ВозвратОтРеализатора;
		Иначе
			КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя;
		КонецЕсли;
	ИначеЕсли (ВидОсн = "ОтчетККМ") 
	или       (ВидОсн = "РеализацияРозница")
	Тогда
		Если ОблагаетсяЕНВД = 1 Тогда
			// Облагаеться ЕНВД может только возврат от покупателя на розничный склад 		    
			КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателяЕНВД; 
		Иначе
			КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя;
		КонецЕсли;
	Иначе
		Возврат "Неверный вид документа основания";
	КонецЕсли;
		
	Валюта 		= ДокОснование.Валюта;
	Курс 		= ДокОснование.Курс;
	
		
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		
		НоваяСтрока();
		Номенклатура= ТаблицаДокумента.Номенклатура;
		Количество 	= ТаблицаДокумента.Количество; 
		Единица 	= ТаблицаДокумента.Единица;
		Коэффициент = ТаблицаДокумента.Коэффициент;
		Сумма 		= ТаблицаДокумента.Сумма;
		
		//Производитель	= Номенклатура.Производитель;
		//Артикул			= Номенклатура.Артикул;
		
		если ДокОснование.ПредставлениеВида()="Реализация " тогда
			если Количество<>0 тогда
				Цена = ТаблицаДокумента.Сумма/ТаблицаДокумента.Количество;
			иначе
				Цена = ТаблицаДокумента.Сумма;
			КонецЕсли;
		КонецЕсли;
		
		СуммаНДС 	= ТаблицаДокумента.СуммаНДС;
		СуммаНП 	= ТаблицаДокумента.СуммаНП;
		СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
		СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
	КонецЦикла; // по строкам основания
	
	Если (ВидОсн = "ОтчетККМ") Тогда
		ПересчетСуммыВзаиморасчетов();
	Иначе
		СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
	КонецЕсли;
	АвторЗаявки = ДокОснование.АвторЗаявки;
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе основании не заполнена табличная часть";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// ЗаполнениеПоИтогам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заоплняет табличную часть товарами по догувору, переданными комиссионеру,
//  но еще не реализованными.
//
Функция ЗаполнениеПоИтогам()
	Перем НереализованныеТовары;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	ОбщРег = СоздатьОбъект("Регистры");
	РегОтданные = ОбщРег.ПартииОтданные;
	
	// установим фильтры на измерения
	РегОтданные.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	РегОтданные.УстановитьЗначениеФильтра("Договор", Договор, 1);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегОтданные.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегОтданные.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегОтданные.ВыгрузитьИтоги(НереализованныеТовары, 1, 1);
	
	НереализованныеТовары.Свернуть("Номенклатура","Количество,ПродСтоимость");
	НереализованныеТовары.ВыбратьСтроки();
	
	Пока НереализованныеТовары.ПолучитьСтроку() = 1 Цикл
		
		Если НереализованныеТовары.Количество <= 0 Тогда
		    Продолжить;
		КонецЕсли;
		
		НоваяСтрока();
		
		Номенклатура	= НереализованныеТовары.Номенклатура;
		Единица			= Номенклатура.ОсновнаяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		//Производитель	= Номенклатура.Производитель;
		//Артикул			= Номенклатура.Артикул;
		
		Количество		= НереализованныеТовары.Количество / ?(Коэффициент = 0, 1, Коэффициент);
		
		ОбщСумма		= глПересчет(НереализованныеТовары.ПродСтоимость, 
		                  Договор.ВалютаВзаиморасчетов, ДатаДок,
		                  Валюта,                       Курс);
		СуммаБезНП	 	= ОбщСумма;  // для расчета НДС
		// расчет суммы и цены и налогов
		Если УчитыватьНП = 1 Тогда
			СтавкаНП	= Номенклатура.СтавкаНП;
			СуммаНП		= ОбщСумма * СтавкаНП.Ставка / (100 + СтавкаНП.Ставка);
			СуммаБезНП	= ОбщСумма - СуммаНП;
			
			Если СуммаВклНП = 0 Тогда
				ОбщСумма = СуммаБезНП;
			КонецЕсли;
		КонецЕсли;
		
		Если УчитыватьНДС = 1 Тогда
			СтавкаНДС	= Номенклатура.СтавкаНДС;
			СуммаНДС	= СуммаБезНП * глВыделяемыйНДС(СтавкаНДС);
			
			Если СуммаВклНДС = 0 Тогда
				ОбщСумма = ОбщСумма - СуммаНДС;
			КонецЕсли;
		КонецЕсли;
		
		Сумма = ОбщСумма;
		Если Количество <> 0 Тогда
			Цена = Сумма / Количество;
		Иначе
			Цена = Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Отсутствуют товары, переденные по договору, но еще не реализованные комиссионером!";
	КонецЕсли;
	
	Возврат "";	// успешное завершение
	
КонецФункции // ЗаполнениеПоИтогам()
                                
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		// проверим соответствие выбраной операции и склада
		ТекстОш = ПроверкаСклада();
		Если ПустоеЗначение(ТекстОш) = 0 Тогда
			Предупреждение(ТекстОш+" Склад будет очищен.", 60);
			Склад = ПолучитьПустоеЗначение("Справочник.Склады");
			Если ОблагаетсяЕНВД = 1 Тогда
				// Облагаеться ЕНВД может только возврат от покупателя на розничный склад 		    
				КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателяЕНВД; 
			Иначе
				КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя;
			КонецЕсли;
		Иначе
			ТекстВопроса = "Заполнить по документу основанию?";
			Если КоличествоСтрок() <> 0 Тогда
				ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
			КонецЕсли;
				
			Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
				
			Результат = ЗаполнениеПоДокументуОснованию();
			Если ПустоеЗначение(Результат) = 0 Тогда
				Предупреждение(Результат, 60);
			КонецЕсли;
			
		КонецЕсли;
		
		УстановкаНаличияЗакладок(); // отключение закладок с себестоимостью

		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
		
		//++Ирина МЭТР
		Если ((ДокОснование.Вид() = "Реализация") И (ДокОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал")) ИЛИ
		((ДокОснование.Вид() = "Реализация") И (ДокОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозница")) Тогда 
			ДокОснование = ДокОснование.ДокОснование; 
		КонецЕсли;
		//--Ирина МЭТР
		
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//*****************************************************************************
// ПоКнопкеОперация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования текущего вида операции в документе
//
Процедура ПоКнопкеОперация()
	
	Перем ВремКодОперации;
	
	СписокОпераций = СоздатьОбъект("СписокЗначений");   
	СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.ВозвратОтПокупателя);
	СписокОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.ВозвратОтРеализатора);
	
	ВремКодОперации = КодОперации;
	Если СписокОпераций.ВыбратьЗначение(КодОперации,,,,1)=1 Тогда
		
		// проверим соответствие выбраной операции и склада
		ТекстОш = ПроверкаСклада();
		Если ПустоеЗначение(ТекстОш) = 0 Тогда
			Предупреждение(ТекстОш, 60);
			КодОперации = ВремКодОперации;
			Возврат;
		КонецЕсли;
		
		Если КодОперации = глКО.ВозвратОтРеализатора Тогда
			// очистим партии, поскольку они не используются при возврате от комиссионера
		    ВыбратьСтроки();
			Пока ПолучитьСтроку()=1 Цикл
			    Партия = "";
			КонецЦикла;

			Если ОблагаетсяЕНВД = 1 Тогда
				// пересчитаем документ
				ОблагаетсяЕНВД 	= 0;
				УчитыватьНДС 	= 1;
				УчитыватьНП 	= 1;
				глПересчитатьНалоги(Контекст, СуммаВклНП, СуммаВклНДС);
			КонецЕсли;
		КонецЕсли;
		УстановкаНаличияЗакладок();
	КонецЕсли;                      
	
КонецПроцедуры	// ПоКнопкеОперация()
                   
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		Если Вопрос(ВопросПередЗаполнением() + РазделительСтрок + " (перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		Иначе
			УдалитьСтроки();
		КонецЕсли;
	КонецЕсли;
	
	Если КодОперации = Перечисление.КодыОпераций.ВозвратОтРеализатора Тогда
		Результат = ЗаполнениеПоИтогам();
	Иначе
		Результат = ЗаполнениеПоДокументуОснованию();
	КонецЕсли;
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
	Форма.Обновить(0);
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()


//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Перем НачПовт, КонПовт;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Поставщик
	
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "БС";
	НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));	
	Если Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0 Тогда
		ВыбЮЛ = "Эксп"; 
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	КонецЕсли;	
	
	Если ВыбЮЛ = "БС" Тогда
		Поставщик = СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Параметры);		
		Поставщик = СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы")) + " " + СокрЛП(Параметры.Получить("ПредставлениеЮрАдресаФирмы"));
	КонецЕсли;
	//--Валерий МЭТР: для нового юр. лица "ИС"
	
	ИсхТабл.ВывестиСекцию("Поставщик");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Поставщик");
	
	// Секция Покупатель
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Покупатель = СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
	Иначе
		Покупатель = "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Покупатель");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Покупатель");
	
	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// выводим табличную часть
	НомСтроки = 0;
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
		
	// секция Итого
	ИсхТабл.ВывестиСекцию("Итого");
	
	// секция ИтогоНДС
	Если УчитыватьНДС = 1 Тогда
		СуммаНДСИтог = Итог("СуммаНДС");
		Если СуммаВклНДС = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНДСИтог;
		КонецЕсли;
		ИсхТабл.ВывестиСекцию("ИтогоНДС");
	КонецЕсли;
		
	// секция ИтогоНП
	Если УчитыватьНП = 1 Тогда
		СуммаНПИтог = Итог("СуммаНП");
		Если СуммаВклНП = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНПИтог;
		КонецЕсли;
		ИсхТабл.ВывестиСекцию("ИтогоНП");
	КонецЕсли;
		
	// секция СуммаПрописью
	ИсхТабл.ВывестиСекцию("СуммаПрописью");
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок, "ВозвратОтПокупателя", "ВозвратОтПокупателя");
		
		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли;
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  Открывает список с выбором способа печати. После выбора способа формирует
//  таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПересчетТаблЧасти(ИмяРеквизита)
//
// Параметры:                
//	ИмяРеквизита - идентификатор текущей колонки табличной части
//
// Описание:
//	Производится пересчет всего необходимого при редактировании табличной части.
//
Процедура ПересчетТаблЧасти(ИмяРеквизита)
	
	Если ИмяРеквизита = "СебестоимостьЦена" Тогда
		Себестоимость     = СебестоимостьЦена*Количество;
		СебестоимостьНДС  = Себестоимость * глНачисляемыйНДС(СтавкаНДС);
	ИначеЕсли ИмяРеквизита = "Себестоимость" Тогда
		СебестоимостьЦена = ?(Количество=0,0,Себестоимость / Количество);
		СебестоимостьНДС  = Себестоимость * глНачисляемыйНДС(СтавкаНДС);
	ИначеЕсли ИмяРеквизита = "Количество" Тогда
		Себестоимость     = СебестоимостьЦена*Количество;
		СебестоимостьНДС  = Себестоимость * глНачисляемыйНДС(СтавкаНДС);
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());
	Иначе
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());
	КонецЕсли;                                                 
	
КонецПроцедуры // ПересчетТаблЧасти()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//*****************************************************************************
// предопределенная процедура
Процедура ПриНачалеРедактированияСтроки()
	
	Если ((Форма.ТекущаяКолонка() = "ТекстПартия") или (Форма.ТекущаяКолонка() = "ВидСтатус")) 
	и     (Номенклатура.Выбран()=1) 
	Тогда
	   	
	   	Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад   		, "Склад");	
		Параметр.ДобавитьЗначение(ВидСтатус		, "ВидСтатус");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Единица	    , "Единица");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(СебестоимостьЦена	, "СебестоимостьЦена");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Обработка.ВводСтрокиВозврата", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	          = Параметр.Получить("Партия");    
		ВыбВидСтатус      = Параметр.Получить("ВидСтатус");    
		СебестоимостьЦена = Параметр.Получить("СебестоимостьЦена");
		
		НазначитьТип("ВидСтатус", "Перечисление." + ВыбВидСтатус.Вид());
		ВидСтатус = ВыбВидСтатус;
		
		ПересчетТаблЧасти("СебестоимостьЦена");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                     
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);

	//проверяем склад
	Результат = ПроверкаСклада();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Склад = ПолучитьПустоеЗначение("Справочник.Склады");
	КонецЕсли;

	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;

	Если глЕстьРеквизитШапки("Объект",ДокументОснование.Вид())=1 Тогда
		Объект	=	ДокументОснование.Объект;
	КонецЕсли;
		
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;

	//++Ирина МЭТР
	Если ((ДокументОснование.Вид() = "Реализация") И (ДокументОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозницаБезнал")) ИЛИ
	((ДокументОснование.Вид() = "Реализация") И (ДокументОснование.ДокОснование.Вид() = "РасходнаяНакладнаяРозница")) Тогда 
		ДокОснование = ДокументОснование.ДокОснование; 
	КонецЕсли;
	//--Ирина МЭТР

КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	
	Если Скопирован = 1 Тогда	//копирование документа - очистим партии
		ПересчетСуммыВзаиморасчетов();
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			Партия = "";
		КонецЦикла;
		Возврат; 
	КонецЕсли;
	
	Если Форма.Параметр = "Комиссия" Тогда  
		КодОперации	= Перечисление.КодыОпераций.ВозвратОтРеализатора;
	Иначе
		Если ОблагаетсяЕНВД = 1 Тогда
			// Облагаеться ЕНВД может только возврат от покупателя на розничный склад 		    
			КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателяЕНВД; 
		Иначе
			КодОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя;
		КонецЕсли;
	КонецЕсли;  
	
	//проверяем склад
	Результат = ПроверкаСклада();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Склад = ПолучитьПустоеЗначение("Справочник.Склады");
	КонецЕсли;

КонецПроцедуры // ВводНового()

//******************************************************************************
// предопределенная процедура
Процедура ПриОткрытии()
	
	//++Валерий МЭТР: интернет-магазин
	Если (НазваниеНабораПрав() = "Продавец_розница") И (Выбран() = 1) Тогда
		Если (глПроектИнтернетМагазин(Проект) = 0) ИЛИ (Автор <> глПользователь) Тогда
			Предупреждение("Вы не имеете права доступа к этому документу!");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР: интернет-магазин
	                        
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОперация.Доступность(0);
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	УстановкаНаличияЗакладок();
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		Форма.Закладки.ТекущаяСтрока(1);
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
	КонецЕсли;
	УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
	УстановкаВидимостиСуммВПодвале();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	ОбновитьНадписи();
	
КонецПроцедуры                                                                  
                       
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=2 Тогда
		ОбновитьНадписи();
	КонецЕсли;                          
	
	УправлениеВидимостью(НомерЗакладки);
	
КонецПроцедуры           
              
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриРедактированииНовойСтроки()
	
	НазначитьТип("ВидСтатус", "Перечисление.ВидыТМЦ");
	ВидСтатус    = Перечисление.ВидыТМЦ.Товар;       
	
КонецПроцедуры

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи()
	
	//++Валерий МЭТР: интернет-магазин
	Если (НазваниеНабораПрав() = "Продавец_розница") Тогда
		Если (глПроектИнтернетМагазин(Проект) = 0) Тогда
			Предупреждение("Вы можете записывать только документы интернет-магазина!");
			СтатусВозврата(0);
			//Возврат;
		КонецЕсли;
	КонецЕсли;
	//--Валерий МЭТР: интернет-магазин
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
        
	Если ((КодОперации = глКО.ВозвратОтПокупателя)
	    или (КодОперации = глКО.ВозвратОтПокупателяЕНВД))
	и    (ДокОснование.Выбран() = 0)
	Тогда       
		КурсРубля = глКурсДляВалюты(глРубли, ДатаДок);
		СпрПартии = СоздатьОбъект("Справочник.Партии");

		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (ПустоеЗначение(ВидСтатус) = 1) Тогда
				НазначитьТип("ВидСтатус", "Перечисление.ВидыТМЦ");                           
				ВидСтатус     = Перечисление.ВидыТМЦ.Товар;
			КонецЕсли;
			
			Если (Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга) 
			и    (Себестоимость = 0)
			Тогда
				
				Себестоимость = глПересчет(Сумма 
				                           - ?(СуммаВклНДС = 1,СуммаНДС,0)
										   - ?(СуммаВклНП  = 1,СуммаНП, 0),
										   Валюта, Курс,
										   глРубли,КурсРубля);
	            СебестоимостьЦена = ?(Количество = 0, 0, Себестоимость/Количество);
				СебестоимостьНДС  = СуммаНДС;

			КонецЕсли;
			// Т.К. основания нет, если не выбрана конкретная партия, надо создать новую по возврату
			Если ПустоеЗначение(Партия) = 1 Тогда
			    
				Если ПустоеЗначение(Номенклатура) = 1 Тогда
			        СтатусВозврата(0);
					Сообщить("В строке "  + НомерСтроки + " не выбрана номеклатура");
					Возврат;
				КонецЕсли;
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				СпрПартии.Записать();           
				Партия = СпрПартии.ТекущийЭлемент();	
			КонецЕсли;
			
		КонецЦикла; 
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
			
        Если Форма.ТолькоПросмотр() = 0 Тогда
			
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица"     , "Справочник.Единицы");
				ТаблицаПодбора.НоваяКолонка("Количество"  , "Число");
				ТаблицаПодбора.НоваяКолонка("Цена"        , "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ТаблицаПодбора.Цена  = глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");

				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()
              
//++Ерошенко 06.06.2007
// добавлено по просьбе Ивановой по образцу поступления ТМЦ
Процедура ПриУдаленииСтроки()
	если НазваниеНабораПрав()="Продавец_розница" Тогда
		Сообщить("Нельзя удалять строки из этого документа");
		СтатусВозврата(0);
		Возврат;
	Иначеесли ПустоеЗначение(Принят_к_учету)=0 Тогда
		Сообщить("Нельзя удалять строки из этого документа");
		СтатусВозврата(0);
		Возврат;
	иначе
		//УдалитьПартию();
	КонецЕсли;	
КонецПроцедуры // ПриУдаленииСтроки()
//--


//////////////////////////////////////////////////////////////////////////////////

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";