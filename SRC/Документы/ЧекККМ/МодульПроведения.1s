////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// СписаниеОстатковТМЦ(ТаблНоменклатуры)
//
// Параметры:
//  ТаблНоменклатуры - таблица номенклатуры (должна содержать колонки 
//                     1) "Номенклатура"
//                     2) "Количество"
//                     3) "СуммаРуб"  (для розничного склада)
//                     4) "СкидкаРуб" (для розничного склада)
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проведение списания остатков ТМЦ со склада по регистру "ОстаткиТМЦ"
// без контроля остатков.
//
Процедура СписаниеОстатковТМЦ(ТаблНоменклатуры)
	
	РегОстатки = Регистр.ОстаткиТМЦ;
	
	ТаблНоменклатуры.ВыбратьСтроки();
	Пока ТаблНоменклатуры.ПолучитьСтроку()=1 Цикл                        
		
		ТекНоменклатура = ТаблНоменклатуры.Номенклатура;
		
		Если (ТекНоменклатура.ВидНоменклатуры 	= Перечисление.ВидыНоменклатуры.Услуга) или
			 (ТаблНоменклатуры.Количество 	= 0) Тогда
			Продолжить;
		КонецЕсли;     
		
		// Измерения
		РегОстатки.Фирма			= Фирма;
		РегОстатки.Склад			= Склад;
		РегОстатки.Номенклатура		= ТекНоменклатура;
		
		// Ресурсы
		РегОстатки.Количество		= ТаблНоменклатуры.Количество;
		РегОстатки.ЦенаПрод 		= ТаблНоменклатуры.ЦенаПрод;
		
		// Реквизиты
		РегОстатки.Внутреннее		= 0;
		
		РегОстатки.ДвижениеРасходВыполнить();
		
	КонецЦикла;
	
КонецПроцедуры // СписаниеОстатковТМЦ()

Функция Чек()
	
	Перем НомерЧека;
	
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
	СписокТоваров.НоваяКолонка("Цена"      , "Число");
	СписокТоваров.НоваяКолонка("Количество", "Число");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		СписокТоваров.НоваяСтрока();
		СписокТоваров.ТовНаим    = Номенклатура.Наименование;
		СписокТоваров.Цена       = Цена;
		СписокТоваров.Количество = Количество;
	КонецЦикла;
	
	ПризнВозврата = ?(ВидОперации = Перечисление.ВидыОперацийЧекККМ.Чек, 0, 1);
	ЧекПробитККМ  = глФРПечататьЧек(СписокТоваров, Итог("Сумма"), Получено, Скидка.Процент, ПризнВозврата, Склад.НомерСекции, НомерЧека);

	Если ЧекПробитККМ = 1 Тогда
		НомерЧекаККМ = НомерЧека;
		
		// Откроем денежный ящик, если он подключен
		глДПОткрытьДенежныйЯщик();
		
	КонецЕсли;
	
	Возврат ЧекПробитККМ;
	
КонецФункции // Чек()

//******************************************************************************
// ПроведениеПоРегистрам(ПараметрПроведения)
//
// Параметры:
//  ПараметрПроведения - строка - может принимать значение "НеКонтролироватьОстаткиТМЦ"
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета. В случае если ПараметрПроведения
// равен "НеКонтролироватьОстаткиТМЦ" документ проводится без контроля
// отрицательных остатков ТМЦ.
//
Процедура ПроведениеПоРегистрам(ПараметрПроведения)
	
	Перем ВремРегистры;
	Перем ВремОстаткиТМЦ, ВремРезервыТМЦ;                           
	Перем КодОперации;
	Перем ФирмаДляОстатковТМЦ;
	
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
   	
    ТаблицаУслуг 	    = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ   	    = глПодготовитьТаблицуДокумента(Контекст,1,ТаблицаУслуг);
	
	КодОперации 	    = глКО.РозничнаяПродажа;
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	СписокПараметров    = СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),	"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,				"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,				"Фирма");
	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,  "ФирмаДляОстатковТМЦ");
	СписокПараметров.ДобавитьЗначение(КодОперации,			"КодОперации");
	                                          
	Если ВидОперации = Перечисление.ВидыОперацийЧекККМ.Чек Тогда // продажа
		
		Если ПараметрПроведения = "НеКонтролироватьОстаткиТМЦ" Тогда
			СписаниеОстатковТМЦ(ТаблицаТМЦ);
		Иначе	
			ВремРегистры 	= СоздатьОбъект("Регистры");
			ВремОстаткиТМЦ  = ВремРегистры.ОстаткиТМЦ;
			ВремРезервыТМЦ  = ВремРегистры.РезервыТМЦ;
			
			глФильтрОстатковТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремОстаткиТМЦ,ВремРезервыТМЦ);
			
			Если ИтогиАктуальны()=0 Тогда
				ВремРегистры.Актуальность(1);
				ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
			КонецЕсли;
			
			// остатки ТМЦ
			Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаТМЦ,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
				Возврат;
			КонецЕсли;                                                         
		КонецЕсли;
		
	Иначе // чек на возврат
    	глПриходОстатковТМЦ	    (Контекст,ТаблицаТМЦ,СписокПараметров);
	КонецЕсли;
	
	// оприходуем деньги в кассу
	Регистр.Касса.Фирма			= Фирма;
	Регистр.Касса.Касса 		= Касса;
	Регистр.Касса.Валюта 		= Валюта;
		
	Регистр.Касса.СуммаВал 		= Итог("Сумма");
	Регистр.Касса.СуммаУпр 		= глПересчет(Итог("Сумма"),Валюта,Курс,глДоллары,ДатаДок);
	Регистр.Касса.СуммаРуб 		= глПересчет(Итог("Сумма"),Валюта,Курс,глРубли,  ДатаДок);
		
	Регистр.Касса.КодОперации 	= КодОперации;
		
	Если ВидОперации = Перечисление.ВидыОперацийЧекККМ.Чек Тогда // продажа
		Регистр.Касса.ДвижениеПриходВыполнить();
	Иначе     
		Регистр.Касса.ДвижениеРасходВыполнить();
	КонецЕсли;
		
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ПараметрПроведения)
	
	// ПараметрПроведения может принимать значение "НеКонтролироватьОстаткиТМЦ"
	// (например из обработки On_ams.ert - обработки обслуживания ККМ АМС-100Ф,
	//  подключенной в режиме On-Line). В этом случае при проведении текущего
	// документа не выподняется контроль отрицательных остатков ТМЦ.
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Касса")=0 Тогда 
		Возврат;
	КонецЕсли;              
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ПараметрПроведения) = 1) или
	     (Найти(ПараметрПроведения, "Регистр") <> 0) или
		 (ПараметрПроведения = "НеКонтролироватьОстаткиТМЦ") Тогда
		ПроведениеПоРегистрам(ПараметрПроведения);
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ПараметрПроведения);
	
	//******************************************************************************
 	// пробьем чек на ККМ
 	
 	Если Касса.РежимККМ = Перечисление.РежимыККМ.ФР Тогда
 		Если глФРВкл = 0 Тогда
 			глНеПроводить(Контекст, "ККМ в режиме фискального регистратора не подключена!");
 		Иначе
 			Если ЧекПробитККМ = 0 Тогда
 				ЧекПробитККМ = Чек();
 				Если ЧекПробитККМ = 0 Тогда
 					// по каким-то причинам Чек не пробит
 					глНеПроводить(Контекст, "Чек ККМ не пробит!");
 				КонецЕсли;
 			КонецЕсли;
 		КонецЕсли;
 	КонецЕсли;
	
КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
