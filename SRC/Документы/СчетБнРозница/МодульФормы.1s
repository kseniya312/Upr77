Перем ДанныеПоДолгам, ТекстКлиента;
Перем КлиентКредит;
Перем СтараяОплата, СтарыйКонтрагент, СтарыйКонтрагентЮЛ, СтарыйПроект;	//Работа с обновлением данных
Перем ТЗ_Долги;	//Тут развёрнутая информация по текущим долгам
Перем ТЗ_Проценты;	//Тут развёрнутая информация по текущим процентам
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем МожноВДолг;	//Признак продажи в долг
Перем текОстаток, Склад_Темп, рег1, ТЗ, СтараяНоменклатура;
Перем СписокДействий;
Перем __Автор;
Перем СписокДоступныхПроектов; //Список доступных для выбора проектов

Процедура ОбновиНадписи() Далее
Процедура ПриИзмененииЮЛ() Далее
//======================================================================   
    
Процедура УстановитьДоступностьФлагБонусы()
	Если Контрагент.Выбран() = 1 Тогда
		Если (Контрагент.флТолькоБонусы = 1) 
		и (сокрЛП(ИмяПользователя())<>"Филиппов")
		и (сокрЛП(ИмяПользователя())<>"Кожемякин") Тогда
			Форма.флНачислитьБонусы.Доступность(0);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

Процедура ПриИзмененииНачислитьБонусы()  
	Если ФиксСкидка <> 0 Тогда
		Если флНачислитьБонусы = 1 Тогда
			ФиксСкидка = ФиксСкидка * Константа.КоэффициентПереводаВБонусы;	
		Иначе         
			Если Константа.КоэффициентПереводаВБонусы <> 0 Тогда
				ФиксСкидка = ФиксСкидка / Константа.КоэффициентПереводаВБонусы;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура мУстановитьНовыйНомер()  
	Если ПустоеЗначение(Проект) = 0 Тогда
	    Если Проект.Код = "00029" Тогда
			УстановитьНовыйНомер("УСч"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов);	
		Иначе
			УстановитьНовыйНомер("Сч"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов);	
		КонецЕсли;	
	Иначе
		УстановитьНовыйНомер("Сч"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов);
	КонецЕсли;
КонецПроцедуры	

Процедура ОбновитьДанныеПоЗаявке()
	глОбновитьСчетПоДаннымЗаявки(Контекст);
КонецПроцедуры

Процедура ПриИзмененииТипЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		глПересчетТЧ_розница(Контекст, "ТипЦен");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ПриИзмененииТипЦены()

Процедура ОбновитьЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		глПересчетТЧ_розница(Контекст, "ТипЦен", ТекущаяДата());
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ОбновитьЦены()

Процедура ПриВыбореПроекта()
	//Если СписокДоступныхПроектов.НайтиЗначение(Проект) = 0 Тогда
	//	Если Вопрос("Для данного вида документа установлено ограничение выбираемых проектов." + РазделительСтрок +
	//				"Выбрать из списка разрешенных?", 4) = 7 Тогда
	//		Проект = "";
	//	Иначе
	//		Если СписокДоступныхПроектов.ВыбратьЗначение(Проект) = 0 Тогда
	//			Проект = "";
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;    
	Если СтарыйПроект <> Проект Тогда
		мУстановитьНовыйНомер();
		СтарыйПроект = Проект;
	КонецЕсли;	
КонецПроцедуры

//Принимает решение о возможности частичной оплаты клиентом
//плюс анализирует правильность внесённых данных
Процедура РассмотриВозможностьКредитов()

КонецПроцедуры 

//Валерий МЭТР: наценка
//Процедура РасчётНаценки()
//	             
//	//ДатаКон = ДатаДок;
//	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
//	
//	СЗ_Номенклатура = СоздатьОбъект("СписокЗначений");
//	ВыгрузитьТабличнуюЧасть(СЗ_Номенклатура,"Номенклатура");
//	
//	Запрос = СоздатьОбъект("Запрос");
//	ТекстЗапроса = 
//	"//{{ЗАПРОС(УстановитьЦеныУчета)
//	//|Период с ДатаНач по ДатаКон;
//	|Обрабатывать НеПомеченныеНаУдаление;
//	//|Без итогов;
//	|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
//	|Партия = Регистр.ПартииНаличие.Партия;
//	|Сумма = Регистр.ПартииНаличие.СуммаРуб;
//	|Количество = Регистр.ПартииНаличие.Количество;
//	|Функция КоличествоНаличие = КонОст(Количество);
//	|Функция СуммаНаличие = КонОст(Сумма);
//	|Группировка Партия Упорядочить по Партия.ПриходныйДокумент.ДатаДок;
//	|Условие(Номенклатура в СЗ_Номенклатура);
//	|";
//	
//	// Если ошибка в запросе, то выход из процедуры
//	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
//		Возврат;
//	КонецЕсли;
//	
//	Пока Запрос.Группировка("Партия",-1) = 1 Цикл
//			
//		ЦенаПрихода = 0;
//		Если (Запрос.Количество > 0) И (Запрос.Сумма > 0) Тогда
//			ЦенаПрихода = Запрос.Сумма / Запрос.Количество;
//		КонецЕсли;
//		//Наценка = Окр(ЦенаСоСкидкой - ЦенаПрихода,1);
//		//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,""));
//		Сообщить(Запрос.Номенклатура.Наименование+": "+Формат(ЦенаПрихода,""));		
//		
//	КонецЦикла;
//		
//КонецПроцедуры 

// МЭТР: наценка
Процедура РасчётНаценки()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		ВыбНоменклатура = Номенклатура;
		
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(УстановитьЦеныУчета)
		|Обрабатывать НеПомеченныеНаУдаление;
		|Номенклатура = Регистр.ПартииНаличие.Номенклатура;
		|Партия = Регистр.ПартииНаличие.Партия;
		|Сумма = Регистр.ПартииНаличие.СуммаРуб;
		|Количество = Регистр.ПартииНаличие.Количество;
		|Функция КоличествоНаличие = КонОст(Количество);
		|Функция СуммаНаличие = КонОст(Сумма);
		|Группировка Партия Упорядочить по Партия.ПриходныйДокумент.ДатаДок;
		|Условие(Номенклатура = ВыбНоменклатура);
		|Условие(Партия.ПриходныйДокумент.ДатаДок <= ДатаДок);
		|";
		
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Если Запрос.Группировка("Партия",1) = 1 Тогда
			
			ЦенаПрихода = ЦенаСоСкидкой;
			Если (Запрос.Количество > 0) И (Запрос.Сумма > 0) Тогда
				ЦенаПрихода = Запрос.Сумма / Запрос.Количество;
				КолвоНаценка = КолвоНаценка + 1;
			КонецЕсли;
			Если ЦенаПрихода > 0 Тогда
				ЦенаПродажи = ЦенаСоСкидкой;
			    Базовая = ЦенаПрихода; 
			    X = (ЦенаПродажи*100)/Базовая;
			    Процент = ((X/100)-1)*100;
				Наценка = Процент;
			Иначе
				Наценка = 0;
			КонецЕсли;
			
			СуммаНаценка = СуммаНаценка + Наценка;			
			//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
			Сообщить(НОменклатура.Наименование + " цена пр. " + ЦенаПрихода + "цена " + ЦенаСоСкидкой + " " +Формат(Запрос.Партия.ПриходныйДокумент,""));
			
		КонецЕсли;  		
		
	КонецЦикла;
	Сообщить("Наценка " + СуммаНаценка);            
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры

Процедура РасчётНаценкиПоПоследнейЗакупке()
	             
	//ДатаКон = ДатаДок;
	//ДатаНач = ДобавитьМесяц(ДатаКон,-12);
	
	СуммаНаценка = 0;
	КолвоНаценка = 0;
	
	ВыбратьСтроки();
	
	Пока ПолучитьСтроку() = 1 Цикл 
		
		__Ном = Номенклатура;
		
		НомСтроки = НомСтроки + 1;
		             
		__Ном.ИспользоватьДату(ДатаДок);
		
		Валюта1 = Валюта;
		Курс1	= Курс; 

		Валюта2 = Константа.ВалютаУпрУчета;
		Валюта2.ИспользоватьДату(ДатаДок);
		Курс2	= Валюта2.Курс; 
		
		ЦенаЗакупки = 	глПересчет (__Ном.ПоследняяЦенаПрихода,Валюта2,Курс2,Валюта1,Курс1);
		
		ЦенаРозничная = ?(ЦенаСоСкидкой = 0, Цена, ЦенаСоСкидкой);
		       
		НаценкаРасч 	= ЦенаРозничная - ЦенаЗакупки;       
		Наценка 		= НаценкаРасч / (ЦенаРозничная-НаценкаРасч)*100;
		
		КолвоНаценка = КолвоНаценка + 1;
		
		СуммаНаценка = СуммаНаценка + Наценка;			
		//Сообщить(ВыбНоменклатура.Наименование+": "+Формат(Наценка,"")+" ("+Формат(Запрос.Партия.ПриходныйДокумент,"")+")");
		Сообщить(Номенклатура.Наименование + " цена пр. " + ЦенаЗакупки + " цена " + ЦенаРозничная);
		КонецЦикла;
	Сообщить("Наценка " + СуммаНаценка);            
	Если КолвоНаценка > 0 Тогда
		СрНаценка = СуммаНаценка / КолвоНаценка;
	Иначе
		СрНаценка = 0;
	КонецЕсли;
		
КонецПроцедуры
//Производит пересчёт скидок в текущем документе
//	в соответствии с параметрами заданными в карточке клиента
//	режим = 1 - пересчитать ТЧ
//	режим = 0 - ничего не пересчитывать, а только обновить форму
Процедура РасчётСкидки(режим)
	Если ПустоеЗначение(Контрагент)=0 Тогда
		
		//++Валерий МЭТР: повышение
		СкидкаКонтрагента = Контрагент.Скидка_Розница.Получить(ДатаДок);
		//Если Повышение = 1 Тогда
		//	ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
		//	СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
		//КонецЕсли;
		//--Валерий МЭТР: повышение
		
		Если Режим = 1 Тогда	//полный пересчёт 
			
			Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 Тогда				
				//++Валерий МЭТР: механизм деления скидки
				ВыданоСоСкидкой	= 1;
				Скидка = СкидкаКонтрагента;
				//--Валерий МЭТР: механизм деления скидки
			КонецЕсли;
			
			//++Валерий МЭТР: механизм деления скидки
			Если Скидка > 0 Тогда
				ВыданоСоСкидкой = 1;
			ИначеЕсли Контрагент.СкидкаСразу.Получить(ДатаДок) = 0 Тогда
				ВыданоСоСкидкой = 0;
			КонецЕсли;             
			//--Валерий МЭТР: механизм деления скидки
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Скидка = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//Если Скидка > СкидкаКонтрагента Тогда
				//	Скидка = СкидкаКонтрагента;
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";				
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
					Форма.ВыданоСоСкидкой.Доступность(0);
				Иначе
					Форма.ВыданоСоСкидкой.Доступность(1);
				КонецЕсли;
				глПересчитатьСкидкиРозница(Контекст);
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0% -=Допустима скидка: "+Контрагент.Скидка_Розница.Получить(ДатаДок)+"%=-";
				//Скидка			= 0;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				глПересчитатьСкидкиРозница(Контекст);
			КонецЕсли;
			
		ИначеЕсли Режим <> 1 Тогда	//Иногда надо просто обновить экранные данные, без пересчёта таблицы 
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Если СкидкаСразу > Контрагент.Скидка_Розница.Получить(ДатаДок) Тогда
				//	СкидкаСразу = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				//_Скидка			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок)=1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
				КонецЕсли;
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0%"+" -=Допустима скидка: "+Скидка+"%=-";
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
КонецПроцедуры

//Проверка на наличие долгов клиента и наличие процентов для выплаты
Процедура ПроверкаКредитов(режим)
	Перем Запрос, ТекстЗапроса,а;
	Запрос 	= СоздатьОбъект("Запрос");
	Состояние("Расчёт таблицы текущих долгов...");
	если режим=1 тогда	//Мы просто рассчитаем сумму без доп. аналитики
	ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
	ДанныеПоДолгам	= "Долги: ";
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиСводная)
		|Без итогов;
		|Клиент 				= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
		|СуммаРуб 				= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
		КонецЕсли;
	ИначеЕсли режим=2 Тогда	//Надо вывести информацию в виде таблицы
	ДанныеПоДолгам	= "Долги: ";
		ВЗ		= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеДолгиТаблица)
		|Без итогов;
		|Клиент 				= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 		= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин				= Регистр.Покупатели_розница.Магазин;
		|КредДокумент			= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 				= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим долгам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				ТЗ_Долги.СуммаРубКонОст=(-1)*ТЗ_Долги.СуммаРубКонОст;
				Таб.ВывестиСекцию("Строка_1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("ДанныеПоДолгам","");
		КонецЕсли;
	ИначеЕсли режим=3 Тогда	//Надо вывести информацию о бонусах в виде таблицы
		//ВвестиЧисло(а,"Пароль",6,0,30);
		//Если а<>281280 Тогда
		//    возврат;
		//КонецЕсли;
		ВЗ		= Перечисление.ВидВзаимодействия.Проценты;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеБонусы)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих бонусах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
			Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим бонусам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				Таб.ВывестиСекцию("Строка_1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("Данные по бонусам","");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


//Производит пересчёт всех необходимых данных
Процедура ОбновиНадписи()
	РассмотриВозможностьКредитов();	
	РасчётСкидки(0);
КонецПроцедуры

//Восстановим все параметры по умолчанию, а потом уже 
//решим чего надо закрыть, а чего оставить у данного клиента
Процедура ИзменениеКлиента()
	Если Контрагент = СтарыйКонтрагент Тогда
		РасчётСкидки(0);
		возврат;
	КонецЕсли;   
	
	ТекстСообщения = "";
	
	//глПроверитьКонтрагентаВЦепочке(Контекст, Контрагент, ТекстСообщения);
	//
	//Если СтрДлина(ТекстСообщения) <> 0 Тогда
	//	ТекстСообщения = "Изменение не возможно!"+РазделительСтрок+"Есть документы с другим контрагентом!"+РазделительСтрок+ТекстСообщения;
	//	Предупреждение(ТекстСообщения); 
	//	Контрагент = СтарыйКонтрагент;
	//	Возврат;
	//КонецЕсли;	
	
	Если Контрагент.РозничныйКлиент<>1 Тогда
		Сообщить("Клиент ("+Контрагент+") не является розничным покупателем - его нельзя добавлять в этот документ!","!");
		Контрагент = СтарыйКонтрагент;
	КонецЕсли;
	Договор	= Контрагент.ОсновнойДоговор;
	ВыданоСоСкидкой	= 0;
	Форма.ВыданоСоСкидкой.Доступность(1);
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	СтарыйКонтрагент= Контрагент;   
	
	//++Ерошенко 03.05.2007
	ПроверитьКонтрагентаВДокументе(Контрагент); 
	//--Ерошенко
	УстановитьДоступностьФлагБонусы();
КонецПроцедуры

//-----------------------------------------------      
Функция СуммаПрописьюРасхНакл()
	Перем ПолнаяСумма;
	
	ПолнаяСумма = Итог("Сумма");
    ВалютаПечати=Валюта;
	Если ФС.СуществуетФайл(КаталогИБ()+ВалютаПечати.ИмяФайлаПрописи)=1 Тогда
		Пропись(ВалютаПечати.ИмяФайлаПрописи);
	КонецЕсли;
	СтрокаСуммы=Формат(ПолнаяСумма,"ЧПДС");
	Пропись("");
	Возврат СтрокаСуммы;
КонецФункции

Процедура ПечатьТовЧек(вар, СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	
	ИсхТабл = СоздатьОбъект("Таблица");	
	
	//++Валерий МЭТР: для нового юр. лица "ИС"
	ВыбЮЛ = "ИнжСантехника";
	//НазваниеПроектаИС = СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));     
    //Если Лев(Проект.Наименование, СтрДлина(НазваниеПроектаИС)) = НазваниеПроектаИС Тогда
	//	ВыбЮЛ = "ИС";
	//КонецЕсли;
	//Ответ = Вопрос("Печать ""Бизнес-Сервис""(Да) или ""Инженерные системы""(Нет)?",3);
	//ВыбЮЛ = "БС";
	НазваниеПроектаИС 				= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИС"));
	НазваниеПроектаЭксперт 			= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаЭксперт"));
	НазваниеПроектаИнжСантехника 	= СокрЛП(Константа.ПолучитьАтрибут("НазваниеПроектаИнженернаяСантехника"));
	НазваниеПроектаФорсаж			= "Безнал ОП Кредит";
	
	Если Найти(Проект.Наименование, СокрЛП(НазваниеПроектаФорсаж)) > 0 Тогда
		ВыбЮЛ = "Форсаж";
	ИначеЕсли (Найти(Проект.Наименование, СокрЛП(НазваниеПроектаЭксперт)) > 0)
		или (Проект.Код = "00013")
		или (Проект.Код = "00029") Тогда
		ВыбЮЛ = "Эксп";
		Если Найти(Проект.Наименование, "без НДС") > 0 Тогда 
			Эксперт = 1;    
		ИначеЕсли (Проект.Код = "00024") Тогда
			Эксперт = 0;
		ИначеЕсли (Проект.Код = "00025") Тогда
			Эксперт = 1;	
		ИначеЕсли Найти(Проект.Наименование, "юр.л.") > 0 Тогда  
			Эксперт = 0;
		Иначе	
			Эксперт = 1;   
		КонецЕсли;
	ИначеЕсли Найти(Проект.Наименование, СокрЛП(НазваниеПроектаИС)) > 0 Тогда
		ВыбЮЛ = "ИС";
	//ИначеЕсли Найти(Докум.Проект.Наименование, СокрЛП(НазваниеПроектаИнжСантехника)) > 0 Тогда	
	ИначеЕсли (Проект.Код = "00006")
    	или (Проект.Код = "00020")
		или (Проект.Код = "00015") Тогда
		ВыбЮЛ = "ИнжСантехника";
	ИначеЕсли (Проект.Код = "00009")
		или (Проект.Код = "00012") Тогда
		ВыбЮЛ = "Паритет";
	ИначеЕсли (Проект.Код = "00030")
		или (Проект.Код = "00031")
		или (Проект.Код = "00033")Тогда
		ВыбЮЛ = "Эталон";	
	Иначе	
		ВыбЮЛ = "Форсаж";
	КонецЕсли;
	
	Если вар=1 Тогда
		Если ВыбЮЛ = "ИС" Тогда
			ИсхТабл.ИсходнаяТаблица("СчетИС");
		ИначеЕсли ВыбЮЛ = "ИнжСантехника" Тогда
			ИсхТабл.ИсходнаяТаблица("СчетИнжСантех");
		ИначеЕсли ВыбЮЛ = "Эталон" Тогда
			ИсхТабл.ИсходнаяТаблица("СчетЭталон");	
		ИначеЕсли ВыбЮЛ = "Паритет" Тогда
			ИсхТабл.ИсходнаяТаблица("СчетПаритет");	 
		ИначеЕсли ВыбЮЛ = "Форсаж" Тогда 
			ИсхТабл.ИсходнаяТаблица("СчетФорсаж");
		ИначеЕсли ВыбЮЛ = "Эксп" Тогда 
			ИсхТабл.ИсходнаяТаблица("СчетЭксперт");	
		Иначе
			ИсхТабл.ИсходнаяТаблица("Счет1");
		КонецЕсли;		
	Иначе 
		Если ВыбЮЛ = "Паритет" Тогда
			ИсхТабл.ИсходнаяТаблица("СчетБанер");
		Иначе	
			ИсхТабл.ИсходнаяТаблица("Счет1");
		КонецЕсли;	
	КонецЕсли;
	
	ПечФирма = ""; Банк = ""; Счет = ""; БИК = ""; СчетБанка = "";
		
	Если ВыбЮЛ = "ИнжСантехника" Тогда
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Параметры);
		
		ПечФирма = Параметры.Получить("ПолноеНаименованиеФирмы");
		Банк = Параметры.Получить("Банк");
		Счет = Параметры.Получить("РасчСчет");
	    БИК	= Параметры.Получить("БИК");
		СчетБанка = Параметры.Получить("КоррСчет");
		
		Поставщик = "ИНН " + Параметры.Получить("ИНН") + "/" + Параметры.Получить("КПП") + " " + 
							СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы")) + " " +
							СокрЛП(Параметры.Получить("ПредставлениеЮрАдресаФирмы"));
	Иначе                                        
		Параметры = СоздатьОбъект("СписокЗначений");
		глРеквизитыФирмы(ВыбЮЛ,Параметры);
		
		ПечФирма = Параметры.Получить("ПолноеНаименованиеФирмы");
		Банк = Параметры.Получить("Банк");
		Счет = Параметры.Получить("РасчСчет");
	    БИК	= Параметры.Получить("БИК");
		СчетБанка = Параметры.Получить("КоррСчет");
		
		Поставщик = "ИНН " + Параметры.Получить("ИНН") + "/" + Параметры.Получить("КПП") + " " + 
							СокрЛП(Параметры.Получить("ПолноеНаименованиеФирмы")) + " " +
							СокрЛП(Параметры.Получить("ПредставлениеЮрАдресаФирмы"));
	КонецЕсли;
	//++Валерий МЭТР: для нового юр. лица "ИС"					
					
	Если ПустоеЗначение(КонтрагентЮЛ) = 0 Тогда
		Покупатель = СокрЛП(КонтрагентЮЛ.ЮрФизЛицо.ПолнНаименование);
		Если ПустоеЗначение(КонтрагентЮЛ.ЮрФизЛицо.ИНН) = 0 Тогда
		    Покупатель = "ИНН " + СокрЛП(КонтрагентЮЛ.ЮрФизЛицо.ИНН) + " " + Покупатель;
		КонецЕсли;
	Иначе
		Покупатель = "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Шапка");

	НомСтроки = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
	// секция ИтогоНДС
	Если УчитыватьНДС = 1 Тогда
		СуммаНДСИтог = Итог("СуммаНДС");
		Если СуммаВклНДС = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНДСИтог;
		КонецЕсли;
	КонецЕсли;                        
	
	Если (ВыбЮЛ = "Эксп") и ((Найти(Проект.Наименование, "физ.") > 0) или (Эксперт = 1)) Тогда	
	    СуммаНДСИтог = 0;
	КонецЕсли;
		
	ИсхТабл.вывестиСекцию("Подвал");
	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);
		ИсхТабл.ТолькоПросмотр(1);
		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьТовЧек(1);
	ИначеЕсли НомерТекущейФормы = 2 Тогда
		ПечатьТовЧек(2);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Функция ВыборПродавца()
	
	СписокПродавцов	= "";	
	СписокПродавцов = СоздатьОбъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.Родитель.Наименование = "Продавцы" тогда
			Если Спр.ОсновнойСклад = глПользователь.ОсновнойСклад тогда
			 	СписокПродавцов.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;		 	
		КонецЕсли;	
	КонецЦикла;	
	__Автор = Автор;        
	Если СписокПродавцов.ВыбратьЗначение(__Автор,"Автор документа") = 1 тогда
		Возврат __Автор;
	иначе 
		Возврат "";
	КонецЕсли;
КонецФункции


//******************************************************************************
//		ШТАТНЫЕ ПРОЦЕДУРЫ

Процедура ВводНового(Скопирован)
	
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	Валюта	= глРубли;
	Курс	= глКурсДляВалюты(Валюта,ДатаДок);
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	мУстановитьНовыйНомер(); 
//******************************************************************************
	//Дополнения для продавцов
	Если НазваниеНабораПрав() = "Продавец_розница" тогда
		Форма.Склад.Доступность(0);
		Форма.ТипЦен.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.НомерДок.Доступность(0);
		Форма.ЦенаСоСкидкой.Доступность(0);
		Форма.Сумма.Доступность(0);
		Форма.Единица.Доступность(0);
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
		         
		
		
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;  
	
	Если (НазваниеНабораПрав() = "Продавец_розница") 
		или (НазваниеНабораПрав() = "Администратор_магазина1")  тогда
		Проект = Константа.ПроектБезналПоУмолчанию;
	КонецЕсли;	
	
	флНачислитьБонусы = 1;
КонецПроцедуры

Процедура ПриОткрытии()
	
	если глПроверкаПравДоступа(Контекст)=0 Тогда
		Предупреждение("У вас нет прав на доступ к данному документу!",30);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	ПриЗаписиПерепроводить(1); 	
	Форма.Номенклатура.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ЦенаСоСкидкой.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Оплачено.ВыполнятьФормулуТолькоПриИзменении(1);
	ПроверкаКредитов(1);
	если ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда
		ВремЗалог=ДокОснование.Оплачено;
		Если ВремЗалог<>Залог тогда
			Залог=ВремЗалог;
		КонецЕсли;
	КонецЕсли;
	РасчётСкидки(0);
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	//проставим права продавцов
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Форма.НомерДок.Доступность(0);
	    Форма.Склад.Доступность(0);
	    Форма.ДатаДок.Доступность(0);
	    Форма.ТипЦен.Доступность(0);
	    Форма.Единица.Доступность(0);
	    Форма.ЦенаСоСкидкой.Доступность(0);
	    Форма.Сумма.Доступность(0);
		Форма.КонтрагентЮЛ.Доступность(0);
		Форма.ДоговорЮЛ.Доступность(0);
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
	    Форма.кнОснование.Доступность(0);
	    Форма.кнХОснование.Доступность(0);
	КонецЕсли;
	             
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);
	
	СтарыйКонтрагент= Контрагент; 
	СтарыйКонтрагентЮЛ = КонтрагентЮЛ; 
	СтарыйПроект = Проект;  
	
	Если (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.ПровестиПереносОплаты.Видимость(1);
	КонецЕсли;   
	
	УстановитьДоступностьФлагБонусы();
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
КонецПроцедуры    
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		//ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	ВыбратьСтроки();
	
	Пока получитьСтроку()=1 Цикл
	    глПересчетТЧ_розница(Контекст,"Количество");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);

КонецПроцедуры // ПоКнопкеПодбор()

Процедура ПриЗаписи() 
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	АвтоВремяНачалоДня();
	проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
	ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.СчетНаБНРозница)+сокрЛП(склад);
	Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
	    ЭтоРозница=проба.ТекущийЭлемент();
	Иначе
		проба.новый();
		проба.наименование=ЭР;
		проба.записать();
		ЭтоРозница=проба.ТекущийЭлемент();
	КонецЕсли;
	
	//Если ПустоеЗначение(АналитикаСчетБезналПроценты) = 1 Тогда
		АналитикаСчетБезналПроценты = глПолучитьАналитику(Контекст);
	//КонецЕсли;	        
	
	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;   
	
	ПриЗаписиДокумента(Контекст);   
	
	
КонецПроцедуры

Процедура ВводНаОсновании(ДокумОснование)
	Если ДокумОснование.Вид() = "ЗаявкаПокупателя" Тогда
		ДокОснование	= ДокумОснование;
		Фирма			= ДокОснование.Фирма;
		ЮрЛицо			= ДокОснование.ЮрЛицо;
		Автор			= глПользователь; 
		АвторЗаявки		= ДокОснование.Автор;
		КодОперации		= глКО.Продажа;
		Контрагент 		= ДокОснование.Контрагент;
		Склад			= ДокОснование.Склад;
		Договор			= ДокОснование.Договор;
		Валюта			= ДокОснование.Валюта;
		Курс			= ДокОснование.Курс;
		Проект			= ДокОснование.Проект;
		УчитыватьНДС	= ДокОснование.УчитыватьНДС;
		СуммаВклНДС		= ДокОснование.СуммаВклНДС;
		УчитыватьНП		= ДокОснование.УчитыватьНП;
		СуммаВклНП		= ДокОснование.СуммаВклНП;
		ТипЦен			= ДокОснование.ТипЦен;
		Скидка			= ДокОснование.Скидка;  
		флНачислитьБонусы = ДокОснование.флНачислитьБонусы;
		//ВыданоСоСкидкой = ДокОснование.ВыданоСоСкидкой;
		Объект			= ДокОснование.Объект;
		//Оплачено		= ДокОснование.Оплачено;
		мУстановитьНовыйНомер(); 
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура 	= ДокОснование.Номенклатура;
			Количество 		= ДокОснование.Количество;
			Единица			= ДокОснование.Единица;
			Коэффициент		= ДокОснование.Коэффициент;
			Цена 			= ДокОснование.Цена;
			//ЦенаСоСкидкой	= ДокОснование.ЦенаСоСкидкой;
			Сумма			= ДокОснование.Сумма;
			СтавкаНДС		= ДокОснование.СтавкаНДС;
			СуммаНДС		= ДокОснование.СуммаНДС;
			СтавкаНП		= ДокОснование.СтавкаНП;
			СуммаНП			= ДокОснование.СуммаНП;
			СуммаСкидки		= ДокОснование.СуммаСкидки;
			СуммаБезСкидки	= ДокОснование.СуммаБезСкидки;
			//СуммаНДСбезСкидки = ДокОснование.СуммаНДСбезСкидки;
		КонецЦикла;
	ИначеЕсли ДокумОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда 
		Если глУЗаявкиЕстьСчет(ДокумОснование) = 1 Тогда
			Предупреждение("У заявки клиента уже есть счет безнал. Запрещено вводить два счета на основании одной заявки.",100);
			СтатусВозврата(0);
			Возврат;	
		КонецЕсли;	
		
		ДокОснование	= ДокумОснование;
		Фирма			= ДокОснование.Фирма;
		ЮрЛицо			= ДокОснование.ЮрЛицо;
		Автор			= глПользователь;
		КодОперации		= глКО.Продажа;
		Контрагент 		= ДокОснование.Контрагент; 
		Проект			= ДокОснование.Проект;
		Склад			= ДокОснование.Склад;
		Договор			= ДокОснование.Договор;
		Валюта			= ДокОснование.Валюта;
		Курс			= ДокОснование.Курс;
		УчитыватьНДС	= ДокОснование.УчитыватьНДС;
		СуммаВклНДС		= ДокОснование.СуммаВклНДС;
		УчитыватьНП		= ДокОснование.УчитыватьНП;
		СуммаВклНП		= ДокОснование.СуммаВклНП;
		ТипЦен			= ДокОснование.ТипЦен;
		Скидка			= ДокОснование.Скидка;
		ВыданоСоСкидкой = ДокОснование.ВыданоСоСкидкой;
		Объект			= ДокОснование.Объект;
		Оплачено		= ДокОснование.Оплачено;
		мУстановитьНовыйНомер();
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			Номенклатура 	= ДокОснование.Номенклатура;
			Количество 		= ДокОснование.Количество;
			Единица			= ДокОснование.Единица;
			Коэффициент		= ДокОснование.Коэффициент;
			Цена 			= ДокОснование.Цена;
			ЦенаСоСкидкой	= ДокОснование.ЦенаСоСкидкой;
			Сумма			= ДокОснование.Сумма;
			СтавкаНДС		= ДокОснование.СтавкаНДС;
			СуммаНДС		= ДокОснование.СуммаНДС;
			СтавкаНП		= ДокОснование.СтавкаНП;
			СуммаНП			= ДокОснование.СуммаНП;
			СуммаСкидки		= ДокОснование.СуммаСкидки;
			СуммаБезСкидки	= ДокОснование.СуммаБезСкидки;
			СуммаНДСбезСкидки = ДокОснование.СуммаНДСбезСкидки;
		КонецЦикла;
	КонецЕсли; 
	
	КонтрагентЮЛ	= ДокОснование.КонтрагентЮЛ;
	ПриИзмененииЮЛ();
	
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	
	////Если ДокумОснование.Вид() = "СчетБнРозница" Тогда
	////	ДокОснование	= ДокумОснование;
	////	Фирма			= ДокОснование.Фирма;
	////	ЮрЛицо			= ДокОснование.ЮрЛицо;
	////	Автор			= глПользователь;
	////	КодОперации		= глКО.Продажа;
	////	Контрагент 		= ДокОснование.Контрагент;
	////	Склад			= ДокОснование.Склад;
	////	Договор			= ДокОснование.Договор;
	////	Валюта			= ДокОснование.Валюта;
	////	Курс			= ДокОснование.Курс;
	////	УчитыватьНДС	= ДокОснование.УчитыватьНДС;
	////	СуммаВклНДС		= ДокОснование.СуммаВклНДС;
	////	УчитыватьНП		= ДокОснование.УчитыватьНП;
	////	СуммаВклНП		= ДокОснование.СуммаВклНП;
	////	ТипЦен			= ДокОснование.ТипЦен;
	////	Скидка			= ДокОснование.Скидка;
	////	ВыданоСоСкидкой = ДокОснование.ВыданоСоСкидкой;
	////	Объект			= ДокОснование.Объект;
	////	Оплачено		= ДокОснование.Оплачено;
	////	УстановитьНовыйНомер("Сч"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
	////	ДокОснование.ВыбратьСтроки();
	////	Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
	////		НоваяСтрока();
	////		Номенклатура 	= ДокОснование.Номенклатура;
	////		Количество 		= ДокОснование.Количество;
	////		Единица			= ДокОснование.Единица;
	////		Коэффициент		= ДокОснование.Коэффициент;
	////		Цена 			= ДокОснование.Цена;
	////		ЦенаСоСкидкой	= ДокОснование.ЦенаСоСкидкой;
	////		Сумма			= ДокОснование.Сумма;
	////		СтавкаНДС		= ДокОснование.СтавкаНДС;
	////		СуммаНДС		= ДокОснование.СуммаНДС;
	////		СтавкаНП		= ДокОснование.СтавкаНП;
	////		СуммаНП			= ДокОснование.СуммаНП;
	////		СуммаСкидки		= ДокОснование.СуммаСкидки;
	////		СуммаБезСкидки	= ДокОснование.СуммаБезСкидки;
	////		СуммаНДСбезСкидки = ДокОснование.СуммаНДСбезСкидки;
	////	КонецЦикла;
	////КонецЕсли;
	////РасчётСкидки(1);
	////ПроверкаКредитов(1);
	//////******************************************************************************
	//////Дополнения для продавцов
	////Если НазваниеНабораПрав() = "Продавец_розница" тогда
	////	Форма.Склад.Доступность(0);
	////	Форма.ТипЦен.Доступность(0);
	////	Форма.ДатаДок.Доступность(0);
	////	Форма.НомерДок.Доступность(0);
	////	Форма.ЦенаСоСкидкой.Доступность(0);
	////	Форма.Сумма.Доступность(0);
	////	Форма.Единица.Доступность(0);
	////	Если МожноВДолг=1 Тогда
	////		Форма.Оплачено.Доступность(1);
	////	Иначе
	////		//Форма.Оплачено.Доступность(0);
	////	КонецЕсли;
	////	
	////	_Автор = ВыборПродавца();
	////	Если ПустоеЗначение(_Автор) = 0 тогда
	////		Автор  = _Автор;
	////	иначе 
	////		Предупреждение("Продавец не выбран !
	////		|Документ не может быть введен!", 5);
	////		СтатусВозврата(0); Возврат;
	////	КонецЕсли;	
	////КонецЕсли;
	////
	////Форма.Обновить();
	//Предупреждение("Нельзя вводить данный документ на основании!",100);
	//СтатусВозврата(0);
	//Возврат;
КонецПроцедуры

Процедура ПриВыбореЗначения(Об)
	Если Об="кнВводНаОсновании" Тогда 
		глВыписатьПодчиненныйДокумент(Контекст);
	КонецЕсли;	
КонецПроцедуры

Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
КонецПроцедуры //ПоКнопкеОснование()

//Обрабатываем данные с ридера
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные);
	//Scaner.EventNumber=Число(Данные);
	//Карта=Scaner.ScanData;	//Данные со штрихкода
	//Scaner.DeleteEvent();
	//Scaner.DataEventEnabled = 1;
	//
	//Если ПустоеЗначение(Карта)=0 тогда
	//	//Если первые 2 символа "00" тогда - это контрагент 
	//	Если (лев(карта,2)="00") или (сокрЛП(карта)="29051980") тогда	//29051980 Для ЧЛ со скидкой, т.к. Корыхалов!!! забыл его проставить по основной схеме.
	//		Контр=СоздатьОбъект("Справочник.Контрагенты");
	//		если Контр.ВыбратьЭлементыПоРеквизиту("ШтрихКарта", сокрЛП(карта), 0)=1 тогда
	//			контр.ПолучитьЭлемент();
	//			Если Контр.ТекущийЭлемент()=Контрагент Тогда	//всё ОК, возможна работа в кредит
	//				Форма.Оплачено.Доступность(1);
	//				сообщить("Теперь возможна продажа в кредит");
	//				МожноВДолг=1;
	//				РасчётСкидки(1);
	//				ОбновиНадписи();
	//			Иначе
	//				Форма.Оплачено.Доступность(1);
	//				Контрагент	= Контр.ТекущийЭлемент();
	//				МожноВДолг=1;
	//				РасчётСкидки(1);
	//				ОбновиНадписи();
	//			КонецЕсли;
	//		иначе
	//			сообщить("Не смогли найти соответствие для клиента, ЗВОНИТЕ В ОФИС!");
	//			возврат;
	//		КонецЕсли;
	//	конецЕсли;
	//КонецЕсли;
КонецПроцедуры


//Будем искать по ИНН в ЮрЛицах и ФизЛицах - если найдено, то подставляем владельца (контрагент)
//иначе позволяем заполнить данными, которые потом будут проверены менеджерами руководства (нашим толстопузом).
Процедура ВыбЮрЛицо()
	инн	= 0;
	если ВвестиЧисло(инн,"Введите ИНН юр.лица...",12,0,100)=1 тогда
		если СтрДлина(инн)=10 Тогда	//ищем в юр лицах
			спрЮЛ	= СоздатьОбъект("Справочник.ЮрЛица");
			если спрЮЛ.выбратьЭлементыПоРеквизиту("ИНН",инн,0,0)=1 Тогда
				спрЮЛ.получитьЭлемент();
				спр=СоздатьОбъект("Справочник.Контрагенты");
				спр.выбратьЭлементыПоРеквизиту("ЮрФизЛицо",спрЮЛ.текущийЭлемент(),0,0);
				спр.получитьЭлемент();
				КонтрагентЮЛ	= спр.ТекущийЭлемент();
				ДоговорЮЛ		= КонтрагентЮЛ.ОсновнойДоговор;
				
			Иначе
				Сообщить("Нет такого ИНН...");
				КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
				Возврат;
			КонецЕсли;
		ИначеЕсли СтрДлина(инн)=12 Тогда	//ищем в ФизЛицах
			спрФЛ	= СоздатьОбъект("Справочник.ФизЛица");
			попытка
				если спрЮЛ.выбратьЭлементыПоРеквизиту("ИНН",инн,0,0)=1 Тогда
					спрФЛ.получитьЭлемент();
					спр	= СоздатьОбъект("Справочник.Контрагенты");
					спр.выбратьЭлементыПоРеквизиту("ЮрФизЛицо",спрФЛ.текущийЭлемент(),0,0);
					спр.получитьЭлемент();
					КонтрагентЮЛ	= спр.ТекущийЭлемент();
				Иначе
					Сообщить("Нет такого ИНН...");
					КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
					Возврат;
				КонецЕсли;
			Исключение
				ОчиститьОкноСообщений();
				Сообщить("Внимание! Вы у ИП указали тип контрагента стороннее юрлицо. 
				|	Перезвоните в бухгалтерию по вопросу внесения изменений в данные или проверьте правильность ввода ИНН","!");	
			КонецПопытки;
		Иначе
			Сообщить("Внимание! Введенный ИНН имеет неверную длину... Повторите ввод ИНН!","!!!");
			КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ИзменениеКонтрагента()
	
	
	если ПустоеЗначение(КонтрагентЮЛ)=0 Тогда	//можно открыть для изменения уже готового клиента
		спр=СоздатьОбъект("Справочник.Контрагенты");
		спр.найтиЭлемент(КонтрагентЮЛ);
		ОткрытьФорму(спр.текущийЭлемент());
	Иначе
		
		
	КонецЕсли;
КонецПроцедуры


//Проверяет все подчинённые документы и меняет реквизиты шапка "КонтрагентЮЛ" и "ДоговорЮЛ" на текущие
Процедура ПриИзмененииЮЛ()
	если Выбран()=1 Тогда	//имеет право на жизнь, только для записанного документа
		Если СтарыйКонтрагентЮЛ <> КонтрагентЮЛ Тогда
			ТекстСообщения = "";
			глПроверитьКонтрагентаВЦепочке(ТекущийДокумент(), КонтрагентЮЛ, ТекстСообщения);
			
			Если СтрДлина(ТекстСообщения) <> 0 Тогда
				ТекстСообщения = "Нужно внести изменения в другие документы!"+РазделительСтрок+"Есть документы с другим контрагентом!"+РазделительСтрок+ТекстСообщения;
				Предупреждение(ТекстСообщения); 
				//КонтрагентЮЛ = СтарыйКонтрагентЮЛ;
				//Возврат;
			КонецЕсли;
		    СтарыйКонтрагентЮЛ = КонтрагентЮЛ;
		КонецЕсли;
		
		
		//Сначала проверим - банально есть-ли договорЮЛ
		если ПустоеЗначение(ДоговорЮЛ)=1 Тогда
			ДоговорЮЛ	= КонтрагентЮЛ.ОсновнойДоговор;
		КонецЕсли;
		
		если ПустоеЗначение(ДоговорЮЛ)=0 Тогда
			Если ДоговорЮЛ.Владелец<>КонтрагентЮЛ Тогда	//это тоже косяк и его надо править!
				ДоговорЮЛ	= КонтрагентЮЛ.ОсновнойДоговор;
			КонецЕсли;
		КонецЕсли;
		
		док	= СоздатьОбъект("Документ");
		док.выбратьПодчиненныеДокументы(,,ТекущийДокумент());
		ОчиститьОкноСообщений();
		пока док.ПолучитьДокумент()=1 Цикл
			если док.Вид()="РасходнаяНакладнаяРозницаБезнал" Тогда	//тут надо менять, во всех остальных просто предупредить
				Попытка
					НачатьТранзакцию();		//нам нужна целостность
					если док.КонтрагентЮЛ<>КонтрагентЮЛ Тогда
						док.КонтрагентЮЛ	= КонтрагентЮЛ;
						док.ДоговорЮЛ		= ДоговорЮЛ;
						Сообщить("В документе: "+док.ТекущийДокумент()+" изменено ЮрЛицо");
						Док.Записать();
					КонецЕсли;
					Если док.Проведен()=1 Тогда
						док.Провести();
					КонецЕсли;
					
					//могут быть подчинённые документы и про них тоже надо сообщить!
					док2=СоздатьОбъект("Документ");
					док2.ВыбратьПодчиненныеДокументы(,,док.ТекущийДокумент());
					пока док2.получитьДокумент()=1 Цикл
						Если док2.Вид()="Реализация" Тогда
							если док2.Контрагент<>КонтрагентЮЛ Тогда
								Сообщить("В документе: "+док2.текущийДокумент()+" обнаружено несоответствие с исходным ЮрЛицом!
								|Автоматической замены произведено не будет!");
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Исключение
					Сообщить("Ошибка изменения документа!","!");
					Возврат;
				КонецПопытки;
				ЗафиксироватьТранзакцию();
			Иначе
				Если глЕстьРеквизитШапки("КонтрагентЮЛ",док.Вид())=1 Тогда 
					если док.КонтрагентЮЛ<>КонтрагентЮЛ Тогда
						Сообщить("В документе: "+док.текущийДокумент()+" обнаружено несоответствие с исходным ЮрЛицом!
						|Автоматической замены произведено не будет!");
					КонецЕсли;
				КонецЕсли;
				если док.вид()="СтрокаВыпискиПриход" Тогда 
					если док.Контрагент<>КонтрагентЮЛ Тогда
						Сообщить("В документе: "+док.текущийДокумент()+" обнаружено несоответствие с исходным ЮрЛицом!
						|Автоматической замены произведено не будет!"); 
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	    
	Иначе
		//тупо подставляем основной договор
		ДоговорЮЛ	= КонтрагентЮЛ.ОсновнойДоговор;
	КонецЕсли; 
КонецПроцедуры


// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название",		"Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл",			"Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка",		"Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания",	"Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "ФормаСчета";
ТаблицаПечФорм.Кнопка       = "ФормаСчета"; 

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Без фм";
ТаблицаПечФорм.Кнопка       = "Счет";

ДанныеПоДолгам	= "Долги: не обнаружены";
ТекстКлиента	= "";
КодОперации		= Перечисление.КодыОпераций.Продажа;

ТЗ_Долги		= СоздатьОбъект("ТаблицаЗначений");
ТЗ_Проценты		= СоздатьОбъект("ТаблицаЗначений");

Если НазваниеНабораПрав()="Продавец_розница" Тогда	//нельзя по умолчанию - выдавать товар в долг
	МожноВДолг=0;
Иначе
	МожноВДолг=1;
КонецЕсли;

Склад_Темп	= СоздатьОбъект("Справочник.Склады");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
ТЗ			= СоздатьОбъект("ТаблицаЗначений");

СписокДоступныхПроектов = СоздатьОбъект("СписокЗначений");
СпрПроекты = СоздатьОбъект("Справочник.Проекты");
Если СпрПроекты.НайтиПоНаименованию("Эксперт Инт. магазин безнал") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;
