Перем ФирмаДляОстатковТМЦ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//       
//******************************************************************************
// КонтрольДатыОплаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  В случае, если дата оплаты корректна возвращается пустая строка, 
//  в противном случае - соответствующий текст предупреждения.
//
// Описание:
//  Проверяет соответствует ли дата оплаты документа глубине кредита, заданного
//  для данного договора. Вызывается из модулей документов реализации.
//
Функция КонтрольДатыОплаты() 
	//Если ДатаОплаты < ДатаДок Тогда
	//    Возврат "Дата оплаты меньше даты документа!";
	//КонецЕсли;      
	//Если Контрагент.ОсновнойДоговор.НеКонтролироватьКредит = 0 Тогда
	//	Если ДатаОплаты > глБанковскаяДата(ДатаДок, Договор.ГлубинаКредита) Тогда
	//	    Возврат "Дата оплаты превышает глубину кредита!";
	//	Иначе
			Возврат "";
	//	КонецЕсли;
	//КонецЕсли;	
КонецФункции // глКонтрольДатыОплаты()

//******************************************************************************
// КонтрольКредитаПройден(ВремПокупатели)
//
// Параметры:
//  ВремПокупатели- регистр "Покупатели", рассчитанный при необходимости
//
// Возвращаемое значение:
//  1 - контроль пройден (можно проводить), 0 - не пройден (не проводить!).
//
// Описание:
//  Проводит контроль величины кредита.
//
Функция КонтрольКредитаПройден(ВремПокупатели, СуммаВзаиморасчетов)
	
	РазрешитьПревышениеКредита = глПолучитьПолномочие("РазрешитьПревышениеКредита");
	
	// Проверим дату оплаты
	//КонтрольДатыОплаты = КонтрольДатыОплаты();
	//Если ПустоеЗначение(КонтрольДатыОплаты) = 0 Тогда 
	//    Если РазрешитьПревышениеКредита <> 0  Тогда
	//		глСообщениеПроведения(КонтрольДатыОплаты+ РазделительСтрок+
	//		"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
	//	Иначе                   
	//		глНеПроводить(Контекст,КонтрольДатыОплаты);
	//		Возврат 0;
	//	КонецЕсли;
	//КонецЕсли;			
	
	Если Договор.НеКонтролироватьКредит = 1 Тогда
		Возврат 1;
	КонецЕсли;
	
	ТекущийДолг = ВремПокупатели.СводныйОстаток(Контрагент,,,,,"Долг");
	
	Если (ТекущийДолг + СуммаВзаиморасчетов - Оплачено - ОплаченоБонусом) > (Контрагент.ОсновнойДоговор.СуммаКредита) Тогда
		                                                      
		ВалютаКредита = Контрагент.ОсновнойДоговор.ВалютаВзаиморасчетов;
		
		СтрокаСообщ = "Сумма накладной вместе с текущим долгом превышает сумму максимального кредита клиенту!
					  |   Текущий долг:   "+глФРМ(ТекущийДолг,ВалютаКредита)+"
					  |   Остаток кредита:"+глФРМ(Контрагент.ОсновнойДоговор.СуммаКредита - ТекущийДолг,ВалютаКредита)+"
					  |   Сумма накладной:"+ глФРМ(СуммаВзаиморасчетов,ВалютаКредита)+"!";
		
	    Если РазрешитьПревышениеКредита <> 0  Тогда
			глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент(),,,1);
			Возврат 1;
		Иначе                   
			глНеПроводить(Контекст,СтрокаСообщ);
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // КонтрольКредитаПройден()

//******************************************************************************
// ВидДолгаПоСтатусу(СтатусПартии)
//
// Параметры:
//  СтатусПартии - значение перечисления статуса партии
//
// Возвращаемое значение:
//  Значение перечисления видов долга.
//
// Описание:
//  Возвращает вид долга, соответствующий статусу партии.
//
Функция ВидДолгаПоСтатусу(СтатусПартии)
		
	Если (СтатусПартии	= глСП.Т_Купленный) или
        (СтатусПартии	= глСП.Т_ВРознице) или
		(СтатусПартии	= глСП.Т_Тара) Тогда     
		Если СтатусПартии = глСП.Т_ВРознице Тогда
		    глСообщениеПроведения("На складе обнаружены розничные партии!", ТекущийДокумент(),,,1);
		КонецЕсли;
		Возврат глВД.ДолгЗаТовары;
		
	ИначеЕсли СтатусПартии	= глСП.Т_Принятый Тогда
		Возврат глВД.ДолгЗаТоварыПринятые;
		
	ИначеЕсли СтатусПартии	= глСП.Продукция Тогда
		Возврат глВД.ДолгЗаПродукцию;
		
	ИначеЕсли Лев(СтатусПартии.Идентификатор(),2)	= "М_" Тогда
		Возврат глВД.ДолгЗаМатериалы;
		
	Иначе
		глСообщениеПроведения("Неизвестный статус партии: "+СтатусПартии,ТекущийДокумент(),,,1);
	КонецЕсли;	
	
КонецФункции // ВидДолгаПоСтатусу()
    

//******************************************************************************
//			ДвижениеЗаявокПокупателя()
//	Тут мы списываем с регистра Заявки с учётом РезервыТМЦ2 и прав 
//		пользователя на влезания в чужой резерв
Процедура ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2)

КонецПроцедуры


//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ТаблСписПартий, ТаблСписПартийКом;    
	Перем ВремРегистры;
	Перем ВремЗаявки, ВремЗаказыЗаявки, ВремОстаткиТМЦ, ВремРезервыТМЦ, ВремПартииНаличие, ВремПокупатели;  

	
	// Удаление движений по регистрам.
	//Для Номер = 1 По Метаданные.Регистр() Цикл
	//	ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	//КонецЦикла;
   	
	ТаблицаУслуг = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаТМЦ   = глПодготовитьТаблицуДокумента(Контекст,1,ТаблицаУслуг);
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),"ТекДок");
	СписокПараметров.ДобавитьЗначение(Склад,		"Склад");
	СписокПараметров.ДобавитьЗначение(Фирма,		"Фирма");
	СписокПараметров.ДобавитьЗначение(ФирмаДляОстатковТМЦ,"ФирмаДляОстатковТМЦ");
	СписокПараметров.ДобавитьЗначение(Контрагент,	"Контрагент");
	СписокПараметров.ДобавитьЗначение(Договор,		"Договор");  
	
	// Сформируем список статусов партий
	СтатусПартии = СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(КодОперации,	"КодОперации");
	
	ВремРегистры 					= СоздатьОбъект("Регистры");
	ВремЗаявки                      = ВремРегистры.Заявки;	//Оставлено для совместимости
	//////ВремЗаказыЗаявки                = ВремРегистры.ЗаказыЗаявки;
	ВремОстаткиТМЦ  				= ВремРегистры.ОстаткиТМЦ;
	ВремРезервыТМЦ  				= ВремРегистры.РезервыТМЦ;	//Оставлено для совместимости
	ВремРезервыТМЦ2  				= ВремРегистры.РезервыТМЦ2;	//Оставлено для совместимости
	ВремПартииНаличие 				= ВремРегистры.ПартииНаличие;
	ВремПокупатели 					= ВремРегистры.Покупатели;	//Учёт на отдельном регистре взаиморасчётов
	ВремВзаиморасчеты2              = ВремРегистры.Взаиморасчеты2;
//	ФильтрЗаявок         (ТаблицаТМЦ, ТаблицаУслуг, ВремЗаявки);	//Стандартый механизм изменён
	глФильтрОстатковТМЦ  (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремОстаткиТМЦ,ВремРезервыТМЦ  );
	глФильтрПартийТМЦ    (Контекст, ТаблицаТМЦ, СписокПараметров, 	ВремПартииНаличие              );     
	Если КодОперации=Перечисление.КодыОпераций.Продажа Тогда
		глФильтрДолгов   (Контекст, Договор, 	СписокПараметров, 	ВремПокупатели                 );	
	КонецЕсли;                  
	
	Если ИтогиАктуальны()=0 Тогда
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	//// контроль величины кредита клиенту (с учетом права пользователя превышать его)
	//Если КодОперации = глКО.Продажа Тогда  
	ВсегоОплатить	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"))-залог;
	Если КонтрольКредитаПройден(ВремВзаиморасчеты2, ВсегоОплатить) = 0 Тогда
		Возврат;
	КонецЕсли;   
	//КонецЕсли;

	//******************************************************************************
	// Всё что касается заявки и Регистра РезервыТМЦ2
	//	СТАНДАРТНЫЙ МЕХАНИЗМ РАБОТЫ С ЗАЯВКАМИ ИЗМЕНЁН!!!!
//	ДвижениеЗаявокПокупателя(ТаблицаТМЦ, ВремЗаявки, ВремРезервыТМЦ, ВремРезервыТМЦ2); // по ТМЦ
	////////ДвижениеЗаявокПокупателя(ТаблицаУслуг, ВремЗаявки, ВремЗаказыЗаявки, ВремРезервыТМЦ); // по услугам
	
	// остатки ТМЦ
	Если глСписаниеОстатковТМЦ	(Контекст,ТаблицаТМЦ,СписокПараметров, ВремОстаткиТМЦ, ВремРезервыТМЦ)=0 Тогда
		Возврат;
	КонецЕсли;
	              
	// партии ТМЦ
	глСписаниеПартийТМЦ(Контекст,ТаблицаТМЦ,СписокПараметров,ВремПартииНаличие,ТаблСписПартий,ТаблСписПартийКом);
	                   
	Если КодОперации=Перечисление.КодыОпераций.Продажа Тогда   
		 
		глОтразитьНеобходимыйТоварПоФирмам(Контекст, ТаблСписПартий);
		
		// движение оборотного регистра "продажи" 
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									ТаблСписПартий.Партия.Поставщик,
									ТаблСписПартий.Номенклатура,
									ТаблСписПартий.Количество,
									ТаблСписПартий.СуммаУпр,
									ТаблСписПартий.СуммаПродУпр, 
									Объект);
		КонецЦикла;
		
		ТаблСписПартий.Свернуть("СтатусПартии,СтавкаНП,СтавкаНДС,ДоговорКомитента","СуммаПрод,СуммаПродУпр,СуммаПродРуб,НДСПрод,НППрод,СуммаБезНДС");
		ТаблСписПартий.НоваяКолонка("КредДокумент");
		ТаблСписПартий.НоваяКолонка("ВидДолга");
		ТаблСписПартий.НоваяКолонка("Сумма");
		ТаблСписПартий.НоваяКолонка("СуммаУпр");
		ТаблСписПартий.НоваяКолонка("СуммаРуб");
		ТаблСписПартий.НоваяКолонка("СуммаНДС");
		ТаблСписПартий.НоваяКолонка("СуммаНП");
		ТаблСписПартий.НоваяКолонка("Себестоимость");
		ТаблСписПартий.НоваяКолонка("ОблагаетсяНП");
		
		ТаблСписПартий.ВыбратьСтроки();
		Пока ТаблСписПартий.ПолучитьСтроку()=1 Цикл
			ТаблСписПартий.КредДокумент = ТекущийДокумент();
			ТаблСписПартий.ВидДолга		= ВидДолгаПоСтатусу(ТаблСписПартий.СтатусПартии);
			ТаблСписПартий.Себестоимость= ТаблСписПартий.СуммаБезНДС;
			ТаблСписПартий.СуммаНДС		= ТаблСписПартий.НДСПрод;
		 	ТаблСписПартий.СуммаНП		= ТаблСписПартий.НППрод;
			ТаблСписПартий.Сумма		= ТаблСписПартий.СуммаПрод;
			ТаблСписПартий.СуммаУпр		= ТаблСписПартий.СуммаПродУпр;
			ТаблСписПартий.СуммаРуб		= ТаблСписПартий.СуммаПродРуб;
			ТаблСписПартий.ОблагаетсяНП = УчитыватьНП;
		КонецЦикла;                                                                       
		                                                            
		СписокПараметров.Установить("ЗнакДвижения", 1); // идет увеличение долга
		//глДвижениеДолгов(Контекст,Договор,ТаблСписПартий,СписокПараметров,ВремПокупатели);
		
		// запомним, что мы продали принятые на комиссию товары...
		ТаблСписПартийКом.ВыбратьСтроки();
		Пока ТаблСписПартийКом.ПолучитьСтроку()=1 Цикл                    
			Регистр.РеализованныйТовар.Фирма			= ТаблСписПартийКом.Фирма;
			Регистр.РеализованныйТовар.Договор 			= ТаблСписПартийКом.Партия.ДоговорПоставщика;
			Регистр.РеализованныйТовар.Номенклатура 	= ТаблСписПартийКом.Номенклатура;
			Регистр.РеализованныйТовар.Партия 			= ТаблСписПартийКом.Партия;
			Регистр.РеализованныйТовар.ДокПродажи		= ТекущийДокумент();
			Регистр.РеализованныйТовар.Количество 		= ТаблСписПартийКом.Количество;
			Регистр.РеализованныйТовар.ПродСтоимость 	= ТаблСписПартийКом.СуммаПродРуб - ТаблСписПартийКом.НППрод;
			Регистр.РеализованныйТовар.ДвижениеПриходВыполнить();
		КонецЦикла;                                                                       
		                                                            
		// реализация услуг  
		глДвижениеПартийУслуг(Контекст, ТаблицаУслуг, СписокПараметров);
		
		// сначала увеличим обороты продаж по услугам
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
			глДвижениеОборотовПродаж(Контекст,
									Фирма,
									Контрагент,
									"",
									ТаблицаУслуг.Номенклатура,
									ТаблицаУслуг.Количество,
									0,
									ТаблицаУслуг.СуммаУпр,
									Объект);
		КонецЦикла;
		
		// теперь задолженность покупателя за отпущенные услуги
		СписокПараметров.Установить("ЗнакДвижения",1); // увеличился долг клиента
		
		ТаблицаУслуг.Свернуть("СтавкаНДС,СтавкаНП","Сумма,СуммаУпр,СуммаРуб,СуммаНДС,СуммаНП");
		
		ТаблицаУслуг.НоваяКолонка("КредДокумент");
		ТаблицаУслуг.НоваяКолонка("ВидДолга");
		ТаблицаУслуг.НоваяКолонка("Себестоимость");
		ТаблицаУслуг.НоваяКолонка("ДоговорКомитента");
		ТаблицаУслуг.НоваяКолонка("ОблагаетсяНП");
	
		ТаблицаУслуг.ВыбратьСтроки();
		Пока ТаблицаУслуг.ПолучитьСтроку()=1 Цикл
		
			ТаблицаУслуг.КредДокумент 	= ТекущийДокумент();
			ТаблицаУслуг.ВидДолга		= глВД.ДолгЗаУслуги;
			ТаблицаУслуг.Себестоимость	= 0;
			ТаблицаУслуг.ОблагаетсяНП 	= УчитыватьНП;
		
		КонецЦикла;                                                                       
	
		//глДвижениеДолгов(Контекст,Договор,ТаблицаУслуг,СписокПараметров,ВремПокупатели);
		
	КонецЕсли;
	
	
КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	//++Валерий МЭТР: повышение   
	Если Повышение = 1 Тогда
		ПроведениеРазрешено = 0;
		
		Если (ПустоеЗначение(КодАвторизации) = 0) или (глПользователь.Наименование = "Кожемякин") или (глПользователь.Наименование = "Филиппов") Тогда
			// Проверяем код авторизации
			//СпрПользователи = СоздатьОбъект("Справочник.Пользователи");
			//Если СпрПользователи.ВыбратьЭлементыПоРеквизиту("КартаАвторизации",КодАвторизации,1,0) = 1 Тогда				
			//	Пока СпрПользователи.ПолучитьЭлемент() = 1 Цикл
			//		Если СпрПользователи.ТекущийЭлемент().Полномочия.Наименование = "Полные полномочия" Тогда
			//			ПроведениеРазрешено = 1;
			//			Прервать;
			//		КонецЕсли;
			//	КонецЦикла;
			//КонецЕсли;
			ПроведениеРазрешено = 1;
		КонецЕсли; 
		
		Если ПроведениеРазрешено = 0 Тогда
			Предупреждение("Для проведения документа с флагом <Повышение> необходима карта авторизации администратора!"); 
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	//--Валерий МЭТР: повышение
	
	// Проверка заполненности обязательных реквизитов.
   	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Склад,Валюта,Контрагент,Договор")=0 Тогда
		Возврат;
	КонецЕсли;
	              
	Если (Склад.РозничныйСклад = 1) Тогда
	    глНеПроводить(Контекст,"Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только с оптового склада!");
		Возврат;
	КонецЕсли;
                     
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
	
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);
       
	
	//******************************************************************************
	//			ВЗАИМОРАСЧЁТЫ С КЛИЕНТОМ РОЗНИЧНОГО ПОДРАЗДЕЛЕНИЯ
	//******************************************************************************  
      
	ВсегоОплатить				= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС")) - залог;
	ВсегоОплачено   			= Оплачено + залог + ОплаченоБонусом;
	ВсегоОплатитьТекДокумент	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	
	Если (ВсегоОплатить - ВсегоОплачено)>0 Тогда	//Значит есть некоторый кредит и его надо учесть
		Регистр.Покупатели_Розница.Контрагент			= Контрагент;
		Регистр.Покупатели_Розница.ВидВзаимодействия	= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		Регистр.Покупатели_Розница.Магазин				= Склад;
		Регистр.Покупатели_Розница.КредДокумент			= ТекущийДокумент(); 
		Если ДатаДок >= Дата("24.04.17") Тогда
			Регистр.Покупатели_Розница.АналитикаПродажи 	= АналитикаПроценты;
		Иначе
			Регистр.Покупатели_Розница.АналитикаПродажи 	= "";
		КонецЕсли;	
		Регистр.Покупатели_Розница.АналитикаСчетБезнал 	= "";
		Регистр.Покупатели_Розница.СуммаРуб				= ВсегоОплатить-ВсегоОплачено;
		Регистр.Покупатели_Розница.ДвижениеРасходВыполнить();
	КонецЕсли;
	     
	СписаноЗалогов = глПровестиЗачетЗалога(Контекст);
	  
	Если (ДатаДок < Дата("10.05.17")) или (флДСБ = 1) Тогда
		глОтразитьПроцентыИБонусы(Контекст); 
	КонецЕсли;
	
	ЕстьОшибки = 0;	
	глПровестиЗачетБонуса(Контекст, СписаноЗалогов, ЕстьОшибки);
	
	Если (ЕстьОшибки = 1) Тогда
		СтрокаСообщ = "Не достаточно бонусов для списания!";
		глСообщениеПроведения(СтрокаСообщ+ РазделительСтрок+"Документ: "+глПредставлениеДокумента(ТекущийДокумент()), ТекущийДокумент());  
		Если ((глПользователь.Наименование <> "Кожемякин")) и ((ИмяПользователя() <> "Филиппов")) и ((ИмяПользователя() <> "Горлач")) Тогда
			глНеПроводить(Контекст,СтрокаСообщ);
			Возврат;  
		КонецЕсли;
	КонецЕсли;	
	           
	
	//Если (ДатаДок >= Дата("01.02.17")) Тогда
	//	Если ((ВсегоОплатить - ВсегоОплачено)<=0) Тогда
	//		глОтразитьПроцентыИБонусы(Контекст);  
	//	КонецЕсли;	
	//Иначе  
	Если (ДатаДок >= Дата("10.05.17")) и (флДСБ = 0) Тогда
		глОтразитьПроцентыИБонусы(Контекст); 
	КонецЕсли;	
	//КонецЕсли;
	
	//******************************************ДВИЖЕНИЯ ПО РЕГИСТРУ ВЗАИМОРАСЧЕТЫ 2****************************************************
	Регистр.Взаиморасчеты2.Контрагент = Контрагент;  
	Регистр.Взаиморасчеты2.Склад	  = Склад;
	//если ПустоеЗначение(Проект)=1 Тогда
	//	НеПроводитьДокумент();
	//	Сообщить("Не указан проект - нет возможности отнести к определенному виду оплаты
	//	|документ не проводится!");
	//	Возврат;
	//Иначе
		//Если ВыданоСоСкидкой = 1  Тогда
			Регистр.Взаиморасчеты2.Долг		= ВсегоОплатитьТекДокумент;
			Регистр.Взаиморасчеты2.Скидка	= 0;
			Регистр.Взаиморасчеты2.Валюта	= Валюта;
			//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//иначе 
		//	Регистр.Взаиморасчеты2.Долг		= Итог("Сумма")+Итог("СуммаСкидки");
		//	Регистр.Взаиморасчеты2.Скидка	= Итог("СуммаСкидки");
		//	Регистр.Взаиморасчеты2.Валюта	= Валюта;
		//	//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//КонецЕсли;
		//Если ДокОснование.Вид()="РасходнаяНакладнаяРозницаБезнал" Тогда
		//	если ДокОснование.ДокОснование.Вид()="СчетБнРозница" Тогда	//Это и есть привязка
		//		Регистр.Взаиморасчеты2.БНсчет	= ДокОснование.ДокОснование;
		//	КонецЕсли;
		//КонецЕсли;
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			Регистр.Взаиморасчеты2.ДокументРасчета	= ТекущийДокумент();
		Иначе
			Регистр.Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(Контекст);
		КонецЕсли;
		//Если Проект.ВидОплаты=глКО.Наличные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Наличные;
			Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.Безнал Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.Безнал;
		//	Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.Прочее Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.Прочее;
		//	Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.СтарыеДанные Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
		//	Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//Иначе
		//	НеПроводитьДокумент();
		//	Сообщить("Проект не отнесен к определенному виду оплаты
		//	|документ не проводится!");
		//	Возврат;
		//КонецЕсли;
//	КонецЕсли;
	
	
	Регистр.Взаиморасчеты2.Контрагент = Контрагент;
	Регистр.Взаиморасчеты2.Склад	  = Склад;
	//если ПустоеЗначение(Проект)=1 Тогда
	//	НеПроводитьДокумент();
	//	Сообщить("Не указан проект - нет возможности отнести к определенному виду оплаты
	//	|документ не проводится!");
	//	Возврат;
	//Иначе
		//Если ВыданоСоСкидкой = 1  Тогда
		Если (ВсегоОплатитьТекДокумент-ВсегоОплачено)>0 Тогда
			Регистр.Взаиморасчеты2.Долг		= ВсегоОплачено;
		Иначе
			Регистр.Взаиморасчеты2.Долг		= ВсегоОплатитьТекДокумент;
		КонецЕсли;	
		Регистр.Взаиморасчеты2.Скидка	= 0;
		Регистр.Взаиморасчеты2.Валюта	= Валюта;
		//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//иначе
		//	Если (ВсегоОплатить-Оплачено)>0 Тогда
		//		Регистр.Взаиморасчеты2.Долг		= ВсегоОплатить-Оплачено;
		//	Иначе
		//		Регистр.Взаиморасчеты2.Долг		= Итог("Сумма")+Итог("СуммаСкидки");
		//	КонецЕсли;
		//	Регистр.Взаиморасчеты2.Долг		= Итог("Сумма")+Итог("СуммаСкидки");
		//	Регистр.Взаиморасчеты2.Скидка	= Итог("СуммаСкидки");
		//	Регистр.Взаиморасчеты2.Валюта	= Валюта;
		//	//Регистр.Взаиморасчеты2.ДвижениеПриходВыполнить();
		//КонецЕсли;
		//Если ДокОснование.Вид()="РасходнаяНакладнаяРозницаБезнал" Тогда
		//	если ДокОснование.ДокОснование.Вид()="СчетБнРозница" Тогда	//Это и есть привязка
		//		Регистр.Взаиморасчеты2.БНсчет	= ДокОснование.ДокОснование;
		//	КонецЕсли;
		//КонецЕсли;
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			Регистр.Взаиморасчеты2.ДокументРасчета	= ТекущийДокумент();
		Иначе
			Регистр.Взаиморасчеты2.ДокументРасчета	= глПолучитьОснование(Контекст);
		КонецЕсли;
		//Если Проект.ВидОплаты=глКО.Наличные Тогда
			Регистр.Взаиморасчеты2.ВидОплаты= глКО.Наличные;
			Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.Безнал Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.Безнал;
		//	Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.Прочее Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.Прочее;
		//	Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		//ИначеЕсли Проект.ВидОплаты=глКО.СтарыеДанные Тогда
		//	Регистр.Взаиморасчеты2.ВидОплаты= глКО.СтарыеДанные;
		//	Регистр.Взаиморасчеты2.ДвижениеРасходВыполнить();
		//Иначе
		//	НеПроводитьДокумент();
		//	Сообщить("Проект не отнесен к определенному виду оплаты
		//	|документ не проводится!");
		//	Возврат;
		//КонецЕсли;
	//КонецЕсли;	
	//**********************************************************************************************************************************
	 
	глЗакрытьРезервы(Контекст);
КонецПроцедуры //ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения()
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Сообщить("Вы не можете отменять проведение данного документа");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

