Перем ДанныеПоДолгам, ТекстКлиента;
Перем КлиентКредит;
Перем СтараяОплата, СтарыйКонтрагент;	//Работа с обновлением данных
Перем ТЗ_Долги;	//Тут развёрнутая информация по текущим долгам
Перем ТЗ_Проценты;	//Тут развёрнутая информация по текущим процентам
Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем МожноВДолг;	//Признак продажи в долг
Перем текОстаток, Склад_Темп, рег1, ТЗ, СтараяНоменклатура, НачислитБонусПроцент;

Перем __Автор, Бонус;
Перем СписокДоступныхПроектов; //Список доступных для выбора проектов

Процедура ИзменениеКлиента() Далее 
Процедура ОбновиНадписи() Далее 
Процедура ОбновитьБонус() Далее
Функция ПроверитьПроведение() Далее   
   
  
Процедура кнРасчитатьБонус()
	НачислитБонусПроцент = глФРМ(глПолучитьКоличествоНачиляемыхБонусовПроцентов(Контекст),);	
КонецПроцедуры

Функция ПолучитьРасшифровкуДляОтчета(ТекОтчет)
	
	// Общая часть
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", ТекОтчет);
	Расшифровка.Установить("ВыбНачПериода", Дата("01.01.1980"));
	Расшифровка.Установить("ВыбКонПериода", ДатаДок);
	Расшифровка.Установить("Контрагент", 	Контрагент); 
	Расшифровка.Установить("Склад", 		Склад);
	
	Возврат Расшифровка;

КонецФункции // ПолучитьРасшифровкуДляОтчета()

Процедура ПоКнопкеИсторияБонусов()
	Расшифровка = ПолучитьРасшифровкуДляОтчета("ВедомостьПоПокупателямРозница");
	ОткрытьФорму("Отчет.ВедомостьПоПокупателямРозница", Расшифровка);
КонецПроцедуры

Процедура ПриИзмененииИндивидРасчет(НеПересчитывать = 0)      
	Если ДатаДок < Дата("22.05.2017") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ПустоеЗначение(ДокОснование) = 0 Тогда 
		Если ДокОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
			Если ДокОснование.ДатаДок < Дата("22.05.2017") Тогда
				Возврат;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если флИндивидРасчет = 1 Тогда
		//Форма.ФиксСкидка.Доступность(1);  
		Форма.Скидка.Доступность(1);
		//Форма.СрНаценка.Доступность(1);
		//Форма.РучнаяНаценка.Доступность(1);   
		Форма.ЦенаСоСКидкой.Доступность(1);   
	Иначе
		//Форма.ФиксСкидка.Доступность(0);
		Форма.Скидка.Доступность(0);
		//Форма.СрНаценка.Доступность(0);
		//Форма.РучнаяНаценка.Доступность(0); 
		Форма.ЦенаСоСКидкой.Доступность(0);
		
		Если НеПересчитывать = 0 Тогда
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл  
				ЦенаЦены 	= 0;
				ЕдЦены		= "";
				ВалютаЦены  = "";
				
				Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдЦены, ВалютаЦены) <> 1 Тогда
					ЦенаСоСкидкой = Цена;
				Иначе 
					Цена		  = ЦенаЦены;
					ЦенаСоСкидкой = ЦенаЦены; 
				КонецЕсли;
				
				глПересчетТЧ_розница(Контекст,"ЦенаСоСкидкой");
				
			КонецЦикла;	
			
			Если ПустоеЗначение(Контрагент) = 0 Тогда
				ИзменениеКлиента(); 
			КонецЕсли; 
			
			ОбновиНадписи();
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура УстановитьДоступностьФлагБонусы()
	Если Контрагент.Выбран() = 1 Тогда
		Если (Контрагент.флТолькоБонусы = 1) 
		и (сокрЛП(ИмяПользователя())<>"Филиппов")
		и (сокрЛП(ИмяПользователя())<>"Кожемякин") Тогда
			Форма.флНачислитьБонусы.Доступность(0);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

//======================================================================
Процедура ПриИзмененииТипЦены()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		глПересчетТЧ_розница(Контекст, "ТипЦен");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ПриИзмененииТипЦены()

Процедура ПриВыбореПроекта()
	Если СписокДоступныхПроектов.НайтиЗначение(Проект) = 0 Тогда
		Если Вопрос("Для данного вида документа установлено ограничение выбираемых проектов." + РазделительСтрок +
					"Выбрать из списка разрешенных?", 4) = 7 Тогда
			Проект = "";
		Иначе
			Если СписокДоступныхПроектов.ВыбратьЗначение(Проект) = 0 Тогда
				Проект = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если Проект.Выбран() = 1 Тогда
		СпрКонтрагенты = СоздатьОбъект("Справочник.Контрагенты");
		Если СпрКонтрагенты.НайтиПоРеквизиту("Проект", Проект, 1) = 1 Тогда
			Контрагент = СпрКонтрагенты.ТекущийЭлемент();
			ИзменениеКлиента(); 
			ОбновиНадписи();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
  
//Принимает решение о возможности частичной оплаты клиентом
//плюс анализирует правильность внесённых данных
Процедура РассмотриВозможностьКредитов()
	
	Если ОплатаПоКредитке=1 Тогда
		форма.Оплачено.Доступность(0);
	Иначе
		форма.Оплачено.Доступность(1);
	КонецЕсли;

	Если СтараяОплата=Оплачено Тогда
	    возврат;
	КонецЕсли;     
	
	ВсегоОплатить	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	Если ВсегоОплатить < Оплачено Тогда 
		Оплачено = ВсегоОплатить;
	КонецЕсли;
	
//	СуммаКредита	= Контрагент.ОсновнойДоговор.СуммаКредита;	//на какую сумму возможен кредит, ВСЕ ВЗАИМОРАСЧЁТЫ ТОЛЬКО ПО ОСНОВНОМУ ДОГОВОРУ!!!
////	НеКонтрКредит	= Договор.НеКонтролироватьКредит;
//	ВсегоОплатить	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
//	Если (СуммаКредита=0) Тогда
//		//Форма.Оплачено.Доступность(0);
//		Оплачено	= ВсегоОплатить;
//	ИначеЕсли ВсегоОплатить-Оплачено>СуммаКредита Тогда
//		Форма.Оплачено.Доступность(1);
//		Сообщить("Вы превысили кредит клиента. Удостоверьтесь в правильности указанной суммы оплаты!");	
//		Сообщить("		Максимально допустимый кредит для данного клиента: "+глФРМ(СуммаКредита)+" руб.");
//		Сообщить("		Минимальная сумма оплаты составляет: "+глФРМ(ВсегоОплатить-СуммаКредита));
//		Сообщить("		Для получения большей скидки, вам необходимо разрешение руководства.");
//		Оплачено	= ВсегоОплатить;
//	ИначеЕсли Оплачено>ВсегоОплатить Тогда
//		Оплачено	= ВсегоОплатить;
//		Сообщить("Нельзя брать с человека больше денег, чем он должен.");
//		Сообщить("		Сумма оплаты изменена до максимально допустимой.");
//	КонецЕсли;
//	СтараяОплата	= Оплачено;
КонецПроцедуры


//Производит пересчёт скидок в текущем документе
//	в соответствии с параметрами заданными в карточке клиента
//	режим = 1 - пересчитать ТЧ
//	режим = 0 - ничего не пересчитывать, а только обновить форму
Процедура РасчётСкидки(Режим)
	
	Если ПустоеЗначение(Контрагент)=0 Тогда
		 
		//++Валерий МЭТР: повышение
		СкидкаКонтрагента = Контрагент.Скидка_Розница.Получить(ДатаДок);
		Если Повышение = 1 Тогда
			ПовышениеСкидки = Константа.ПолучитьАтрибут("ПовышениеСкидки");
			СкидкаКонтрагента = СкидкаКонтрагента + ПовышениеСкидки;
		КонецЕсли;
		//--Валерий МЭТР: повышение
		
		Если Режим = 1 Тогда	//полный пересчёт 
			
			Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 Тогда				
				//++Валерий МЭТР: механизм деления скидки
				ВыданоСоСкидкой	= 1;
				Скидка = СкидкаКонтрагента;
				//--Валерий МЭТР: механизм деления скидки
			КонецЕсли;
			
			//++Валерий МЭТР: механизм деления скидки
			Если Скидка > 0 Тогда
				ВыданоСоСкидкой = 1;
			ИначеЕсли Контрагент.СкидкаСразу.Получить(ДатаДок) = 0 Тогда
				ВыданоСоСкидкой = 0;
			КонецЕсли;             
			//--Валерий МЭТР: механизм деления скидки
						
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Скидка = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//Если Скидка > СкидкаКонтрагента Тогда
				//	Скидка = СкидкаКонтрагента;
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";				
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок) = 1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
					Форма.ВыданоСоСкидкой.Доступность(0);
				Иначе
					Форма.ВыданоСоСкидкой.Доступность(1);
				КонецЕсли;
				глПересчитатьСкидкиРозница(Контекст);
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0% -=Допустима скидка: "+Контрагент.Скидка_Розница.Получить(ДатаДок)+"%=-";
				//Скидка			= 0;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				глПересчитатьСкидкиРозница(Контекст);
			КонецЕсли;
		
		ИначеЕсли Режим <> 1 Тогда	//Иногда надо просто обновить экранные данные, без пересчёта таблицы 
			
			Если ВыданоСоСкидкой = 1 Тогда
				
				//++Валерий МЭТР: механизм деления скидки
				//Если СкидкаСразу > Контрагент.Скидка_Розница.Получить(ДатаДок) Тогда
				//	СкидкаСразу = Контрагент.Скидка_Розница.Получить(ДатаДок);
				//КонецЕсли;
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
				//_Скидка			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+Скидка+"%=-";
				//--Валерий МЭТР: механизм деления скидки
				
				Если Контрагент.СкидкаСразу.Получить(ДатаДок)=1 тогда
					ТекстКлиента = ТекстКлиента+", всегда сразу";
				КонецЕсли;
			Иначе
				//Скидка 			= Контрагент.Скидка_Розница.Получить(ДатаДок);
				//ТекстКлиента 	= "Скидка по документу: 0%"+" -=Допустима скидка: "+Скидка+"%=-";
				ТекстКлиента 	= "Скидка по документу: "+Скидка+"%"+" -=Допустима скидка: "+СкидкаКонтрагента+"%=-";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;    
	
КонецПроцедуры

//Проверка на наличие долгов клиента и наличие процентов для выплаты
Процедура ПроверкаКредитов(режим)
	Перем Запрос, ТекстЗапроса,а;
	Запрос 	= СоздатьОбъект("Запрос");
	Состояние("Расчёт таблицы текущих долгов...");
	если режим = 1 тогда	//Мы просто рассчитаем сумму без доп. аналитики
		ВЗ				= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		ДанныеПоДолгам	= "Долги: ";
		ТекстЗапроса 	= 
		"//{{ЗАПРОС(ТекущиеДолгиСводная)
		|Без итогов;
		|Клиент = Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия = Регистр.Покупатели_розница.ВидВзаимодействия;
		|СуммаРуб = Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
		КонецЕсли;
	ИначеЕсли режим = 2 Тогда	//Надо вывести информацию в виде таблицы
		ДанныеПоДолгам	= "Долги: ";
		ВЗ				= Перечисление.ВидВзаимодействия.ДолгЗаТовары;
		ТекстЗапроса 	= 
		"//{{ЗАПРОС(ТекущиеДолгиТаблица)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих долгах...");
		Запрос.Выгрузить(ТЗ_Долги);
		Если ТЗ_Долги.Итог("СуммаРубКонОст")=0 Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
		Иначе
			ДанныеПоДолгам	= ДанныеПоДолгам+глФРМ((-1)*ТЗ_Долги.Итог("СуммаРубКонОст"));
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим долгам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				ТЗ_Долги.СуммаРубКонОст=(-1)*ТЗ_Долги.СуммаРубКонОст;
				Таб.ВывестиСекцию("Строка_1");
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("ДанныеПоДолгам","");
		КонецЕсли;
	ИначеЕсли режим=3 Тогда	//Надо вывести информацию о бонусах в виде таблицы
		//ВвестиЧисло(а,"Пароль",6,0,30);
		//Если а<>281280 Тогда
		//    возврат;
		//КонецЕсли;
		ВЗ		= Перечисление.ВидВзаимодействия.Проценты;
		ТекстЗапроса = 
		"//{{ЗАПРОС(ТекущиеБонусы)
		|Без итогов;
		|Клиент 			= Регистр.Покупатели_розница.Контрагент;
		|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
		|Магазин			= Регистр.Покупатели_розница.Магазин;
		|КредДокумент		= Регистр.Покупатели_розница.КредДокумент;
		|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
		|Функция СуммаРубКонОст = КонОст(СуммаРуб);
		|Группировка Клиент без групп;
		|Группировка Магазин без Групп;
		|Группировка КредДокумент без Групп;
		|Условие(Клиент = Контрагент);
		|Условие(ВидВзаимодействия = ВЗ);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Состояние("Обрабатываем информацию о текущих бонусах...");
		Запрос.Выгрузить(ТЗ_Долги);
		ТЗ_Проценты = глНайтиПроцентыИзДок2(Контрагент,"",Дата(0),Дата(0),"");
		Если (ТЗ_Долги.Итог("СуммаРубКонОст")=0)и(ТЗ_Проценты.Итог("Сумма")=0) Тогда
			ДанныеПоДолгам	= "Долги: не обнаружены";
			Сообщить("Непогашеных бонусов, у данного клиента, не найдено!");
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ДанныеПоДолгам");
			Название = "Данные по текущим бонусам";
			Таб.ВывестиСекцию("Шапка");
			Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
			итого=0;
			ТЗ_Долги.ВыбратьСтроки();
			Пока ТЗ_Долги.ПолучитьСтроку()=1 Цикл
				Если ТЗ_Долги.КредДокумент.Вид()<>"РасходнаяНакладнаяРозницаБезнал" тогда
				Таб.ВывестиСекцию("Строка_1");
				итого=итого+ТЗ_Долги.СуммаРубКонОст;
				конецЕсли;
			КонецЦикла;
			ТЗ_Проценты.ВыбратьСтроки();
			Пока ТЗ_Проценты.ПолучитьСтроку()=1 Цикл
				Таб.ВывестиСекцию("Строка_2");
				итого=итого+ТЗ_Проценты.Сумма;
			КонецЦикла;
			Таб.ВывестиСекцию("Подвал_2");
			Таб.ТолькоПросмотр(1);
			Таб.Показать("Данные по бонусам","");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


// Отображает остаток товара, на указанном складе в момент ТА
Процедура ПокажиКоличество()
////	если стараяНоменклатура<>Номенклатура.ТекущийЭлемент() Тогда
//	спис=СоздатьОбъект("СписокЗначений");
//	ВыбратьСтроки();
//	Пока ПолучитьСтроку()=1 Цикл
//		спис.ДобавитьЗначение(Номенклатура.ТекущийЭлемент());
//	КонецЦикла;
//		Склад_Темп.ВыбратьЭлементы();
//		Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
//			если сокрЛП(Склад_темп)=сокрЛП(Склад) Тогда
//				Рег1.УстановитьФильтр(,спис,Склад_темп);
//				Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
//				
//				ВыбратьСтроки();
//				пока ПолучитьСтроку()=1 Цикл
//					х			= ПолучитьПустоеЗначение(х);
//					у			= 2;
//					Если ТЗ.НайтиЗначение(Номенклатура.ТекущийЭлемент(),х,у)=1 Тогда
//						Ост	= ТЗ.ПолучитьЗначение(х,"Количество");
//					Иначе
//						Ост	= 0;
//					КонецЕсли;
//				КонецЦикла;
//				Возврат;
//			КонецЕсли;
//		КонецЦикла;
////	КонецЕсли;
//	Форма.Обновить(0);
КонецПроцедуры


//Производит пересчёт всех необходимых данных
Процедура ОбновиНадписи()
	Если Оплачено>Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС")) Тогда
		Оплачено	= Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	КонецЕсли;
	РассмотриВозможностьКредитов();	
	РасчётСкидки(0);
	ПокажиКоличество();
КонецПроцедуры

//Восстановим все параметры по умолчанию, а потом уже 
//решим чего надо закрыть, а чего оставить у данного клиента
Процедура ИзменениеКлиента()
	Если Контрагент = СтарыйКонтрагент Тогда
		РасчётСкидки(0);
		возврат;
	КонецЕсли;
	Если Контрагент.РозничныйКлиент<>1 Тогда
		Сообщить("Клиент ("+Контрагент+") не является розничным покупателем - его нельзя добавлять в этот документ!","!");
		Контрагент = СтарыйКонтрагент;
	КонецЕсли; 
	////////зад 
	Если (Контрагент.НеВклВРасчетПроцентов =1) Тогда
		ДатаОтсчета =Контрагент.ДатаОтсчета;
		ОБоротКонтрагента = 0;
		ПродажаРозница = СоздатьОбъект("Документ.РасходнаяНакладнаяРозница");
		ПродажаРозница.ВыбратьДокументы(ДатаОтсчета,);
		Пока ПродажаРозница.ПолучитьДокумент() = 1 Цикл
			Если ПродажаРозница.Контрагент <> Контрагент Тогда
				Продолжить;
			КонецЕсли;  
			Если ПродажаРозница.Проведен() = 0 Тогда
				Продолжить;
			КонецЕсли;   
			
			ПродажаРозница.выбратьСтроки();
			Пока ПродажаРозница.ПолучитьСтроку() = 1 Цикл 
				ОборотКонтрагента = ОборотКонтрагента + ПродажаРозница.СУмма; //если сумма вкл. НДС.. Иначе -?
				
				
				
			КонецЦикла;
		КонецЦикла; 
	Иначе
		ОборотКонтрагента = 0;
	КонецЕсли;
	// узнаем обороты этого клиента по регистру продажи  
	//	Продажи = СоздатьОбъект("Регистр.Продажи"); 
	//	Продажи.ИспользоватьПериод(2007);
	//	ОборотКонтрагента = Продажи.Итог(,Контрагент,,,"ПродСтоимость");   
	
	СуммаНеВкл = Контрагент.СуммаНеВКл;
	Если (ОБоротКонтрагента>= СуммаНеВкл) И (Контрагент.НеВклВРасчетПроцентов =1) Тогда
		//	Контрагент.НеВклВРасчетПроцентов = 0;  
		Кодконтрагента = Контрагент.Код;
		Конт = СоздатьОбъект("Справочник.Контрагенты");
		Конт.НайтиПоКоду(КодКонтрагента,);
		Конт.НеВклВРасчетПроцентов = 0;
		Конт.записать();
		Предупреждение("Оборот контрагента равен " + ОборотКонтрагента   + РазделительСтрок +
		"Сумма для начисления процентов равна " + СуммаНеВКл + РазделительСтрок+
		"Необходимая сумма для начисления процентов достигнута!" + РазделительСтрок+
		"Опция 'Не включать в расчет процентов' отключена");
	КонецЕсли;
	Если  (Контрагент.НеВклВРасчетПроцентов =1)И  (ОБоротКонтрагента< СуммаНеВкл) Тогда  
		СуммаА = ОборотКонтрагента;
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			СуммаА = СуммаА+Сумма; // это сумма, кот накопил контрагент вместе с этим документом
		КонецЦикла;   	
		
		Предупреждение("Сумма, необходимая для достижения скидки равна " + (СуммаНеВкл-СуммаА)) ;
	КонецЕсли;
	////////зад
	
	
	
	
	
	
	глПроверьДопДанные(Контрагент,"ДеньРождения");
	Договор	= Контрагент.ОсновнойДоговор;
	ВыданоСоСкидкой	= 0;
	Форма.ВыданоСоСкидкой.Доступность(1);
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	СтарыйКонтрагент= Контрагент; 
	
	//++Ерошенко 03.05.2007
	ПроверитьКонтрагентаВДокументе(Контрагент); 
	//--Ерошенко
	
	Если Контрагент.Проект.Выбран() = 1 Тогда
		Проект = Контрагент.Проект;
	КонецЕсли; 
	
	ОбновитьБонус();
	УстановитьДоступностьФлагБонусы();
КонецПроцедуры

//-----------------------------------------------      
Функция СуммаПрописьюРасхНакл()
	Перем ПолнаяСумма;
	
	ПолнаяСумма = Итог("Сумма");
    ВалютаПечати=Валюта;
	Если ФС.СуществуетФайл(КаталогИБ()+ВалютаПечати.ИмяФайлаПрописи)=1 Тогда
		Пропись(ВалютаПечати.ИмяФайлаПрописи);
	КонецЕсли;
	СтрокаСуммы=Формат(ПолнаяСумма,"ЧПДС");
	Пропись("");
	Возврат СтрокаСуммы;
КонецФункции
               
Функция ПолучитьДанныеБалловДляЧека()
	ВыбВидВзаимодействияРозница = Перечисление.ВидВзаимодействия.Бонусы;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	ВремПокупатели_розница=ВремРегистры.Покупатели_розница;
	ВремПокупатели_розница.ВременныйРасчет(1);	
	Если ВремРегистры.Актуальность() = 0 Тогда
		ВремРегистры.Актуальность(1);
		Если ПолучитьДатуТА() > ДатаДок Тогда 
			мТекДата = ДатаДок;
			ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
		Иначе                                                    
			мТекДата = ПолучитьДатуТА();
			ВремРегистры.РассчитатьРегистрыНа(ПолучитьДатуТА());
		КонецЕсли;
	КонецЕсли;
	    
	ОтборДок 	= ТекущийДокумент();
	мКлиент 	= Контрагент;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с мТекДата по мТекДата;
	|ВидВзаимодействия 	= Регистр.Покупатели_розница.ВидВзаимодействия;
	|Клиент 			= Регистр.Покупатели_розница.Контрагент;
	|СуммаРуб 			= Регистр.Покупатели_розница.СуммаРуб;
	|ТекущийДокумент 	= Регистр.Покупатели_розница.ТекущийДокумент;
	|Функция СуммаРубРасход = Расход(СуммаРуб);
	|Функция СуммаРубПриход = Приход(СуммаРуб);
	|Функция СуммаРубКонОст = КонОст(СуммаРуб);
	|Функция СуммаРубНачОст = НачОст(СуммаРуб);
	|Группировка День;
	|Группировка ТекущийДокумент;
	//|Условие(ТекущийДокумент 	= ОтборДок);
	|Условие(Клиент = мКлиент);
	|Условие(ВидВзаимодействия 	= ВыбВидВзаимодействияРозница);
	|";//}}ЗАПРОС
	
	БалловНачислено = 0;
	БалловПотрачено = 0;
	БалловВсего 	= 0;
	БалловБыло		= 0;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 1 Тогда
		Пока Запрос.Группировка(1) = 1 Цикл   
			//БалловВсего = Запрос.СуммаРубКонОст; 
			БалловБыло 	= Запрос.СуммаРубНачОст;
			
			Пока Запрос.Группировка(2) = 1 Цикл
				Если Запрос.ТекущийДокумент = ОтборДок Тогда 
					БалловНачислено = Запрос.СуммаРубПриход;
					//БалловПотрачено = Запрос.СуммаРубРасход;
					//БалловВсего 	= Запрос.СуммаРубКонОст;
					//БалловВсего 	= Запрос.СуммаРубКонОст; 
					//БалловБыло 		= Запрос.СуммаРубНачОст;
				Иначе 
					Если (Запрос.ТекущийДокумент.ДатаДок < ДатаДок) Тогда
						БалловБыло = БалловБыло + Запрос.СуммаРубПриход;
						БалловБыло = БалловБыло - Запрос.СуммаРубРасход;   
					КонецЕсли;
				КонецЕсли;   
			КонецЦикла;  
			
		КонецЦикла;
	КонецЕсли;	
	

	ПараметрыБонуса = СоздатьОбъект("СписокЗначений"); 
	ПараметрыБонуса.Установить("БалловБыло"    		, БалловБыло);
	ПараметрыБонуса.Установить("БалловНачислено"    , БалловНачислено);
	ПараметрыБонуса.Установить("БалловПотрачено"    , БалловПотрачено);
	ПараметрыБонуса.Установить("БалловВсего"        , БалловВсего);
	
	Возврат ПараметрыБонуса;
КонецФункции

Процедура ПечатьТовЧек(Интернет = 0)  
	
	Если ПроверитьПроведение() = 0 Тогда
 		Возврат;
 	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	Если Интернет = 0 Тогда
		Таб.ИсходнаяТаблица("ТовЧек"); 
	ИначеЕсли Интернет = 2 Тогда
		Таб.ИсходнаяТаблица("ТовЧекБонусы");	
	Иначе	
		Таб.ИсходнаяТаблица("ТовЧекИнтернет");
	КонецЕсли;
	
	
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	ВыбратьСтроки();
	ном=0;
	Пока ПолучитьСтроку()=1 Цикл
		ном=ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	ПечИтогоСумма=СуммаПрописьюРасхНакл(); 
	
	Если Интернет = 2 Тогда
		ПараметрыБонуса = ПолучитьДанныеБалловДляЧека();          
		БалловБыло		= ПараметрыБонуса.Получить("БалловБыло");
		БалловНачислено = ПараметрыБонуса.Получить("БалловНачислено");
		//БалловПотрачено = ПараметрыБонуса.Получить("БалловПотрачено");
		БалловПотрачено	= ОплаченоБонусом;
		БалловВсего 	= ПараметрыБонуса.Получить("БалловВсего"); 
		БалловВсего 	= БалловБыло + БалловНачислено - ОплаченоБонусом;
	КонецЕсли;

	Таб.ВывестиСекцию("Подвал");
	
	Если Интернет = 1 Тогда
		Таб.ВывестиСекцию("Секция_ПодвалИнтернетМагазин");
	КонецЕсли;	
	
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Товарный чек",""); 
	
	//++Ерошенко 17.05.2007
	СохранитьТаблицу(Таб,ТекущийДокумент()); 
	//--Ерошенко
	
КонецПроцедуры 

Процедура ПечатьСборки()  
	
	//Если ПроверитьПроведение() = 0 Тогда
 	//	Возврат;
 	//КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Сборка"); 
		
	                 
	НаОсновании = "на основании №" + ДокОснование.НомерДок + " от " + ДокОснование.ДатаДок; 
	Покупатель = "Покупатель: "+Контрагент;     
	
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,Таб.ВысотаТаблицы(),0);
	ВыбратьСтроки();
	ном=0;
	Пока ПолучитьСтроку()=1 Цикл
		ном=ном+1;
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	
	Выписал 		= "Выписал:___________________/______________/";	 
	Укомплектовал 	= "Укомплектовал:___________________/______________/";	
	Проверил 		= "Проверил:___________________/______________/";	
	
	Таб.ВывестиСекцию("Подвал");
	
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Сборка",""); 
	
	//++Ерошенко 17.05.2007
	//СохранитьТаблицу(Таб,ТекущийДокумент()); 
	//--Ерошенко
	
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьТовЧек(); 
	ИначеЕсли НомерТекущейФормы = 2 Тогда	
		ПечатьТовЧек(2);
	ИначеЕсли НомерТекущейФормы = 3 Тогда	
		ПечатьТовЧек(1);
	ИначеЕсли НомерТекущейФормы = 4 Тогда	
		ПечатьСборки();	
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

Функция ВыборПродавца()
	
	СписокПродавцов	= "";	
	СписокПродавцов = СоздатьОбъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник.Пользователи");
	Спр.ВыбратьЭлементы();
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
		Если Спр.Родитель.Наименование = "Продавцы" тогда
			Если Спр.ОсновнойСклад = глПользователь.ОсновнойСклад тогда
			 	СписокПродавцов.ДобавитьЗначение(Спр.ТекущийЭлемент());
			КонецЕсли;		 	
		КонецЕсли;	
	КонецЦикла;	
	__Автор = Автор;        
	Если СписокПродавцов.ВыбратьЗначение(__Автор,"Автор документа") = 1 тогда
		Возврат __Автор;
	иначе 
		Возврат "";
	КонецЕсли;
КонецФункции


//******************************************************************************
//		ШТАТНЫЕ ПРОЦЕДУРЫ

Процедура ВводНового(Скопирован)
	
	глЗаполнитьШапку(Контекст, Скопирован,"Продажа");
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	Если ПустоеЗначение(Склад) = 1 Тогда
		УстановитьНовыйНомер("Рн"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
	Иначе
		УстановитьНовыйНомер("Рн"+Склад.ПрефиксНомеровДокументов);
	КонецЕсли;	
//******************************************************************************
	//Дополнения для продавцов
	Если (НазваниеНабораПрав() = "Продавец_розница") или (НазваниеНабораПрав() = "Администратор_магазина") тогда
		Форма.Склад.Доступность(0);
		Форма.ТипЦен.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.НомерДок.Доступность(0);
		//Форма.ЦенаСоСкидкой.Доступность(0);
		Форма.Сумма.Доступность(0);
		Форма.Единица.Доступность(0);   
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
		
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;	
	АвторЗаявки 		= Автор; 
	флНачислитьБонусы 	= 1;      
	АналитикаПроценты 	= ""; 
	флИндивидРасчет 	= 0;
КонецПроцедуры
       
Процедура ОбновитьБонус()   
	Если Выбран() = 1 Тогда
		Бонус = глФРМ(глПолучитьБонусыКлиента(Контрагент, ПолучитьПозицию(), 1),);
	Иначе
		Бонус = глФРМ(глПолучитьБонусыКлиента(Контрагент, ДатаДок),);  
	КонецЕсли;	
КонецПроцедуры	

Процедура ПриОткрытии()
	
	если глПроверкаПравДоступа(Контекст)=0 Тогда
		Предупреждение("У вас нет прав на доступ к данному документу!",30);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;  
	
	ПриЗаписиПерепроводить(1);
	Форма.Номенклатура.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ЦенаСоСкидкой.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Оплачено.ВыполнятьФормулуТолькоПриИзменении(1);
	ПроверкаКредитов(1);
	если ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда
		ВремЗалог=ДокОснование.Оплачено;
		Если ВремЗалог<>Залог тогда
			Залог=ВремЗалог;
		КонецЕсли;
	КонецЕсли;
	
	//++Валерий МЭТР: механизм деления скидки
	Если ВыданоСоСкидкой = 0 Тогда
		Скидка = 0;
	//	СкидкаСразу = 0;
	//ИначеЕсли СкидкаСразу = 0 Тогда
	//	СкидкаСразу = Скидка;
	КонецЕсли;		
	//--Валерий МЭТР: механизм деления скидки
	
	РасчётСкидки(0);
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	//проставим права продавцов
	Если НазваниеНабораПрав()="Продавец_розница" Тогда
		Форма.НомерДок.Доступность(0);
	    Форма.Склад.Доступность(0);
	    Форма.ДатаДок.Доступность(0);
	    Форма.ТипЦен.Доступность(0);
	    Форма.Единица.Доступность(0);
	    //Форма.ЦенаСоСкидкой.Доступность(0);
	    Форма.Сумма.Доступность(0);
	//++Горлач
		форма.кнДействия.Доступность(0);
	//--Горлач
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
	    Форма.кнОснование.Доступность(0);
	    Форма.кнХОснование.Доступность(0);
	КонецЕсли; 
	
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);	
	  
	ОбновитьБонус(); 
	УстановитьДоступностьФлагБонусы();
	ПриИзмененииИндивидРасчет(1);
	
	Если (сокрЛП(ИмяПользователя())="Кожемякин") Тогда
		Форма.флДСБ.Видимость(1); 
	Иначе
		Форма.флДСБ.Видимость(0);
	КонецЕсли;
КонецПроцедуры    
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		//ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	ВыбратьСтроки();
	
	Пока получитьСтроку()=1 Цикл
	    глПересчетТЧ_розница(Контекст,"Количество");
	КонецЦикла;
	ОбновиНадписи();
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);

КонецПроцедуры // ПоКнопкеПодбор()
                     
Функция ПолучитьОснование(ТекДокОснование) 
	Если ПустоеЗначение(ТекДокОснование.ДокОснование) = 1 Тогда
		Возврат ТекДокОснование.ТекущийДокумент();
	Иначе
		Возврат	ПолучитьОснование(ТекДокОснование.ДокОснование);
	КонецЕсли;	
КонецФункции	
         
Функция ПолучитьДокЗалога(ТекОснование)
	Если (ТекОснование.Вид() = "ЗаявкаКлиентаРозница") Тогда  
		ДокПодч = СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ТекОснование);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид() = "ПолучениеЗалога_Розница") и (ДокПодч.Проведен() = 1) и (ДокПодч.Проект.Код = "00028") Тогда     
				Возврат ДокПодч.ТекущийДокумент();	
			КонецЕсли;
			Если (ДокПодч.Вид() = "ЗаявкаКлиентаРозница") Тогда   
				Возврат ПолучитьДокЗалога(ДокПодч.ТекущийДокумент());	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Возврат "";
КонецФункции

Функция ЕстьПолучениеЗалогаССайта()
	Рез = 0;
	 
	ТекОснование = ПолучитьОснование(Контекст);
	
	ДокЗалог = ПолучитьДокЗалога(ТекОснование); 
	 
	Если ПустоеЗначение(ДокЗалог) = 0 Тогда
		Рез = 1;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции	

Процедура ПриЗаписи()
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	          
	Если (ЕстьПолучениеЗалогаССайта() = 1) и (Не (Проект.Код = "00028")) Тогда  
		Предупреждение("Есть получение залога с сайта, проект должен быть Эксперт Инт. магазин (эквайринг)");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	
	ОбновиНадписи();
	Если (Оплачено + ОплаченоБонусом) <>(Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"))) Тогда
		ЕстьДолг=1;
	Иначе
		ЕстьДолг=0;
	КонецЕсли;
	проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
	ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.РеализацияРозница)+сокрЛП(склад);
	Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
	    ЭтоРозница=проба.ТекущийЭлемент();
	Иначе
		проба.новый();
		проба.наименование=ЭР;
		проба.записать();
		ЭтоРозница=проба.ТекущийЭлемент();
	КонецЕсли;  

	Если ПустоеЗначение(АналитикаПроценты) = 1 Тогда
		АналитикаПроценты = глПолучитьАналитику(Контекст);
	КонецЕсли;

	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);	
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);	
КонецПроцедуры

Процедура ВводНаОсновании(ДокумОснование)
	Если ДокумОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
		ДокОснование	= ДокумОснование;
		Фирма			= ДокОснование.Фирма;
		ЮрЛицо			= ДокОснование.ЮрЛицо;
		Автор			= глПользователь;
		АвторЗаявки 	= ДокумОснование.Автор;
		КодОперации		= глКО.Продажа;
		Контрагент 		= ДокОснование.Контрагент;
		Склад			= ДокОснование.Склад;
		Договор			= ДокОснование.Договор;
		Валюта			= ДокОснование.Валюта;
		Курс			= ДокОснование.Курс;
		УчитыватьНДС	= ДокОснование.УчитыватьНДС;
		СуммаВклНДС		= ДокОснование.СуммаВклНДС;
		УчитыватьНП		= ДокОснование.УчитыватьНП;
		СуммаВклНП		= ДокОснование.СуммаВклНП;
		ТипЦен			= ДокОснование.ТипЦен;
		Скидка			= ДокОснование.Скидка;
		ВыданоСоСкидкой = ДокОснование.ВыданоСоСкидкой;
		Объект			= ДокОснование.Объект;
		Оплачено		= ДокОснование.Оплачено;
		флНачислитьБонусы = ДокОснование.флНачислитьБонусы;
		ОплаченоБонусом	= ДокОснование.ОплаченоБонусом;
		флИндивидРасчет = ДокОснование.флИндивидРасчет;
		
		Если ПустоеЗначение(Склад) = 1 Тогда
			УстановитьНовыйНомер("Рн"+глПользователь.ОсновнойСклад.ПрефиксНомеровДокументов); 
		Иначе
			УстановитьНовыйНомер("Рн"+Склад.ПрефиксНомеровДокументов);
		КонецЕсли; 
		//полуим список товара уже отгруженного
		ТЗ=СоздатьОбъект("ТаблицаЗначений");
		ТЗ.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
		ТЗ.НоваяКолонка("Количество","Число",15,2);
		ДокПодч=СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокумОснование);
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если ДокПодч.Вид() = "РасходнаяНакладнаяРозница" Тогда
				Если (ДокПодч.ПометкаУдаления() = 0) 
				//и (ДокПодч.Проведен() = 1) 
				Тогда
					ДокПодч.ВыбратьСтроки();
					Пока ДокПодч.ПолучитьСтроку() = 1 Цикл
						ТЗ.НоваяСтрока();
						ТЗ.Номенклатура = ДокПодч.Номенклатура;
						ТЗ.Количество	= ДокПодч.Количество;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
		ТЗ.Свернуть("Номенклатура","Количество");
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			Стр = "";
			Кол = "";
			ТекКоличество = ДокОснование.Количество;
			Если ТЗ.НайтиЗначение(ДокОснование.Номенклатура,Стр,Кол) = 1 Тогда
				КолПродано = ТЗ.ПолучитьЗначение(Стр, "Количество");
				Если КолПродано >= ТекКоличество Тогда
					КолПродано = КолПродано - ТекКоличество;
					ТЗ.УстановитьЗначение(Стр, "Количество", КолПродано);
					Продолжить;
				Иначе
					ТекКоличество = ТекКоличество - КолПродано;
					ТЗ.УстановитьЗначение(Стр, "Количество", 0);
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока();
			Номенклатура 	= ДокОснование.Номенклатура;
			Количество 		= ТекКоличество;
			Единица			= ДокОснование.Единица;
			Коэффициент		= ДокОснование.Коэффициент;
			Цена 			= ДокОснование.Цена;
			ЦенаСоСкидкой	= ДокОснование.ЦенаСоСкидкой;
			Сумма			= ДокОснование.Сумма;
			СтавкаНДС		= ДокОснование.СтавкаНДС;
			СуммаНДС		= ДокОснование.СуммаНДС;
			СтавкаНП		= ДокОснование.СтавкаНП;
			СуммаНП			= ДокОснование.СуммаНП;
			СуммаСкидки		= ДокОснование.СуммаСкидки;
			СуммаБезСкидки	= ДокОснование.СуммаБезСкидки;
			СуммаНДСбезСкидки = ДокОснование.СуммаНДСбезСкидки; 
			глПересчетТЧ_розница(Контекст,"Количество");
		КонецЦикла;
	Иначе
		ДокОснование	= ДокумОснование;		
	КонецЕсли;
	Проект = ДокОснование.Проект;
	РасчётСкидки(1);
	ПроверкаКредитов(1);
	//******************************************************************************
	//Дополнения для продавцов
	Если (НазваниеНабораПрав() = "Продавец_розница") или (НазваниеНабораПрав() = "Администратор_магазина") тогда
		Форма.Склад.Доступность(0);
		Форма.ТипЦен.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.НомерДок.Доступность(0);
		Форма.ЦенаСоСкидкой.Доступность(0);
		Форма.Сумма.Доступность(0);
		Форма.Единица.Доступность(0);
		Если МожноВДолг=1 Тогда
			Форма.Оплачено.Доступность(1);
		Иначе
			//Форма.Оплачено.Доступность(0);
		КонецЕсли;
		
		_Автор = ВыборПродавца();
		Если ПустоеЗначение(_Автор) = 0 тогда
			Автор  = _Автор;
		иначе 
			Предупреждение("Продавец не выбран !
			|Документ не может быть введен!", 5);
			СтатусВозврата(0); Возврат;
		КонецЕсли;	
	КонецЕсли;
	
	Форма.Обновить();
	//Если ДокумОснование.Вид() = "СчетБнРозница" Тогда
	//	Если ПустоеЗначение(ДокумОснование.АвторЗаявки) = 0 Тогда
	//		АвторЗаявки = ДокумОснование.АвторЗаявки;
	//	Иначе 
	//		АвторЗаявки = ДокумОснование.Автор;
	//	КонецЕсли;	
	//КонецЕсли;

	АвторЗаявки = глПолучитьАвтораЗаявки(Контекст);	
	Если ПустоеЗначение(АвторЗаявки) = 1 Тогда
		АвторЗаявки = Автор;	
	КонецЕсли;	
КонецПроцедуры

Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
КонецПроцедуры //ПоКнопкеОснование()

//Обрабатываем данные с ридера
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные);
	Scaner.EventNumber=Число(Данные);
	Карта = Scaner.ScanData;	//Данные со штрихкода
	Scaner.DeleteEvent();
	Scaner.DataEventEnabled = 1;
	
	Если ПустоеЗначение(Карта) = 0 тогда
		//Если первые 2 символа "00" тогда - это контрагент 
		Если (лев(карта,2)="00") или (сокрЛП(карта)="29051980") или (сокрЛП(карта)="29051981") или (сокрЛП(карта)="29051982") тогда	//29051980 Для ЧЛ со скидкой, т.к. Корыхалов!!! забыл его проставить по основной схеме.
			Контр=СоздатьОбъект("Справочник.Контрагенты");
			если Контр.ВыбратьЭлементыПоРеквизиту("ШтрихКарта", сокрЛП(карта), 0)=1 тогда
				контр.ПолучитьЭлемент();
				Если Контр.ТекущийЭлемент()=Контрагент Тогда	//всё ОК, возможна работа в кредит
					Форма.Оплачено.Доступность(1);
					сообщить("Теперь возможна продажа в кредит");
					МожноВДолг=1;
					РасчётСкидки(1);
					ОбновиНадписи();
				Иначе
					Форма.Оплачено.Доступность(1);
					Контрагент	= Контр.ТекущийЭлемент();
					МожноВДолг=1;
					РасчётСкидки(1);
					ОбновиНадписи();
				КонецЕсли;
			иначе
				сообщить("Не смогли найти соответствие для клиента, ЗВОНИТЕ В ОФИС!");
				возврат;
			КонецЕсли;
		//++Валерий МЭТР: повышение
		Иначе 
			// Проверяем код авторизации
			СпрПользователи = СоздатьОбъект("Справочник.Пользователи");
			Если СпрПользователи.ВыбратьЭлементыПоРеквизиту("КартаАвторизации", сокрЛП(карта), 0)=1 тогда				
				Пока СпрПользователи.ПолучитьЭлемент() = 1 Цикл
					Если СпрПользователи.ТекущийЭлемент().Полномочия.Наименование = "Полные полномочия" Тогда
						Сообщить("Обнаружена карта пользователя <"+СпрПользователи.ТекущийЭлемент().Наименование+">! Проведение документа разрешено.");
						КодАвторизации = Карта;
						Прервать;
					Иначе
						Сообщить("Обнаружена карта пользователя <"+СпрПользователи.ТекущийЭлемент().Наименование+">! Для проведения документа прав недостаточно!");
					КонецЕсли;
				КонецЦикла;
			Иначе
				Сообщить("Обнаруженная карта не привязана ни к одному из пользователей!");
			КонецЕсли;
		КонецЕсли;       		
		//Если Лев(Карта,2)="99" Тогда	// это продавец
			//Прод = СоздатьОбъект("Справочник.Пользователи");
			//Если Прод.ВыбратьЭлементыПоРеквизиту("КартаАвторизации", сокрЛП(Карта),0) = 1 тогда
			//	Прод.ПолучитьЭлемент();
			//	Сообщить(Формат(Прод,"");
			//Иначе
			//	Сообщить("Не смогли найти соответствие для вашей карты, ЗВОНИТЕ В ОФИС!");
			//	возврат;
			//КонецЕсли; 
		//Иначе
		//	Сообщить("Внимание! Кодировка карты не принадлежит продавцу нашей фирмы!");
		//	Возврат;
		//КонецЕсли;
		//--Валерий МЭТР: повышение  
		
	КонецЕсли;  
	
КонецПроцедуры       
                
Функция Чек(ЧекБонус)
	
	Перем НомерЧека;
	
	СписокТоваров = СоздатьОбъект("ТаблицаЗначений");
	СписокТоваров.НоваяКолонка("ТовНаим"   , "Строка");
	СписокТоваров.НоваяКолонка("Цена"      , "Число");
	СписокТоваров.НоваяКолонка("Количество", "Число"); 
	СписокТоваров.НоваяКолонка("СуммаСкидки", "Число");
	СписокТоваров.НоваяКолонка("СуммаТовара", "Число");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		СписокТоваров.НоваяСтрока();
		СписокТоваров.ТовНаим    = Номенклатура.Наименование;
		Если ЦенаСоСкидкой > Цена Тогда 
			СписокТоваров.Цена       	= ЦенаСоСкидкой;
		Иначе	
			СписокТоваров.Цена       	= Цена;//СуммаБезСкидки/Количество;//Цена;
		КонецЕсли;
		СписокТоваров.Количество = Количество;
		СписокТоваров.СуммаСкидки = СуммаСкидки;
		СписокТоваров.СуммаТовара = СуммаБезСкидки;
	КонецЦикла;              
	
	//Если ЧекБонус = 1 Тогда    
	//	ПараметрыБонуса = глПолучитьДанныеБалловДляЧека(Контекст);		
	//Иначе
		ПараметрыБонуса = СоздатьОбъект("СписокЗначений");
		ПараметрыБонуса.Установить("БалловНачислено"    , 0);
		ПараметрыБонуса.Установить("БалловПотрачено"    , ОплаченоБонусом);
		ПараметрыБонуса.Установить("БалловВсего"        , 0);
	//КонецЕсли;		
	
	Получено  = Итог("Сумма"); 
	ТекСкидка = Скидка;
	Если ОплатаПоКредитке = 1 Тогда
		ТипОплаты = 3;
		ПризнВозврата = 0;
		
		ТекЧекПробитККМ  = глФРПечататьЧек(СписокТоваров, Итог("Сумма"), Получено, ТекСкидка, ПризнВозврата, Склад.НомерСекции, НомерЧека, Автор, НомерДок, ТипОплаты, Склад.ПутьДляПечатиЧеков, Склад.ПутьДляПечатиЧековЛок, ЧекБонус, ПараметрыБонуса);
		
		Если ТекЧекПробитККМ = 1 Тогда
			//НомерЧекаККМ = НомерЧека;
			//Попытка
			//	ПриЗаписиПерепроводить(0);
			//	Записать();	
			//	ПриЗаписиПерепроводить(1);
			//Исключение 
			//	Сообщить("Не удалось сохранить номер чека. " + ОписаниеОшибки());
			//КонецПопытки;	
			//// Откроем денежный ящик, если он подключен
			//глДПОткрытьДенежныйЯщик();
			
		КонецЕсли;
	Иначе 
		ТипОплаты = 0;
		Если ВвестиЧисло(Получено,"Укажите полученную сумму",15,2) = 1 Тогда
			
			ПризнВозврата = 0;
			
			ТекЧекПробитККМ  = глФРПечататьЧек(СписокТоваров, Итог("Сумма"), Получено, ТекСкидка, ПризнВозврата, Склад.НомерСекции, НомерЧека, Автор, НомерДок, ТипОплаты, Склад.ПутьДляПечатиЧеков, Склад.ПутьДляПечатиЧековЛок, ЧекБонус, ПараметрыБонуса);
			
			Если ТекЧекПробитККМ = 1 Тогда
				//НомерЧекаККМ = НомерЧека;
				//Попытка
				//	//СправочникЧеки = СоздатьОбъект("Справочник.Чеки");
				//	//СправочникЧеки.Новый();
				//	//СправочникЧеки.ЧекПробитККМ 	= 1;
				//	//СправочникЧеки.НомерЧекаККМ 	= НомерЧекаККМ;
				//	//СправочникЧеки.Документ		 	= ТекущийДокумент();
				//	//СправочникЧеки.Записать();
				//	
				//	//Попытка
				//		ПриЗаписиПерепроводить(0);
				//		Записать();	
				//		ПриЗаписиПерепроводить(1);
				//Исключение 
				//	Сообщить("Не удалось сохранить номер чека. " + ОписаниеОшибки());
				//КонецПопытки;	
				//// Откроем денежный ящик, если он подключен
				//глДПОткрытьДенежныйЯщик();
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
	
	Возврат ЧекПробитККМ;
	
КонецФункции // Чек()

Функция ПроверитьПроведение()
	Если (Проведен() = 0) и (глПользователь.Наименование <> "Кудряшова") и (глПользователь.Наименование <> "Кожемякин") Тогда
 		Предупреждение("Необходимо провести документ!");  
 		Возврат 0;	
 	Иначе
 		Возврат 1;
 	КонецЕсли;
КонецФункции	

Процедура ПробитьЧек(ЧекБонус = 0)
	//******************************************************************************
 	// пробьем чек на ККМ
 	
 	Если Выбран() = 0 Тогда
 		Предупреждение("Необходимо записать и провести документ!");
 		Возврат;
 	КонецЕсли;
 	
 	Если ПроверитьПроведение() = 0 Тогда
 		Возврат;
 	КонецЕсли;	
 	
 		
 	//Если глФРВкл = 0 Тогда
 	//	Предупреждение("ККМ в режиме фискального регистратора не подключена!");
 	//Иначе
 		//Если ЧекПробитККМ = 0 Тогда
 			//СпрЧек = глПолучитьЧекДокумента(Контекст);
 			//Если ПустоеЗначение(СпрЧек) = 1 Тогда
 				ТекЧекПробитККМ = Чек(ЧекБонус);
 				//Если ТекЧекПробитККМ = 0 Тогда
 				//	// по каким-то причинам Чек не пробит
 				//	Предупреждение("Чек ККМ не пробит!");
 				//КонецЕсли; 
 			//Иначе
 			//	Предупреждение("По данному документу уже был пробит чек: №" + СпрЧек.НомерЧекаККМ);
 			//КонецЕсли;
 		//Иначе
 			//Предупреждение("По данному документу уже был пробит чек: №" + НомерЧекаККМ);
 			//Предупреждение("По данному документу уже был пробит чек");
 		//КонецЕсли;
 	//КонецЕсли;
 		
КонецПроцедуры

// Валерий МЭТР: повышение
Процедура ПриИзмененииПовышение()	
	КодАвторизации = ПолучитьПустоеЗначение();	
КонецПроцедуры

Процедура СкладПриИзменении()
	УстановитьНовыйНомер("Рн"+Склад.ПрефиксНомеровДокументов); 
КонецПроцедуры
     
//Будем искать по ИНН в ЮрЛицах и ФизЛицах - если найдено, то подставляем владельца (контрагент)
//иначе позволяем заполнить данными, которые потом будут проверены менеджерами руководства (нашим толстопузом).
Процедура ВыбЮрЛицо()
	инн	= 0;
	если ВвестиЧисло(инн,"Введите ИНН юр.лица...",12,0,100)=1 тогда
		если СтрДлина(инн)=10 Тогда	//ищем в юр лицах
			спрЮЛ	= СоздатьОбъект("Справочник.ЮрЛица");
			если спрЮЛ.выбратьЭлементыПоРеквизиту("ИНН",инн,0,0)=1 Тогда
				спрЮЛ.получитьЭлемент();
				спр=СоздатьОбъект("Справочник.Контрагенты");
				спр.выбратьЭлементыПоРеквизиту("ЮрФизЛицо",спрЮЛ.текущийЭлемент(),0,0);
				спр.получитьЭлемент();
				КонтрагентЮЛ	= спр.ТекущийЭлемент();
				//ДоговорЮЛ		= КонтрагентЮЛ.ОсновнойДоговор;
				
			Иначе
				Сообщить("Нет такого ИНН...");
				КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
				Возврат;
			КонецЕсли;
		ИначеЕсли СтрДлина(инн)=12 Тогда	//ищем в ФизЛицах
			спрФЛ	= СоздатьОбъект("Справочник.ФизЛица");
			попытка
				если спрЮЛ.выбратьЭлементыПоРеквизиту("ИНН",инн,0,0)=1 Тогда
					спрФЛ.получитьЭлемент();
					спр	= СоздатьОбъект("Справочник.Контрагенты");
					спр.выбратьЭлементыПоРеквизиту("ЮрФизЛицо",спрФЛ.текущийЭлемент(),0,0);
					спр.получитьЭлемент();
					КонтрагентЮЛ	= спр.ТекущийЭлемент();
				Иначе
					Сообщить("Нет такого ИНН...");
					КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
					Возврат;
				КонецЕсли;
			Исключение
				ОчиститьОкноСообщений();
				Сообщить("Внимание! Вы у ИП указали тип контрагента стороннее юрлицо. 
				|	Перезвоните в бухгалтерию по вопросу внесения изменений в данные или проверьте правильность ввода ИНН","!");	
			КонецПопытки;
		Иначе
			Сообщить("Внимание! Введенный ИНН имеет неверную длину... Повторите ввод ИНН!","!!!");
			КонтрагентЮЛ	= ПолучитьПустоеЗначение(КонтрагентЮЛ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Товарный чек";
ТаблицаПечФорм.Кнопка       = "Тов. чек";
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Товарный чек (бонусы)";
ТаблицаПечФорм.Кнопка       = "Тов. чек (бонус)";
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Товарный чек (интернет)";
ТаблицаПечФорм.Кнопка       = "Чек (инт.)";
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Сборочный лист";
ТаблицаПечФорм.Кнопка       = "Сборка";

ДанныеПоДолгам	= "Долги: не обнаружены";
ТекстКлиента	= "";
КодОперации		= Перечисление.КодыОпераций.Продажа;

ТЗ_Долги		= СоздатьОбъект("ТаблицаЗначений");
ТЗ_Проценты		= СоздатьОбъект("ТаблицаЗначений");

Если НазваниеНабораПрав()="Продавец_розница" Тогда	//нельзя по умолчанию - выдавать товар в долг
	МожноВДолг=0;
Иначе
	МожноВДолг=1;
КонецЕсли;

Склад_Темп	= СоздатьОбъект("Справочник.Склады");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
ТЗ			= СоздатьОбъект("ТаблицаЗначений");        

СписокДоступныхПроектов = СоздатьОбъект("СписокЗначений");
СпрПроекты = СоздатьОбъект("Справочник.Проекты");
Если СпрПроекты.НайтиПоНаименованию("Эксперт Инт. магазин нал") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;

Если СпрПроекты.НайтиПоКоду("00026") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;

Если СпрПроекты.НайтиПоКоду("00028") = 1 Тогда
	СписокДоступныхПроектов.ДобавитьЗначение(СпрПроекты.ТекущийЭлемент());
КОнецЕсли;
              
//++Горлач
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
//Инициализирум список действий по кнопке "Действия"
СписокДействий = СоздатьОбъект("СписокЗначений");
СписокДействий.ДобавитьЗначение("Структура подчиненности");
СписокДействий.ДобавитьЗначение("Отчет о движениях документа");  
СписокДействий.ДобавитьЗначение("Ввести на основании");
СписокДействий.ДобавитьЗначение("Скопировать в...");         
//--Горлач