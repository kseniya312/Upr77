Перем СписокДействий,СтараяДатаОкончанияТранспортировки,СтараяДатаНачалаТранспортировки
,СтараяВремяЧасовНачалаТранспортировки,СтараяВремяМинутНачалаТранспортировки,СтараяВремяЧасовОкончанияТранспортировки
,СтараяВремяМинутОкончанияТранспортировки,СтарыйКонтрагент; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Процедура СогласованПриИзменении() Далее

Процедура ПриЗаписи()
	Если (Выбран() = 0) или (ПустоеЗначение(ВесЗаявкиВнутриДня) = 1) Тогда
		ТекущееЗначение = 0;
		ДокументыЗаявки = СоздатьОбъект("Документ.ЗаявкаНаАвтотранспорт");
		ДокументыЗаявки.ВыбратьДокументы(НачМесяца(ДатаНачалаТранспортировки-14),КонМесяца(ДатаНачалаТранспортировки+14));
		Пока ДокументыЗаявки.ПолучитьДокумент() = 1 Цикл
			Если (ДокументыЗаявки.Автомобиль = Автомобиль) и (ДокументыЗаявки.ДатаНачалаТранспортировки = ДатаНачалаТранспортировки) Тогда
				Если ДокументыЗаявки.ВесЗаявкиВнутриДня > ТекущееЗначение Тогда 
					ТекущееЗначение = ДокументыЗаявки.ВесЗаявкиВнутриДня;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ВесЗаявкиВнутриДня = ТекущееЗначение + 1;
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры 	
    
Функция ПолучитьНомераЗаявок()  
	НомераЗаявок = "";
	Если Документ.Выбран() = 1 Тогда
		ТаблицаЗаявок 		= СоздатьОбъект("ТаблицаЗначений");
		ДокПодч = СоздатьОбъект("Документ");
		ДокПодч.ВыбратьПодчиненныеДокументы(,,Документ.ТекущийДокумент());  
		Пока ДокПодч.ПолучитьДокумент() = 1 Цикл
			Если (ДокПодч.Вид() = "ЗаявкаПокупателя") и (ДокПодч.Проведен() = 1) Тогда
				
				
				Если ДокПодч.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
					НомераЗаявок = НомераЗаявок + ДокПодч.НомерДок + "; "
				КонецЕсли;	
				
				
				
			КонецЕсли;  
		КонецЦикла;
	КонецЕсли;
	Возврат НомераЗаявок;
КонецФункции

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	перем ав,Основание;
		
	Склад = ДокументОснование.Склад;
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	//Клиент = ДокументОснование.Контрагент;
	//ДокументОснование.ВыбратьСтроки();
		
	// если документа - основания нет, позволяем выбрать его
	//Основание = глВыбратьОснование(Контекст);
	Основание = ДокументОснование;
	Если ПустоеЗначение(Основание) = 0 Тогда
		НоваяСтрока();
		Документ = Основание;
		ТекстОснования = глПредставлениеДокумента(Документ);
		Если Основание.Вид() <> "ПеремещениеТМЦ_Розница" Тогда
			Если ПустоеЗначение(Клиент1) = 1 Тогда
				глЗаполнитьШапкуНаОсн(Контекст,Основание);
				Клиент1 = Основание.Контрагент;
			КонецЕсли;  
		КонецЕсли;
		Если Основание.Вид() = "ЗаявкаПокупателя" Тогда 
			Если Основание.ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
				КонечнаяТочка = Основание.Комментарий;
			КонецЕсли;	
		ИначеЕсли Основание.Вид() = "ПеремещениеТМЦ_Розница" Тогда
			Если ПустоеЗначение(КонечнаяТочка) = 1 Тогда
				КонечнаяТочка = "" + Основание.СкладПолучатель;
			КонецЕсли;
		КонецЕсли;	
		Если ПустоеЗначение(Клиент) = 1 Тогда
			//Клиент = Основание.Контрагент;
			НачальнаяТочка = ""+ Основание.Склад;
			СтарыйКонтрагент	= Клиент;
		КонецЕсли;
		Если ПустоеЗначение(Комментарий) = 1 Тогда
			Комментарий 		= Основание.Комментарий;
		КонецЕсли;	
	КонецЕсли;
	
	глЗаполнитьШапку(Контекст, 1);
	Склад = глПользователь.ОсновнойСклад;
	ДатаНачалаТранспортировки 			= ТекущаяДата(); 
	ДатаОкончанияТранспортировки 		= ТекущаяДата();
	ВремяЧасовНачалаТранспортировки 	= 9;
	ВремяЧасовОкончанияТранспортировки 	= 9;
	ДатаВремяСозданиеЗаявки 			= "" + ТекущаяДата() +" "+ ТекущееВремя();
	
КонецПроцедуры // ВводНаОсновании()


//======================================================================
Процедура ДатаОкончанияТранспортировкиПриИзменении()
	Если СтараяДатаОкончанияТранспортировки <> ДатаОкончанияТранспортировки Тогда
		флСогласован = 0;
		СогласованПриИзменении();
	КонецЕсли;
	Если ДатаОкончанияТранспортировки < ДатаНачалаТранспортировки Тогда
		Сообщить("Дата окончания не должна быть меньше даты начала.");
		ДатаОкончанияТранспортировки = СтараяДатаОкончанияТранспортировки;
	Иначе	
		СтараяДатаОкончанияТранспортировки = ДатаОкончанияТранспортировки;
	КонецЕсли;
КонецПроцедуры // ДатаОкончанияТранспортировкиПриИзменении

//======================================================================
Процедура ДатаНачалаТранспортировкиПриИзменении()
	Если СтараяДатаНачалаТранспортировки <> ДатаНачалаТранспортировки Тогда
		флСогласован = 0;
		СогласованПриИзменении();
	КонецЕсли;	
	Если ДатаНачалаТранспортировки < ДатаНачалаТранспортировки Тогда
		Сообщить("Дата окончания не должна быть меньше даты начала.");
		ДатаНачалаТранспортировки = СтараяДатаНачалаТранспортировки;
	Иначе
		СтараяДатаНачалаТранспортировки = ДатаНачалаТранспортировки;
	КонецЕсли;
КонецПроцедуры // ДатаНачалаТранспортировкиПриИзменении

//======================================================================
Процедура ВремяМинутНачалаТранспортировкиПриИзменении()
	Если (ВремяМинутНачалаТранспортировки > 60) или (ВремяМинутНачалаТранспортировки < 0) Тогда
		Сообщить("Минуты должны быть в диапазоне от 0 до 60");
		ВремяМинутНачалаТранспортировки = СтараяВремяМинутНачалаТранспортировки;
	Иначе
		Если (ДатаОкончанияТранспортировки = ДатаНачалаТранспортировки) и (ВремяЧасовНачалаТранспортировки = ВремяЧасовОкончанияТранспортировки) 
		и (ВремяМинутНачалаТранспортировки > ВремяМинутОкончанияТранспортировки) Тогда
			Сообщить("Минуты начала транспортировки должны быть меньше минут окончания транспортировки.");
			ВремяМинутНачалаТранспортировки = СтараяВремяМинутНачалаТранспортировки;
		Иначе
			СтараяВремяМинутНачалаТранспортировки = ВремяМинутНачалаТранспортировки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВремяМинутНачалаТранспортировкиПриИзменении

//======================================================================
Процедура ВремяЧасовНачалаТранспортировкиПриИзменении()
	Если (ВремяЧасовНачалаТранспортировки < 9) или (ВремяЧасовНачалаТранспортировки > 23) Тогда
		Сообщить("Часы должны быть в диапазоне от 9 до 23");
		ВремяЧасовНачалаТранспортировки = СтараяВремяЧасовНачалаТранспортировки;
	Иначе
		Если ВремяЧасовОкончанияТранспортировки = 0 Тогда
			ВремяЧасовОкончанияТранспортировки = ВремяЧасовНачалаТранспортировки + 1;	
		КонецЕсли;
		Если (ДатаОкончанияТранспортировки = ДатаНачалаТранспортировки) и (ВремяЧасовНачалаТранспортировки > ВремяЧасовОкончанияТранспортировки) Тогда
			Сообщить("Час начала транспортировки должен быть меньше часа окончания транспортировки.");
			ВремяЧасовНачалаТранспортировки = СтараяВремяЧасовНачалаТранспортировки;
		Иначе	
			СтараяВремяЧасовНачалаТранспортировки = ВремяЧасовНачалаТранспортировки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВремяЧасовНачалаТранспортировкиПриИзменении

//======================================================================
Процедура ВремяМинутОкончанияТранспортировкиПриИзменении()
	Если (ВремяМинутОкончанияТранспортировки > 60) или (ВремяМинутОкончанияТранспортировки < 0) Тогда
		Сообщить("Минуты должны быть в диапазоне от 0 до 60");
		ВремяМинутОкончанияТранспортировки = СтараяВремяМинутОкончанияТранспортировки;
	Иначе
		Если (ДатаОкончанияТранспортировки = ДатаНачалаТранспортировки) и (ВремяЧасовНачалаТранспортировки = ВремяЧасовОкончанияТранспортировки) 
		и (ВремяМинутНачалаТранспортировки > ВремяМинутОкончанияТранспортировки) Тогда
			Сообщить("Минуты начала транспортировки должны быть меньше минут окончания транспортировки.");
			ВремяМинутОкончанияТранспортировки = СтараяВремяМинутОкончанияТранспортировки;
		Иначе
			СтараяВремяМинутОкончанияТранспортировки = ВремяМинутОкончанияТранспортировки;
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры // ВремяМинутОкончанияТранспортировкиПриИзменении

//======================================================================
Процедура ВремяЧасовОкончанияТранспортировкиПриИзменении()
	Если (ВремяЧасовОкончанияТранспортировки < 9) или (ВремяЧасовОкончанияТранспортировки > 23) Тогда
		Сообщить("Часы должны быть в диапазоне от 9 до 23");
		ВремяЧасовОкончанияТранспортировки = СтараяВремяЧасовОкончанияТранспортировки;
	Иначе
		Если (ДатаОкончанияТранспортировки = ДатаНачалаТранспортировки) и (ВремяЧасовНачалаТранспортировки > ВремяЧасовОкончанияТранспортировки) Тогда
			Сообщить("Час начала транспортировки должен быть меньше часа окончания транспортировки.");
			ВремяЧасовОкончанияТранспортировки = СтараяВремяЧасовОкончанияТранспортировки;
		Иначе
			СтараяВремяЧасовОкончанияТранспортировки = ВремяЧасовОкончанияТранспортировки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВремяЧасовОкончанияТранспортировкиПриИзменении

//======================================================================
Процедура ПриОткрытии()
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	  
	
	Если ПустоеЗначение(Автомобиль) = 1 Тогда
		Автомобиль = Форма.Параметр;
		Если ПустоеЗначение(Автомобиль) = 1 Тогда
			СпрАвто = СоздатьОбъект("Справочник.Автотранспорт");
			Если СпрАвто.НайтиПоНаименованию("Наемная") = 1 Тогда
				Автомобиль = СпрАвто.ТекущийЭлемент();
			КонецЕсли;  
		КонецЕсли;
	КонецЕсли;	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	Если (Согласован = 1) и (глПользователь.Наименование<>"Иванова") 
	и (глПользователь.Наименование<>"Васильева Марина")
	и (глПользователь.Наименование<>"Кожемякин") 
	и (глПользователь.Наименование<>"Иванова Анна")
	и (глПользователь.Наименование<>"Дигуева") Тогда
		Форма.ТолькоПросмотр(1);
		Форма.кнОткрытьОснование.Доступность(1);
	КонецЕсли; 
	
	ЕстьСклад = 0;
	Если НазваниеНабораПрав()="Администратор_-конфиг_и_выгрузка" Тогда
		Если Склад = глПользователь.ОсновнойСклад Тогда
			ЕстьСклад = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если ((Автор <> глПользователь) и (ЕстьСклад = 0))
	и (глПользователь.Наименование<>"Иванова") 
	и (глПользователь.Наименование<>"Васильева Марина")
	и (глПользователь.Наименование<>"Кожемякин") 
	и (глПользователь.Наименование<>"Иванова Анна")
	и (глПользователь.Наименование<>"Дигуева") Тогда
	    Форма.ВремяМинутНачалаТранспортировки.Доступность(0);
		Форма.ВремяМинутОкончанияТранспортировки.Доступность(0);
		//Форма.кнХОснование.Доступность(0);
		Форма.кнОснование.Доступность(0);
		Форма.ДатаВремяНачалаСтрокой.Доступность(0);
		Форма.ДатаВремяОкончанияСтрокой.Доступность(0);
		Форма.ВремяЧасовНачалаТранспортировки.Доступность(0);
		Форма.ДатаНачалаТранспортировки.Доступность(0);
		Форма.ДатаОкончанияТранспортировки.Доступность(0);
		Форма.ВремяЧасовОкончанияТранспортировки.Доступность(0);
		Форма.НомерДок.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.Автомобиль.Доступность(0);
		Форма.НачальнаяТочка.Доступность(0);
		Форма.Клиент.Доступность(0);
		Форма.Приоритет.Доступность(0);
		Форма.КонечнаяТочка.Доступность(0);
		Форма.Клиент1.Доступность(0);
		Форма.ОбъемГруза.Доступность(0);
		//Форма.кнОткрытьОснование.Доступность(0);
		Форма.кнУдалитьОснование.Доступность(0);
		Форма.ТекстОснования.Доступность(0);
		//Форма.Номенклатура.Доступность(0);
		//Форма.Единица.Доступность(0);
		//Форма.Коэффициент.Доступность(0);
		//Форма.Количество.Доступность(0);
		//Форма.флСогласован.Доступность(0);
		//Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	Если (глПользователь.Наименование<>"Иванова") и (глПользователь.Наименование<>"Иванова Анна") и (глПользователь.Наименование<>"Васильева Марина") и (глПользователь.Наименование<>"Бородицкий Максим") и (глПользователь.Наименование<>"Кожемякин")
	и (глПользователь.Наименование<>"Дигуева") Тогда 
	    Форма.флСогласован.Доступность(0);
	Иначе	
		Форма.флСогласован.Доступность(1); 
	КонецЕсли;
	
	Если (глПользователь.Наименование <> "Кожемякин") 
	и (глПользователь.Наименование <> "Иванова")
	и (глПользователь.Наименование <> "Дигуева")
	и (глПользователь.Наименование <> "Иванова Анна") Тогда
		Форма.ВесЗаявкиВнутриДня.Видимость(0);
	КонецЕсли;
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
	КонецЕсли;
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли; 
	
	Форма.Комментарий.Доступность(1);
	флСогласован = Согласован;
	СтараяВремяЧасовОкончанияТранспортировки 	= ВремяЧасовОкончанияТранспортировки;
	СтараяВремяМинутОкончанияТранспортировки 	= ВремяМинутОкончанияТранспортировки;
	СтараяВремяМинутНачалаТранспортировки 		= ВремяМинутНачалаТранспортировки;
	СтараяДатаОкончанияТранспортировки 			= ДатаОкончанияТранспортировки;
	СтараяДатаНачалаТранспортировки 			= ДатаНачалаТранспортировки;
	СтараяВремяЧасовНачалаТранспортировки 		= ВремяЧасовНачалаТранспортировки;
КонецПроцедуры // ПриОткрытии
 

Процедура ПриУдаленииСтроки()
	Если (Автор <> глПользователь) и (глПользователь.Наименование<>"Иванова Анна") и (глПользователь.Наименование<>"Иванова") и (глПользователь.Наименование<>"Васильева Марина") и (глПользователь.Наименование<>"Кожемякин")
	и (глПользователь.Наименование<>"Дигуева") Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры

Процедура ПриВводеСтроки()
	Если (Автор <> глПользователь)и (глПользователь.Наименование<>"Иванова Анна") и (глПользователь.Наименование<>"Иванова") и (глПользователь.Наименование<>"Васильева Марина") и (глПользователь.Наименование<>"Кожемякин")
	и (глПользователь.Наименование<>"Дигуева") Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
КонецПроцедуры
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	//Если ПустоеЗначение(ДокОснование) = 0 Тогда
	//	ОткрытьФорму(ДокОснование);
	//	Возврат;
	//КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		НоваяСтрока();
		Документ = Основание;
		ТекстОснования = глПредставлениеДокумента(Документ);
		Если ПустоеЗначение(Клиент1) = 1 Тогда
			глЗаполнитьШапкуНаОсн(Контекст,Основание);
			Клиент1 = Основание.Контрагент;
		КонецЕсли;
		Если ПустоеЗначение(Клиент) = 1 Тогда
			//Клиент = Основание.Контрагент;
			НачальнаяТочка = ""+ Основание.Склад;
			СтарыйКонтрагент	= Клиент;
		КонецЕсли;
		Если ПустоеЗначение(Комментарий) = 1 Тогда
			Комментарий 		= Основание.Комментарий;
		КонецЕсли;
		Если Основание.Вид() = "ЗаявкаПокупателя" Тогда 
			Если Основание.ВидОперации	= Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
				КонечнаяТочка = Основание.Комментарий;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

Процедура ОткрытьДокумент()
	ОткрытьФормуМодально(Документ.ТекущийДокумент());	
КонецПроцедуры	

Процедура ПоКнопкеУдалитьОснование()
	УдалитьСтроку();
КонецПроцедуры	

//======================================================================
Процедура СогласованПриИзменении()
	Согласован = флСогласован;
КонецПроцедуры // СогласованПриИзменении

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ПарамШапки;
	
	
КонецПроцедуры // Печать()

Процедура ПриВыбореСтроки()
	//ОткрытьФормуМодально(Документ.ТекущийДокумент());		
КонецПроцедуры

Процедура ОткрытьТекущийДокумент()
	ОткрытьФормуМодально(Документ.ТекущийДокумент());	
КонецПроцедуры	

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()
                     

Процедура ПриОкончанииРедактированияСтроки(НовСтрока)  
	Если НовСтрока = 1 Тогда
		Если ПустоеЗначение(Документ) = 1 Тогда
			Основание = глВыбратьОснование(Контекст);
			Если ПустоеЗначение(Основание) = 0 Тогда
				//НоваяСтрока();
				Документ = Основание;
				ТекстОснования = глПредставлениеДокумента(Документ);
				Если ПустоеЗначение(Клиент1) = 1 Тогда
					глЗаполнитьШапкуНаОсн(Контекст,Основание);
					Клиент1 = Основание.Контрагент;
				КонецЕсли;
				Если ПустоеЗначение(Клиент) = 1 Тогда
					//Клиент = Основание.Контрагент;
					НачальнаяТочка = ""+ Основание.Склад;
					СтарыйКонтрагент	= Клиент;
				КонецЕсли;
				Если ПустоеЗначение(Комментарий) = 1 Тогда
					Комментарий 		= Основание.Комментарий;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	
//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    НомерТекущейФормы = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	
	Если НомерТекущейФормы > 0 Тогда
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован);
	Склад = глПользователь.ОсновнойСклад;
	ДатаНачалаТранспортировки 			= ТекущаяДата(); 
	ДатаОкончанияТранспортировки 		= ТекущаяДата();
	ВремяЧасовНачалаТранспортировки 	= 9;
	ВремяЧасовОкончанияТранспортировки 	= 9;
	ДатаВремяСозданиеЗаявки 			= "" + ТекущаяДата() +" "+ ТекущееВремя(); 
	//ВремяЧасовОкончанияТранспортировки 	= 23;
	
КонецПроцедуры // ВводНового() 

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Заявка";
ТаблицаПечФорм.Кнопка       = "Заявка";
