////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

Перем ТекущийДолг;

Перем СписокВариантовЗаполнения; // список вариантов заполнения спецификации документа

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"

Процедура УправлениеВидимостью()
	
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
	КонецЕсли;

КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "Поставщик");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
 	   
	Если ДокОснование.Выбран() = 1 Тогда
		Заголовок 	= глНазваниеДокументаВЖурнале(Контекст) + " (корр.)";
	Иначе
		Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	КонецЕсли;                                              
	Название 	= Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                      
//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;

	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;
	
	СуммаВзаиморасчетовДок	= Итог("Сумма")
							+?(СуммаВклНП =1,0,Итог("СуммаНП" ))
							+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;
	
КонецФункции // ПересчетСуммыВзаиморасчетов()


//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		
		РасчетТекущегоДолга();   
		УстановкаВидимостиСуммВПодвале();
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()    

//******************************************************************************
// ПриИзмененииЗаявкиПокупателя()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Проверяем корректность выбранной заявки.
//
Процедура ПриИзмененииЗаявкиПокупателя()
	
	Если ПоЗаявке.Выбран()=1 Тогда
	    Если ПоЗаявке.ВидОперации <> Перечисление.ВидыОперацийЗаявок.НаПоставку Тогда
			Предупреждение("Для заказа поставщику можно выбирать только заявки
			| со статусом """+Перечисление.ВидыОперацийЗаявок.НаПоставку+"""!", 60);
	        ПоЗаявке = "";
		ИначеЕсли ПоЗаявке.ДатаОтгрузки < ДатаОтгрузки Тогда
			Предупреждение("""" + глПредставлениеДокумента(ПоЗаявке) + 
			               """ должна быть выполнена раньше ("+СокрЛП(ПоЗаявке.ДатаОтгрузки) +
						   "), чем предполагается поступление ТМЦ по данному Заказу ("+СокрЛП(ДатаОтгрузки)+").
						   |Поступившие по заказу ТМЦ не будут автоматически зарезервированы под эту Заявку.",60);
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗаявкиПокупателя()

//*****************************************************************************
// ВыборЦен()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	УстановкаВидимостиСуммВПодвале();
	
	Форма.Обновить(0);
	
КонецПроцедуры	//ВыборЦен()        
                                 
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн <> "ЗаявкаПокупателя") И
	     (ВидОсн <> "ЗаказПоставщику") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования     
	
	Валюта = ДокОснование.Валюта;
	Курс   = ДокОснование.Курс;
		
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	// очищаем наш документ
	УдалитьСтроки();
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		
		ВремНоменклатура = ТаблицаДокумента.Номенклатура;
		Если ВремНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Продолжить;
		КонецЕсли;    
		
		НоваяСтрока();
		Номенклатура= ТаблицаДокумента.Номенклатура;
		Количество 	= ТаблицаДокумента.Количество;
		Единица 	= ТаблицаДокумента.Единица;
		Коэффициент = ТаблицаДокумента.Коэффициент;
		СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
		СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
		
		Если ВидОсн = "ЗаявкаПокупателя" Тогда
			// ничего
		Иначе
			Цена		= ТаблицаДокумента.Цена;
			Сумма		= ТаблицаДокумента.Сумма;
			СуммаНДС	= ТаблицаДокумента.СуммаНДС;
			СуммаНП		= ТаблицаДокумента.СуммаНП;
		КонецЕсли;
		
	КонецЦикла; // по строкам основания
	
	СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "В документе основании не заполнена табличная часть";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// КоличествоВосновные(Товар, Колво)
//
// Параметры: 
//  Товар	- элемент справочника номенклатура
//  Колво	- количество в базовых единицах
//
// Возвращаемое значение:
//  Количество в основных единицах.
//
// Описание:
//  Пересчитывает количество из базовых единиц в основные
//
Функция КоличествоВосновные(Товар, Колво)
	
	// Количество надо заполнять в основных единицах
	ВремКоэфф	= Товар.ОсновнаяЕдиница.Коэффициент; 
    Рез			= Колво;
	
	Если ВремКоэфф <> 0 Тогда
		Рез	= Рез / ВремКоэфф;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // КоличествоВосновные()

//******************************************************************************
// МожноЗаполнятьТаблЧасть(ТекстОш)
//
// Параметры: 
//  ТекстОш - строка - текст ошибки. "" - 
//
// Возвращаемое значение:
//	1 - параметры в документе заданы (заполнять можно)
//  0 - параметры в документе не заданы (заполнять нельзя)
//
// Описание:
//  Выполняет предварительную проверку перед заполнением.
//	 Возвращает через параметр текст ошибки, если она была,
//   иначе "".
//
Функция МожноЗаполнятьТаблЧасть(ТекстОш)
	
    ТекстОш = "";
	// фирма должна быть заполнена
	Если ПустоеЗначение(Фирма) = 1 Тогда
		ТекстОш =  "Не выбрана фирма!";
	КонецЕсли;
	
	Возврат ПустоеЗначение(ТекстОш);

КонецФункции // МожноЗаполнятьТаблЧасть()

//******************************************************************************
// ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, Сводно)
//
// Парметры:
//  ТаблЗнач - "ТаблицаЗначений" - таблица согласно которой нужно заполнять
//  Сводно:
//   1 - сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке не заполняем
//   0 - не сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке заполняем
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа на основании таблицы значений
//  (столбцы Номенклатура, Количество, ПоЗаявке), переданной, 
//  в качестве параметра.
//
Процедура ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, Сводно)
	
	Если Сводно = 1 Тогда
		ТаблЗнач.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	ТаблЗнач.Сортировать("Номенклатура");
	ТаблЗнач.ВыбратьСтроки();
	
	Пока ТаблЗнач.ПолучитьСтроку() = 1 Цикл
		НоваяСтрока();
		
		Номенклатура	= ТаблЗнач.Номенклатура;
		Количество		= КоличествоВосновные(Номенклатура, ТаблЗнач.Количество);
		Единица			= Номенклатура.ОсновнаяЕдиница;
		Коэффициент		= Единица.Коэффициент;
		
		Если Сводно = 0 Тогда
			ПоЗаявке = ТаблЗнач.ПоЗаявке;
		КонецЕсли;
		
		Если УчитыватьНДС = 1 Тогда
			СтавкаНДС	= Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		Если УчитыватьНП = 1 Тогда
			СтавкаНП	= Номенклатура.СтавкаНП;
		КонецЕсли;
		
		Цена	= глПолучитьЦену(Номенклатура, ТипЦен, ДатаДок, Единица, Валюта);
		
		глПересчитатьЦенуВДокументе(Контекст, УчитыватьНП, УчитыватьНДС, Цена, Валюта, 
		                            ТипЦен.ЦенаВклНП, ТипЦен.ЦенаВклНДС);
		глПересчетТаблЧасти(Контекст,"Цена");			
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблЧастьПоТЗ()

//******************************************************************************
// ЗаполнитьПоМинОстатку()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Строка - текст ошибки. Если нет ошибки то возвращает ""
//
// Описание:
// 	Заполняет спецификацию документа позициями номенклатуры свободные остатки которых
//  за вычетом уже заказанного меньше минмального остатка
//
Функция ЗаполнитьПоМинОстатку()
	Перем Остатки, ОстЗаказы, ОстРезервы;
	Перем ТекстОш;
	
	// выполним проверку заполнения параметров
	Если МожноЗаполнятьТаблЧасть(ТекстОш) = 0 Тогда
		Возврат ТекстОш;
	КонецЕсли;
	
	// Определим фирму, по которой надо фильтровать остатки
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма); 

	// Вычислим период запроса
	ПозицияПо = "";
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			ПозицияПо	= ДатаДок;
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			ПозицияПо	= СформироватьПозициюДокумента(ТекущийДокумент(), -1);
		КонецЕсли;
	КонецЕсли;
	
	ТекстЗапроса	=
	"//{{ЗАПРОС(НахваткаМинОстатка)
	|" + ?(ПустоеЗначение(ПозицияПо) = 0, "Период с ПозицияПо По ПозицияПо;", "") + "
	|
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура, 
	|                 Регистр.РезервыТМЦ.Номенклатура, 
	|                 Регистр.Заказы.    Номенклатура,
	|                 Справочник.Номенклатура.ТекущийЭлемент; 
	|Фирма	        = Регистр.ОстаткиТМЦ.Фирма, 
	|                 Регистр.РезервыТМЦ.Фирма, 
	|                 Регистр.Заказы.    Фирма; 
	|ОстКолво		= Регистр.ОстаткиТМЦ.Количество;
	|ОстРезерва		= Регистр.РезервыТМЦ.Количество;
	|ОстЗаказа		= Регистр.Заказы.    КоличествоПриход;
	|
	|Функция КонОстНаличия	= КонОст(ОстКолво);
	|Функция КонОстРезерва	= КонОст(ОстРезерва);
	|Функция КонОстЗаказа   = КонОст(ОстЗаказа);
	|
	|Группировка Номенклатура упорядочить по Номенклатура.Наименование без групп все;
	|
	|"//}}ЗАПРОС
	;
	
    Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 0 Тогда
        ТекстЗапроса = ТекстЗапроса + "Условие(Фирма в ФирмаДляОстатковТМЦ);";
	КонецЕсли;                                  
	
	Запрос	= СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	    Возврат "Ошибка выполнения запроса!";
	КонецЕсли;
	
	// Заполняем таблицу результатами запроса
	Таб	= СоздатьОбъект("ТаблицаЗначений");
	Таб.НоваяКолонка("Номенклатура"	, "Справочник.Номенклатура");
	Таб.НоваяКолонка("Количество"	, "Число", 14, 3);
	
	Пока Запрос.Группировка(1) = 1 Цикл
		                   
		КолЗаказа = Запрос.Номенклатура.МинОстаток - Запрос.КонОстНаличия + Запрос.КонОстРезерва - Запрос.КонОстЗаказа; 
		Если КолЗаказа <= 0  Тогда
		    Продолжить;
		КонецЕсли;
		Таб.НоваяСтрока();
		Таб.Номенклатура = Запрос.Номенклатура;          
		Таб.Количество   = КолЗаказа;
		
	КонецЦикла; 
	
	ЗаполнитьТаблЧастьПоТЗ(Таб, 1);
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Для удовлетворения заявок, начиная с " + СокрЛП(ДатаОтгрузки) +
		        " имеется в наличии достаточное количество номенклатуры. Ничего заказывать не нужно.";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьПоМинОстатку()
  
//*****************************************************************************
// ЗаполнитьТабличнуюЧасть(Сводно, ПоВсемЗаявкам=0, СписокЗаявок="")
// 
// Параметры: 
//  Сводно:
//   1 - сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке не заполняем
//   0 - не сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке заполняем
//  ПоВсемЗаявкам:
//   1 - заполнить по всем заявкам
//   0 - заполнить согласно переданному списку
//  СписокЗаявок:
//   список выбранных заявок - будем заполнять только по ним
//   "" -  будем заполнять по всем заявкам
//
// Возвращаемое значение: 
//  Строка - текст ошибки. Если нет ошибки то возвращает ""
//
// Описание:
// 	Заполняет спецификацию документа согласно переданным параметрам                  
//
Функция ЗаполнитьТабличнуюЧасть(Сводно, ПоВсемЗаявкам=0, СписокЗаявок="")
	
	Перем ОстЗаявки, ОстЗаказыЗаявки, ОстРезервы;
	Перем ТекстОш;
	
	// выполним проверку заполнения параметров
	Если МожноЗаполнятьТаблЧасть(ТекстОш) = 0 Тогда
		Возврат ТекстОш;
	КонецЕсли;
	
	Если (ПоВсемЗаявкам = 0) и (ПустоеЗначение(СписокЗаявок) = 1) Тогда
		Возврат "";
	КонецЕсли;
	
	// Получим таблицу значений по переднным параметрам
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
	ОбщРег			= СоздатьОбъект("Регистры");
	РегЗаявки		= ОбщРег.Заявки;
	РегЗаказыЗаявки	= ОбщРег.ЗаказыЗаявки;
	РегРезервы		= ОбщРег.РезервыТМЦ;
	
	ПозицияПо		= "";
	
	// установим фильтры на измерения			
	РегЗаявки.УстановитьЗначениеФильтра("Фирма" , ФирмаДляОстатковТМЦ , 2);
	Если ПоВсемЗаявкам = 0 Тогда
		РегЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", СписокЗаявок, 2);
	КонецЕсли;
	РегРезервы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегЗаявки.ВременныйРасчет();
			РегЗаказыЗаявки.ВременныйРасчет();
			РегРезервы.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыПо(ДатаДок);
			
			ПозицияПо	= ДатаДок;
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегЗаявки.ВременныйРасчет();
			РегЗаказыЗаявки.ВременныйРасчет();
			РегРезервы.ВременныйРасчет();
			ОбщРег.РассчитатьРегистрыНа(ТекущийДокумент());
			
			ПозицияПо	= СформироватьПозициюДокумента(ТекущийДокумент(), -1);
		КонецЕсли;
	КонецЕсли;
	
	Таб	= СоздатьОбъект("ТаблицаЗначений");
	Таб.НоваяКолонка("Номенклатура"	, "Справочник.Номенклатура");
	Таб.НоваяКолонка("Количество"	, "Число", 14, 3);
	Таб.НоваяКолонка("ПоЗаявке"		, "Документ.ЗаявкаПокупателя");
	
	// получаем остатки заявок
	РегЗаявки.ВыгрузитьИтоги(ОстЗаявки, 1, 1);
	
	// нужно заказать = Заявлено(Заказано покупателем) - Заказано(Поставщику) - Получено по закзам (От поставщика)
	
	ОстЗаявки.ВыбратьСтроки();
	Пока ОстЗаявки.ПолучитьСтроку() = 1 Цикл
		
		ТекЗаявка = ОстЗаявки.ЗаявкаПокупателя;
		ТекНоменклатура = ОстЗаявки.Номенклатура;
		          
		// Отбираем только заявки на поставку (будем заказывать только по ним)
		Если ТекЗаявка.ВидОперации <> Перечисление.ВидыОперацийЗаявок.НаПоставку Тогда
			Продолжить;
		КонецЕсли;
		
		// услуги пропускаем
		Если ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		    Продолжить;
		КонецЕсли;
		
		// Заявки с датой предполагаемой отгрузки меньше чем дата потупления по заказу пропускаем
		//(эти заявки должны быть обеспечены чем-то еще)
		Если ТекЗаявка.ДатаОтгрузки < ДатаОтгрузки Тогда
			Продолжить;
		КонецЕсли;
		
		ОстКолво = ОстЗаявки.КоличествоРасход;
		
		// получим заказанных товаров
		РегЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура", ТекНоменклатура, 1);
		РегЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ТекЗаявка, 1);
		РегЗаказыЗаявки.ВыгрузитьИтоги(ОстЗаказыЗаявки);
		
		// вычитаем уже заказанные товары
		ОстЗаказыЗаявки.ВыбратьСтроки();
		Пока (ОстЗаказыЗаявки.ПолучитьСтроку() = 1)
		   и (ОстКолво > 0)
		Цикл
			ОстКолво = ОстКолво - Мин(ОстКолво, ОстЗаказыЗаявки.Количество);
		КонецЦикла;
		
		Если ОстКолво <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// вычитаем уже полученные товары
		
		// получим зарезервированных товаров
		РегРезервы.УстановитьЗначениеФильтра("Номенклатура", ТекНоменклатура, 1);
		РегРезервы.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ТекЗаявка, 1);
		РегРезервы.ВыгрузитьИтоги(ОстРезервы);
		
		ОстРезервы.ВыбратьСтроки();
		Пока (ОстРезервы.ПолучитьСтроку() = 1)
		   и (ОстКолво > 0)
		Цикл
			ОстКолво = ОстКолво - Мин(ОстКолво, ОстРезервы.Количество);
		КонецЦикла;
		
		Если ОстКолво <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Таб.НоваяСтрока();
		Таб.Номенклатура = ТекНоменклатура;          
		Таб.Количество   = ОстКолво;
		
		Таб.ПоЗаявке = ТекЗаявка;
		
	КонецЦикла; // ОстЗаявки.ПолучитьСтроку() = 1
	
	ЗаполнитьТаблЧастьПоТЗ(Таб, Сводно);
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Для удовлетворения заявок, начиная с " + СокрЛП(ДатаОтгрузки) +
		        " имеется в наличии достаточное количество номенклатуры. Ничего заказывать не нужно.";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции // ЗаполнитьТабличнуюЧасть()

//******************************************************************************
// ЗаполнитьТаблЧастьПоСписку(СписокЗаявок, Сводно)
//
// Парметры:
//  СписокЗаявок - "СписокЗначений" - список заявок согласно которому нужно заполнять
//  Сводно:
//   1 - сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке не заполняем
//   0 - не сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке заполняем
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа на основании списка заявок, переданного, 
//  в качестве параметра. Вызывается после подбора заявок и при заполнении из отчета.
//
Процедура ЗаполнитьТаблЧастьПоСписку(СписокЗаявок, Сводно)
	
	// заполняем спецификацию по выбранным заявкам
	Результат = ЗаполнитьТабличнуюЧасть(Сводно, 0, СписокЗаявок);
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
	Форма.Обновить(0);
	
КонецПроцедуры // ЗаполнитьТаблЧастьПоСписку()


//******************************************************************************
// ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова)
//
// Парметры:
//  ПараметрВызова - "СписокЗначений" - список параметров,
// полученный из отчетов 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа по данным отчетов.
//
Процедура ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова)
	
	Перем ТекстОш;
		
	// получим переданную таблицу значений. Столбцы: Номенклатура, Количество
	ТаблЗнач = ПараметрВызова.Получить("ТаблЗнач");
	
	// выполним проверку заполнения параметров
	Если МожноЗаполнятьТаблЧасть(ТекстОш) = 0 Тогда
		Предупреждение(ТекстОш, 60);
		Возврат;
	КонецЕсли;
	
	// из отчетов заполняем сводно
	ЗаполнитьТаблЧастьПоТЗ(ТаблЗнач, 1);
	
	Если КоличествоСтрок() = 0 Тогда
		Предупреждение("По данным отчета ничего заказывать не нужно!", 60);
	КонецЕсли;
	Форма.Обновить(0);
	
КонецПроцедуры // ЗаполнитьТаблЧастьПоОтчету()


//*****************************************************************************
// ПолучитьРасшифровкуДляОтчета(ТекОтчет)
// 
// Параметры: 
//  ТекОтчет - строка - идентификатор отчета
//
// Возвращаемое значение: 
//  Список значений со значениями расшифровки
//
// Описание:
//  Получает расшифровку
//
Функция ПолучитьРасшифровкуДляОтчета(ТекОтчет)
	
	Перем ДатаНачала, ДатаКонца, ДатаНачалаЗак, ДатаКонцаЗак;
	
	// Общая часть
	Расшифровка = СоздатьОбъект("СписокЗначений");
	Расшифровка.Установить("Отчет", ТекОтчет);
	Расшифровка.Установить("ВидРазделителя", 1);
	Расшифровка.Установить("ВыбРазделитель1", Фирма);
	
	Если СравнитьТА() <> -2  Тогда
		Расшифровка.Установить("ДокументЗаказаПоставщику", ТекущийДокумент());     
	Иначе
		Расшифровка.Установить("ДокументЗаказаПоставщику", "");    
	КонецЕсли;
	
	// Индивидуальная часть
	Если ТекОтчет = "ЗаявкиПокупателей" Тогда
		Расшифровка.Установить("ДатаКонца", ДатаДок);
		Расшифровка.Установить("ВидЕдиницы", 1);
		
		Группировки = СоздатьОбъект("СписокЗначений");
		Группировки.ДобавитьЗначение("Покупатель", 	"Покупатель");
		Группировки.ДобавитьЗначение("Договор", 	"Договор покупателя");
		Группировки.ДобавитьЗначение("Заявка", 		"Заявка");
		Группировки.ДобавитьЗначение("Номенклатура","Номенклатура");
		Группировки.Пометка(2, 1);
		Группировки.Пометка(3, 1);
		
		Расшифровка.Установить("Группировки", Группировки);
	ИначеЕсли ТекОтчет = "ПланированиеЗакупок" Тогда
		
		ДатаНачалаЗак = ДатаОтгрузки;
		
		ДатаКонца  = ПолучитьДатуТА();
		ДатаНачала      = глЗначениеПоУмолчанию("ОсновнаяДатаНачалаОтчетов");
		Если ПустоеЗначение(ДатаНачала) = 1 Тогда
			ДатаНачала      = НачМесяца(ДатаКонца);    
		КонецЕсли;
		ДатаКонцаЗак  = КонМесяца(ДатаНачалаЗак);
		
		Расшифровка.Установить("ДатаНачала",    ДатаНачала);
		Расшифровка.Установить("ДатаКонца",     ДатаКонца);
		Расшифровка.Установить("ДатаНачалаЗак", ДатаНачалаЗак); // ДатаОтгрузки
		Расшифровка.Установить("ДатаКонцаЗак",  ДатаКонцаЗак);
		
	КонецЕсли;
	
	Возврат Расшифровка;

КонецФункции // ПолучитьРасшифровкуДляОтчета()

//*****************************************************************************
// ДобавитьОтборПоРеквизиту(ТаблицаОтбор, Реквизит, Значение, Условие)
// 
// Параметры: 
//  ТаблицаОтбор - "ТаблицаЗначений" - куда будем добавлять
//  Реквизит     - "Строка"
//  Значение     - "СписокЗначений"
//  Условие      - "Строка"
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Добавить строку в таблицу значений отбор по реквизиту,
//  установив значения согласно переданным параметрам
//
Процедура ДобавитьОтборПоРеквизиту(ТаблицаОтбор, Реквизит, Значение, Условие)
	
	ТаблицаОтбор.НоваяСтрока();
	ТаблицаОтбор.Реквизит = Реквизит;
	ТаблицаОтбор.Значение = Значение;
	ТаблицаОтбор.Условие  = Условие;

КонецПроцедуры // ДобавитьОтборПоРеквизиту()

//*****************************************************************************
// ОткрытьПодборЗаявок(Сводно)
// 
// Параметры: 
//  Сводно:
//   1 - сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке не заполняем
//   0 - не сворачиваем по номеклатуре,	реквизит табл.части ПоЗаяке заполняем
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Открывает подбор для выбора заявок
//
Процедура ОткрытьПодборЗаявок(Сводно)
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("Документ",         "Тип");
	СписокПараметров.ДобавитьЗначение("ЗаявкаПокупателя", "Вид");
	СписокПараметров.ДобавитьЗначение(1,                  "ВыборСписком");
	СписокПараметров.ДобавитьЗначение(Сводно,             "Буфер");
	
	ТаблицаОтборПоРеквизитам = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаОтборПоРеквизитам.НоваяКолонка("Реквизит");
	ТаблицаОтборПоРеквизитам.НоваяКолонка("Значение");
	ТаблицаОтборПоРеквизитам.НоваяКолонка("Условие");
	
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
    // установим отбор по фирме (если нужно)
	Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 0 Тогда // Фильтр по фирме нужен
		СписокФирма = СоздатьОбъект("СписокЗначений");
		
		Если ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда
			
			Для Сч = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
				СписокФирма.ДобавитьЗначение(ФирмаДляОстатковТМЦ.ПолучитьЗначение(Сч));
			КонецЦикла;
			
		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда
			
			СписокФирма.ДобавитьЗначение(ФирмаДляОстатковТМЦ);
			
		КонецЕсли;
		
		ДобавитьОтборПоРеквизиту(ТаблицаОтборПоРеквизитам, "Фирма", СписокФирма, "В");
	КонецЕсли;
	
	// установим отбор по виду операции
	СписокВидОперации = СоздатьОбъект("СписокЗначений");
	СписокВидОперации.ДобавитьЗначение(Перечисление.ВидыОперацийЗаявок.НаПоставку);
	ДобавитьОтборПоРеквизиту(ТаблицаОтборПоРеквизитам, "ВидОперации", СписокВидОперации, "В");
	
	// установим отбор по дате отгрузки
	СписокДатаОтгрузки = СоздатьОбъект("СписокЗначений");
	СписокДатаОтгрузки.ДобавитьЗначение(ДатаОтгрузки);
	ДобавитьОтборПоРеквизиту(ТаблицаОтборПоРеквизитам, "ДатаОтгрузки", СписокДатаОтгрузки, ">=");
	
	СписокПараметров.ДобавитьЗначение(ТаблицаОтборПоРеквизитам, "ОтборПоРеквизитам");
	
	// установим отбор по общим свойствам документов
	СписокОбщиеСвойства = СоздатьОбъект("СписокЗначений");
	СписокОбщиеСвойства.Установить("ВключатьПроведенные",2);
	
	СписокПараметров.ДобавитьЗначение(СписокОбщиеСвойства, "ОбщиеСвойства");
	
	ОткрытьПодбор("Обработка.ПодборОбъектов", "", СписокПараметров);

КонецПроцедуры // ОткрытьПодборЗаявок()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		
		Если Основание.Вид() = "ЗаявкаПокупателя" Тогда
			ВремКонтрагент = Контрагент;
			ВремДоговор    = Договор;
		КонецЕсли;
		
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		Если Основание.Вид() = "ЗаявкаПокупателя" Тогда
			// заполнение шапки на основании может поменять контрагента
			Если Контрагент <> ВремКонтрагент Тогда
				Контрагент = ВремКонтрагент;
			КонецЕсли;
			Если Договор <> ВремДоговор Тогда
				Договор = ВремДоговор;
			КонецЕсли;
		КонецЕсли;

		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
	
	КонецЕсли;
                                       
КонецПроцедуры //ПоКнопкеОснование()      
                                           
//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Заполнить"
//
// Описание:
// 	Производит выбор способа заполнения и непосредственное заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Перем ВыбВариантЗаполнения;
	
	Если СписокВариантовЗаполнения.ВыбратьЗначение(ВыбВариантЗаполнения,,,,1) > 0 Тогда
		
		Если КоличествоСтрок() <> 0 Тогда
			Если Вопрос("Заполнить документ позициями, которых не хватает для удовлетворения заявок покупателей, 
			            |с предполагаемой датой отгрузки не раньше, чем "+СокрЛП(ДатаОтгрузки) + " ?
			            |(перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		УдалитьСтроки();
		
		Результат = "";
		Если ВыбВариантЗаполнения = "Сводно по всем заявкам" Тогда
			
			Результат = ЗаполнитьТабличнуюЧасть(1, 1);
			
		ИначеЕсли ВыбВариантЗаполнения = "Детально по всем заявкам" Тогда
			
			Результат = ЗаполнитьТабличнуюЧасть(0, 1);
			
		ИначеЕсли ВыбВариантЗаполнения = "Сводно по выбранным заявкам" Тогда
			
			ОткрытьПодборЗаявок(1);										
			
		ИначеЕсли ВыбВариантЗаполнения = "Детально по выбранным заявкам" Тогда
			
			ОткрытьПодборЗаявок(0);										
			
		ИначеЕсли ВыбВариантЗаполнения = "По данным отчета ""Заявки покупателей""" Тогда
			
			Расшифровка = ПолучитьРасшифровкуДляОтчета("ЗаявкиПокупателей");
			ОткрытьФорму("Отчет.ЗаявкиПокупателей", Расшифровка);
			
		ИначеЕсли ВыбВариантЗаполнения = "По данным отчета ""Планирование закупок""" Тогда
			
			Расшифровка = ПолучитьРасшифровкуДляОтчета("ПланированиеЗакупок");
			ОткрытьФорму("Отчет.ПланированиеЗакупок", Расшифровка);
			
		ИначеЕсли ВыбВариантЗаполнения = "По минимальному остатку" Тогда
			
			Результат = ЗаполнитьПоМинОстатку();
			
		Иначе	
			Возврат; // неизвестный вариант заполнения
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
	Форма.Обновить(0);
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Нет
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
		
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем НачПовт, КонПовт;
	Перем ТаблЧасть;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Покупатель
	Покупатель = СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Покупатель");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Покупатель");
	
	// Секция Покупатель
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Поставщик = СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
	Иначе
		Поставщик = "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Поставщик");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Поставщик");
	
	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("ШапкаТаблицы");
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("ШапкаТаблицы");
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// выводим табличную часть
	ВыгрузитьТабличнуюЧасть(ТаблЧасть, "Номенклатура,Количество,Единица,Цена,Сумма");
	ТаблЧасть.Свернуть("Номенклатура,Единица,Цена", "Количество,Сумма");
	
	НомСтроки = 0;
	ТаблЧасть.ВыбратьСтроки();
	Пока ТаблЧасть.ПолучитьСтроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка");
	КонецЦикла;
		
	СуммаИтог = Итог("Сумма");
		
	// секция Итого
	ИсхТабл.ВывестиСекцию("Итого");
	
	// секция ИтогоНДС
	Если УчитыватьНДС = 1 Тогда
		СуммаНДСИтог = Итог("СуммаНДС");
		Если СуммаВклНДС = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНДСИтог;
		КонецЕсли;
		ИсхТабл.ВывестиСекцию("ИтогоНДС");
	КонецЕсли;
		
	// секция ИтогоНП
	Если УчитыватьНП = 1 Тогда
		СуммаНПИтог = Итог("СуммаНП");
		Если СуммаВклНП = 0 Тогда
			СуммаИтог = СуммаИтог + СуммаНПИтог;
		КонецЕсли;
		ИсхТабл.ВывестиСекцию("ИтогоНП");
	КонецЕсли;
		
	// секция СуммаПрописью
	ИсхТабл.ВывестиСекцию("СуммаПрописью");
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");

	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//		ВыборФормы =
//   	1, если перед печатью необходимо выбрать печатную форму, 
//		0, если надо напечатать, используя последнюю выбранную
//
// Описание:
// 	Вызывается по кнопке "Печать" и по кнопке "Выбор печатной формы" (небольшая 
// 	кнопка рядом с кнопкой печати)
//
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	    
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст, ДокументОснование);   
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Валюта	= глРубли;
	КонецЕсли;
	Курс		= глКурсДляВалюты(Валюта, ДатаДок);
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
Процедура ВводНового(Скопирован)
	
	ПараметрВызова = Форма.Параметр;
	ВызвалиИзОтчета = ?(ТипЗначенияСтр(ПараметрВызова) = "СписокЗначений", 1, 0);
	
	Если ВызвалиИзОтчета = 1 Тогда
		
		// вводим новый документ из отчета => получитм и установим
		// дату документа и фирму
		ДатаДок = ПараметрВызова.Получить("ДатаДок");
		Фирма = ПараметрВызова.Получить("Фирма");
		
		// Обычные действия при смене фирмы (надо поменять номер и пареметры налогообложения)
		глПриИзмененииФирмы(Контекст);
	КонецЕсли;
	
	глЗаполнитьШапку(Контекст, Скопирован,"Покупка");
	
	Если ВызвалиИзОтчета = 1 Тогда
		ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова)		
	КонецЕсли;
	
	Если Скопирован = 1 Тогда
		ПересчетСуммыВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры // ВводНового()                      

//******************************************************************************
// Предопределенная процедура

Процедура ПриОткрытии() 
	            
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=0 Тогда
			Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
				КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
				ПоКнопкеПечать(1,КолЭкз);
				СтатусВозврата(0);Возврат;
			ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
				ПоКнопкеПечать(0);                
				СтатусВозврата(0);Возврат;
			Иначе
				Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
				СтатусВозврата(0);Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = Итог("Сумма")+?(СуммаВклНП=1,0,Итог("СуммаНП"))+?(СуммаВклНДС=1,0,Итог("СуммаНДС"));
	СуммаДокументаСтараяРуб = глПересчет (СуммаДокументаСтараяРуб,Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.        Доступность(0);  
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.   Доступность(0);
		Форма.кнЗаписать.  Доступность(0);
		Форма.кнЗаполнить. Доступность(0);
		Форма.кнПровести.  Доступность(0);
		Форма.кнПодбор.    Доступность(0);
		Форма.кнЦены.      Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Отчет о состоянии заказа");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < ПолучитьДатуТА()) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
                      
	УстановкаВидимостиСуммВПодвале();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();
	ОбновитьНадписи();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриПовторномОткрытии()
	
	ПараметрВызова = Форма.Параметр;
	ВызвалиИзОтчета = ?(ТипЗначенияСтр(ПараметрВызова) = "СписокЗначений", 1, 0);
	Если ВызвалиИзОтчета = 1 Тогда
		ЗаполнитьТаблЧастьПоОтчету(ПараметрВызова);
	КонецЕсли;
	
КонецПроцедуры // ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ОткрытьЗаявку") Тогда
		Если ПоЗаявке.Выбран()=0 Тогда
			Предупреждение("Не могу открыть заявку: заявка не указана!",60);
		Иначе     
			ОткрытьФорму(ПоЗаявке);
		КонецЕсли;  

	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//******************************************************************************
// Предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
 	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;        
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура

Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	Если ТипЗначенияСтр(ВыбЗнач) = "СписокЗначений" Тогда
		
		Если ВыбЗнач.Получить("ПоКнопкеПодбор") = 1 Тогда // подбор инициировали кнопкой "Подбор"
			
			// есть ставки налогов, нет скидки
			глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 0);
		Иначе
		
			 // подбор инициировали кнопкой "Заполнить"
			СписокЗаявок = ВыбЗнач.Получить("Объекты");
			Сводно       = ВыбЗнач.Получить("Буфер");
			Сводно       = ?(ПустоеЗначение(Сводно) = 1, 0, Сводно);
			ЗаполнитьТаблЧастьПоСписку(СписокЗаявок, Сводно);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()  

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
			    
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 0);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ

// формируем таблицу печатных форм
НомерТекущейФормы = 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";

// формируем список вариантов заполнения спецификации документа
СписокВариантовЗаполнения = СоздатьОбъект("СписокЗначений");
СписокВариантовЗаполнения.ДобавитьЗначение("Сводно по всем заявкам");
СписокВариантовЗаполнения.ДобавитьЗначение("Детально по всем заявкам");
СписокВариантовЗаполнения.ДобавитьЗначение("Сводно по выбранным заявкам");
СписокВариантовЗаполнения.ДобавитьЗначение("Детально по выбранным заявкам");
СписокВариантовЗаполнения.ДобавитьЗначение("По данным отчета ""Заявки покупателей""");
СписокВариантовЗаполнения.ДобавитьЗначение("По данным отчета ""Планирование закупок""");
СписокВариантовЗаполнения.ДобавитьЗначение("По минимальному остатку");
