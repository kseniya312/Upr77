////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПроведениеПоРегистрам()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  Проведение по регистрам оперативного учета.
//
Процедура ПроведениеПоРегистрам()
	
	Перем ВремРегистры, РегРТовар,ВремПоставщики;
	Перем ТаблИтогов;
	Перем СуммаВознаграждения; // сумма комиссионного вознаграждения (расчетная)
	Перем СуммаПродСтоимость;  // для накопления суммы продажной стоимости
	
	// Удаление движений по регистрам.
	Для Номер = 1 По Метаданные.Регистр() Цикл
		ОчиститьДвижения("Регистр."+Метаданные.Регистр(Номер).Идентификатор);
	КонецЦикла;
	
	// запишем задолженность комитенту
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(ТекущийДокумент(),  "ТекДок"     );
	СписокПараметров.ДобавитьЗначение(Фирма,		      "Фирма"      );
	СписокПараметров.ДобавитьЗначение(Контрагент,	      "Контрагент" );
	СписокПараметров.ДобавитьЗначение(Договор,		      "Договор"    );
	СписокПараметров.ДобавитьЗначение(глКО.ОтчетКомитенту,"КодОперации");
	                                                
	ТаблицаТМЦ = глПодготовитьТаблицуДокумента(Контекст);
	Если РежимВыбораТМЦ = 1 Тогда
		ТаблицаТМЦ.УдалитьСтроки();
	КонецЕсли;
	                      
	ВремРегистры 	= СоздатьОбъект("Регистры");
	СписокТМЦ       = СоздатьОбъект("СписокЗначений");
	ТаблицаТМЦ.Выгрузить(СписокТМЦ,,,"Номенклатура");
	РегРТовар 		= ВремРегистры.РеализованныйТовар;
	РегРТовар.УстановитьЗначениеФильтра("Фирма",	   Фирма,	 1);
	РегРТовар.УстановитьЗначениеФильтра("Договор",	   Договор,  1);    
	РегРТовар.УстановитьЗначениеФильтра("Номенклатура",СписокТМЦ,2);
	
	ВремПоставщики = ВремРегистры.Поставщики;
	глФильтрДолгов(Контекст, Договор, СписокПараметров, ВремПоставщики);
	
	Если ИтогиАктуальны()=0 Тогда
		РегРТовар.   ВременныйРасчет(1);
		ВремРегистры.Актуальность(1);
		ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
	КонецЕсли;
	
	ТаблДолгов = СоздатьОбъект("ТаблицаЗначений");

	ТаблДолгов.НоваяКолонка("КредДокумент");
	ТаблДолгов.НоваяКолонка("ВидДолга");
	ТаблДолгов.НоваяКолонка("СтавкаНДС");
	ТаблДолгов.НоваяКолонка("Сумма");
	ТаблДолгов.НоваяКолонка("СуммаУпр");
	ТаблДолгов.НоваяКолонка("СуммаРуб");
	ТаблДолгов.НоваяКолонка("СуммаНДС");
	ТаблДолгов.НоваяКолонка("СуммаНП");

	СуммаВознаграждения = 0;
	СуммаПродСтоимость  = 0;
    КомитентуСуммаУпр   = 0;
	КомитентуСуммаРуб   = 0;
	КомитентуСумма      = 0;

	КурсВалютыВзаиморасчетов = глКурсДляВалюты(Договор.ВалютаВзаиморасчетов,ДатаДок);
	КурсРубля                = глКурсДляВалюты(глРубли,                     ДатаДок);
	КурсДоллара              = глКурсДляВалюты(глДоллары,                   ДатаДок);
	
	// перебор остатков реализованного товара. Расчет вознаграждения.
    Если РежимВыбораТМЦ = 2 Тогда
		
		ТаблицаТМЦ.ВыбратьСтроки();
		Пока ТаблицаТМЦ.ПолучитьСтроку()= 1 Цикл
			ПогаситьКолВо 	= ТаблицаТМЦ.Количество;
			ЗнакДвижения	= ?(ПогаситьКолВо<0,-1,1);
			ПогаситьКолВо 	= ПогаситьКолВо			*ЗнакДвижения;
			ПогаситьРуб 	= ТаблицаТМЦ.СуммаРуб	*ЗнакДвижения; //  в валюте бух учета
			ТекНоменк 		= ТаблицаТМЦ.Номенклатура;
			
			Регистр.РеализованныйТовар.ПривязыватьСтроку(ТаблицаТМЦ.НомерСтрокиДокумента);
			
			РегРТовар.УстановитьЗначениеФильтра("Номенклатура",ТекНоменк,1);
			Если ПустоеЗначение(ТаблицаТМЦ.Партия)=0 Тогда
				РегРТовар.УстановитьЗначениеФильтра("Партия",ТаблицаТМЦ.Партия,1);
			Иначе
				РегРТовар.УстановитьЗначениеФильтра("Партия",,0);	
			КонецЕсли;
			РегРТовар.ВыгрузитьИтоги(ТаблИтогов,1,1);
			
			ТаблИтогов.ВыбратьСтроки();
			Пока (ТаблИтогов.ПолучитьСтроку()=1) и (ПогаситьКолВо<>0) Цикл
				
				ОстатокКолВо = ТаблИтогов.Количество;
				Если (ЗнакДвижения * ОстатокКолВо)<0 Тогда
					// строки возврата не должны погашать строки продаж и наоборот
					Продолжить;
				КонецЕсли;  
				
				ОстатокКолВо 	= ОстатокКолВо             * ЗнакДвижения;
				ОстатокСумма 	= ТаблИтогов.ПродСтоимость * ЗнакДвижения;
				СписатьКолВо 	= Мин(ОстатокКолВо,ПогаситьКолВо);
				КоэффСписания 	= СписатьКолВо/ОстатокКолВо;
				СписатьСумму 	= Окр(ОстатокСумма*КоэффСписания,2,1);
				СуммаПогашенная = ПогаситьРуб * СписатьКолВо/ПогаситьКолВо;
                    
				СуммаВознагражденияСтроки = 0;
				Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
					СуммаВознагражденияСтроки = (СписатьСумму - СуммаПогашенная);
					
				ИначеЕсли СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПродаж Тогда
					СуммаВознагражденияСтроки = Окр((СписатьСумму * Процент / 100),2,1);
				
				ИначеЕсли СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли Тогда
					УчетнаяСтоимость = глПересчет(СписатьКолВо * ТаблИтогов.Партия.ЗакупочнаяЦена,
					                   Договор.ВалютаВзаиморасчетов,КурсВалютыВзаиморасчетов,
									   глРубли, КурсРубля);
					СуммаВознагражденияСтроки = Окр(((СписатьСумму - УчетнаяСтоимость) * Процент / 100),2,1);
				           
				КонецЕсли;
				СуммаВознаграждения = СуммаВознаграждения + СуммаВознагражденияСтроки * ЗнакДвижения;
				СуммаПродСтоимость  = СуммаПродСтоимость  + СписатьСумму              * ЗнакДвижения;
				    
				// измерения
				Регистр.РеализованныйТовар.Фирма 			= ТаблИтогов.Фирма;
				Регистр.РеализованныйТовар.Договор 			= ТаблИтогов.Договор;
				Регистр.РеализованныйТовар.Номенклатура 	= ТаблИтогов.Номенклатура;
				Регистр.РеализованныйТовар.Партия 			= ТаблИтогов.Партия;
				Регистр.РеализованныйТовар.ДокПродажи		= ТаблИтогов.ДокПродажи;
				// ресурсы
				Регистр.РеализованныйТовар.Количество 		= СписатьКолВо             * ЗнакДвижения;
				Регистр.РеализованныйТовар.ПродСтоимость 	= СписатьСумму             * ЗнакДвижения;
				// реквизиты
				Регистр.РеализованныйТовар.Вознаграждение   = СуммаВознагражденияСтроки* ЗнакДвижения;
				Регистр.РеализованныйТовар.ДвижениеРасходВыполнить();
				
				ПогаситьКолВо 	= ПогаситьКолВо - СписатьКолВо;
				ПогаситьРуб 	= ПогаситьРуб 	- СуммаПогашенная;

			КонецЦикла; // по строкам таблицы итогов
			
			Если ПогаситьКолВо<>0 Тогда 
				ТекстСообщения = "В отчете указано на "+ПогаситьКолВо+" "+ТекНоменк.БазоваяЕдиница+" больше ";
				ТекстСообщения = ТекстСообщения + " товара "+СокрП(ТекНоменк.Наименование)+", чем было "+
				?(ЗнакДвижения = 1 ,"продано!","возвращено покупателями!");
				глНеПроводить(Контекст, ТекстСообщения);
				Возврат;
			КонецЕсли;                              
		КонецЦикла; // по строкам таблицы документа
		
	Иначе // погашаем все проданные товары
		РегРТовар.УстановитьЗначениеФильтра("Номенклатура",,0);
		РегРТовар.УстановитьЗначениеФильтра("Партия",      ,0);
		РегРТовар.ВыгрузитьИтоги(ТаблИтогов,1,1);
		
		ТаблИтогов.ВыбратьСтроки();
		Пока (ТаблИтогов.ПолучитьСтроку()=1) Цикл
			
			СуммаВознагражденияСтроки = 0;
			Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПродаж Тогда
				СуммаВознагражденияСтроки = Окр((ТаблИтогов.ПродСтоимость * Процент / 100),2,1);
				
			ИначеЕсли СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли Тогда
				УчетнаяСтоимость = глПересчет(ТаблИтогов.Количество * ТаблИтогов.Партия.ЗакупочнаяЦена,
				                   Договор.ВалютаВзаиморасчетов,КурсВалютыВзаиморасчетов,
								   глРубли, КурсРубля);
				СуммаВознагражденияСтроки = Окр(((ТаблИтогов.ПродСтоимость - УчетнаяСтоимость) * Процент / 100),2,1);
				           
			КонецЕсли;
			СуммаВознаграждения = СуммаВознаграждения + СуммаВознагражденияСтроки;  
			СуммаПродСтоимость  = СуммаПродСтоимость  + ТаблИтогов.ПродСтоимость;
            
			// измерения
			Регистр.РеализованныйТовар.Фирма 			= ТаблИтогов.Фирма;
			Регистр.РеализованныйТовар.Договор 			= ТаблИтогов.Договор;
			Регистр.РеализованныйТовар.Номенклатура 	= ТаблИтогов.Номенклатура;
			Регистр.РеализованныйТовар.Партия 			= ТаблИтогов.Партия;
			Регистр.РеализованныйТовар.ДокПродажи		= ТаблИтогов.ДокПродажи;
			// ресурсы
			Регистр.РеализованныйТовар.Количество 		= ТаблИтогов.Количество;
			Регистр.РеализованныйТовар.ПродСтоимость 	= ТаблИтогов.ПродСтоимость;
			// реквизиты
			Регистр.РеализованныйТовар.Вознаграждение   = СуммаВознагражденияСтроки;
			Регистр.РеализованныйТовар.ДвижениеРасходВыполнить();
		КонецЦикла;
	КонецЕсли;
		
	            
	Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
		КомитентуСуммаУпр = ТаблицаТМЦ.Итог("СуммаУпр");
		КомитентуСуммаРуб = ТаблицаТМЦ.Итог("СуммаРуб");
		КомитентуСумма    = ТаблицаТМЦ.Итог("Сумма");
	ИначеЕсли (СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПродаж) 
	или       (СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли)
	Тогда
		КомитентуСуммаРуб = СуммаПродСтоимость - СуммаВознаграждения;
		
		КомитентуСуммаУпр = глПересчет(КомитентуСуммаРуб,
		                               глРубли,КурсРубля,
									   глДоллары, КурсДоллара);
		КомитентуСумма    = глПересчет(КомитентуСуммаРуб,
		                               глРубли,КурсРубля,
									   Договор.ВалютаВзаиморасчетов,КурсВалютыВзаиморасчетов);
	КонецЕсли;
					
	ТаблДолгов.НоваяСтрока();
	
	ТаблДолгов.КредДокумент = ТекущийДокумент();
	ТаблДолгов.ВидДолга 	= глВД.ДолгЗаТоварыПринятые;
		                      
	Знак = ?(КомитентуСумма < 0, -1, 1);
	
	ТаблДолгов.СуммаУпр 	= КомитентуСуммаУпр * Знак;
	ТаблДолгов.СуммаРуб 	= КомитентуСуммаРуб * Знак;
	ТаблДолгов.Сумма 		= КомитентуСумма    * Знак;

	ТаблДолгов.СуммаНДС 	= 0;
	ТаблДолгов.СуммаНП 		= 0;
	ТаблДолгов.СтавкаНДС	= ПолучитьПустоеЗначение("Перечисление.СтавкиНДС");
	
	//	если сумма меньше нуля, то были возвраты, поставщик нам должен 
	// то есть увеличение долга, знак (1), иначе - мы ему должны за товары, знак (-1)
	СписокПараметров.Установить("ЗнакДвижения", -Знак); 
	глДвижениеДолгов(Контекст,Договор,ТаблДолгов,СписокПараметров,ВремПоставщики);
	                                  
	// теперь комиссионное вознаграждение
	Если СуммаВознаграждения<>0 Тогда
		РегВзаим = Регистр.Покупатели;
		// измерения
		РегВзаим.Фирма				= Фирма;
		РегВзаим.Договор 			= Договор;
		РегВзаим.СтавкаНП 			= ПолучитьПустоеЗначение("Справочник.СтавкиНП");
		РегВзаим.ВидДолга			= глВД.ДолгЗаУслуги;
		РегВзаим.КредДокумент		= ТекущийДокумент();
		
		// ресурсы  
		РегВзаим.СуммаВал			= глПересчет(СуммаВознаграждения,глРубли,КурсРубля,Договор.ВалютаВзаиморасчетов,КурсВалютыВзаиморасчетов);
		РегВзаим.СуммаУпр			= глПересчет(СуммаВознаграждения,глРубли,КурсРубля,глДоллары,КурсДоллара);
		РегВзаим.СуммаРуб			= СуммаВознаграждения;
		РегВзаим.СуммаНП			= 0;
		РегВзаим.Себестоимость		= 0;
		
		// реквизиты
		РегВзаим.ДоговорКомитента	= "";
		РегВзаим.КодОперации		= глКО.НачисленоКомиссионноеВознаграждение;
		РегВзаим.ДвижениеПриходВыполнить();
		
		РегВзаим.КодОперации		= глКО.ЗачтеноКомиссионноеВознаграждение;
		РегВзаим.ДокументОплаты 	= ТекущийДокумент();
		РегВзаим.ДвижениеРасходВыполнить();
		
		РегКнига = Регистр.КнигаПродаж;
		РегКнига.КредДокумент		= ТекущийДокумент();
		РегКнига.СтавкаНДС 			= СтавкаНДС;    
		РегКнига.ВидДолга			= глВД.ДолгЗаУслуги;
		
		РегКнига.СуммаРуб			= СуммаВознаграждения;
		РегКнига.СуммаНДС			= СуммаВознаграждения*глВыделяемыйНДС(РегКнига.СтавкаНДС);
		РегКнига.Кодоперации        = глКО.НачисленоКомиссионноеВознаграждение;
		РегКнига.ДвижениеПриходВыполнить();
		
	КонецЕсли;

КонецПроцедуры // ПроведениеПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПроведения(ВидыДвижений)
	
	// Проверка заполненности обязательных реквизитов.
	Если глВсеРеквизитыДокументаЗаполнены(Контекст,
		"Фирма,Валюта,Контрагент,Договор,СпособРасчета,РежимВыбораТМЦ")=0 Тогда
		Возврат;
	КонецЕсли;
	                 
	// Проведение по регистрам оперативного учета.	
	Если (ПустоеЗначение(ВидыДвижений) = 1) ИЛИ (Найти(ВидыДвижений, "Регистр") <> 0) Тогда
		ПроведениеПоРегистрам();
		
		Если СтатусВозврата() = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	глПриПроведении(Контекст, ВидыДвижений);
	
КонецПроцедуры //ОбработкаПроведения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
