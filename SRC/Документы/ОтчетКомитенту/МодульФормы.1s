////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;


Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтарыйДоговор, СтарыйКонтрагент;
Перем СуммаДокументаСтараяРуб,ВалютаДоговораСтарая; // для пересчета суммы в валюте взаиморасчетов

// для контроля изменений при записи 
Перем НачВалюта, НачКурс, НачКонтрагент, НачДоговор, НачФирма;

Перем ТекущийДолг;
Перем ВопросПередЗаполнением;

Функция ЗаполнениеПоИтогам() Далее          

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции // ТекстВалюты()

//******************************************************************************
// УстановкаВидимостиСуммВПодвале()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Устанавливает невидимость суммы в валюте взаиморасчетов в табличной части
//  и недоступность кнопки изменения суммы взаиморасчетов, если валюта
//	документа совпадает с валютой договора.
//
Процедура УстановкаВидимостиСуммВПодвале()
	
	Если (ПустоеЗначение(Договор.ВалютаВзаиморасчетов) = 0)
	   И (Договор.ВалютаВзаиморасчетов <> Валюта)
	Тогда
		Флаг = 1;
	Иначе
		Флаг = 0;
	КонецЕсли;
	
	Форма.РамкаВзаимПодвал.Видимость(Флаг);
	Форма.ТекстВзаимПодвал.Видимость(Флаг); 
	Форма.кнСуммаВзаиморасчетов.Доступность(?(Форма.ТолькоПросмотр()=1,0,Флаг));
	
КонецПроцедуры // УстановкаВидимостиСуммВПодвале()

//******************************************************************************
// УправлениеВидимостью(НомерЗакладки)
//
// Параметры:
//  НомерЗакладки - номер закладки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  .
//
// Описание:
//  Управление видимостью элементов диалога в зависимости от выбранной закладки.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда
		ИспользуемыеСлои = "Шапка,Основной,Комментарий,Подвал";
		Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
			Форма.РежимВыбораТМЦ.   Доступность(0);
			Форма.РежимВыбораТМЦ2.  Доступность(0);
			Форма.Процент.     Доступность(0);
			Форма.ТекстПроцент.Доступность(0);
			ИспользуемыеСлои = ИспользуемыеСлои + ",ПодвалСумма,ОсновнойСумма";
		Иначе
			Форма.РежимВыбораТМЦ.   Доступность(1);
			Форма.РежимВыбораТМЦ2.  Доступность(1);
			Форма.Процент.     Доступность(1);
			Форма.ТекстПроцент.Доступность(1);
		КонецЕсли;
		Форма.ИспользоватьСлой(ИспользуемыеСлои);
		Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
			УстановкаВидимостиСуммВПодвале();
		КонецЕсли;
	Иначе               
		ИспользуемыеСлои = "Шапка,ТабличнаяЧасть,Подвал";
		Форма.ИспользоватьСлой(ИспользуемыеСлои);                                  
		Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
			ИспользуемыеСлои = ИспользуемыеСлои + ",ПодвалСумма,ТабличнаяЧастьСумма";
			Форма.Цена. Видимость(1);
			Форма.Сумма.Видимость(1);
		Иначе
			Форма.Цена. Видимость(0);
			Форма.Сумма.Видимость(0);	
    	КонецЕсли;       
		Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
			УстановкаВидимостиСуммВПодвале(); 
		КонецЕсли;
	КонецЕсли;       
	
КонецПроцедуры // УправлениеВидимостью()
                                          
//******************************************************************************
// УстановкаНаличияЗакладок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Если документ введен с режимом ручного выбора ТМЦ, то показываем закладку.
//
Процедура УстановкаНаличияЗакладок()
	    
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.УдалитьВсе();
    Форма.Закладки.ДобавитьЗначение("Шапка");
	
	Если (РежимВыбораТМЦ = 1) Тогда
		// ничего
	Иначе
	    Форма.Закладки.ДобавитьЗначение("Табличная часть");
	КонецЕсли;
	Форма.Закладки.ТекущаяСтрока(1);
	УправлениеВидимостью(1);
	
КонецПроцедуры // УстановкаНаличияЗакладок()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстДоговора	.Заголовок(глСтрокаДоговора		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаВзаимПодвал.Заголовок("Всего ("+ТекстВалюты(Договор.ВалютаВзаиморасчетов)+")");

КонецПроцедуры //ОбновитьНадписи()

//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	
	ТекущийДолг = глТекущийДолг(Фирма, Договор, "поставщик");
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Вызывается из формулы невидимого текстового поля
// 	Производит проверку, изменилась ли сумма документа и валюта договора и, 
// 	при необходимости, пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если СуммаВзаиморасчетов<>0 Тогда
			СуммаВзаиморасчетов=0;
		КонецЕсли;
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		Возврат "";
	КонецЕсли;                      
	
	СуммаВзаиморасчетовДок	= Итог("Сумма");

	СуммаВзаиморасчетовДокРуб	= глПересчет (СуммаВзаиморасчетовДок,Валюта,Курс,глРубли,ДатаДок);
	
	Если (СуммаВзаиморасчетовДокРуб<>СуммаДокументаСтараяРуб) или 
		 (ВалютаДоговораСтарая	<>Договор.ВалютаВзаиморасчетов)Тогда
		 	
		// изменили сумму документа или валюту взаиморасчетов, надо пересчитать 
		СуммаДокументаСтараяРуб 	= СуммаВзаиморасчетовДокРуб;      
		ВалютаДоговораСтарая		= Договор.ВалютаВзаиморасчетов;
		
	    СуммаВзаиморасчетов		= глПересчет(СуммаВзаиморасчетовДок,
									Валюта,Курс,
									Договор.ВалютаВзаиморасчетов,ДатаДок);
		Форма.Обновить();
	КонецЕсли;

КонецФункции // ПересчетСуммыВзаиморасчетов()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	// Проверяем, действительно ли что-то надо делать
	Если СтараяДата <> ДатаДок Тогда
		
		глПриИзмененииДаты(Контекст);
		СтараяДата = ДатаДок;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Процедура вызывается при смене договора.
//
Процедура ПриИзмененииДоговора()
	
	Если СтарыйДоговор <> Договор Тогда
		глПриИзмененииДоговора(Контекст);
		СтарыйДоговор = Договор;
		ОбновитьНадписи();
		РасчетТекущегоДолга();           
		УстановкаВидимостиСуммВПодвале();
		                          
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//*****************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
// 	Нет
//
// Возвращаемое значение: 
// 	Нет
//
// Описание:
// 	Процедура вызывается при выборе контрагента
//
Процедура ПриИзмененииКонтрагента() 
	
	Если СтарыйКонтрагент <> Контрагент Тогда
		глПриИзмененииКонтрагента(Контекст);
		СтарыйКонтрагент = Контрагент;
		// если изменился контрагент, то договор тоже изменится
		// все пересчеты в связи со сменой договора выполнятся 
		// в процедуре глПриИзмененииКонтрагента()
		СтарыйДоговор = Договор; 
		ОбновитьНадписи();    
		РасчетТекущегоДолга();
		УстановкаВидимостиСуммВПодвале();
		
	КонецЕсли;     
	
КонецПроцедуры //ПриИзмененииКонтрагента()    

//******************************************************************************
// ПриИзмененииСпособаРасчета()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Способ расчета".
//
// Описание:
//  При изменении способа расчета надо его проверить и установить видимость 
//  элементов диалога.
//
Процедура ПриИзмененииСпособаРасчета()
	
	Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
		РежимВыбораТМЦ = 2;
	КонецЕсли;
	УстановкаНаличияЗакладок();
	
КонецПроцедуры // ПриИзмененииСпособаРасчета()
                     
//******************************************************************************
// ПриИзмененииРежимВыбораТМЦ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Флаг "По всем ТМЦ".
//
// Описание:
//  При изменении флага "По всем ТМЦ" надо установить наличие закладок.
//
Процедура ПриИзмененииРежимВыбораТМЦ()
	
	Если (РежимВыбораТМЦ = 1)
	и    (КоличествоСтрок() > 0)
	Тогда     
		Предупреждение("В данном документе заполнена табличная часть.
		|При установке режима ""По всем товарам"" она будет очищена при записи документа.",60);
	КонецЕсли;          
	УстановкаНаличияЗакладок();
	
КонецПроцедуры // ПриИзмененииРежимВыбораТМЦ()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	УстановкаВидимостиСуммВПодвале();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                      
//******************************************************************************
// ЗаполнитьДокументИзИтогов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа из оперативных итогов, (остатков 
//	проданного комиссионного товара, за который еще не отчитались)
//
Функция ЗаполнениеПоИтогам()                    
	
	Перем ТаблИтогов;
	
	// фирма и договор (контрагента) должны быть заполнены
	Если ПустоеЗначение(Фирма) = 1 Тогда
		Возврат "Не выбрана фирма!";
	КонецЕсли;
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		Возврат "Не выбран договор контрагента!";
	КонецЕсли;
	
	УдалитьСтроки(); // очистим сперва наш документ
	
	ВремРегистры = СоздатьОбъект("Регистры");
	РегРТовар	= ВремРегистры.РеализованныйТовар;
	
	РегРТовар.УстановитьЗначениеФильтра("Договор", 	Договор);
	РегРТовар.УстановитьЗначениеФильтра("Фирма", 	Фирма);
	
	// если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда
		// Новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда
			// выписываемый задним числом
			РегРТовар.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе 
		// Сохраненный документ. 
		Если СравнитьТА() < 1 Тогда
			//Позиция не больше ТА.
			РегРТовар.ВременныйРасчет();
			ВремРегистры.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегРТовар.ВыгрузитьИтоги(ТаблИтогов);
	ТаблИтогов.НоваяКолонка("ФлагВозврата","Число","1","0");
	
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку() = 1 Цикл
		Если ТаблИтогов.Количество < 0 Тогда
		    ТаблИтогов.ФлагВозврата = 1;
		КонецЕсли;
	КонецЦикла;
	Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
		ДопПараметрыСвертки = ",Партия";
	Иначе
		ДопПараметрыСвертки = "";
	КонецЕсли;
	ТаблИтогов.Свернуть("ФлагВозврата,Номенклатура"+ДопПараметрыСвертки,"Количество");
	
	ТаблИтогов.ВыбратьСтроки();
	Пока ТаблИтогов.ПолучитьСтроку()=1 Цикл
		НоваяСтрока();
		Номенклатура = ТаблИтогов.Номенклатура;
		Единица      = ТаблИтогов.Номенклатура.ОсновнаяЕдиница;
		Коэффициент  = ТаблИтогов.Номенклатура.ОсновнаяЕдиница.Коэффициент;
		Количество   = ?(Коэффициент=0,0,(ТаблИтогов.Количество)/Коэффициент);
		Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
			Сумма    = ТаблИтогов.Партия.ЗакупочнаяЦена * ТаблИтогов.Количество;
			Сумма    = глПересчет(Сумма,Договор.ВалютаВзаиморасчетов,ДатаДок,Валюта,ДатаДок);
			Цена     = ?(Количество = 0,0, Сумма/Количество);
		КонецЕсли;
	КонецЦикла;        
	
	Если КоличествоСтрок() = 0 Тогда
		Возврат "Не обнаружено продаж или возвратов товаров по выбранным комитенту и договору!";
	КонецЕсли;
	
	Возврат "";
КонецФункции // ЗаполнениеПоИтогам()

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	Если КоличествоСтрок() <> 0 Тогда
		ТекстВопроса = ВопросПередЗаполнением + РазделительСтрок + " (перед заполнением табличная часть будет очищена)"
	Иначе
		ТекстВопроса = ВопросПередЗаполнением;
	КонецЕсли;
	
	Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
		Возврат;
	КонецЕсли;
	                  
	УдалитьСтроки();
	Результат = ЗаполнениеПоИтогам();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	//Параметры.ДобавитьЗначение(Склад,         "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет",           "ЦенаВподборе");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ПолучитьНДСдок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПолучитьНДСдок()
	Перем Рез;
	Рез = 0;
	Рег = СоздатьОбъект("Регистр.КнигаПродаж");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение() = 1 Цикл
		Рез = Рез + Рег.СуммаНДС;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // ПолучитьНДСдок()

//******************************************************************************
// ПодготовитьТаблицуВручную(ТаблПечати)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПодготовитьТаблицуВручную(ТаблПечати)
	
	ВыгрузитьТабличнуюЧасть(ТаблПечати, "Номенклатура,Цена,Количество,Единица,Сумма");
	ТаблПечати.НоваяКолонка("Вознаграждение", "Число");
	
	КолвоСтрок = ТаблПечати.КоличествоСтрок();
	
	Рег = СоздатьОбъект("Регистр.РеализованныйТовар");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока Рег.ПолучитьДвижение() = 1 Цикл
		Ном = Рег.НомерСтроки();
		Если Ном <= КолвоСтрок Тогда
			ТаблПечати.ПолучитьСтрокуПоНомеру(Рег.НомерСтроки());
			ТаблПечати.Вознаграждение = ТаблПечати.Вознаграждение + Рег.Вознаграждение;
			
			// пересчитаем сумму в рубли
			ТаблПечати.Сумма = глПересчет(ТаблПечати.Сумма, Валюта, Курс, глРубли, ДатаДок);
		КонецЕсли;
	КонецЦикла;
	
	ТаблПечати.Свернуть("Номенклатура,Единица,Цена", "Количество, Сумма, Вознаграждение");
	
КонецФункции // ПодготовитьТаблицуВручную()

//******************************************************************************
// ПодготовитьТаблицуПоПрибыли(ТаблПечати)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПодготовитьТаблицуОтПрибыли(ТаблПечати)
	
	ТаблПечати = СоздатьОбъект("ТаблицаЗначений");
	ТаблПечати.НоваяКолонка("Номенклатура");
	ТаблПечати.НоваяКолонка("Количество");
	ТаблПечати.НоваяКолонка("Себестоимость");
	ТаблПечати.НоваяКолонка("ПродСтоимость");
	ТаблПечати.НоваяКолонка("Прибыль");
	ТаблПечати.НоваяКолонка("Вознаграждение");
	
	Рег = СоздатьОбъект("Регистр.РеализованныйТовар");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	
	Пока Рег.ПолучитьДвижение() = 1 Цикл
		ТаблПечати.НоваяСтрока();
		
		ТаблПечати.Номенклатура   = Рег.Номенклатура;
		
		ТаблПечати.Количество     = Рег.Количество;
		ТаблПечати.Себестоимость  = глПересчет(Рег.Партия.ЗакупочнаяЦена, 
		                                       Договор.ВалютаВзаиморасчетов, 
											   ДатаДок, 
											   глРубли, 
											   ДатаДок) * 
								    Рег.Количество;
		ТаблПечати.ПродСтоимость  = Рег.ПродСтоимость;
		ТаблПечати.Вознаграждение = Рег.Вознаграждение;
		
	КонецЦикла;
	
	ТаблПечати.Свернуть("Номенклатура","Количество,Себестоимость,ПродСтоимость,Прибыль,Вознаграждение");
	
КонецФункции // ПодготовитьТаблицуПоПрибыли()

//******************************************************************************
// ПодготовитьТаблицуПоПрибыли(ТаблПечати)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПодготовитьТаблицуОтПродаж(ТаблПечати)
	
	ТаблПечати = СоздатьОбъект("ТаблицаЗначений");
	ТаблПечати.НоваяКолонка("Номенклатура");
	ТаблПечати.НоваяКолонка("Количество");
	ТаблПечати.НоваяКолонка("ПродСтоимость");
	ТаблПечати.НоваяКолонка("Вознаграждение");
	
	Рег = СоздатьОбъект("Регистр.РеализованныйТовар");
	Рег.ВыбратьДвиженияДокумента(ТекущийДокумент());
	
	Пока Рег.ПолучитьДвижение() = 1 Цикл
		ТаблПечати.НоваяСтрока();
		
		ТаблПечати.Номенклатура   = Рег.Номенклатура;
		
		ТаблПечати.Количество     = Рег.Количество;
		ТаблПечати.ПродСтоимость  = Рег.ПродСтоимость;
		ТаблПечати.Вознаграждение = Рег.Вознаграждение;
		
	КонецЦикла;
	
	ТаблПечати.Свернуть("Номенклатура","Количество,ПродСтоимость,Вознаграждение");
	
КонецФункции // ПодготовитьТаблицуПоПрибыли()

//******************************************************************************
// ПодготовитьТаблицуДляПечати(ТаблПечати, ДопИмя)
//
// Параметры:
//  ТаблПечати - 
//  ДопИмя     -
//
// Возвращаемое значение:
//  нет  
//
// Описание:
//
Процедура ПодготовитьТаблицуДляПечати(ТаблПечати, ДопИмя)
	
	Если СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.Ручное Тогда
		ПодготовитьТаблицуВручную(ТаблПечати);
		ДопИмя = "Вручную";
		
		
	ИначеЕсли СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли Тогда
		ПодготовитьТаблицуОтПрибыли(ТаблПечати);
		ДопИмя = "ОтПрибыли";
		
		
	ИначеЕсли СпособРасчета = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПродаж Тогда
		ПодготовитьТаблицуОтПродаж(ТаблПечати);
		ДопИмя = "ОтПродаж";
		
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьТаблицуДляПечати()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ДопИмя, ТаблПечати;
	
	Перем НачПовт, КонПовт;
	
	Если Проведен() = 0 Тогда
		Предупреждение("Документ распечатывается только после проведения!", 60);
		Возврат;
	КонецЕсли;
	
	ИсхТабл = СоздатьОбъект("Таблица");
	НачПовт = 0; КонПовт = 0;
	
	// секция Заголовок
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Заголовок");
	
	// Секция Комиссионер
	Комиссионер	= СокрЛП(Фирма.ЮрЛицо.ПолнНаименование) +  " " + глПредставлениеАдреса(Фирма.ЮрЛицо.ЮрАдрес);
	ИсхТабл.ВывестиСекцию("Комиссионер");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комиссионер");
	
	// Секция Комиссионер
	Если ПустоеЗначение(Контрагент) = 0 Тогда
		Коминент	= СокрЛП(Контрагент.ЮрФизЛицо.ПолнНаименование);
	Иначе
		Коминент	= "";
	КонецЕсли;
	ИсхТабл.ВывестиСекцию("Комитент");
	НачПовт = НачПовт + ИсхТабл.ВысотаСекции("Комитент");
	
	ПодготовитьТаблицуДляПечати(ТаблПечати, ДопИмя);
	// Секция Шапка таблицы
	ИсхТабл.ВывестиСекцию("Шапка_"+ДопИмя);
	КонПовт = НачПовт + ИсхТабл.ВысотаСекции("Шапка_"+ДопИмя);
	ИсхТабл.ПовторятьПриПечатиСтроки(НачПовт + 1, КонПовт);
	
	// выводим табличную часть
	НомСтроки = 0;
	
	ТаблПечати.ВыбратьСтроки();
	Пока ТаблПечати.ПолучитьСТроку() = 1 Цикл
		НомСтроки = НомСтроки + 1;
		ИсхТабл.ВывестиСекцию("Строка_" + ДопИмя);
	КонецЦикла;
	
	ИтогВознаграждение = ТаблПечати.Итог("Вознаграждение");
		
	// секция Итого
	ИсхТабл.ВывестиСекцию("Итого");
	
	// секция ИтогоНДС
	ИсхТабл.ВывестиСекцию("ИтогоНДС");
	
	// секция СуммаПрописью
	ИсхТабл.ВывестиСекцию("СуммаПрописью");
	
	// секция Подписи
	ИсхТабл.ВывестиСекцию("Подписи");
	
	Если СразуНаПринтер = 0 Тогда
		ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");
		Параметр.ДобавитьЗначение(""			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован,"Покупка");
	
	Если Скопирован = 1 Тогда
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	// по умолчанию = автоматически
	СпособРасчета	= Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли;
	Процент			= 100;
	РежимВыбораТМЦ	= 1;     
	СтавкаНДС		= Перечисление.СтавкиНДС.НДС16_67;
	
КонецПроцедуры    

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	                       
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
	СтарыйДоговор			= Договор;
	СтарыйКонтрагент		= Контрагент;
	СуммаДокументаСтараяРуб = глПересчет (Итог("Сумма"),Валюта,Курс,глРубли,ДатаДок);
	ВалютаДоговораСтарая	= Договор.ВалютаВзаиморасчетов;
	
	НачальнаяДатаДокумента	= ДатаДок;

	НачВалюта				= Валюта;
	НачКурс					= Курс;
	НачДоговор				= Договор;
	НачКонтрагент			= Контрагент;
	НачФирма 				= Фирма;
	
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	ОбновитьНадписи();
	УстановкаНаличияЗакладок();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	              
	РасчетТекущегоДолга();

КонецПроцедуры                                                                  

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью(НомерЗакладки);
	Если НомерЗакладки=2 Тогда
		ОбновитьНадписи();
	КонецЕсли;       
	
КонецПроцедуры                                                                  

//******************************************************************************
//Предопределенная процедура

Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФКонтр(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачКонтрагент, НачДоговор, НачФирма, ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
			СтатусВозврата(0);
		Иначе
			Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПродаж", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
				Предупреждение(ОписаниеОш, 60);
				СтатусВозврата(0);
			Иначе
				НачВалюта		= Валюта;
				НачКурс			= Курс;
				НачКонтрагент	= Контрагент;
				НачДоговор		= Договор;
				НачФирма		= Фирма;
				
				Если (РежимВыбораТМЦ = 1)
				   и (КоличествоСтрок() > 0) Тогда    // Чистим не нужную в данном режиме табличную часть
					УдалитьСтроки();
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);            
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	//нет ставок налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("Нет"          , "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 0, 0, 0);
			КонецЕсли;
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ
ВидСчетаФактуры		= "СчетФактураВыданный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";


ВопросПередЗаполнением = "Заполнить автоматически по продажам товаров по договору выбранного комитента?";