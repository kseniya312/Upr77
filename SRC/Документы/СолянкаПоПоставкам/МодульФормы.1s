Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; // для показа остатков
Перем ОстатокВсего, ОстатокТекущий; //Для вывода формы
Перем __ОстатокНаСкладе, __ОстатокПоФирме , __Резерв , __ТовСкидка; // для показа остатков
Перем СписокДействий; // для механизма кнопки "Действия"
Перем НС, Рег1, Рег2, Склад_темп, ТЗ, ТЗ2;	//Работа с остатками
Перем ТекСтрокаВТаблице;
Перем Расшифровка, СкладыДляОстатков,СтарНом;

Функция ПокажиОстатки() Далее	
Функция ТекстЗапросаПоРасходам() Далее
Процедура ВывестиИзлишкиПоСкладам() Далее
Процедура ОбрфлСкрытьСклады()     Далее

Процедура кнОбновитьИзлишки()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		ВывестиИзлишкиПоСкладам();	
	КонецЦикла;	
КонецПроцедуры	

Процедура СоздатьПеремещения() 
	                                       
	ПеремещениеЦС 	= СоздатьОбъект("Документ.ПеремещениеТМЦ");
	ПеремещениеЭ 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеК 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеЛенс = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеЛен 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеРад 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеСтах = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	ПеремещениеТур 	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
	
	СпрСклады = СоздатьОбъект("Справочник.Склады");
	               
	ПеремещениеЭ.Новый();            
	ПеремещениеЭ.ДатаДок			= ТекущаяДата(); 
	ПеремещениеЭ.ДокОснование       = ТекущийДокумент();
	ПеремещениеЭ.Валюта				= глРубли;
	ПеремещениеЭ.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00002");
	ПеремещениеЭ.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеЭ.Фирма				= Фирма;
	ПеремещениеЭ.СкладПолучатель	= Склад;
	ПеремещениеЭ.ФирмаПолучатель	= Фирма;
	ПеремещениеЭ.УчитыватьНДС		= 1;
	ПеремещениеЭ.СуммаВклНДС		= 1;
	ПеремещениеЭ.УчитыватьНП		= 1;
	ПеремещениеЭ.СуммаВклНП			= 1;  
	ПеремещениеЭ.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеЦС.Новый();            
	ПеремещениеЦС.ДатаДок			= ТекущаяДата(); 
	ПеремещениеЦС.ДокОснование       = ТекущийДокумент();
	ПеремещениеЦС.Валюта				= глРубли;
	ПеремещениеЦС.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00013");
	ПеремещениеЦС.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеЦС.Фирма				= Фирма;
	ПеремещениеЦС.СкладПолучатель	= Склад;
	ПеремещениеЦС.ФирмаПолучатель	= Фирма;
	ПеремещениеЦС.УчитыватьНДС		= 1;
	ПеремещениеЦС.СуммаВклНДС		= 1;
	ПеремещениеЦС.УчитыватьНП		= 1;
	ПеремещениеЦС.СуммаВклНП			= 1;  
	ПеремещениеЦС.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
		
	ПеремещениеК.Новый();            
	ПеремещениеК.ДатаДок			= ТекущаяДата();
	ПеремещениеК.ДокОснование       = ТекущийДокумент();
	ПеремещениеК.Валюта				= глРубли;
	ПеремещениеК.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00020");
	ПеремещениеК.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеК.Фирма				= Фирма;
	ПеремещениеК.СкладПолучатель	= Склад;
	ПеремещениеК.ФирмаПолучатель	= Фирма;
	ПеремещениеК.УчитыватьНДС		= 1;
	ПеремещениеК.СуммаВклНДС		= 1;
	ПеремещениеК.УчитыватьНП		= 1;
	ПеремещениеК.СуммаВклНП			= 1;  
	ПеремещениеК.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеЛенс.Новый();            
	ПеремещениеЛенс.ДатаДок			= ТекущаяДата(); 
	ПеремещениеЛенс.ДокОснование       = ТекущийДокумент();
	ПеремещениеЛенс.Валюта			= глРубли;
	ПеремещениеЛенс.Курс			= 1;    
	СпрСклады.НайтиПоКоду("00004");
	ПеремещениеЛенс.Склад			= СпрСклады.ТекущийЭлемент();
	ПеремещениеЛенс.Фирма			= Фирма;
	ПеремещениеЛенс.СкладПолучатель	= Склад;
	ПеремещениеЛенс.ФирмаПолучатель	= Фирма;
	ПеремещениеЛенс.УчитыватьНДС	= 1;
	ПеремещениеЛенс.СуммаВклНДС		= 1;
	ПеремещениеЛенс.УчитыватьНП		= 1;
	ПеремещениеЛенс.СуммаВклНП		= 1;  
	ПеремещениеЛенс.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеЛен.Новый();            
	ПеремещениеЛен.ДатаДок			= ТекущаяДата();
	ПеремещениеЛен.ДокОснование       = ТекущийДокумент();
	ПеремещениеЛен.Валюта				= глРубли;
	ПеремещениеЛен.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00029");
	ПеремещениеЛен.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеЛен.Фирма				= Фирма;
	ПеремещениеЛен.СкладПолучатель	= Склад;
	ПеремещениеЛен.ФирмаПолучатель	= Фирма;
	ПеремещениеЛен.УчитыватьНДС		= 1;
	ПеремещениеЛен.СуммаВклНДС		= 1;
	ПеремещениеЛен.УчитыватьНП		= 1;
	ПеремещениеЛен.СуммаВклНП			= 1;  
	ПеремещениеЛен.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеРад.Новый();            
	ПеремещениеРад.ДатаДок			= ТекущаяДата();
	ПеремещениеРад.ДокОснование       = ТекущийДокумент();
	ПеремещениеРад.Валюта				= глРубли;
	ПеремещениеРад.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00006");
	ПеремещениеРад.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеРад.Фирма				= Фирма;
	ПеремещениеРад.СкладПолучатель	= Склад;
	ПеремещениеРад.ФирмаПолучатель	= Фирма;
	ПеремещениеРад.УчитыватьНДС		= 1;
	ПеремещениеРад.СуммаВклНДС		= 1;
	ПеремещениеРад.УчитыватьНП		= 1;
	ПеремещениеРад.СуммаВклНП			= 1;  
	ПеремещениеРад.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеСтах.Новый();            
	ПеремещениеСтах.ДатаДок			= ТекущаяДата();
	ПеремещениеСтах.ДокОснование       = ТекущийДокумент();
	ПеремещениеСтах.Валюта				= глРубли;
	ПеремещениеСтах.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00005");
	ПеремещениеСтах.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеСтах.Фирма				= Фирма;
	ПеремещениеСтах.СкладПолучатель	= Склад;
	ПеремещениеСтах.ФирмаПолучатель	= Фирма;
	ПеремещениеСтах.УчитыватьНДС		= 1;
	ПеремещениеСтах.СуммаВклНДС		= 1;
	ПеремещениеСтах.УчитыватьНП		= 1;
	ПеремещениеСтах.СуммаВклНП			= 1;  
	ПеремещениеСтах.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	ПеремещениеТур.Новый();            
	ПеремещениеТур.ДатаДок			= ТекущаяДата();
	ПеремещениеТур.ДокОснование       = ТекущийДокумент();
	ПеремещениеТур.Валюта				= глРубли;
	ПеремещениеТур.Курс				= 1;    
	СпрСклады.НайтиПоКоду("00017");
	ПеремещениеТур.Склад				= СпрСклады.ТекущийЭлемент();
	ПеремещениеТур.Фирма				= Фирма;
	ПеремещениеТур.СкладПолучатель	= Склад;
	ПеремещениеТур.ФирмаПолучатель	= Фирма;
	ПеремещениеТур.УчитыватьНДС		= 1;
	ПеремещениеТур.СуммаВклНДС		= 1;
	ПеремещениеТур.УчитыватьНП		= 1;
	ПеремещениеТур.СуммаВклНП			= 1;  
	ПеремещениеТур.Комментарий		= "Создано автоматически при заполнении сводного листа заказа номер "+НомерДок + " от " + ДатаДок;
	
	СпрНом = СоздатьОбъект("Справочник.Номенклатура");
	
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Если ЗабратьЦС <> 0 Тогда
			ПеремещениеЦС.НоваяСтрока();
			ПеремещениеЦС.Номенклатура = Номенклатура;
			ПеремещениеЦС.Количество   = ЗабратьЦС;
			ПеремещениеЦС.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеЦС.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЦС, "Количество");
			
			//СпрНом.ИспользоватьДату(ДатаДок);
			//СпрНом.НайтиЭлемент(Номенклатура);
			//ПеремещениеЦС.Цена = СпрНом.ПоследняяЦенаПрихода;
			//ПеремещениеЦС.Сумма = ПеремещениеК.Количество*ПеремещениеК.Цена; 
			
		КонецЕсли;
		Если ЗабратьК <> 0 Тогда
			ПеремещениеК.НоваяСтрока();
			ПеремещениеК.Номенклатура = Номенклатура;
			ПеремещениеК.Количество   = ЗабратьК;
			ПеремещениеК.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеК.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеК, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеК.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеК.Сумма = ПеремещениеК.Количество*ПеремещениеК.Цена; 
			
		КонецЕсли;
		Если ЗабратьЭ <> 0 Тогда 
			ПеремещениеЭ.НоваяСтрока();
			ПеремещениеЭ.Номенклатура = Номенклатура;
			ПеремещениеЭ.Количество   = ЗабратьЭ;
			ПеремещениеЭ.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеЭ.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЭ, "Количество");  
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЭ.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЭ.Сумма = ПеремещениеЭ.Количество*ПеремещениеЭ.Цена;
		КонецЕсли;
		Если ЗабратьСтах <> 0 Тогда                    
			ПеремещениеСтах.НоваяСтрока();
			ПеремещениеСтах.Номенклатура = Номенклатура;
			ПеремещениеСтах.Количество   = ЗабратьСтах;
			ПеремещениеСтах.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеСтах.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеСтах, "Количество");    
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеСтах.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеСтах.Сумма = ПеремещениеСтах.Количество*ПеремещениеСтах.Цена;
		КонецЕсли;
		Если ЗабратьЛен <> 0 Тогда                     
			ПеремещениеЛен.НоваяСтрока();
			ПеремещениеЛен.Номенклатура = Номенклатура;
			ПеремещениеЛен.Количество   = ЗабратьЛен;
			ПеремещениеЛен.Единица      = Номенклатура.ОсновнаяЕдиница; 
			ПеремещениеЛен.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЛен, "Количество");   
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЛен.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЛен.Сумма = ПеремещениеЛен.Количество*ПеремещениеЛен.Цена;
		КонецЕсли;
		Если ЗабратьЛенс <> 0 Тогда                    
			ПеремещениеЛенс.НоваяСтрока();
			ПеремещениеЛенс.Номенклатура = Номенклатура;
			ПеремещениеЛенс.Количество   = ЗабратьЛенс;
			ПеремещениеЛенс.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеЛенс.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеЛенс, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеЛенс.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеЛенс.Сумма = ПеремещениеЛенс.Количество*ПеремещениеЛенс.Цена;
		КонецЕсли;
		Если ЗабратьТур <> 0 Тогда                     
			ПеремещениеТур.НоваяСтрока();
			ПеремещениеТур.Номенклатура = Номенклатура;
			ПеремещениеТур.Количество   = ЗабратьТур;
			ПеремещениеТур.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеТур.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеТур, "Количество");
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеТур.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеТур.Сумма = ПеремещениеТур.Количество*ПеремещениеТур.Цена;
		КонецЕсли;
		Если ЗабратьРад <> 0 Тогда
			ПеремещениеРад.НоваяСтрока();
			ПеремещениеРад.Номенклатура = Номенклатура;
			ПеремещениеРад.Количество   = ЗабратьРад;
			ПеремещениеРад.Единица      = Номенклатура.ОсновнаяЕдиница;
			ПеремещениеРад.Коэффициент = 1;
			глПересчетТаблЧасти(ПеремещениеРад, "Количество"); 
			
			СпрНом.ИспользоватьДату(ДатаДок);
			СпрНом.НайтиЭлемент(Номенклатура);
			ПеремещениеРад.Цена = СпрНом.ПоследняяЦенаПрихода;
			ПеремещениеРад.Сумма = ПеремещениеРад.Количество*ПеремещениеРад.Цена;
		КонецЕсли;	
	КонецЦикла;		
	          
	Если ПеремещениеЦС.КоличествоСтрок() <> 0 Тогда
		ПеремещениеЦС.УстановитьНовыйНомер("Пр"+ПеремещениеЦС.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЦС.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЦС.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеЭ.КоличествоСтрок() <> 0 Тогда
		ПеремещениеЭ.УстановитьНовыйНомер("Пр"+ПеремещениеЭ.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЭ.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЭ.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеЛенс.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеЛенс.УстановитьНовыйНомер("Пр"+ПеремещениеЛенс.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЛенс.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЛенс.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеЛен.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеЛен.УстановитьНовыйНомер("Пр"+ПеремещениеЛен.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеЛен.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеЛен.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеРад.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеРад.УстановитьНовыйНомер("Пр"+ПеремещениеРад.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеРад.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеРад.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеСтах.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеСтах.УстановитьНовыйНомер("Пр"+ПеремещениеСтах.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеСтах.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеСтах.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеТур.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеТур.УстановитьНовыйНомер("Пр"+ПеремещениеТур.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеТур.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеТур.ТекущийДокумент());
	КонецЕсли;
	Если ПеремещениеК.КоличествоСтрок() <> 0 Тогда	
		ПеремещениеК.УстановитьНовыйНомер("Пр"+ПеремещениеК.СкладПолучатель.ПрефиксНомеровДокументов);
		ПеремещениеК.Записать();  
		Сообщить("Создано перемещение: "+ПеремещениеК.ТекущийДокумент());
	КонецЕсли;
КонецПроцедуры	

Процедура УствовитьВидимостьДопКолонок()
	//Если (ИмяПользователя() <> "Кожемякин") И ((глПользователь.Наименование <> "Иванова Анна")) Тогда
	//	Форма.ИзлишекК.Видимость(0);
	//	Форма.ИзлишекЭ.Видимость(0);
	//	Форма.ИзлишекЛенс.Видимость(0);
	//	Форма.ИзлишекЛен.Видимость(0);
	//	Форма.ИзлишекРад.Видимость(0);
	//	Форма.ИзлишекСтах.Видимость(0);
	//	Форма.ИзлишекТур.Видимость(0);
	//	
	//	Форма.ЗабратьК.Видимость(0);
	//	Форма.ЗабратьЭ.Видимость(0);
	//	Форма.ЗабратьЛенс.Видимость(0);
	//	Форма.ЗабратьЛен.Видимость(0);
	//	Форма.ЗабратьРад.Видимость(0);
	//	Форма.ЗабратьСтах.Видимость(0);
	//	Форма.ЗабратьТур.Видимость(0);
	//КонецЕсли;
КонецПроцедуры	

Процедура ВывестиИзлишкиПоСкладам()
	Перем Запрос, ТекстЗапроса;
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	
	   
	//ВыбСкладМол = ВыбСклад.МОЛ;
	ТекНоменклатура = Номенклатура;
	ВыбНачПериода = ТекущаяДата();
	
	Если ВыбНачПериода > ПолучитьДатуТА() Тогда
		ВыбНачПериода = ПолучитьДатуТА();
		Сообщить("Выбранная дата превышает дату ТА. Дата изменена!");
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбНачПериода по ВыбНачПериода;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Номенклатура 		= Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад				= Регистр.ОстаткиТМЦ.Склад;
	|Количество 		= Регистр.ОстаткиТМЦ.Количество;
	|Функция ТекОстаток = КонОст(Количество);
	|Группировка Склад без групп;
	|Условие(Номенклатура = ТекНоменклатура); 
	|Условие(Склад в СкладыДляОстатков);  
	|"//}}ЗАПРОС
	;   
	
	
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
              
	
	// Валерий МЭТР
	СпрОстаткиНоменклатуры 	= СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
	КоэффициентСезонности 	= 1;
	СтарыйМол				= "";
	 
	ИзлишекЦС 	= 0;
	ИзлишекК 	= 0;
	ИзлишекЭ 	= 0;
	ИзлишекЛенс = 0;
	ИзлишекЛен 	= 0;
	ИзлишекРад 	= 0;
	ИзлишекСтах = 0;
	ИзлишекТур 	= 0;
	
	Пока Запрос.Группировка(1) = 1 Цикл	
		Если Запрос.ТекОстаток <= 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		МаксОстаток = 0;		
		// Валерий МЭТР
		СпрОстаткиНоменклатуры.ИспользоватьВладельца(Запрос.Номенклатура);
		СпрОстаткиНоменклатуры.ИспользоватьДату(ТекущаяДата());
		СпрОстаткиНоменклатуры.ВыбратьЭлементы();
		Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
			Если (СпрОстаткиНоменклатуры.Склад = Запрос.Склад)
				И (СпрОстаткиНоменклатуры.ПометкаУдаления() = 0) Тогда
				//МинОстаток 	= СпрОстаткиНоменклатуры.МинимальныйОстаток * КоэффициентСезонности; 
				МаксОстаток = СпрОстаткиНоменклатуры.МаксимальныйОстаток;
				
				МаксОстаток = Цел(МаксОстаток);
				Прервать;
			КонецЕсли;		
		КонецЦикла;		
		
		ТЗОтклонение = 0;      
		Если Запрос.ТекОстаток > МаксОстаток Тогда
			ТЗОтклонение = Запрос.ТекОстаток - МаксОстаток;
			Если Запрос.Склад.Код = "00020" Тогда  
				ИзлишекК = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00013" Тогда 
				ИзлишекЦС = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00002" Тогда 
				ИзлишекЭ = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00004" Тогда 
				ИзлишекЛенс = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00029" Тогда
				ИзлишекЛен = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00006" Тогда
				ИзлишекРад = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00005" Тогда
				ИзлишекСтах = ТЗОтклонение;
			ИначеЕсли Запрос.Склад.Код = "00017" Тогда
				ИзлишекТур = ТЗОтклонение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры	

Процедура ПриОткрытии()  
	
	СтраНом = "";
	// 	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	//	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	//	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Если Отработан=1 тогда
		ФлагДока=1;
	иначе
		ФлагДока=0;
	КонецЕсли;
	ДопСклад=Константа.СкладДляТранзита;	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	
	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,8);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,4);
	ТЗ_Остаток.НоваяКолонка("Резерв","число",15,2,,4);
	НС=НомерСтроки;
	
	Если НазваниеНабораПрав("Продавец_розница")=1 Тогда
		Форма.Отработан_опт.Доступность(0);
		Форма.ФлагДока.Доступность(0);
		Форма.НомерДок.Доступность(0);
		Форма.ДатаДок.Доступность(0);
		Форма.Фирма.Доступность(0);
		Форма.ЮрЛицо.Доступность(0);
		Форма.Склад.Доступность(0);
		Форма.Контрагент.Доступность(0);
		Форма.ДопСклад.Доступность(0);
	КонецЕсли; 
	
	//Валерий МЭТР
	глПроверкаРазрешенияРедактирования(Контекст);
	
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основная");
	Форма.Закладки.ДобавитьЗначение("Множественный фильтр");
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Основной");
	
	ДатаКонца = ПолучитьДатуТА();
	ДатаНачала = ПолучитьДатуТА() - 30;
	// инициализация переменных множественного фильтра
	ТипМФ.УдалитьВсе();
	ТипМФ.ДобавитьЗначение("одно из");
	ТипМФ.ДобавитьЗначение("все кроме");
	
	ТаблицаМФ.УдалитьСтроки();
	Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
		ТаблицаМФ.УдалитьКолонку(1);
	КонецЦикла;  
	
	ТаблицаМФ.НоваяКолонка("Тип");
	ТаблицаМФ.НоваяКолонка("Вид");
	ТаблицаМФ.НоваяКолонка("ИмяПеременной");
	ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
	ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
	ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
	ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
	ТекСтрокаВТаблице="";
	
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", 	"Номенклатура",  "По номенклатуре");          
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Поставщик",  "По поставщикам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Покупатель",  "По покупателям");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Номенклатура",  "По свойствам номенклатуры");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Поставщик",  "По свойствам поставщиков");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Журнал","ДокументыПоПоставщикам", "ДокПоставки",  "По документу поставки");
 	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "Автор",  "По авторам документов");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Проекты", "Проект",  "По проектам");               
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ФизЛица", "МОЛ_Комиссионер",  "По МОЛам");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Производители", 		"Производитель",  "По производителям");
	
	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	       
	//мТаблицаМФ 			= ВосстановитьЗначение("ТаблМФ"); 
	//Если ПустоеЗначение(мТаблицаМФ) = 0 Тогда
	//	ТаблицаМФ.Загрузить(мТаблицаМФ); 
	//КонецЕсли;	
	//ДатаНачала 			= ВосстановитьЗначение("ДатаНачала");
	//ДатаКонца 			= ВосстановитьЗначение("ДатаКонца");
	//мВыбВидПродажи 		= ВосстановитьЗначение("ВыбВидПродажи"); 
	//Если ПустоеЗначение(мВыбВидПродажи) = 0 Тогда
	//	ВыбВидПродажи.ТекущаяСтрока(мВыбВидПродажи.ТекущаяСтрока());
	//КонецЕсли;
	//мВыбЧейТовар 		= ВосстановитьЗначение("ВыбЧейТовар");
	//Если ПустоеЗначение(мВыбЧейТовар) = 0 Тогда
	//	ВыбЧейТовар.ТекущаяСтрока(мВыбЧейТовар.ТекущаяСтрока());
	//КонецЕсли;
	//ПоСкладуДокумента 	= ВосстановитьЗначение("ПоСкладуДокумента");
	
	ПоСкладуДокумента = 1; 
	
	СпрСклады = СоздатьОбъект("Справочник.Склады"); 
	СпрСклады.ВыбратьЭлементы();
	СкладыДляОстатков = СоздатьОбъект("СписокЗначений");
	
	Пока СпрСклады.ПолучитьЭлемент() = 1 Цикл
		Если (СпрСклады.Код = "00020") 
		или (СпрСклады.Код = "00002") 
		или (СпрСклады.Код = "00004") 
		или (СпрСклады.Код = "00029") 
		или (СпрСклады.Код = "00006") 
		или (СпрСклады.Код = "00005") 
		или (СпрСклады.Код = "00017")
		или (СпрСклады.Код = "00013") Тогда
			СкладыДляОстатков.ДобавитьЗначение(СпрСклады.ТекущийЭлемент());	
		КонецЕсли;	
	КонецЦикла;	
	
	УствовитьВидимостьДопКолонок();  
	флСкрытьСклады = 1;
	ОбрфлСкрытьСклады();     
	
КонецПроцедуры

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Основной");
	Иначе
		Форма.ИспользоватьСлой("НастройкиРасход");
	КонецЕсли;       
КонецПроцедуры

Процедура ЗаполнениеПоДокументуОснованию()
	
	ДатаОплаты 	= ДокОснование.ДатаДок;   //Чтобы потом поставить дату на сл.день в "СрокПоставки"
	УдалитьСтроки();
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	//	ТаблицаДокумента.Свернуть("Номенклатура,Единица,Коэффициент,Цена", "Количество,Сумма");
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		НоваяСтрока();    
		Номенклатура	= ТаблицаДокумента.Номенклатура;
		Артикул			= ТаблицаДокумента.Номенклатура.Артикул;		
		Производитель	= ТаблицаДокумента.Номенклатура.Производитель;		
		Единица 		= ТаблицаДокумента.Единица;
		Коэффициент 	= ТаблицаДокумента.Коэффициент;
		Количество 		= ТаблицаДокумента.Количество; 
		КоличествоФакт	= ТаблицаДокумента.Количество; 
		Цена 			= ТаблицаДокумента.Цена;
		Сумма 			= ТаблицаДокумента.Сумма;
		Если ДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
			Примечание = ТаблицаДокумента.Коммент;
		КонецЕсли;
		СрокПоставки	= РабочаяДата()+1;
		СрокФакт		= РабочаяДата()+1;
		ВидТМЦ 			= Перечисление.ВидыТМЦ.Товар;
		
	КонецЦикла; // по строкам основания
	
	//	Если КоличествоСтрок()=0 Тогда
	//		Возврат "По документу - основанию не числится остатка заказов!";
	//	КонецЕсли;
	
	
КонецПроцедуры // ЗаполнениеПоДокументуОснованию()

Процедура ВводНаОсновании(ДокументОснование)
	ДокОснование	= ДокументОснование;
	Автор			= ДокОснование.Автор;
	Фирма			= ДокОснование.Фирма;
	Склад			= ДокОснование.Склад;
	Проект			= ДокОснование.Проект;
	ЮрЛицо			= ДокОснование.ЮрЛицо;
	Контрагент		= ДокОснование.Контрагент;   
	
	//++Ерошенко 10.05.2007
	// по просьбе Бойковой
	Комментарий =     "Ввод перемещений по факту: "+ДокОснование;
	//--Ерошенко
	ЗаполнениеПоДокументуОснованию();
КонецПроцедуры

Процедура ВводНового(Скопирован)
	глЗаполнитьШапку(Контекст,Скопирован);
КонецПроцедуры

Процедура ПоКнопкеОснование()
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
		
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
		ДокОснование	= Основание;
		ЗаполнениеПоДокументуОснованию();
		Контрагент		= ДокОснование.Контрагент;
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

Процедура ПриФлагДока()
	Если ФлагДока=1 тогда
		Отработан=1;
	иначе
		Отработан=0;
	КонецЕсли;
КонецПроцедуры 
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	
	Перем ОстатокНаСкладе, ОстатокПоФирме , Резерв ; // для показа остатков
	Перем ОстатокНаСкладеТранзит, ОстатокПоФирмеТранзит;
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	ПокажиОстатки();
	
	Форма.Обновить();
	
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()  

//{{ПРОЦЕДУРА_ПЕЧАТИ(Печать)


Процедура Печать()
	Если Отработан=1 тогда
		Отр="ДА";
	иначе
		Отр="НЕТ";
	КонецЕсли;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Печать");
	Таб.ВывестиСекцию("Шапка");
	Таб.Опции(0,0,0,0);
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Таб.ВывестиСекцию("Строка");
	КонецЦикла;
	Таб.ВывестиСекцию("Подвал");
	Таб.Показать("Печать Сводный Заказ Поставщикам","");
КонецПроцедуры     

// ++Ерошенко 08.05.2007

Процедура ПечатьНовая(Пар) 
	
	Сум = 0;
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Цен = Номенклатура.ПоследняяЦенаПрихода.Получить(ТекущаяДата());
		Если Цен = 0 Тогда
			Сообщить("По товару '"+Номенклатура+"' не указана цена прихода..");
		Иначе
			Сум = Сум + (Цен * Количество);
		КонецЕсли;
	КонецЦикла;
	
	Ответ = Вопрос("Сумма заказа составляет "+Сум+". Продолжить печать?","Да+Нет");
	
	Если Ответ = "Да" Тогда
		
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("ПечатьСанСаныч");  
		ПечАвтор =      глПользователь; 
		ПечКонтрагент = Контрагент;
		ПечДата =       ТекущаяДата();   
		ПечMAIL =       СокрЛП(глПользователь.ЭлектронныйАдрес);
		Если (НазваниеИнтерфейса() = "ПродавецНовый") или (НазваниеИнтерфейса() ="ПродавецНовыйОпт") Тогда
			ПечТел = "(812) 640-64-99" Иначе
			ПечТел = "(812) 640-64-96"
		КонецЕсли;
		ПечАдресДоставки =     "Полюстровский, 87";  
		ПечТелефонКладовщика = "Тел.кладовщика 8-911-705-73-00";
		Если ДокОснование.Вид() = "ЗаявкаКлиентаРозница" Тогда
			Если ДокОснование.Склад.Выбран() = 1 Тогда
				ПечАдресДоставки =     СокрЛП(ДокОснование.Склад);    
				ПечТелефонКладовщика = "";
			КонецЕсли;
		КонецЕсли;
		
		Таб.ВывестиСекцию("Шапка"); 
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл  
			
			ПечНаименование =  Номенклатура;
			ПечКод =  Номенклатура.Код;
			ПечАртикул =       Номенклатура.Артикул;
			ПечПроизводитель = Номенклатура.Производитель;
			ПечКоличество =    Количество;
			ПечЕдиница =       Номенклатура.БазоваяЕдиница;
			ПечПримечание =	   Примечание;
			
			Таб.ВывестиСекцию("Стр");
			
		КонецЦикла;
		
		Ф = "ООО Сан Саныч";
		Если Пар = 0 Тогда
			Таб.ВывестиСекцию("ПодвалСанСаныч"); 
		ИначеЕсли Пар = 1 Тогда
			Таб.ВывестиСекцию("ПодвалЭксперт");  
			Ф = "ООО Эксперт"; 
		//Валерий МЭТР: введение нового юр. лица ИС
		ИначеЕсли Пар = 2 Тогда
		    Таб.ВывестиСекцию("ПодвалИС");  
			Ф = "ООО Инженерные системы";
		ИначеЕсли Пар = 3 Тогда
			Таб.ВывестиСекцию("ПодвалФорсаж");  
			Ф = "ООО Форсаж";
		ИначеЕсли Пар = 4 Тогда
			Таб.ВывестиСекцию("ПодвалЭталон");  
			Ф = "ООО Эталон";	
		КонецЕсли;
		
		Таб.ПараметрыСтраницы(1,,0,0,0,0,,,1,,,);
		Таб.Опции(0,0,0,0);
		Таб.Показать("Сводный заказ поставщикам ("+Ф+")","");
		
	КонецЕсли;
	
КонецПроцедуры

//**********************************************************

Процедура ПоКнПеч()            
	 
	Спис  = СоздатьОбъект("СписокЗначений");
	Спис.ДобавитьЗначение("Форма базовая");
	//Спис.ДобавитьЗначение("Сан Саныч");
	Спис.ДобавитьЗначение("Эксперт");
	Спис.ДобавитьЗначение("Форсаж");
	Спис.ДобавитьЗначение("Эталон");
	//Валерий МЭТР: введение нового юр. лица ИС
	//Спис.ДобавитьЗначение("Инженерные системы");
	Выб = "";  
	Если Спис.ВыбратьЗначение(Выб,"",,,1) = 1 Тогда 
		Если Выб = "Форма базовая" Тогда
			Печать();
		ИначеЕсли Выб = "Сан Саныч" Тогда
			ПечатьНовая(0);
		ИначеЕсли Выб = "Эксперт" Тогда
			ПечатьНовая(1);
		//Валерий МЭТР: введение нового юр. лица ИС
		ИначеЕсли Выб = "Инженерные системы" Тогда
			ПечатьНовая(2);
		ИначеЕсли Выб = "Форсаж" Тогда
			ПечатьНовая(3);
		ИначеЕсли Выб = "Эталон" Тогда
			ПечатьНовая(4);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
//--Ерошенко

//}}ПРОЦЕДУРА_ПЕЧАТИ

//Обработка складов
Функция ПокажиОстатки()
	Перем стр;
	
	Если НС=НомерСтроки Тогда
		возврат 0;
	КонецЕсли;
	Если (НазваниеНабораПрав()="Сервис") или (НазваниеНабораПрав()="Продавец_розница") Тогда
		возврат 0;
	КонецЕсли;
	
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		//Если Склад_темп.Магазин=0 Тогда
		Если (Найти(Склад_темп.Наименование,"Хранение")=0) или (Склад_темп.Наименование = "Хранение Полюстровский") Тогда	
			
			Рег1.УстановитьФильтр(,Номенклатура,Склад_темп);
			Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
			
			рег2.УстановитьФильтр(Номенклатура,Склад_темп);
			//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
			рег2.ВыгрузитьИтоги(ТЗ2,1,1);
			
			ТЗ2.Свернуть("Номенклатура","Количество");
			х					= ПолучитьПустоеЗначение(х);
			у					= 1;
			
			а=0;
			
			Если ТЗ2.НайтиЗначение(Номенклатура,х,у)=1 Тогда	//Сначала общий резерв
				а=1;
				ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				ТЗ_Остаток.Резерв	= ТЗ2.ПолучитьЗначение(х,"Количество");
				х					= ПолучитьПустоеЗначение(х);
			КонецЕсли;
			//Теперь из остатков ТМЦ
			х			= ПолучитьПустоеЗначение(х);
			у			= 2;
			Если ТЗ.НайтиЗначение(Номенклатура,х,у)=1 Тогда
				Если а=0 Тогда
					ТЗ_Остаток.НоваяСтрока();
					ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
				КонецЕсли;
				ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	НС=НомерСтроки;
	стрк="";
	возврат стрк;
КонецФункции

Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
		возврат;
	ИначеЕсли НазваниеНабораПрав("Продавец_розница")=1 Тогда
		Возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= Номенклатура;
	ТекД= ДокОснование;
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
КонецПроцедуры

Процедура ПриЗаписи()
	
	//Валерий МЭТР:
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	если ДокОснование.Вид()="ЗаявкаКлиентаРозница" Тогда	//Зададим признак отбора в рознице
		проба		= СоздатьОбъект("Справочник.ОтборРознДокум");
		ЭР			= сокрЛП(Перечисление.ВидДокументаРозница.ЗаявкаНаСкладСрочнаяРозница)+сокрЛП(склад);
		Если проба.НайтиПоНаименованию(сокрЛП(ЭР),0,1)=1 Тогда
			ЭтоРозница=проба.ТекущийЭлемент();
		Иначе
			проба.новый();
			проба.наименование=ЭР;
			проба.записать();
			ЭтоРозница=проба.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры

Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
		// есть ставки налогов, есть скидка
		
		глОбработкаПодбора(Контекст, ВыбЗнач, 0, 0, 0);
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Артикул			= Номенклатура.Артикул;
			Производитель	= Номенклатура.Производитель;
			СрокПоставки	= РабочаяДата()+1;
			СрокФакт		= РабочаяДата()+1;
			Сообщить("Обр под");
			ВывестиИзлишкиПоСкладам();
		КонецЦикла;
	Иначе
		Если (СписокЭлементовМФ.НайтиЗначение(ВыбЗнач)=0) Тогда
			Представление=""+ВыбЗнач;
			Если ТипЗначенияСтр(ВыбЗнач)="Справочник" Тогда
				Если СокрЛП(Метаданные.Справочник(ВыбЗнач.Вид()).Владелец) <> "Метаданные" Тогда
					Представление=Представление+" ("+ВыбЗнач.Владелец+")";
				КонецЕсли;
			КонецЕсли;	
			СписокЭлементовМФ.ДобавитьЗначение(ВыбЗнач,Представление);
			ТаблицаМФ.ФлВкл=2;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбора()

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	//	Параметры.ДобавитьЗначение(Договор,         "Договор");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("Нет", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(глПользователь.ОсновнойТипЦенПродажи,          "ТипЦен");      
	Параметры.ДобавитьЗначение(глРубли,		    "Валюта");
	Параметры.ДобавитьЗначение(глКурсДляВалюты(глРубли,ДатаДок), "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодборРозница(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
  
//Валерий МЭТР: иначе не обновляются данные в строке
Процедура ПриИзмененииНоменклатуры()
	
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());
	Артикул 		= Номенклатура.Артикул;
	Производитель 	= Номенклатура.Производитель;
	
	Если СтарНом <> Номенклатура Тогда
		//Сообщить("При изм");
		ВывестиИзлишкиПоСкладам();  
		СтарНом = Номенклатура;
	КонецЕсли;	
КонецПроцедуры
               
Процедура кнЗаполнитьРасход()
	Если КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если глПроверкаДаты(ДатаНачала,ДатаКонца) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ВедомостьПоОстаткамТМЦ");
	
	// все настройки помещаем в список
	Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
    Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
	Расшифровка.Установить("ВыбЧейТовар",			ВыбЧейТовар.ТекущаяСтрока());
	//Расшифровка.Установить("ВыбВидПродажи",			ВыбВидПродажи.ТекущаяСтрока());
	//Расшифровка.Установить("ПоОтчетамКомитенту",	0); 
	//Расшифровка.Установить("СписокМОЛКомиссионер", 1);
	Расшифровка.Установить("ВидЕдиницы",	1);
	//Расшифровка.Установить("ВидСуммы",		1); 
	Расшифровка.Установить("ВидРазделителя",		1);
	Расшифровка.Установить("ВыбРазделитель1",		Фирма);
	
	Если ПоСкладуДокумента = 1 Тогда
		Расшифровка.Установить("ВыбСклад", Склад);
	Иначе
		Расшифровка.Установить("ВыбСклад", "");
	КонецЕсли; 
	
	Группировки = СоздатьОбъект("СписокЗначений");
	//Группировки.ДобавитьЗначение("Фирма",         "Фирма");
	//Группировки.ДобавитьЗначение("СтатусПартии",  "Статус партии");
	//Группировки.ДобавитьЗначение("Поставщик",     "Поставщик");
	//Группировки.ДобавитьЗначение("Покупатель",    "Покупатель");
	//Группировки.ДобавитьЗначение("МОЛ_Комиссионер","Мол(комиссионер)");
	//Группировки.ДобавитьЗначение("Номенклатура",  "Номенклатура");
	//Группировки.ДобавитьЗначение("СвойствоПартии","Свойство партии");
	//Группировки.ДобавитьЗначение("ДокПоставки",      "Документы поставки");
	//Группировки.ДобавитьЗначение("Док",      "Документы реализации");
	//
	//Группировки.Пометка(1, 1);
	//Группировки.Пометка(6, 1);
	//Группировки.Пометка(8, 1);               
	//Группировки.Пометка(9, 1);
	
	Группировки.ДобавитьЗначение("Фирма", 			"Фирма");
	Группировки.ДобавитьЗначение("Склад", 			"Склад");
	Группировки.ДобавитьЗначение("СвойствоТМЦ", 	"Свойство номенклатуры");
	Группировки.ДобавитьЗначение("Номенклатура", 	"Номенклатура");
	Группировки.ДобавитьЗначение("Документ", 		"Документы движения");
	
	Группировки.Пометка(2, 1);
	Группировки.Пометка(4, 1);
	Группировки.Пометка(5, 1);
	
    Расшифровка.Установить("Группировки", Группировки); 
	
	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;   
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	
    ТаблицаМФ.ПолучитьСтрокуПоНомеру(1);

	Если ТаблицаМФ.ФлВкл = 1 Тогда
		ТаблицаМФ.ФлВкл = 2; 
		СписокНоменклатуры = СоздатьОбъект("СписокЗначений");
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			СписокНоменклатуры.ДобавитьЗначение(Номенклатура);
		КонецЦикла;
		
		ТаблицаМФ.СписокЭлементов = СписокНоменклатуры;
	КонецЕсли;
	
	РежимВидПродажи=ВыбВидПродажи.ТекущаяСтрока();
	РежимЧейТовар=ВыбЧейТовар.ТекущаяСтрока();
	
	Если РежимВидПродажи > 1 Тогда
	    КодыПоВидуПродажи = СоздатьОбъект("СписокЗначений");
		Если РежимВидПродажи = 2 Тогда // оптом
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.Продажа);
		ИначеЕсли РежимВидПродажи = 3 Тогда // в розницу
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.РозничнаяПродажа);
			КодыПоВидуПродажи.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
		КонецЕсли;
	КонецЕсли;

	Если РежимЧейТовар > 1 Тогда
	    СтатусыПартий = СоздатьОбъект("СписокЗначений");
		Если РежимЧейТовар = 2 Тогда // собственный
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Купленный);
			СтатусыПартий.ДобавитьЗначение(глСП.Продукция);
			СтатусыПартий.ДобавитьЗначение(глСП.Т_ВРознице);
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Тара);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Тара);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Запчасть);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Инвентарь);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Полуфабрикат);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Прочее);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Стройматериал);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Сырье);
			СтатусыПартий.ДобавитьЗначение(глСП.М_Топливо);
		ИначеЕсли РежимЧейТовар = 3 Тогда // в комиссионный
			СтатусыПартий.ДобавитьЗначение(глСП.Т_Принятый);
		КонецЕсли;
	КонецЕсли;

	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);
	//ГАВ 15/04/2008 - заказ Корыхалов (исключает Списание из отчёта)
	Если ВклСписание=0 Тогда
		КодыПеремещений.ДобавитьЗначение(глКО.Списание);
	КонецЕсли;
	
	// Добавим и комиссию сюда на всякий случай
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	ТекстЗапроса = ТекстЗапросаПоРасходам();
	
	Если РежимВидПродажи > 1  Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Условие(КодОперации в КодыПоВидуПродажи);";
	КонецЕсли;

	Если РежимЧейТовар > 1  Тогда
	    ТекстЗапроса = ТекстЗапроса + "
		|Условие(СтатусПартии в СтатусыПартий);";
	КонецЕсли;
	Загол="";
	
	НетОш = 1; // нет ошибок при наложении фильтров
	//Если ВидРазделителя = 1 Тогда
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",Фирма,"Фирма",ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	//ИначеЕсли ВидРазделителя = 2 Тогда                                                   
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",ВыбРазделитель2,"ВыбРазделитель2",ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",,,ТекстЗапроса,Загол);
	//ИначеЕсли ВидРазделителя = 3 Тогда                                                   
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "УпрАналитика",ВыбРазделитель3,"ВыбРазделитель3",ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Фирма",,,ТекстЗапроса,Загол);
	//	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ЮрЛицо",,,ТекстЗапроса,Загол);
	//КонецЕсли; 
	ВыбМОЛ = Склад.МОЛ;
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",		,,ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Поставщик",			,,ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Покупатель",		,,ТекстЗапроса,Загол,"СвойстваКонтрагентов");
	Если ПоСкладуДокумента = 1 Тогда
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",ВыбМОЛ,"ВыбМОЛ",ТекстЗапроса,Загол);
	Иначе
		НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "МОЛ_Комиссионер",,,ТекстЗапроса,Загол);
	КонецЕсли;	
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "ДокПоставки",		,,ТекстЗапроса,Загол);
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Автор",   			,,ТекстЗапроса,Загол,"Автор");
	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",  			,,ТекстЗапроса,Загол,"Проект");
    НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Производитель",		,,ТекстЗапроса,Загол,"Производитель");
	
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	 
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВременнаяТаблицаЗначений = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВременнаяТаблицаЗначений,1,0);
	//ВыгрузитьТабличнуюЧасть(ВременнаяТаблицаЗначений);
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		Расход = 0;
		//Сообщить(""+Запрос.Номенклатура+"-"+Запрос.РасходК);
		Стр = 0;
		Кол = 0;
		Если ВременнаяТаблицаЗначений.НайтиЗначение(Номенклатура,Стр,Кол) = 1 Тогда 
			Расход = ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РасходК");
        КонецЕсли;
	КонецЦикла;	
	//ЗагрузитьТабличнуюЧасть(ВременнаяТаблицаЗначений);
КонецПроцедуры
     
Процедура ОбработкаРасход()  
	Если Расход <> 0 Тогда
		Расшифровка = СоздатьОбъект("СписокЗначений");
		Расшифровка.Установить("Отчет", "ВедомостьПоОстаткамТМЦ");
		
		// все настройки помещаем в список
		Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
		Расшифровка.Установить("ДатаКонца", 	ДатаКонца);
		Расшифровка.Установить("ВыбЧейТовар",			ВыбЧейТовар.ТекущаяСтрока());
		//Расшифровка.Установить("ВыбВидПродажи",			ВыбВидПродажи.ТекущаяСтрока());
		//Расшифровка.Установить("ПоОтчетамКомитенту",	0); 
		//Расшифровка.Установить("СписокМОЛКомиссионер", 1);
		Расшифровка.Установить("ВидЕдиницы",	1);
		//Расшифровка.Установить("ВидСуммы",		1); 
		Расшифровка.Установить("ВидРазделителя",		1);
		Расшифровка.Установить("ВыбРазделитель1",		Фирма);
		
		Если ПоСкладуДокумента = 1 Тогда
			Расшифровка.Установить("ВыбСклад", Склад);
		Иначе
			Расшифровка.Установить("ВыбСклад", "");
		КонецЕсли; 
		
		Группировки = СоздатьОбъект("СписокЗначений");
		//Группировки.ДобавитьЗначение("Фирма",         "Фирма");
		//Группировки.ДобавитьЗначение("СтатусПартии",  "Статус партии");
		//Группировки.ДобавитьЗначение("Поставщик",     "Поставщик");
		//Группировки.ДобавитьЗначение("Покупатель",    "Покупатель");
		//Группировки.ДобавитьЗначение("МОЛ_Комиссионер","Мол(комиссионер)");
		//Группировки.ДобавитьЗначение("Номенклатура",  "Номенклатура");
		//Группировки.ДобавитьЗначение("СвойствоПартии","Свойство партии");
		//Группировки.ДобавитьЗначение("ДокПоставки",      "Документы поставки");
		//Группировки.ДобавитьЗначение("Док",      "Документы реализации");
		//
		//Группировки.Пометка(1, 1);
		//Группировки.Пометка(6, 1);
		//Группировки.Пометка(8, 1);               
		//Группировки.Пометка(9, 1);
		
		Группировки.ДобавитьЗначение("Фирма", 			"Фирма");
		Группировки.ДобавитьЗначение("Склад", 			"Склад");
		Группировки.ДобавитьЗначение("СвойствоТМЦ", 	"Свойство номенклатуры");
		Группировки.ДобавитьЗначение("Номенклатура", 	"Номенклатура");
		Группировки.ДобавитьЗначение("Документ", 		"Документы движения");
		
		Группировки.Пометка(2, 1);
		Группировки.Пометка(4, 1);
		Группировки.Пометка(5, 1);
		
		Расшифровка.Установить("Группировки", Группировки); 
		
		// запомним МФ только если он задан
		Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
			Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
		КонецЕсли;   
		
		
		
		Расшифровка.Установить("ВыбТМЦ", Номенклатура); 
		// запомним МФ только если он задан
		Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
			Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
		КонецЕсли;
		глОбработкаРасшифровки(Расшифровка,1,1);
	КонецЕсли;	
КонецПроцедуры	
 
Процедура ПриНачалеРедактированияСтроки() 
	Если (Форма.ТекущаяКолонка() = "Расход") Тогда
		ОбработкаРасход();	 
	//ИначеЕсли (Форма.ТекущаяКолонка() = "Номенклатура") Тогда
	//	Сообщить("При нач");
	//	ВывестиИзлишкиПоСкладам();	
	КонецЕсли;	
КонецПроцедуры	

Процедура ПриОкончанииРедактированияСтроки() 
	//Если (Форма.ТекущаяКолонка() = "Номенклатура") Тогда
	//	Сообщить("При изм");
	//	ВывестиИзлишкиПоСкладам();	
	//КонецЕсли;	
КонецПроцедуры
 
Функция ТекстЗапросаПоРасходам()
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ПартииНаличие.Фирма,
	|				  Регистр.ПартииОтданные.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика,
	|				  Регистр.ПартииОтданные.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо,
	|				  Регистр.ПартииОтданные.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии,
	|				  Регистр.ПартииОтданные.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура,
	|				  Регистр.ПартииОтданные.Номенклатура;
	|Производитель	= Регистр.ПартииНаличие.Номенклатура.Производитель,
	|				  Регистр.ПартииОтданные.Номенклатура.Производитель;
	|МОЛ_Комиссионер= Регистр.ПартииНаличие.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Покупатель		= Регистр.ПартииНаличие.ТекущийДокумент.Реализация.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ОтчетККМ.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияПрочее.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя_Розница.Контрагент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.ОтчетКомиссионера.Контрагент;
	|Проект			= Регистр.ПартииНаличие.ТекущийДокумент.Проект,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Проект;
	|Автор			= Регистр.ПартииНаличие.ТекущийДокумент.Автор,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Автор;
	|Поставка		= Регистр.ПартииНаличие.Партия,
	|				  Регистр.ПартииОтданные.Партия;
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство,
	|				  Регистр.ПартииОтданные.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик,
	|				  Регистр.ПартииОтданные.Партия.Поставщик;
	|ДокПоставки	= Регистр.ПартииНаличие.Партия.ПриходныйДокумент,
	|				  Регистр.ПартииОтданные.Партия.ПриходныйДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации,
	|				  Регистр.ПартииОтданные.КодОперации;
	|НомерСтроки	= Регистр.ПартииНаличие.НомерСтроки,
	|				  Регистр.ПартииОтданные.НомерСтроки;
	|Договор		= Регистр.ПартииОтданные.Договор;
	|ВалВзаим		= Регистр.ПартииОтданные.Договор.ВалютаВзаиморасчетов;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент;
	|Сумма1			= Регистр.ПартииНаличие.СуммаРуб,
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Сумма2			= Регистр.ПартииНаличие.СуммаБезНДС,
	|				  Регистр.ПартииОтданные.СуммаБезНДС;
	|Сумма3			= Регистр.ПартииНаличие.СуммаУпр,       
	|				  Регистр.ПартииОтданные.СуммаУпр;       
	|Оборот			= Регистр.ПартииНаличие.ПродСтоимость;
	|ОборотКом		= Регистр.ПартииОтданные.ПродСтоимость;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество, Регистр.ПартииОтданные.Количество;";
	
	ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб, Регистр.ПартииОтданные.СуммаРуб;";
		
	ТекстЗапроса = ТекстЗапроса +
	"Функция ПриходС = Приход(Сумма);
	//|Функция РасходС = Расход(Сумма);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество);
	|Функция ВозвратК = Приход(Количество)Когда(КодОперации в КодыВозвратов);
	//|Функция ВозвратС = Приход(Сумма)Когда(КодОперации в КодыВозвратов);
	//|Функция РасходБезНДС = Расход(Сумма2);
	//|Функция РасходСНДС = Расход(Сумма1);
	//|Функция ВозвратБезНДС = Приход(Сумма2)Когда(КодОперации в КодыВозвратов);
	//|Функция ВозвратСНДС = Приход(Сумма1)Когда(КодОперации в КодыВозвратов);
	//|Функция ОборотСумма = Сумма(Оборот)Когда(КодОперации в КодыОборота);
	//|Функция ОборотУпр = Сумма(ПересчетВалюты(Оборот, Док))Когда(КодОперации в КодыОборота);
	//|Функция ОборотКомРасход = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глРубли))Когда(КодОперации = глКО.ОтчетРеализатора);
	//|Функция ОборотКомРасходУпр = Сумма(ПересчетВалюты(ОборотКом, Док, ВалВзаим, глДоллары))Когда(КодОперации = глКО.ОтчетРеализатора);
	//|Функция ОборотВ = Сумма(Оборот)Когда(КодОперации в КодыВозвратов);
	//|Функция ОборотУпрВ = Сумма(ПересчетВалюты(Оборот, Док))Когда(КодОперации в КодыВозвратов);
	|Условие (НЕ(КодОперации в КодыПеремещений));
	|";        
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоОтчетам()  
    
Процедура ПриЗакрытии()
	//СохранитьЗначение("ТаблМФ",ТаблицаМФ); 
	//СохранитьЗначение("ДатаНачала",ДатаНачала);
	//СохранитьЗначение("ДатаКонца",ДатаКонца);
	//СохранитьЗначение("ВыбВидПродажи",ВыбВидПродажи);
	//СохранитьЗначение("ВыбЧейТовар",ВыбЧейТовар);
	//СохранитьЗначение("ПоСкладуДокумента",ПоСкладуДокумента);
КонецПроцедуры	

Процедура ОбрфлСкрытьСклады()     
	Форма.ИзлишекЦС.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекК.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЭ.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЛенс.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекЛен.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекРад.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекСтах.Видимость(1-флСкрытьСклады);
	Форма.ИзлишекТур.Видимость(1-флСкрытьСклады);
	
	Форма.ЗабратьЦС.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьК.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЭ.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЛенс.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьЛен.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьРад.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьСтах.Видимость(1-флСкрытьСклады);
	Форма.ЗабратьТур.Видимость(1-флСкрытьСклады); 
КонецПроцедуры


//Тело модуля
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("РезервыТМЦ"          , РезервыТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);

ТЗ			= СоздатьОбъект("ТаблицаЗначений");
ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		= СоздатьОбъект("Регистр.РезервыТМЦ2");
Склад_темп	= СоздатьОбъект("Справочник.Склады");   

ВыбВидПродажи.УдалитьВсе();
ВыбВидПродажи.ДобавитьЗначение("Любой");
ВыбВидПродажи.ДобавитьЗначение("Оптом");
ВыбВидПродажи.ДобавитьЗначение("В розницу");
ВыбВидПродажи.ТекущаяСтрока(1);
	                       
ВыбЧейТовар.УдалитьВсе();
ВыбЧейТовар.ДобавитьЗначение("Любой");
ВыбЧейТовар.ДобавитьЗначение("Купленный");
ВыбЧейТовар.ДобавитьЗначение("Принятый");
ВыбЧейТовар.ТекущаяСтрока(1);

