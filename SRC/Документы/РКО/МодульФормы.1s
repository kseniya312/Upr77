//#ЗагрузитьИзФайла "..\..\Системная\Документ\Форма\РКО.txt"
////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

// Для контроля необходимости пересчетов
Перем СтараяДата, СтараяФирма, СтараяВалюта, СтарыйКурс;
Перем СтарыйКонтрагент, СтарыйДоговор;
Перем ТекущийДолг;
Перем Парам;

//Работа с новыми значениями
Перем СтарыйСписокСтатей, СтарыйКО, СтарыйПодчинение1, СтарыйДляКого;


Перем текстСписокСтатей;	//Вывод на экран полного пути текущей группы

Процедура ОбновиТекст() далее

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//*****************************************************************************
//ЗаголовокФормы() 
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//	Текстовая строка - название валюты
//
//Описание:
// Возвращает наименование переданного элемента справочника или "<нет>" в случае,
//если передано пустое значение
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет>");
КонецФункции                                                                    
            
//*****************************************************************************
//ЗаголовокФормы() 
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//	Название операции
//
//Описание:
// Формирует название операции и заголовок формы диалога.
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                      
	Заголовок 	= "Расходный кассовый ордер";
	Название 	= "РКО №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
    
//******************************************************************************
// УправлениеВидимостью() 
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
//Описание:
// Управляет видимостью слоев диалога
//
Процедура УправлениеВидимостью()
	Форма.Прочее.Видимость(1);
	Форма.Проч.Видимость(1);
	                                 
	Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда
	    Форма.ИспользоватьСлой("Общий1, Общий2, Операция", 2);
		
		Если (КодОперации = глКО.ОплатаПоставщику) ИЛИ
			 (КодОперации = глКО.ВыплатаСкидок) ИЛИ
			 (КодОперации = глКО.ВозвратЗалога) ИЛИ
		     (КодОперации = глКО.ВозвратОплатыПокупателю) Тогда
			Форма.ИспользоватьСлой("Взаиморасчеты", 1);
		
		ИначеЕсли (КодОперации = глКО.ВыдачаПодотчет) Тогда
			Форма.ИспользоватьСлой("Подотчетник", 1);

		ИначеЕсли (КодОперации = глКО.СтатьиДР) Тогда
			Форма.ИспользоватьСлой("СписокСтатейДР", 1);
			Форма.СписокСтатейДР.Видимость(1);
			Форма.ДляКого.Видимость(1);
			Форма.Филиал.Видимость(1);
			Форма.Текст1.Видимость(1);
			Форма.Текст2.Видимость(1);
			Форма.Текст4.Видимость(1);
			Форма.Текст5.Видимость(1);
		
		ИначеЕсли (КодОперации = глКо.ВыдачаАкционерам) или (КодОперации = глКо.СпецОбъект) Тогда
			Форма.ИспользоватьСлой("СписокСтатейДР", 1);
			Форма.СписокСтатейДР.Видимость(0);
			Форма.ДляКого.Видимость(0);
			Форма.Филиал.Видимость(0);
			Форма.Текст1.Видимость(0);
			Форма.Текст2.Видимость(0);
			Форма.Текст4.Видимость(0);
			Форма.Текст5.Видимость(0);
//			Комментарий = сокрЛП(КодОперации);
//			Основание	= Комментарий;
		Иначе
			Форма.ИспользоватьСлой("Прочее", 1);
		КонецЕсли;
		
	Иначе
	    Форма.ИспользоватьСлой("Общий1, Общий2, Печать", 2);
	КонецЕсли;                         
	
КонецПроцедуры // УправлениеВидимостью()
              
//******************************************************************************
// УправлениеДоступностью()
//
// Параметры:
//	Нет  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДоступностью()
	
	Если Форма.ТолькоПросмотр() = 0 Тогда
		Если Договор.ВалютаВзаиморасчетов = Валюта Тогда
			Форма.кнСуммаВзаиморасчетов.Доступность(0);
		Иначе
			Форма.кнСуммаВзаиморасчетов.Доступность(1);
		КонецЕсли;
		
		Если Валюта = глРубли Тогда
			Форма.Курс.Доступность(0);
		Иначе
			Форма.Курс.Доступность(1);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностью()

//******************************************************************************
// ЗаполнитьСписокВидовОплаты()
//
// Параметры:
//	Нет  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет список видов оплаты необходимыми кодами операций.
//
Процедура ЗаполнитьСписокВидовОплаты()
	
	СписокВидовОплаты.ДобавитьЗначение(глКО.ОплатаПоставщику);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВозвратОплатыПокупателю);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВыдачаПодотчет);
	СписокВидовОплаты.ДобавитьЗначение(глКО.Прочее);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВыплатаСкидок);
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВозвратЗалога);
	СписокВидовОплаты.ДобавитьЗначение(глКО.СтатьиДР);
//Это далее вообще хрень ненужная - но ГБ больно надобно :(
	СписокВидовОплаты.ДобавитьЗначение(глКО.ВыдачаАкционерам);
	СписокВидовОплаты.ДобавитьЗначение(глКО.СпецОбъект);
	
	
	
КонецПроцедуры // ЗаполнитьСписокВидовОплаты()

//******************************************************************************        
// ТекстВалютыВзаим()
//
// Параметры:
//	Нет  
//
// Возвращаемое значение:
//  Возвращает текстовое представление валюты взаиморасчетов.
//
// Вызывается из формул элементов диалога:                   
//	Вызывается из статика, отображающего валюту взаиморасчетов.
//
// Описание:
//  Устанавливает текст суммы взаиморасчетов и возвращает текстовое представление
//валюты взаиморасчетов.
//
Функция ТекстВалютыВзаим()   
	
	Форма.ТекстСуммаВзаиморасчетов.Заголовок(глФРМ(СуммаВзаиморасчетов,Договор.ВалютаВзаиморасчетов));
	
	Возврат ТекстВалюты(Договор.ВалютаВзаиморасчетов);
	                   
КонецФункции // ТекстВалютыВзаим()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
//
// Параметры:
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание:
//	Пересчитывает сумму в валюте взаиморасчетов.
//
Процедура ПересчетСуммыВзаиморасчетов()
	     
	Если ПустоеЗначение(Договор.ВалютаВзаиморасчетов) =1 Тогда
		СуммаВзаиморасчетов	= 0;
	Иначе
		СуммаВзаиморасчетов		= глПересчет(Сумма,
					Валюта,Курс,
					Договор.ВалютаВзаиморасчетов,ДатаДок);
	КонецЕсли;
	
	Форма.Обновить();
	
КонецПроцедуры // ПересчетСуммыВзаиморасчетов()
                    
//******************************************************************************
// РасчетТекущегоДолга()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
//	Нет
//
// Описание: 
//	Производит вызов глобальной функции расчета суммы текущего долга контрагента.
//  В зависимости от характера задолженности устанавливает 
//  цвет элемента диалога "Сумма долга". (Если долг >= 0 - синий, иначе - красный)   
//
Процедура РасчетТекущегоДолга()
	                 
	Если      (КодОперации = глКО.ОплатаПоставщику)  Тогда
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Поставщик");
		
	ИначеЕсли (КодОперации = глКО.ВозвратОплатыПокупателю) Тогда
		ТекущийДолг = глТекущийДолг(Фирма, Договор, "Покупатель");
		
	Иначе     
		ТекущийДолг = 0;
	КонецЕсли;
		                     
	Форма.ТекстТекущийДолг.Заголовок(глФРМ(ТекущийДолг,Договор.ВалютаВзаиморасчетов));
		
	Если ТекущийДолг < 0 Тогда
		Форма.ТекстТекущийДолг.Цвет(255); 
	Иначе
		Форма.ТекстТекущийДолг.Цвет(0,0,128); 
	КонецЕсли;

КонецПроцедуры //РасчетТекущегоДолга()
      
//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Не выбран документ - основание";
	КонецЕсли;  
	
	Сумма  = 0;
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн <> "ВозвратОтПокупателя") и
	     (ВидОсн <> "ЗаказПоставщику") и
		 (ВидОсн <> "ОтчетКомитенту") и
		 (ВидОсн <> "ПоступлениеДопРасходы") и
		 (ВидОсн <> "Реализация") и
		 (ВидОсн <> "ПоступлениеТМЦ") и
		 (ВидОсн <> "ПоступлениеТМЦРозница") и
		 (ВидОсн <> "ПоступлениеПрочее") и
		 (ВидОсн <> "ПКО") И (ВидОсн <> "РабочийДень") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли;
	
	Если (ВидОсн = "ВозвратОтПокупателя") или
	     (ВидОсн = "ПКО") Тогда
		КодОперации         = глКО.ВозвратОплатыПокупателю;
		Валюта 		        = ДокОснование.Валюта;
		Курс 		        = ДокОснование.Курс;
	    СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
	
		Если (ВидОсн = "ПКО") Тогда
			Сумма               = ДокОснование.Сумма;
			ОблагаетсяНП        = ДокОснование.ОблагаетсяНП;       
			Касса               = ДокОснование.Касса;
		Иначе
			//Возврат оплачиваем по курсу документа возврата
			Сумма = глПересчет(ДокОснование.Итог("Сумма") +
    		                   ?(ДокОснование.СуммаВклНДС = 1, 0,ДокОснование.Итог("СуммаНДС")) +
        		               ?(ДокОснование.СуммаВклНП = 1, 0,ДокОснование.Итог("СуммаНП")),
							   ДокОснование.Валюта, ДокОснование.Курс,
							   Валюта, ДатаДок);
						   
		КонецЕсли;	
		
	ИначеЕсли (ВидОсн = "ОтчетКомитенту") Тогда
		КодОперации = глКО.ОплатаПоставщику;
		Валюта 		= ДокОснование.Договор.ВалютаВзаиморасчетов;
		Курс 		= глКурсДляВалюты(Валюта,ДатаДок);
	
		РегПоставщики = СоздатьОбъект("Регистр.Поставщики");
		РегПоставщики.ВыбратьДвиженияДокумента(ДокОснование);
		Пока РегПоставщики.ПолучитьДвижение() = 1 Цикл
		    Если РегПоставщики.КодОперации = глКО.ОтчетКомитенту Тогда
		        Сумма = Сумма +  РегПоставщики.СуммаВал;
		    КонецЕсли;
		КонецЦикла;                                            
		
		СуммаВзаиморасчетов = Сумма;  
	
	ИначеЕсли (ВидОсн = "Реализация") Тогда	        
		
		КодОперации         = глКО.ВыплатаСкидок;                           
		Валюта 		        = ДокОснование.Валюта;
		Курс                = глКурсДляВалюты(Валюта, ДатаДок); // Курс мог измениться                              
		Сумма 				= ДокОснование.Итог("СуммаСкидки");               
	
	ИначеЕсли (ВидОсн = "РабочийДень") Тогда
		Фирма				= ДокОснование.Фирма;
		Касса				= ДокОснование.Касса;
		КодОперации			= глКО.СтатьиДР;
		Валюта				= глРубли;
		Курс				= глКурсДляВалюты(Валюта, ДатаДок);
		Сумма				= ДокОснование.Прочее;
	
	Иначе                               
		КодОперации         = глКО.ОплатаПоставщику;
		ОблагаетсяНП        = ДокОснование.УчитыватьНП;               
		СуммаВзаиморасчетов = ДокОснование.СуммаВзаиморасчетов;
		Валюта 		        = ДокОснование.Валюта;
		Курс                = глКурсДляВалюты(Валюта, ДатаДок); // Курс мог измениться                              
		
		// Оплачиваем по умолчанию сумму, которую считаем нужным оплатить по взаиморасчетам
		Если СуммаВзаиморасчетов = 0 Тогда
		    Сумма = 0;
		Иначе
			Сумма = глПересчет(СуммаВзаиморасчетов, Договор.ВалютаВзаиморасчетов, ДатаДок, Валюта, Курс);  
		КонецЕсли; 
	КонецЕсли;
	
	СтараяВалюта = Валюта; 
	СтарыйКурс   = Курс;

	Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
		Выдать = Контрагент.ЮрФизЛицо.ПолнНаименование;
		Если Контрагент.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
			ПоДокументу	= глПредставлениеУдостоверения(Контрагент.ЮрФизЛицо.ДокументУдЛичность);
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
		         
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Вызывается из формул элементов диалога:
//  При нажатии на кнопку "Основание". 
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Если у документа есть документ-основание - открывает его форму, в противном случае -
//осуществляется выбор документа-основания.
//
Процедура ПоКнопкеОснование()
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	ДокОсн = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(ДокОсн) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст, ДокОсн);
		
	    Основание = глПредставлениеДокумента(ДокОсн);
		
		ТекстВопроса = "Заполнить сумму по документу основанию?";
		Если Сумма <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением сумма будет обнулена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		Сумма = 0;
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеВидимостью();
		УправлениеДоступностью();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//	Выводит печатную форму документа.
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	                     
	Наименование			= Фирма.ЮрЛицо.ПолнНаименование;
	Руководитель			= Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок);
	ДолжностьРуководителя	= "Генеральный директор";
	Руководитель			= "Бояринова Е.А.";
	
	//++Ерошенко 11.05.2007
	// задание бухгалтерии.. 
	Если ТекущаяДата() > Дата("07.05.07") Тогда
		Если Найти(Проект.Наименование, "Нал.") <> 0 Тогда
			Реквизиты = СоздатьОбъект("СписокЗначений");
			глРеквизитыФирмы("Эксп",Реквизиты);
			Руководитель	=	Реквизиты.Получить("ГенДир");
			Глбухгалтер		=	Реквизиты.Получить("ГлавБух");
			Наименование	= 	Реквизиты.Получить("ПолноеНаименованиеФирмы");
		Иначе
			Глбухгалтер			= Фирма.ЮрЛицо.Глбухгалтер.Получить(ДатаДок);
			Кассир				= Фирма.ЮрЛицо.Кассир.Получить(ДатаДок);
		КонецЕсли;
	Иначе
		Глбухгалтер			= "Бояринова Е.А.";
		Кассир				= "Бояринова Е.А.";
	КонецЕсли;
	//--Ерошенко
	
	СуммаПроп				= глСуммаПрописью(Сумма, Валюта);
	печДатаДок				= ?(ДатаЧисло(ДатаДок)<10,"0","")+Формат(ДатаДок ,"Д ДДММММГГГГ");
	Если Проведен()=1 Тогда
		Рез = "";
		глОпределитьКоррСчетаДокумента(ТекущийДокумент(),Рез,"50",2);
		КрСчДб = Рез.Получить("СчетаДебета");
		КрСчКр = Рез.Получить("СчетаКредита");
	КонецЕсли;
	
	Таб	= СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.Вывести();
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиРасходногоОрдера","ОпцииПечатиРасходногоОрдера");
		
		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 

КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Вызывается из формул элементов диалога:
//  При нажатии на кнопку "Печать". 
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Вызывается из формул элементов диалога:
//  При нажатии на кнопку выбора печатной формы. 
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПоКнопкеДолгКлиента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  При нажатии на кнопку "Долг контрагента". 
//
// Описание:
//  Вызывает процедуру формирования отчетов по взаиморасчетам.
//
Процедура ПоКнопкеДолгКлиента()
	
	Если (КодОперации = глКО.ОплатаПоставщику)  Тогда
		глВзаиморасчеты(Фирма,Договор,"Поставщик");
	ИначеЕсли (КодОперации = глКО.ВозвратОплатыПокупателю) Тогда
		глВзаиморасчеты(Фирма,Договор,"Покупатель");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеДолгКлиента()


//*****************************************************************************
// ПриВыбореВидаОплаты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Из формулы списка значений "СписокВидовОплаты".
//
// Описание:
//  Устанавливает код операции, соответствующий выбранному значению вида оплаты.
//
Процедура ПриВыбореВидаОплаты()
	
	КодОперации = СписокВидовОплаты.ПолучитьЗначение(СписокВидовОплаты.ТекущаяСтрока());
	УправлениеВидимостью();
	РасчетТекущегоДолга();
	
КонецПроцедуры //ПриВыбореВидаОплаты()                                         

//******************************************************************************
// ПриИзмененииДоговора()
//
// Параметры:
//  Нет    
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Если договор изменен, запоминает старый договор, осуществляет перерасчеты
//выводимых значений, устанавливает контрагента, если он не задан.
//
Процедура ПриИзмененииДоговора()                             
	
	Если СтарыйДоговор <> Договор Тогда
		СтарыйДоговор	= Договор;
	    
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеВидимостью();
		УправлениеДоступностью();
	
		Если ПустоеЗначение(Контрагент) = 1 Тогда
		    Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//******************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет    
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Приводит значения реквизитов документа в соответстви с параметрами нового договора.
//
Процедура ПриИзмененииКонтрагента()
	
	Если СтарыйКонтрагент <> Контрагент Тогда 
		СтарыйКонтрагент	= Контрагент;
		Договор				= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;
	
		РасчетТекущегоДолга();
		ПересчетСуммыВзаиморасчетов();
		УправлениеВидимостью();
		УправлениеДоступностью();
		
		Если Контрагент.ЮрФизЛицо.Выбран() = 1 Тогда
			Выдать = Контрагент.ЮрФизЛицо.ПолнНаименование;
			Если Контрагент.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
				ПоДокументу	= глПредставлениеУдостоверения(Контрагент.ЮрФизЛицо.ДокументУдЛичность);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;                    
	
КонецПроцедуры // ПриИзмененииКонтрагента()                                                                

//******************************************************************************
// ПриИзмененииФизЛица()
//
// Параметры:
//  Нет    
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Приводит значения реквизитов документа в соответстви с параметрами нового физ. лица.
//
Процедура ПриИзмененииФизЛица()
	
	Выдать = ФизЛицо.ПолнНаименование;
	ПоДокументу	= глПредставлениеУдостоверения(ФизЛицо.ДокументУдЛичность);
	
КонецПроцедуры // ПриИзмененииФизЛица()                                                                

//*****************************************************************************
// ПриИзмененииВалюты()
// Параметры: 
//	Нет
//
// Возвращаемое значение:	
//	Нет
//
// Описание:
// Процедура вызывается при смене валюты документа
//
Процедура ПриИзмененииВалюты()
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Возврат;
	КонецЕсли;
    
	// При смене валюты зачитываем текущий курс на дату
	Курс = глКурсДляВалюты(Валюта, ДатаДок);
	
	Если Сумма <> 0 Тогда
		Если Вопрос("Пересчитать сумму документа?", "Да+Нет", 60) = "Да" Тогда
			Сумма = глПересчет(Сумма, СтараяВалюта, СтарыйКурс, Валюта, Курс);
		КонецЕсли;
	КонецЕсли;
	
	СтараяВалюта = Валюта; СтарыйКурс = Курс;
	
	ПересчетСуммыВзаиморасчетов();
	УправлениеДоступностью();	
	
КонецПроцедуры // ПриИзмененииВалюты()

//*****************************************************************************
// ПриИзмененииКурса()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение:
//  Нет
//
//Описание:
// Процедура вызывается при смене курса документа
Процедура ПриИзмененииКурса()
	
	СтарыйКурс = Курс;
	ПересчетСуммыВзаиморасчетов();
	
КонецПроцедуры 

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Сумма = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		ПриИзмененииКурса();
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//	При интерактивном изменении бухгалтерского счета.
//
// Описание:
//  Здесь описывается процедура.
//
Процедура ПриИзмененииСчета()
	
	глПриВыбореБухСчета(Контекст);
	
КонецПроцедуры // ПриИзмененииСчета()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// предопределенная процедура
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	УправлениеВидимостью();
	
КонецПроцедуры                   
                                                                                 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	
	// ДЛЯ начала проверим нет ли на данный документ компромата 
	// в виде уже введенных расходных
                   
	Если ДокументОснование.Вид() = "Реализация"  Тогда
		__Док = СоздатьОбъект("Документ");
		
		__Док.ВыбратьПодчиненныеДокументы(,,ДокументОснование);
		__РКО = ""; ОбщСумм = 0;
		Пока __Док.ПолучитьДокумент() = 1 Цикл
			Если (__Док.Вид() = "РКО") и (__Док.Проведен()=1) Тогда
				__РКО 	= __Док.ТекущийДокумент();
				ОбщСумм	= глПересчет(__РКО.Сумма,__РКО.Валюта,__РКО.Курс, ДокументОснование.Валюта,ДокументОснование.Курс) + ОбщСумм;	//В валюте документа
			КонецЕсли;
		КонецЦикла;	
		Если ПустоеЗначение(__РКО) = 0  Тогда
			а=Вопрос("На основании данной реализации уже был ввод РКО.
						|Если Вы хотите ввести новый документ. Нажмите (ДА).
						|Если Вы хотите открыть уже созданный документ, нажмите (НЕТ).
						|Если Вы выбрали данныю операцию ошибочно. Нажмите (ОТМЕНА).",3,60);
			если а=2 Тогда	//Отмена
				СтатусВозврата(0);
				Возврат;
			ИначеЕсли а=7 Тогда	//Нет
				ОткрытьФорму(__РКО);
				СтатусВозврата(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	                      
	Если ДокументОснование.Вид() = "Реализация" Тогда
		Если ДокументОснование.ВыданоСоСкидкой = 1 Тогда
			Предупреждение("Накладная выдана со скидкой", 60);
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	                                  
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;
	
	Основание = глПредставлениеДокумента(ДокументОснование);
	Результат = ЗаполнениеПоДокументуОснованию();
	
	Если глЕстьРеквизитШапки("Объект",ДокументОснование.Вид())=1 Тогда
		Объект= ДокументОснование.Объект;
	КонецЕсли;

	Если ПустоеЗначение(Результат) = 0 Тогда
		Предупреждение(Результат, 60);
		СтатусВозврата(0);
	КонецЕсли;
	
	ОбновиТекст();
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
	Если НазваниеНабораПрав()="Продавец" Тогда
		Валюта= глРубли;
		Форма.Валюта.Доступность(0);
		ПриИзмененииВалюты();
		Форма.МожноПроводить.Доступность(0);
		МожноПроводить=0;
	Иначе
		МожноПроводить=1;
	КонецЕсли;
    
	Если ДокументОснование.Вид()="Реализация" Тогда
		Сумма	= ДокументОснование.итог("СуммаСкидки")-ОбщСумм;	//Валюта документаОснования и текущего равны.
	КонецЕсли;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура
//
Процедура ВводНового(Скопирован) 
	                  
	глЗаполнитьШапку(Контекст, Скопирован);

	Если НазваниеНабораПрав()="Продавец" Тогда
		Валюта= глРубли;
		Форма.Валюта.Доступность(0);
		ПриИзмененииВалюты();
		Форма.МожноПроводить.Доступность(0);
		МожноПроводить=0;
	Иначе
		МожноПроводить=1;
	КонецЕсли;
	
	Если Скопирован = 1 Тогда	//копирование документа
		ПересчетСуммыВзаиморасчетов();
		Возврат;
	КонецЕсли;
	
	КодОперации  = глКО.ОплатаПоставщику;
	ОблагаетсяНП = ЮрЛицо.УчитыватьНП;
                             
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;

КонецПроцедуры // ВводНового()        
  
//******************************************************************************
// предопределенная процедура            
//
Процедура ПриОткрытии()       
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;         
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяДата		= ДатаДок;
	СтараяФирма		= Фирма;
	СтараяВалюта	= Валюта;
	СтарыйКурс		= Курс;

	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
	
	Форма.СписокСтатейДР.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Комментарий.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Подчинение1.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.ДляКого.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Филиал.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Прочее.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Основание.ВыполнятьФормулуТолькоПриИзменении(1);
	
	ЗаполнитьСписокВидовОплаты();
	
	Если СписокВидовОплаты.РазмерСписка() > 0 Тогда
		Позиция	= СписокВидовОплаты.НайтиЗначение(КодОперации);
		Если Позиция > 1 Тогда
			СписокВидовОплаты.ТекущаяСтрока(Позиция);
		КонецЕсли;
	КонецЕсли;
	
	НачальнаяДатаДокумента = ДатаДок;

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли; 
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ИмяПользователя() <> "Администратор" ) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;            
	
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
	
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнСуммаВзаиморасчетов.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	СписокДействий.ДобавитьЗначение("Выгрузить (отправить по эл.почте)");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	глАктивизироватьРеквизит(Контекст);
		
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;                                           
		
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Общее");
	Форма.Закладки.ДобавитьЗначение("Печать");
	          
	Форма.Закладки.ТекущаяСтрока(1);
	
	РасчетТекущегоДолга();
	УправлениеВидимостью();
	УправлениеДоступностью();
	
	глПриВыбореБухСчета(Контекст, 1, 1);
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);  
	                  
	ТекстВалютыВзаим();  
	
	Если НазваниеНабораПрав()="Продавец" Тогда	//Нельзя уму сюды лазить
		Форма.Валюта.Доступность(0);
		Форма.МожноПроводить.Доступность(0);
	КонецЕсли;
	
	
КонецПроцедуры // ПриОткрытии()                                                                 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	Если (ИдентЭлемДиалога = "Счет")
	 или (ИдентЭлемДиалога = "Субконто1") 
	 или (ИдентЭлемДиалога = "Субконто2") 
	 или (ИдентЭлемДиалога = "Субконто3")  Тогда
	    глПриВыбореБухСчета(Контекст);  
	КонецЕсли;
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	Если ИдентЭлемДиалога = "Субконто1" Тогда
		Если ТипЗначенияСтр(ВыбЗнач) = "Справочник" Тогда
			Если ВыбЗнач.Вид() = "Контрагенты" Тогда
				Если ВыбЗнач.ЮрФизЛицо.Выбран() = 1 Тогда
					Выдать = ВыбЗнач.ЮрФизЛицо.ПолнНаименование;
				КонецЕсли;
				Если ВыбЗнач.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
					ПоДокументу	= глПредставлениеУдостоверения(ВыбЗнач.ЮрФизЛицо.ДокументУдЛичность); 
				КонецЕсли;
			ИначеЕсли ВыбЗнач.Вид() = "ФизЛица"  Тогда    
				Выдать = ВыбЗнач.ПолнНаименование;
				ПоДокументу	= глПредставлениеУдостоверения(ВыбЗнач.ДокументУдЛичность); 
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли (ИдентЭлемДиалога = "Субконто2") или (ИдентЭлемДиалога = "Субконто3") Тогда		
		Если (ПустоеЗначение(ПоДокументу) = 1) и (ТипЗначенияСтр(ВыбЗнач) = "Справочник") Тогда
			Если ВыбЗнач.Вид() = "Контрагенты" Тогда
				Если ВыбЗнач.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
					ПоДокументу	= глПредставлениеУдостоверения(ВыбЗнач.ЮрФизЛицо.ДокументУдЛичность); 
				КонецЕсли;
			ИначеЕсли ВыбЗнач.Вид() = "ФизЛица"  Тогда    
				ПоДокументу	= глПредставлениеУдостоверения(ВыбЗнач.ДокументУдЛичность); 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораЗначения()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;

	Если КодОперации = глКО.ВыдачаПодотчет Тогда
	    Контрагент	= "";
		Договор		= "";
		
		Счет		= "";
		Субконто1	= "";
		Субконто2	= "";
		Субконто3	= "";
	ИначеЕсли КодОперации = глКО.Прочее Тогда
	    Контрагент	= "";
		Договор		= "";
		
		ФизЛицо		= "";
	Иначе
		Счет		= "";
		Субконто1	= "";
		Субконто2	= "";
		Субконто3	= "";
		
		ФизЛицо		= "";
	КонецЕсли;   
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры    // ПриЗаписи()

//Показывает полный путь для элемента справочника
Процедура ОбновиТекст()
	если (КодОперации <> СтарыйКО) 
	или  (СтарыйСписокСтатей<>СписокСтатейДР) 
	или  (СтарыйПодчинение1 <>Подчинение1)
	или  (СтарыйДляКого		<>ДляКого)
	Тогда
		если КодОперации=глКО.СтатьиДР Тогда
			текстСписокСтатей	= СписокСтатейДР.ПолноеНаименование();
			Если ПустоеЗначение(Подчинение1)=1 Тогда
				Подчинение1=СписокСтатейДР.ФизЛицо;
			КонецЕсли;
			Если ПустоеЗначение(Комментарий)=1 тогда
				Комментарий			= текстСписокСтатей;
				Основание			= текстСписокСтатей;
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			ИначеЕсли Вопрос("Обновить комментарий?",4,60)=6 Тогда
				Комментарий			= текстСписокСтатей;
				Основание			= текстСписокСтатей;
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			КонецЕсли;
		ИначеЕсли КодОперации=глКО.ВыдачаАкционерам тогда 
			текстСписокСтатей	= "";
			Если ПустоеЗначение(Комментарий)=1 тогда
				Комментарий			= "Выдача акционерам";
				Основание			= "Выдача акционерам";
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			ИначеЕсли Вопрос("Обновить комментарий?",4,60)=6 Тогда
				Комментарий			= "Выдача акционерам";
				Основание			= "Выдача акционерам";
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			КонецЕсли;
		ИначеЕсли КодОперации=глКО.СпецОбъект тогда 
			текстСписокСтатей	= "";
			Если ПустоеЗначение(Комментарий)=1 тогда
				Комментарий			= "СпецОбъект";
				Основание			= "СпецОбъект";
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			ИначеЕсли Вопрос("Обновить комментарий?",4,60)=6 Тогда
				Комментарий			= "СпецОбъект";
				Основание			= "СпецОбъект";
				Если (ПустоеЗначение(ДляКого)=0) и (КодОперации=глКО.СтатьиДР) Тогда
					Выдать		= сокрЛП(ДляКого);
					ПоДокументу	= глПредставлениеУдостоверения(ДляКого.ДокументУдЛичность);
				Иначе
					Выдать		= сокрЛП(Подчинение1);
					ПоДокументу	= глПредставлениеУдостоверения(Подчинение1.ДокументУдЛичность);
				КонецЕсли;
				Приложение	= "";
			КонецЕсли;
		ИначеЕсли КодОперации=глКО.ОплатаПоставщику тогда 
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) тогда
				Комментарий			= "Оплата поставщику";
				если ПустоеЗначение(ДокОснование)=0 Тогда
					Комментарий		= Комментарий+", по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Основание			= Комментарий;
				Выдать				= сокрЛП(Контрагент);
				ПоДокументу			= "";//глПредставлениеУдостоверения(Контрагент.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;			
		ИначеЕсли КодОперации=глКО.ВозвратОплатыПокупателю тогда 
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) тогда
				Комментарий			= "Возврат оплаты покупателю";
				если ПустоеЗначение(ДокОснование)=0 Тогда
					Комментарий		= Комментарий+", по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Основание			= Комментарий;
				Выдать				= сокрЛП(Контрагент);
				ПоДокументу			= "";//глПредставлениеУдостоверения(Контрагент.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;			
		ИначеЕсли КодОперации=глКО.ВыдачаПодотчет тогда 
		
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) тогда
				Комментарий			= "Выдано подотчет";
				Основание			= Комментарий;
				Выдать				= сокрЛП(ФизЛицо);
				//ПоДокументу			= глПредставлениеУдостоверения(Контрагент.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;			
		ИначеЕсли КодОперации=глКО.ВыплатаСкидок тогда 
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) тогда
				Комментарий			= "Выплата скидок";
				если ПустоеЗначение(ДокОснование)=0 Тогда
					Комментарий		= Комментарий+", по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Основание			= Комментарий;
				Выдать				= сокрЛП(Контрагент);
				ПоДокументу			= "";//глПредставлениеУдостоверения(Контрагент.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;			
		ИначеЕсли КодОперации=глКО.ВозвратЗалога тогда 
			Если (ПустоеЗначение(Комментарий)=1) или (Вопрос("Обновить комментарий?",4,60)=6) тогда
				Комментарий			= "Возврат залога";
				если ПустоеЗначение(ДокОснование)=0 Тогда
					Комментарий		= Комментарий+", по накл: "+сокрЛП(ДокОснование);
				КонецЕсли;
				Основание			= Комментарий;
				Выдать				= сокрЛП(Контрагент);
				ПоДокументу			= "";//глПредставлениеУдостоверения(Контрагент.ДокументУдЛичность);
				Приложение			= "";
			КонецЕсли;			
		Иначе
			если ПустоеЗначение(Комментарий)=0 Тогда
				Если Вопрос("Очистить комментарий?",4,60)=6 Тогда
					Выдать		= "";
					Комментарий	= "";
					Основание	= "";
					ПоДокументу	= "";
					Приложение	= "";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СтарыйСписокСтатей	= СписокСтатейДР;
	СтарыйКО			= КодОперации;
	СтарыйПодчинение1	= Подчинение1;
	СтарыйДляКого		= ДляКого;
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если (ТипЗначенияСтр(Форма.Параметр) = "ГрупповойКонтекст") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр;
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()
                                            
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//******************************************************************************
//	                   
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма";
ТаблицаПечФорм.Кнопка       = "Печать";
СтарыйСписокСтатей	= СписокСтатейДР;
СтарыйКО			= КодОперации;
СтарыйПодчинение1	= Подчинение1;
СтарыйДляКого		= ДляКого;

ОбновиТекст();

Парам = Форма.Параметр;

