////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//

Перем СписокДействий; // для механизма кнопки "Действия"
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

// Для контроля необходимости пересчетов
Перем СтараяФирма, СтарыйСклад;

Перем НС, Рег1, Рег2, Склад_темп, ТЗ, ТЗ2;	//Работа с остатками

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;
Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; // для показа остатков
Перем __ОстатокНаСкладе, __ОстатокПоФирме , __Резерв , __ТовСкидка; // для показа остатков

                              // для выбора розничных цен, по которым есть остатки

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ИСПОЛЬЗУЕМЫЕ ПРИ ПЕЧАТИ
//
// номер текущей страницы
Перем НомерСтраницы;
// макс. количество строк, которое влезает на страницу (без шапки и подвала)
Перем СтрокНаСТранице;
// высота шапки и подвала документах в товарных строках
Перем ВысотаШапки, ВысотаПодвала;
// количество выведеных строк
Перем ВыведеноНаСтраницу, ВыведеноВсего;
// количество строк документа
Перем ВсегоСтрок;
// используется для расчета количества строк, которое может вместить страница
Перем ОстатокСтрок;

Перем ИтогоКоличество, ИтогоСумма;	// итоги по странице
Перем ВсегоКоличество, ВсегоСумма;	// итоги по документу

Функция ПокажиОстатки() далее	

Процедура ПересчетЦены()
	Спр = СоздатьОбъект("Справочник.Номенклатура");
	Спр.ИспользоватьДату(ДатаДок);
	Спр.НайтиЭлемент(Номенклатура);
	Цена = Спр.ПоследняяЦенаПрихода;
	Сумма = Количество*Цена;
КонецПроцедуры


Процедура ЗаполнитьЦены(Парам = "")
	
	Если Парам = "ОтветХранение" Тогда 
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ЦенаЦены 	= 0;
			ВалютаЦены 	= "";
			Если глВернутьЦену(Номенклатура, СкладПолучатель.ЦенаОтветхранения, ДатаДок, ЦенаЦены, Единица, ВалютаЦены) = 0 Тогда
				Цена	= 0;
			Иначе
				глПересчитатьЦенуВДокументе(Контекст,
				УчитыватьНП, УчитыватьНДС, 
				ЦенаЦены, ВалютаЦены, 
				СкладПолучатель.ЦенаОтветхранения.ЦенаВклНП, СкладПолучатель.ЦенаОтветхранения.ЦенаВклНДС);
				глПересчетТаблЧасти(Контекст, "Цена");
			КонецЕсли; 
		КонецЦикла;
	Иначе
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			ПересчетЦены();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры		
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
Функция ЗаполнениеПоДокументуОснованию() Далее

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    
                 
//******************************************************************************
// УправлениеВидимостью(НомерЗакладки)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Управление видимостью элементов диалога в зависимости от значения закладки и 
//  других условий.
//
Процедура УправлениеВидимостью(НомерЗакладки)
	
	Если НомерЗакладки=1 Тогда 
		СписокСлоев = "Шапка,Основной,Подвал";
		Если (Склад.РозничныйСклад = 1) 
		или  (СкладПолучатель.РозничныйСклад = 1)
		Тогда
			СписокСлоев = СписокСлоев + ",ПодвалСумма";
		КонецЕсли;
		Форма.ИспользоватьСлой(СписокСлоев);
	Иначе
		СписокСлоев = "Шапка,ТабличнаяЧасть1,ТабличнаяЧасть2,Подвал";
		Если (Склад.РозничныйСклад = 1) 
		или  (СкладПолучатель.РозничныйСклад = 1)
		Тогда
			СписокСлоев = СписокСлоев + ",ПодвалСумма,ТабличнаяЧастьСумма";
		КонецЕсли;
		
		Форма.ИспользоватьСлой(СписокСлоев);
		
		Если (Склад.РозничныйСклад = 1) 
		или  (СкладПолучатель.РозничныйСклад = 1)
		Тогда
			//Форма.Цена. Видимость(1);
			//Форма.Сумма.Видимость(1);       
			
			// При перемещении с розничного склада цены можно только выбирать из списка
			Если Склад.РозничныйСклад = 1 Тогда
			    Форма.Цена.Доступность(1); // на розн.складе всем разрашаем выбирать цену из списка
				Форма.Цена.Редактирование(0);
				Форма.Сумма.Доступность(0);
			Иначе
				Форма.Цена.Доступность(глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах"));
				Форма.Цена.Редактирование(1);
				Форма.Сумма.Доступность(глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах"));
			КонецЕсли;
		Иначе
			//Форма.Цена. Видимость(0);
			//Форма.Сумма.Видимость(0);
		КонецЕсли;
	КонецЕсли;       
	
КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()    
	
	Форма.ТекстФирмы			.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстФирмыПолучателя	.Заголовок(ФирмаПолучатель.Наименование);
	Форма.ТекстСклада			.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстСкладаПолучателя	.Заголовок(глСтрокаСклада		(СкладПолучатель));
	Форма.ТекстОплаты			.Заголовок(глСтрокаОплаты		(Контекст));

	Форма.РамкаВсего			.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
            
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	
	Если (СкладПолучатель.Выбран()=1) и (СкладПолучатель.РозничныйСклад = 1) Тогда
		Заголовок 	= Заголовок+" (в розницу)";
		
	ИначеЕсли (Склад.Выбран()=1) и (Склад.РозничныйСклад = 1) Тогда
		Заголовок 	= Заголовок+" (из розницы)";
		
	КонецЕсли;
	    
	Название = Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции // ЗаголовокФормы
                                    
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	
	Перем ОстатокНаСкладе, ОстатокПоФирме , Резерв , ТовСкидка; // для показа остатков
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	                                
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Пост. "+СокрЛП(Номенклатура.Производитель.Наименование);
	КонецЕсли;

	ПокажиОстатки();

	СкладДляВыбора = Склад;
	
	Возврат(ИнфоТекст);
КонецФункции //ИнформацияОНоменклатуре()


Процедура ПриЗакрытии()
	СкладДляВыбора = "";
КонецПроцедуры	
//******************************************************************************
// ПроверкаФирм()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Фирма, ФирмаПолучатель.
//
// Описание:
//  Перемещение денег нельзя делать между фирмами, имеющими разные юр. лица.
//  Данную ситуацию следует исключить.
//
Процедура ПроверкаФирм()
	
	Если (ФирмаПолучатель.Выбран() = 1)
	и    (Фирма.ЮрЛицо <> ФирмаПолучатель.ЮрЛицо)
	Тогда     
		Предупреждение("Нельзя перемещать ТМЦ между фирмами, 
		|имеющими различные юридические лица!", 60);
		ФирмаПолучатель = "";
	КонецЕсли;
	
КонецПроцедуры // ПроверкаФирм()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма;      
		
		ПроверкаФирм();
		Если  ПустоеЗначение(ФирмаПолучатель) = 1 Тогда
			ФирмаПолучатель = Фирма;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()
                                           
//******************************************************************************
// ПриИзмененииФирмыПолучателя()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  из реквизита диалога "ФирмаПолучатель".
//
// Описание:
//  Проверка выбранной фирмы - получателя.
//
Процедура ПриИзмененииФирмыПолучателя()
	
	ПроверкаФирм();
	
КонецПроцедуры // ПриИзмененииФирмыПолучателя()

//******************************************************************************
// ОбновлениеРозничныхЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит перезаполнение розничных цен в табличной части документа из регистра.
//  Если ТМЦ на розничном складе нет, или он есть по нескольким ценам то цена обнуляется
//  и выдается соответствующее предуупреждение.
//
Процедура ОбновлениеРозничныхЦен()
	
	Перем ТовЦена, СписокЦен, ВремЦена;
	
	Если Склад.РозничныйСклад = 1 Тогда
		
		Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилиЦены = 0;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			
			Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
				ТовЦена = "";
				глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				
				Если СписокЦен.РазмерСписка() = 1 Тогда
					ВремЦена = СписокЦен.ПолучитьЗначение(1);
				Иначе
					ВремЦена = 0;
				КонецЕсли;
				
				Если Цена <> ВремЦена Тогда
					Цена = ВремЦена;
					ИзменилиЦены = 1;
					глПересчетТаблЧасти(Контекст,"Цена");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзменилиЦены = 1 Тогда
			Предупреждение("Проверьте цены ТМЦ в документе!", 60);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбновлениеРозничныхЦен()     

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит все необходимые пересчеты при изменении склада.
//
Процедура ПриИзмененииСклада()
	
	//Если Склад.Магазин=1 Тогда
	//    Предупреждение("Этот тип склада не может учавствовать в данном документе!");
	//	Склад=ПолучитьПустоеЗначение(Склад);
	//	возврат;
	//КонецЕсли;

	Если СтарыйСклад <> Склад Тогда
	
		// При перемещении из розницы считаем, что цены со всеми налогами
		Если Склад.РозничныйСклад = 1 Тогда 
			УчитыватьНДС = 1;
			УчитыватьНП  = 1;
			СуммаВклНДС  = 1;
			СуммаВклНП   = 1;
			
			// Из розницы перемещаем по розничным ценам
			ТипЦен = ПолучитьПустоеЗначение("Справочник.ТипыЦен");
			Валюта = глРубли;
		КонецЕсли;
		
		Если Форма.ИспользоватьЗакладки() = 1 Тогда
			УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
		КонецЕсли;
		
		ОбновлениеРозничныхЦен();
		
		СтарыйСклад = Склад;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииСкладаПолучателя()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит все необходимые пересчеты при изменении склада.
//
Процедура ПриИзмененииСкладаПолучателя()
	
	//////Если СкладПолучатель.Магазин=1 Тогда
	//////    Предупреждение("Этот тип склада не может учавствовать в данном документе!");
	//////	СкладПолучатель=ПолучитьПустоеЗначение(СкладПолучатель);
	//////	возврат;
	//////КонецЕсли;
	// При перемещении в розницу считаем, что цены надо задавать со всеми налогами
	// и устанавливать их в соответствии с основным типом продажи      
	Если СкладПолучатель.Код = "00027" Тогда 
		УстановитьНовыйНомер(СкладПолучатель.ПрефиксНомеровДокументов);	
	Иначе
		Если СкладПолучатель.РозничныйСклад = 1 Тогда
			УчитыватьНДС = 1;
			УчитыватьНП  = 1;
			СуммаВклНДС  = 1;
			СуммаВклНП   = 1;
			Если ( ПустоеЗначение(ТипЦен) = 1) 
			И (Склад.РозничныйСклад = 0) Тогда
				ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
			КонецЕсли;                 
			
			УстановитьНовыйНомер("Пр"+СкладПолучатель.ПрефиксНомеровДокументов); 
			
		КонецЕсли;
		
		Если Форма.ИспользоватьЗакладки() = 1 Тогда
			УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
		КонецЕсли;                    
		
		УстановитьНовыйНомер("Пр"+СкладПолучатель.ПрефиксНомеровДокументов);    
	КонецЕсли;

КонецПроцедуры // ПриИзмененииСкладаПолучателя()
                                              
//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();
	
КонецПроцедуры	//ПоКнопкеЦены()
                                      
//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	
	Перем Основание;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		Если (Склад.РозничныйСклад = 1) И (ПустоеЗначение(ТипЦен) = 0) Тогда
		    ТипЦен = "";
		КонецЕсли;
		
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
			
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Если ((ДокОснование.Вид() = "ПоступлениеТМЦ") или (ДокОснование.Вид() = "ПоступлениеТМЦИмпорт"))
				и (КоличествоСтрок() <> 0) Тогда
				ТекстВопроса = "Заполнить партию по документу основанию?";
				Если Вопрос(ТекстВопроса, "Да+Нет", 60) = "Да" Тогда
					ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
					ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
					
					ВыбратьСтроки();
					Пока ПолучитьСтроку() = 1 Цикл
						Стр = 0;
						Если ТаблицаДокумента.НайтиЗначение(Номенклатура, Стр, "Номенклатура") = 1 Тогда
							ТекПартия = ТаблицаДокумента.ПолучитьЗначение(Стр,"Партия");
							Если ПустоеЗначение(ТекПартия) = 0 Тогда
								Партия = ТекПартия; 
								ТекКоличество = ТаблицаДокумента.ПолучитьЗначение(Стр,"Количество");
								Если ТекКоличество > Количество Тогда
									ТаблицаДокумента.УстановитьЗначение(Стр,"Количество", ТекКоличество - Количество); 
								Иначе
									ТаблицаДокумента.УдалитьСтроку(Стр);
								КонецЕсли;	
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;
					
					Возврат;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		УдалитьСтроки();
		Результат = ЗаполнениеПоДокументуОснованию();
		Если ПустоеЗначение(Результат) = 0 Тогда
			Предупреждение(Результат, 60);
		КонецЕсли;
		
		СтарыйСклад	= Склад;
		
	КонецЕсли;

КонецПроцедуры //ПоКнопкеОснование()


//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить". 
// 	Производит выбор способа заполнения и непосредственно заполнение документа
//
Процедура ПоКнопкеЗаполнить()
	
	//Если КоличествоСтрок() <> 0 Тогда
	//	Если Вопрос("Заполнить по документу - основанию?" + РазделительСтрок + "(перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
	//		Возврат;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//УдалитьСтроки();
	//Результат = ЗаполнениеПоДокументуОснованию();
	//Если ПустоеЗначение(Результат) = 0 Тогда
	//	Предупреждение(Результат, 60);
	//КонецЕсли;
	ТЗ=СоздатьОбъект("ТаблицаЗначений");
	рег=СоздатьОбъект("Регистр.ОстаткиТМЦ");
	рег.УстановитьФильтр(Фирма,,Склад);
	рег.ВыгрузитьИтоги(ТЗ,1,1);
	ТЗ.ВыбратьСтроку();
	ТЗ.ВыбратьСтроки();
	УдалитьСтроки();
	Пока ТЗ.ПолучитьСтроку()=1 Цикл
	    НоваяСтрока();
		Номенклатура	= ТЗ.Номенклатура;
		Количество		= ТЗ.Количество;
		Единица			= Номенклатура.БазоваяЕдиница.ТекущийЭлемент();
		Коэффициент		= 1;
	КонецЦикла;
	
	
КонецПроцедуры // ПоКнопкеЗаполнить()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(0,               "ЕстьВидТМЦ");
	
	Если (Склад.РозничныйСклад = 1) Тогда
		Параметры.ДобавитьЗначение("Розница",   "ЦенаВподборе");
		Параметры.ДобавитьЗначение(Валюта,      "Валюта");
    	Параметры.ДобавитьЗначение(Курс,        "Курс");

	ИначеЕсли (СкладПолучатель.РозничныйСклад = 1) Тогда
		Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
		Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
		Параметры.ДобавитьЗначение(Валюта,          "Валюта");
    	Параметры.ДобавитьЗначение(Курс,            "Курс");
    Иначе
		Параметры.ДобавитьЗначение("Нет",       "ЦенаВподборе");
	КонецЕсли;
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",      "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок,     "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	ЗаполнитьЦены();
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию()
	Перем ЦенаЦены, ЕдиницаЦены, ВалютаЦены;
	
	Если ДокОснование.Выбран()=0 Тогда
		Возврат "Документ - основание не выбран!";
	КонецЕсли;
	
	ВидОсн = ДокОснование.Вид();
	
	Если (ВидОсн <> "ПоступлениеТМЦ")
	   и (ВидОсн <> "ВводОстатковТМЦ") 
	   и (ВидОсн <> "ЗаявкаПокупателя")
	   и (ВидОсн <> "Реализация")
	   и (ВидОсн <> "ПоступлениеТМЦИмпорт") Тогда
		Возврат "Неверный вид документа - основания!";
	КонецЕсли; // вид ДокОснования
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
	
	// очищаем наш документ
	УдалитьСтроки();  
	                    
    // Для передачи в розницу надо заполнить цены по типу цен,
	// а в случае ввода на основании документа "Ввод остатков ТМЦ на складе (розница)"
	// надо заполнить цены из документа основания
	ЕстьЦена = 0;
	ЕстьРозничнаяЦена = 0;
	Если (Склад.РозничныйСклад = 0) И (СкладПолучатель.РозничныйСклад = 1) Тогда            
		ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		Если ТипЦен.Выбран() = 1 Тогда
			ЕстьЦена     = 1;
		КонецЕсли;
	ИначеЕсли ДокОснование.Склад.РозничныйСклад = 1 Тогда // т.е. документ основание - "Ввод остатков ТМЦ на складе (розница)"	
		ЕстьРозничнаяЦена = 1;
	КонецЕсли;
	
	ТаблицаДокумента.ВыбратьСтроки();
	Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
		
		НоваяСтрока();
		Номенклатура= ТаблицаДокумента.Номенклатура;
		Количество 	= ТаблицаДокумента.Количество; 
		Единица 	= ТаблицаДокумента.Единица;      
		Коэффициент	= ТаблицаДокумента.Коэффициент;   
		
		Если (ВидОсн = "ПоступлениеТМЦ") Тогда
			Партия = ТаблицаДокумента.Партия;	
		КонецЕсли;
		
		Если ЕстьЦена = 1 Тогда
			
			Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ЦенаЦены, ЕдиницаЦены, ВалютаЦены) = 0 Тогда
			    Цена	= 0;
			Иначе
				глПересчитатьЦенуВДокументе(Контекст,
				                            УчитыватьНП, УчитыватьНДС, 
											ЦенаЦены, ВалютаЦены, 
				                            ТипЦен.ЦенаВклНП, ТипЦен.ЦенаВклНДС);
				глПересчетТаблЧасти(Контекст, "Цена");
			КонецЕсли;
		ИначеЕсли ЕстьРозничнаяЦена = 1 Тогда
			
			Цена = ТаблицаДокумента.ПродЦена;	
			глПересчетТаблЧасти(Контекст, "Цена");
		КонецЕсли;
		
	КонецЦикла; // по строкам основания
		
	Возврат "";
	
КонецФункции // ЗаполнениеПоДокументуОснованию()

//******************************************************************************
// ВывестиСтроку(Таб,)
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ВывестиСтроку(Таб, ТовНаим, Ед, Коэфф, КолвоПеч, ЦенаПеч, СуммаПеч)
	
	// получим количество строк, которое еще можно поместить на странице
	ОстатокСтрок = СтрокНаСТранице - ВыведеноНаСтраницу;
	
	// если 1-я страница, то уменьшим количество строк на высоту шапки
	Если НомерСтраницы = 1 Тогда
		ОстатокСтрок = ОстатокСтрок - ВысотаШапки;
	КонецЕсли;
	
	Если ВыведеноВсего = ВсегоСтрок -1  Тогда
		// выводим последнюю строку
		ОстатокСтрок = ОстатокСтрок - ВысотаПодвала;
	КонецЕсли;
	
	Если Не(ОстатокСтрок > 0) Тогда
		// выводим итоги по странице
		Таб.ВывестиСекцию("Итог_по_странице");
		
		// переход на новую страницу
		Таб.НоваяСтраница();
		Таб.ВывестиСекцию("Заголовок");
		ВыведеноНаСтраницу = 0;	
		// обнуляем итоги по старанице
		ИтогоКоличество = 0; ИтогоСумма = 0;
		// увеличиваем номер страницы
		НомерСтраницы = НомерСтраницы + 1;
	КонецЕсли;
	
    Таб.ВывестиСекцию("Строка");
	
	ВыведеноНаСтраницу = ВыведеноНаСтраницу + 1;
	ВыведеноВсего      = ВыведеноВсего      + 1;
	
КонецПроцедуры // ВывестиСтроку(Таб,)

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ИсхТаблица;
	
	
	Перем Себестоимость;
	
	//Если Проведен() = 0 Тогда
	//    Предупреждение("Документ может быть распечатан только после проведения", 60);
	//	Возврат;
	//КонецЕсли;
	
	ВсегоСтрок = КоличествоСтрок();
	ВыведеноНаСтраницу = 0; ВыведеноВсего = 0;
	
	НомерСтраницы = 1;
	// установка размеров секций
	ВысотаШапки = 14;
	ВысотаПодвала = 7;
	СтрокНаСТранице = 32;
	
	// инициализация
	ВсегоКоличество	= 0; ВсегоСумма = 0;
	ИтогоКоличество = 0; ИтогоСумма = 0;
	
	ИсхТаблица = СоздатьОбъект("Таблица");
	ИсхТаблица.ВывестиСекцию("Шапка");
	ИсхТаблица.ВывестиСекцию("Заголовок");
	
	ТабДвиж = СоздатьОбъект("ТаблицаЗначений");
	ТабДвиж.НоваяКолонка("Номенклатура");
	ТабДвиж.НоваяКолонка("Количество");
	ТабДвиж.НоваяКолонка("Сумма");
	
	// сформируем таблицу с учетными цена из движений документа по регистру ПартииНаличие.
	РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");
	
	РегПартии.ВыбратьДвиженияДокумента(ТекущийДокумент());
	Пока РегПартии.ПолучитьДвижение() = 1 Цикл
	    Если РегПартии.Расход = 1 Тогда
			ТабДвиж.НоваяСтрока();
			ТабДвиж.Номенклатура = РегПартии.Номенклатура;
			ТабДвиж.Количество   = РегПартии.Количество;
			ТабДвиж.Сумма        = РегПартии.СуммаБезНДС;
		КонецЕсли;
	КонецЦикла;
	
	// выводим строки документа
	ВыбратьСтроки();
		
	Пока ПолучитьСтроку() = 1 Цикл
		
		НомСтр   = "";
		КолвоДок = Количество;
		Поз      = 0;
		
		Пока (КолвоДок > 0) // есть что погашать
		   и (ТабДвиж.НайтиЗначение(Номенклатура, Поз, "Номенклатура") <> 0) // есть чем погашать
		Цикл
			КолвоРег = ТабДвиж.ПолучитьЗначение(Поз, "Количество");
			СуммаРег = ТабДвиж.ПолучитьЗначение(Поз, "Сумма");
			
			// преобразуем количество из регистра (в базовой единице)
			// в единицу из строки документа
			Если Коэффициент <> 0 Тогда
			    КолвоРег = КолвоРег / Коэффициент;
			КонецЕсли;
			
			КолвоПеч = Мин(КолвоДок, КолвоРег);
			
			// пытаемся уменьшить потерю точности,
			// поэтому сначала считаем сумму, а только потом цену
			СуммаПеч = СуммаРег * КолвоПеч / КолвоРег;
		    ЦенаПеч  = ?(КолвоПеч = 0, СуммаПеч, СуммаПеч / КолвоПеч);
			
			
			ОстРег = КолвоРег - КолвоПеч;
			Если ОстРег <= 0 Тогда
				// количество из движений регистра полностью погасилось количеством из накладной
				// удалим строку таблицы значений
				ТабДвиж.УдалитьСтроку(Поз);
			Иначе
				// количество движений регистра оказалось больше, чем количество документа
				ТабДвиж.УстановитьЗначение(Поз, "Количество", ОстРег   * Коэффициент);
				ТабДвиж.УстановитьЗначение(Поз, "Сумма"     , СуммаРег - СуммаПеч);
			КонецЕсли;
			
			ВывестиСтроку(ИсхТаблица, 
			              СокрЛП(Номенклатура.ПолнНаименование),
						  Единица.ОКЕИ,
						  Коэффициент,
						  КолвоПеч,
						  ЦенаПеч,
						  СуммаПеч
						  );
			
			// уменшаем непогашенное количество из строки документа
			КолвоДок = КолвоДок - КолвоПеч;
			
			// вычисляем итоги
			ВсегоСумма      = ВсегоСумма      + СуммаПеч;
			ИтогоКоличество = ИтогоКоличество + КолвоПеч;
			ИтогоСумма      = ИтогоСумма      + СуммаПеч;
			
			Поз = 0;
		КонецЦикла;
		
		Если КолвоДок > 0 Тогда
			// по регистру прошло не все количество, которое было в докмуенте
			
			КолвоПеч = КолвоДок;
			СуммаПеч = 0;
		    ЦенаПеч  = 0;
			
			ВывестиСтроку(ИсхТаблица, 
			              СокрЛП(Номенклатура.ПолнНаименование),
						  Единица.ОКЕИ,
						  Коэффициент,
						  КолвоПеч,
						  ЦенаПеч,
						  СуммаПеч
						  );

			
			ВсегоКоличество	= ВсегоКоличество + КолвоПеч;
		КонецЕсли;
				
	КонецЦикла;
	
	ИсхТаблица.ВывестиСекцию("Итог_по_странице");
	ИсхТаблица.ВывестиСекцию("Подвал");
	
	Если СразуНаПринтер = 0 Тогда
		ИсхТаблица.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТаблица.Защита(1);
		Иначе
			ИсхТаблица.Защита(0);
		КонецЕсли;
		ИсхТаблица.ТолькоПросмотр(1);

		ИсхТаблица.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТаблица.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТаблица.КоличествоЭкземпляров(КолЭкз);
		ИсхТаблица.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // Печать()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов


	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПроверкаОстатков()
//
// Параметры: 
//  Режим 	- параметр, показывающий, какой кнопкой вызвана процедура: "ОК" или "Провести"
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Проверяет, есть ли на складе остатки номенклатуры с ценой, отличной от цены 
//  поступления и предлагает переоценить их.
//
Процедура ПроверкаОстатков(Режим)       
	
	Если (Константа.ПереоцениватьОстатки = 0) или (СкладПолучатель.РозничныйСклад = 0) Тогда
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Записать Провести? Закрыть";  
		Иначе			
			СтрокаДействийФормы = "#Записать Провести";  
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	СЗНоменклатуры = СоздатьОбъект("СписокЗначений");   
	ВыгрузитьТабличнуюЧасть(СЗНоменклатуры, "Номенклатура");
	
	Запрос = СоздатьОбъект("Запрос");
	
	ДатаЗапроса = Мин(ДатаДок, ПолучитьДатуТА());
	
	ТекстЗапроса = "
	|Период с ДатаЗапроса по ДатаЗапроса;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура; 
	|РегФирма		= Регистр.ОстаткиТМЦ.Фирма;
	|РегСклад		= Регистр.ОстаткиТМЦ.Склад;
	|ЦенаПрод		= Регистр.ОстаткиТМЦ.ЦенаПрод;
	|Количество		= Регистр.ОстаткиТМЦ.Количество;
	|Условие (Номенклатура в СЗНоменклатуры);
	|Условие (РегСклад = СкладПолучатель);
	|Условие (РегФирма = ФирмаПолучатель);
	|Функция ОстКоличество = КонОст(Количество);
	|Группировка Номенклатура;
	|Группировка ЦенаПрод;
	|";      
	
	ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
	ВыгрузитьТабличнуюЧасть(ТаблицаДокумента, "Номенклатура, Цена, Коэффициент");
	
	Запрос.Выполнить(ТекстЗапроса);
	
	ТЗПереоценка = СоздатьОбъект("ТаблицаЗначений");
	ТЗПереоценка.НоваяКолонка("Номенклатура", "Справочник.Номенклатура");
	ТЗПереоценка.НоваяКолонка("Количество", "Число",,,,10);
	ТЗПереоценка.НоваяКолонка("ЦенаСтарая", "Число",,,"Цена (стар.)",10);
	ТЗПереоценка.НоваяКолонка("ЦенаНовая", "Число",,,"Цена (нов.)",10);
	
	        
	// В случае дублей строк будет предложено переоцениваем по первой цене
	Пока Запрос.Группировка("Номенклатура") = 1 Цикл
		Пока Запрос.Группировка("ЦенаПрод") = 1 Цикл 

			// Отрицательные количества переоценивать не будем
			Если Запрос.ОстКоличество <= 0 Тогда
				Продолжить;
			КонецЕсли;

			НомСтроки = 0;
			ТаблицаДокумента.НайтиЗначение(Запрос.Номенклатура, НомСтроки, "Номенклатура");
			ТаблицаДокумента.ПолучитьСтрокуПоНомеру(НомСтроки);
			НоваяЦена = Окр(ТаблицаДокумента.Цена/ТаблицаДокумента.Коэффициент, 2);
			Если НоваяЦена <> Запрос.ЦенаПрод Тогда
				ТЗПереоценка.НоваяСтрока();
				ТЗПереоценка.Номенклатура	= Запрос.Номенклатура;
				ТЗПереоценка.Количество		= Запрос.ОстКоличество;
				ТЗПереоценка.ЦенаСтарая		= Запрос.ЦенаПрод;
				ТЗПереоценка.ЦенаНовая 		= НоваяЦена;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;                                                               
	
	СЗПарам = СоздатьОбъект("СписокЗначений"); 
	СЗПарам.Установить("Заголовок", "Переоценка остатков");
	СЗПарам.Установить("ТекстВопроса", "На складе обнаружены остатки ТМЦ по розничной цене, отличной от цены поступающего товара. Переоценить?");
	СЗПарам.Установить("ТаблЗначений", ТЗПереоценка);  
			
	Если ТЗПереоценка.КоличествоСтрок() = 0 Тогда
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Записать Провести? Закрыть";
		Иначе
			СтрокаДействийФормы = "#Записать Провести";  
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
    Записать();
	Провести();
	
	ОткрытьФормуМодально("Обработка.ВопросСТаблицейЗначений", СЗПарам, 1); 
	
	Если СЗПарам = "Да" Тогда         

		Док = СоздатьОбъект("Документ.ПереоценкаРозница");
		Док.Новый();
		Док.Фирма		= ФирмаПолучатель;
		Док.Склад		= СкладПолучатель;
		Док.Проект		= Проект;    
		Док.Валюта		= глРубли;
		Док.Курс		= 1;
		Док.Комментарий	= "Переоценка в связи с поступлением нового товара";
		
		Док.ЗагрузитьТабличнуюЧасть(ТЗПереоценка);
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Док.Единица		= Док.Номенклатура.БазоваяЕдиница;
			Док.Коэффициент	= 1;
		КонецЦикла;
		
		Док.Записать();
		Док.Провести();

		ОткрытьФорму(Док.ТекущийДокумент());		
		
		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Закрыть";  
		КонецЕсли;

	ИначеЕсли СЗПарам = "Нет" Тогда         

		Если Режим = "ОК" Тогда
			СтрокаДействийФормы = "#Закрыть";  
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ПроверкаОстатков()
              





//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!",60);
		    Номенклатура = "";
		КонецЕсли;	
	КонецЕсли;
	
	
	
	
	Если Склад.РозничныйСклад = 1 Тогда 
		//если перемещаем с розничного склада, то списывать надо по розничным ценам из регистра
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка(),СписокПараметров);	
	Иначе
		глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатуры() 

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеРедактированияСтроки()
	     
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
		        
	ИначеЕсли Форма.ТекущаяКолонка() = "Цена" Тогда 
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		И    (ПустоеЗначение(Склад.РозничныйСклад) = 1)			
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	
	Если ДокументОснование.Вид() = "СолянкаПоПоставкам" Тогда
		Склад = ДокументОснование.Склад;
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		ФирмаПолучатель = Фирма;
		СкладПолучатель = Склад;
		УстановитьНовыйНомер("Пр"+СкладПолучатель.ПрефиксНомеровДокументов);
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();          
			Номенклатура = ДокументОснование.Номенклатура;
			Количество = ДокументОснование.Количество;
			Единица = ДокументОснование.Единица;
			Коэффициент = ДокументОснование.Коэффициент;
			Цена = ДокументОснование.Цена;
			Сумма = ДокументОснование.Сумма;
		КонецЦикла;
		возврат;
	КонецЕсли;
	
	Если ДокументОснование.Вид()="ИмпортЗаявокИзРозницы2" тогда
		Склад = Константа.ОсновнойСклад;
		УстановитьНовыйНомер("Пр"+Константа.ОсновнойСклад.ПрефиксНомеровДокументов); 
		глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
		ФирмаПолучатель = Фирма;
		СкладПолучатель = ДокументОснование.Склад;
		ДокументОснование.ВыбратьСтроки();
		Пока ДокументОснование.ПолучитьСтроку() = 1 Цикл
			если ДокументОснование.КолСклад>0 тогда
				НоваяСтрока();
				Номенклатура = ДокументОснование.Номенклатура;
				Количество = ДокументОснование.КолСклад;
				Единица = ДокументОснование.Единица;
				Коэффициент = ДокументОснование.Коэффициент;
			конецЕсли;
		КонецЦикла;
			комментарий=ДокументОснование.комментарий;
			возврат;
	КонецЕсли;
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		""" нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Если ДокументОснование.Вид() = "ЗаявкаПокупателя" Тогда
		Если ДокументОснование.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
			Склад = ДокументОснование.Склад;
			//глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
			ФирмаПолучатель = Фирма;
			Если ДокументОснование.ДокОснование.Выбран() = 1 Тогда
				СкладПолучатель = ДокументОснование.ДокОснование.Склад;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ФирмаПолучатель = Фирма;
		СкладПолучатель = Склад;
	КонецЕсли;
	
	// Настройки заполнения флагов налогов зависят от складов
	ПриИзмененииСклада();
	ПриИзмененииСкладаПолучателя();
	
	Результат = ЗаполнениеПоДокументуОснованию();
	Если ПустоеЗначение(Результат) = 0 Тогда
		Сообщить(Результат);
		СтатусВозврата(0);
	КонецЕсли;
	
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового(Скопирован)
	                  
	Если ТипЗначенияСтр(Форма.Параметр) <> "ГрупповойКонтекст" Тогда
		глЗаполнитьШапку(Контекст, Скопирован);
		
		Если Скопирован = 1 Тогда	//копирование документа 
			Возврат;
		КонецЕсли;                              
		
		ФирмаПолучатель = Фирма;
		СкладПолучатель = Склад;
	Иначе
		глЗаполнитьШапку(Контекст, Скопирован);
		ФирмаПолучатель = Фирма;
		Склад = Форма.Параметр.Склад;
		СкладПолучатель = Склад;
		
		Форма.Параметр.ТаблицаДанных.ВыбратьСтроки();
		Пока Форма.Параметр.ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
			Попытка
				ТекКоличество = Форма.Параметр.ТаблицаДанных.Заказ;   
			Исключение
				ТекКоличество = 0;
			КонецПопытки; 
			Если ПустоеЗначение(ТекКоличество) <> 1 Тогда
				НоваяСтрока();
				Номенклатура 	= Форма.Параметр.ТаблицаДанных.Номенклатура;
				Количество 		= ТекКоличество;
				
				глПересчетТаблЧасти(Контекст,"Номенклатура");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Настройки заполнения флагов налогов зависят от складов
	ПриИзмененииСклада();
	ПриИзмененииСкладаПолучателя();                                              
	
	УстановитьНовыйНомер("Пр"+Константа.ОсновнойСклад.ПрефиксНомеровДокументов); 
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии() 
	                     
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	СтараяФирма				= Фирма;
	СтарыйСклад				= Склад;
	
	НачальнаяДатаДокумента	= ДатаДок;

	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
//
	глПроверкаРазрешенияРедактирования(Контекст);
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0); 
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда   
		глАктивизироватьРеквизит(Контекст);

		Форма.Закладки.ТекущаяСтрока(1);
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
	КонецЕсли;
	УправлениеВидимостью(Форма.Закладки.ТекущаяСтрока());
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  

	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,8);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,4);
	ТЗ_Остаток.НоваяКолонка("Резерв","число",15,2,,4);
    НС=НомерСтроки;
	
	ОбновитьНадписи();

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Цена" Тогда
		Если Склад.РозничныйСклад = 1 Тогда
			ФлагСтандОбр = 0;
			// регистры рассчитываем, только если хочется редактировать цены вручную
			Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
				Возврат;
			КонецЕсли;
			ТовЦена = "";
			глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
			СписокЦен = ЗначениеИзСтроки(ТовЦена);
			СписокЦен.ВыбратьЗначение(Цена, , ,60,2);
			глПересчетТаблЧасти(Контекст,"Цена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	                          
	УправлениеВидимостью(НомерЗакладки);

	Если НомерЗакладки=2 Тогда
		ОбновитьНадписи();
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
	ПриЗаписиДокумента(Контекст);
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	Если (Склад.          РозничныйСклад = 1)
	или  (СкладПолучатель.РозничныйСклад = 1)
	Тогда
		ЕстьНДС  = 1;
		ЕстьНП   = 1;
	Иначе
		ЕстьНДС  = 0;
		ЕстьНП   = 0;
	КонецЕсли;
	
	// возможно есть ставки налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, ЕстьНДС, ЕстьНП, 0);
	
    ЗаполнитьЦены();
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество, ВремЦена;
	Перем СтрокаВозврЦена;
	Перем ЦенаЗнач, ЦенаЕд;

	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0, "ЕстьВидТМЦ");
				
				Если (Склад.РозничныйСклад = 0) ИЛИ (ВремТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга) Тогда
					// Цены берем из справочника
					ТаблицаПодбора.Цена	= глПолучитьЦену(ВремТовар, Константа.РозничныйТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
					
					ПараметрыПодбора.ДобавитьЗначение("ИзСправочника"          , "ЦенаВподборе");
					ПараметрыПодбора.ДобавитьЗначение(Константа.РозничныйТипЦен, "ТипЦен");      
				Иначе
					// сипсывае мс розничного склада по розничным ценам
					ТовОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
			    	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
					ТовОстатки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
					ТовОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
					
					глПолучитьРозничныйОстатокЦену(ВремТовар, ВремЕдиница, ТовОстатки, , СтрокаВозврЦена);
					
					СписВозврЦен = ЗначениеИзстроки(СтрокаВозврЦена);
					Если СписВозврЦен.РазмерСписка() = 1 Тогда
						ТаблицаПодбора.Цена  = глПересчет(СписВозврЦен.ПолучитьЗначение(1), глРубли, ДатаДок, Валюта, Курс);
						
					ИначеЕсли СписВозврЦен.РазмерСписка() > 1 Тогда
						
						Если СписВозврЦен.ВыбратьЗначение(ВремЦена,"Выберите цену для товара " + ВремТовар.Наименование, , 60) = 1 Тогда
							ТаблицаПодбора.Цена  = глПересчет(ВремЦена, глРубли, ДатаДок, Валюта, Курс);
						Иначе	
							ТаблицаПодбора.Цена  = 0;
						КонецЕсли;
					Иначе
						ТаблицаПодбора.Цена  = 0;
					КонецЕсли;
					
					ПараметрыПодбора.ДобавитьЗначение("Розница", "ЦенаВподборе");
				КонецЕсли;
					
			    
				Если (Склад.          РозничныйСклад = 1)
				или  (СкладПолучатель.РозничныйСклад = 1)
				Тогда
					ЕстьНДС  = 1;
					ЕстьНП   = 1;
				Иначе
					ЕстьНДС  = 0;
					ЕстьНП   = 0;
					ПараметрыПодбора.ДобавитьЗначение("Нет", "ЦенаВподборе");
				КонецЕсли;
				
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
				
				// возможно есть ставки налогов, нет скидки
				глОбработкаПодбора(Контекст, ПараметрыПодбора, ЕстьНДС, ЕстьНП, 0);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
		
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

//Обработка складов
Функция ПокажиОстатки()
	Перем стр;

	Если НС=НомерСтроки Тогда
	    возврат 0;
	КонецЕсли;
	Если НазваниеНабораПрав()="Сервис" Тогда
		возврат 0;
	КонецЕсли;
        
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		Рег1.УстановитьФильтр(,Номенклатура,Склад_темп);
		Рег1.ВыгрузитьИтоги(ТЗ,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
		
		рег2.УстановитьФильтр(Номенклатура,Склад_темп);
		//	рег2.УстановитьЗначениеФильтра("Номенклатура",спТоваров,2);
		рег2.ВыгрузитьИтоги(ТЗ2,1,1);
		
		ТЗ2.Свернуть("Номенклатура","Количество");
		х					= ПолучитьПустоеЗначение(х);
		у					= 1;

		а=0;
		
		Если ТЗ2.НайтиЗначение(Номенклатура,х,у)=1 Тогда	//Сначала общий резерв
			а=1;
			ТЗ_Остаток.НоваяСтрока();
			ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
			ТЗ_Остаток.Резерв	= ТЗ2.ПолучитьЗначение(х,"Количество");
			х					= ПолучитьПустоеЗначение(х);
		КонецЕсли;
		//Теперь из остатков ТМЦ
		х			= ПолучитьПустоеЗначение(х);
		у			= 2;
		Если ТЗ.НайтиЗначение(Номенклатура,х,у)=1 Тогда
			Если а=0 Тогда
	    		ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
			КонецЕсли;
			ТЗ_Остаток.Остаток	= ТЗ.ПолучитьЗначение(х,"Количество");
		КонецЕсли;
	КонецЦикла;
	НС=НомерСтроки;
	стрк="";
	возврат стрк;
КонецФункции
Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
	    возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= Номенклатура;
	ТекД= ДокОснование;
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
// формируем таблицу печатных форм
НомерТекущейФормы	= 0;

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
// добавим информацию о встроенной форме
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ТОРГ-13";
ТаблицаПечФорм.Кнопка       = "ТОРГ-13";

// Для выбора цен
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);

ТЗ			= СоздатьОбъект("ТаблицаЗначений");
ТЗ2			= СоздатьОбъект("ТаблицаЗначений");
Рег1		= СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		= СоздатьОбъект("Регистр.РезервыТМЦ2");
Склад_темп	= СоздатьОбъект("Справочник.Склады");
