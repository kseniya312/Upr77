////////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МОДУЛЬНЫХ ПЕРЕМЕННЫХ

Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем ВидСчетаФактуры; // вид документа, являющегося счетом-фактурой
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем СтараяДата, СтараяФирма;

// для контроля изменений при записи 
Перем НачВалюта, НачКурс;

Перем СпрПартии; // для обработки партий документа

Перем Парам;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал)
	Возврат ?(ПустоеЗначение(Вал)=0,Вал.Наименование,"<нет валюты>");
КонецФункции                                                                    
                              
//******************************************************************************
// УправлениеВидимостью()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//  Делает видимыми или невидимыми колонки НДС в зависимости от флага 
//  "УчитыватьНДС"
//
Процедура УправлениеВидимостью()
	                               
	Если Форма.Закладки.ТекущаяСтрока() = 2 Тогда
		Форма.СуммаНП	.Видимость(УчитыватьНП);
		Форма.СтавкаНП	.Видимость(УчитыватьНП);
		
		Форма.СуммаНДС	.Видимость(УчитыватьНДС);
		Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
		
		Если ((СуммаВклНП = 1) или (УчитыватьНП=0)) и ((СуммаВклНДС = 1) или (УчитыватьНДС=0)) Тогда
			Форма.Всего.Видимость(0);
		Иначе
			Форма.Всего.Видимость(1);
		КонецЕсли;    
		
		Форма.СуммаНДС.Заголовок(?(СуммаВклНДС=1,"в т.ч. НДС","Сумма НДС"));
		Форма.СуммаНП.Заголовок(?(СуммаВклНП=1,"в т.ч. НП","Сумма НП"));
	КонецЕсли;    

КонецПроцедуры // УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
//   Обновляет текст информационных надписей в форме документа
//
Процедура ОбновитьНадписи()     
	
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстФизЛица	.Заголовок(ФизЛицо.Наименование);
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст));
	
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()

//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	Перем Заголовок, Название;
                      
	Заголовок = глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок+" №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ".Проведен";
		Иначе
			Заголовок = Заголовок + ".Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ".Новый";
	КонецЕсли;
	Форма.Заголовок(Заголовок);               
	Возврат Название;
	
КонецФункции //ЗаголовокФормы                                                   
                                
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()       
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()
                                                   
//******************************************************************************
// СоздатьПартию(ПартияИсточник = 0) 
//
// Параметры: 
//  ПартияИсточник - элемент справочника партий, необязательный параметр,
//                   если задан, то ГТД, Страна и свойство копируются из него.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Если для текущего ТМЦ в справочнике Номенклатура задана Страна и ГТД по умолчанию, то 
//  автоматически создается и записывается соответствующий элемент справочника партий,
//  при копировании строки параметры партии наследуются.
//
Процедура СоздатьПартию(ПартияИсточник = 0)
	
	Если ПустоеЗначение(Номенклатура) = 1 Тогда
	    Возврат;
	КонецЕсли;  
	Если ПустоеЗначение(Партия) = 0 Тогда
		// если партия уже записана - не трогаем ее!
	    Возврат;
	КонецЕсли;  
	
	Если ПустоеЗначение(ПартияИсточник) = 0 Тогда
		Если (ПартияИсточник.ГТД.Выбран() = 1) 
		или  (ПартияИсточник.СтранаПроисхождения.Выбран() = 1)
		или  (ПартияИсточник.Свойство.Выбран() = 1) 
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = ПартияИсточник.ГТД;
			СпрПартии.СтранаПроисхождения = ПартияИсточник.СтранаПроисхождения;
			СпрПартии.Свойство            = ПартияИсточник.Свойство;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	Иначе    
		Если (Номенклатура.НомерГТД.Выбран() = 1) 
		или  (Номенклатура.СтранаПроисхождения.Выбран() = 1)
		Тогда
			СпрПартии.ИспользоватьВладельца(Номенклатура);
			СпрПартии.Новый();
			СпрПартии.ГТД                 = Номенклатура.НомерГТД;
			СпрПартии.СтранаПроисхождения = Номенклатура.СтранаПроисхождения;
			Попытка
				СпрПартии.Записать();
			Исключение   
				Сообщить(ОписаниеОшибки(),"I");
				Возврат;
			КонецПопытки;
			Партия = СпрПартии.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьПартию()

//******************************************************************************
// УдалитьПартию()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие выбранную партию в текущей строке документа.
//
Процедура УдалитьПартию()

	Если Партия.Выбран() = 1 Тогда
		Если СпрПартии.НайтиЭлемент(Партия) = 1 Тогда
			СпрПартии.Удалить(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьПартию()

//******************************************************************************
// УдалитьВсеПартии()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Помечает на удалениие все выбранные партии во всех строках документа.
//
Процедура УдалитьВсеПартии()
	
    ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		УдалитьПартию();
	КонецЦикла;                     
	
КонецПроцедуры // УдалитьВсеПартии()

//******************************************************************************
// ЗаполнитьГТД()
//
// Параметры: 
//  Нет
//
// Описание:
//  Если в справочнике Номенклатура для подобранной позиции указан номер ГТД
//  и (или) страна происхождения, то переносим эти значения в документ, создавая партии.
//
Процедура ЗаполнитьГТД()
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
	    СоздатьПартию(СпрПартии);
	КонецЦикла;
КонецПроцедуры // ЗаполнитьГТД()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    
	    СтараяДата = ДатаДок;
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
					ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	    
	Если (Склад.Выбран()=1) 
	и    (Склад.РозничныйСклад = 1) 
	Тогда
	    Предупреждение("Документ """+ глНазваниеДокументаВЖурнале(Контекст)+""" можно
		|оформлять только на оптовый склад!",60);
		Склад = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСклада()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры (Не даем выбрать услугу)
//
Процедура ПриИзмененииНоменклатуры()
	
	Если Номенклатура.Выбран()=1 Тогда
		Если Номенклатура.ВидНоменклатуры=Перечисление.ВидыНоменклатуры.Услуга Тогда
			Предупреждение("В этом документе услугу выбирать нельзя!
			|Для ввода полученных услуг воспользуйтесь документом ""Строка аванс. отчета (прочее)"".",60);
		    Номенклатура = "";
		КонецЕсли;
	КонецЕсли;

	СтараяПартия = Партия;
	Если ПустоеЗначение(Партия) = 0 Тогда
		Если Партия.Владелец <>  Номенклатура Тогда
			УдалитьПартию(); // реквизит Партия будет очищен в глПересчетТаблЧасти
		КонецЕсли;
	КонецЕсли;
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка());	
	
    СоздатьПартию(СтараяПартия);

КонецПроцедуры // ПриИзмененииНоменклатуры()        

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	ОбновитьНадписи();    
	Форма.Обновить(0);

КонецПроцедуры	//ПоКнопкеЦены()

//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  нет.
// Возвращаемое значение:
//  нет.
// Описание:

Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма,           "Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение(1,               "ЕстьВидТМЦ");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");
	Параметры.ДобавитьЗначение(Валюта,          "Валюта");
	Параметры.ДобавитьЗначение(Курс,            "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()
                                                
//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)
	// инициализация таблицы
	Таб = СоздатьОбъект("Таблица");  
	
	// формирование шапки
	СекцияШапка = Таб.ПолучитьСекцию("Шапка");
	СекцияШапка.Номер                    = глНомерНаПечать(Контекст, 1);
	СекцияШапка.ДатаСоставления          = Формат(ДатаДок, "Д (0)ДДММГГГГ");
	СекцияШапка.Организация              = "Организация: " + СокрЛП(Фирма.ЮрЛицо.ПолнНаименование);
	СекцияШапка.КодОКПО                  = СокрЛП(Фирма.ЮрЛицо.ОКПО);
	СекцияШапка.СтруктурноеПодразделение = "Структурное подразделение: ";
	СекцияШапка.МестоХранения            = Склад;
	
	//СекцияШапка.КорСчет                  = "60.1";
	Таб.ВывестиСекцию(СекцияШапка);

	// формирование строк
	СекцияСтрока = Таб.ПолучитьСекцию("Строка");
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл

		СекцияСтрока.Материал            = СокрЛП(Номенклатура.ПолнНаименование);
		СекцияСтрока.НоменклатурныйНомер = Номенклатура.Код;
		СекцияСтрока.КодЕдиницыИзмерения = Единица.ОКЕИ.Код;
		СекцияСтрока.ЕдиницаИзмерения    = Единица.ОКЕИ.Наименование;
		СекцияСтрока.Принято             = СокрЛ(Формат(Количество, "Ч 15.3."));
		
		// пеерсчитаем суммы в основную валюту
		СуммаПеч    = глПересчет(Сумма   , Валюта, Курс, глРубли, ДатаДок);
		СуммаНДСПеч = глПересчет(СуммаНДС, Валюта, Курс, глРубли, ДатаДок);
		СуммаНППеч  = глПересчет(СуммаНП , Валюта, Курс, глРубли, ДатаДок);
		
		// сумма без НДС должна включать НП, если он есть
		Если СуммаВклНП = 1 Тогда
			СуммаБезНДС = СуммаПеч;
		Иначе
			СуммаБезНДС = СуммаПеч + СуммаНППеч;
		КонецЕсли;
		
		Если СуммаВклНДС = 1 Тогда
			СуммаБезНДС = СуммаБезНДС - СуммаНДСПеч;
		КонецЕсли;
		
		СекцияСтрока.Цена                = СокрЛ(Формат((?(Количество = 0, 0, СуммаБезНДС/Количество)), "Ч 15.2.,"));
		СекцияСтрока.Сумма               = СокрЛ(Формат((СуммаБезНДС), "Ч 15.2.,"));
		СекцияСтрока.НДС                 = СокрЛ(Формат(СуммаНДСПеч, "Ч 15.2.,"));
		СекцияСтрока.Всего               = Формат(СуммаБезНДС + СуммаНДСПеч,"Ч15.2.,");
		
		Таб.ВывестиСекцию(СекцияСтрока);
		Состояние("Выведено строк: " + НомерСтроки);
	КонецЦикла;

	// формирование подвала
	СекцияПодвал	= Таб.ПолучитьСекцию("Подвал");
	ИтогНДС			= глПересчет(Итог("СуммаНДС"), Валюта, Курс, глРубли, ДатаДок);
	ИтогНП			= глПересчет(Итог("СуммаНП"), Валюта, Курс, глРубли, ДатаДок);
	ИтогСумма		= глПересчет(Итог("Сумма"), Валюта, Курс, глРубли, ДатаДок);
	ИтогВсего		= ИтогСумма;
	
	Если СуммаВклНП = 0 Тогда
		ИтогСумма	= ИтогСумма + ИтогНП;
		ИтогВсего	= ИтогВсего + ИтогНП;
	КонецЕсли;
		
	Если СуммаВклНДС = 1 Тогда
		ИтогСумма	= ИтогСумма - ИтогНДС;
	Иначе
		ИтогВсего	= ИтогВсего + ИтогНДС;
	КонецЕсли;
	
	СекцияПодвал.ИтогоКоличество = СокрЛ(Формат(Итог("Количество"), "Ч 15.3."));
	СекцияПодвал.ИтогоНДС        = СокрЛ(Формат(ИтогНДС, "Ч 15.2.,"));
	СекцияПодвал.ИтогоСумма      = СокрЛ(Формат(ИтогСумма, "Ч 15.2.,"));
	СекцияПодвал.ИтогоВсего      = СокрЛ(Формат(ИтогВсего, "Ч 15.2.,"));
	
	Таб.ВывестиСекцию(СекцияПодвал);

	// вывод результирующей таблицы на экран
	Таб.ПовторятьПриПечатиСтроки(15, 15);
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиМ4","ОкноМ4");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		Печать(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  Открывает список с выбором способа печати. После выбора способа формирует
//  таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииВидаТМЦ()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Выполняется при выборе вида ТМЦ
//
Процедура ПриИзмененииВидаТМЦ()
	                                              
	Если ВидТМЦ = Перечисление.ВидыТМЦ.Продукция Тогда
		Предупреждение("Продукцию закупать нельзя! Для оприходования продукции
		| на склад используйте документ ""Оприходование ТМЦ""",60);
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли; 
	                 
	Если  ПустоеЗначение(ВидТМЦ)=0 Тогда
		СохранитьЗначение("ВидТМЦПоУмолчанию",ВидТМЦ);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВидаТМЦ()
                                         
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.

Процедура ПриРедактированииНовойСтроки()
	                       
	СтараяПартия = Партия;
	Партия = "";
	Если Номенклатура.Выбран() = 1 Тогда // Копирование
		Если СтараяПартия.Выбран() = 1 Тогда // Была выбрана партия, копируем ее
			СоздатьПартию(СтараяПартия);
		КонецЕсли;
	Иначе    
		ВидТМЦ = ВосстановитьЗначение("ВидТМЦПоУмолчанию");
	КонецЕсли; // Номенклатура.Выбран() = 1
	
	Если ПустоеЗначение(ВидТМЦ)=1 Тогда
		ВидТМЦ = Перечисление.ВидыТМЦ.Товар;
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииНовойСтроки()

//*****************************************************************************
// предопределенная процедура
Процедура ПриНачалеРедактированияСтроки()
	
	ЭлементДиалога=Форма.ТекущаяКолонка();
	
	Если (ЭлементДиалога="ГТД") 
	или  (ЭлементДиалога="СтранаПроисхождения") 
	или  (ЭлементДиалога="Свойство") 
	Тогда
		
		Если Номенклатура.Выбран()=0 Тогда
			Возврат;
		КонецЕсли;
		
		Парам=СоздатьОбъект("СписокЗначений");
		Парам.ДобавитьЗначение(Контекст,"КонтекстДокумента");
		Парам.ДобавитьЗначение(НомерСтроки,"НомерСтроки");
		Парам.ДобавитьЗначение(ЭлементДиалога,"ЭлементДиалога"); 
		
		Если Партия.Выбран()=1 Тогда
			ОткрытьФормуМодально(Партия,Парам,0);
		Иначе                                  
			ОткрытьФормуМодально("Элемент.Партии",Парам,,,Номенклатура);
		КонецЕсли;    

	ИначеЕсли (Форма.ТекущаяКолонка() = "Цена"    ) 
	или       (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()

//*****************************************************************************
// предопределенная процедура
//
Процедура ПриУдаленииСтроки()
	
	УдалитьПартию();
	
КонецПроцедуры // ПриУдаленииСтроки()

//******************************************************************************
// предопределенная процедура
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "Покупка");
	
	Если Скопирован = 1 Тогда	//копирование документа - очистим партии
		// ************** ЭТО ДЛЯ ПРИХОДНОГО ДОКУМЕНТА **********
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			СтараяПартия = Партия;
			Партия="";            
			СоздатьПартию(СтараяПартия);
		КонецЦикла;
		// *************** КОНЕЦ ********************************
		Возврат;
	КонецЕсли;
	
	// Документы оптовой торговли можно оформлять только с оптового склада
	Если (Склад.РозничныйСклад = 1) Тогда
	    Склад = "";
	КонецЕсли;              
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// предопределенная процедура
Процедура ПриОткрытии()        
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		
		Если ПустоеЗначение(Парам.Получить("Команда")) = 0 Тогда
			
			// Печать
			Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
				КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
				ПоКнопкеПечать(1,КолЭкз);
				СтатусВозврата(0);Возврат;
			ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
				ПоКнопкеПечать(0);                
				СтатусВозврата(0);Возврат;
			Иначе
				Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
				СтатусВозврата(0);Возврат;
			КонецЕсли;
			
		ИначеЕсли ПустоеЗначение(Парам.Получить("Параметры")) = 0 Тогда
			// ввод нового из авансового отчета
			ДатаДок	= Парам.Получить("ДатаДок");
			Фирма	= Парам.Получить("Фирма");
			ЮрЛицо	= Фирма.ЮрЛицо;
			ФизЛицо	= Парам.Получить("ФизЛицо");
			Валюта	= Парам.Получить("Валюта");
			Курс	= глКурсДляВалюты(Валюта, ДатаДок);
			Проект	= Парам.Получить("Проект");
			УстановитьНовыйНомер(СокрЛП( Константа.ПрефиксИБ) + СокрЛП(ЮрЛицо.ПрефиксНомеровДокументов));
			
		Иначе
			
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	НачальнаяДатаДокумента 	= ДатаДок;    
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;
 	НачВалюта				= Валюта;
	НачКурс					= Курс;
	
	Форма.ВидТМЦ		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	// поиск выписанных подчиненных документов.
	СФ = глНайтиСчетФактуру(Контекст, ВидСчетаФактуры);
	Форма.ТекстСчФ.Заголовок(глПредставлениеСФ(СФ));
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Обновление цен в справочнике");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
    
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		
		Если ПустоеЗначение(СФ) = 1 Тогда
			// только если СФ отсутствует
			Форма.кнСчФ.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;            
	
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
    Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;

	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  

	ОбновитьНадписи();
КонецПроцедуры // ПриОткрытии()                                                                 
                 
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()
                                   
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()
	
	Если (ТипЗначенияСтр(Форма.Параметр) = "ГрупповойКонтекст") и (Выбран()=1) Тогда
		КонтФормы = Форма.Параметр;
		КонтФормы.НадоОбновить = 1;
		КонтФормы.Форма.Обновить();
		Стр = 0;
		Если КонтФормы.ТабДокументов.НайтиЗначение(ТекущийДокумент(),Стр,"Документ")=1 Тогда
			КонтФормы.ТабДокументов.ТекущаяСтрока(Стр);
		КонецЕсли;
	КонецЕсли;
	
	// Если документ новый и в нем были выбраны партии, 
	// то они не нужны и их надо пометить на удаление
	Если Выбран() = 0 Тогда        
		УдалитьВсеПартии();
	КонецЕсли;

КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
//Предопределенная процедура
Процедура ПриЗаписи() 
	Перем ОписаниеОш;
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	Иначе
		Если глПриЗаписиДокОснСФВал(Контекст, ВидСчетаФактуры, "ЗаписьКнигиПокупок", НачВалюта, НачКурс, ОписаниеОш) = 0 Тогда
		    СтатусВозврата(0);
			Предупреждение(ОписаниеОш, 60);
		Иначе
			НачВалюта	= Валюта;
			НачКурс		= Курс;
		КонецЕсли;
	КонецЕсли;
                           
    // ********************** ЭТОТ КУСОК  - ДЛЯ ПРИХОДНОГО ДОКУМЕНТА!***********
	// надо записать партии
	Если (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.FIFO) 
	 или (Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок) = Перечисление.МетодыРасчетаСебестоимости.LIFO) Тогда
	
		ОтменитьЗапись=0;
		СпрПартии=СоздатьОбъект("Справочник.Партии");
		
		// а в эту ТЗ запомним партии, чтобы в транзакции не затрагивать наш док
		// после записи всех партий - пропишем их в документ всех сразу
		ТЗПартии=СоздатьОбъект("ТаблицаЗначений");
		ТЗПартии.НоваяКолонка("НомерСтрокиДок");
		ТЗПартии.НоваяКолонка("Партия");
		
		НачатьТранзакцию();
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку()=1 Цикл
			Если (Партия.Выбран()=0) и (Номенклатура.Выбран()=1) Тогда
				
				СпрПартии.ИспользоватьВладельца(Номенклатура);
				СпрПартии.Новый();
				Попытка
					СпрПартии.Записать();
				Исключение  
					Сообщить("Строка документа: "+НомерСтроки+" Ошибка: "+ОписаниеОшибки());
					ОтменитьЗапись=1;
					Прервать;
				КонецПопытки;
				
				ТЗПартии.НоваяСтрока();
				ТЗПартии.НомерСтрокиДок=НомерСтроки;
				ТЗПартии.Партия=СпрПартии.ТекущийЭлемент();
				
			КонецЕсли;
		КонецЦикла; 
		
		Если ОтменитьЗапись=0 Тогда  
			// запишем созданные партии
			ЗафиксироватьТранзакцию();
			
			// теперь занесем партии в спецификацию нашего документа
			ТЗПартии.ВыбратьСтроки();
			Пока ТЗПартии.ПолучитьСтроку()=1 Цикл
				
				ПолучитьСтрокуПоНомеру(ТЗПартии.НомерСтрокиДок);
				Партия=ТЗПартии.Партия;
				
			КонецЦикла;
		Иначе
			ОтменитьТранзакцию();
			СтатусВозврата(0);
		КонецЕсли;
	КонецЕсли;
// ***************************** КОНЕЦ ************************************
	ПриЗаписиДокумента(Контекст);                
КонецПроцедуры // ПриЗаписи() 
	                                         
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставоки налогов, нет скидки
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 0);
	
	// надо заполнить ГТД по умолчанию по подобранным позициям
	ЗаполнитьГТД();
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество;
	Перем ВремЦена, ЕдЦены;
	
	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("ВидТМЦ");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.ВидТМЦ       = Перечисление.ВидыТМЦ.Товар;
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				ТаблицаПодбора.Цена			= глПолучитьЦену(ВремТовар, ТипЦен, РабочаяДата(), ВремЕдиница, Валюта, Курс);
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(1              , "ЕстьВидТМЦ");
				ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
				ПараметрыПодбора.ДобавитьЗначение(ТипЦен		 , "ТипЦен");      
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора , "ТаблицаПодбора");
			    
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 0);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ ФОРМЫ    
//
СпрПартии = СоздатьОбъект("Справочник.Партии");

ВидСчетаФактуры="СчетФактураПолученный";

// формируем таблицу печатных форм
НомерТекущейФормы	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");
	
ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Печатная форма М-4";
ТаблицаПечФорм.Кнопка	= "М-4";
Парам = Форма.Параметр;
