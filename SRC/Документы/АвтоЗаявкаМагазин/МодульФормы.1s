Перем ТЗ, Списочек;
Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; // для показа остатков
перем НС;
Перем Рег1, Рег2, Склад_темп, ТЗ3, ТЗ2;	//Работа с остатками

//МЭТР+
Перем ТекСтрокаВТаблице; // текущая строка в таблице значений  МФ 
//МЭТР-
//*********************************************************************
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора) Далее  

Процедура ГруппаНоменклатурыПриИзменении()
	Если ГруппаНоменклатуры.ЭтоГруппа() = 0 Тогда
		Предупреждение("Можно выбирать только группу!");
		ГруппаНоменклатуры = "";
	КонецЕсли;
КонецПроцедуры
                     
Процедура ПриЗаписи()
	ПриЗаписиДокумента(Контекст);
КОнецПроцедуры	

// Добавлено: Валерий МЭТР
Функция ПолучитьКоэффициентСезонности(Склад, НомерМесяца)
	
	СпрКоэффициентыСезонности = СоздатьОбъект("Справочник.КоэффициентыСезонностиСкладов");
	
	СпрКоэффициентыСезонности.ИспользоватьВладельца(Склад);
	СпрКоэффициентыСезонности.ВыбратьЭлементы();
	Пока СпрКоэффициентыСезонности.ПолучитьЭлемент() = 1 Цикл
		Если СпрКоэффициентыСезонности.ТекущийЭлемент().ПометкаУдаления() = 0 Тогда
			Если НомерМесяца = 1 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Январь;
			ИначеЕсли НомерМесяца = 2 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Февраль; 
			ИначеЕсли НомерМесяца = 3 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Март;
			ИначеЕсли НомерМесяца = 4 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Апрель;
			ИначеЕсли НомерМесяца = 5 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Май;
			ИначеЕсли НомерМесяца = 6 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Июнь;
			ИначеЕсли НомерМесяца = 7 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Июль;
			ИначеЕсли НомерМесяца = 8 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Август;
			ИначеЕсли НомерМесяца = 9 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Сентябрь;
			ИначеЕсли НомерМесяца = 10 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Октябрь; 
			ИначеЕсли НомерМесяца = 11 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Ноябрь;
			ИначеЕсли НомерМесяца = 12 Тогда
				Возврат СпрКоэффициентыСезонности.ТекущийЭлемент().Декабрь;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;		
	КонецЦикла;

	Возврат 1;	
	
КонецФункции

//++Ерошенко 320.03.2007
// добавлено для работы с Formex.dll
Функция Раскрас()   

	Если ЗагруженFormex = 1 Тогда
		Если СокрЛП(Номенклатура.ОсновноеСвойство.ЗначениеСвойства) = "A" Тогда
			Возврат "FONT["+ПолучитьЦвет(61,52,67)+"] BRUSH["+ПолучитьЦвет(252,197,251)+"]";	
		Иначе
			Если НачОстаток = 0 Тогда	
		        Возврат "FONT["+ПолучитьЦвет(61,52,67)+"] BRUSH["+ПолучитьЦвет(160,248,250)+"]";
			Иначе
				Возврат "";
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ""; //чтобы не раскрашивало
	КонецЕсли;
	
КонецФункции 
//--Ерошенко

//*********************************************************************

Функция НайдиСвойство(свво)
	перем рез;
	свво1	= свво.ЗначениеСвойства;
	если сокрЛП(свво1)="A" Тогда
		рез = Константа.КоэффА;
	ИначеЕсли сокрЛП(свво1)="B" Тогда
		рез = Константа.КоэффВ;
	ИначеЕсли сокрЛП(свво1)="C" Тогда
		рез = Константа.КоэффС;
	ИначеЕсли сокрЛП(свво1)="D" Тогда
		рез = Константа.КоэффD;
	Иначе
		рез=-1;
	КонецЕсли;
	
	возврат рез;
КонецФункции

//*********************************************************************

// ТУТ ВСЁ ЧТО ЕСТЬ В СПРАВОЧНИКЕ НОМЕНКЛАТУРА
Процедура ЭтапФормирования1()  

	КоэффициентСезонности = ПолучитьКоэффициентСезонности(Склад, ДатаМесяц(ДатаДок));
	//Екатерина Мэтр+
	Склд=склад.текущийЭлемент();
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	//|Период с ВыбДата по ВыбДата;
	//|Без Итогов;
	//|Номенклатура = Справочник.Номенклатура.ТекущийЭлемент;
	|Обрабатывать НеПомеченныеНаУдаление;
	|СпрОстаткиНоменклатуры = Справочник.ОстаткиНоменклатуры.ТекущийЭлемент;
	|Номенклатура = Справочник.ОстаткиНоменклатуры.Владелец;
	|Склад = Справочник.ОстаткиНоменклатуры.Склад;
	|Родитель = Справочник.ОстаткиНоменклатуры.Владелец.Родитель;
	|МинОстаток1 = Справочник.ОстаткиНоменклатуры.МинимальныйОстаток;
	|МаксОстаток1 = Справочник.ОстаткиНоменклатуры.МаксимальныйОстаток;
	//|//Внутреннее = Регистр.ОстаткиТМЦ.Внутреннее;
	//|//Функция КоличествоРасход = Расход(Количество);
	|Функция МинОстаток = сумма(окр(МинОстаток1*КоэффициентСезонности,0));
	|Функция МаксОстаток = сумма(окр(МаксОстаток1*КоэффициентСезонности,0));
	|Группировка Номенклатура без групп;
	//|Группировка Номенклатура без групп все;
	|Условие(Склад = Склд);
	//|Условие(Номенклатура.ЭтоГруппа = 0);
	//|Условие(Номенклатура в Списочек);
	//|//Условие(Внутреннее = 0);
	|"//}}ЗАПРОС
	;
	//Если ГруппаНоменклатуры.Выбран() = 1 Тогда
	//	Текстапроса=Текстапроса+"Условие (Родитель=ГруппаНоменклатуры)";
	//КонецЕсли;
	Загол="";
	НетОш = 1; // нет ошибок при наложении фильтров  
	//НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Склад",,, ТекстЗапроса,Загол);
	//сообщить(ТекстЗапроса);
	//сообщить("----------------------------------------------------------");
    НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",,, ТекстЗапроса,Загол);
	//сообщить(ТекстЗапроса);
	//сообщить("----------------------------------------------------------");
	//НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Контрагент",,, ТекстЗапроса,Загол);
	//сообщить(ТекстЗапроса);
	//сообщить("----------------------------------------------------------");
	//НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Проект",,, ТекстЗапроса,Загол);
	//сообщить(ТекстЗапроса);
	//сообщить("----------------------------------------------------------");
	//НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Автор",,,ТекстЗапроса,Загол,"Автор");
	//сообщить(ТекстЗапроса);
	//сообщить("----------------------------------------------------------");
	//НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "АвторЗаявки",,,ТекстЗапроса,Загол,"АвторЗаявки");
	//сообщить(ТекстЗапроса);

	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Запрос.Выполнить(ТекстЗапроса)=0 тогда
		возврат;
	КонецЕсли;
	Запрос.Выгрузить(ТЗ,0,0);
	//Екатерина Мэтр-
	
//	ТЗ	= "";	//Очистим всё
//	ТЗ	= СоздатьОбъект("ТаблицаЗначений");	
//	ТЗ.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
//	//ТЗ.НоваяКолонка("Артикул","Строка",25);         
//	//ТЗ.НоваяКолонка("Производитель","Справочник.Производители");
//	//ТЗ.НоваяКолонка("Единица","Справочник.Единицы");
//	ТЗ.НоваяКолонка("МинОстаток","Число",10,3);
//	ТЗ.НоваяКолонка("МаксОстаток","Число",10,3);
//	                                     
//	//КоэффициентСезонности = ПолучитьКоэффициентСезонности(Склад, ДатаМесяц(ДатаДок));
//	
//	//Заполним данными из справочника
//	СпрНоменклатура	= СоздатьОбъект("Справочник.Номенклатура");
//	Если ГруппаНоменклатуры.Выбран() = 1 Тогда
//		СпрНоменклатура.ИспользоватьРодителя(ГруппаНоменклатуры);
//	КонецЕсли;
//	СпрНоменклатура.ВыбратьЭлементы(1);    
//	
//	СпрОстаткиНоменклатуры = СоздатьОбъект("Справочник.ОстаткиНоменклатуры");
//	  
//	Состояние("Добавляем в ТЗ номенклатуру и начальные данные");
//	Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
//		Если СпрНоменклатура.ЭтоГруппа()=0 Тогда
//
//			ТЗ.НоваяСтрока();
//			ТЗ.Номенклатура = СпрНоменклатура.ТекущийЭлемент(); 
//			//ТЗ.Артикул = ТЗ.Номенклатура.Артикул;
//			//ТЗ.Единица = ТЗ.Номенклатура.БазоваяЕдиница;
//			//ТЗ.Производитель = ТЗ.Номенклатура.Производитель;
//			
//			// Валерий МЭТР
//			СпрОстаткиНоменклатуры.ИспользоватьВладельца(ТЗ.Номенклатура);
//			СпрОстаткиНоменклатуры.ВыбратьЭлементы();
//			Пока СпрОстаткиНоменклатуры.ПолучитьЭлемент() = 1 Цикл
//				Если (СпрОстаткиНоменклатуры.ТекущийЭлемент().Склад = Склад)
//					И (СпрОстаткиНоменклатуры.ТекущийЭлемент().ПометкаУдаления() = 0) Тогда
//					ТЗ.МинОстаток = Окр(СпрОстаткиНоменклатуры.ТекущийЭлемент().МинимальныйОстаток * КоэффициентСезонности,0); 
//					ТЗ.МаксОстаток = Окр(СпрОстаткиНоменклатуры.ТекущийЭлемент().МаксимальныйОстаток * КоэффициентСезонности,0);
//					Прервать;
//				КонецЕсли;		
//			КонецЦикла;	
//			
//		КонецЕсли;
//	КонецЦикла; 

	Списочек = "";
	Списочек = СоздатьОбъект("СписокЗначений"); 	
	
	//++Ерошенко 19.03.2007 
	// закомментировано для сокращения времени работы...
	ТЗ.Выгрузить(Списочек,,,"Номенклатура");    
	//Таб = СоздатьОбъект("Таблица");
	//Для А = 1 По Списочек.РазмерСписка() Цикл
	//	
	//	Строк = "";
	//	Ном = Списочек.ПолучитьЗначение(А,Строк);
	//	Таб.ВывестиСекцию("Стр");
	//	
	//КонецЦикла;   
	//Таб.Показать();
	//Сообщить("Колиество номенклатурных позиций в фильтре:"+Списочек.РазмерСписка());
	//тз.ВыбратьСтроки();
	//Пока тз.ПолучитьСтроку() = 1 Цикл
	//	Списочек.ДобавитьЗначение(тз.Номенклатура);
	//КонецЦикла;                                       
	//--Ерошенко     
	
КонецПроцедуры 


//*********************************************************************

//ТУТ ЧЕРЕЗ ЗАПРОС ПОЛУЧАЕМ ДАННЫЕ ПО ПРОДАЖАМ ЗА ПРОШЕДШИЕ 2 МЕСЯЦА (ЧИСТЫЕ ПРОДАЖИ) 
// и уже по ним получаем СР.НЕД.ПРОДАЖИ
Процедура ЭтапФормирования2()
	Перем Запрос, ТекстЗапроса;
	//Создание объекта типа Запрос
	
	ВыбДата = ДатаДок;
	Если ВыбДата > ПолучитьДатуТА() Тогда
		ВыбДата = ПолучитьДатуТА();
	КонецЕсли;
		
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ВыбДата по ВыбДата;
	|Без Итогов;
	|Номенклатура = Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад1 = Регистр.ОстаткиТМЦ.Склад;
	|Количество = Регистр.ОстаткиТМЦ.Количество;
	|//Внутреннее = Регистр.ОстаткиТМЦ.Внутреннее;
	|//Функция КоличествоРасход = Расход(Количество);
	|Функция КоличествоКонОст = КонОст(Количество);
	|Группировка Склад1 без групп;
	|Группировка Номенклатура без групп все;
	|Условие(Склад1 в Склад);
	|Условие(Номенклатура в Списочек);
	|//Условие(Внутреннее = 0);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Состояние("Обрабатываем расчёт средненедельных продаж");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗ_1	= СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ_1);      
	
	//Таб = СоздатьОбъект("Таблица"); 
	//ТЗ_1.ВыбратьСтроки();
	//Пока ТЗ_1.ПолучитьСтроку() = 1 Цикл
	//	
	//	Ном = ТЗ_1.Номенклатура;
	//	Таб.ВывестиСекцию("Стр");
	//	
	//КонецЦикла;   
	//Таб.Показать("Результат запроса");
	
	//Сообщить("Строк в таблице остатков: "+ТЗ.КоличествоСтрок());
	//ТЗ_1.ВыбратьСтроку();  
	  
	//ТЗ_1.НоваяКолонка("СрНедПродажа",	"число",14,3);
	//КолвоНедельДоСлПоставки	= окр((число(ДатаСлПоставки)-число(ДатаДок))/7,0);
	//ТЗ_1.ВыбратьСтроки();
	//Пока ТЗ_1.ПолучитьСтроку() = 1 Цикл
	//	ТЗ_1.СрНедПродажа	= (ТЗ_1.КоличествоРасход/(число(ВыбКонПериода-ВыбНачПериода)))*(число(ДатаСлПоставки-ДатаДок));
	//КонецЦикла;
	
	//СВЕРНЁМ ВСЕ К ИСХОДНОЙ ТЗ 
	
	// ТЗ - вся номенклатура с проставленным признаком категории... 
	Состояние("Сворачиваем доп. данные в исходную ТЗ...");
	//ТЗ.НоваяКолонка("СрНедПродажа",	"число",14,3);
	//ТЗ.НоваяКолонка("НормаСклада",	"число",14,3);
	
	ТЗ.НоваяКолонка("НачОстаток","Число",10,3);	
	ТЗ.НоваяКолонка("Заказ","Число",10,3);
	
	ТЗ_1.ВыбратьСтроки();
	Пока ТЗ_1.ПолучитьСтроку() = 1 Цикл
		Стр	= ПолучитьПустоеЗначение(Стр);
		Если ТЗ.НайтиЗначение(ТЗ_1.Номенклатура,Стр,1) = 1 Тогда
			ТЗ.ПолучитьСтрокуПоНомеру(Стр);
			//ТЗ.СрНедПродажа	= ТЗ_1.СрНедПродажа;
			//ТЗ.НормаСклада	= ТЗ.СрНедПродажа*ТЗ.АВСГруппа*КолвоНедельДоСлПоставки;
			ТЗ.НачОстаток = ТЗ_1.КоличествоКонОст;
			ТЗ.Заказ = Окр(ТЗ.МаксОстаток*0.75 - ТЗ.НачОстаток,0);
			//Сообщить("НачОстаток - " + ТЗ_1.КоличествоКонОст + " МаксОстаток - " + ТЗ.МаксОстаток);
			//ТЗ.Заказ		= ТЗ.НормаСклада - ТЗ.НачОстаток +ТЗ.МинОстаток;//(тз.СрНедПродажа*КолвоНедельДоСлПоставки))+ТЗ.МинОстаток;
			//Если УчитыватьМаксОстаток=1 Тогда
			//	Если ТЗ.Заказ > ТЗ.максОстаток Тогда
			//		ТЗ.Заказ	= ТЗ.МаксОстаток;
			//		Сообщить("В позиции: "+сокрЛП(ТЗ.Номенклатура.Наименование)+" превышен максимальный лимит отгрузки","!");
			//	КонецЕсли;
			//КонецЕсли;
		Иначе
			Сообщить("Не нашли соответствия");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//*********************************************************************

Процедура ЭтапФормирования3()
	УдалитьСтроки();
	ТЗ.ВыбратьСтроки();
	Состояние("Заполняем выходную форму...");
	Пока ТЗ.ПолучитьСтроку() = 1 Цикл
		//если СоздаватьВозвратИзМагазина=1 Тогда
		//	если ТЗ.Заказ <> 0 Тогда
		//		НоваяСтрока();
		//		Номенклатура	= ТЗ.Номенклатура;
		//		Заказ			= окр(ТЗ.Заказ,0);
		//		НормаСклада		= ТЗ.НормаСклада;
		//		НачОстаток		= окр(ТЗ.НачОстаток,0);
		//		СрНедПродажа	= ТЗ.СрНедПродажа;
		//		МинОстаток		= ТЗ.МинОстаток;
		//		ГруппаАВС		= ТЗ.АВСГруппа;
		//	КонецЕсли;
		//Иначе
			Если ТЗ.Заказ > 0 Тогда
				НоваяСтрока();
				Номенклатура	= ТЗ.Номенклатура;
				Заказ			= окр(ТЗ.Заказ,0);
				//НормаСклада		= ТЗ.НормаСклада;
				НачОстаток		= окр(ТЗ.НачОстаток,0);
				//СрНедПродажа	= ТЗ.СрНедПродажа;
				МинОстаток		= ТЗ.МинОстаток;
				МаксОстаток		= ТЗ.МаксОстаток;
				//ГруппаАВС		= ТЗ.АВСГруппа; 
				Единица	= ТЗ.Номенклатура.БазоваяЕдиница;
				Артикул = ТЗ.Номенклатура.Артикул;
				Производитель = ТЗ.Номенклатура.Производитель;
			КонецЕсли;
		//КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

//*********************************************************************

Процедура Заполни()
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	ЭтапФормирования1();	//Заполняем ТЗ из справочника товаров 
	ЭтапФормирования2();	//Дополняем ТЗ данными по Ср.недельным продажам
	ЭтапФормирования3();	//Выгружаем данные в табличную часть
КонецПроцедуры
 
//*********************************************************************

    //МЭТР+
	процедура УправлениеДиалогом()
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
			Форма.ИспользоватьСлой("Основной,ОсновныеКнопки,слой1");
			форма.выбначпериода.видимость(0);
			форма.выбконпериода.видимость(0);
			форма.датаслпоставки.видимость(0);
			форма.текст1.видимость(0);
			форма.текст2.видимость(0);
			форма.текст3.видимость(0);
			форма.текст4.видимость(0);
			форма.ГруппаНоменклатуры.видимость(0);
		Иначе     
			Форма.ИспользоватьСлой("фильтр,ОсновныеКнопки");
		КонецЕсли;
	КонецПроцедуры
	Процедура ПриВыбореЗакладки(Номер,Значение)	
		УправлениеДиалогом();
		
	КонецПроцедуры	// ПриВыбореЗакладки
	
	
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

	//МЭТР-


//*********БАЗОВЫЕ ПРОЦЕДУРЫ*******************************************

Процедура ПриОткрытии()
	ПриЗаписиПерепроводить(1);	
	ТЗ_Остаток.НоваяКолонка("Склад","Справочник.Склады",,,,11);
	ТЗ_Остаток.НоваяКолонка("Остаток","число",15,2,,4);
	//ТЗ_Остаток.НоваяКолонка("Резерв","число",15,2,,4);
    
	НС	= НомерСтроки;         
	
	Форма.ГруппаНоменклатуры.ВыборГруппы(1); 
	
	//МЭТР+
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение(1,"Основная");
	Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
	Форма.Закладки.ТекущаяСтрока(1); 
	УправлениеДиалогом();

	//                  тип          вид           переменная  название
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", "Номенклатура",  "По номенклатуре");
	глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Склады", "Склад",  "По складам");
	//глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","НоменклатураГруппа", "Группа",  "По группам");


	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл"); 
	
    ТаблицаМФ.ПолучитьСтрокуПоНомеру(1); 
	ТекСтрокаВТаблице = 1;  
	
	СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
	//*Баки расширительные "Reflex" - группа
	СпрНоменклатура.НайтиПоКоду("70260");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//*Баки расширительные "Джилекс" – группа
	СпрНоменклатура.НайтиПоКоду("70293");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//*Клапан поплавковый 1 1/4" – Matic код базы 7 – 76463
	СпрНоменклатура.НайтиПоКоду("76463");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//*Клапан поплавковый 1" - Matic код базы 7 -30013138
	СпрНоменклатура.НайтиПоКоду("30013138");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Клапан поплавковый 3/4" - Matic код базы 7 – 42867
	СпрНоменклатура.НайтиПоКоду("42867");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Запорная арматура "Bugatti" – группа
	СпрНоменклатура.НайтиПоКоду("75015");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Запорная арматура "Tiemme" – группа
	СпрНоменклатура.НайтиПоКоду("70456");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Внутренняя канализация "Ostendorf" – группа
	СпрНоменклатура.НайтиПоКоду("75140");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Клапан вакуумный 110 – Magnaplast код базу 7 – 72708
	СпрНоменклатура.НайтиПоКоду("72708");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Клапан вакуумный 50 - Magnaplast код базу 7 – 43578
	СпрНоменклатура.НайтиПоКоду("43578");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Клапан вакуумный 75 - Magnaplast код базу 7 – 72707
	СпрНоменклатура.НайтиПоКоду("72707");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Колпак канализационный вытяжной 110 - Magnaplast код базу 7 - 72715
	СпрНоменклатура.НайтиПоКоду("72715");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Колпак канализационный вытяжной 50 - Magnaplast код базу 7 - 72713
	СпрНоменклатура.НайтиПоКоду("72713");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Колпак канализационный вытяжной 75 - Magnaplast код базу 7 – 72714
	СпрНоменклатура.НайтиПоКоду("72714");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Канализационные системы наружные "Ostendorf" – группа
	СпрНоменклатура.НайтиПоКоду("77860");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Коллекторные группы "Tiemme" – группа
	СпрНоменклатура.НайтиПоКоду("74956");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Коллекторы "Tiemme" – группа
	СпрНоменклатура.НайтиПоКоду("77598");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Насосная техника "Grundfos" – группа
	СпрНоменклатура.НайтиПоКоду("66666");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Насосная техника "Wilo" – группа
	СпрНоменклатура.НайтиПоКоду("66670");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Насосная техника "Джилекс" – группа
	СпрНоменклатура.НайтиПоКоду("75062");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Теплоизоляция для труб – группа
	СпрНоменклатура.НайтиПоКоду("22010000");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Терморегулирующая арматура "Tiemme" – группа
	СпрНоменклатура.НайтиПоКоду("75094");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Труба и фитинги из полипропилена – группа (и белый и серый PP-R)
	СпрНоменклатура.НайтиПоКоду("30011539");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Труба металлопластиковая – группа
	СпрНоменклатура.НайтиПоКоду("25040000");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Фитинги для металлопластиковой трубы (обжим) – группа
	СпрНоменклатура.НайтиПоКоду("27020000");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Фитинги для металлопластиковой трубы (пресс) – группа
	СпрНоменклатура.НайтиПоКоду("27040000");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Фитинги и аксессуары для медной трубы (пресс) – группа
	СпрНоменклатура.НайтиПоКоду("76528");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Фитинги резьбовые (латунь) – группа - Фитинги резьбовые "Tiemme" – подгруппа
	СпрНоменклатура.НайтиПоКоду("78521");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	//* Шланги и штуцера – группа – Штуцера - подгруппа 
	СпрНоменклатура.НайтиПоКоду("30010000");
    ОбработкаПодбора(СпрНоменклатура.ТекущийЭлемент(), Контекст);
	СписокЭлементовМФ.ТекущаяСтрока(0);
    //МЭТР-
	
	
КонецПроцедуры  



//*********************************************************************

Процедура ВводНового(Скопирован)
	если Скопирован=1 Тогда
		УдалитьСтроки();
	КонецЕсли;
	глЗаполнитьШапку(Контекст,Скопирован);
	
	КоррСклад = Константа.СкладОтделаПродаж2;
	
	ВыбНачПериода	= ДатаДок-60;
	ВыбКонПериода	= ДатаДок;
	
	// Валерий МЭТР:
	//ДатаСлПоставки	= ДатаДок+7;
	ДатаСлПоставки	= ДатаДок+20;
КонецПроцедуры
 
//*********************************************************************

//Обработка складов
Функция ПокажиОстатки()
	Перем стр;

	Если НазваниеНабораПрав()="Сервис" Тогда
		возврат 0;
	КонецЕсли;
	
	Если НС=НомерСтроки Тогда
	    возврат 0;
	КонецЕсли;
        
	стр="";
	ТЗ_Остаток.УдалитьСтроки();
	Склад_Темп.ВыбратьЭлементы();
	Пока Склад_темп.ПолучитьЭлемент()=1 Цикл
		Рег1.УстановитьФильтр(,Номенклатура,Склад_темп);
		Рег1.ВыгрузитьИтоги(ТЗ3,1,1);	//В ТЗ мы запомнили все остатки товаров на складе
		
		рег2.УстановитьФильтр(Номенклатура,Склад_темп);
		рег2.ВыгрузитьИтоги(ТЗ2,1,1);
		
		ТЗ2.Свернуть("Номенклатура","Количество");
		х					= ПолучитьПустоеЗначение(х);
		у					= 1;
		
		а=0;
		
		Если ТЗ2.НайтиЗначение(Номенклатура,х,у)=1 Тогда	//Сначала общий резерв
			а=1;
			ТЗ_Остаток.НоваяСтрока();
			ТЗ_Остаток.Склад	= Склад_Темп.ТекущийЭлемент();
			//ТЗ_Остаток.Резерв	= ТЗ2.ПолучитьЗначение(х,"Количество");
			х					= ПолучитьПустоеЗначение(х);
		КонецЕсли;
		//Теперь из остатков ТМЦ
		х			= ПолучитьПустоеЗначение(х);
		у			= 2;
		Если ТЗ3.НайтиЗначение(Номенклатура,х,у)=1 Тогда
			Если а=0 Тогда
				ТЗ_Остаток.НоваяСтрока();
				ТЗ_Остаток.Склад=Склад_Темп.ТекущийЭлемент();
			КонецЕсли;
			ТЗ_Остаток.Остаток	= ТЗ3.ПолучитьЗначение(х,"Количество");
		КонецЕсли;
	КонецЦикла;
	стрк	= "";
	НС=НомерСтроки;
	возврат стрк;
КонецФункции

//*********************************************************************

Процедура ПокажиДетализациюРезерва()
	Если ТЗ_Остаток.КоличествоСтрок()=0 Тогда
	    возврат;
	КонецЕсли;
	х	= ТЗ_Остаток.ТекущаяСтрока();
	скл	= ТЗ_Остаток.ПолучитьЗначение(х,"Склад");
	ном	= Номенклатура;
	ТекД= "";
	КонтРезерв	= СоздатьОбъект("СписокЗначений");	//Передача параметров в обработку "РезервыТМЦ" 
	КонтРезерв.ДобавитьЗначение(скл,"Склад");
	КонтРезерв.ДобавитьЗначение(ном,"Номенклатура");
	КонтРезерв.ДобавитьЗначение(ТекД,"ТекД");
	
	ОткрытьФормуМодально("Обработка.ПокажиРезервыТМЦ", контРезерв);
КонецПроцедуры

//*********************************************************************

Функция НайдиКоличество(товар)
	Перем рез;
	ав	= 0;
	Если ТЗ.НайтиЗначение(товар, ав, "Номенклатура") = 1 Тогда
		рез	= ТЗ.ПолучитьЗначение(ав, "Заказ");
	Иначе
		рез	= 0;
	КонецЕсли;
	Возврат рез;
КонецФункции

//*********************************************************************

Функция Нечетное(а)
	перем рез;
	если Окр(а/2,1)-Окр(а/2,0)=0 Тогда
		рез = 0;	//тут чётное
	Иначе
		рез = 1;	//тут нечетное
	КонецЕсли;
	Возврат рез;
КонецФункции

//*********************************************************************

Функция максДопустимо(СколькоВзять, СколькоЕсть)
	Перем рез;
	
	если (СколькоЕсть>0) и (СколькоВзять>=СколькоЕсть) Тогда
		рез	= СколькоЕсть;
	ИначеЕсли СколькоВзять<СколькоЕсть Тогда
		рез	= СколькоВзять;
	Иначе
		рез	= 0;
	КонецЕсли;

	возврат рез;
КонецФункции

//*********************************************************************

Процедура СоздайМнеПеремещение(Новое, Складик, Структура, Код1, СущДок)
	
	//Валерий МЭТР: округление до упаковки
	ОкруглятьДоУпаковки = 0;
	Если Вопрос("Округлять количество товара в ПеремещенииТМЦ до упаковки?",4,0) = 6 Тогда
		ОкруглятьДоУпаковки = 1;
	КонецЕсли;
		
	Если Новое=1 Тогда
		Док = СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
		Док.Новый();
		Док.Склад			= Складик;
		Док.Валюта			= глРубли;
		Док.Курс			= глКурсДляВалюты(Док.Валюта,Док.ДатаДок);
		Док.ЮрЛицо			= глПользователь.ОсновнаяФирма.ЮрЛицо;
		Док.СкладПолучатель = Склад;
		Док.ТипЦен			= глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		Док.УстановитьНовыйНомер("Пр"+Док.СкладПолучатель.ПрефиксНомеровДокументов); 
		Док.Автор			= Автор;
		Док.Фирма			= глПользователь.ОсновнаяФирма;
		Док.ФирмаПолучатель	= глПользователь.ОсновнаяФирма;
		Док.Комментарий		= "Ввод перемещений автозаказу №"+сокрЛП(номерДок);
		Док.ДокОснование	= ТекущийДокумент();
		
		Кол = Структура.КоличествоСтрок();
		Для Стр = 1 По Кол Цикл  
			Если Структура.ПолучитьЗначение(Стр,Код1) > 0 Тогда
				Док.НоваяСтрока();
				Док.Номенклатура	= Структура.ПолучитьЗначение(Стр,1);
				Док.Единица			= Док.Номенклатура.БазоваяЕдиница;
				Док.Коэффициент		= 1;
				Док.Количество		= Структура.ПолучитьЗначение(Стр,Код1);				
				
				//Валерий МЭТР: округление до упаковки
				Если ОкруглятьДоУпаковки = 1 Тогда
					КоличествоВУпаковке = Док.Номенклатура.КоличествоВУпаковке;
					Если КоличествоВУпаковке > 0 Тогда
						Колво = Док.Количество % КоличествоВУпаковке;
						Если Колво >= КоличествоВУпаковке/2 Тогда
							ОкрКоличество = Цел(Док.Количество/КоличествоВУпаковке+1) * КоличествоВУпаковке;
							//Проверим, есть ли на такое кол-во на складе
							НаСкладе = Структура.ПолучитьЗначение(Стр,2);
							Если НаСкладе >= ОкрКоличество Тогда
								Док.Количество = ОкрКоличество;
							КонецЕсли;
						КонецЕсли;						          						       
					КонецЕсли; 					
				КонецЕсли;		
				
				Док.Количество2		= Док.Количество;
			КонецЕсли;
		КонецЦикла;			
			
		Попытка
			Док.Записать();
			Если Код1 = 5 Тогда
				ПеремКоррСклад = сокрЛП(док.ТекущийДокумент().НомерДок);
			КонецЕсли;
			
			сообщить("Запись нового документа: "+Док+", прошла успешно.");
		исключение
			сообщить("Ошибка при попытке записи нового документа!");
			возврат;
		КонецПопытки;
	Иначе
		//тут берем уже готовый
		Док	= СоздатьОбъект("Документ.ПеремещениеТМЦ_Розница");
		Если Док.НайтиПоНомеру(СущДок,ДатаДок) = 1 Тогда
			Док.Склад			= Складик;
			Док.Валюта			= глРубли;
			Док.Курс			= глКурсДляВалюты(Док.Валюта,Док.ДатаДок);
			Док.ЮрЛицо			= глПользователь.ОсновнаяФирма.ЮрЛицо;
			Док.СкладПолучатель = Склад;
			Док.ТипЦен			= глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		//Док.УстановитьНовыйНомер("Пр"+Док.СкладПолучатель.ПрефиксНомеровДокументов); 
			Док.Автор			= Автор;
			Док.Фирма			= глПользователь.ОсновнаяФирма;
			Док.ФирмаПолучатель	= глПользователь.ОсновнаяФирма;
			Док.Комментарий		= "Ввод перемещений автозаказу №"+сокрЛП(номерДок);
			Док.ДокОснование	= ТекущийДокумент();
			Кол = Структура.КоличествоСтрок();
			док.УдалитьСтроки();
			Для стр = 1 По Кол Цикл
				если Структура.ПолучитьЗначение(стр,код1)>0 Тогда
					Док.НоваяСтрока();
					Док.Номенклатура	= Структура.ПолучитьЗначение(стр,1);
					Док.Единица			= Док.Номенклатура.БазоваяЕдиница;
					Док.Коэффициент		= 1;
					Док.Количество		= Структура.ПолучитьЗначение(стр,код1);
					Док.Количество2		= Док.Количество;
				КонецЕсли;
			КонецЦикла;			
			
			попытка
				Док.Записать();
				Если код1 = 5 Тогда
					ПеремКоррСклад = сокрЛП(док.ТекущийДокумент().НомерДок);
				КонецЕсли;
			
				сообщить("Обновление документа: "+Док+", прошло успешно.");
			исключение
				сообщить("Ошибка при попытке обновления документа: "+Док);
				возврат;
			КонецПопытки;
		Иначе
			Сообщить("Вот и нету такого документика!!!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

//*********************************************************************

Процедура СоздайМнеСолянкуПоПоставкам(новое, Структура, код1, СущДок)
	если новое=1 Тогда
		док=СоздатьОбъект("Документ.СолянкаПоПоставкам");
		Док.Новый();
		Док.Склад			= Склад;
		Док.Автор			= Автор;
		Док.ЮрЛицо			= глПользователь.ОсновнаяФирма.ЮрЛицо;
		Док.Фирма			= глПользователь.ОсновнаяФирма;
		Док.Комментарий		= "Ввод заказа по автозаказу №: "+сокрЛП(номерДок);
		Док.ДокОснование	= ТекущийДокумент();
		
		Кол = Структура.КоличествоСтрок();
		Для стр = 1 По Кол Цикл
			Если Структура.ПолучитьЗначение(стр,код1) <> 0 Тогда
				Док.НоваяСтрока();
				Док.Номенклатура	= Структура.ПолучитьЗначение(стр,1);
				Док.Артикул			= док.Номенклатура.Артикул;
				Док.Производитель	= док.Номенклатура.Производитель;
				Док.Единица			= Док.Номенклатура.БазоваяЕдиница;
				Док.Коэффициент		= 1;
				Док.Количество		= Структура.ПолучитьЗначение(стр,код1);
				Док.КоличествоФакт	= Док.Количество;
				Док.СрокПоставки	= РабочаяДата()+1;
				Док.СрокФакт		= РабочаяДата()+1;
				Док.ВидТМЦ 			= Перечисление.ВидыТМЦ.Товар;
			КонецЕсли;
		КонецЦикла;			
			
		Попытка
			Док.Записать();
			Если код1 = 4 Тогда
				ЗаказТовара = сокрЛП(док.ТекущийДокумент().НомерДок);
			КонецЕсли;
			
			сообщить("Запись нового документа: "+Док+", прошла успешно.");
		исключение
			сообщить("Ошибка при попытке записи нового документа!");
			возврат;
		КонецПопытки;
	Иначе
		//тут берем уже готовый
		док	= СоздатьОбъект("Документ.СолянкаПоПоставкам");
		если док.НайтиПоНомеру(СущДок,ДатаДок)=1 Тогда
			Док.Склад			= Склад;
			Док.Автор			= Автор;
			Док.ЮрЛицо			= глПользователь.ОсновнаяФирма.ЮрЛицо;
			Док.Фирма			= глПользователь.ОсновнаяФирма;
			Док.Комментарий		= "Ввод заказа по автозаказу №: "+сокрЛП(номерДок);
			Док.ДокОснование	= ТекущийДокумент();
			Кол = Структура.КоличествоСтрок();
			док.УдалитьСтроки();
			Для стр = 1 По Кол Цикл
				если Структура.ПолучитьЗначение(стр,код1)<>0 Тогда
					Док.НоваяСтрока();
					Док.Номенклатура	= Структура.ПолучитьЗначение(стр,1);
					Док.Артикул			= док.Номенклатура.Артикул;
					Док.Производитель	= док.Номенклатура.Производитель;
					Док.Единица			= Док.Номенклатура.БазоваяЕдиница;
					Док.Коэффициент		= 1;
					Док.Количество		= Структура.ПолучитьЗначение(стр,код1);
					Док.КоличествоФакт	= Док.Количество;
					Док.СрокПоставки	= РабочаяДата()+1;
					Док.СрокФакт		= РабочаяДата()+1;
					Док.ВидТМЦ 			= Перечисление.ВидыТМЦ.Товар;
				КонецЕсли;
			КонецЦикла;			
			
			Попытка
				Док.Записать();
				Если код1 = 4 Тогда
					ПеремКоррСклад = сокрЛП(док.ТекущийДокумент().НомерДок);
				КонецЕсли;
			
				сообщить("Обновление документа: "+Док+", прошло успешно.");
			исключение
				сообщить("Ошибка при попытке обновления документа: "+Док);
				возврат;
			КонецПопытки;
		Иначе
			Сообщить("Вот и нету такого документика!!!");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//*********************************************************************

Процедура РаспределиПоСкладам()
	
	Если Выбран() = 0 тогда
		Сообщить("Документ надо сначала записать!");
		Возврат;
	КонецЕсли;
	//Сначала определимся с остатками товара на каждом из складов.	
	темп = СоздатьОбъект("ТаблицаЗначений");

	ВыбНоменклатура	= СоздатьОбъект("СписокЗначений");
	ВыбСклад		= СоздатьОбъект("СписокЗначений");
	
	ВыгрузитьТабличнуюЧасть(ТЗ);
	  
	//++Ерошенко 21.03.2007
	// изменено для оптимизации кода.. 	
	
	//ВыбратьСтроки();
	//Пока ПолучитьСтроку()=1 Цикл
	//	ВыбНоменклатура.ДобавитьЗначение(Номенклатура);
	//КонецЦикла;    
	
	ВыгрузитьТабличнуюЧасть(ВыбНоменклатура,"Номенклатура");

	//--Ерошенко	
	  
	//++Ерошенко 21.03.2007
	// закомментировано по проьбе Ивановой в связи  исключением склада "Пискарёвский"
	
	//ВыбСклад.ДобавитьЗначение(Константа.СкладОтделаПродаж1);     
	
	//--Ерошенко
	
	ВыбСклад.ДобавитьЗначение(КоррСклад);

	Состояние("Расчет остатков на складе...");
	
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПоОстаткамПошерсти)
	|Период с ДатаДок по ДатаДок;
	|Обрабатывать НеПомеченныеНаУдаление;
	|Без итогов;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура;
	|Склад			= Регистр.ОстаткиТМЦ.Склад;
	|Количество		= Регистр.ОстаткиТМЦ.Количество;
	|Функция ПоОстаткамКонОст = КонОст(Количество);
	|Группировка Номенклатура без групп все;
	|Группировка Склад без групп все;
	|Условие(Номенклатура в ВыбНоменклатура);
	|Условие(Склад в ВыбСклад);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;      
	
	ТЗ_КоррСклад = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ТЗ_КоррСклад,0,0);
	//ТЗ_КоррСклад.НоваяКолонка("Резерв","число",14,3);		//Для учёта резервов

	//Теперь тоже самое, но по резервам!
	//Состояние("Расчет резервов на складе...");   
	//Запрос = СоздатьОбъект("Запрос");
	//ТекстЗапроса = 
	//"//{{ЗАПРОС(ПоРезервамПошерсти)
	//|Период с ДатаДок по ДатаДок;
	//|Обрабатывать НеПомеченныеНаУдаление;
	//|Без итогов;
	//|Номенклатура	= Регистр.РезервыТМЦ2.Номенклатура;
	//|Склад			= Регистр.РезервыТМЦ2.Склад;
	//|Количество		= Регистр.РезервыТМЦ2.Количество;
	//|Функция ПоОстаткамКонОст = КонОст(Количество);
	//|Группировка Номенклатура без групп все;
	//|Группировка Склад без групп все;
	//|Условие(Номенклатура в ВыбНоменклатура);
	//|Условие(Склад в ВыбСклад);
	//|"//}}ЗАПРОС
	//;
	//// Если ошибка в запросе, то выход из процедуры
	//Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//Состояние("Консолидация данных...");
	//ТЗ_Второй	= СоздатьОбъект("ТаблицаЗначений");
	//Запрос.Выгрузить(ТЗ_Второй,0,0);
	//ТЗ_Второй.ВыбратьСтроки();
	//Пока ТЗ_Второй.ПолучитьСтроку() = 1 Цикл
	//	ТЗ_Пискарь.НоваяСтрока();
	//	ТЗ_Пискарь.Номенклатура 	= ТЗ_Второй.Номенклатура;
	//	ТЗ_Пискарь.Склад 			= ТЗ_Второй.Склад;
	//	ТЗ_Пискарь.ПоОстаткамКонОст = (-1) * ТЗ_Второй.ПоОстаткамКонОст;
	//	ТЗ_Пискарь.Резерв			= ТЗ_Второй.ПоОстаткамКонОст;
	//КонецЦикла;
	
	ТЗ_КоррСклад.Свернуть("Номенклатура,Склад","ПоОстаткамКонОст");
	
	ТЗ_доп	= СоздатьОбъект("ТаблицаЗначений");
	ТЗ_доп.НоваяКолонка("Номенклатура","Справочник.Номенклатура"); 	//1
	ТЗ_доп.НоваяКолонка("КоррСклад_ТекОст","число",14,3);			//2
	//ТЗ_доп.НоваяКолонка("Второй_ТекОст","число",14,3);			//3
	ТЗ_доп.НоваяКолонка("НадоРаспределить","число",14,3);				//4
	ТЗ_доп.НоваяКолонка("Заказ","число",14,3);					//5
	ТЗ_доп.НоваяКолонка("КоррСклад","число",14,3);					//6
	//ТЗ_доп.НоваяКолонка("Второй","число",14,3);					//7
	//ТЗ_доп.НоваяКолонка("РезервПискарь",		"число",14,3);			//8
	//ТЗ_доп.НоваяКолонка("РезервВторой",			"число",14,3);			//8
	
	//Заполним её в соответствии с нашим желанием
	//ТЗ_Второй	= "";
	
	ТЗ_КоррСклад.ВыбратьСтроки();
	ВыгрузитьТабличнуюЧасть(ТЗ);
	СписокОбработаннойНоменклатуры = СоздатьОбъект("СписокЗначений");
	Товар = "";
	Пока ТЗ_КоррСклад.ПолучитьСтроку() = 1 Цикл
		Если Товар <> ТЗ_КоррСклад.Номенклатура Тогда	//Значит надо добавить новую строку
			ТЗ_доп.НоваяСтрока();
			ТЗ_доп.Номенклатура = ТЗ_КоррСклад.Номенклатура;
			//тут надо проверить какой склад - а то косяк получается
			Если ТЗ_КоррСклад.Склад = КоррСклад Тогда
				ТЗ_доп.КоррСклад_ТекОст	= ТЗ_КоррСклад.ПоОстаткамКонОст;
			КонецЕсли;
//			ТЗ_доп.НадоРаспределить		= НайдиКоличество(ТЗ_доп.Номенклатура);
		Иначе
			ТЗ_доп.Номенклатура = ТЗ_КоррСклад.Номенклатура;
			//тут надо проверить какой склад - а то косяк получается
			Если ТЗ_КоррСклад.Склад = КоррСклад Тогда
				ТЗ_доп.КоррСклад_ТекОст = ТЗ_КоррСклад.ПоОстаткамКонОст;
			КонецЕсли;
		КонецЕсли;
		ТЗ_доп.НадоРаспределить	= НайдиКоличество(ТЗ_доп.Номенклатура);
		Товар = ТЗ_КоррСклад.Номенклатура;
		СписокОбработаннойНоменклатуры.ДобавитьЗначение(ТЗ_КоррСклад.Номенклатура);
	КонецЦикла;
	    
	ВыбратьСтроки();
	Пока ПолучитьСтроку() = 1 Цикл
		стр = "";
		Если СписокОбработаннойНоменклатуры.НайтиЗначение(Номенклатура)	= 0 Тогда
			ТЗ_доп.НоваяСтрока();
			ТЗ_доп.Номенклатура 	= Номенклатура;	
			ТЗ_доп.КоррСклад_ТекОст	= 0;
			ТЗ_доп.НадоРаспределить	= Заказ;
		КонецЕсли;	
	КонецЦикла;	
		
	//Теперь мы задумываемся о том, как-бы нам всё распределить.
	//Будем стараться брать со второго склада по максимуму, а остатки хапать отсюда
	Состояние("Начинаем распределение по складам...");
	ТЗ_доп.ВыбратьСтроки();
	Пока ТЗ_доп.ПолучитьСтроку()=1 Цикл
		//начнём со второго склада
		ОстРаспр = ТЗ_доп.НадоРаспределить;
		ТЗ_доп.КоррСклад = максДопустимо(ОстРаспр, ТЗ_доп.КоррСклад_ТекОст);			//Максимально берём со второго склада
		ОстРаспр = ОстРаспр - ТЗ_доп.КоррСклад;			
		
		//++Ерошенко 21.03.2007
		// убрано по просьбе Ивановой в связи с исключением склада "Пискарёвский"
		
		//Убираем что уже отгрузили
		//ТЗ_доп.Пискарь	= максДопустимо(ОстРаспр, ТЗ_доп.Пискарь_текОст, ТЗ_доп.РезервПискарь);			//Теперь добиваем остатками первого
		//ОстРаспр		= ОстРаспр - ТЗ_доп.Пискарь;
		
		//--Ерошенко
		
		//Убираем что уже отгрузили
		ТЗ_доп.Заказ	= ОстРаспр;// - ТЗ_доп.РезервВторой-ТЗ_доп.РезервПискарь;						//Остатки на заказ поставщику
	КонецЦикла;
               
	//++Ерошенко 20.03.2007
	// добавлено для отображения предварительной таблицы формирования документов... 
	
	//Таб = СоздатьОбъект("Таблица");
	//Таб.ВывестиСекцию("Шап");
	//ТЗ_доп.ВыбратьСтроки();
	//Пока ТЗ_доп.ПолучитьСтроку() = 1 Цикл
	//	Таб.ВывестиСекцию("Стр");
	//КонецЦикла;   
	//Таб.Показать("Таблица_распределения");
	 
	//--Ерошенко
	
	//Вот и доехали до наших любимых документиков
	//Поглядим...а не создавали-ли мы уже раньше?
    
	//++Ерошенко 21.03.2007
	// убрано перемещение по первому складу,
	// упрощено условие формирования документов..        
	
	//Если ТЗ_доп.Итог("Пискарь") <> 0 Тогда
	//	новое = ПустоеЗначение(ПеремПискарёвка);
	//	СоздайМнеПеремещение(новое,Константа.СкладОтделаПродаж1, ТЗ_доп, 6, ПеремПискарёвка);	//нам с Пискарёвки будьте любезны
	//КонецЕсли;
	
	Если ТЗ_доп.Итог("КоррСклад") <> 0 Тогда
		Новое = ПустоеЗначение(ПеремКоррСклад);
		СоздайМнеПеремещение(новое, КоррСклад, ТЗ_доп, 5, ПеремКоррСклад);	//нам с Полюстровского будьте любезны
	КонецЕсли;
	
	Если ТЗ_доп.Итог("Заказ") <> 0 Тогда
		Новое = ПустоеЗначение(ЗаказТовара);
		СоздайМнеСолянкуПоПоставкам(новое, ТЗ_доп, 4, ЗаказТовара);							//а вот это закажите пожалуйста
	КонецЕсли; 
	
	//--Ерошенко
	
КонецПроцедуры  

//*********************************************************************
//++Ерошенко 21.03.2007
Процедура Подбор()
	   
	СпрТЦ = СоздатьОбъект("Справочник.ТипыЦен");
	Если СпрТЦ.НайтиПоНаименованию("Розничная") = 1 Тогда
		ТипЦен = СпрТЦ.ТекущийЭлемент();
	Иначе
		ТипЦен = "";
	КонецЕсли;  
	
	Валюта = глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(глЗначениеПоУмолчанию("ОсновнаяФирма"),"Фирма");
	Параметры.ДобавитьЗначение(Склад,           "Склад");
	Параметры.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
	Параметры.ДобавитьЗначение(ТипЦен,          "ТипЦен");      
	Параметры.ДобавитьЗначение(Валюта,"Валюта");
	Параметры.ДобавитьЗначение(Валюта.Курс.Получить(ДатаДок),"Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры 
//--Ерошенко                
                   
//*********************************************************************
//++Ерошенко 21.03.2007
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	      
	Перем ТаблЧасть, ТаблицаПодбора;
		       
	если типзначениястр(ВыбЗнач) <> "Справочник" тогда
		ТаблицаПодбора = ВыбЗнач.Получить("ТаблицаПодбора");
		ТаблицаПодбора.ВыбратьСтроки();
		Пока ТаблицаПодбора.ПолучитьСтроку() = 1 Цикл
			       
			ТекНом = ТаблицаПодбора.Номенклатура;
			ТекКол = ТаблицаПодбора.Количество;
			
			НашлиВДокументе = 0;
			ВыбратьСтроки();
			Пока ПолучитьСтроку() = 1 Цикл
				Если Номенклатура = ТекНом Тогда
					НашлиВДокументе = 1;
					Заказ = Заказ + ТекКол;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НашлиВДокументе = 0 Тогда
				НоваяСтрока();
				Номенклатура = ТекНом;
				Заказ =        ТекКол;
			КонецЕсли;
			
		КонецЦикла;
	иначе
		Если (СписокЭлементовМФ.НайтиЗначение(ВыбЗнач)=0) Тогда
			Представление=""+ВыбЗнач;
			Если ТипЗначенияСтр(ВыбЗнач)="Справочник" Тогда
				Если СокрЛП(Метаданные.Справочник(ВыбЗнач.Вид()).Владелец) <> "Метаданные" Тогда
					Представление=Представление+" ("+ВыбЗнач.Владелец+")";
				КонецЕсли;
			КонецЕсли;	
			СписокЭлементовМФ.ДобавитьЗначение(ВыбЗнач,Представление);
			ТаблицаМФ.ФлВкл=2;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ОбработкаПодбора()  
//--Ерошенко                

//*********************************************************************    
//++Ерошенко 21.03.2007
// добавлено для усложнения ввода дублей строк..
Процедура ПриВводеСтроки()     
	
	//Предупреждение("Добавление новых строк - через 'Подбор'"); 
	СтатусВозврата(0);   
	
КонецПроцедуры
//--Ерошенко                
//МЭТР+
// инициализация переменных множественного фильтра

ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
ТекСтрокаВТаблице="";
//МЭТР-

ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
ТЗ3			=      СоздатьОбъект("ТаблицаЗначений");
ТЗ2			=      СоздатьОбъект("ТаблицаЗначений");
Рег1		=      СоздатьОбъект("Регистр.ОстаткиТМЦ");
Рег2		=      СоздатьОбъект("Регистр.РезервыТМЦ2");
Склад_темп	=      СоздатьОбъект("Справочник.Склады");