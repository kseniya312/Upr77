////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокДействий; // для механизма кнопки "Действия"

Перем ТаблицаПечФорм;  // список печатных форм документа
Перем НомерТекущейФормы;

Перем СтараяДата, СтараяФирма, СтарыйСклад, СтараяСкидка;
Перем СтарыйКонтрагент, СтарыйДоговор;
Перем НачальнаяДатаДокумента; // для механизма контроля уникальности номеров

Перем ТекущийДолг;

// для выбора розничных цен, по которым есть остатки и показа остатков
Перем ОбщРег, ОстаткиТМЦ, РезервыТМЦ, СписокПараметров; 

Перем ТекстВопросаЗаполнить[2];

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                
//*****************************************************************************
// ТекстВалюты(Вал)
//
// Параметры: 
//  Вал - элемент справочника "Валюты"
//
// Возвращаемое значение: 
//  Строка валюты
//
// Описание:
// 	Возвращает название валюты или строку "<нет валюты>"
//
Функция ТекстВалюты(Вал) 
	
	Возврат ?(ПустоеЗначение(Вал) = 0, Вал.Наименование, "<нет валюты>");
	
КонецФункции                                                                    

//******************************************************************************
// УправлениеВидимостью()
//
// Описание:
//  Делает видимыми или невидимыми колонки НП и НДС в зависимости от флагов 
//  "УчитыватьНП" и "УчитыватьНДС"
//
Процедура УправлениеВидимостью()
	
	Форма.СуммаНП	.Видимость(УчитыватьНП);
	Форма.СтавкаНП	.Видимость(УчитыватьНП);
	
	Форма.СуммаНДС	.Видимость(УчитыватьНДС);
	Форма.СтавкаНДС	.Видимость(УчитыватьНДС);
	
	Форма.СуммаНДС	.Заголовок("в т.ч. НДС");
	Форма.СуммаНП	.Заголовок("в т.ч. НП");
	
	Форма.БезСкидки.Видимость(Скидка.Выбран());
	Форма.СуммаСкидки.Видимость(Скидка.Выбран());
КонецПроцедуры //УправлениеВидимостью()

//******************************************************************************
// ОбновитьНадписи()
//
// Описание:
// 	Обновляет текст информационных надписей в форме документа
Процедура ОбновитьНадписи()    
	
	Форма.ТекстОплаты	.Заголовок(глСтрокаОплаты		(Контекст)); 
	Форма.ТекстФирмы	.Заголовок(глСтрокаФирмы		(Контекст));
	Форма.ТекстКлиента	.Заголовок(глСтрокаКонтрагента	(Контекст));
	Форма.ТекстСклада	.Заголовок(глСтрокаСклада		(Склад));
	Форма.ТекстКассы	.Заголовок(Строка(Касса));
    
	Форма.РамкаВсего	.Заголовок("Всего ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНДС		.Заголовок("НДС ("+ТекстВалюты(Валюта)+")");
	Форма.РамкаНП		.Заголовок("НП ("+ТекстВалюты(Валюта)+")");
	
	УправлениеВидимостью();
	
КонецПроцедуры //ОбновитьНадписи()
                                      
//*****************************************************************************
// ЗаголовокФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Название операции
//
// Описание:
// 	Формирует название операции и заголовок формы диалога
//
Функция ЗаголовокФормы() 
	
	Перем Заголовок, Название;
	
    Заголовок 	= глНазваниеДокументаВЖурнале(Контекст);
	Название = Заголовок + " №";
	
	Если Выбран() = 1 Тогда  
		Если Проведен() = 1 Тогда
			Заголовок = Заголовок + ". Проведен";
		Иначе
			Заголовок = Заголовок + ". Не проведен";
		КонецЕсли;
	Иначе
		Заголовок = Заголовок + ". Новый";
	КонецЕсли;
	
	Форма.Заголовок(Заголовок);
	
	Возврат Название;
	
КонецФункции // ЗаголовокФормы    
                                    
//******************************************************************************                                        
// ИнформацияОНоменклатуре()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Строка информации о Номенклатуре в документе
//
// Описание:
// 	Формирует строку, включающую название, артикул Номенклатуры, реквизиты партии
//
Функция ИнформацияОНоменклатуре()
	
	Перем ОстатокНаСкладе, ОстатокПоФирме; // для показа остатков
	
	ИнфоТекст="";
	
	Если Номенклатура.Выбран()=0 Тогда
		Возврат(ИнфоТекст);
	КонецЕсли;
	
	ИнфоТекст=ИнфоТекст+СокрЛП(Номенклатура.Наименование);
	
	Если ПустоеЗначение(Номенклатура.Артикул)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" арт. "+СокрЛП(Номенклатура.Артикул);
	КонецЕсли;
	
	Если ДатаДок = ПолучитьДатуТА() Тогда   // покажем остатки
		Если Склад.РозничныйСклад = 0 Тогда // только на оптовом складе
			СписокПараметров.Установить("РезервыТМЦ", РезервыТМЦ);
			Если глПересчетРегистров(Контекст, СписокПараметров, "БезРасчетаРегистров") = 1 Тогда
//				глПолучитьОстаткиНоменклатуры(глФирмаДляОстатковТМЦ(Фирма), Номенклатура, Единица, ОстаткиТМЦ, ОстатокНаСкладе, ОстатокПоФирме, Склад, РезервыТМЦ, 1, Договор);
				Если (ПустоеЗначение(ОстатокНаСкладе) = 0) и (ПустоеЗначение(ОстатокПоФирме) = 0) Тогда
					ИнфоТекст=ИнфоТекст + " (остаток на складе: " + глФРМКоличество(ОстатокНаСкладе) + " " + Единица + "," + 
					                      " по фирме: "  + глФРМКоличество(ОстатокПоФирме) + " " + Единица + ")";
				Иначе                                     
					Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
						ИнфоТекст=ИнфоТекст+" (нет в наличии)";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Установка фильтра на регистр РезервыТМЦ нужна нам только в этой функции - отключаем
			СписокПараметров.Установить("РезервыТМЦ", "");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.ГТД)=0 Тогда        
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" ГТД: "+СокрЛП(Партия.ГТД);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.СтранаПроисхождения)=0 Тогда
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" Страна: "+СокрЛП(Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Если ПустоеЗначение(Партия.Свойство)=0 Тогда   
		ИнфоТекст=?(ИнфоТекст="","",ИнфоТекст+",");
		ИнфоТекст=ИнфоТекст+" "+Партия.Свойство.Владелец+": "+СокрЛП(Партия.Свойство);
	КонецЕсли;
	                       
	Возврат(ИнфоТекст);
	
КонецФункции //ИнформацияОНоменклатуре()

//******************************************************************************
// ПриИзмененииДаты()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "от" (Дата документа)
//
Процедура ПриИзмененииДаты()                    
	
	Если СтараяДата <> ДатаДок Тогда
	    СтараяДата = ДатаДок;
		
		// При изменении даты документа нужно проверить не изменился ли курс валюты,
		// и если изменился, то предложить пересчитать документ
		Если Итог("Сумма") = 0 Тогда
			
			// Если выбрана валюта. то меняем ее курс
			Если ПустоеЗначение(Валюта) = 0 Тогда
				Курс   = глКурсДляВалюты(Валюта, ДатаДок);
				ОбновитьНадписи();
			КонецЕсли;                                                    
			
		Иначе // Если документ уже заполнен, то предлагаем его пересчитать
			
			ПромКурс = глКурсДляВалюты(Валюта, ДатаДок);
			
			Если (	ПромКурс <> Курс ) Тогда
				Если Вопрос("На дату документа у валюты документа был задан другой курс.
						     |Установить курс документа в соответствии с курсом валюты?","Да+Нет",60) = "Да" Тогда
							
					Курс 	= ПромКурс;
	                ОбновитьНадписи();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДаты()

//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание: 
//  Вызывается из формулы реквизита диалога "Фирма"
//
Процедура ПриИзмененииФирмы()      
	
	Если СтараяФирма <> Фирма Тогда
		// только если изменили
		глПриИзмененииФирмы(Контекст);
		СтараяФирма = Фирма; 
	КонецЕсли;

КонецПроцедуры // ПриИзмененииФирмы()  

//******************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Контрагент".
//
// Описание:
//  Производит проверку выбранного контрагента.
//
Процедура ПриИзмененииКонтрагента()
	
	Если СтарыйКонтрагент <> Контрагент Тогда 
		СтарыйКонтрагент	= Контрагент;
		Договор				= Контрагент.ОсновнойДоговор;
		СтарыйДоговор		= Договор;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента()                                                                


//*****************************************************************************
Процедура ПриИзмененииДоговора()                             
	
	Если СтарыйДоговор <> Договор Тогда
		СтарыйДоговор	= Договор;
		
		Если ПустоеЗначение(Контрагент) = 1 Тогда
		    Контрагент			= Договор.Владелец;
			СтарыйКонтрагент	= Контрагент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

//******************************************************************************
// ОбновлениеРозничныхЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Производит перезаполнение розничных цен в табличной части документа из регистра.
//  Если ТМЦ на розничном складе нет, или он есть по нескольким ценам то цена обнуляется
//  и выдается соответствующее предуупреждение.
//
Процедура ОбновлениеРозничныхЦен()
	
	Перем ТовЦена, СписокЦен, ВремЦена;
	
	Если Склад.РозничныйСклад = 1 Тогда
		
		Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИзменилиЦены = 0;
		
		ВыбратьСтроки();
		Пока ПолучитьСтроку() = 1 Цикл
			
			Если Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга Тогда
				ТовЦена = "";
				глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
				СписокЦен = ЗначениеИзСтроки(ТовЦена);
				
				Если СписокЦен.РазмерСписка() = 1 Тогда
					ВремЦена = СписокЦен.ПолучитьЗначение(1);
				Иначе
					ВремЦена = 0;
				КонецЕсли;
				
				Если Цена <> ВремЦена Тогда
					Цена = ВремЦена;
					ИзменилиЦены = 1;
					глПересчетТаблЧасти(Контекст,"Цена");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ИзменилиЦены = 1 Тогда
			Предупреждение("Проверьте цены ТМЦ в документе!", 60);
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбновлениеРозничныхЦен()     

//******************************************************************************
// ПриИзмененииСклада()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Поле "Склад".
//
// Описание:
//  Производит проверку выбранного склада.
//
Процедура ПриИзмененииСклада()
	
	Если СтарыйСклад <> Склад Тогда
	
		Если Склад.Выбран()=1 Тогда   
			
			Если (Склад.РозничныйСклад = 1) Тогда
				Если (Склад.ОблагаетсяЕНВД = 1) Тогда
					НовоеОблагаетсяЕНВД = 1;
				Иначе
					НовоеОблагаетсяЕНВД = 0;
				КонецЕсли;
				
				Если ПустоеЗначение(ТипЦен) = 0 Тогда
				    ТипЦен = "";
				КонецЕсли;
			Иначе     
				НовоеОблагаетсяЕНВД = 0;
				
				Если ПустоеЗначение(ТипЦен) = 1 Тогда
				    ТипЦен	= глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
				КонецЕсли;
			КонецЕсли;                           
			
			// зададим вопрос о пересчете налогов
			Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) и (КоличествоСтрок()>0) Тогда
				ТекстВопроса = "Для склада """ + Склад.Наименование + " порядок 
					|налогообложения отличается от установленного в документе."+
					?(НовоеОблагаетсяЕНВД=1,"  Не облагается ЕНВД -> облагается ЕНВД."
					,"  Облагается ЕНВД -> не облагается ЕНВД.");
				ТекстВопроса = ТекстВопроса + РазделительСтрок+"Пересчитать суммы налогов в документе?";
				Ответ = Вопрос(ТекстВопроса ,"Да+Нет", 60); 
					
				Если Ответ = "Нет" Тогда
					НовоеОблагаетсяЕНВД = ОблагаетсяЕНВД; // не изменяем
				КонецЕсли;
			КонецЕсли;             
			
			// пересчитаем документ
			Если (НовоеОблагаетсяЕНВД <> ОблагаетсяЕНВД) Тогда
				ОблагаетсяЕНВД 	= НовоеОблагаетсяЕНВД;
				УчитыватьНДС 	= ?(ОблагаетсяЕНВД=1,0,1);
				УчитыватьНП 	= ?(ОблагаетсяЕНВД=1,0,ЮрЛицо.УчитыватьНП);
				глПересчитатьНалоги(Контекст, СуммаВклНП, СуммаВклНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если Склад.РозничныйСклад = 1 Тогда
			// на розн.складе всем разрашаем выбирать цену из списка
		    Форма.Цена.Доступность(1);
			Форма.Цена.Редактирование(0);
		Иначе
			Форма.Цена.Доступность(глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах"));
			Форма.Цена.Редактирование(1);
		КонецЕсли;
	
		ОбновлениеРозничныхЦен();
		
		СтарыйСклад = Склад;
	КонецЕсли; // СтарыйСклад <> Склад
	
КонецПроцедуры // ПриИзмененииСклада()

//*****************************************************************************
// ПоКнопкеЦены()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке редактирования параметров оплаты в документе
//
Процедура ПоКнопкеЦены()
	
	Перем КонтекстДокумента;
	
	КонтекстДокумента = глВзятьКонтекст(Контекст);
	ОткрытьФормуМодально("Обработка.ИнформацияОценах", КонтекстДокумента);
	
	ОбновитьНадписи();
	
КонецПроцедуры // ПоКнопкеЦены()    

//******************************************************************************
// ЗаполнитьПоИнвентаризации(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - возникла ошибка
//
// Описание:
//  Заполняет документ на основании документа Инвентаризация по рознице
//
Функция ЗаполнитьПоИнвентаризации(ОписаниеОш)
	Если ДокОснование.ВидОперации <> Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
		ОписаниеОш	= "Выбранная инвентаризация не является инвентаризацией по рознице!";
		Рез			= 0;
	Иначе
		Валюта 		= ДокОснование.Валюта;
		Курс 		= ДокОснование.Курс;
		
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		
		// очищаем наш документ
		УдалитьСтроки();  
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			Если (ТаблицаДокумента.КоличествоУчет > ТаблицаДокумента.Количество) Тогда
				// т.е. по учету больше чем факт, т.е. куда - то пропало
				НоваяСтрока();
				Номенклатура= ТаблицаДокумента.Номенклатура;
				Количество 	= ТаблицаДокумента.КоличествоУчет - ТаблицаДокумента.Количество;
				Единица 	= ТаблицаДокумента.Единица;
				Коэффициент = ТаблицаДокумента.Коэффициент;
				Цена 		= ТаблицаДокумента.Цена; 
				СтавкаНДС 	= Номенклатура.СтавкаНДС;
				СтавкаНП 	= Номенклатура.СтавкаНП;
				
				ВремСумма	= (Цена * Количество);
				Сумма		= ВремСумма - ВремСумма * Скидка.Процент / 100;
				
				глПересчетТаблЧасти(Контекст,"Сумма");
			КонецЕсли;
		КонецЦикла; // по строкам основания       
		
		Если КоличествоСтрок() = 0 Тогда
			ОписаниеОш	= "Документ - основание не содержит строк с отклонениями учетного количества от фактического!";
			Рез	= 0;
		Иначе
			Рез	= 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗаполнитьПоИнвентаризации()

//******************************************************************************
// РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура РассчитатьСуммыПоВарианту(ПарСуммаВсего, КоэффНДС, КоэффНП, ПарСумма, ПарСуммаНДС, ПарСуммаНП)
	
	Если УчитыватьНП = 1 Тогда
		ПарСуммаНП = ПарСуммаВсего * КоэффНП;
		СуммаБезНП = ПарСуммаВсего - ПарСуммаНП;
		Если СуммаВклНП = 0 Тогда
			ПарСумма = СуммаБезНП;
		Иначе
			ПарСумма = ПарСуммаВсего;
		КонецЕсли;
	Иначе
		ПарСумма   = ПарСуммаВсего;
		СуммаБезНП = ПарСуммаВсего;
		ПарСуммаНП = 0;
	КонецЕсли;
	
	Если УчитыватьНДС = 1 Тогда
		ПарСуммаНДС = СуммаБезНП * КоэффНДС;
		Если СуммаВклНДС = 0 Тогда
			ПарСумма = ПарСумма - ПарСуммаНДС;
		КонецЕсли;
	Иначе
		ПарСуммаНДС = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммыПоВарианту()

//******************************************************************************
// ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, ОстатокПоЗаявке, ВремОстаткиТМЦ, КонтрольРезервов, ВремРезервыТМЦ = "")
//
// Параметры:
//  ФирмаДляОстатковТМЦ - список значений, содержащий элементы справочника Фирмы, или
//                        один элемент справочника Фирмы (пустое значение, если остатки контролируются по компании)
//  ТекНоменклатура     - элемент справочника Номенклатура 
//  ОстатокПоЗаявке     - число - количество неотгруженных ТМЦ по заявке 


//  ВремОстаткиТМЦ     - Регистр "ОстаткиТМЦ", рассчитанный и с наложенными фильтрами
//  КонтрольРезервов   - флаг - если = 1, то необходимо учитывать резерв; если = 0, то резерв не учитывается
//  ВремРезервыТМЦ     - регистр "РезервыТМЦ", рассчитанный и с наложенными фильтрами (не обязатльный).                     
//
// Возвращаемое значение:
//  Количество ТМЦ, которое можно отгрузить по заявке.
//
// Описание:
//  Получение количества ТМЦ, которое можно отгрузить (с учетом свободного остатка), по переданным параметрам.
// Процедура полностью аналогична одноименной процедуре в модуле формы документа "Реализация".
Функция ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, ОстатокПоЗаявке, ВремОстаткиТМЦ, КонтрольРезервов, ВремРезервыТМЦ = "")

	РезервНаСкладе = 0;
	РезервПоФирме  = 0;
	Если КонтрольРезервов = 1 Тогда
		Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда // Фильтр по фирме не нужен
			
			РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,,"Количество"); 
			РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,     ,,,"Количество"); 
			
			// Вычтем резервы, котрые сделал наш же покупатель
			РезервНаСкладе = РезервНаСкладе - 
			                 ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,Договор,,"Количество");
			РезервПоФирме  = РезервПоФирме  - 
				             ВремРезервыТМЦ.СводныйОстаток(,ТекНоменклатура,     ,Договор,,"Количество");
			
		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда // Нужны сводные остатки по нескольким фирмам
			
			СчетчикЦикла = 0;
			Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
				
				ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
				РезервНаСкладе = РезервНаСкладе + 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,,"Количество"); 
				РезервПоФирме  = РезервПоФирме + 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,,,"Количество"); 
					
				// Вычтем резервы, котрые сделал наш же покупатель
				РезервНаСкладе = РезервНаСкладе - 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,Договор,,"Количество"); 
				РезервПоФирме  = РезервПоФирме  - 
				                 ВремРезервыТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,Договор,,"Количество");
			КонецЦикла;
			
		ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда  // нужны сводные остатки только по одной фирме
			
			РезервНаСкладе = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,,"Количество"); 
			РезервПоФирме  = ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,,,"Количество"); 
			
			// Вычтем резервы, котрые сделал наш же покупатель
			РезервНаСкладе = РезервНаСкладе - 
			                 ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,Договор,,"Количество"); 
			РезервПоФирме  = РезервПоФирме  - 
				             ВремРезервыТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,Договор,,"Количество");
		КонецЕсли;
	КонецЕсли;                                                                        
	    
	ОстатокНаСкладе = 0; 
	ОстатокПоФирме  = 0;
		
	// Остаток на складе.
	Если ПустоеЗначение(ФирмаДляОстатковТМЦ) = 1 Тогда
		
		ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,Склад,,"Количество"); 
		ОстатокПоФирме  = ВремОстаткиТМЦ.СводныйОстаток(,ТекНоменклатура,     ,,"Количество");
		
	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "Справочник" Тогда
		
		ОстатокНаСкладе = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,Склад,,"Количество"); 
		ОстатокПоФирме  = ВремОстаткиТМЦ.СводныйОстаток(ФирмаДляОстатковТМЦ,ТекНоменклатура,     ,,"Количество");
		
	ИначеЕсли ТипЗначенияСтр(ФирмаДляОстатковТМЦ) = "СписокЗначений" Тогда 
		
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По ФирмаДляОстатковТМЦ.РазмерСписка() Цикл
			ТекФирма = ФирмаДляОстатковТМЦ.ПолучитьЗначение(СчетчикЦикла);
			ОстатокНаСкладе = ОстатокНаСкладе + 
			                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,Склад,,"Количество"); 
			ОстатокПоФирме  = ОстатокПоФирме + 
			                  ВремОстаткиТМЦ.СводныйОстаток(ТекФирма,ТекНоменклатура,     ,,"Количество");
		КонецЦикла;
		
	КонецЕсли;
		
	СвободныйОстатокНаСкладе = Макс(ОстатокНаСкладе - РезервНаСкладе, 0);
	СвободныйОстатокПоФирме  = Макс(ОстатокПоФирме  - РезервПоФирме , 0);
	
	Возврат Мин(ОстатокПоЗаявке, СвободныйОстатокНаСкладе, СвободныйОстатокПоФирме);
		
КонецФункции // ПолучитьКоличество()

//******************************************************************************
// ЗаполнитьПоЗаявке(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - возникла ошибка
//
// Описание:
//  Заполняет документ на основании документа ЗаявкаПокупателя.
//
Функция ЗаполнитьПоЗаявке(ОписаниеОш)
	
	Перем ЗарезервированниеТовары, ТекСтрокаИтогов;
	 
	// Фирма и договор (контрагента) должны быть заполнены.
	Если ПустоеЗначение(Фирма) = 1 Тогда
		ОписаниеОш	= "Не выбрана фирма!";
		Возврат 0;
	КонецЕсли;
	
    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
	Если ПустоеЗначение(Договор) = 1 Тогда
		ОписаниеОш	= "Не выбран договор контрагента!";
		Возврат 0;
	КонецЕсли;
	
	РегОбщ = СоздатьОбъект("Регистры");
	РегЗаявки  = РегОбщ.Заявки;
	РегОстатки = РегОбщ.ОстаткиТМЦ;
	РегРезервы = РегОбщ.РезервыТМЦ;
	
	// Установим фильтры на регистр "Заявки".
	РегЗаявки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
	РегЗаявки.УстановитьЗначениеФильтра("ДоговорПокупателя", Договор, 1);
	                           
	ЗаполнятьПоОснованию = 0; // Флаг варианта заполнения
	ЗаполнятьСУчетомРезервов = 0;   
	ЗаполнятьСУчетомОстатков = 0; 
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		Если ДокОснование.КоличествоСтрок() > 0 Тогда
			
			ЗаполнятьПоОснованию = 1;
			
			// Если есть заказ, то заполняем недополученными по нему товарами
			РегЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ДокОснование, 1);
			
	        // Получим список номенклатуры для установки фильтров
			СписокТоваров = СоздатьОбъект("СписокЗначений");
			ДокОснование.ВыгрузитьТабличнуюЧасть(СписокТоваров, "Номенклатура");
		
			РегЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			
			// Определим необходимо ли контролировать остатки,
			// а, следовательно, заполнять с учетом свободных остатков.
			Если Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать Тогда 
				ЗаполнятьСУчетомОстатков = 0; 
			Иначе
				ЗаполнятьСУчетомОстатков = 1; 
				Если глПолучитьПолномочие("РазрешитьПродаватьРезерв") = 0 Тогда
					ЗаполнятьСУчетомРезервов = 1;
				КонецЕсли;
			КонецЕсли;
		
			// Если склад не выбран, то заполним без учета остатков
			Если ПустоеЗначение(Склад) = 1 Тогда
				ЗаполнятьСУчетомОстатков = 0;
			КонецЕсли;
			
			// Установим фильтры на регистры: "ОстаткиТМЦ", "РезервыТМЦ".
			Если ЗаполнятьСУчетомОстатков = 1 Тогда
				РегОстатки.УстановитьЗначениеФильтра("Фирма",  ФирмаДляОстатковТМЦ, 2);
				РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			КонецЕсли;
			Если ЗаполнятьСУчетомРезервов = 1 Тогда
				РегРезервы.УстановитьЗначениеФильтра("Фирма",  ФирмаДляОстатковТМЦ, 2);
				РегРезервы.УстановитьЗначениеФильтра("Номенклатура", СписокТоваров, 2);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Если нужно, то выполним временный расчет регистра
	Если Выбран() = 0 Тогда // новый документ
		Если ДатаДок < ПолучитьДатуТА() Тогда // выписываемый задним числом
			РегЗаявки.ВременныйРасчет();
			РегОстатки.ВременныйРасчет(ЗаполнятьСУчетомОстатков);
			РегРезервы.ВременныйРасчет(ЗаполнятьСУчетомРезервов);
			РегОбщ.РассчитатьРегистрыПо(ДатаДок);
		КонецЕсли;
	Иначе // сохраненный документ
		Если СравнитьТА() < 1 Тогда // позиция не больше ТА
			РегЗаявки.ВременныйРасчет();
			РегОстатки.ВременныйРасчет(ЗаполнятьСУчетомОстатков);
			РегРезервы.ВременныйРасчет(ЗаполнятьСУчетомРезервов);
			РегОбщ.РассчитатьРегистрыНа(ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
	РегЗаявки.ВыгрузитьИтоги(ЗарезервированниеТовары, 1, 1);
	ЗарезервированниеТовары.Свернуть("Номенклатура", "КоличествоРасход,СтоимостьРасход");
		                
	Если ЗаполнятьПоОснованию = 0  Тогда
		
		ВалютаОстатков = Договор.ВалютаВзаиморасчетов;
		
		ЗарезервированниеТовары.ВыбратьСтроки();
		
		СуммаВзаиморасчетов = 0;
		Пока ЗарезервированниеТовары.ПолучитьСтроку() = 1 Цикл
			НоваяСтрока();
			
			Номенклатура = ЗарезервированниеТовары.Номенклатура;
			Единица      = Номенклатура.ОсновнаяЕдиница;
			Коэффициент  = Единица.Коэффициент;
			Количество   = ЗарезервированниеТовары.КоличествоРасход / ?(Коэффициент = 0, 1, Коэффициент);
			
			Если УчитыватьНДС = 1 Тогда
				СтавкаНДС = Номенклатура.СтавкаНДС;
			КонецЕсли;
			Если УчитыватьНП = 1 Тогда
				СтавкаНП = Номенклатура.СтавкаНП;
			КонецЕсли;
			
			ОбщСумма     = глПересчет(ЗарезервированниеТовары.СтоимостьРасход, ВалютаОстатков, ДатаДок, Валюта, Курс);
			
			ВремСтавкаНП = Номенклатура.СтавкаНП.Ставка;
			
			РассчитатьСуммыПоВарианту
			(
			ОбщСумма, 
			глВыделяемыйНДС(Номенклатура.СтавкаНДС), // коэффициент выделяемого НДС
			ВремСтавкаНП/(100 + ВремСтавкаНП),       // коэффициент выделяемого НП
			Сумма, СуммаНДС, СуммаНП
			);
			
			СуммаВзаиморасчетов = СуммаВзаиморасчетов + ЗарезервированниеТовары.СтоимостьРасход;
			
			Если Количество <> 0 Тогда
				Цена = Сумма / Количество;
			Иначе
				Цена = Сумма;
			КонецЕсли;         
		КонецЦикла;
		
	Иначе // Заполняем по основанию
		
		// При заполнении на основании Заявки цены, суммы и скидки надо брать из основания
		ТаблицаДокумента = СоздатьОбъект("ТаблицаЗначений");
		ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаДокумента);
		
		ВалютаОсн	= ДокОснование.Валюта;
		КурсОсн		= ДокОснование.Курс;
		
		ТаблицаДокумента.ВыбратьСтроки();
		Пока ТаблицаДокумента.ПолучитьСтроку()=1 Цикл
			
			// Есть остатки по этой строке? 
			ТекСтрокаИтогов = 0;
			Если ЗарезервированниеТовары.НайтиЗначение(ТаблицаДокумента.Номенклатура, ТекСтрокаИтогов, "Номенклатура") = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			КоличествоРасход = ЗарезервированниеТовары.ПолучитьЗначение(ТекСтрокаИтогов, "КоличествоРасход");
			Если КоличествоРасход = 0 Тогда // нет остатков
				Продолжить;
			КонецЕсли;
			
			ТекНоменклатура = ТаблицаДокумента.Номенклатура;
			
			Отпустить = Мин(ТаблицаДокумента.Количество, КоличествоРасход / ТаблицаДокумента.Коэффициент);;
			Если ТекНоменклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
				
				// Считаем, что оказать услуги нам ничего не мешает.
				МожноОтпустить  = Отпустить;
			Иначе
				Если ЗаполнятьСУчетомОстатков = 1 Тогда
					
					// Получим количество с учетом свободного остатка и на складе, и по фирме.
					МожноОтпустить = ПолучитьКоличество(ФирмаДляОстатковТМЦ, ТекНоменклатура, Отпустить,
					                                    РегОстатки, ЗаполнятьСУчетомРезервов, РегРезервы);
				Иначе	
					МожноОтпустить = Отпустить;
				КонецЕсли;
			КонецЕсли;
			
			Если МожноОтпустить = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока();
			СтавкаНДС 	= ТаблицаДокумента.СтавкаНДС;
			СтавкаНП 	= ТаблицаДокумента.СтавкаНП;
			Номенклатура= ТаблицаДокумента.Номенклатура;
			Единица 	= ТаблицаДокумента.Единица;
			Коэффициент = ТаблицаДокумента.Коэффициент;
			Количество 	= МожноОтпустить;
			Цена 		= глПересчет(ТаблицаДокумента.Цена, ВалютаОсн, КурсОсн, Валюта, Курс);
			ВремСумма 	= ТаблицаДокумента.Сумма * Количество / ТаблицаДокумента.Количество; // для учета скидок в документе основании
			Сумма		= глПересчет(ВремСумма, ВалютаОсн, КурсОсн, Валюта, Курс);
			
			глПересчетТаблЧасти(Контекст,"Сумма");
		КонецЦикла; // по строкам основания
		
		ОснованиеСумма = ДокОснование.Итог("Сумма");
		СуммаВзаиморасчетов	= ?(ОснованиеСумма = 0, 0, ДокОснование.СуммаВзаиморасчетов * Итог("Сумма") / ОснованиеСумма);
		
	КонецЕсли; // ЗаполнятьПоОснованию = 0

	Если КоличествоСтрок() = 0 Тогда
		ОписаниеОш	= "Все заказанные товары либо получены, либо их нет в наличии!";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;

	Возврат Рез;
	
КонецФункции // ЗаполнитьПоЗаявке()

//******************************************************************************
// ЗаполнениеПоДокументуОснованию()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Производит заполнение документа по документу  - основанию.
//
Функция ЗаполнениеПоДокументуОснованию(ОписаниеОш)
	
	Если ДокОснование.Выбран()=0 Тогда
		Рез	= ЗаполнитьПоЗаявке(ОписаниеОш);
	Иначе
		ВидДокОсн	= ДокОснование.Вид();
		Если ВидДокОсн = "ИнвентаризацияТМЦ" Тогда
			Рез	= ЗаполнитьПоИнвентаризации(ОписаниеОш);
		ИначеЕсли ВидДокОсн = "ЗаявкаПокупателя" Тогда
			Рез	= ЗаполнитьПоЗаявке(ОписаниеОш);
		Иначе 
			Рез	= 0;
			ОписаниеОш	= "Неверный вид документа - основания!";
		КонецЕсли; // вид ДокОснования
	КонецЕсли;  
	
	Возврат Рез;
КонецФункции // ЗаполнениеПоДокументуОснованию()

//*****************************************************************************
// ПоКнопкеОснование()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке выбора документа основания                  
//
Процедура ПоКнопкеОснование()
	Перем Основание, ОписаниеОш;
	
	// если документ основание уже есть, откроем его
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ОткрытьФорму(ДокОснование);
		Возврат;
	КонецЕсли;
	
	// если документа - основания нет, позволяем выбрать его
	Основание = глВыбратьОснование(Контекст);           
	
	// Прверим основание. Склад в нем д.б. розничный
	Если ПустоеЗначение(Основание) = 0 Тогда
		// Выбрали основание
		Если Основание.Вид() = "ИнвентаризацияТМЦ" Тогда
			Если Основание.ВидОперации <> Перечисление.ВидыИнвентаризаций.ПоРознице Тогда
				Предупреждение("Выбранная инвентаризация не является инвентаризацией по рознице!",60);
				Возврат;
			КонецЕсли;
		КонецЕсли;

		глЗаполнитьШапкуНаОсн(Контекст,Основание);
		
		Если (Склад.РозничныйСклад = 1) И (ПустоеЗначение(ТипЦен) = 0) Тогда
		    ТипЦен = "";
		КонецЕсли;
				
		ТекстВопроса = "Заполнить по документу основанию?";
		Если КоличествоСтрок() <> 0 Тогда
			ТекстВопроса = ТекстВопроса + РазделительСтрок +" (перед заполнением табличная часть будет очищена)";
		КонецЕсли;
				
		Если Вопрос(ТекстВопроса, "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
			
		УдалитьСтроки();
		Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
			Предупреждение(ОписаниеОш, 60);
		КонецЕсли;
		
		СтарыйСклад			= Склад;
		СтарыйКонтрагент	= Контрагент;
		СтарыйДоговор		= Договор;
			
		ОбновитьНадписи();
	КонецЕсли;
	
КонецПроцедуры //ПоКнопкеОснование()     

//*****************************************************************************
// ПоКнопкеЗаполнить()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет
//
// Описание:
// 	Вызывается по кнопке "Заполнить".
//
Процедура ПоКнопкеЗаполнить()
	Перем ОписаниеОш;
	
	Если КоличествоСтрок() <> 0 Тогда
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
			ТекстВопроса = ТекстВопросаЗаполнить[1];
		Иначе
			Если ДокОснование.Вид() = "ЗаявкаПокупателя" Тогда
				ТекстВопроса = ТекстВопросаЗаполнить[1];
			Иначе
				ТекстВопроса = ТекстВопросаЗаполнить[2];
			КонецЕсли;
		КонецЕсли;
		
		Если Вопрос(ТекстВопроса		+
		            РазделительСтрок	+
					"(перед заполнением табличная часть будет очищена)", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УдалитьСтроки();
	
	Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
		Предупреждение(ОписаниеОш, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()
                                  
//******************************************************************************
// ПоКнопкеПодбор()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается по кнопке Подбор. Открывает форму списка справочника Номенклатура
//  в режиме подбора.
//
Процедура ПоКнопкеПодбор()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.ДобавитьЗначение(Фирма	, "Фирма");
	Параметры.ДобавитьЗначение(Склад	, "Склад");
	Параметры.ДобавитьЗначение(0		, "ЕстьВидТМЦ");
	
	Если Склад.РозничныйСклад = 1 Тогда
		Параметры.ДобавитьЗначение("Розница", "ЦенаВподборе");
	Иначе
		Параметры.ДобавитьЗначение("ИзСправочника"	, "ЦенаВподборе");
		Параметры.ДобавитьЗначение(ТипЦен			, "ТипЦен");
	КонецЕсли;

	Параметры.ДобавитьЗначение(Валюта,    "Валюта");
	Параметры.ДобавитьЗначение(Курс,      "Курс");
	
	Если Выбран() = 0 Тогда
		Параметры.ДобавитьЗначение("Дата",  "ТипГраницы");
		Параметры.ДобавитьЗначение(ДатаДок, "ЗначениеГраницы");
	Иначе
		Параметры.ДобавитьЗначение("Позиция",         "ТипГраницы");
		Параметры.ДобавитьЗначение(ПолучитьПозицию(), "ЗначениеГраницы");
	КонецЕсли;
	
	Параметры.ДобавитьЗначение("Подбор номенклатуры в документ " + ПредставлениеВида() + " № " + НомерДок, "Заголовок");
	глПодбор(Контекст, Параметры);
	
КонецПроцедуры // ПоКнопкеПодбор()

//******************************************************************************
// Печать(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура Печать(СразуНаПринтер = 0,КолЭкз = 1)         
	
	ОрганизацияПолн = СокрЛП(Фирма.ЮрЛицо.Полннаименование);
	Если ПустоеЗначение(Фирма.ЮрЛицо.ЮрАдрес) = 0 Тогда
		ОрганизацияПолн = ОрганизацияПолн + ", " + Фирма.ЮрЛицо.ЮрАдрес;
	КонецЕсли;
	Если ПустоеЗначение(Фирма.ЮрЛицо.Телефоны) = 0 Тогда
		ОрганизацияПолн = ОрганизацияПолн + ", " + Фирма.ЮрЛицо.Телефоны;
	КонецЕсли;
	
	ИтогСумма    = глПересчет(Итог("Сумма")   , Валюта, Курс, глРубли, ДатаДок);
	ИтогСуммаНДС = глПересчет(Итог("СуммаНДС"), Валюта, Курс, глРубли, ДатаДок);
	ИтогСуммаНП  = глПересчет(Итог("СуммаНП") , Валюта, Курс, глРубли, ДатаДок);
	
	Итого = ИтогСумма+?(СуммаВклНП=1,0,ИтогСуммаНП)+?(СуммаВклНДС=1,0,ИтогСуммаНДС);
	
	ИсхТабл = СоздатьОбъект("Таблица");
	
	ИсхТабл.ВывестиСекцию("Заголовок");
	ИсхТабл.ВывестиСекцию("Шапка");
	ИсхТабл.ВывестиСекцию("Строка");
	ИсхТабл.ВывестиСекцию("Итог");
	ИсхТабл.ВывестиСекцию("Подвал");
	
	ИсхТабл.НоваяСтраница();
	ИсхТабл.ВывестиСекцию("Оборот");
	
	Если СразуНаПринтер = 0 Тогда
	    ИсхТабл.Опции(0,0,0,0,ПарСтрДок,ПарСтрДок);

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			ИсхТабл.Защита(1);
		Иначе
			ИсхТабл.Защита(0);
		КонецЕсли;
		ИсхТабл.ТолькоПросмотр(1);

		ИсхТабл.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		ИсхТабл.ПараметрыСтраницы(,,,,,,,,,1,,);
		ИсхТабл.КоличествоЭкземпляров(КолЭкз);
		ИсхТабл.Напечатать(0);
	КонецЕсли; 

КонецПроцедуры

//******************************************************************************
// ПодготовитьСумму(ИспСумма, ИспВалюта)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 -
// Описание:
//
Функция ПодготовитьСумму(ИспСумма)
	Перем Рез;
	
	ИспСумма = Окр(ИспСумма, 2, 1);
	
	Если Валюта = глРубли Тогда
		ЦелСумма = Цел(ИспСумма);
		КопСумма = 100 * (Окр(ИспСумма - ЦелСумма, 2, 1));
		Рез      = "" + ЦелСумма + " руб. " + Формат(КопСумма , "Ч(0)2") + " коп.";
	Иначе
		Рез      = глФРМ(ИспСумма, Валюта);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПодготовитьСумму()

//******************************************************************************
// ПечатьПКО(СразуНаПринтер, КолЭкз)
//
// Параметры:
//  СразуНаПринтер - (1) если печать на принтер, (0) - с предварительным просмотром
//  КолЭкз - количество экземпляров печати
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//
Процедура ПечатьПКО(СразуНаПринтер = 0,КолЭкз = 1)
	Перем ТаблНДС, ТаблНП;
	
	Наименование = Фирма.ЮрЛицо.ПолнНаименование;
	ИНН          = Фирма.ЮрЛицо.ИНН;
	
	Руководитель = Фирма.ЮрЛицо.Руководитель.Получить(ДатаДок);
	Глбухгалтер  = Фирма.ЮрЛицо.Глбухгалтер.Получить(ДатаДок);
	Кассир       = Фирма.ЮрЛицо.Кассир.Получить(ДатаДок);
	
	ПринятоОт    = "Прием выручки ККМ";
	Основание    = "Лента ККМ № " + НомерЛентыККМ;
	Приложение   = "";
	
	Если Проведен()=1 Тогда
		Рез = "";
		глОпределитьКоррСчетаДокумента(ТекущийДокумент(),Рез,"50",1);
		КрСчДб = Рез.Получить("СчетаДебета");
		КрСчКр = Рез.Получить("СчетаКредита");
	Иначе
		КрСчДб = "";
		КрСчКр = "";
	КонецЕсли;

	ВыгрузитьТабличнуюЧасть(ТаблНДС, "СтавкаНДС, СуммаНДС");
	// свернем по ставкам
	ТаблНДС.Свернуть("СтавкаНДС", "СуммаНДС");
	
	ВыгрузитьТабличнуюЧасть(ТаблНП, "СтавкаНП, СуммаНП");
	// свернем по ставкам
	ТаблНП.Свернуть("СтавкаНП", "СуммаНП");
	
	СуммаИтог = Итог("Сумма");
	Если СуммаВклНДС = 0 Тогда
		СуммаИтог = СуммаИтог + Итог("СуммаНДС");
	КонецЕсли;
	
	Если СуммаВклНП = 0 Тогда
		СуммаИтог = СуммаИтог + Итог("СуммаНП");
	КонецЕсли;
	
	СтрСумма  = "";

	ТаблНП.ВыбратьСтроки();
	Пока ТаблНП.ПолучитьСтроку() = 1 Цикл
		Если ТаблНП.СуммаНП > 0 Тогда
			ПроцНП     = ТаблНП.СтавкаНП.Ставка;
			СтрСумма  = "НП(" + ПроцНП + "%) " + ПодготовитьСумму(ТаблНП.СуммаНП) + "; "; 
			ЕстьНП    = 1;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьНДС = 0;
	
	Если ТаблНП.КоличествоСтрок() = 0 Тогда
		СтрСумма = СтрСумма + " без налога (НДС)";
	Иначе
		
		ТаблНДС.ВыбратьСтроки();
		Пока ТаблНДС.ПолучитьСтроку() = 1 Цикл
			Если ТаблНДС.СуммаНДС > 0 Тогда
				СтрСумма = СтрСумма + " НДС(" + ТаблНДС.СтавкаНДС + ") " + ПодготовитьСумму(ТаблНДС.СуммаНДС) + "; "; 
				ЕстьНДС = 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если (ЕстьНДС + ЕстьНП) > 0 Тогда
	    СтрСумма = "В том числе " + СтрСумма;
	КонецЕсли;
	
	Таб	= СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ПКО");
	Таб.Вывести();
	
	Если СразуНаПринтер = 0 Тогда
		Таб.Опции(0,0,0,0,"ОпцииПечатиПриходногоОрдера","ОпцииПечатиПриходногоОрдера");

		Если глПолучитьПолномочие("РазрешитьРедактированиеТаблиц") = 0 Тогда
			Таб.Защита(1);
		Иначе
			Таб.Защита(0);
		КонецЕсли;
		Таб.ТолькоПросмотр(1);

		Таб.Показать(глНазваниеДокументаВжурнале(Контекст),"");  
	Иначе     
		Таб.ПараметрыСтраницы(,,,,,,,,,1,,);
		Таб.КоличествоЭкземпляров(КолЭкз);
		Таб.Напечатать(0);
	КонецЕсли; 
	
КонецПроцедуры // ПечатьПКО

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	// проверим полномочия печати непроведенных документов
	Если Проведен() = 0 Тогда
		Если глПолучитьПолномочие("РазрешитьПечатьНепроведенныхДокументов") = 0 Тогда
			Предупреждение("Недостаточно полномочий для печати непроведенного документа!", 60);
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1 Тогда
		Печать(СразуНаПринтер, КолЭкз);
	ИначеЕсли НомерТекущейФормы = 2 Тогда
		ПечатьПКО(СразуНаПринтер, КолЭкз);
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Документ." + Вид(), ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыборПечатнойФормы()

//******************************************************************************
// ПриИзмененииНоменклатуры()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Колонка "Номенклатура" табличной части документа.
//
// Описание:
//  Производит проверку правильности выбора номенклатуры
//
Процедура ПриИзмененииНоменклатуры()
	
	глПересчетТаблЧасти(Контекст,Форма.ТекущаяКолонка(),СписокПараметров);	

	// для услуги цены можно редактировать, иначе нужно выбирать из остатков регистра
	Если (Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга) ИЛИ (Склад.РозничныйСклад = 0) Тогда
		Форма.Цена.Редактирование(1);
	Иначе
		Форма.Цена.Редактирование(0);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатуры() 
//******************************************************************************
// ПриИзмененииСуммы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Сумма.
//
// Описание:
//  Производит пересчеты при изменении суммы.
//
Процедура ПриИзмененииСуммы()
	     
	Если Цена = 0 Тогда
	    Предупреждение("Выберите розничную цену
		               |в колонке ""Цена""!",60);
		Сумма = 0;
	КонецЕсли;
	глРасчетНалога(Контекст,"НП");
	глРасчетНалога(Контекст,"НДС");
	
КонецПроцедуры // ПриИзмененииСуммы()

//////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//                    
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНаОсновании(ДокументОснование)
	Перем ОписаниеОш;
	
	СинонимДокумента	= ПредставлениеВида();
	СинонимОснования	= ДокументОснование.ПредставлениеВида();
	
	Список	= глПолучитьСписокВводимыхНаОсновании(ДокументОснование);
	Поз		= Список.НайтиЗначение(Вид());
	
	// выполним проверку, можно ли вводить документ на основании ДокументОснование
	Если Поз = 0 Тогда
		// ДокументОснование не найден в списке разрешенных
		Предупреждение("Документ """ + СинонимДокумента +
		                """ нельзя вводить на основании """ + СинонимОснования + """", 60);
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	глЗаполнитьШапкуНаОсн(Контекст,ДокументОснование);
	
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Валюта	 = глРубли;
	КонецЕсли;
	Курс		 = глКурсДляВалюты(Валюта, ДатаДок);
    
	УчитыватьНДС = 1;
	УчитыватьНП  = 1;
	СуммаВклНДС  = 1;
	СуммаВклНП 	 = 1;     
	
	ПриИзмененииСклада(); // если склад облагается ЕНВД, то проставим флаг в документе
	
	Если ЗаполнениеПоДокументуОснованию(ОписаниеОш) = 0 Тогда
		Сообщить(ОписаниеОш);
		СтатусВозврата(0);
	КонецЕсли;
	
	СтарыйСклад			= Склад;
	СтарыйКонтрагент	= Контрагент;
	СтарыйДоговор		= Договор;
		
КонецПроцедуры // ВводНаОсновании()

//******************************************************************************
// предопределенная процедура  
//
Процедура ВводНового(Скопирован)
	                  
	глЗаполнитьШапку(Контекст, Скопирован, "Продажа");
	
	Если Скопирован = 1 Тогда  // 
		
		Возврат;
		
	КонецЕсли;
	
	Если ПустоеЗначение(Касса) = 1 Тогда
	    Касса = глЗначениеПоУмолчанию("ОсновнаяКасса");
	КонецЕсли;
	
	СуммаВклНДС 	= 1;
	СуммаВклНП 		= 1;  
	УчитыватьНДС 	= 1;
	УчитыватьНП 	= 1;
	УчитыватьЕНВД 	= 0;      
	                     
	ПриИзмененииФирмы();
	ПриИзмененииСклада(); // если склад облагается ЕНВД, то проставим флаг в документе
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// предопределенная процедура
//
Процедура ПриОткрытии() 
	                    
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Документ." + Вид(),ТаблицаПечФорм);
	
	Парам = Форма.Параметр;
	Если ТипЗначенияСтр(Парам)="СписокЗначений" Тогда
		Если ПустоеЗначение(Парам.Получить("Команда"))=1 Тогда
			Сообщить("В форму документа "+Вид()+" передан неверный параметр!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
		Если Парам.Получить("Команда") = "ПечатьНаПринтер" Тогда
			КолЭкз = Макс(Число(Парам.Получить("КолЭкз")),1);
			ПоКнопкеПечать(1,КолЭкз);
			СтатусВозврата(0);Возврат;
		ИначеЕсли Парам.Получить("Команда") = "ПечатьНаЭкран" Тогда
			ПоКнопкеПечать(0);                
			СтатусВозврата(0);Возврат;
		Иначе
			Сообщить("В форму документа "+Вид()+" передана неверная команда "+Парам.Получить("Команда")+"!","I");
			СтатусВозврата(0);Возврат;
		КонецЕсли;
	КонецЕсли;

	// инициализация модульных переменных, контролирующих выполнение
	// пересчетов и обновление надписей в форме
	НачальнаяДатаДокумента	= ДатаДок;
	СтараяДата				= ДатаДок;
	СтараяФирма				= Фирма;               
	СтарыйСклад 			= Склад;
	СтараяСкидка            = Скидка;
	СтарыйКонтрагент		= Контрагент;
	СтарыйДоговор			= Договор;
	
	Форма.Номенклатура	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Единица		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Количество	.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Цена			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.Сумма			.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНДС		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СуммаНП		.ВыполнятьФормулуТолькоПриИзменении(1);
	Форма.СтавкаНП		.ВыполнятьФормулуТолькоПриИзменении(1);

	глПроверкаРазрешенияРедактирования(Контекст);
	
	Если Склад.РозничныйСклад = 1 Тогда
		// на розн.складе всем разрашаем выбирать цену из списка
	    Форма.Цена.Доступность(1);
		Форма.Цена.Редактирование(0);
	КонецЕсли;
	
	// если дата проведенного документа больше ТА, то открываем только на просмотр,
	// так как его все равно не удастся сохранить после редактирования.
	Если (Проведен() = 1) И (ДатаДок > ПолучитьДатуТА()) Тогда
		Форма.ТолькоПросмотр(1);
	КонецЕсли;
	
	//Инициализирум список действий по кнопке "Действия"
	СписокДействий = СоздатьОбъект("СписокЗначений");
	СписокДействий.ДобавитьЗначение("Отчет о движениях документа");    
	СписокДействий.ДобавитьЗначение("Отчет о бухгалтерских проводках");
	СписокДействий.ДобавитьЗначение("Структура подчиненности");
              
	// Если открыли только на просмотр, то надо кнопки сделать недоступными
	Если Форма.ТолькоПросмотр()=1 Тогда
	    // СДЕЛАТЬ НЕДОСТУПНЫМИ КНОПКИ МОДИФИКАЦИИ ДОКУМЕНТА
		Форма.кнОК.Доступность(0);    
		Форма.кнХОснование.Доступность(0);
		Форма.кнХПроект.Доступность(0);
		Форма.кнЗаписать.Доступность(0);
		Форма.кнПровести.Доступность(0);
		Форма.кнЗаполнить.Доступность(0);
		Форма.кнПодбор.Доступность(0);
		Форма.кнЦены.Доступность(0);
		
		Если ПустоеЗначение(ДокОснование) = 1 Тогда
		    // только если документ основание отсутствует
			Форма.кнОснование.Доступность(0);
		КонецЕсли;
	Иначе
		СписокДействий.ДобавитьЗначение("Добавить из документа");
		СписокДействий.ДобавитьЗначение("Изменить спецификацию");
	КонецЕсли;
	                       
	СписокДействий.ДобавитьЗначение("Ввести на основании");
	СписокДействий.ДобавитьЗначение("Перейти в журнал");
	
	// кнопка по умолчанию
	Если (Форма.ТолькоПросмотр() = 1) ИЛИ ((ДатаДок < Макс(РабочаяДата(), ПолучитьДатуТА()) ) И (Выбран() = 1)) Тогда
	    Форма.КнопкаПоУмолчанию("кнЗакрыть");
	Иначе
	    Форма.КнопкаПоУмолчанию("кнОК");
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Шапка");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	          
	Если Выбран() = 0 Тогда
		глАктивизироватьРеквизит(Контекст);
		
		Форма.Закладки.ТекущаяСтрока(1);
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		// введенный документ открываем на второй закладке
		Форма.Закладки.ТекущаяСтрока(2);
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;
		
	ОбновитьНадписи();
	
	//Если документ еще не проведен, тогда 
	//проведение делаем только в потоке
	Если ( Проведен() = 0 ) Тогда
		ПроводитьПослеТА(1,1);
	КонецЕсли;  
	
КонецПроцедуры // ПриОткрытии()       
                     
//******************************************************************************
// предопределенная процедура

Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Шапка,Основной,Подвал");
	Иначе
		ОбновитьНадписи();
		Форма.ИспользоватьСлой("Шапка,ТабличнаяЧасть,Подвал");
	КонецЕсли;       
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// предопределенная процедура
// 
Процедура ПриНачалеРедактированияСтроки()
	     
	// для услуги цены можно редактировать, иначе нужно выбирать из остатков регистра
	Если (Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга) или (Склад.РозничныйСклад <> 1) Тогда
		Форма.Цена.Редактирование(1);
	Иначе
		Форма.Цена.Редактирование(0);
	КонецЕсли;
	
	Если (Форма.ТекущаяКолонка() = "ТекстПартия") и (Номенклатура.Выбран()=1) Тогда
		                   
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Возврат;
		КонецЕсли;
		// формируем список параметров для передачи в форму
		Параметр	= СоздатьОбъект("СписокЗначений");
		Параметр.ДобавитьЗначение(Фирма			, "Фирма");	
		Параметр.ДобавитьЗначение(Склад			, "Склад");	
		Параметр.ДобавитьЗначение(Номенклатура	, "Номенклатура");	
		Параметр.ДобавитьЗначение(Партия		, "Партия");	
		Параметр.ДобавитьЗначение(глВзятьКонтекст(Контекст)	, "Контекст");	
	
		// открываем форму 
		ОткрытьФормуМодально("Справочник.Партии.ДляВыбораПартии", Параметр);
	
		// получаем параметр возврата.
		Если Параметр.Получить("СтатусВозврата") = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Партия	= Параметр.Получить("Партия");
		          
	ИначеЕсли (Форма.ТекущаяКолонка() = "ОткрытьПартию") Тогда
		Если Партия.Выбран()=0 Тогда
			Предупреждение("Не могу открыть карточку партии: партия не указана!",60);
		Иначе     
			ОткрытьФорму(Партия);
		КонецЕсли;
	
	ИначеЕсли Форма.ТекущаяКолонка() = "Цена" Тогда 
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		И    (ПустоеЗначение(Склад.РозничныйСклад) = 1)			
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	
	ИначеЕсли (Форма.ТекущаяКолонка() = "Сумма"   )
	или       (Форма.ТекущаяКолонка() = "СуммаНП" )
	или       (Форма.ТекущаяКолонка() = "СуммаНДС")
	Тогда
		Если (Форма.ПолучитьАтрибут(Форма.ТекущаяКолонка()).Доступность()   = 0)
		И    (глПолучитьПолномочие("РазрешитьРедактированиеЦенВдокументах") = 0)
		Тогда
			Предупреждение("Редактирование цен запрещено в соответствии
			|с установленными полномочиями пользователя!", 60);
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры //ПриНачалеРедактированияСтроки()
                                                  
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Цена" Тогда 
		Если (Склад.РозничныйСклад = 1) И (Номенклатура.ВидНоменклатуры <> Перечисление.ВидыНоменклатуры.Услуга) Тогда
			ФлагСтандОбр = 0;
			// регистры рассчитываем, только если хочется редактировать цены вручную
			Если глПересчетРегистров(Контекст, СписокПараметров) = 0 Тогда
				Возврат;
			КонецЕсли;
			ТовЦена = "";
			глПолучитьРозничныйОстатокЦену(Номенклатура, Единица, ОстаткиТМЦ, , ТовЦена);
			СписокЦен = ЗначениеИзСтроки(ТовЦена);
			СписокЦен.ВыбратьЗначение(Цена, , , 60,2);
			глПересчетТаблЧасти(Контекст,"Цена");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
//Предопределенная процедура
//
Процедура ПриЗаписи() 
	
	Если глМожноЗаписатьДокумент(Контекст)=0 Тогда
		СтатусВозврата(0);                        
	ИначеЕсли глКонтрольДатыДокумента(Контекст, НачальнаяДатаДокумента)=1 Тогда
		СтатусВозврата(0);
	КонецЕсли;
    ПриЗаписиДокумента(Контекст);
КонецПроцедуры // ПриЗаписи() 

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбЗнач, КонтФормыПодбора)
	
	// есть ставки налогов, есть скидка
	глОбработкаПодбора(Контекст, ВыбЗнач, 1, 1, 1);
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
Процедура ОбработкаВнешнегоСобытия(Источник,Событие,Данные)
	// Процедура разбирает штрих-код, считанный сканером
	// и заполняет строки накладной
	Перем Упаковка,ТекКоличество, Спецификация;
	Перем ВремТовар, ВремЕдиница, ВремКоличество, ВремЦена;
	
	Перем СтрокаВозврЦена;

	Если Событие = "BarCodeValue" Тогда
        Если Форма.ТолькоПросмотр() = 0 Тогда
			Если глПолучитьТоварПоШтрихкоду(Данные, ВремТовар, ВремЕдиница, ВремКоличество) <> 0 Тогда
				ТаблицаПодбора = СоздатьОбъект("ТаблицаЗначений");
				ТаблицаПодбора.НоваяКолонка("Номенклатура");
				ТаблицаПодбора.НоваяКолонка("Единица");
				ТаблицаПодбора.НоваяКолонка("Количество", "Число");
				ТаблицаПодбора.НоваяКолонка("Цена", "Число");
				
				ТаблицаПодбора.НоваяСтрока();
				ТаблицаПодбора.Номенклатура = ВремТовар;
				ТаблицаПодбора.Единица      = ВремЕдиница;
				ТаблицаПодбора.Количество   = ВремКоличество;
				
				ПараметрыПодбора = СоздатьОбъект("СписокЗначений");
				ПараметрыПодбора.ДобавитьЗначение(0, "ЕстьВидТМЦ");
				
				Если ВремТовар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
					Если Склад.РозничныйСклад = 0 Тогда
						ВыбТип = ТипЦен;
					Иначе
						ВыбТип = Константа.РозничныйТипЦен;
					КонецЕсли;
					// Для услуг розничную цену берем из справочника
					ТаблицаПодбора.Цена	= глПолучитьЦену(ВремТовар, ВыбТип, ДатаДок, ВремЕдиница, Валюта, Курс);
					
					ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
					ПараметрыПодбора.ДобавитьЗначение(ВыбТип         , "ТипЦен");      
				Иначе	// цена из остатков регистра
					Если Склад.РозничныйСклад = 0 Тогда
						ТаблицаПодбора.Цена	= глПолучитьЦену(ВремТовар, ТипЦен, ДатаДок, ВремЕдиница, Валюта, Курс);
						
						ПараметрыПодбора.ДобавитьЗначение("ИзСправочника", "ЦенаВподборе");
						ПараметрыПодбора.ДобавитьЗначение(ТипЦен         , "ТипЦен");      
					Иначе
						ТовОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
					    ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
						ТовОстатки.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ, 2);
						ТовОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
					
						глПолучитьРозничныйОстатокЦену(ВремТовар, ВремЕдиница, ТовОстатки, , СтрокаВозврЦена);
					
						СписВозврЦен = ЗначениеИзстроки(СтрокаВозврЦена);
						Если СписВозврЦен.РазмерСписка() = 1 Тогда
							ТаблицаПодбора.Цена  = глПересчет(СписВозврЦен.ПолучитьЗначение(1), глРубли, ДатаДок, Валюта, Курс);
							
						ИначеЕсли СписВозврЦен.РазмерСписка() > 1 Тогда
							
							Если СписВозврЦен.ВыбратьЗначение(ВремЦена,"Выберите цену для товара " + ВремТовар.Наименование, , 60) = 1 Тогда
								ТаблицаПодбора.Цена  = глПересчет(ВремЦена, глРубли, ДатаДок, Валюта, Курс);
							Иначе	
								ТаблицаПодбора.Цена  = 0;
							КонецЕсли;
						Иначе
							ТаблицаПодбора.Цена  = 0;
						КонецЕсли;
					
						ПараметрыПодбора.ДобавитьЗначение("Розница", "ЦенаВподборе");
					КонецЕсли;
				КонецЕсли;
				
				ПараметрыПодбора.ДобавитьЗначение(ТаблицаПодбора, "ТаблицаПодбора");
			    
				глОбработкаПодбора(Контекст, ПараметрыПодбора, 1, 1, 1);
			КонецЕсли;
	
		КонецЕсли;
		
		// Обработка закончена. Готовы к получению нового штрихкода.
		глСканерПосылкаДанных(1);
	Иначе
		глОбработкаВнешнегоСобытия(Источник, Событие, Данные);	
	КонецЕсли;

КонецПроцедуры // ОбработкаВнешнегоСобытия()

//******************************************************************************

// формируем таблицу печатных форм
НомерТекущейФормы 	= 0;
ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма справки отчета кассира-операциониста КМ-6";
ТаблицаПечФорм.Кнопка       = "КМ-6";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название     = "Печатная форма ПКО";
ТаблицаПечФорм.Кнопка       = "ПКО";

// Для выбора цен и показа остатков
ОбщРег           = СоздатьОбъект("Регистры");
ОстаткиТМЦ       = ОбщРег.ОстаткиТМЦ;
РезервыТМЦ       = ОбщРег.РезервыТМЦ;
СписокПараметров = СоздатьОбъект("СписокЗначений"); 
СписокПараметров.Установить("ОбщРег"              , ОбщРег);
СписокПараметров.Установить("ОстаткиТМЦ"          , ОстаткиТМЦ);
СписокПараметров.Установить("ФильтрПоСкладу"      , ПолучитьПустоеЗначение("Справочник.Склады"));
СписокПараметров.Установить("ФильтрПоФирме"       , ПолучитьПустоеЗначение("Справочник.Фирмы"));
СписокПараметров.Установить("ПозицияРегистра"     , 0);

ТекстВопросаЗаполнить[1] = "Заполнить заказанными покупателем товарами?";
ТекстВопросаЗаполнить[2] = "Заполнить по строкам документа - основания с отклонениями учетного количества от фактического?";
