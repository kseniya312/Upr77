////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем Документы;		    // список значений с идентификаторами видов документов системы
Перем ОтобранныеДокументы;	// список отобранных документов        
    
Перем МеткаЕсть, МеткиНет;  // Номера иконок пометки строки таблицы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если ВариантДействия = 1 Тогда
		Форма.СпособПечати.Доступность(1);
	Иначе
		Форма.СпособПечати.Доступность(0);
	КонецЕсли;
	
	Если ВариантДействия = 2 Тогда
		Форма.ПометкаУдаления.Доступность(1);
	Иначе
		Форма.ПометкаУдаления.Доступность(0);
	КонецЕсли;
	
	Если ВариантДействия = 4 Тогда
		Форма.Проект.Доступность(1);
	Иначе
		Форма.Проект.Доступность(0);
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************
// ГрупповаяПометка(Режим)
//
// Параметры: 
//  Режим:
//   1 - пометить все
//   2 - снять пометку
//   3 - инвертировать пометку
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
// кнопки групповой пометки
//
// Описание:
//  Производит групповые действия с пометкой строк таблицы формы
//
Процедура ГрупповаяПометка(Режим)
	
	ТаблицаДокументов.ВыбратьСтроки();
	
	Пока ТаблицаДокументов.ПолучитьСтроку() = 1 Цикл
		
		Если Режим=1 Тогда              
			
			ТаблицаДокументов.Пометка = МеткаЕсть;
			
		ИначеЕсли Режим=2 Тогда
			
			ТаблицаДокументов.Пометка = МеткиНет;
			
		ИначеЕсли Режим=3 Тогда
			
			Если ТаблицаДокументов.Пометка=МеткиНет Тогда
				ТаблицаДокументов.Пометка = МеткаЕсть;
			Иначе
				ТаблицаДокументов.Пометка = МеткиНет;
			КонецЕсли;                           
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ГрупповаяПометка()         

//******************************************************************************
// ПерезаполнитьСтрокуТаблицы(НомерСтроки)
//
// Параметры: 
//  НомерСтроки - номер строки таблица, чьи колонки надо перезаполнить
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет значения ячеек для строки с переданным номером
//
Процедура ПерезаполнитьСтрокуТаблицы(НомерСтроки)
	                                                                        
	Док			= ТаблицаДокументов.ПолучитьЗначение(НомерСтроки, "Документ");
	СтрСумма	= глСуммаДокументаВЖурнале(Док);
	СтрВалюта	= СокрЛП(глВалютаДокументаВЖурнале(Док));
		
	СтрКонтрагент = "";
	Если глЕстьРеквизитШапки("Контрагент",Док.Вид())=1 Тогда
		Если Док.Контрагент.Выбран()=1 Тогда
			СтрКонтрагент = " Контрагент: "+СокрЛП(Док.Контрагент);
		КонецЕсли;
	КонецЕсли;
		    
	СтрДоговор="";
	Если глЕстьРеквизитШапки("Договор",Док.Вид())=1 Тогда
		Если Док.Договор.Выбран()=1 Тогда
			СтрДоговор = " Договор: "+СокрЛП(Док.Договор)+". ";
		КонецЕсли;	
	КонецЕсли;
		
	СтрИнформация = СтрКонтрагент + СтрДоговор;
		
	СтрСтатус = "";
	Если (Док.ПометкаУдаления()>0) Тогда
		СтрСтатус = "Помечен на уд.";
	ИначеЕсли (Док.Проведен()>0) Тогда
		СтрСтатус = "Проведен";
	КонецЕсли;	       
	
	СтрДокумент = глНазваниеДокументаВЖурнале(Док);
	
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Дата",       Док.ДатаДок);
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "СтрДокумент",СтрДокумент);
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Номер",      Док.НомерДок);
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Автор",      СокрЛП(Док.Автор));
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Статус",     СтрСтатус);
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Сумма",      СтрСумма);         
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Валюта",     СтрВалюта); 
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Проект",     СокрЛП(Док.Проект)); 
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Информация", СтрИнформация); 
	ТаблицаДокументов.УстановитьЗначение(НомерСтроки, "Комментарий",Док.Комментарий); 
	
КонецПроцедуры // ПерезаполнитьСтрокуТаблицы()

//******************************************************************************
// ПриДвойномЩелчкеНаТаблице()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  Таблица значений ТаблицаДокументов
//
// Описание:
//  Обрабатывает двойной щелчок (нажатие клавиши "Enter") на таблице формы
//
Процедура ПриДвойномЩелчкеНаТаблице()
	Перем ТекКол, ТекСтр;
	
	ТаблицаДокументов.ТекущаяКолонка(,ТекКол);
	ТекСтр = ТаблицаДокументов.ТекущаяСтрока();
	КодТекКол = ТаблицаДокументов.ПолучитьПараметрыКолонки(ТекКол);
	
	Если ТекСтр > 0 Тогда
		
		Если КодТекКол = "Пометка" Тогда
			
			Если ТаблицаДокументов.Пометка = МеткаЕсть Тогда
				ТаблицаДокументов.Пометка = МеткиНет;
			Иначе
				ТаблицаДокументов.Пометка = МеткаЕсть;
			КонецЕсли;
			
		Иначе
			
			ОткрытьФормуМодально(ТаблицаДокументов.Документ);
			ПерезаполнитьСтрокуТаблицы(ТекСтр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриДвойномЩелчкеНаТаблице()

//******************************************************************************
// ПоКнопкеВыполнить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке выполнить
//
// Описание:
//  Производит выбранное действия с выбранными позициями номенклатуры
//
Процедура ПоКнопкеВыполнить()
	
	// Проверим, все ли задано
	Если ВариантДействия = 1 Тогда // Печать
		
		Если СпособПечати.ТекущаяСтрока() = 0 Тогда
			Предупреждение("Не выбран способ печати.",60);
			Активизировать("СпособПечати");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 2 Тогда // Пометка на удаление
		
		Если ПометкаУдаления.ТекущаяСтрока() = 0 Тогда
			Предупреждение("Не выбрано действие с пометкой на удаление.",60);
			Активизировать("ПометкаУдаления");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 4 Тогда // Отнести к проекту
		
		Если ПустоеЗначение(Проект) = 1 Тогда
			Предупреждение("Не выбрано проект, к которому надо отнести документы.",60);
			Активизировать("Проект");
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	Попытка
		НачатьТранзакцию();
		
		Док = СоздатьОбъект("Документ");
		ТаблицаДокументов.ВыбратьСтроки();
		Пока ТаблицаДокументов.ПолучитьСтроку() = 1 Цикл
			
			ТекСтрока = ТаблицаДокументов.НомерСтроки; 
			
			// Не помечен к обработке
			Если ТаблицаДокументов.Пометка = МеткиНет Тогда
				Продолжить;
			КонецЕсли;	
			
			// не оказалось документа
			Если Док.НайтиДокумент(ТаблицаДокументов.Документ) = 0 Тогда
				Сообщить("Не найден """ + СокрЛП(ТаблицаДокументов.Документ) + """! Действие не выполнено!","!");
				Продолжить;
			КонецЕсли;	
			
			Сообщить("Выполняется обработка позиции "+СокрЛП(Док.ТекущийДокумент()),".");
			                 
			Если ВариантДействия = 1 Тогда  // Напечатать
				
				глПечатьДокумента(Док.ТекущийДокумент(), СпособПечати.ПолучитьЗначение(СпособПечати.ТекущаяСтрока()))
			ИначеЕсли ВариантДействия = 2 Тогда  // Пометка на удаление	
				
				Если ПометкаУдаления.ТекущаяСтрока() = 1 Тогда
					Если глПриУдаленииДокумента(Док, 0) = 1 Тогда // можно удалять
						Док.Удалить(0);                              
					КонецЕсли;
				Иначе
					Если глПриУдаленииДокумента(Док, 0) = 1 Тогда 
						Док.СнятьПометкуУдаления();
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВариантДействия = 3 Тогда  // Сделать не проведенным
				
				Если Док.Проведен() > 0 Тогда
					Попытка     
						
						// Проверка даты запрета редактирования
						Если Док.ДатаДок<=Константа.ДатаЗапретаРедактирования Тогда
							Сообщить("Нельзя отменять проведение документов с датой, более ранней чем дата запрета редактирования документов!","!");
						Иначе
							Док.СделатьНеПроведенным();
						КонецЕсли;
					Исключение	
						Сообщить("Не удалось отменить проведение документа "+Строка(Док.ТекущийДокумент),"!");
					КонецПопытки;  
				КонецЕсли;
				
			ИначеЕсли ВариантДействия = 4 Тогда  // Отнести к проекту
				Док.Проект = Проект;
				Док.Записать();
				
			КонецЕсли;
				
			ПерезаполнитьСтрокуТаблицы(ТекСтрока);
		КонецЦикла;
		
		Сообщить("Обработка закончена",".");
		ЗафиксироватьТранзакцию();
		
	Исключение                          
		ОтменитьТранзакцию();
		Сообщить(ОписаниеОшибки(), "!");
	КонецПопытки;
	
	
КонецПроцедуры // ПоКнопкеВыполнить() 

//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  по кнопке "Печать"
// 
// Описание:
//  Выводит отобранные документы в таблицу MXL
//
Процедура ПоКнопкеПечать()
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица( "РеестрДокументов" );
	Таб.ВывестиСекцию("Отчет");
	глОживить(1);
	
	СуммыПоВалютам = СоздатьОбъект("ТаблицаЗначений");
	СуммыПоВалютам.НоваяКолонка("Валюта"	, "Строка");
	СуммыПоВалютам.НоваяКолонка("Сумма"		, "Число");

	НПП=0;             
	ТаблицаДокументов.ВыбратьСтроки();
	Пока ТаблицаДокументов.ПолучитьСтроку() = 1 Цикл
		
		Если ТаблицаДокументов.Пометка = МеткиНет Тогда
		    Продолжить;
		КонецЕсли;
	    
		НПП=НПП+1;
		Таб.ВывестиСекцию("Докум");
		глОживить(1);

		Если ПустоеЗначение(ТаблицаДокументов.Валюта) = 0 Тогда
			ТекСумма = Число(СтрЗаменить(ТаблицаДокументов.Сумма, "'", ""));
			
			Поз	= 0;
			Если СуммыПоВалютам.НайтиЗначение(ТаблицаДокументов.Валюта, Поз, "Валюта") = 1 Тогда
				СуммыПоВалютам.ПолучитьСтрокуПоНомеру(Поз);
				СуммыПоВалютам.Сумма = СуммыПоВалютам.Сумма + ТекСумма;
			Иначе
				СуммыПоВалютам.НоваяСтрока();
				СуммыПоВалютам.Сумма	= ТекСумма;
				СуммыПоВалютам.Валюта	= ТаблицаДокументов.Валюта;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;
	
	КолвоСтрок	= СуммыПоВалютам.КоличествоСтрок();
	Если КолвоСтрок > 0 Тогда
		СуммыПоВалютам.ПолучитьСтрокуПоНомеру(1);
		Таб.ВывестиСекцию("ИтогоСнадписью");
		глОживить(1);
		
		Для Сч = 2 По КолвоСтрок Цикл
			СуммыПоВалютам.ПолучитьСтрокуПоНомеру(Сч);
			Таб.ВывестиСекцию("Итого");
			глОживить(1);
		КонецЦикла;
	КонецЕсли;
	
	Таб.Опции(0, 0, 5, 0, "РеестрДокументов", "РеестрДокументов");
	Таб.ТолькоПросмотр(1);
	Таб.Показать("Реестр документов","");
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеСформировать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "Сформировать"
// 
// Описание:
//  Отбирает необходимые ТМЦ и открывает слой обработки "Обработка"
//
Процедура ПоКнопкеСформировать()
	
	// Формируем таблицу номенклатуры
	ТаблицаДокументов.Очистить();
	ТаблицаДокументов.НоваяКолонка("Пометка",    "Число"   ,1,,             ,     4    );
	ТаблицаДокументов.НоваяКолонка("Документ",   "Документ", ,,             ,          ); 
	ТаблицаДокументов.НоваяКолонка("Дата",       "Дата"    , ,,"Дата"       ,     10,,2);
	ТаблицаДокументов.НоваяКолонка("СтрДокумент","Строка"  , ,,"Документ"   ,     32   ); 
	ТаблицаДокументов.НоваяКолонка("Номер",      "Строка"  , ,,"Номер"      ,     17,,2);
	ТаблицаДокументов.НоваяКолонка("Автор",      "Строка"  , ,,"Автор"      ,     30   );
	ТаблицаДокументов.НоваяКолонка("Статус",     "Строка"  , ,,"Статус"     ,     25,,2);
	ТаблицаДокументов.НоваяКолонка("Сумма",      "Строка"  , ,,"Сумма"      ,     20,,2);         
	ТаблицаДокументов.НоваяКолонка("Валюта",     "Строка"  , ,,"Валюта"     ,      7,,2); 
	ТаблицаДокументов.НоваяКолонка("Проект",     "Строка"  , ,,"Проект"     ,     30   ); 
	ТаблицаДокументов.НоваяКолонка("Информация", "Строка"  , ,,"Информация" ,     50   ); 
	ТаблицаДокументов.НоваяКолонка("Комментарий","Строка"  , ,,"Комментарий",     50   ); 
	
	ТаблицаДокументов.ВыводитьПиктограммы("Пометка",1);
	ТаблицаДокументов.ВидимостьКолонки("Документ", 0);

	ВидыДок = "";
	Для Инд=1 По ВыбранныеДокументы.РазмерСписка() Цикл
		ВидыДок = ВидыДок + Документы.ПолучитьЗначение(ВыбранныеДокументы.ПолучитьЗначение(Инд))+",";
	КонецЦикла;
	
	Если ПустаяСтрока(ВидыДок)=1 Тогда
		Возврат;
	КонецЕсли;
	
	Док=СоздатьОбъект("Документ");
	
	Если (ВыбКонтрагент.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"Контрагент",ВыбКонтрагент);
	ИначеЕсли (ВыбПроект.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"Проект",    ВыбПроект);
	ИначеЕсли (ВыбАвтор.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"Автор",     ВыбАвтор);
	ИначеЕсли (ВыбФирма.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"Фирма",     ВыбФирма);
	ИначеЕсли (ВыбЮрЛицо.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"ЮрЛицо",    ВыбЮрЛицо);
	ИначеЕсли (ВыбСклад.Выбран()=1) Тогда
		Док.ВыбратьПоЗначению(ДатаНачала,ДатаКонца,"Склад",     ВыбСклад);
	Иначе
		Док.ВыбратьДокументы(ДатаНачала,ДатаКонца);
	КонецЕсли;
	
	глЧислоСтрок = 0;
	
	ТекСтрока = 0;
	Счетчик   = 0;
	Пока Док.ПолучитьДокумент()=1 Цикл
		
		Состояние("Обработано документов: " + Строка(Счетчик));
		Счетчик = Счетчик + 1;
		
		//Проверка статуса
		Если (Док.ПометкаУдаления()>0) Тогда
			Если ВклУдаленные=0 Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли (Док.Проведен()>0) Тогда
			Если ВклПроведенные=0 Тогда
				Продолжить;
			КонецЕсли;	       
		Иначе	           
			Если ВклТекущие=0 Тогда
				Продолжить;
			КонецЕсли;	        
		КонецЕсли;	       
		
		//Проверка юр. лица, к которому относится документ
		Если ВыбЮрЛицо.Выбран() = 0 Тогда
		ИначеЕсли (Док.ЮрЛицо <> ВыбЮрЛицо) Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверка фирмы, к которой относится документ
		Если ВыбФирма.Выбран() = 0 Тогда
		ИначеЕсли (Док.Фирма <> ВыбФирма) Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверка автора
		Если ВыбАвтор.Выбран() = 0 Тогда
		ИначеЕсли (Док.Автор <> ВыбАвтор) Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверка проекта
		Если ВыбПроект.Выбран() = 0 Тогда
		ИначеЕсли (Док.Проект <> ВыбПроект) Тогда
			Продолжить;
		КонецЕсли;
		
		//Проверка склада
		Если ВыбСклад.Выбран() = 0 Тогда
		ИначеЕсли глЕстьРеквизитШапки("Склад", Док.Вид()) = 0 Тогда	
			Продолжить;
		ИначеЕсли (Док.Склад <> ВыбСклад) Тогда
			Продолжить;
		КонецЕсли;

		//Проверка вида документа
		Если Найти(ВидыДок,Док.Вид()+",")=0 Тогда
			Продолжить;
		КонецЕсли;
		                                    
		ТаблицаДокументов.НоваяСтрока();
		ТаблицаДокументов.Документ = Док.ТекущийДокумент();
		ТаблицаДокументов.Пометка  = МеткаЕсть;
		ТекСтрока = ТекСтрока + 1;
		ПерезаполнитьСтрокуТаблицы(ТекСтрока);

	КонецЦикла;
	
	Форма.ИспользоватьСлой("Обработка, КнопкиОбработки");
	//ТаблицаДокументов.Фиксировать(0);
	
	УправлениеДиалогом();
	Форма.КнопкаПоУмолчанию("кнВыполнить");
КонецПроцедуры // ПоКнопкеСформировать()

//******************************************************************************
// ПоКнопкеНастройка()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  по кнопке "Настройка"
//
// Описание:
//  Переключает форму на закладку поддбора
//
Процедура ПоКнопкеНастройка()
	
	Форма.ИспользоватьСлой("Подбор, КнопкиПодбора");
	Форма.КнопкаПоУмолчанию("кнСформировать");
	
КонецПроцедуры // ПоКнопкеНастройка()

	

//******************************************************************************
// ВставитьВсе(СписокДокументов)
//
// Параметры:
// 	СписокДокументов - формируемый список значений
//
// Возвращаемое значение:
// 	Нет
//
// Вызывается из формул элементов диалога:
// 
// Описание:
//   формирует список значений со всеми видами документов
//
Процедура ВставитьВсе(СписокДокументов)
	
    СписокДокументов.УдалитьВсе();
	Для Инд=1 По Метаданные.Документ() Цикл
		СписокДокументов.ДобавитьЗначение(Инд,Метаданные.Документ(Инд).Представление());
	КонецЦикла;
	СписокДокументов.Сортировать();
	
КонецПроцедуры		// ВставитьВсе
    
//******************************************************************************
// ИсключитьВсе()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
// 	Нет
//
// Вызывается из формул элементов диалога:
//		кнопка "=>>"
// 
// Описание:
//    очищает список видов обрабатываемых документов
//
Процедура ИсключитьВсе()   
	
	ВыбранныеДокументы.УдалитьВсе();
	ВставитьВсе(ВсеДокументы);
	
КонецПроцедуры		// ИсключитьВсе()


//******************************************************************************
// ВключитьВсе()
//
// Параметры:
//	Нет
//
// Возвращаемое значение:
// 	Нет
//
// Вызывается из формул элементов диалога:
//		кнопка "<<="
// 
// Описание:
//   добавляет все виды в список видов обрабатываемых документов
//
Процедура ВключитьВсе()
	
	ВсеДокументы.УдалитьВсе();
	ВставитьВсе(ВыбранныеДокументы);
	
КонецПроцедуры    	// ВключитьВсе

//******************************************************************************
// Исключить ()
//
// Параметры:
// 	Нет
//
// Возвращаемое значение:
// 	Нет
//
// Вызывается из формул элементов диалога:
//		кнопка "- >"
// 
// Описание:
//  исключает текущую позицию из списка видов обрабатываемых документов
//
Процедура Исключить()
	
	ТекПоз = ВыбранныеДокументы.ТекущаяСтрока();
	Если ТекПоз = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Представление = "";
	Позиция = ВыбранныеДокументы.ПолучитьЗначение(ТекПоз, Представление);
	
	ВсеДокументы.ДобавитьЗначение(Позиция, Представление);
	ВсеДокументы.Сортировать();                
	
	ВыбранныеДокументы.УдалитьЗначение(ТекПоз);
	
	Если ВыбранныеДокументы.РазмерСписка() > 0 Тогда
		Если ТекПоз > ВыбранныеДокументы.РазмерСписка() Тогда
			ТекПоз = ВыбранныеДокументы.РазмерСписка();
		КонецЕсли;
		ВыбранныеДокументы.ТекущаяСтрока(ТекПоз);
	КонецЕсли;                                 
	
КонецПроцедуры  	// Исключить

//******************************************************************************
// Включить()
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
// 	Нет
//
// Вызывается из формул элементов диалога:
//	кнопка "< -"
// 
// Описание:
//  включает текущую позицию в список видов обрабатываемых документов
//
Процедура Включить()
	
	ТекПоз = ВсеДокументы.ТекущаяСтрока();
	Если ТекПоз = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Представление = "";
	Позиция = ВсеДокументы.ПолучитьЗначение(ТекПоз, Представление);
	
	ВыбранныеДокументы.ДобавитьЗначение(Позиция, Представление);
	ВыбранныеДокументы.Сортировать();
	
	ВсеДокументы.УдалитьЗначение(ТекПоз);
	
	Если ВсеДокументы.РазмерСписка() > 0 Тогда
		Если ТекПоз > ВсеДокументы.РазмерСписка() Тогда
			ТекПоз = ВсеДокументы.РазмерСписка();
		КонецЕсли;
		ВсеДокументы.ТекущаяСтрока(ТекПоз);
	КонецЕсли;                           
	
КонецПроцедуры 	// Включить

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ

//******************************************************************************
Процедура ПриОткрытии(ФлагВосстановленияНастройки)	// Предопределенная процедура     
	
		// Инициализация переменных
	Если ФлагВосстановленияНастройки = 0 Тогда
		ВариантДействия = 1;
	КонецЕсли;
	
	Форма.ИспользоватьСлой("Подбор, КнопкиПодбора");
	Форма.КнопкаПоУмолчанию("кнСформировать");

КонецПроцедуры	 	// ПриОткрытии()

//******************************************************************************
// ТЕЛО МОДУЛЯ

ДатаКонца	= ПолучитьДатуТА();
ДатаНачала	= НачМесяца(ДатаКонца);

ВыбКонтрагент.ВыборГруппы(0);
	
Документы = СоздатьОбъект("СписокЗначений");
Документы.УдалитьВсе();
Для Инд=1 По Метаданные.Документ() Цикл
	Документы.ДобавитьЗначение(Метаданные.Документ(Инд).Идентификатор);
КонецЦикла;
	           
ВключитьВсе();

ВклПроведенные= 1; 
ВклТекущие    = 1; 
ВклУдаленные  = 1;  


МеткаЕсть = 2;  МеткиНет = 1; // Номера иконок пометки

// инициализация списков
ПометкаУдаления.УдалитьВсе();
ПометкаУдаления.ДобавитьЗначение("Поставить");						
ПометкаУдаления.ДобавитьЗначение("Снять");						
ПометкаУдаления.ТекущаяСтрока(1);

СпособПечати.УдалитьВсе();
СпособПечати.ДобавитьЗначение("ПечатьНаЭкран", "С предварительным просмотром");						
СпособПечати.ДобавитьЗначение("ПечатьНаПринтер", "На принтер без просмотра");						
СпособПечати.ТекущаяСтрока(1);

