////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем Пользователь;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ЗаписатьОбъект(Объект)
//
// Параметры:
//  Объект - добавленный объект
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Записывает переданный элемент справочника и вадает сообщение о результатах записи объекта
//
Процедура ЗаписатьОбъект(Объект)
	
	Попытка
		Объект.Записать();
		
		Стр =
		"В справочник """+Объект.ПредставлениеВида()+""" "+
		?(Объект.ЭтоГруппа() = 0, "добавлен элемент", "добавлена группа")+
		" """+Объект.ТекущийЭлемент()+""".";
		
		Сообщить(Стр, ".");
	Исключение
		Сообщить(ОписаниеОшибки(), "!!");
	КонецПопытки;
	
КонецПроцедуры // ЗаписатьОбъект()

//******************************************************************************
// ЗаписатьКонстанту(Атрибут, Значение)
//
// Параметры:
//  Атрибут  - итдентификатор константы
//  Значение - устанавлаваемое значение константы
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает переданное значение переданной константы
//
Процедура ЗаписатьКонстанту(Атрибут, Значение)
	
	Константа.УстановитьАтрибут(Атрибут, Значение);
	
	Стр = 
	Метаданные.Константа(Атрибут).Представление()+
	" - установлено значение """+Значение+""".";
	
	Сообщить(Стр, ".");
	
КонецПроцедуры // ЗаписатьКонстанту()

//******************************************************************************
// ЗаписатьРеквизитПользователя(Атрибут, Значение)
//
// Параметры:
//  Атрибут  - устанавливаемый реквизит текущего пользователя
//  Значение - Устанавливаемое значение
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает переданное значение переданного реквизита текущего пользователя
//  (глобальная переменная глПользователь типа "Справочник.Пользователи")
//
Процедура ЗаписатьРеквизитПользователя(Атрибут, Значение)
	
	Пользователь.УстановитьАтрибут(Атрибут, Значение);
	
	Стр = 
	"Пользователь """+Пользователь+""", "+
	Метаданные.Справочник("Пользователи").Реквизит(Атрибут).Представление()+
	" - установлено значение """+Значение+""".";
	
	Сообщить(Стр, ".");
	
КонецПроцедуры // ЗаписатьРеквизитПользователя()

//******************************************************************************
// НачальноеЗаполнение()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Начальное заполнение ИБ
//
Процедура НачальноеЗаполнение()
	
 	НачатьТранзакцию();
 	
 	// Константы.
	
	ЗаписатьКонстанту("ЕдиницаВеса", "кг");
	ЗаписатьКонстанту("РазрешитьПроводитьБудущейДатой", 0);
	ЗаписатьКонстанту("КонтрольОтрицательныхОстатков", 1);
	
 	// Валюты.
	// В справочнике валют в пустой базе д.б. две валюты: рубль и доллар
	Объект = СоздатьОбъект("Справочник.Валюты");
	Объект.ИспользоватьДату('01.01.1980');
	
	Объект.Новый();
	Объект.Код              = "810";
	Объект.Наименование     = "руб.";  
	Объект.ПолнНаименование = "Российский рубль"; 
	Объект.Кратность        = 1; 
	Объект.Курс             = 1;
	Объект.ИмяФайлаПрописи  = "";
	ЗаписатьОбъект(Объект);    
	
	// Рубли по умолчанию являются валютой, в которой ведется бух. учет
	глРубли = Объект.ТекущийЭлемент();
	ЗаписатьКонстанту("ВалютаБухУчета", Объект.ТекущийЭлемент());
	
	// Рубли являются основной валютой взаиморасчетов по умолчанию для текущего пользователя
	ЗаписатьРеквизитПользователя("ОсновнаяВалютаВзаиморасчетов", Объект.ТекущийЭлемент());
	
	// Теперь добавляем в справочник доллары
	Объект.Новый();
	Объект.Наименование     = "USD";               
	Объект.ПолнНаименование = "Доллар США";
	Объект.Код              = "840";	
	Объект.Кратность        = 1; 
	Объект.Курс             = 29.05;
	
	// Файл прописи
	// Если в каталоге инф. базы нет файла прописи для долларов, то
	// перепишем этот файл из каталога программы (BIN\)
	Если ФС.СуществуетФайл(КаталогИБ()+"USD.spl") = 1 Тогда
		Объект.ИмяФайлаПрописи = "USD.spl";
		
	ИначеЕсли ФС.СуществуетФайл(КаталогПрограммы()+"USD.spl") = 1 Тогда
		ФС.КопироватьФайл(КаталогПрограммы()+"USD.spl", КаталогИБ()+"USD.spl", 1);
		Сообщить("В каталог информационной базы скопирован файл прописи ""USD.spl"".", ".");
		Объект.ИмяФайлаПрописи = "USD.spl";
	КонецЕсли;
	
	ЗаписатьОбъект(Объект);
	
	// Доллары по умолчанию являются валютой, в которой ведется упр.учет
	глДоллары = Объект.ТекущийЭлемент();
	ЗаписатьКонстанту("ВалютаУпрУчета", Объект.ТекущийЭлемент());

	// Теперь добавляем в справочник евро
	Объект.Новый();
	Объект.Наименование     = "EUR";               
	Объект.ПолнНаименование = "ЕВРО";
	Объект.Код              = "978";	
	Объект.Кратность        = 1; 
	Объект.Курс             = 27.09;
	
	// Файл прописи
	Если ФС.СуществуетФайл(КаталогИБ()+"EUR.spl") = 1 Тогда
		Объект.ИмяФайлаПрописи = "EUR.spl";
	КонецЕсли;
	
	ЗаписатьОбъект(Объект);
	
	// Касса
	// В справочнике касс завести "Основная касса", Установить ее как значение по умолчанию. 
	Объект = СоздатьОбъект("Справочник.Кассы");
	Объект.Новый();
	Объект.Наименование = "Основная касса"; 
	ЗаписатьОбъект(Объект);
	
	ЗаписатьРеквизитПользователя("ОсновнаяКасса", Объект.ТекущийЭлемент());
	
	// Контрагенты.
	// В справочниках контрагентов и Юр.Лиц добавить три группы 
	//("Поставщики", "Покупатели", "Реализаторы"). 
	Объект = СоздатьОбъект("Справочник.Контрагенты");
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Поставщики";
	ЗаписатьОбъект(Объект);
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Покупатели";
	ЗаписатьОбъект(Объект);
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Реализаторы";
	ЗаписатьОбъект(Объект);
	
	// Группы физ. лиц.
	Объект = СоздатьОбъект("Справочник.ФизЛица");
	Объект.НоваяГруппа();
	Объект.Наименование = "Сотрудники";
	ЗаписатьОбъект(Объект);
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Сторонние";
	ЗаписатьОбъект(Объект);  
	
	// ОКЕИ
	// В справочнике типов единиц измерения завести несколько единиц
	Объект = СоздатьОбъект("Справочник.ОКЕИ");
	Объект.Новый();
	Объект.Код              = "796"; 
	Объект.Наименование     = "шт";
	Объект.ПолнНаименование = "Штука";
	ЗаписатьОбъект(Объект);                    
	
	ЗаписатьРеквизитПользователя("ОсновнаяОКЕИ", Объект.ТекущийЭлемент());
	
	Объект.Новый();
	Объект.Код              = "812"; 
	Объект.Наименование     = "ящ";
	Объект.ПолнНаименование = "Ящик";
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Код              = "166"; 
	Объект.Наименование     = "кг";
	Объект.ПолнНаименование = "Килограмм";
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Код              = "778"; 
	Объект.Наименование     = "упак";
	Объект.ПолнНаименование = "Упаковка";
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Код              = "006"; 
	Объект.Наименование     = "м";
	Объект.ПолнНаименование = "Метр";
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Код              = "055"; 
	Объект.Наименование     = "м2";
	Объект.ПолнНаименование = "Квадратный метр";
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Код              = "113"; 
	Объект.Наименование     = "м3";
	Объект.ПолнНаименование = "Кубический метр";
	ЗаписатьОбъект(Объект);
	
	// Типы цен.
	// Добавляем типы цен: "Закупочные" (установить как учетные!), "Розничные", "Оптовые", "Мелко оптовые"
	Объект = СоздатьОбъект("Справочник.ТипыЦен"); 
	
	Объект.Новый();
	Объект.Наименование      = "Закупочные";
	Объект.ЦенаВклНДС        = 1;
	Объект.Валюта            = глДоллары;
	Объект.ПорядокОкругления = Перечисление.ПорядкиОкругления.Окр0_01;
	ЗаписатьОбъект(Объект);
	
	ЗаписатьРеквизитПользователя("ОсновнойТипЦенПокупки", Объект.ТекущийЭлемент());
	
	Объект.Новый();
	Объект.Наименование      = "Оптовые";
	Объект.ЦенаВклНДС        = 1;
	Объект.Валюта            = глДоллары;
	Объект.ПорядокОкругления = Перечисление.ПорядкиОкругления.Окр0_01;
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Наименование      = "Мелкооптовые";
	Объект.ЦенаВклНДС        = 1;
	Объект.Валюта            = глДоллары;
	Объект.ПорядокОкругления = Перечисление.ПорядкиОкругления.Окр0_01;
	ЗаписатьОбъект(Объект);
	
	Объект.Новый();
	Объект.Наименование      = "Розничные";
	Объект.ЦенаВклНДС        = 1;
	Объект.ЦенаВклНП         = 1;
	Объект.Валюта            = глРубли;
	Объект.ПорядокОкругления = Перечисление.ПорядкиОкругления.Окр0_01;
	ЗаписатьОбъект(Объект);
	
	ЗаписатьРеквизитПользователя("ОсновнойТипЦенПродажи", Объект.ТекущийЭлемент());
	
	// Ставка НП.
	// Установим ставку НП по умолчанию
	
	Объект =СоздатьОбъект("Справочник.СтавкиНП");
	Объект.Новый();
	Объект.Наименование = "Без налога (НП)";
	Объект.Ставка       = 0;
	ЗаписатьОбъект(Объект);
	
	ЗаписатьРеквизитПользователя("ОсновнаяСтавкаНП", Объект.ТекущийЭлемент());
	
    // Виды свойств.
	
	Объект = СоздатьОбъект("Справочник.ВидыСвойств");
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Свойства контрагентов";
	ЗаписатьОбъект(Объект);
	
	Объект.НоваяГруппа();
	Объект.Наименование = "Свойства номенклатуры";
	ЗаписатьОбъект(Объект);
	
	// Реквизиты пользователя.
	// Установим ставку НДС по умолчанию
	ЗаписатьРеквизитПользователя("ОсновнаяСтавкаНДС", Перечисление.СтавкиНДС.НДС20);
	
	// Установим основную дату начала отчетов
	ЗаписатьРеквизитПользователя("ОсновнаяДатаНачалаОтчетов", НачМесяца(РабочаяДата()));
	Если Пользователь.Выбран() = 1 Тогда
		Попытка
			Пользователь.Записать();
			
			// Обновим переменную 
			глПользователь = Пользователь.ТекущийЭлемент();
			
		Исключение
			Сообщить(ОписаниеОшибки(), "!!");
		КонецПопытки;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // НачальноеЗаполнение()

//******************************************************************************
// ЗаполнитьШтрихкодыВесовыхТоваров()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполнение штрих-кодов весовых товаров
//
Процедура ЗаполнитьШтрихкодыВесовыхТоваров()
	
	СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
	СписокНеуникальных = СоздатьОбъект("СписокЗначений");
	СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
	СпрНоменклатура.ПорядокКодов();
	СпрНоменклатура.ВыбратьЭлементы(0);
	Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
		Если СпрНоменклатура.ЭтоГруппа() = 1 Тогда
			Продолжить;    
		КонецЕсли;
		Если СпрНоменклатура.Весовой = 0 Тогда
			Продолжить;    
		КонецЕсли;
		
		ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода,
			                                  глДополнитьСтрокуЛ(СокрЛП(СпрНоменклатура.Код),"0",5)+"00000");
		
		Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
			СпрЕдиницы.НайтиЭлемент(СпрНоменклатура.БазоваяЕдиница.ТекущийЭлемент());
			СпрЕдиницы.ШтрихКод = ВремШтрихкод;
			СпрЕдиницы.Записать();
		Иначе
			СписокНеуникальных.ДобавитьЗначение(СпрНоменклатура.ТекущийЭлемент());
		КонецЕсли;	
	КонецЦикла;
			
	КолвоНеуникальных = СписокНеуникальных.РазмерСписка();
	Для СчетчикЦикла = 1 По КолвоНеуникальных Цикл
		ТекНоменклатура = СписокНеуникальных.ПолучитьЗначение(СчетчикЦикла); 
		
		// Сформируем уникальный штрих-код
		СформировалиУникальныйШтрихкод = 0;
		КодТовараЧисло = Число(СокрЛ(Прав(ТекНоменклатура.Код, 5)));
		Для Сч = КодТовараЧисло По 99999 Цикл // 5 разрядов
			ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 5);
			ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода, ДопКод + "00000");
			Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
				СформировалиУникальныйШтрихкод = 1;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СформировалиУникальныйШтрихкод = 0 Тогда
			Для Сч = 1 По КодТовараЧисло Цикл
				ДопКод = глДополнитьСтрокуЛ(Строка(Сч), "0", 5);
				ВремШтрихкод = глСформироватьШтрихкод(глПрефиксВесовогоШтрихкода, ДопКод + "00000");
				Если СпрЕдиницы.НайтиПоРеквизиту("Штрихкод", ВремШтрихкод, 1) = 0 Тогда
					СформировалиУникальныйШтрихкод = 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СформировалиУникальныйШтрихкод = 0 Тогда
			ВремШтрихкод = "";
		КонецЕсли;
		
		СпрЕдиницы.НайтиЭлемент(ТекНоменклатура.БазоваяЕдиница.ТекущийЭлемент());
		СпрЕдиницы.ШтрихКод = ВремШтрихкод;
		СпрЕдиницы.Записать();
		
		Сообщить("Для элемента " + " """ + СокрЛП(ТекНоменклатура.Наименование) +
				 """ справочника ""Номенклатура"" сформирован новый штрих-код базовой единицы.");
	КонецЦикла;
			
КонецПроцедуры // ЗаполнитьШтрихкодыВесовыхТоваров()

//******************************************************************************
// МодифицироватьСправочникПроводок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновление справочника проводок для перехода на 927 релиз
//
Процедура МодифицироватьСправочникПроводок()

	СпрОпераций = СоздатьОбъект("Справочник.ХозОперации");
	СпрПроводок = СоздатьОбъект("Справочник.ПроводкиХозОпераций");
	
	СпрОпераций.ВыбратьЭлементы();
	Пока СпрОпераций.ПолучитьЭлемент() = 1 Цикл
        СпрПроводок.ИспользоватьВладельца(СпрОпераций.ТекущийЭлемент());
		
		СпрПроводок.ВыбратьЭлементы();
		Пока СпрПроводок.ПолучитьЭлемент() = 1 Цикл
			Если СпрПроводок.ЭтоГруппа() = 0 Тогда

				// Преобразовываем тип реквизитов "СчетД" и "СчетК" в соотвтествии со значениями
				// реквизитов "ДокНазначенД" и "ДокНазначенК", которые в дальнейшем не будут использоваться
				
				Если СпрПроводок.ДокНазначенД = 1 Тогда
					СпрПроводок.НазначитьТип("СчетД","Перечисление.ЗначенияАтрибутовПроводок");
					СпрПроводок.СчетД = Перечисление.ПолучитьАтрибут("ЗначенияАтрибутовПроводок").ЗначениеПоИдентификатору("Счет");
					СпрПроводок.СубконтоД1 = "";					
					СпрПроводок.СубконтоД2 = "";					
					СпрПроводок.СубконтоД3 = "";					

				КонецЕсли;
				
				Если СпрПроводок.ДокНазначенК = 1 Тогда
					СпрПроводок.НазначитьТип("СчетК","Перечисление.ЗначенияАтрибутовПроводок");
					СпрПроводок.СчетК = Перечисление.ПолучитьАтрибут("ЗначенияАтрибутовПроводок").ЗначениеПоИдентификатору("Счет");
					СпрПроводок.СубконтоК1 = "";					
					СпрПроводок.СубконтоК2 = "";					
					СпрПроводок.СубконтоК3 = "";					
				    
				КонецЕсли;

				// Инициализируем пустые реквизиты "СчетД" и "СчетК" определенным типом

				Если ПустаяСтрока(ТипЗначенияСтр(СпрПроводок.СчетД)) = 1 Тогда
					СпрПроводок.НазначитьТип("СчетД", "Справочник.ПланСчетов");
				КонецЕсли;
				
				Если ПустаяСтрока(ТипЗначенияСтр(СпрПроводок.СчетК)) = 1 Тогда
					СпрПроводок.НазначитьТип("СчетК", "Справочник.ПланСчетов");
				КонецЕсли;
				
				// Инициализируем значения нового реквизита "НомерЖурнала" для элементов справочника проводок

				НалоговаяПроводка = 0;
				
				Если ТипЗначенияСтр(СпрПроводок.СчетД) = "Справочник" Тогда
					Если (Найти(СпрПроводок.СчетД.Код, "Н") <> 0)
					   и (СпрПроводок.СчетД.Забалансовый = 1) Тогда
						НалоговаяПроводка = 1;
					КонецЕсли;				

				ИначеЕсли ТипЗначенияСтр(СпрПроводок.СчетД) = "Перечисление" Тогда
					Если СпрПроводок.СчетД = Перечисление.ЗначенияАтрибутовПроводок.СчетНУ Тогда
						НалоговаяПроводка = 1;
					КонецЕсли;				

				КонецЕсли;

				Если ТипЗначенияСтр(СпрПроводок.СчетК) = "Справочник" Тогда
					Если (Найти(СпрПроводок.СчетК.Код, "Н") <> 0)
					   и (СпрПроводок.СчетК.Забалансовый = 1) Тогда
						НалоговаяПроводка = 1;
					КонецЕсли;				

				ИначеЕсли ТипЗначенияСтр(СпрПроводок.СчетК) = "Перечисление" Тогда
					Если СпрПроводок.СчетК = Перечисление.ЗначенияАтрибутовПроводок.СчетНУ Тогда
						НалоговаяПроводка = 1;
					КонецЕсли;				

				КонецЕсли;

				Если НалоговаяПроводка = 1 Тогда
					СпрПроводок.НомерЖурнала = "НУ";

				Иначе
					СпрПроводок.НомерЖурнала = "БУ";

				КонецЕсли;

				СпрПроводок.Записать();
				
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;

КонецПроцедуры // МодифицироватьСправочникПроводок()

//******************************************************************************
// ИнициализироватьНовыеРеквизитыДокументов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Инициализация новых реквизитов документов, используемых при формировании проводок для 
//  налогового учета
//
Процедура ИнициализироватьНовыеРеквизитыДокументов()
 Перем Запрос, ТекстЗапроса, Таб;

	Док = СоздатьОбъект("Документ");

	//Инициализация реквизита "ВидОперации" в документах "ПоступлениеДопРасходы"
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|ОбрабатыватьДокументы все;
	|ВидОперации = Документ.ПоступлениеДопРасходы.ВидОперации;
	|ТекущийДокумент = Документ.ПоступлениеДопРасходы.ТекущийДокумент;
	|Группировка ТекущийДокумент;
	|Условие(ПустоеЗначение(ВидОперации) = 1);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		Если Док.НайтиДокумент(Запрос.ТекущийДокумент) = 1 Тогда
			Док.ВидОперации = Перечисление.КодыОпераций.ДополнительныеРасходы;
			Док.Записать();
		КонецЕсли;
	КонецЦикла;

	//Инициализация реквизита "СчетНУ" в табличных частях документов "ПоступлениеПрочее" и "СтрокаАвансОтчетаПрочее"
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|ОбрабатыватьДокументы все;
	|ТекущийДокумент = Документ.ПоступлениеПрочее.ТекущийДокумент, Документ.СтрокаАвансОтчетаПрочее.ТекущийДокумент;
	|СчетНУ = Документ.ПоступлениеПрочее.СчетНУ, Документ.СтрокаАвансОтчетаПрочее.СчетНУ;
	|Группировка ТекущийДокумент;
	|Группировка СтрокаДокумента;
	|Условие(ПустаяСтрока(ТипЗначенияСтр(СчетНУ)) = 1);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		Если Док.НайтиДокумент(Запрос.ТекущийДокумент) = 1 Тогда
			Пока Запрос.Группировка(2) = 1 Цикл
				Док.ПолучитьСтрокуПоНомеру(Запрос.СтрокаДокумента);
				Док.НазначитьТип("СчетНУ", "Справочник.ПланСчетов");
				Док.Записать();
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИнициализироватьНовыеРеквизитыДокументов()
	
//******************************************************************************
// ПолучитьИНН(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//
Функция ПолучитьИНН(ИННКПП)
	
	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Лев(ИННКПП, Найти(ИННКПП, "\") - 1);

	Иначе
		Возврат СокрЛП(ИННКПП);

	КонецЕсли;

КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//
Функция ПолучитьКПП(ИННКПП)

	Если Найти(ИННКПП, "\") <> 0 Тогда
		// найден разделитель
		Возврат Сред(ИННКПП, Найти(ИННКПП, "\") + 1);

	Иначе
		Возврат "";

	КонецЕсли;

КонецФункции // ПолучитьКПП()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	Перем ПереписатьХозОперации;
	
	ПереписатьХозОперации = 0;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Обновления");
	
	// Отчет об изменениях во всех релизах.
	Если ВРег(Форма.Параметр) = ВРег("ПоказатьОбновления") Тогда  
		Возврат;   
	КонецЕсли;  
	
	СтатусВозврата(0);

	// Первый запуск конфигурации.
	Если ПустоеЗначение(Константа.НомерРелиза) = 1  Тогда
		НачатьТранзакцию();
		
		// Пользователь.
		Сообщить("
		|Заполнение справочников  ""Полномочия пользователей"".
		|", " ");
		Пользователь = СоздатьОбъект("Справочник.Пользователи");
		Пользователь.НайтиЭлемент(глПользователь);
	 	
		// Полномочия пользователей.
		Объект = СоздатьОбъект("Справочник.ПолномочияПользователей");
		
		Объект.Новый();
		Объект.Наименование                                   = "Минимальные полномочия";
		ЗаписатьОбъект(Объект);
		
		Объект.Новый();
		Объект.Наименование                                   = "Типовые полномочия";
		Объект.РазрешитьРедактированиеТаблиц                  = 1;
		Объект.РазрешитьПродаватьРезерв                       = 0;
		Объект.РазрешитьПревышениеКредита                     = 0;
		Объект.РазрешитьРедактированиеЦенВдокументах          = 0;
		Объект.РазрешитьПечатьНепроведенныхДокументов         = 1;
		ЗаписатьОбъект(Объект);
		
		Объект.Новый();
		Объект.Наименование                                   = "Полные полномочия";
		Объект.РазрешитьРедактированиеТаблиц                  = 1;
		Объект.РазрешитьПродаватьРезерв                       = 1;
		Объект.РазрешитьПревышениеКредита                     = 1;
		Объект.РазрешитьРедактированиеЦенВдокументах          = 1;
		Объект.РазрешитьПечатьНепроведенныхДокументов         = 1;
		ЗаписатьОбъект(Объект);
		
		ЗаписатьРеквизитПользователя("Полномочия", Объект.ТекущийЭлемент());
			
		Если Пользователь.Выбран() = 1 Тогда
			Попытка
				Пользователь.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), "!!");
			КонецПопытки;
		КонецЕсли;
	
        // Заполнение справочников "Хоз. операции" и "Движения регистров".
		Сообщить("
		|Заполнение справочников  ""Хоз. операции"" и ""Движения регистров"".
		|", " ");
	 	
		ОткрытьФорму("Обработка.НастройкаФормированияПроводок", "ХозОперации");
	
		Константа.НомерРелиза = "7.70.902";
		
		ЗафиксироватьТранзакцию();
		
		// НЕОБЯЗАТЕЛЬНОЕ ЗАПОЛНЕНИЕ
		
		Сообщить("
		|Начальное заполнение информационной базы.
		|", " ");
	 	
		Стр = "Произвести первоначальное заполнение информационной базы?
		      |Начальное заполнение не рекомендуется производить в том случае,
			  |если вы ранее вели учет в конфигурации ""Торговля + Склад"" ред. 8.7
			  |и хотите перенести накопленные данные
			  |(это можно сделать с помощью обработки, вызываемой из пункта ""Дополнительные возможности"" меню ""Сервис""). 
		      |";
		Если Вопрос(Стр, "Да+Нет") = "Да" Тогда
			НачальноеЗаполнение();
			
			//Возвращаем значение, показывающие. что надо запускать стартовый помощник
			Форма.Параметр = 1;
		КонецЕсли;
	КонецЕсли;
	
	// На всякий случай предупредим пользователей 8-х редакций
	Если Сред(Константа.НомерРелиза, 6, 1) = "8" Тогда
		Предупреждение("Алгоритм переноса данных из редакций 8.х описан 
		               |в файле ""CV87_90.txt"" в каталоге ""ExtForms"". 
					   |Скорее всего, нарушена структура информационной базы.
					   |Рекомендуется завершить работу с конфигурацией.", 60);
		Возврат;			   
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.900"  Тогда
		НачатьТранзакцию();
		Константа.НомерРелиза  = "7.70.902";
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.902"  Тогда
		НачатьТранзакцию();
		Константа.НомерРелиза  = "7.70.903";
		Таб.ВывестиСекцию("770903");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.903"  Тогда                 
		
		НачатьТранзакцию();
		// По умолчанию контроль остатков проводится по каждой фирме в отдельности
		Если ПустоеЗначение(Константа.КонтрольОтрицательныхОстатков) = 1 Тогда
			Константа.КонтрольОтрицательныхОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме;   
		КонецЕсли;
		Константа.НомерРелиза  = "7.70.904";
		Таб.ВывестиСекцию("770904");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.904"  Тогда 
		
		НачатьТранзакцию();
		Константа.НомерРелиза  = "7.70.905";
		Таб.ВывестиСекцию("770905");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.905"  Тогда 
		
		// Изменился план счетов 1С:Бухгалтерии
		НачатьТранзакцию();
		// Расширился справочник движений регистров
		ПереписатьХозОперации = 1;
		Константа.НомерРелиза  = "7.70.906";
		Таб.ВывестиСекцию("770906");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
		
	Если Константа.НомерРелиза = "7.70.906"  Тогда 
		
		НачатьТранзакцию();
		Константа.НомерРелиза  = "7.70.907";
		Таб.ВывестиСекцию("770907");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.907"  Тогда 
		
		НачатьТранзакцию();                       
		
		// Поменяли проводки по РеализацияРозница(ЕНВД)
		ПереписатьХозОперации = 1;
		Константа.НомерРелиза  = "7.70.908";
		Таб.ВывестиСекцию("770908");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.908"  Тогда 
		
		НачатьТранзакцию();                       
		
		// Таблицы синхронизированы с комплексной конфигурацией
		// Добавлены проводки по видам долга ДолгЗаОС, ДолгЗаНМА для
        // хоз. операций поступления оплаты от покупателей и книги продаж
		ПереписатьХозОперации = 1;
		Константа.НомерРелиза  = "7.70.909";
		Таб.ВывестиСекцию("770909");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.909"  Тогда 
		
		НачатьТранзакцию();                       
		
		//ПереписатьХозОперации = 1;
		Константа.НомерРелиза  = "7.70.910";
		//Таб.ВывестиСекцию("770910");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.910"  Тогда 
		
		НачатьТранзакцию();                       
		
		ПереписатьХозОперации = 1; // Исправили ошибки по ЕНВД (Отчет ККМ и возврат)
		Константа.НомерРелиза  = "7.70.911";
		Таб.ВывестиСекцию("770911");
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.911"  Тогда 
		
		НачатьТранзакцию();                       
		
		Константа.НомерРелиза  = "7.70.912";
		Таб.ВывестиСекцию("770912");
		
		// В отчете комитенту добавился новый реквизит.
		// Надо его заполнить так, чтобы проведение старых документов не поменялось
		Сч =0;
		Док = СоздатьОбъект("Документ.ОтчетКомитенту");
		Док.ВыбратьДокументы(,);
		Пока Док.ПолучитьДокумент() = 1  Цикл
			Сч = Сч + 1;
			Состояние("Заполнение нового реквизита в документах ""Отчет комитенту"": обновлено "+ Сч + " документов");
		    Если Док.СтавкаНДС.Выбран() = 0 Тогда
		        Док.СтавкаНДС = Перечисление.СтавкиНДС.НДС16_67;
				Док.Записать();
		    КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	КонецЕсли;	
	
	Если Константа.НомерРелиза = "7.70.912" Тогда
		
		НачатьТранзакцию();
		
	    ПереписатьХозОперации = 1; // Добавлены проводки по рознице
		
		// обновляем документы Доверенность
		// 1. Заполняем реквизит шапки НаПолучениеОт, как Контрагент.ЮрФизЛицо.ПолнНаименование
		// 2. Заполняем реквизит шапки ПоДокументу
		// 3. Заполняем реквизит МнЧ НаименованиеТМЦ, как Номенклатура.ПолнНаименование
		// 4. Заполняем реквизит МнЧ ОКЕИ, как Номенклатура.ОсновнаяЕдиница.ОКЕИ
		ДокДоверенность = СоздатьОбъект("Документ.Доверенность");
		ДокДоверенность.ВыбратьДокументы(,);
		Сч =0;
		Пока ДокДоверенность.ПолучитьДокумент() = 1 Цикл                     
			Сч = Сч + 1;
			Состояние("Обновляем документы ""Доверенность"" : обновлено "+ Сч + " документов");
			Если ПустоеЗначение(ДокДоверенность.Контрагент) = 0 Тогда
			    ДокДоверенность.НаПолучениеОт	= СокрЛП(ДокДоверенность.Контрагент.ЮрФизЛицо.ПолнНаименование);
			КонецЕсли;
			
			Если ПустоеЗначение(ДокДоверенность.ДокОснование) = 0 Тогда
				ДокДоверенность.ПоДокументу		= глПредставлениеДокумента(ДокДоверенность.ДокОснование);
			КонецЕсли;
			
			ДокДоверенность.ВыбратьСтроки();
			Пока ДокДоверенность.ПолучитьСтроку() = 1 Цикл
			    ДокДоверенность.НаименованиеТМЦ	= СокрЛП(ДокДоверенность.Номенклатура.ПолнНаименование);
				ДокДоверенность.ОКЕИ			= ДокДоверенность.Номенклатура.ОсновнаяЕдиница.ОКЕИ;
			КонецЦикла;         
			
			Попытка
				ДокДоверенность.Записать();
			Исключение
				ОтменитьТранзакцию();
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
				
		КонецЦикла;
		
		// В справочник цены добавлены реквизиты Валюта и Процент (Наценка).
		// Заполним эти реквизиты из справчника ТипыЦен
		СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
		СпрЦены			= СоздатьОбъект("Справочник.Цены");
		
		СпрНоменклатура.ВыборГруппы(0);
		СпрНоменклатура.ВключатьПодчиненные(1);
		СпрНоменклатура.ВыбратьЭлементы();
		Сч = 0;
		Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
			СпрЦены.ИспользоватьВладельца(СпрНоменклатура.ТекущийЭлемент());
			
			СпрЦены.ВыбратьЭлементы();
			Пока СпрЦены.ПолучитьЭлемент() = 1 Цикл
				Сч = Сч + 1;
				Состояние("Заполнение новых реквизитов справочника цен: обновлено "+ Сч + " элементов");
				
				ТипЦены		= спрЦены.ТипЦен;
				ЭлИзменен	= 0;
				
				Если ПустоеЗначение(СпрЦены.Валюта) = 1 Тогда
				    СпрЦены.Валюта	= ТипЦены.Валюта;
					ЭлИзменен		= 1;
				КонецЕсли;
				
				Если (ПустоеЗначение(СпрЦены.Процент) = 1)
				   И (ПустоеЗначение(ТипЦены.Процент) = 0)
				Тогда
					СпрЦены.Процент	= ТипЦены.Процент;
					ЭлИзменен		= 1;
				КонецЕсли;
				
				Если ЭлИзменен = 1 Тогда
					Попытка
						СпрЦены.Записать();
					Исключение
						ОтменитьТранзакцию();
						Сообщить(ОписаниеОшибки());
						Возврат;
					КонецПопытки;
					
				    Сообщить("" + СпрНоменклатура.ТекущийЭлемент() + ". Обновлена цены " + ТипЦены.Наименование);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла; 
		
		// Заполним метод учета в рознице для всех собственных юр. лиц
		СвоиЮрЛица = СоздатьОбъект("Справочник.СвоиЮрЛица");
		СвоиЮрЛица.ВыбратьЭлементы();
		Пока СвоиЮрЛица.ПолучитьЭлемент() = 1  Цикл
			СвоиЮрЛица.МетодУчетаРозницы = Перечисление.МетодыУчетаРозницы.ПоПокупнымЦенам; 
			СвоиЮрЛица.Записать();
		КонецЦикла;
		
		Константа.НомерРелиза  = "7.70.920"; // Релизы 7.70.913 - 7.70.919 не выпускались
		Таб.ВывестиСекцию("770920");

		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Константа.НомерРелиза = "7.70.920" Тогда
		
		// в документы реализация розница добавился реквизит ВидОперации.
		ВидОперации	= Перечисление.ВидыОперацийРеализацияРозница.Прочее;
		Док			= СоздатьОбъект("Документ.РеализацияРозница");
		
		НачатьТранзакцию();
		
			Док.ВыбратьДокументы(,);
			Пока Док.ПолучитьДокумент() = 1 Цикл
			    Состояние("Обновляется документ " + Док.ТекущийДокумент());
				Док.ВидОперации	= ВидОперации;
				
				Попытка
					Док.Записать();
				Исключение
					ОтменитьТранзакцию();
					Сообщить(ОписаниеОшибки());
					Возврат;
				КонецПопытки;
					
			КонецЦикла;
			
			Константа.НомерРелиза = "7.70.921";
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
	Если Константа.НомерРелиза = "7.70.921" Тогда
		НачатьТранзакцию();
			Константа.НомерРелиза = "7.70.922";
			Таб.ВывестиСекцию("770922");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Константа.НомерРелиза = "7.70.922" Тогда
		НачатьТранзакцию();
            ПереписатьХозОперации = 1; // Реализация ОС,НМ; ОтчетККМ, Поступление джоп расходы, Переоценка валюты
			Константа.НомерРелиза = "7.70.923";
			Таб.ВывестиСекцию("770923");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Если Константа.НомерРелиза = "7.70.923" Тогда
		НачатьТранзакцию();
            ПереписатьХозОперации = 1; // Розница, Тара, ОС, НМА и многое другое...
			Константа.НомерРелиза = "7.70.924";
			Таб.ВывестиСекцию("770924");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Константа.НомерРелиза = "7.70.924" Тогда  
		// Теперь у документов реализации появился реквизит "Флаг свертки", 
		// который имеет значение 1 для документов, обработанных сверткой.
		// Здесь этот реквизит заполняется для документов, ранее обработанных сверткой.
		
		// Определим дату последней сверки
		ДтСвертки = ПолучитьПустоеЗначение("Дата");
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|ДокОстатков = Документ.ВводОстатковКассаБанкПодотчетник.ТекущийДокумент, Документ.ВводОстатковПокупателя.ТекущийДокумент, Документ.ВводОстатковПоставщика.ТекущийДокумент, Документ.ВводОстатковТМЦ.ТекущийДокумент, Документ.ВводОстатковЗаказыЗаявки.ТекущийДокумент;
		|ФлагСвертки = Документ.ВводОстатковКассаБанкПодотчетник.ФлагСвертки, Документ.ВводОстатковПокупателя.ФлагСвертки, Документ.ВводОстатковПоставщика.ФлагСвертки, Документ.ВводОстатковТМЦ.ФлагСвертки, Документ.ВводОстатковЗаказыЗаявки.ФлагСвертки;
		|Группировка ДокОстатков упорядочить по ДокОстатков.ДатаДок;
		|Условие(ФлагСвертки = 1);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
	
		Если Запрос.Группировка(1,-1) = 1 Тогда
			ДтСвертки = Запрос.ДокОстатков.ДатаДок;
			ПозСвертки = Запрос.ДокОстатков.ПолучитьПозицию();
		КонецЕсли;

		НачатьТранзакцию();
		
			//Надо пометить документы, обработанные сверткой	   
			Если ПустоеЗначение(ДтСвертки) = 0 Тогда
				Док = СоздатьОбъект("Документ");
				Док.ВыбратьДокументы(, ДтСвертки);
				Пока Док.ПолучитьДокумент()=1 Цикл
					Если Док.ПолучитьПозицию() < ПозСвертки Тогда
						Если глЕстьРеквизитШапки("ФлагСвертки", Док.Вид()) = 1 Тогда
						    Док.ФлагСвертки = 1;        
							Док.Записать();
						КонецЕсли;                    
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
            ПереписатьХозОперации = 1; // "Корректировка отгрузки"(ОС, НМА, материалы, прочее), "Возврат от покупателя" (сторно начисл. НП)
			Константа.НомерРелиза = "7.70.925";
			Таб.ВывестиСекцию("770925");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;         
	
	Если Константа.НомерРелиза = "7.70.925" Тогда
		НачатьТранзакцию();
            ПереписатьХозОперации = 1; // Розница, Тара, ОС, НМА и многое другое...
			Константа.НомерРелиза = "7.70.926";
			Таб.ВывестиСекцию("770926");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	Если Константа.НомерРелиза = "7.70.926" Тогда
			
		// Теперь количество видов документов, имеющих реквизит "ФлагСвертки"
		// значительно расширилось.
		// Здесь этот реквизит заполняется для документов, ранее обработанных сверткой.
		
		// Определим дату последней сверки
		ДтСвертки = ПолучитьПустоеЗначение("Дата");
		Запрос = СоздатьОбъект("Запрос");
		ТекстЗапроса = 
		"//{{ЗАПРОС(Сформировать)
		|ОбрабатыватьДокументы все;
		|Обрабатывать НеПомеченныеНаУдаление;
		|ДокОстатков = Документ.ВводОстатковКассаБанкПодотчетник.ТекущийДокумент, Документ.ВводОстатковПокупателя.ТекущийДокумент, Документ.ВводОстатковПоставщика.ТекущийДокумент, Документ.ВводОстатковТМЦ.ТекущийДокумент, Документ.ВводОстатковЗаказыЗаявки.ТекущийДокумент;
		|ФлагСвертки = Документ.ВводОстатковКассаБанкПодотчетник.ФлагСвертки, Документ.ВводОстатковПокупателя.ФлагСвертки, Документ.ВводОстатковПоставщика.ФлагСвертки, Документ.ВводОстатковТМЦ.ФлагСвертки, Документ.ВводОстатковЗаказыЗаявки.ФлагСвертки;
		|Группировка ДокОстатков упорядочить по ДокОстатков.ДатаДок;
		|Условие(ФлагСвертки = 1);
		|"//}}ЗАПРОС
		;
		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;   
		
		НачатьТранзакцию();
            МодифицироватьСправочникПроводок();
			ИнициализироватьНовыеРеквизитыДокументов();
			ЗаполнитьШтрихкодыВесовыхТоваров();
		
			Если Запрос.Группировка(1,-1) = 1 Тогда
				ДтСвертки = Запрос.ДокОстатков.ДатаДок;
				ПозСвертки = Запрос.ДокОстатков.ПолучитьПозицию();
			КонецЕсли;
	
			//Надо пометить документы, обработанные сверткой	   
			Если ПустоеЗначение(ДтСвертки) = 0 Тогда
				Док = СоздатьОбъект("Документ");
				Док.ВыбратьДокументы(, ДтСвертки);
				Пока Док.ПолучитьДокумент()=1 Цикл
					Если Док.ПолучитьПозицию() < ПозСвертки Тогда
						Если глЕстьРеквизитШапки("ФлагСвертки", Док.Вид()) = 1 Тогда
						    Док.ФлагСвертки = 1;        
							Док.Записать();
						КонецЕсли;                    
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
            ПереписатьХозОперации = 1; // Налоговый учет, движения партий услуг и другое...
			Константа.НомерРелиза = "7.70.927";
			Таб.ВывестиСекцию("770927");                                              
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Если Константа.НомерРелиза = "7.70.927" Тогда 
		Док = СоздатьОбъект("Документ.ЗаявкаПокупателя");
		ДокСписание = СоздатьОбъект("Документ.СписаниеТМЦ");
	
		
		НачатьТранзакцию();                       
		
		  	// Заполним способы резервирования для заявок покупателя
			Док.ВыбратьДокументы(,);
			Пока Док.ПолучитьДокумент() = 1 Цикл
				Если Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад Тогда
					Док.СпособРезервирования = Перечисление.СпособыРезервирования.Остаток;
					Док.Записать();
				ИначеЕсли Док.ВидОперации = Перечисление.ВидыОперацийЗаявок.НаПоставку Тогда
					Док.СпособРезервирования = Перечисление.СпособыРезервирования.ЗаказыОстаток;
					Док.Записать();
				КонецЕсли;
			КонецЦикла;

		  	// Заполним новые реквизиты в документах "ПлатежноеПоручение"
			Док = СоздатьОбъект("Документ.ПлатежноеПоручение");
			
			Док.ВыбратьДокументы();
			Пока Док.ПолучитьДокумент() = 1 Цикл

				Если ПустаяСтрока(Док.ИННПлательщика) = 1 Тогда
					Док.ИННПлательщика = ПолучитьИНН(Док.ЮрЛицо.ИНН);
					
				КонецЕсли;
					
				Если ПустаяСтрока(Док.КПППлательщика) = 1 Тогда
					Док.КПППлательщика = ПолучитьКПП(Док.ЮрЛицо.ИНН);
					
				КонецЕсли;
					
				Если Док.Контрагент.Выбран() = 1 Тогда
					Если ПустаяСтрока(Док.ИННПолучателя) = 1 Тогда
						Док.ИННПолучателя = ПолучитьИНН(Док.Контрагент.ЮрФизЛицо.ИНН);
			
					КонецЕсли;
			
					Если ПустаяСтрока(Док.КПППолучателя) = 1 Тогда
						Док.КПППолучателя = ПолучитьКПП(Док.Контрагент.ЮрФизЛицо.ИНН);
						
					КонецЕсли;
				КонецЕсли;
				
				Док.Записать();
		
			КонецЦикла;         
			
			// Установим тип и вид реквизита СчетНУ для документа "Списание ТМЦ"
			ДокСписание.ВыбратьДокументы(,); 
			Пока ДокСписание.ПолучитьДокумент() = 1 Цикл
				Значение = ДокСписание.ПолучитьАтрибут("СчетНУ");
				СтарыйТипВид = ТипЗначенияСтр(Значение);
				
				Если (СтарыйТипВид = "Справочник") ИЛИ (СтарыйТипВид = "Документ") ИЛИ (СтарыйТипВид = "Перечисление") Тогда
					СтарыйТипВид = СтарыйТипВид+"."+Значение.Вид();
				КонецЕсли;
				          
				Если СтарыйТипВид <> "Справочник.ПланСчетов" Тогда
					ДокСписание.НазначитьТип("СчетНУ", "Справочник.ПланСчетов");
					ДокСписание.Записать();
				КонецЕсли;                 
			КонецЦикла;
			
			
			ПереписатьХозОперации = 1; // Налоговый учет, продажа с ЕНВД с оптового склада
			Константа.НомерРелиза = "7.70.928";
			Таб.ВывестиСекцию("770928");     
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Если Константа.НомерРелиза = "7.70.928" Тогда
		НачатьТранзакцию();
            ПереписатьХозОперации = 1; // Возврат поставщику из розницы и возврат от покупателя на розничный склад
			Константа.НомерРелиза = "7.70.929";
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Если ПустоеЗначение(ПереписатьХозОперации) = 0 Тогда
		ОткрытьФормуМодально("Обработка.НастройкаФормированияПроводок","ХозОперации");
	КонецЕсли;
	
	Если Таб.ВысотаТаблицы() > 0 Тогда
        Таб.Защита(1);
		Таб.Опции(0, 0, 0, 0, "ОбновлениеИБ", "ОбновлениеИБ");
		Таб.Показать("Обновления");
	КонецЕсли;	
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЯчейкиТаблицы(Адрес,Значение)
	Если Лев(Адрес, 3) = "огл" Тогда
		Ссылка = Сред(Адрес, 4);
		Таблица.АктивнаяОбласть(Ссылка);                    
	ИначеЕсли Лев(Адрес, 2) = "77" Тогда
		Ссылка = "огл"+СокрЛ(Адрес);
		Таблица.АктивнаяОбласть(Ссылка);                    
	КонецЕсли;
КонецПроцедуры // ПриВыбореЯчейкиТаблицы()

Процедура ОбработкаЯчейкиТаблицы(Значение,ФлагСтандОбраб,Таблица,Адрес)
	Сообщить("ОбработкаЯчейкиТаблицы");
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
