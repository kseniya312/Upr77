////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	XMLАнализатор;
Перем	Док;
Перем	ЭлКаталог;

Перем	КаталогВСправочнике;
Перем	ТипКаталога;
Перем	СпособИдентификации;

Перем	СтарыйНомерСтроки;

Перем	СписВыбранныхТиповЦен;
Перем	СписВыбранныхПакетов;

Перем	ФиксироватьСтрок;

Перем	ИдТекущейГруппы;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************

Процедура ПолучитьТоварыГруппы(ИдГруппы="")	Далее
Процедура ОбработкаПодбора(Зн)				Далее


//******************************************************************************
// ВыборФайла()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - ИмяФайла
//
// Описание:
//  
//
Функция ВыборФайла()
	
	Путь		=	"";
	ИмяФайла	=	"";
	Если ФС.ВыбратьФайл(1, ИмяФайла, Путь, "Выберите файл каталога (прайс-листа)", "*.xml|*.xml", , ) = 0 Тогда Возврат("") КонецЕсли;
	ИмяФайла = Путь + ИмяФайла;
	Если Фс.СуществуетФайл(ИмяФайла) = 0 Тогда Возврат("") КонецЕсли;
	
 	Возврат(ИмяФайла);
 	
КонецФункции		//	ВыборФайла()

//******************************************************************************
// Единица(Товар, ИмяЕдиницы)
//
// Параметры:
//  Товар, ИмяЕдиницы
//
// Возвращаемое значение:
//  Элемент справочника "Единицы"
//
// Описание:
//  Ищет единицу товара
//
Функция Единица(Товар, Знач ИмяЕдиницы, ШтрихКод="")
                                 
	Если ПустоеЗначение(Товар)		= 1	Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
	
	СпрЕдиниц = СоздатьОбъект("Справочник.Единицы");
	СпрЕдиниц.ИспользоватьВладельца(Товар.ТекущийЭлемент());
	          
	Если ПустоеЗначение(ИмяЕдиницы)	= 1	Тогда
		ИмяЕдиницы	=	"шт";
	КонецЕсли;
		
	СпрКлассификаторЕдиниц = СоздатьОбъект("Справочник.ОКЕИ");
    //Если СпрКлассификаторЕдиниц.НайтиПоНаименованию(СокрЛП(ИмяЕдиницы), 0, 1) = 0 Тогда
	Если СпрКлассификаторЕдиниц.НайтиПоКоду(СокрЛП(ИмяЕдиницы), 0) = 0 Тогда
		СпрКлассификаторЕдиниц.Новый();
		СпрКлассификаторЕдиниц.Код			=	СокрЛП(ИмяЕдиницы);
		СпрКлассификаторЕдиниц.Наименование	=	СокрЛП(ИмяЕдиницы);
		СпрКлассификаторЕдиниц.Записать();
    КонецЕсли;

	Если СпрЕдиниц.НайтиПоРеквизиту("ОКЕИ", СпрКлассификаторЕдиниц.ТекущийЭлемент(), 0) = 0 Тогда
		СпрЕдиниц.Новый();
		СпрЕдиниц.ОКЕИ			=	СпрКлассификаторЕдиниц.ТекущийЭлемент();
		СпрЕдиниц.Наименование	=	СокрЛП(ИмяЕдиницы);
		СпрЕдиниц.Коэффициент	=	1;
		СпрЕдиниц.ШтрихКод		=	ШтрихКод;
		СпрЕдиниц.Записать();
	КонецЕсли;
	
	Возврат СпрЕдиниц.ТекущийЭлемент();
	
КонецФункции	//	Единица()

//******************************************************************************
// Валюта(СтрВалюта)
//
// Параметры:
//  СтрВалюта - строка - имя валюты
//
// Возвращаемое значение:
//  Элемент справочника "Валюты"
//
// Описание:
//  ищет валюту по наименованию
//
Функция Валюта(СтрВалюта)
	
    СпрВалюты = СоздатьОбъект("Справочник.Валюты");
	Если СпрВалюты.НайтиПоНаименованию(СокрЛП(СтрВалюта), 0, 1) = 0 Тогда
		Сообщить("Не найдена валюта - " + СтрВалюта);
		Возврат( Константа.ВалютаУпрУчета );
	КонецЕсли;
	
	Возврат(СпрВалюты.ТекущийЭлемент());
	
КонецФункции		//	Валюта()

//******************************************************************************
// СтрЕдиницаТовара(ИдентификаторТовара)
//
// Параметры:
//  ИдентификаторТовара
//
// Возвращаемое значение:
//  Строка - имя единицы в xml-каталоге
//
// Описание:
//  Ищет имя единицы товара в xml-каталоге
//
Функция СтрЕдиницаТовара(ИдентификаторТовара)
	
	ЭлТовар	=	ЭлКаталог.ВыбратьУзел("Товар[@Идентификатор = """ + ИдентификаторТовара + """]");
	Единица	=	ЭлТовар.ПолучитьАтрибут("Единица");
	Если ПустоеЗначение(Единица) = 1 Тогда
		Единица	=	ЭлКаталог.ПолучитьАтрибут("Единица");
	КонецЕсли;
	
    Возврат(Единица);
	
КонецФункции		//	СтрЕдиницаТовара()

//******************************************************************************
// ЦенаИзПакета(ЭлПакетПредложений, ИдентификаторТовара, Цена="", Валюта="", Единица="")
//
// Параметры:
//  ЭлПакетПредложений	-	узел пакета предложений
//	ИдентификаторТовара -	строка - Идентификатор товара
//	Цена				-	сюда вернется значение цены товара
//	Валюта				-	сюда вернется имя валюты товара
//	Единица				-	сюда вернется имя единицы товара
//
// Возвращаемое значение:
//  Строка - представление цены
//
// Описание:
//  ищет "предложение" в указанном пакете, формирует строку-описание цены
//
Функция ЦенаИзПакета(ЭлПакетПредложений, ИдентификаторТовара, Цена="", Валюта="", Единица="")
	
	Предложение	=	ЭлПакетПредложений.ВыбратьУзел("Предложение[@ИдентификаторТовара=""" + ИдентификаторТовара + """]");
	Если ПустоеЗначение(Предложение) = 1 Тогда Возврат("") КонецЕсли;
	Цена	=	Предложение.ПолучитьАтрибут("Цена");
	Если ПустоеЗначение(Цена) = 1 Тогда Возврат "" КонецЕсли;
	Валюта	=	Предложение.ПолучитьАтрибут("Валюта");
	Единица	=	Предложение.ПолучитьАтрибут("Единица");
	Если ПустоеЗначение(Валюта) = 1 Тогда
		Валюта	=	ЭлПакетПредложений.ПолучитьАтрибут("Валюта");
	КонецЕсли;
	Если ПустоеЗначение(Единица) = 1 Тогда
		Единица	=	СтрЕдиницаТовара(ИдентификаторТовара);
	КонецЕсли;
	
	Возврат(Цена + " " + Валюта + "/" + Единица);
    
КонецФункции		//	ЦенаИзПакета()

//******************************************************************************
// ПредставлениеТекущегоЭлемента(Товар, Идентификатор);
//
// Параметры:
//  Товар			-	элемент справочника "номенклатура"
//	Идентификатор	-	Идентификатор товара в каталоге
//
// Возвращаемое значение:
//  строка - Представление текущего товара
//
// Описание:
//  В зависимости от установленного способа вывода цен - формирует строковое представление
//
Функция ПредставлениеТекущегоЭлемента(Товар, Идентификатор="");
	
	Стр		=	"";
	
	//	Цены из пакетов предложений
	                             
	Если ФормСпособПоказаЦенИзПакетов = 2 Тогда
		Если ПустоеЗначение(Идентификатор) = 0 Тогда
			Для Сч = 1 По ФормСписПакетовПредложений.РазмерСписка() Цикл
				Если ФормСписПакетовПредложений.Пометка(Сч) = 0 Тогда Продолжить КонецЕсли;
				ИмяПакета	=	"";
			    ЭлПакетПредложений = ФормСписПакетовПредложений.ПолучитьЗначение(Сч, ИмяПакета);
				Стр	=	Стр + "Из пакета №" + Сч + " - " + ЦенаИзПакета(ЭлПакетПредложений, Идентификатор) + "  ";
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(Товар)	=	1	Тогда	Возврат(Стр)	КонецЕсли;
    
	//	Цены из справочника цен
	
	Если ФормСпособПоказаЦен = 2 Тогда
	    Для Сч = 1 По СписВыбранныхТиповЦен.РазмерСписка() Цикл
			ТипЦены		=	СписВыбранныхТиповЦен.ПолучитьЗначение(Сч);
			_Цена		=	"";
			_Единица	=	"";
			_Валюта		=	"";
			Если глВернутьЦену(Товар, ТипЦены, РабочаяДата(), _Цена, _Единица, _Валюта) = 1 Тогда
				Стр	=	Стр + СокрЛП(ТипЦены.Наименование) + " - " + _Цена + " " + _Валюта + "/" + _Единица + "  ";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции		//	ПредставлениеТекущегоЭлемента()

//******************************************************************************
// НайтиТовар(Идентификатор)
//
// Параметры:
//  Идентификатор - Идентификатор товара в каталоге
//
// Возвращаемое значение:
//  Элемент справочника "Номенклатура"
//
// Описание:
//  Производится попытка идентификации товара в учетной системе - либо в справочнике "Номенклатура"
//	либо в справочнике "Аналоги"
//
Функция НайтиТовар(Идентификатор)
	
	Если СпособИдентификации = "НеПроводитьИдентификацию" Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
	
	Если ТипКаталога = "Наш" Тогда
		Товар	=	СоздатьОбъект("Справочник.Номенклатура");
		Если		СпособИдентификации = "Код"		Тогда
			Если Товар.НайтиПоКоду(Идентификатор, 0) = 1 Тогда
				Возврат Товар.ТекущийЭлемент();
			КонецЕсли;
		ИначеЕсли	СпособИдентификации = "ШтрихКод" Тогда
			СпрЕдиниц	=	СоздатьОбъект("Справочник.Единицы");
			Если СпрЕдиниц.НайтиПоРеквизиту("ШтрихКод", Идентификатор, 1) = 1 Тогда
				Товар.НайтиЭлемент(СпрЕдиниц.Владелец);
				Возврат Товар.ТекущийЭлемент();
			КонецЕсли;
		Иначе
			Если Товар.НайтиПоРеквизиту(СпособИдентификации, Идентификатор, 1) = 1 Тогда
				Возврат Товар.ТекущийЭлемент();
			КонецЕсли;
		КонецЕсли;
	Иначе
		Аналог	=	СоздатьОбъект("Справочник.Аналоги");
		Если Аналог.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", Идентификатор, 0, 0) = 1 Тогда
	        Пока Аналог.ПолучитьЭлемент() = 1 Цикл
	            Если Аналог.Каталог =	КаталогВСправочнике Тогда
					Возврат Аналог.Владелец;
	            КонецЕсли;
	        КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПолучитьПустоеЗначение();
	
КонецФункции		//	НайтиТовар()

//******************************************************************************
// СформироватьИнформационнуюСтроку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - представление текущего элемента
//
// Описание:
//  При изменении текущего товара формирует строку - представление текущего элемента
//
Функция СформироватьИнформационнуюСтроку()
	
	ТекущийНомерСтроки	=	ФормТабТоваров.НомерСтроки;
	
	Если ПустоеЗначение(ТекущийНомерСтроки) = 1 Тогда
		СтарыйНомерСтроки	= "";
		Возврат "";
	КонецЕсли;
	    
	Если ТекущийНомерСтроки <> СтарыйНомерСтроки Тогда
		СтарыйНомерСтроки	=	ТекущийНомерСтроки;
		Возврат ПредставлениеТекущегоЭлемента(НайтиТовар(ФормТабТоваров.ИдентификаторВКаталоге), ФормТабТоваров.Идентификатор);
	КонецЕсли;
	
	Возврат ПредставлениеТекущегоЭлемента(НайтиТовар(ФормТабТоваров.ИдентификаторВКаталоге), ФормТабТоваров.Идентификатор);
	
КонецФункции		//	СформироватьИнформационнуюСтроку()

//******************************************************************************
// ПоказатьТаблицу(НомерТекущейСтроки=0)
//
// Параметры:
//  НомерТекущейСтроки - если передан, то обновляется только текущая строка
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу - дерево групп
//
Процедура ПоказатьТаблицу(НомерТекущейСтроки=0)
	
	Таблица.Очистить();
	
	Таблица.ВывестиСекцию("Шапка|Кнопки");

	ПредыдущийУровень	=	1;
	ФлПредыдущегоУровня	=	0;
	
	ФормТабГрупп.ВыбратьСтроки();
	Пока ФормТабГрупп.ПолучитьСтроку() = 1 Цикл
		Расшифровка	=	ФормТабГрупп.Идентификатор;
		Группа		=	ФормТабГрупп.Наименование;
		Уровень		=	ФормТабГрупп.Уровень;
		ФлРаскрыта	=	ФормТабГрупп.ФлРаскрыта;
		
		Если (ПредыдущийУровень < Уровень) И (ФлПредыдущегоУровня = 0) Тогда Продолжить КонецЕсли;
		
		Таблица.ВывестиСекцию("Группа|Начало");
		Для СчУровней = 1 По Уровень - 1 Цикл
			Таблица.ПрисоединитьСекцию("Группа|Пусто");
		КонецЦикла;
		
		Если ФормТабГрупп.НомерСтроки = НомерТекущейСтроки Тогда
			Если ФлРаскрыта = 1 Тогда
				Таблица.ПрисоединитьСекцию("Группа|Открыта");
			Иначе
				Таблица.ПрисоединитьСекцию("Группа|Закрыта");
			КонецЕсли;
			Таблица.ПрисоединитьСекцию("Группа|ТекущаяСтрока");
		Иначе
			Таблица.ПрисоединитьСекцию("Группа|Закрыта");
			Таблица.ПрисоединитьСекцию("Группа|Имя");
		КонецЕсли;
		
		ПредыдущийУровень	=	Уровень;
		ФлПредыдущегоУровня	=	ФлРаскрыта;
	КонецЦикла;
	
	Таблица.Показать();
	
КонецПроцедуры		//	ПоказатьТаблицу()

//******************************************************************************
// ПрописатьЦенуТовара(Товар, Цена, Единица)
//		
// Параметры:
//	Товар	-	Элемент справочникка "Номенклатура", для которого устанавливаем цену
//	Цена	-	Значение цены
//	Единица	-	Единица цены	(Справочник.Единицы)
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Если цены с выбранным в диалоге типом цен у товара нет, то добавляем новую, иначе,
//	в случае несовпадения на заданную дату реквизитов существующих и загружаемых - замещаем...
//		
Процедура ПрописатьЦенуТовара(Товар, Цена, Единица, Валюта)
	                                              
	ЭлементЦены	=	"";
	
	Если глВернутьЦену(Товар, ФормТипЦеныНового, РабочаяДата(), , , , , ЭлементЦены) = 0 Тогда
		СпрЦен	=	СоздатьОбъект("Справочник.Цены");
		СпрЦен.ИспользоватьДату(РабочаяДата(), 1);
		СпрЦен.ИспользоватьВладельца(Товар);
		СпрЦен.Новый();
		СпрЦен.ТипЦен			=	ФормТипЦеныНового;
		СпрЦен.Единица			=	Единица;
		СпрЦен.Цена				=	Цена;
		СпрЦен.Валюта			=	Валюта;
		СпрЦен.Процент			=	ФормТипЦеныНового.Процент;
		СпрЦен.Записать();
	Иначе
		СпрЦен	=	СоздатьОбъект("Справочник.Цены");
		СпрЦен.НайтиЭлемент(ЭлементЦены);
		СпрЦен.ИспользоватьДату(РабочаяДата(), 1);
		
		ФлЦенаИзменена	=	0;
		Если	СпрЦен.Валюта	<>	Валюта	Тогда
			СпрЦен.Единица	=	Валюта;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если	СпрЦен.Единица	<>	Единица	Тогда
			СпрЦен.Единица	=	Единица;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если	СпрЦен.Цена		<>	Цена	Тогда
			СпрЦен.Цена		=	Цена;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если ФлЦенаИзменена	=	1 Тогда	СпрЦен.Записать()	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ПрописатьЦенуТовара()

//******************************************************************************
// УстановитьЦенуТовара(Товар, Идентификатор)
//
// Параметры:
//  Товар - новый элемент справочника "Номенклатура", у которого устанавливаем цену
//	Идентификатор	-	внутренний идентификатор товара в xml-документе
//
// Возвращаемое значение:
//  1 - цена установлена
//
// Описание:
//  Для новых товаров устанавливает цену в справочнике "Цены" из указанного пакета предложений
//
Функция УстановитьЦенуТовара(Товар, Идентификатор)
	
	Если (ПустоеЗначение(ФормТипЦеныНового) = 0) И (ФормПакетЦеныНового.ТекущаяСтрока() > 0) Тогда
		
		СтрЦена				=	"";
		СтрВалюта			=	"";
		СтрЕдиница			=	"";
		
		ЭлПакетПредложений	=	ФормПакетЦеныНового.ПолучитьЗначение(ФормПакетЦеныНового.ТекущаяСтрока());
		ЦенаИзПакета(ЭлПакетПредложений, Идентификатор, СтрЦена, СтрВалюта, СтрЕдиница);
		
		Единица	=	Единица(Товар.ТекущийЭлемент(), СтрЕдиница);
		Валюта	=	Валюта(СтрВалюта);
		
		Если ПустоеЗначение(СтрЦена) = 0 Тогда
			                            
			НоваяЦена	=	глПересчет(Число(СтрЦена), Валюта, РабочаяДата(), ФормТипЦеныНового.Валюта, РабочаяДата());
			
			ПрописатьЦенуТовара(Товар.ТекущийЭлемент(), НоваяЦена, Единица, Валюта);
			
			//Цена	=	СоздатьОбъект("Справочник.Цены");
			//Цена.ИспользоватьВладельца(Товар.ТекущийЭлемент());
			//Цена.ИспользоватьДату(РабочаяДата(), 1);
			//Цена.Новый();
			//Цена.ТипЦен				=	ФормТипЦеныНового.ТекущийЭлемент();
			//Цена.Цена				=	глПересчет(Число(СтрЦена), Валюта, РабочаяДата(), ФормТипЦеныНового.Валюта, РабочаяДата());
			//Цена.Единица			=	Единица;
			//Цена.Записать();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(1);
    
КонецФункции		//	УстановитьЦенуТовара()

//******************************************************************************
// СоздатьНовыйТовар()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Новый элемент справочника "Номенклатура"
//
// Описание:
//  Создает новый элемент справочника "Номенклатура" для текущей строки таблицы товаров
//
Функция СоздатьНовыйТовар(Наименование, Идентификатор, ШтрихКод="")
	
	Товар	=	СоздатьОбъект("Справочник.Номенклатура");
	
	Товар.Новый();
	
	//Товар.ИспользоватьДату('01.01.1980', 1);
	
	Товар.Наименование			=	Наименование;
	Товар.ПолнНаименование		=	Наименование;
	Товар.ВидНоменклатуры		=	Перечисление.ВидыНоменклатуры.Прочее;
	
	Товар.СтавкаНДС				=	Перечисление.СтавкиНДС.НДС20;
	Товар.СтавкаНП				=	глЗначениеПоУмолчанию("ОсновнаяСтавкаНП");
	
	Товар.Родитель				=	ФормГруппаДляДобавления;
	Товар.Записать();
	
	//Артикул
	//БазоваяЕдиница
	//Весовой
	//ВидДеятельности
	//ВидНоменклатуры
	//Комментарий
	//Комплектуется
	//МинОстаток
	//ОсновнаяЕдиница
	//ОсновноеСвойство
	//ПолнНаименование
	//СтавкаНДС
	//СтавкаНП	
	
	Единица						=	Единица(Товар.ТекущийЭлемент(), СтрЕдиницаТовара(Идентификатор), ШтрихКод);
	
	Товар.ОсновнаяЕдиница		=	Единица;
	Товар.БазоваяЕдиница		=	Единица;
	Товар.Записать();
	
	Сообщить("В справочник номенклатуры добавлен новый товар - '"  + Товар.Наименование + "'");
	
	Возврат Товар.ТекущийЭлемент();
	
КонецФункции		//	СоздатьНовыйТовар()

//******************************************************************************
// УстановитьТовар()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Элемент справочника "Номенклатура"
//
// Описание:
//  Производится попытка идентификации товара из файла по справочнику "Номенклатура" или "Аналоги" 
//
Функция УстановитьТовар()
	                                      
	Если СпособИдентификации = "НеПроводитьИдентификацию" Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
	
	Товар	=	СоздатьОбъект("Справочник.Номенклатура");
	
	Если ТипКаталога = "Наш" Тогда
		
        Если Товар.НайтиПоНаименованию(ФормТабТоваров.Наименование, 0, 1) = 1 Тогда
			Предупреждение("Товар не идентифицирован! Но в справочнике номенклатуры
							|найден товар с аналогичным наименованием - " + ФормТабТоваров.Наименование + "
							|Измените " + СпособИдентификации + " товара в справочнике или
							|атрибут 'ИдентификаторВКаталоге' у товара в XML-файле.");
			Возврат ПолучитьПустоеЗначение();
        КонецЕсли;
		
		Если Вопрос("Товар не идентифицирован! Добавить товар в справочник?", 4, 60)  <> 6 Тогда Возврат(ПолучитьПустоеЗначение()) КонецЕсли;
                            
		СсылкаНаТовар	=	СоздатьОбъект("Справочник.Номенклатура");;
	    
		Если		СпособИдентификации = "Код" Тогда
			Товар	=	СоздатьНовыйТовар(ФормТабТоваров.Наименование, ФормТабТоваров.Идентификатор);
			СсылкаНаТовар.НайтиЭлемент(Товар);
			СсылкаНаТовар.Код	=	ФормТабТоваров.ИдентификаторВКаталоге;
			СсылкаНаТовар.Записать();
		ИначеЕсли	СпособИдентификации = "ШтрихКод" Тогда
			Товар	=	СоздатьНовыйТовар(ФормТабТоваров.Наименование, ФормТабТоваров.Идентификатор, ФормТабТоваров.ИдентификаторВКаталоге);
		Иначе
			Товар	=	СоздатьНовыйТовар(ФормТабТоваров.Наименование, ФормТабТоваров.Идентификатор);
			СсылкаНаТовар.НайтиЭлемент(Товар);
			СсылкаНаТовар.УстановитьАтрибут(СпособИдентификации, ФормТабТоваров.ИдентификаторВКаталоге);
			СсылкаНаТовар.Записать();
		КонецЕсли;
		
		Возврат Товар.ТекущийЭлемент();
		
	Иначе		//	Если ТипКаталога = "НеНаш" Тогда
	                 
		Поз	=	ФормСпособЗагрузкиТоваров;
		Если	Поз = 3 Тогда
			СписокСпособов	=	СоздатьОбъект("СписокЗначений");
			СписокСпособов.ДобавитьЗначение("Создать новый товар (искать по наименованию)");
			СписокСпособов.ДобавитьЗначение("Выбрать аналог в справочнике номенклатуры");
			Зн  = "";
			Если СписокСпособов.ВыбратьЗначение(Зн, "", Поз, , 1) = 0 Тогда Возврат(ПолучитьПустоеЗначение()) КонецЕсли;
		КонецЕсли;

    	Если Товар.НайтиПоНаименованию(ФормТабТоваров.Наименование, 0, 1) = 1 Тогда
			Сообщить("Товар найден по наименованию!");
		КонецЕсли;
		
		Если		Поз = 1 Тогда		//	Создаем новый товар и устанавливаем аналог
			
			Если ПустоеЗначение(Товар.ТекущийЭлемент()) = 1 Тогда
				Товар	=	СоздатьНовыйТовар(ФормТабТоваров.Наименование, ФормТабТоваров.Идентификатор);
			КонецЕсли;
			ОбработкаПодбора(Товар.ТекущийЭлемент());
			
		ИначеЕсли	Поз = 2 Тогда		//	Выбираем аналог
			
			Если ПустоеЗначение(Товар.ТекущийЭлемент()) = 1 Тогда
				Фрм = "";
				Тек = ПолучитьПустоеЗначение();
			    ОткрытьПодбор("Справочник.Номенклатура", "ДляВыбора", Фрм, 1, Тек);
				Фрм.ВыборГруппы(0);
			Иначе
				ОбработкаПодбора(Товар.ТекущийЭлемент());
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
    
	Возврат ПолучитьПустоеЗначение();
	
КонецФункции		//	УстановитьТовар()

//******************************************************************************
// ПриВыборе_ФормТабТоваров()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//	
// Вызывается из формул элементов диалога:
//	По щелчку на таблице товаров
//	
// Описание:
//  По щелчку на таблице товаров выполняет поиск товара и либо открывает форму найденного
//	элемента, либо запускает функцию создания нового
//
Процедура ПриВыборе_ФормТабТоваров()
	
	ТекСтрока	= ФормТабТоваров.ТекущаяСтрока();
	ТекКолонка	= ФормТабТоваров.ТекущаяКолонка();
	
	Если ПустоеЗначение(ТекСтрока) = 1 Тогда Возврат КонецЕсли;
                        
	Товар	=	НайтиТовар(ФормТабТоваров.ИдентификаторВКаталоге);
	
	Если ПустоеЗначение(Товар) = 1 Тогда Товар = УстановитьТовар() КонецЕсли;
	
	Если ПустоеЗначение(Товар) = 0 Тогда
		Если Форма.РежимВыбора() > 0 Тогда
			Форма.ВыполнитьВыбор(Товар.ТекущийЭлемент());
		Иначе
			ОткрытьФорму(Товар.ТекущийЭлемент());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыборе_ФормТабТоваров()

//******************************************************************************
// ПолучитьТоварыГруппы(ИдГруппы)
//
// Параметры:
//  ИдГруппы - Идентификатор группы товаров
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет таблицу прочитанными из файла товарами по указанной группе
//
Процедура ПолучитьТоварыГруппы(ИдГруппы="")
	
	ИдТекущейГруппы	=	ИдГруппы;
	
	ФормТабТоваров.УдалитьСтроки();
	                                            
	Если ПустоеЗначение(ИдГруппы) = 1 Тогда
		Выборка		=	ЭлКаталог.ВыбратьУзлы("Товар");
	Иначе
		Выборка		=	ЭлКаталог.ВыбратьУзлы("Товар[@Родитель= """ + ИдГруппы + """]");
	КонецЕсли;
	
	Для Сч	= 0 По Выборка.КоличествоУзлов() - 1 Цикл
		ЭлТовар									=	Выборка.ПолучитьУзел(Сч);
        
		Наименование			=	ЭлТовар.ПолучитьАтрибут("Наименование");
		Идентификатор			=	ЭлТовар.ПолучитьАтрибут("Идентификатор");
		ИдентификаторВКаталоге	=	ЭлТовар.ПолучитьАтрибут("ИдентификаторВКаталоге");
		
		//	Проверим фильтры
		
		Если 	(ФормСпособПоказаЦен = 1)	Или	(ФильтрПоЦене.Выбран() = 1)	Или
				(ФормПоказыватьТовары = 2)	Или	(ФормПоказыватьТовары = 3)	Тогда
			Товар	=	НайтиТовар(ИдентификаторВКаталоге);
			
			Если		(ФормПоказыватьТовары	= 2)	И (ПустоеЗначение(Товар) = 1) Тогда Продолжить	// только идентифицированные
			ИначеЕсли	(ФормПоказыватьТовары	= 3)	И (ПустоеЗначение(Товар) = 0) Тогда Продолжить	// только не идентифицированные
			ИначеЕсли	(ФильтрПоЦене.Выбран()	= 1)	И (ПустоеЗначение(Товар) = 1) Тогда Продолжить	// только не идентифицированные
			КонецЕсли;
			
			Если ФильтрПоЦене.Выбран() = 1 Тогда
				Если глВернутьЦену(Товар, ФильтрПоЦене, РабочаяДата()) = 0 Тогда Продолжить КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		//	Добавляем
		
		ФормТабТоваров.НоваяСтрока();
		//ФормТабТоваров.Статус					=	Статус_Спр_Элемент;
		ФормТабТоваров.Наименование				=	Наименование;
		ФормТабТоваров.Идентификатор			=	Идентификатор;
        ФормТабТоваров.ИдентификаторВКаталоге	=	ИдентификаторВКаталоге;
		
		//	 Цены в колонки из пакетов
		
		Если ФормСпособПоказаЦенИзПакетов = 1 Тогда
			Для СчПакетов = 1 По СписВыбранныхПакетов.РазмерСписка() Цикл
				ИдКолонки			=	"";
				ЭлПакетПредложений	=	СписВыбранныхПакетов.ПолучитьЗначение(СчПакетов, ИдКолонки);
				СтрЦена				=	ЦенаИзПакета(ЭлПакетПредложений, Идентификатор);
				Если ПустоеЗначение(СтрЦена) = 0 Тогда
					ФормТабТоваров.УстановитьЗначение(ФормТабТоваров.НомерСтроки, ИдКолонки, СтрЦена);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		                              
		//	 Цены в колонки из справочника
		
		Если ФормСпособПоказаЦен = 1 Тогда
			Если ПустоеЗначение(Товар) = 0 Тогда
			    Для СчТиповЦен = 1 По СписВыбранныхТиповЦен.РазмерСписка() Цикл
					ИдКолонки	=	"";
					ТипЦены		=	СписВыбранныхТиповЦен.ПолучитьЗначение(СчТиповЦен, ИдКолонки);
					_Цена		=	"";
					_Единица	=	"";
					_Валюта		=	"";
					Если глВернутьЦену(Товар, ТипЦены, РабочаяДата(), _Цена, _Единица, _Валюта) = 1 Тогда
						СтрЦена	=	Строка(_Цена) + " " + _Валюта + "/" + _Единица;
						ФормТабТоваров.УстановитьЗначение(ФормТабТоваров.НомерСтроки, ИдКолонки, СтрЦена);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
    
КонецПроцедуры		//	ПолучитьТоварыГруппы()

//******************************************************************************
// ПолучитьПодгруппыГруппы(ИдГруппы="", НомерСтроки=0)
//
// Параметры:
//  ИдГруппы, НомерСтроки
//
// Возвращаемое значение:
//  Число - количество найденных подгрупп
//
// Описание:
//  Заполняет таблицу прочитанными из файла подгруппами по указанной группе
//
Функция ПолучитьПодгруппыГруппы(ИдГруппы="", НомерСтроки=0)
	
	Если ПустоеЗначение(ИдГруппы) = 1 Тогда
		Выборка	=	Док.ВыбратьУзлы("//Группа[not(@Родитель)]");
	Иначе
		Выборка	=	Док.ВыбратьУзлы("//Группа[@Родитель=""" + СокрЛП(ИдГруппы) + """]");
	КонецЕсли;
	    
	Уровень = 1;
	Если НомерСтроки > 0 Тогда
		ФормТабГрупп.ПолучитьСтрокуПоНомеру(НомерСтроки);
		ФормТабГрупп.ФлРаскрыта =	1;
		Уровень					=	ФормТабГрупп.Уровень + 1;
	КонецЕсли;

	КоличествоУзлов	=	 Выборка.КоличествоУзлов();
	
	Для Сч	= 0 По КоличествоУзлов - 1 Цикл
		ЭлГруппа	=	Выборка.ПолучитьУзел(Сч);
		
		ФормТабГрупп.НоваяСтрока(НомерСтроки + Сч + 1);
		ФормТабГрупп.Наименование	=	ЭлГруппа.ПолучитьАтрибут("Наименование");
		ФормТабГрупп.Идентификатор	=	ЭлГруппа.ПолучитьАтрибут("Идентификатор");
		//ФормТабГрупп.Родитель		=	ЭлГруппа.ПолучитьАтрибут("Родитель");
		ФормТабГрупп.Уровень		=	Уровень;
		ФормТабГрупп.ФлРаскрыта		=	0
	КонецЦикла;		
	        
	Возврат(КоличествоУзлов);
	
КонецФункции		//	ПолучитьПодгруппыГруппы()

//******************************************************************************
// ПрописатьЦеныТоваровИзПакетов(СписокПакетов)
//
// Параметры:
//  СписокПакетов - СписокЗначений - пакетов предложений в файле
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет, прочитанными из файла ценами, соответствующие колонки таблицы товаров
//
Процедура ПрописатьЦеныТоваровИзПакетов(СписокПакетов)
	
    Если СписокПакетов.РазмерСписка() = 0 Тогда Возврат КонецЕсли;
	ФормТабТоваров.ВыбратьСтроки();
	Пока ФормТабТоваров.ПолучитьСтроку() = 1 Цикл
		ИдентификаторТовара	=	ФормТабТоваров.Идентификатор;
		Для Сч = 1 По СписокПакетов.РазмерСписка() Цикл
			ИдКолонки			=	"";
			ЭлПакетПредложений	=	СписокПакетов.ПолучитьЗначение(Сч, ИдКолонки);
			СтрЦена				=	ЦенаИзПакета(ЭлПакетПредложений, ИдентификаторТовара);
			Если ПустоеЗначение(СтрЦена) = 0 Тогда
				ФормТабТоваров.УстановитьЗначение(ФормТабТоваров.НомерСтроки, ИдКолонки, СтрЦена);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры		//	ПрописатьЦеныТоваровИзПакетов()

//******************************************************************************
// ПрописатьЦеныТоваров(СписТиповЦен)
//
// Параметры:
//  СписТиповЦен - СписокЗначений - типов цен, существующих в учетной системе
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Заполняет, прочитанными из справочника "Цены", соответствующие колонки таблицы товаров
//
Процедура ПрописатьЦеныТоваров(СписТиповЦен)
	
    Если СписТиповЦен.РазмерСписка() = 0 Тогда Возврат КонецЕсли;
	
	//Цена	=	СоздатьОбъект("Справочник.Цены");
	ФормТабТоваров.ВыбратьСтроки();
	Пока ФормТабТоваров.ПолучитьСтроку() = 1 Цикл
		Если ПустоеЗначение(ФормТабТоваров.Товар) = 1 Тогда
			Товар	=	НайтиТовар(ФормТабТоваров.ИдентификаторВКаталоге);
			Если ПустоеЗначение(Товар) = 0 Тогда
				ФормТабТоваров.Товар	=	Товар.ТекущийЭлемент();
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		//Цена.ИспользоватьВладельца(ФормТабТоваров.Товар);
		//Цена.ИспользоватьДату(РабочаяДата(), 1);
		Для Сч = 1 По СписТиповЦен.РазмерСписка() Цикл
			ИдКолонки	=	"";
			ТипЦены		=	СписТиповЦен.ПолучитьЗначение(Сч, ИдКолонки);
			_Цена		=	"";
			_Единица	=	"";
			_Валюта		=	"";
			Если глВернутьЦену(Товар, ТипЦены, РабочаяДата(), _Цена, _Единица, _Валюта) = 1 Тогда
				СтрЦена	=	Строка(_Цена) + " " + _Валюта + "/" + _Единица;
				ФормТабТоваров.УстановитьЗначение(ФормТабТоваров.НомерСтроки, ИдКолонки, СтрЦена);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры		//	ПрописатьЦеныТоваров()

//******************************************************************************
// ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ДобавитьКолонкиЦенПакетов()
                  
	СписВключенныхТиповЦен	=	СоздатьОбъект("СписокЗначений");
	
	Для Сч = 1 По ФормСписПакетовПредложений.РазмерСписка() Цикл
		ИдКолонки	=	"Пакет" + Сч;
		ИмяКолонки	=	"В пакете №"	+ Сч;
		Зн			=	ФормСписПакетовПредложений.ПолучитьЗначение(Сч);
		
		Если ФормСписПакетовПредложений.Пометка(Сч) = 0 Тогда
			Попытка
				ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
				ФормТабТоваров.УдалитьКолонку(ИдКолонки);
			Исключение
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
		Исключение
			ФормТабТоваров.НоваяКолонка(ИдКолонки, , , , ИмяКолонки, 8);
			СписВключенныхТиповЦен.ДобавитьЗначение(Зн, ИдКолонки);
		КонецПопытки;
	КонецЦикла;

	ПрописатьЦеныТоваровИзПакетов(СписВключенныхТиповЦен);
	
КонецПроцедуры		//	ДобавитьКолонкиЦенПакетов()

//******************************************************************************
// ДобавитьКолонкиЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу товаров колонки с выбранными для показа типами цен
//
Процедура ДобавитьКолонкиЦен()
            
	СписВключенныхТиповЦен	=	СоздатьОбъект("СписокЗначений");
	
	Для Сч = 1 По ФормСписТиповЦен.РазмерСписка() Цикл
		Зн			=   ФормСписТиповЦен.ПолучитьЗначение(Сч);
		ИмяКолонки	=	Зн.Наименование;
		ИдКолонки	=	"_" + Строка(Сч);
		
		Если ФормСписТиповЦен.Пометка(Сч) = 0 Тогда
			Попытка
				ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
				ФормТабТоваров.УдалитьКолонку(ИдКолонки);
			Исключение
			КонецПопытки;
			Продолжить;
		КонецЕсли;
		
		Попытка
			ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
		Исключение
			ФормТабТоваров.НоваяКолонка(ИдКолонки, , , , ИмяКолонки, 8);
			СписВключенныхТиповЦен.ДобавитьЗначение(Зн, ИдКолонки);
		КонецПопытки;
	КонецЦикла;

	ПрописатьЦеныТоваров(СписВключенныхТиповЦен);
	
КонецПроцедуры		//	ДобавитьКолонкиЦен()

//******************************************************************************
// ПриВыборе_ФормГруппаДляДобавления()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	Элемент диалога: ФормГруппаДляДобавления
//
// Описание:
//  Устанавливает группу для добавления новых товаров
//
Процедура ПриВыборе_ФормГруппаДляДобавления()

	Если ФормГруппаДляДобавления.ЭтоГруппа() = 0 Тогда
		Родитель	=	ФормГруппаДляДобавления.Родитель;
		Если ПустоеЗначение(Родитель) = 0 Тогда
			ФормГруппаДляДобавления	=	Родитель;
		Иначе
			ФормГруппаДляДобавления	=	"";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры		//	ПриВыборе_ФормГруппаДляДобавления()

//******************************************************************************
// Обновить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет таблицу товаров
//
Процедура Обновить()

	СтарыйНомерСтроки	= "";
	ПолучитьТоварыГруппы(ИдТекущейГруппы);
	
КонецПроцедуры		//	Обновить()

//******************************************************************************
// ПриВыборе_ФормСпособПоказаЦенИзПакетов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//	
// Вызывается из формул элементов диалога:
//	ФормСпособПоказаЦенИзПакетов
//	
// Описание:
//  Удаляет колонки цен, если выбран способ показа цен в информационной строке
//
Процедура ПриВыборе_ФормСпособПоказаЦенИзПакетов()
    
	Если ФормСпособПоказаЦенИзПакетов = 2 Тогда
		Для Сч = 1 По ФормСписПакетовПредложений.РазмерСписка() Цикл
			ИдКолонки	=	"Пакет" + Сч;
			Попытка
				ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
				ФормТабТоваров.УдалитьКолонку(ИдКолонки);
			Исключение	КонецПопытки;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры		//	ПриВыборе_ФормСпособПоказаЦенИзПакетов()

//******************************************************************************
// ПриВыборе_ФормСпособПоказаЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//	
// Вызывается из формул элементов диалога:
//	ФормСпособПоказаЦен
//	
// Описание:
//  Удаляет колонки цен, если выбран способ показа цен в информационной строке
//
Процедура ПриВыборе_ФормСпособПоказаЦен()
    
	Если ФормСпособПоказаЦен = 2 Тогда
		Для Сч = 1 По ФормСписТиповЦен.РазмерСписка() Цикл
			Зн			=   ФормСписТиповЦен.ПолучитьЗначение(Сч);
			ИмяКолонки	=	Зн.Наименование;
			ИдКолонки	=	"_" + Строка(Сч);
			Попытка
				ФормТабТоваров.ПолучитьПараметрыКолонки(ИдКолонки);
				ФормТабТоваров.УдалитьКолонку(ИдКолонки);
			Исключение	КонецПопытки;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры		//	ПриВыборе_ФормСпособПоказаЦен()

//******************************************************************************
// КаталогПоИдентификатору(ИдКаталога)
//
// Параметры:
//  ИдКаталога
//
// Возвращаемое значение:
//  Элемент справочника "Каталоги" 
//
// Описание:
//  Ищет каталог в справочнике по Идентификатору
//
Функция КаталогПоИдентификатору(ИдКаталога)
	
	КаталогПредложений	=	СоздатьОбъект("Справочник.Каталоги");
	Если КаталогПредложений.НайтиПоРеквизиту("Идентификатор", ИдКаталога, 1) = 0 Тогда
		Возврат(0);
	КонецЕсли;
	
	Возврат(КаталогПредложений.ТекущийЭлемент());
	
КонецФункции		//	КаталогПоИдентификатору(

//******************************************************************************
// ВидСвойства(ИдКаталога, ИдСвойства)
//
// Параметры:
//  ИдКаталога, ИдСвойства
//
// Возвращаемое значение:
//  Строка - имя свойства
//
// Описание:
//  Ищет наименование свойства либо в справчнике либо в xml-каталоге
//
Функция ВидСвойства(ИдКаталога, ИдСвойства)
	
	СпрВидовСвойств	=	СоздатьОбъект("Справочник.ВидыСвойств");
	СпрВидовСвойств.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", СокрЛП(ИдСвойства), 0, 0);
	Пока СпрВидовСвойств.ПолучитьЭлемент() = 1 Цикл
		Если СпрВидовСвойств.Каталог.Идентификатор = СокрЛП(ИдКаталога) Тогда
			Возврат СпрВидовСвойств.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	АтИмяСвойства	=	ЭлКаталог.ВыбратьУзел("Свойство[@Идентификатор=""" + ИдСвойства + """]/@Наименование");
	Если ПустоеЗначение(АтИмяСвойства) = 0 Тогда
		Возврат АтИмяСвойства.Значение;
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ВидСвойства()

//******************************************************************************
// ЗаполнитьСписокПакетовПредложений()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет ФормСписПакетовПредложений
//
Процедура ЗаполнитьСписокПакетовПредложений()
	
	Выборка			=	Док.ВыбратьУзлы("//ПакетПредложений");
	    
	ФормСписПакетовПредложений.УдалитьВсе();
	ФормПакетЦеныНового.УдалитьВсе();
	ФормПакетЦеныПодбора.УдалитьВсе();
	
	Для Индекс = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		ДоступныйПакет 			=	Выборка.ПолучитьУзел(Индекс);
		ИдентификаторКаталога	=	ДоступныйПакет.ПолучитьАтрибут("ИдентификаторКаталога");
		ИдентификаторВладельца	=	ДоступныйПакет.ПолучитьАтрибут("Владелец");
		Описание				=	ДоступныйПакет.ПолучитьАтрибут("Описание");
		
		ИмяПакета				=	": ";
		
		Каталог					=	КаталогПоИдентификатору(ИдентификаторКаталога);
		//Если (ПустоеЗначение(Каталог) = 1) Или (Каталог <> КаталогВСправочнике) Тогда Продолжить КонецЕсли;
		
		ВыборкаСвойств	=	ДоступныйПакет.ВыбратьУзлы("ЗначениеСвойства");
		Для СчСвойств = 0 По ВыборкаСвойств.КоличествоУзлов() - 1 Цикл
			Свойство			=	ВыборкаСвойств.ПолучитьУзел(СчСвойств);
			ИдКаталогаСвойства	=	Свойство.ПолучитьАтрибут("ИдентификаторКаталога");
			ИдСвойства			=	Свойство.ПолучитьАтрибут("ИдентификаторСвойства");
			ЗначениеСвойства	=	Свойство.ПолучитьАтрибут("Значение");
			
			Если ПустоеЗначение(ЗначениеСвойства) = 0 Тогда
				ИмяВидаСвойства	=	ВидСвойства(ИдКаталогаСвойства, ИдСвойства);
				Если ПустоеЗначение(ИмяВидаСвойства) = 1 Тогда Продолжить КонецЕсли;
				ИмяПакета		=	ИмяПакета + СокрЛП(ЗначениеСвойства) + " (" + ИмяВидаСвойства + ") ";
			КонецЕсли;
		КонецЦикла;
	
		ФормСписПакетовПредложений.ДобавитьЗначение(ДоступныйПакет,	"№" + Строка(Индекс + 1) + ИмяПакета);
		ФормПакетЦеныНового.ДобавитьЗначение(ДоступныйПакет,		"№" + Строка(Индекс + 1) + ИмяПакета);
		ФормПакетЦеныПодбора.ДобавитьЗначение(ДоступныйПакет,		"№" + Строка(Индекс + 1) + ИмяПакета);
	КонецЦикла;
	
КонецПроцедуры		//	ЗаполнитьСписокПакетовПредложений()

//******************************************************************************
// Сформировать()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует дерево групп и показывает таблицу
//
Процедура Сформировать()
	
	ЗаполнитьСписокПакетовПредложений();
	                 
	Если Форма.МодальныйРежим() = 1 Тогда
		ПолучитьТоварыГруппы();
	Иначе
		Если ПолучитьПодгруппыГруппы() = 0 Тогда
			ПолучитьТоварыГруппы();
		Иначе
			ПоказатьТаблицу();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	Сформировать()


//******************************************************************************
// ЗагрузитьВсеНеидентифицированные()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Описание:
//  _
//
Процедура ЗагрузитьВсеНеидентифицированные()

	Выборка		=	ЭлКаталог.ВыбратьУзлы("Товар");
	
	Для Сч	= 0 По Выборка.КоличествоУзлов() - 1 Цикл
		
		ЭлТовар									=	Выборка.ПолучитьУзел(Сч);
        
		Наименование			=	ЭлТовар.ПолучитьАтрибут("Наименование");
		Идентификатор			=	ЭлТовар.ПолучитьАтрибут("Идентификатор");
		ИдентификаторВКаталоге	=	ЭлТовар.ПолучитьАтрибут("ИдентификаторВКаталоге");
		
		Товар					=	НайтиТовар(ИдентификаторВКаталоге);
		
		Если ПустоеЗначение(Товар) = 0 Тогда Продолжить КонецЕсли;
		
		Товар	=	СоздатьОбъект("Справочник.Номенклатура");

		Если ТипКаталога = "Наш" Тогда
			
	        Если Товар.НайтиПоНаименованию(ФормТабТоваров.Наименование, 0, 1) = 1 Тогда Продолжить КонецЕсли;
			
			СсылкаНаТовар	=	СоздатьОбъект("Справочник.Номенклатура");;
			
			Если		СпособИдентификации = "Код" Тогда
				Товар		=	СоздатьНовыйТовар(Наименование, Идентификатор);
				СсылкаНаТовар.НайтиЭлемент(Товар);
				СсылкаНаТовар.Код	=	ИдентификаторВКаталоге;
				СсылкаНаТовар.Записать();
			ИначеЕсли	СпособИдентификации = "ШтрихКод" Тогда
				Товар	=	СоздатьНовыйТовар(Наименование, Идентификатор, ИдентификаторВКаталоге);
			Иначе
				Товар	=	СоздатьНовыйТовар(Наименование, Идентификатор);
				СсылкаНаТовар.НайтиЭлемент(Товар);
				СсылкаНаТовар.УстановитьАтрибут(СпособИдентификации, ИдентификаторВКаталоге);
				СсылкаНаТовар.Записать();
			КонецЕсли;
			
		Иначе		//	Если ТипКаталога = "НеНаш" Тогда
		                 
	    	Товар.НайтиПоНаименованию(Наименование, 0, 1);
			
			//	Создаем новый товар и устанавливаем аналог
				
			Если ПустоеЗначение(Товар.ТекущийЭлемент()) = 1 Тогда
				Товар	=	СоздатьНовыйТовар(Наименование, Идентификатор);
			КонецЕсли;
			
			СпрАналогов	=	СоздатьОбъект("Справочник.Аналоги");
			СпрАналогов.ИспользоватьВладельца(Товар.ТекущийЭлемент());
			СпрАналогов.Новый();
			СпрАналогов.Каталог					= КаталогВСправочнике;
			СпрАналогов.Наименование			= Наименование;
			СпрАналогов.ИдентификаторВКаталоге	= ИдентификаторВКаталоге;
			СпрАналогов.Записать();
			Сообщить("Для товара - '" + Товар.Наименование + "' установлен аналог по каталогу: '" + КаталогВСправочнике.Наименование + "'");
			
			УстановитьЦенуТовара(Товар.ТекущийЭлемент(), Идентификатор);
	
		КонецЕсли;
			
	КонецЦикла;

КонецПроцедуры // ЗагрузитьВсеНеидентифицированные()
   

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаЯчейкиТаблицы(ЗначРасшифровки, СтандартнаяОбработка, Конт, Ячейка)
	
	СтандартнаяОбработка	=	0;
	КолПоз					=	Найти(Ячейка, "C");
	СтрокаЯчейки			=	Число(Сред(Ячейка, 2, КолПоз-2));
	КолонкаЯчейки			=	Число(Сред(Ячейка, КолПоз+1, СтрДлина(Ячейка)-КолПоз));
	
	Если		ЗначРасшифровки = "Свернуть" Тогда
		ФормТабГрупп.ВыбратьСтроки();
		Пока ФормТабГрупп.ПолучитьСтроку() = 1 Цикл
			ФормТабГрупп.ФлРаскрыта	=	0;
		КонецЦикла;
		ПоказатьТаблицу();
		ПолучитьТоварыГруппы(ФормТабГрупп.ПолучитьЗначение(1, "Идентификатор"));
		Возврат;
	ИначеЕсли	ЗначРасшифровки = "Развернуть" Тогда
		ФормТабГрупп.ВыбратьСтроки();
		Пока ФормТабГрупп.ПолучитьСтроку() = 1 Цикл
			ФормТабГрупп.ФлРаскрыта	=	1;
			
			
		КонецЦикла;
		ПоказатьТаблицу();
        ПолучитьТоварыГруппы(ФормТабГрупп.ПолучитьЗначение(1, "Идентификатор"));
		Возврат;
	ИначеЕсли	ЗначРасшифровки = "ОтключитьИерархию" Тогда
		ПолучитьТоварыГруппы();
	КонецЕсли;
	
	НомерСтрокиВТабГрупп	=	"";
	ФормТабГрупп.НайтиЗначение(ЗначРасшифровки, НомерСтрокиВТабГрупп, "Идентификатор");
	Попытка
		ФормТабГрупп.ПолучитьСтрокуПоНомеру(НомерСтрокиВТабГрупп);    
	Исключение	Возврат	КонецПопытки;
	
	Уровень			=	ФормТабГрупп.Уровень;
	Идентификатор	=	ФормТабГрупп.Идентификатор;
	ФлРаскрыта		=	ФормТабГрупп.ФлРаскрыта;
	Если ФлРаскрыта = 0 Тогда
		Если ФормТабГрупп.КоличествоСтрок() > НомерСтрокиВТабГрупп Тогда
			ФормТабГрупп.ПолучитьСтрокуПоНомеру(НомерСтрокиВТабГрупп + 1);	
		КонецЕсли;
		Если ФормТабГрупп.Уровень <= Уровень Тогда
			КолвоПодгрупп	=	ПолучитьПодгруппыГруппы(Идентификатор, НомерСтрокиВТабГрупп);
		КонецЕсли;
		ФормТабГрупп.УстановитьЗначение(НомерСтрокиВТабГрупп, "ФлРаскрыта", 1);
		ПолучитьТоварыГруппы(Идентификатор);
		ПоказатьТаблицу(НомерСтрокиВТабГрупп);
	ИначеЕсли ФлРаскрыта = 1 Тогда
		ФормТабГрупп.ФлРаскрыта	=	0;
		ПолучитьТоварыГруппы(Идентификатор);
		ПоказатьТаблицу(НомерСтрокиВТабГрупп);
	КонецЕсли;
	
КонецПроцедуры		//	ОбработкаЯчейкиТаблицы()

//******************************************************************************
// Предопределенная процедура.
//	
Процедура ПриЗакрытии()

	Док.ЗагрузитьИзСтроки("<a/>");		//	на всякий случай очистим память...
	
КонецПроцедуры		//	ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(Ном, Значен)
	
	Если Значен = "Основная" Тогда
		
		Форма.ИспользоватьСлой("Основной, Кнопки", 2);
		
		СписВыбранныхТиповЦен	=	СоздатьОбъект("СписокЗначений");
		Для Сч = 1 По ФормСписТиповЦен.РазмерСписка() Цикл
			Если ФормСписТиповЦен.Пометка(Сч) = 0 Тогда Продолжить КонецЕсли;
			Зн			=   ФормСписТиповЦен.ПолучитьЗначение(Сч);
			ИмяКолонки	=	Зн.Наименование;
			ИдКолонки	=	"_" + Строка(Сч);
			СписВыбранныхТиповЦен.ДобавитьЗначение(Зн, ИдКолонки);
		КонецЦикла;
		
		Если ФормСпособПоказаЦен = 1 Тогда
			ДобавитьКолонкиЦен();
		КонецЕсли;
		
		СписВыбранныхПакетов	=	СоздатьОбъект("СписокЗначений");
		Для Сч = 1 По ФормСписПакетовПредложений.РазмерСписка() Цикл
			Если ФормСписПакетовПредложений.Пометка(Сч) = 0 Тогда Продолжить КонецЕсли;
			Зн			=   ФормСписПакетовПредложений.ПолучитьЗначение(Сч);
			ИмяКолонки	=	"В пакете №"	+ Сч;
			ИдКолонки	=	"Пакет" 		+ Сч;
			СписВыбранныхПакетов.ДобавитьЗначение(Зн, ИдКолонки);
		КонецЦикла;

		Если ФормСпособПоказаЦенИзПакетов = 1 Тогда
			ДобавитьКолонкиЦенПакетов();
		КонецЕсли;
		
		СтарыйНомерСтроки	= "";
		СформироватьИнформационнуюСтроку();
		
		//ПолучитьТоварыГруппы(ИдТекущейГруппы);
		
	ИначеЕсли Значен = "Опции" Тогда
		
		Форма.ИспользоватьСлой("Опции, Кнопки", 2);
		Если Форма.РежимВыбора() > 0 Тогда
			Форма.ИспользоватьСлой("ДляПодбора", 1);
		Иначе
			Форма.ИспользоватьСлой("ДляПодбора", 0);
		КонецЕсли;

	ИначеЕсли Значен = "Цены" Тогда
		
		Форма.ИспользоватьСлой("Цены, Кнопки", 2);
		
	ИначеЕсли Значен = "Фильтры" Тогда
		
		Форма.ИспользоватьСлой("Фильтры, Кнопки", 2);
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПодбора(Зн)
	
    Если ПустоеЗначение(ФормТабТоваров.НомерСтроки) = 1 Тогда Возврат КонецЕсли;
	
	СпрАналогов	=	СоздатьОбъект("Справочник.Аналоги");
	СпрАналогов.ИспользоватьВладельца(Зн);
	СпрАналогов.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", ФормТабТоваров.ИдентификаторВКаталоге, 1, 0);
	Пока СпрАналогов.ПолучитьЭлемент() = 1 Цикл
		Если СпрАналогов.Каталог =	КаталогВСправочнике Тогда Возврат КонецЕсли;	//	такой аналог уже есть
	КонецЦикла;
	
	СпрАналогов.Новый();
	СпрАналогов.Каталог					= КаталогВСправочнике;
	СпрАналогов.Наименование			= ФормТабТоваров.Наименование;
	СпрАналогов.ИдентификаторВКаталоге	= ФормТабТоваров.ИдентификаторВКаталоге;
	СпрАналогов.Записать();
	Сообщить("Для товара - '" + Зн.Наименование + "' установлен аналог по каталогу: '" + КаталогВСправочнике.Наименование + "'");
	
	Если (ПустоеЗначение(ФормТипЦеныНового) = 0) И (ФормПакетЦеныНового.ТекущаяСтрока() > 0) Тогда
		УстановитьЦенуТовара(Зн, ФормТабТоваров.Идентификатор);
	КонецЕсли;
	
	//ПриВыборе_ФормТабТоваров();
	
КонецПроцедуры		//	ОбработкаПодбора()


//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ИдЭлементаДиалога, Флаг)
    
	Если ИдЭлементаДиалога = "ФормТипЦеныНового" Тогда
		
		Если ВыбЗначение.Рассчитывается = 1 Тогда
			Предупреждение("Эта рассчетная цена не может быть установлена!", 60);
			Флаг = 0;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
Процедура ПриПовторномОткрытии()
    
КонецПроцедуры		//ПриПовторномОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
                    
	СписПараметров			=	Форма.Параметр;
	Если ТипЗначенияСтр(СписПараметров) = "СписокЗначений" Тогда
		КаталогВСправочнике	=	СписПараметров.Получить("Каталог");
		ПолноеИмяФайлаКаталога	=	СписПараметров.Получить("ИмяФайлаКаталога");
	КонецЕсли;
	
	ФормСписТиповЦен.УдалитьВсе();
	СпрКатегорийЦен = СоздатьОбъект("Справочник.ТипыЦен");
	СпрКатегорийЦен.ВыбратьЭлементы();
	Пока СпрКатегорийЦен.ПолучитьЭлемент() = 1 Цикл
		Если СпрКатегорийЦен.ПометкаУдаления() = 1 Тогда Продолжить КонецЕсли;
		ФормСписТиповЦен.ДобавитьЗначение(СпрКатегорийЦен.ТекущийЭлемент());
	КонецЦикла;
	        
	Если (ПустоеЗначение(ПолноеИмяФайлаКаталога) = 1) И (ПустоеЗначение(КаталогВСправочнике) = 1) Тогда
		ПолноеИмяФайлаКаталога	=	ВыборФайла();
		Если ПустоеЗначение(ПолноеИмяФайлаКаталога) = 1 Тогда
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
	ИначеЕсли ПустоеЗначение(ПолноеИмяФайлаКаталога) = 1 Тогда
		ПолноеИмяФайлаКаталога	=	КаталогВСправочнике.XMLФайл;
	КонецЕсли;
	
	Если ПустоеЗначение(ПолноеИмяФайлаКаталога) = 1 Тогда
		Предупреждение("Не задан XML-файл каталога!");
		СтатусВозврата(0);
		Возврат;
	ИначеЕсли Фс.СуществуетФайл(ПолноеИмяФайлаКаталога) = 0 Тогда
		Предупреждение("Файл не существует!");
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
 
	XMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	Док				=	XMLАнализатор.СоздатьДокумент();

	Если ПустоеЗначение(Док) = 1 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;
	
	//КоллекцияСхем		=	XMLАнализатор.СоздатьКоллекциюСхем();
	//КоллекцияСхем.ДобавитьСхему("urn:CommerceML", КаталогИБ() + "ExtForms\CommerML.biz");
	//Док.Схемы		=	КоллекцияСхем;
	
	Док.Загрузить(ПолноеИмяФайлаКаталога);
	
	//Док.Проверить();
	
	  
	ЭлКаталог	=	Док.ВыбратьУзел("//Каталог");
	Если ПустоеЗначение(ЭлКаталог) = 1 Тогда
		Предупреждение("Данный файл не содержит ни одного каталога!");
		СтатусВозврата(0);
		Возврат;
	Иначе
		ИдКаталога		=	ЭлКаталог.ПолучитьАтрибут("Идентификатор");
		ЗаголовокФормы	=	ЭлКаталог.ПолучитьАтрибут("Наименование");
	КонецЕсли;

	Если ПустоеЗначение(КаталогВСправочнике) = 1 Тогда
		КаталогВСправочнике	=	КаталогПоИдентификатору(ИдКаталога);
		Если ПустоеЗначение(КаталогВСправочнике) = 1 Тогда
			Предупреждение("Данный каталог не идентифицирован!
						   |Рекомендуется добавить его в справочник каталогов.");
		КонецЕсли;
	КонецЕсли;
	     
	
	Если ПустоеЗначение(КаталогВСправочнике) = 1 Тогда
		
		СпособИдентификации	=	"НеПроводитьИдентификацию";
		
	Иначе
		
		Если ПустоеЗначение(КаталогВСправочнике.СпособИдентификацииНоменклатуры) = 1 Тогда
			СпособИдентификации	=	"Код";
		Иначе
			СпособИдентификации	=	КаталогВСправочнике.СпособИдентификацииНоменклатуры.Идентификатор();
		КонецЕсли;
		
		ЗаголовокФормы				=	КаталогВСправочнике.Наименование;
	
		Если КаталогВСправочнике.ВладелецКаталога.Вид() = "Фирмы" Тогда
			ТипКаталога	=	"Наш";
			ЗаголовокФормы	=	ЗаголовокФормы + "   (владелец - фирма:   "  + КаталогВСправочнике.ВладелецКаталога.Наименование + ")";
		Иначе
			ТипКаталога	=	"НеНаш";
			ЗаголовокФормы	=	ЗаголовокФормы + "   (владелец - контрагент:   "  + КаталогВСправочнике.ВладелецКаталога.Наименование + ")";
		КонецЕсли;
		
		ЭлКаталог			=	Док.ВыбратьУзел("//Каталог[@Идентификатор=""" + СокрЛП(КаталогВСправочнике.Идентификатор) + """]");
		
		Если ПустоеЗначение(ЭлКаталог) = 1 Тогда
			Предупреждение("Данный файл не содержит каталога - " + КаталогВСправочнике.Наименование + " (идентификатор каталога: " + СокрЛП(КаталогВСправочнике.Идентификатор) + ")");
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Заголовок(ЗаголовокФормы, 0);
	
	Таблица.ТолькоПросмотр(1);
	Таблица.Опции(0, 0, ФиксироватьСтрок, 0);
	
    Форма.Закладки.УдалитьВсе();
	Форма.Закладки.ДобавитьЗначение("Основная",		"Основная");
	Форма.Закладки.ДобавитьЗначение("Цены",			"Цены");
	Форма.Закладки.ДобавитьЗначение("Фильтры",		"Фильтры");
	
	Если СпособИдентификации <> "НеПроводитьИдентификацию" Тогда
		Форма.Закладки.ДобавитьЗначение("Опции",		"Опции");
	КонецЕсли;
	
	ПриВыбореЗакладки(1, "Основная");
	
	Сформировать();
	
КонецПроцедуры		//	ПриОткрытии()
                        

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
//******************************************************************************

Форма.ИспользоватьЗакладки(1);

Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
			Предупреждение("Компонента v7plus.dll не найдена!");
		КонецЕсли;	
	КонецЕсли;
КонецЕсли;    
                   
СтарыйНомерСтроки				=	"";
ФиксироватьСтрок				=	1;
ФормСпособПоказаЦен				=	2;
ФормСпособПоказаЦенИзПакетов	=	2;
ФормСпособЗагрузкиТоваров		=	3;
ФормПоказыватьТовары			=	1;
      
//ФормТабТоваров.НоваяКолонка("Статус", , , , 					"", 						4);
ФормТабТоваров.НоваяКолонка("ИдентификаторВКаталоге", , , , 	"Ид.",						6);
ФормТабТоваров.НоваяКолонка("Наименование", , , ,				"Наименование",				34);
ФормТабТоваров.НоваяКолонка("Идентификатор", , , , 				"Идентификатор",			);
ФормТабТоваров.НоваяКолонка("Товар", , , ,						"Товар",					);

ФормТабТоваров.ВидимостьКолонки("Товар",					0);
ФормТабТоваров.ВидимостьКолонки("Идентификатор",			0);

//ФормТабТоваров.ВыводитьПиктограммы("Статус");
//ФормТабТоваров.Фиксировать(, 1);

ФормТабГрупп.НоваяКолонка("Наименование", , , ,		"Наименование",		30);
ФормТабГрупп.НоваяКолонка("Идентификатор", , , ,	"Идентификатор",	30);
//ФормТабГрупп.НоваяКолонка("Родитель", , , ,			"Родитель",			30);
ФормТабГрупп.НоваяКолонка("Уровень", , , ,			"Уровень",			4);
ФормТабГрупп.НоваяКолонка("ФлРаскрыта", , , ,		"ФлРаскрыта",		4);

ФормТабГрупп.ВидимостьКолонки("Идентификатор",			0);
                                                                                                    
//******************************************************************************

