Перем СписокНоменклатуры, ТаблицаМФ, ТаблицаПоступлений, СписокМолов;
Функция ЕстьКолонкаЗаказ() Далее
//*******************************************
Процедура ДобавьСтатью()
	спр	= СоздатьОбъект("Справочник.Контрагенты");
	а	= Спр.Выбрать("Укажите контрагента", "ФормаДляВыбораРозн");
	если а=1 Тогда
		Если СписокКонтрагентов.НайтиЗначение(спр.ТекущийЭлемент()) = 0 Тогда
			СписокКонтрагентов.ДобавитьЗначение(спр.ТекущийЭлемент(),спр.ТекущийЭлемент().ПолноеНаименование());
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ДобавьСклад()
	спр	= СоздатьОбъект("Справочник.Склады");
	а	= Спр.Выбрать("Укажите склад", "ФормаСписка");
	если а=1 Тогда
		Если СписокСкладов.НайтиЗначение(спр.ТекущийЭлемент()) = 0 Тогда
			СписокСкладов.ДобавитьЗначение(спр.ТекущийЭлемент(),спр.ТекущийЭлемент().ПолноеНаименование());
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ДобавьПоступление()
	ДокПоступления	= СоздатьОбъект("Документ.ПоступлениеТМЦ");
	а	= ДокПоступления.Выбрать("Укажите Поступление ТМЦ",);
	если а = 1 Тогда
		Если СписокПоступлений.НайтиЗначение(ДокПоступления.ТекущийДокумент()) = 0 Тогда
			СписокПоступлений.ДобавитьЗначение(ДокПоступления.ТекущийДокумент(),"Поступление ТМЦ Номер:"+ ДокПоступления.ТекущийДокумент().НомерДок +" от "+ ДокПоступления.ТекущийДокумент().ДатаДок);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ДобавьПеремещение()
	ДокПоступления	= СоздатьОбъект("Документ.ПеремещениеТМЦ");
	а	= ДокПоступления.Выбрать("Укажите Перемещение ТМЦ",);
	если а = 1 Тогда
		Если СписокПеремещений.НайтиЗначение(ДокПоступления.ТекущийДокумент()) = 0 Тогда
			СписокПеремещений.ДобавитьЗначение(ДокПоступления.ТекущийДокумент(),"Перемещение ТМЦ Номер:"+ ДокПоступления.ТекущийДокумент().НомерДок +" от "+ ДокПоступления.ТекущийДокумент().ДатаДок);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Функция ТекстЗапросаПоПродажам()
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачала по ДатаКонца;
	|Фирма			= Регистр.ПартииНаличие.Фирма,
	|				  Регистр.ПартииОтданные.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика,
	|				  Регистр.ПартииОтданные.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо,
	|				  Регистр.ПартииОтданные.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии,
	|				  Регистр.ПартииОтданные.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура,
	|				  Регистр.ПартииОтданные.Номенклатура;
	|Производитель	= Регистр.ПартииНаличие.Номенклатура.Производитель,
	|				  Регистр.ПартииОтданные.Номенклатура.Производитель;
	|МОЛ_Комиссионер= Регистр.ПартииНаличие.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Покупатель		= Регистр.ПартииНаличие.ТекущийДокумент.Реализация.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ОтчетККМ.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияПрочее.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя_Розница.Контрагент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.ОтчетКомиссионера.Контрагент;
	|Проект			= Регистр.ПартииНаличие.ТекущийДокумент.Проект,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Проект;
	|Автор			= Регистр.ПартииНаличие.ТекущийДокумент.Автор,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Автор;
	|Поставка		= Регистр.ПартииНаличие.Партия,
	|				  Регистр.ПартииОтданные.Партия;
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство,
	|				  Регистр.ПартииОтданные.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик,
	|				  Регистр.ПартииОтданные.Партия.Поставщик;
	|ДокПоставки	= Регистр.ПартииНаличие.Партия.ПриходныйДокумент,
	|				  Регистр.ПартииОтданные.Партия.ПриходныйДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации,
	|				  Регистр.ПартииОтданные.КодОперации;
	|НомерСтроки	= Регистр.ПартииНаличие.НомерСтроки,
	|				  Регистр.ПартииОтданные.НомерСтроки;
	|Договор		= Регистр.ПартииОтданные.Договор;
	|ВалВзаим		= Регистр.ПартииОтданные.Договор.ВалютаВзаиморасчетов;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент;
	|Сумма1			= Регистр.ПартииНаличие.СуммаРуб,
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Сумма2			= Регистр.ПартииНаличие.СуммаБезНДС,
	|				  Регистр.ПартииОтданные.СуммаБезНДС;
	|Сумма3			= Регистр.ПартииНаличие.СуммаУпр,       
	|				  Регистр.ПартииОтданные.СуммаУпр;       
	|Оборот			= Регистр.ПартииНаличие.ПродСтоимость;
	|ОборотКом		= Регистр.ПартииОтданные.ПродСтоимость;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество, Регистр.ПартииОтданные.Количество;";
	
	ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб, Регистр.ПартииОтданные.СуммаРуб;";
		
	ТекстЗапроса = ТекстЗапроса +
	"Функция ПриходС = Приход(Сумма);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество);
	|Функция ВозвратК = Приход(Количество)Когда(КодОперации в КодыВозвратов);
	|Условие (НЕ(КодОперации в КодыПеремещений));
	|";        
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоОтчетам() 

Функция ТекстЗапросаПоПродажамБудущийПериод()
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаНачалаПрод по ДатаКонцаПрод;
	|Фирма			= Регистр.ПартииНаличие.Фирма,
	|				  Регистр.ПартииОтданные.Фирма;
	|УпрАналитика	= Регистр.ПартииНаличие.Фирма.УпрАналитика,
	|				  Регистр.ПартииОтданные.Фирма.УпрАналитика;
	|ЮрЛицо 		= Регистр.ПартииНаличие.Фирма.ЮрЛицо,
	|				  Регистр.ПартииОтданные.Фирма.ЮрЛицо;
	|СтатусПартии 	= Регистр.ПартииНаличие.СтатусПартии,
	|				  Регистр.ПартииОтданные.СтатусПартии;
	|Номенклатура	= Регистр.ПартииНаличие.Номенклатура,
	|				  Регистр.ПартииОтданные.Номенклатура;
	|Производитель	= Регистр.ПартииНаличие.Номенклатура.Производитель,
	|				  Регистр.ПартииОтданные.Номенклатура.Производитель;
	|МОЛ_Комиссионер= Регистр.ПартииНаличие.МОЛ,
	|				  Регистр.ПартииОтданные.Договор.Владелец;
	|Покупатель		= Регистр.ПартииНаличие.ТекущийДокумент.Реализация.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РасходнаяНакладнаяРозницаБезнал.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияРозница.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ОтчетККМ.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.РеализацияПрочее.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.Контрагент,
	|				  Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя_Розница.Контрагент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.ОтчетКомиссионера.Контрагент;
	|Проект			= Регистр.ПартииНаличие.ТекущийДокумент.Проект,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Проект;
	|Автор			= Регистр.ПартииНаличие.ТекущийДокумент.Автор,
	|				  Регистр.ПартииОтданные.ТекущийДокумент.Автор;
	|Поставка		= Регистр.ПартииНаличие.Партия,
	|				  Регистр.ПартииОтданные.Партия;
	|СвойствоПартии	= Регистр.ПартииНаличие.Партия.Свойство,
	|				  Регистр.ПартииОтданные.Партия.Свойство;
	|Поставщик		= Регистр.ПартииНаличие.Партия.Поставщик,
	|				  Регистр.ПартииОтданные.Партия.Поставщик;
	|ДокПоставки	= Регистр.ПартииНаличие.Партия.ПриходныйДокумент,
	|				  Регистр.ПартииОтданные.Партия.ПриходныйДокумент;
	|КодОперации	= Регистр.ПартииНаличие.КодОперации,
	|				  Регистр.ПартииОтданные.КодОперации;
	|НомерСтроки	= Регистр.ПартииНаличие.НомерСтроки,
	|				  Регистр.ПартииОтданные.НомерСтроки;
	|Договор		= Регистр.ПартииОтданные.Договор;
	|ВалВзаим		= Регистр.ПартииОтданные.Договор.ВалютаВзаиморасчетов;
	|Док			= Регистр.ПартииНаличие.ТекущийДокумент,
	|				  Регистр.ПартииОтданные.ТекущийДокумент;
	|Сумма1			= Регистр.ПартииНаличие.СуммаРуб,
	|				  Регистр.ПартииОтданные.СуммаРуб;
	|Сумма2			= Регистр.ПартииНаличие.СуммаБезНДС,
	|				  Регистр.ПартииОтданные.СуммаБезНДС;
	|Сумма3			= Регистр.ПартииНаличие.СуммаУпр,       
	|				  Регистр.ПартииОтданные.СуммаУпр;       
	|Оборот			= Регистр.ПартииНаличие.ПродСтоимость;
	|ОборотКом		= Регистр.ПартииОтданные.ПродСтоимость;";
	
	ТекстЗапроса = ТекстЗапроса + "Количество = Регистр.ПартииНаличие.Количество, Регистр.ПартииОтданные.Количество;";
	
	ТекстЗапроса = ТекстЗапроса + "Сумма = Регистр.ПартииНаличие.СуммаРуб, Регистр.ПартииОтданные.СуммаРуб;";
		
	ТекстЗапроса = ТекстЗапроса +
	"Функция ПриходС = Приход(Сумма);
	|Функция ПриходК = Приход(Количество);
	|Функция РасходК = Расход(Количество);
	|Функция ВозвратК = Приход(Количество)Когда(КодОперации в КодыВозвратов);
	|Условие (НЕ(КодОперации в КодыПеремещений));
	|";        
	
	Возврат ТекстЗапроса;
	
КонецФункции // ТекстЗапросаПоОтчетам()

Процедура ЗаполнитьОстаткиНаНачалоПериода()
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаОстатков по ДатаОстатков;
	//|Фирма			= Регистр.ОстаткиТМЦ.Фирма,
	//|                 Регистр.РезервыТМЦ.Фирма;
	//|Док 			= Регистр.ОстаткиТМЦ.ТекущийДокумент,             
	//|                 Регистр.РезервыТМЦ.ТекущийДокумент;
	//|УпрАналитика 	= Регистр.ОстаткиТМЦ.Фирма.УпрАналитика,
	//|                 Регистр.РезервыТМЦ.Фирма.УпрАналитика;
	//|ЮрЛицо 		= Регистр.ОстаткиТМЦ.Фирма.ЮрЛицо,
	//|                 Регистр.РезервыТМЦ.Фирма.ЮрЛицо;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура,
	|                 Регистр.РезервыТМЦ2.Номенклатура;
	//|СвойствоТМЦ 	= Регистр.ОстаткиТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства,
	//|                 Регистр.РезервыТМЦ.Номенклатура.ОсновноеСвойство.ЗначениеСвойства;
	|ТекСклад		= Регистр.ОстаткиТМЦ.Склад,             
	|                 Регистр.РезервыТМЦ2.Склад;
	//	|Внутреннее     = Регистр.ОстаткиТМЦ.Внутреннее;
	|Количество 	= Регистр.ОстаткиТМЦ.Количество;
	|Резерв     	= Регистр.РезервыТМЦ2.Количество;
	//|Функция КоличествоНачОст      	= НачОст(Количество);
	//|Функция КоличествоПриход      	= Приход(Количество);
	//|Функция КоличествоРасход      	= Расход(Количество);
	//|Функция КоличествоПриходВнутр  = Приход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	//|Функция КоличествоРасходВнутр 	= Расход(Количество) когда ((Внутреннее = 1) и (Док.Вид() <> ""ПереоценкаРозница""));
	//|Функция КоличествоПриходПереоц	= Приход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	//|Функция КоличествоРасходПереоц	= Расход(Количество) когда (Док.Вид() = ""ПереоценкаРозница"");
	|Функция КоличествоКонОст  		= КонОст(Количество);
	//|Функция РезервНачОст      	    = НачОст(Резерв);
	//|Функция РезервПриход       		= Приход(Резерв);
	//|Функция РезервРасход          	= Расход(Резерв);
	|Функция РезервКонОст          	= КонОст(Резерв);
	|Условие (Номенклатура в СписокНоменклатуры);";
	
	
	//Если ПустоеЗначение(Склад) = 0 Тогда
	//	СкладОтбор = Склад;
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|Условие (ТекСклад = СкладОтбор);"; 
	//КонецЕсли;
	  
	ТекстЗапроса = ТекстЗапроса + "
		|Условие (ТекСклад в СписокСкладов);";
	
   	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВременнаяТаблицаЗначений = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВременнаяТаблицаЗначений,1,0);
	//ВыгрузитьТабличнуюЧасть(ВременнаяТаблицаЗначений);
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		ТаблицаДанных.НачальныйОстаток = 0;
		//Сообщить(""+Запрос.Номенклатура+"-"+Запрос.РасходК);
		Стр = 0;
		Кол = 0;
		Если ВременнаяТаблицаЗначений.НайтиЗначение(ТаблицаДанных.Номенклатура,Стр,Кол) = 1 Тогда 
			КоличествоКонОст 	= ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"КоличествоКонОст");
			РезервКонОст 		= ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РезервКонОст");
			Если  РезервКонОст < 0 Тогда
				РезервКонОст = 0;
			КонецЕсли;
			Если флУчитыватьРезервы = 0 Тогда
				ТаблицаДанных.НачальныйОстаток = КоличествоКонОст - РезервКонОст;
				Если ТаблицаДанных.НачальныйОстаток < 0 Тогда
					ТаблицаДанных.НачальныйОстаток = 0;
				КонецЕсли;
			Иначе
				ТаблицаДанных.НачальныйОстаток = КоличествоКонОст;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьОбъемПродажЗаПериод()  
	       
	
	Если (ПустоеЗначение(ДатаНачала)=1) и (ПустоеЗначение(ДатаКонца)=1) Тогда     
		ТаблицаДанных.ВыбратьСтроки();
		Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл  
			ТаблицаДанных.РасходЗаПериод = 0;	
		КонецЦикла;	
		Возврат;
	КонецЕсли;

	Если глПроверкаДаты(ДатаНачала,ДатаКонца)=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);  
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	КодыПеремещений.ДобавитьЗначение(глКО.Списание);
	
	ТекстЗапроса = ТекстЗапросаПоПродажам(); 
    //Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Номенклатура в СписокНоменклатуры);";
	
	//Если ПустоеЗначение(Склад) = 0 Тогда
	//	МОЛ = Склад.МОЛ;
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|Условие (МОЛ_Комиссионер = МОЛ);"; 
	//КонецЕсли;	
	 
	ТекстЗапроса = ТекстЗапроса + "
		|Условие (МОЛ_Комиссионер в СписокМолов);";
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	 
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВременнаяТаблицаЗначений = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВременнаяТаблицаЗначений,1,0);
	//ВыгрузитьТабличнуюЧасть(ВременнаяТаблицаЗначений);
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		ТаблицаДанных.РасходЗаПериод = 0;
		//Сообщить(""+Запрос.Номенклатура+"-"+Запрос.РасходК);
		Стр = 0;
		Кол = 0;
		Если ВременнаяТаблицаЗначений.НайтиЗначение(ТаблицаДанных.Номенклатура,Стр,Кол) = 1 Тогда 
			ТаблицаДанных.РасходЗаПериод = ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РасходК");
        КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьОбъемПродажЗаБудущийПериод()     
	ТаблицаДанных.НоваяКолонка("РасходЗаБудущийПериод",,,,"Будущие продажи ",10);	
	Если (ПустоеЗначение(ДатаНачалаПрод) = 1) 
		и (ПустоеЗначение(ДатаКонцаПрод) = 1) Тогда
		//ТаблицаДанных.РасходЗаБудущийПериод = 0;
		ТаблицаДанных.Заполнить(0,,,"РасходЗаБудущийПериод");
		Возврат;
	КонецЕсли;	     
		
	Если глПроверкаДаты(ДатаНачалаПрод,ДатаКонцаПрод)=0 Тогда
		Возврат;
	КонецЕсли;
	
	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);  
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	КодыПеремещений.ДобавитьЗначение(глКО.Списание);
	
	ТекстЗапроса = ТекстЗапросаПоПродажамБудущийПериод();
    //Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Номенклатура в СписокНоменклатуры);";
	
	//Если ПустоеЗначение(Склад) = 0 Тогда
	//	МОЛ = Склад.МОЛ;
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|Условие (МОЛ_Комиссионер = МОЛ);"; 
	//КонецЕсли;	
	
	ТекстЗапроса = ТекстЗапроса + "
		|Условие (МОЛ_Комиссионер в СписокМолов);";
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	 
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	ВременнаяТаблицаЗначений = СоздатьОбъект("ТаблицаЗначений");
	Запрос.Выгрузить(ВременнаяТаблицаЗначений,1,0);
	//ВыгрузитьТабличнуюЧасть(ВременнаяТаблицаЗначений);
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		ТаблицаДанных.РасходЗаБудущийПериод = 0;
		//Сообщить(""+Запрос.Номенклатура+"-"+Запрос.РасходК);
		Стр = 0;
		Кол = 0;
		Если ВременнаяТаблицаЗначений.НайтиЗначение(ТаблицаДанных.Номенклатура,Стр,Кол) = 1 Тогда 
			ТаблицаДанных.РасходЗаБудущийПериод = ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РасходК");
        КонецЕсли;
	КонецЦикла;	
КонецПроцедуры
     
Процедура ЗаполнитьОбъемПродажПоКонтрагентамБудущийПериод()
	Если СписокКонтрагентов.РазмерСписка() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
		стр = "";
		Значение = СписокКонтрагентов.ПолучитьЗначение(Номер, стр);
		ТаблицаДанных.НоваяКолонка("КонтрБуд"+СтрЗаменить(Значение.Код,"-",""),,,,Значение.Наименование,10);
	КонецЦикла;
	
	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);  
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	ТекстЗапроса = ТекстЗапросаПоПродажамБудущийПериод(); 
    //Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Номенклатура в СписокНоменклатуры);";
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Покупатель в СписокКонтрагентов);";
	
	//Если ПустоеЗначение(Склад) = 0 Тогда
	//	МОЛ = Склад.МОЛ;
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|Условие (МОЛ_Комиссионер = МОЛ);"; 
	//КонецЕсли;   
	
	ТекстЗапроса = ТекстЗапроса + "
		|Условие (МОЛ_Комиссионер в СписокМолов);";
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Покупатель;";
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	 
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	 
	Пока Запрос.Группировка(1) = 1 Цикл 
		Покупатель = Запрос.Покупатель;
		Пока Запрос.Группировка(2) = 1 Цикл
			Номенклатура = Запрос.Номенклатура;
			Стр = 0;
			Кол = 0;
			Если ТаблицаДанных.НайтиЗначение(Номенклатура,Стр,Кол) = 1 Тогда 
				ТаблицаДанных.УстановитьЗначение(Стр,"КонтрБуд"+СтрЗаменить(Покупатель.Код,"-",""),Запрос.РасходК);// = ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РасходК");
        	КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьОбъемПродажПоКонтрагентам()
	Если СписокКонтрагентов.РазмерСписка() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ПустоеЗначение(ДатаНачала)=1) и (ПустоеЗначение(ДатаКонца)=1) Тогда
		Возврат;
	КонецЕсли;
	
	Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
		стр = "";
		Значение = СписокКонтрагентов.ПолучитьЗначение(Номер, стр);
		ТаблицаДанных.НоваяКолонка("Контр"+СтрЗаменить(Значение.Код,"-",""),,,,Значение.Наименование,10);
	КонецЦикла;
	
	// Список кодов операций, по которым рассчитывается оборот
	КодыОборота = СоздатьОбъект("СписокЗначений");
	КодыОборота.ДобавитьЗначение(глКО.Продажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажа);
	КодыОборота.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);
	КодыОборота.ДобавитьЗначение(глКО.ОтчетРеализатора);

	// Список кодов операций возвратов от покупателей
	КодыВозвратов = СоздатьОбъект("СписокЗначений");
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателя);
	КодыВозвратов.ДобавитьЗначение(глКО.ВозвратОтПокупателяЕНВД);

	// Список кодов операций, используемых для внутреннего перемещения
	КодыПеремещений = СоздатьОбъект("СписокЗначений");
	КодыПеремещений.ДобавитьЗначение(глКО.Перемещение);
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаВРозницу);
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщику);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитенту);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратКомитентуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.Сборка);  
	КодыПеремещений.ДобавитьЗначение(глКО.Разукомплектация);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратПоставщикуИзРозницы);  
	КодыПеремещений.ДобавитьЗначение(глКО.ВозвратОтРеализатора);  
	КодыПеремещений.ДобавитьЗначение(глКО.ПередачаНаРеализацию);
	
	ТекстЗапроса = ТекстЗапросаПоПродажам(); 
    //Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос"); 
	
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Номенклатура в СписокНоменклатуры);";
	ТекстЗапроса = ТекстЗапроса + "
	|Условие (Покупатель в СписокКонтрагентов);";
	
	//Если ПустоеЗначение(Склад) = 0 Тогда
	//	МОЛ = Склад.МОЛ;
	//	ТекстЗапроса = ТекстЗапроса + "
	//	|Условие (МОЛ_Комиссионер = МОЛ);"; 
	//КонецЕсли; 
	
	ТекстЗапроса = ТекстЗапроса + "
		|Условие (МОЛ_Комиссионер в СписокМолов);";
	
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Покупатель;";
	ТекстЗапроса = ТекстЗапроса + "
	|Группировка Номенклатура;"; 
	 
	//Сообщить(ТекстЗапроса);
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли; 
	 
	Пока Запрос.Группировка(1) = 1 Цикл 
		Покупатель = Запрос.Покупатель;
		Пока Запрос.Группировка(2) = 1 Цикл
			Номенклатура = Запрос.Номенклатура;
			Стр = 0;
			Кол = 0;
			Если ТаблицаДанных.НайтиЗначение(Номенклатура,Стр,Кол) = 1 Тогда 
				ТаблицаДанных.УстановитьЗначение(Стр,"Контр"+СтрЗаменить(Покупатель.Код,"-",""),Запрос.РасходК);// = ВременнаяТаблицаЗначений.ПолучитьЗначение(Стр,"РасходК");
        	КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры
         
Процедура ЗаполнитьОбъемПродажЗаМинусомКонтрагнетовБудущийПериод()
	//ТаблицаДанных.НоваяКолонка("ПродажиЗаМинусом",,,,"Продажи без.");
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		СуммаПоКонтрагнетам = 0;
		Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
			стр = "";
			Значение = СписокКонтрагентов.ПолучитьЗначение(Номер, стр); //получить значение и представление
			СуммаПоКонтрагнетам = СуммаПоКонтрагнетам + ТаблицаДанных.ПолучитьЗначение(ТаблицаДанных.НомерСтроки,"КонтрБуд"+СтрЗаменить(Значение.Код,"-",""));
		КонецЦикла;
		Стр = 0;
		Кол = 0;
		//ТаблицаДанных.ПродажиЗаМинусом = ТаблицаДанных.РасходЗаПериод - СуммаПоКонтрагнетам;
		ТаблицаДанных.РасходЗаБудущийПериод = ТаблицаДанных.РасходЗаБудущийПериод - СуммаПоКонтрагнетам;
    КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьОбъемПродажЗаМинусомКонтрагнетов()
	ТаблицаДанных.НоваяКолонка("ПродажиЗаМинусом",,,,"Продажи без.");
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		СуммаПоКонтрагнетам = 0;
		Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
			стр = "";
			Значение = СписокКонтрагентов.ПолучитьЗначение(Номер, стр); //получить значение и представление
			СуммаПоКонтрагнетам = СуммаПоКонтрагнетам + ТаблицаДанных.ПолучитьЗначение(ТаблицаДанных.НомерСтроки,"Контр"+СтрЗаменить(Значение.Код,"-",""));
		КонецЦикла;
		Стр = 0;
		Кол = 0;
		//ТаблицаДанных.ПродажиЗаМинусом = ТаблицаДанных.РасходЗаПериод - СуммаПоКонтрагнетам;
		ТаблицаДанных.РасходЗаПериод = ТаблицаДанных.РасходЗаПериод - СуммаПоКонтрагнетам;
    КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьОстаткиЗаМинусомПродаж()
	ТаблицаДанных.НоваяКолонка("ОстатокЗаМинусом",,,,"Остаток на момент прихода.",10);
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		//ТаблицаДанных.ОстатокЗаМинусом = ТаблицаДанных.НачальныйОстаток - ТаблицаДанных.ПродажиЗаМинусом;
		//Если (ТаблицаДанных.НачальныйОстаток + ТаблицаДанных.ОжидаемыйПриход) > ТаблицаДанных.РасходЗаПериод  Тогда
		//	ТаблицаДанных.ОстатокЗаМинусом = (ТаблицаДанных.НачальныйОстаток + ТаблицаДанных.ОжидаемыйПриход) - (ТаблицаДанных.РасходЗаПериод);
		//Иначе
		//	ТаблицаДанных.ОстатокЗаМинусом = 0;
		//КонецЕсли;
		    
		//Если ТаблицаДанных.НачальныйОстаток = 0  Тогда  
		//	ТаблицаДанных.ОстатокЗаМинусом = ТаблицаДанных.ОжидаемыйПриход; 
		//ИначеЕсли (ТаблицаДанных.НачальныйОстаток - ТаблицаДанных.РасходЗаПериод) <= 0 Тогда
		//	ТаблицаДанных.ОстатокЗаМинусом = ТаблицаДанных.ОжидаемыйПриход;
		//Иначе
			Если (ТаблицаДанных.НачальныйОстаток + ТаблицаДанных.ОжидаемыйПриход) > ТаблицаДанных.РасходЗаПериод  Тогда
			ТаблицаДанных.ОстатокЗаМинусом = (ТаблицаДанных.НачальныйОстаток + ТаблицаДанных.ОжидаемыйПриход) - (ТаблицаДанных.РасходЗаПериод);
		Иначе
			ТаблицаДанных.ОстатокЗаМинусом = 0;
		КонецЕсли;
    КонецЦикла;
КонецПроцедуры

//======================================================================
Функция ПолучитьКоличествоОжидаемогоПрихода(ТекНоменклатура)
	Результат = 0;
	Если ТаблицаПоступлений.КоличествоСтрок() <> 0 Тогда
		Стр = 0;
		Кол = 0;
		Если ТаблицаПоступлений.НайтиЗначение(ТекНоменклатура, Стр, Кол) = 1 Тогда
			Результат = Результат + ТаблицаПоступлений.ПолучитьЗначение(Стр, "Количество");
		КонецЕсли;
	КонецЕсли;	
	Возврат Результат;
КонецФункции // ПолучитьКоличествоОжидаемогоПрихода(ТекНоменклатура)

//======================================================================
Процедура СоздатьТаблицуПоступлений()
	ТаблицаПоступлений = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаПоступлений.НоваяКолонка("Номенклатура","Справочник.Номенклатура");
	ТаблицаПоступлений.НоваяКолонка("Количество","Число");
	Если СписокПоступлений.РазмерСписка() <> 0 Тогда
		Для Номер = 1 По СписокПоступлений.РазмерСписка() Цикл
			стр = "";
			ЗначениеДокПоступления 	= СписокПоступлений.ПолучитьЗначение(Номер, стр); //получить значение и представление
			ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
			ЗначениеДокПоступления.ВыгрузитьТабличнуюЧасть(ВременнаяТаблица);
			ВременнаяТаблица.ВыбратьСтроки();
			Пока ВременнаяТаблица.ПолучитьСтроку() = 1 Цикл
				ТаблицаПоступлений.НоваяСтрока();
				ТаблицаПоступлений.Номенклатура = ВременнаяТаблица.Номенклатура;
				ТаблицаПоступлений.Количество 	= ВременнаяТаблица.Количество;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;	
	
	Если СписокПеремещений.РазмерСписка() <> 0 Тогда
		Для Номер = 1 По СписокПеремещений.РазмерСписка() Цикл
			стр = "";
			ЗначениеДокПоступления 	= СписокПеремещений.ПолучитьЗначение(Номер, стр); //получить значение и представление
			ВременнаяТаблица = СоздатьОбъект("ТаблицаЗначений");
			ЗначениеДокПоступления.ВыгрузитьТабличнуюЧасть(ВременнаяТаблица);
			ВременнаяТаблица.ВыбратьСтроки();
			Пока ВременнаяТаблица.ПолучитьСтроку() = 1 Цикл
				ТаблицаПоступлений.НоваяСтрока();
				ТаблицаПоступлений.Номенклатура = ВременнаяТаблица.Номенклатура;
				ТаблицаПоступлений.Количество 	= ВременнаяТаблица.Количество;
			КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
	
	ТаблицаПоступлений.Свернуть("Номенклатура","Количество");
КонецПроцедуры // СоздатьТаблицуПоступлений

//======================================================================
Процедура ДобавитьОжидаемыйПриход()
	ТаблицаДанных.НоваяКолонка("ОжидаемыйПриход","Число",15,3,"Ожидаемый приход.",10);
	СоздатьТаблицуПоступлений();
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		ТаблицаДанных.ОжидаемыйПриход = ПолучитьКоличествоОжидаемогоПрихода(ТаблицаДанных.Номенклатура);
	КонецЦикла;
КонецПроцедуры // ДобавитьОжидаемыйПриход

//======================================================================
Процедура РасчитатьЗаказ(Флаг)
	Если ЕстьКолонкаЗаказ() = 0 Тогда
		ТаблицаДанных.НоваяКолонка("Заказ",,,,"Заказ поставщику.",10);
		ТаблицаДанных.НоваяКолонка("Пусто",,,,"");
	КонецЕсли;
	          
	Если Флаг = 3 Тогда
		Возврат;	
	КонецЕсли;	
	
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		//ОстатокСПриходом 	= ТаблицаДанных.ОстатокЗаМинусом + ТаблицаДанных.ОжидаемыйПриход - ТаблицаДанных.РасходЗаБудущийПериод;
		ОстатокСПриходом 	= ТаблицаДанных.ОстатокЗаМинусом - ТаблицаДанных.РасходЗаБудущийПериод;
		Если Флаг = 1 Тогда
			//ТаблицаДанных.Заказ = ?(ОстатокСПриходом < 0, 0-ОстатокСПриходом,0);   
			//ТаблицаДанных.Заказ = (ТаблицаДанных.РасходЗаПериод + ТаблицаДанных.РасходЗаБудущийПериод) - (ТаблицаДанных.ОстатокЗаМинусом); 
		    Если ПустоеЗначение(ТаблицаДанных.РасходЗаБудущийПериод) = 0 Тогда 
				ТаблицаДанных.Заказ = ТаблицаДанных.РасходЗаБудущийПериод - ТаблицаДанных.ОстатокЗаМинусом;
			Иначе 
				ТаблицаДанных.Заказ = (ТаблицаДанных.РасходЗаПериод + ТаблицаДанных.РасходЗаБудущийПериод) - (ТаблицаДанных.ОстатокЗаМинусом);
			КонецЕсли;	
		ИначеЕсли  ТаблицаДанных.Заказ <> 0 Тогда
			//ТаблицаДанных.Заказ = ?(ОстатокСПриходом < 0, 0-ОстатокСПриходом,0); 
			//ТаблицаДанных.Заказ = (ТаблицаДанных.РасходЗаПериод + ТаблицаДанных.РасходЗаБудущийПериод) - (ТаблицаДанных.ОстатокЗаМинусом);
			Если ПустоеЗначение(ТаблицаДанных.РасходЗаБудущийПериод) = 0 Тогда 
				ТаблицаДанных.Заказ = ТаблицаДанных.РасходЗаБудущийПериод - ТаблицаДанных.ОстатокЗаМинусом;
			Иначе 
				ТаблицаДанных.Заказ = (ТаблицаДанных.РасходЗаПериод + ТаблицаДанных.РасходЗаБудущийПериод) - (ТаблицаДанных.ОстатокЗаМинусом);
			КонецЕсли;
		КонецЕсли; 
		
		Если ТаблицаДанных.Заказ < 0 Тогда
			 ТаблицаДанных.Заказ = 0;
		КонецЕсли;	
		
	КонецЦикла;
КонецПроцедуры // РасчитатьЗаказ

Процедура Сформировать()    
	СписокМолов = СоздатьОбъект("СписокЗначений");
	Для а=1 по СписокСкладов.размерСписка() Цикл
		ТекСклад = СписокСкладов.ПолучитьЗначение(а);  
		СписокМолов.ДобавитьЗначение(ТекСклад.МОЛ);
	КонецЦикла;		
	
	
	СписокНоменклатуры = СоздатьОбъект("СписокЗначений");
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		СписокНоменклатуры.ДобавитьЗначение(ТаблицаДанных.Номенклатура);
	КонецЦикла;
	//проверим период
	Если ТаблицаДанных.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Если глПроверкаДаты(ДатаНачала,ДатаКонца) = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ДатаОстатков>ПолучитьДатуТА() Тогда
		ДатаОстатков = ПолучитьПозициюТА();
		Сообщить("Дата остатков изменена на дату ТА.");
	КонецЕсли;
			
	КоличествоКолонок = ТаблицаДанных.КоличествоКолонок();
	Пока КоличествоКолонок <> 3 Цикл 
	//Для Номер = 4 По КоличествоКолонок Цикл
		ТаблицаДанных.УдалитьКолонку(КоличествоКолонок);
		КоличествоКолонок = КоличествоКолонок - 1;
	КонецЦикла;
	//получим остатки на начало периода 
	ЗаполнитьОстаткиНаНачалоПериода();
    //получим объем продаж за период 
	ЗаполнитьОбъемПродажЗаПериод();
	//получим объем продаж по каждому контрагенту
	ЗаполнитьОбъемПродажПоКонтрагентам();
	//получим объем продаж за минусом контрагетов  
	ЗаполнитьОбъемПродажЗаМинусомКонтрагнетов();
	//добавим ожидаемый приход
	ДобавитьОжидаемыйПриход();
	//получим объем продаж 
	ЗаполнитьОстаткиЗаМинусомПродаж();
	//добавим продажи за будущий прериод
	ЗаполнитьОбъемПродажЗаБудущийПериод();
	//получим объем продаж по каждому контрагенту
	ЗаполнитьОбъемПродажПоКонтрагентамБудущийПериод();
	//получим объем продаж за минусом контрагетов  
	ЗаполнитьОбъемПродажЗаМинусомКонтрагнетовБудущийПериод();
	//расчитаем заказ
	РасчитатьЗаказ(3);
	
	КолонкиСкрыть = "ПродажиЗаМинусом";
	
	Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
		стр = "";
		Значение = СписокКонтрагентов.ПолучитьЗначение(Номер, стр);
		//ТаблицаДанных.НоваяКолонка("Контр"+СтрЗаменить(Значение.Код,"-",""),,,,Значение.Наименование);
		КолонкиСкрыть = КолонкиСкрыть+",Контр"+СтрЗаменить(Значение.Код,"-","");
		КолонкиСкрыть = КолонкиСкрыть+",КонтрБуд"+СтрЗаменить(Значение.Код,"-","");
	КонецЦикла;
	Если ТаблицаДанных.Итог("ОжидаемыйПриход") = 0  Тогда
		КолонкиСкрыть = КолонкиСкрыть +",ОжидаемыйПриход";
	КонецЕсли;
	ТаблицаДанных.ВидимостьКолонки(КолонкиСкрыть,0);
КонецПроцедуры  

Процедура ПриОткрытии()
	ТаблицаДанных.НоваяКолонка("Номенклатура","Справочник.Номенклатура",,,,40);
	ТаблицаДанных.НоваяКолонка("НачальныйОстаток",,,,"Начальный остаток",10);
	ТаблицаДанных.НоваяКолонка("РасходЗаПериод",,,,"Продажи за период",10);
	//ТаблицаДанных.НоваяКолонка("РасходЗаБудущийПериод",,,,"Будущие продажи ",10);
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Основная");
	Форма.Закладки.ДобавитьЗначение("Параметры");
	Форма.Закладки.ТекущаяСтрока(1);
	Форма.ИспользоватьСлой("Основной,Подвал,Таблица");
	Склад = глПользователь.ОсновнойСклад;
	ДатаНачала 		= ТекущаяДата() - 30;
	ДатаКонца 		= ТекущаяДата();
	ДатаОстатков 	= ТекущаяДата();
	флУчитыватьРезервы = 1;
КонецПроцедуры	
               
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Если НомерЗакладки=1 Тогда
		Форма.ИспользоватьСлой("Основной,Подвал,Таблица");
	Иначе
		Форма.ИспользоватьСлой("Основной,Подвал,МножественныйФильтр");
	КонецЕсли;       
КонецПроцедуры

Процедура ДобавьКонтрагента()
	спр	= СоздатьОбъект("Справочник.Контрагенты");
	а	= спр.выбрать("Укажите контрагента", "ДляВыбора");
	если а=1 Тогда
		СписокКонтрагентов.ДобавитьЗначение(спр.ТекущийЭлемент(),спр.ТекущийЭлемент().ПолноеНаименование());
	КонецЕсли;
КонецПроцедуры

Процедура ДобавьСтатьюНесколько()
	ОткрытьПодбор("Справочник.Контрагенты","ФормаДляВыбораРозн",Контекст,1);
КонецПроцедуры 

Процедура ДобавьСкладНесколько()
	ОткрытьПодбор("Справочник.Склады","ФормаСписка",Контекст,1);
КонецПроцедуры

Процедура ДобавьПоступлениеНесколько()
	ОткрытьПодбор("Документ.ПоступлениеТМЦ",,Контекст,1);
КонецПроцедуры 

Процедура ДобавьПеремещениеНесколько()
	ОткрытьПодбор("Документ.ПеремещениеТМЦ",,Контекст,1);
КонецПроцедуры 

Процедура ОбработкаПодбора(Элемент, КонтФормы)
	Если ТипЗначенияСтр(Элемент) = "Справочник" Тогда
		Если Элемент.Вид() = "Номенклатура" Тогда
			Номенклатура	= Элемент;
			// ищем номенклатуру среди подобранных
			Поз	= 0; 
			Если ТаблицаДанных.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 0 Тогда
				ТаблицаДанных.НоваяСтрока();
				ТаблицаДанных.Номенклатура = Номенклатура;
			КонецЕсли;
		ИначеЕсли Элемент.Вид() = "Склады" Тогда
			Если СписокСкладов.НайтиЗначение(Элемент.ТекущийЭлемент())=0 Тогда
				СписокСкладов.ДобавитьЗначение(Элемент.ТекущийЭлемент(), Элемент.ТекущийЭлемент().ПолноеНаименование());
			КонецЕсли;		
		Иначе	
			Если СписокКонтрагентов.НайтиЗначение(Элемент.ТекущийЭлемент())=0 Тогда
				СписокКонтрагентов.ДобавитьЗначение(Элемент.ТекущийЭлемент(), Элемент.ТекущийЭлемент().ПолноеНаименование());
			КонецЕсли; 
		КонецЕсли;
	ИначеЕсли ТипЗначенияСтр(Элемент) = "Документ" Тогда
		Если Элемент.Вид() = "ПоступлениеТМЦ" Тогда
			Если СписокПоступлений.НайтиЗначение(Элемент.ТекущийДокумент())=0 Тогда
				СписокПоступлений.ДобавитьЗначение(Элемент.ТекущийДокумент(), "Поступление ТМЦ Номер:"+ Элемент.ТекущийДокумент().НомерДок +" от "+ Элемент.ТекущийДокумент().ДатаДок);
			КонецЕсли;
		Иначе
			Если СписокПеремещений.НайтиЗначение(Элемент.ТекущийДокумент())=0 Тогда
				СписокПеремещений.ДобавитьЗначение(Элемент.ТекущийДокумент(), "Поступление ТМЦ Номер:"+ Элемент.ТекущийДокумент().НомерДок +" от "+ Элемент.ТекущийДокумент().ДатаДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаПодбора() 

Процедура кнПодбор()  
	//Параметры = СоздатьОбъект("СписокЗначений");
	//Параметры.ДобавитьЗначение(глПользователь.ОсновнаяФирма,           "Фирма");
	//Параметры.ДобавитьЗначение("Подбор", "Заголовок");
	//ОткрытьПодбор("Справочник.Номенклатура", , Параметры,1);	
	ОткрытьПодбор("Справочник.Номенклатура",,Контекст,1);
КонецПроцедуры    

Процедура ЗаполнитьПоВарианту(Док)
	ТаблицаДанных.УдалитьСтроки();
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		ТаблицаДанных.НоваяСтрока();
		ТаблицаДанных.Номенклатура = Док.Номенклатура;		
	КонецЦикла;	
КонецПроцедуры	

Процедура кнСохранить()
	Комментарий = "";
	Если ВвестиЗначение(Комментарий, "Укажите имя набора.","Строка",100,) = 1 Тогда 
		Если СтрДлина(Комментарий) <> 0 Тогда
			ДокументНаборТоваровДляЗаказа 			= СоздатьОбъект("Документ.НаборТовараДляЗаказаПоставщику");
			ДокументНаборТоваровДляЗаказа.Новый();
			ДокументНаборТоваровДляЗаказа.ДатаДок 	= ТекущаяДата();
			
			ТаблицаДанных.ВыбратьСтроки();
			Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
				ДокументНаборТоваровДляЗаказа.НоваяСтрока();
				ДокументНаборТоваровДляЗаказа.Номенклатура = ТаблицаДанных.Номенклатура;
			КонецЦикла;
			
			ДокументНаборТоваровДляЗаказа.Комментарий = Комментарий;
			ДокументНаборТоваровДляЗаказа.Записать();
		Иначе
			Предупреждение("Не указано имя набора номенклатуры.");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура кнОткрыть()  
	ВариантыНастроек 				= СоздатьОбъект("СписокЗначений");
	ДокументНаборТоваровДляЗаказа 	= СоздатьОбъект("Документ.НаборТовараДляЗаказаПоставщику");
	ДокументНаборТоваровДляЗаказа.ВыбратьДокументы();
	Пока ДокументНаборТоваровДляЗаказа.ПолучитьДокумент() = 1 Цикл
		Если ДокументНаборТоваровДляЗаказа.ПометкаУдаления() = 0 Тогда
			ВариантыНастроек.ДобавитьЗначение(ДокументНаборТоваровДляЗаказа.ТекущийДокумент(),ДокументНаборТоваровДляЗаказа.ТекущийДокумент().Комментарий);	
		КонецЕсли;
	КонецЦикла;	
	 
	Док = "";
	Если ВариантыНастроек.ВыбратьЗначение(Док, "Выберите вариант настроек.") = 1 Тогда
		ЗаполнитьПоВарианту(Док);
	КонецЕсли;	
	
КонецПроцедуры

Процедура кнПечать()
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("Таблица");
	Таб.ВывестиСекцию("Секция_ШапкаОтчета");
	Таб.Опции(0,0,0,0);  
	Таб.ВывестиСекцию("Секция_ШапкаТаблицы|Секция_НачалоТаблицы");
	
	//Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
	//	стр = "";
	//	Контрагент 	= "";
	//	Значение 	= СписокКонтрагентов.ПолучитьЗначение(Номер, стр); //получить значение и представление
	//	Контрагент 	= Значение.Наименование; 
	//	Таб.ПрисоединитьСекцию("Секция_ШапкаТаблицы|Секция_Контрагент");
	//КонецЦикла;
	ЕстьПриход = 0;
	Если ТаблицаДанных.Итог("ОжидаемыйПриход") <> 0  Тогда
		Таб.ПрисоединитьСекцию("Секция_ШапкаТаблицы|Секция_ПриходТаблицы");
		ЕстьПриход = 1;
	КонецЕсли;
	
	Таб.ПрисоединитьСекцию("Секция_ШапкаТаблицы|Секция_ОкончаниеТаблицы");
	
	ТаблицаДанных.ВыбратьСтроки();
	Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
		Таб.ВывестиСекцию("Секция_СтрокаТаблицы|Секция_НачалоТаблицы"); 
		Если ЕстьПриход = 1 Тогда
			Таб.ПрисоединитьСекцию("Секция_СтрокаТаблицы|Секция_ПриходТаблицы");
		КонецЕсли;
		//Для Номер = 1 По СписокКонтрагентов.РазмерСписка() Цикл
		//	стр 				= "";
		//	РасходКонтрагент 	= 0;
		//	Значение 			= СписокКонтрагентов.ПолучитьЗначение(Номер, стр); //получить значение и представление
		//	РасходКонтрагент 	= ТаблицаДанных.ПолучитьЗначение(ТаблицаДанных.НомерСтроки,"Контр"+СтрЗаменить(Значение.Код,"-","")); 
		//	Если ПустоеЗначение(РасходКонтрагент) 	= 1 Тогда
		//		РасходКонтрагент = 0;
		//	КонецЕсли;	
		//	Таб.ПрисоединитьСекцию("Секция_СтрокаТаблицы|Секция_Контрагент");
		//КонецЦикла;  
		Таб.ПрисоединитьСекцию("Секция_СтрокаТаблицы|Секция_ОкончаниеТаблицы");
	КонецЦикла;
		
	Таб.Показать("Заказ поставщикам","");
КонецПроцедуры	

//======================================================================
Процедура ОбработатьПродажи(Номенклатура, БудущийПериод = 0)
	Если БудущийПериод = 0 Тогда
		Если глПроверкаДаты(ДатаНачала,ДатаКонца) = 0 Тогда
			Возврат;
		КонецЕсли;                  
	Иначе
		Если глПроверкаДаты(ДатаНачалаПрод,ДатаКонцаПрод) = 0 Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если глПроверкаАктуальностиОтчета(ДатаНачала,ДатаКонца,Последовательность.ОсновнаяПоследовательность) = 0 Тогда
		Возврат;
	КонецЕсли; 
	
	Расшифровка = СоздатьОбъект("СписокЗначений");
    Расшифровка.Установить("Отчет", "ВедомостьПоОстаткамТМЦ");
	
	// все настройки помещаем в список
	Если БудущийПериод = 0 Тогда
		Расшифровка.Установить("ДатаНачала", 	ДатаНачала);
		Расшифровка.Установить("ДатаКонца", 	ДатаКонца); 
	Иначе
		Расшифровка.Установить("ДатаНачала", 	ДатаНачалаПрод);
		Расшифровка.Установить("ДатаКонца", 	ДатаКонцаПрод);
	КонецЕсли;
	
	Расшифровка.Установить("ВыбЧейТовар",			1);
	Расшифровка.Установить("ВидЕдиницы",	1);
	//Расшифровка.Установить("ВидСуммы",		1); 
	Расшифровка.Установить("ВидРазделителя",		1);
	Расшифровка.Установить("ВыбРазделитель1",	глПользователь.ОсновнаяФирма);
	
	//Расшифровка.Установить("ВыбСклад", Склад); 
	//Расшифровка.Установить("ВыбСклад", СписокСкладов);
	
	Расшифровка.Установить("ОперацииИсключение", глКО.Списание);
		
	Группировки = СоздатьОбъект("СписокЗначений");
	Группировки.ДобавитьЗначение("Фирма", 			"Фирма");
	Группировки.ДобавитьЗначение("Склад", 			"Склад");
	Группировки.ДобавитьЗначение("СвойствоТМЦ", 	"Свойство номенклатуры");
	Группировки.ДобавитьЗначение("Номенклатура", 	"Номенклатура");
	Группировки.ДобавитьЗначение("Документ", 		"Документы движения");
	
	Группировки.Пометка(2, 1);
	Группировки.Пометка(4, 1);
	Группировки.Пометка(5, 1);
	
    Расшифровка.Установить("Группировки", Группировки); 
	                        
	ТаблицаМФ.ПолучитьСтрокуПоНомеру(2);

	//Если ТаблицаМФ.ФлВкл = 1 Тогда
		ТаблицаМФ.ФлВкл = 2; 
		//СписокНоменклатуры = СоздатьОбъект("СписокЗначений");
		//ВыбратьСтроки();
		//Пока ПолучитьСтроку() = 1 Цикл
		//	СписокНоменклатуры.ДобавитьЗначение(Номенклатура);
		//КонецЦикла;
		
		ТаблицаМФ.СписокЭлементов = СписокСкладов;
	//КонецЕсли;
	
	// запомним МФ только если он задан
    Если глМножественныйФильтрЗадан(ТаблицаМФ) = 1 Тогда
		Расшифровка.Установить("ТаблицаМФ", ТаблицаМФ); 
	КонецЕсли;   
	
	Расшифровка.Установить("ВыбТМЦ", Номенклатура); 
	глОбработкаРасшифровки(Расшифровка,1,1);
КонецПроцедуры

Процедура Обработка()
	ТекущаяКолонка 	= "";
	ТекущаяКолонка 	= ТаблицаДанных.ТекущаяКолонка();
	ТекущаяСтрока 	= "";
	ТекущаяСтрока 	= ТаблицаДанных.ТекущаяСтрока();
	Если ТекущаяКолонка = "РасходЗаПериод" Тогда
		Если ТаблицаДанных.ПолучитьЗначение(ТекущаяСтрока, ТекущаяКолонка) <> 0 Тогда
			ОбработатьПродажи(ТаблицаДанных.ПолучитьЗначение(ТекущаяСтрока, "Номенклатура"));
		КонецЕсли; 
	ИначеЕсли ТекущаяКолонка = "РасходЗаБудущийПериод" Тогда
		Если ТаблицаДанных.ПолучитьЗначение(ТекущаяСтрока, ТекущаяКолонка) <> 0 Тогда
			ОбработатьПродажи(ТаблицаДанных.ПолучитьЗначение(ТекущаяСтрока, "Номенклатура"), 1);
		КонецЕсли;	
	ИначеЕсли ТекущаяКолонка = "Заказ" Тогда
		Значение = 0;
		Если ВвестиЧисло(Значение,ТекущаяКолонка,10,0,0) = 1 Тогда
			ТаблицаДанных.УстановитьЗначение(ТекущаяСтрока,ТекущаяКолонка,Значение);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // Обработка  

//======================================================================
Функция ЕстьКолонкаЗаказ()
	Результат = 0;
	КоличествоКолонок = ТаблицаДанных.КоличествоКолонок();
	Пока КоличествоКолонок <> 0 Цикл 
		Если ТаблицаДанных.ПолучитьПараметрыКолонки(КоличествоКолонок,,,,,,,) = "Заказ" Тогда
        	Результат = 1;
    	КонецЕсли;
		КоличествоКолонок = КоличествоКолонок - 1;
	КонецЦикла;
	Возврат Результат;	
КонецФункции // ЕстьКолонкаЗаказ

Процедура кнЗаполнитьЗаказВсе()
	Если ЕстьКолонкаЗаказ() = 1 Тогда
		РасчитатьЗаказ(1);
	КонецЕсли;
КонецПроцедуры

Процедура кнЗаполнитьЗаказПустые()
	Если ЕстьКолонкаЗаказ() = 1 Тогда
		РасчитатьЗаказ(2);
	КонецЕсли;
КонецПроцедуры

Процедура кнОчиститьЗаказВсе()
	Если ЕстьКолонкаЗаказ() = 1 Тогда
		ТаблицаДанных.ВыбратьСтроки();
		Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
			ТаблицаДанных.Заказ = 0;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//======================================================================
Процедура кнСохранитьЗаказ()
	
	ОткрытьФорму("Документ.ПеремещениеТМЦ",Контекст);
	
	//глЗаполнитьШапку(ДокПеремещение, 0);
	//
	//ДокПеремещение.ФирмаПолучатель = ДокПеремещение.Фирма;
	//ДокПеремещение.СкладПолучатель = Склад;
	//Если ДокПеремещение.Склад.РозничныйСклад = 1 Тогда 
	//	ДокПеремещение.УчитыватьНДС = 1;
	//	ДокПеремещение.УчитыватьНП  = 1;
	//	ДокПеремещение.СуммаВклНДС  = 1;
	//	ДокПеремещение.СуммаВклНП   = 1;
	//	
	//	// Из розницы перемещаем по розничным ценам
	//	ДокПеремещение.ТипЦен = ПолучитьПустоеЗначение("Справочник.ТипыЦен");
	//	ДокПеремещение.Валюта = глРубли;
	//КонецЕсли;
	//// Настройки заполнения флагов налогов зависят от складов
	//Если ДокПеремещение.СкладПолучатель.РозничныйСклад = 1 Тогда
	//	ДокПеремещение.УчитыватьНДС = 1;
	//	ДокПеремещение.УчитыватьНП  = 1;
	//	ДокПеремещение.СуммаВклНДС  = 1;
	//	ДокПеремещение.СуммаВклНП   = 1;
	//	Если ( ПустоеЗначение(ДокПеремещение.ТипЦен) = 1) 
	//	   И (ДокПеремещение.Склад.РозничныйСклад = 0) Тогда
	//		ДокПеремещение.ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
	//	КонецЕсли;                 
	//КонецЕсли;
	//
	//ДокПеремещение.УстановитьНовыйНомер("Пр"+ДокПеремещение.СкладПолучатель.ПрефиксНомеровДокументов); 
	//
	//ТаблицаДанных.ВыбратьСтроки();
	//Пока ТаблицаДанных.ПолучитьСтроку() = 1 Цикл
	//	ДокПеремещение.НоваяСтрока();
	//	ДокПеремещение.Номенклатура 	= ТаблицаДанных.Номенклатура;
	//	//ДокПерем.Партия 		= РегПартии.Партия;
	//	Если ЕстьКолонкаЗаказ() = 0 Тогда
	//		ДокПеремещение.Количество 	= ТаблицаДанных.Заказ;
	//	КонецЕсли;
	//	глПересчетТаблЧасти(ДокПеремещение,"Номенклатура");
	//КонецЦикла;
	//
	//ОткрытьФорму(ДокПеремещение);
КонецПроцедуры // кнСохранитьЗаказ

//======================================================================
Процедура ПриЗакрытии()
	Если Вопрос("Закрыть обработку?",4,0) <> 6 Тогда
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
КонецПроцедуры // ПриЗакрытии

ТаблицаМФ = СоздатьОбъект("ТаблицаЗначений");
ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов"); // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ"); // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,); // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");

ТекСтрокаВТаблице="";

глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Номенклатура", 	"Номенклатура",  "По номенклатуре");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Склады", "Склад",  "По складам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Поставщик",  "По поставщикам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Контрагенты", 		"Покупатель",  "По покупателям");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Номенклатура",  "По свойствам номенклатуры");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ЗначенияСвойств", 	"Поставщик",  "По свойствам поставщиков");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Фирмы", "Фирма",  "По фирмам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","СвоиЮрЛица", "ЮрЛицо",  "По юр. лицам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","УпрАналитика", "УпрАналитика",  "По упр. аналитике");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Журнал","ДокументыПоПоставщикам", "ДокПоставки",  "По документу поставки");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Пользователи", "Автор",  "По авторам документов");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Проекты", "Проект",  "По проектам");               
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","ФизЛица", "МОЛ_Комиссионер",  "По МОЛам");
глДобавитьВТаблицуМФ(ТаблицаМФ,"Справочник","Производители", 		"Производитель",  "По производителям");

ТаблицаМФ.ВидимостьКолонки("Тип",0);
ТаблицаМФ.ВидимостьКолонки("Вид",0);
ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);


ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");