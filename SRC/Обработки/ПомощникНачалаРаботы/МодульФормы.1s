////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем Страница;  // Текущая страница помощника
Перем ОтменятьЗапись;
Перем ТекстПроПрефиксИБ, ТекстПроБудущуюДату, ТекстПроСвойства, ТекстПроСклад, ТекстПроРозничныйТипЦен;
Перем ЮрАдрес, ФактАдрес, СпрЮрЛица, Фирма, Склад;
Перем СпрРуководитель, СпрГлБухгалтер, СпрКассир;
Перем КоличествоСтраниц; // помощника начала работы
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПриИзмененииВалюты()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  ВалютаСчета.
//
// Описание:
//  Обновляет реквизиты диалога при изменении валюты счета.
//
Процедура ПриИзмененииВалюты()
	
	Если (ВалютаСчета = глРубли) ИЛИ (ВалютаСчета.Выбран() = 0) Тогда
		Форма.ТекстВидСчета.Заголовок("Вид счета (расчетный и т. д.):");
	Иначе
		Форма.ТекстВидСчета.Заголовок("Номер и дата разрешения ЦБ:");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииВалюты()

//******************************************************************************
// ПриИзмененииТекущейДаты()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Обновляет периодические реквизиты диалога.
//

//******************************************************************************
// ПоКнопкеВыбораДаты()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка выбора даты.
//
// Описание:
//  Выбирается дата просмотра и редактирования значений периодических реквизитов 
// выбирается по кнопке, чтобы не менялся признак модифицированности формы.
//
Процедура ПоКнопкеВыбораДаты()
	
	Если глВвестиДатуПериодическихРеквизитов(СпрЮрЛица, 0) = 1 Тогда
//		ПриИзмененииТекущейДаты();
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВыбораДаты()

//******************************************************************************
// ПриСменеОргПравФормы()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
// 
// Вызывается из формул диалога
// При смене ОргПравФорма
//
// Описание:
//  Заполняет официальное наименовние из наименования Юр лица и ОргПравФормы
//
Процедура ПриСменеОргПравФормы()
	Если ПустаяСтрока(ОфициальноеНаименование) = 1 Тогда
		ОфициальноеНаименование = СокрЛП(ОргПравФорма)+" """+СокрЛП(НаименованиеЮрЛица)+"""";
	КонецЕсли;
КонецПроцедуры // ПриСменеОргПравФормы()
//******************************************************************************
// ПриСменеНаименования()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из реквизитов диалога
// на седьмой странице при смене наименования Юр.Лица
//
// Описание:
//  Подставляет наименование в полное наименование
//
Процедура ПриСменеНаименования()
	
	Если ПустаяСтрока(ПолнНаименование) = 1 Тогда
		ПолнНаименование = " """+СокрЛП(НаименованиеЮрЛица)+"""";
	КонецЕсли;
	
	
КонецПроцедуры // ПриСменеНаименования()

//******************************************************************************
// ПоКнопкеВводаАдреса(Адрес1, Адрес2)
//
// Параметры:
//  Адрес1 - реквизит, в который будет введен адрес.
//  Адрес2 - реквизит, в который будет скопирован адрес.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки ввода адреса.
//
// Описание:
//  Вызывает обработку для ввода адреса.
//
Процедура ПоКнопкеВводаАдреса(Адрес1, Адрес2)

	глВводАдреса(Адрес1);
	
	Если ПустаяСтрока(глПредставлениеАдреса(Адрес2)) = 1 Тогда
		Адрес2 = Адрес1;
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеВводаАдреса()

// УстановитьЗначениеПоУмолчанию(ИмяРеквизита, ЗначениеРеквизита)
//
// Параметры: 
//  ИмяРеквизита      - строка наименования реквизита
//  ЗначениеРеквизита - значение реквизита необходимого типа 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает необходимый реквизит по умолчанию для текущего пользователя 
//
Процедура УстановитьЗначениеПоУмолчанию(ИмяРеквизита, ЗначениеРеквизита)
	
	Если ПустоеЗначение(глПользователь)=0 Тогда
		СпрПольз = СоздатьОбъект("Справочник.Пользователи");
		Если СпрПольз.НайтиЭлемент(глПользователь) = 1 Тогда
			СпрПольз.УстановитьАтрибут(ИмяРеквизита, ЗначениеРеквизита);
			СпрПольз.Записать();                    
			
			// Обновим глобальную переменную
			глПользователь = СпрПольз.ТекущийЭлемент();
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

//******************************************************************************
// ПроверкаСуществованияДокументов()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1 - если есть хотя бы одни документ в ИБ,
//  0 - иначе
//
// Описание:
//  Проверяет введен ли в ИБ хоть один документ
//                                             
Функция ПроверкаСуществованияДокументов()
	
	Док = СоздатьОбъект("Документ");
	Если Док.ВыбратьДокументы()>0 Тогда
		Возврат 1;
	КонецЕсли;	  
	
	Возврат 0;
	
КонецФункции // ПроверкаСуществованияДокументов()
    
//******************************************************************************
// РассказатьОКонтролеОстатков()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
// Текст подсказки о текущем режиме контроля остатков ТМЦ.
//
// Вызывается из формул элементов диалога.
//
// Описание:
//  Формирует текст подсказки о текущем режиме работы с остатками.
//
Функция РассказатьОКонтролеОстатков()
	Если      КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме          Тогда
		Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий выбранной в документе фирме.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоУпрАналитике	  Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий всем фирмам имеющим упр.аналитику, " +
		"совпадающую с упр. аналитикой выбранной в документе фирмы.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоЮрЛицу         Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий всем фирмам имеющим юр. лицо, " +
		"совпадающее с юр.лицом выбранной в документе фирмы.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоКомпании       Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться фактический остаток на складе " +
		"за вычетом резерва, принадлежащий всем фирмам компании.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать Тогда
		Возврат 
		"При отпуске ТМЦ остаток контролироваться не будет.
		|Отрицательные остатки будут записываеться за указанной в документе фирмой.";
	Иначе	
		Возврат 
		"Не выбран способ контроля остатков ТМЦ.";
	КонецЕсли;
КонецФункции //РассказатьОКонтролеОстатков()

//******************************************************************************
// ИзменитьОтветственного(ФизЛица, СпрРуководитель, Руководитель, ГрСотрудники)
//
// Параметры: 
//  ФизЛица         - справочник ФизЛица
//  СпрРуководитель - элемент справочника ФизЛица, в котром надо сменить наименование,
//  Руководитель    - строка нового наименования
//  ГрСотрудники    - группа справочника ФизЛица, в которой следует создавать 
//                    записи про отвественных лиц
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Служит для изменения наименования элементов справочника Физ. лиц,
//  содержащих информацию про ответственных лиц Юр.лица фирмы
//
Процедура ИзменитьОтветственного(ФизЛица, СпрРуководитель, Руководитель, ГрСотрудники)
	
	Если ПустоеЗначение(Руководитель) = 1 Тогда
		СпрРуководитель = ПолучитьПустоеЗначение("Справочник.ФизЛица");
	Иначе
		Если ПустоеЗначение(СпрРуководитель) = 1 Тогда
			
       		// Надо создать
	   		ФизЛица.Новый();
			ФизЛица.Родитель     = ГрСотрудники; 
	   		ФизЛица.Наименование = Руководитель;
			ФизЛица.Записать();
			СпрРуководитель = ФизЛица.ТекущийЭлемент();
		Иначе
			Если ФизЛица.НайтиЭлемент(СпрРуководитель) = 1 Тогда;
		   		ФизЛица.Наименование = Руководитель;
				ФизЛица.Записать();
				СпрРуководитель = ФизЛица.ТекущийЭлемент();
			Иначе
				СпрРуководитель = ПолучитьПустоеЗначение("Справочник.ФизЛица");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры // ИзменитьОтветственного()

//******************************************************************************
// ПоКнопкеВперед()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалогов
//  по кнопке "Вперед"
//
// Описание:
//  Переход к следующему шагу помощника
//
Процедура ПоКнопкеВперед()
	
	Страница = Страница+1;
	Имя1 = "Страница"+сокрЛП(строка(Страница-1));
	Имя2 = "Страница"+сокрЛП(строка(Страница));
	Если  Страница= 2 Тогда
		Форма.кнНазад.Доступность(1);
	Конецесли;
	Если Страница = КоличествоСтраниц Тогда // последняя
		Форма.кнВперед.Доступность(0);
		Форма.кнГотово.Доступность(1);
	КонецЕсли;
	Форма.ИспользоватьСлой(Имя1,0);
	Форма.ИспользоватьСлой(Имя2,1);
	
КонецПроцедуры // ПоКнопкеВперед()

//******************************************************************************
// ПоКнопкеНазад()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалогов
//  по кнопке "Назад"
//
// Описание:
//  Переход к предыдущему шагу помощника
//
Процедура ПоКнопкеНазад()
	
	Страница = Страница-1;
	Имя1 = "Страница"+сокрЛП(строка(страница+1));
	Имя2 = "Страница"+сокрЛП(строка(страница));
	Если Страница=1 Тогда //первая
		Форма.кнНазад.Доступность(0);
	Иначе
		Форма.кнНазад.Доступность(1);
	КонецЕсли;
	Если Страница = КоличествоСтраниц-1 Тогда // предпоследняя
		Форма.кнВперед.Доступность(1);
		Форма.кнГотово.Доступность(0);
	Конецесли;
	Форма.ИспользоватьСлой(Имя1,0);
	Форма.ИспользоватьСлой(Имя2,1);
	
КонецПроцедуры // ПоКнопкеНазад()

//******************************************************************************
// ПрочитатьЗначения()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает значения зеквизитов формы по текущим настройкам
//  при открытии формы
//
Процедура ПрочитатьЗначения()
	
	//Вторая страница        
	ВалютаБухУчета                 = Константа.ВалютаБухУчета;
	ВалютаУпрУчета                 = Константа.ВалютаУпрУчета;
	
	Если ПустоеЗначение(ВалютаБухУчета) = 1 Тогда ВалютаБухУчета = глРубли   КонецЕсли;
	Если ПустоеЗначение(ВалютаУпрУчета) = 1 Тогда ВалютаБухУчета = глДоллары КонецЕсли;
	
	

	// Третья страница
	КонтрольОстатков  = Константа.КонтрольОтрицательныхОстатков;
	РозничныйтипЦен   = Константа.РозничныйтипЦен;
	
	Если ПустоеЗначение(КонтрольОстатков) = 1 Тогда 
		КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме;
	КонецЕсли;
	
	// Четвертая страница
	РазрешитьПроводитьБудущейДатой = Константа.РазрешитьПроводитьБудущейДатой;
	ПоказыватьАртикул 			   = Константа.ПоказыватьАртикул;
	
	// Пятая страница
	ЕдиницаВеса                    = Константа.ЕдиницаВеса;
	ПрефиксИБ                      = Константа.ПрефиксИБ;
	
	Если ПустоеЗначение(ЕдиницаВеса) = 1 Тогда ЕдиницаВеса = "кг" КонецЕсли;
	// Шестая страница
	СвойствоНоменклатуры           = Строка(Константа.ВидСвойстваНоменклатуры);
	СвойствоКонтрагентов           = Строка(Константа.ВидСвойстваКонтрагентов);
	
	Если ПустоеЗначение(СвойствоНоменклатуры) = 1 Тогда СвойствоНоменклатуры = "Основное свойство" КонецЕсли;
	Если ПустоеЗначение(СвойствоКонтрагентов) = 1 Тогда СвойствоКонтрагентов = "Основное свойство" КонецЕсли;
	
	//Информация о фирме (Седьмая - одиннадцатая страницы)
	Если ПустоеЗначение(Фирма) = 0 Тогда
		ЮрЛицо                   = Фирма.ЮрЛицо;
		НаименованиеЮрЛица       = ЮрЛицо.Наименование;
		ПолнНаименование         = ЮрЛицо.ПолнНаименование;
		ЮрАдрес                  = ЮрЛицо.ЮрАдрес;
		ФактАдрес                = ЮрЛицо.ФактАдрес;
		ОргПравФорма             = ЮрЛицо.ОргПравФорма;
		ОфициальноеНаименование  = ЮрЛицо.ОфициальноеНаименование;
		ДатаРегистрации          = ЮрЛицо.ДатаРегистрации;
		НаименованиеИМНС         = ЮрЛицо.НаименованиеИМНС;         
		ПрефиксНомеровДокументов = ЮрЛицо.ПрефиксНомеровДокументов; 
		Телефоны                 = ЮрЛицо.Телефоны;
		ИНН                      = ЮрЛицо.ИНН;
		ОКПО                     = ЮрЛицо.ОКПО;
	    ОКДП                     = ЮрЛицо.ОКДП;
	    ОКОНХ                    = ЮрЛицо.ОКОНХ;
	    ОКОПФ                    = ЮрЛицо.ОКОПФ;
	    ОКФС                     = ЮрЛицо.ОКФС;
		
		ТекДата = РабочаяДата();
	
		СпрРуководитель          = ЮрЛицо.Руководитель.Получить(ТекДата);
		СпрГлБухгалтер           = ЮрЛицо.ГлБухгалтер.Получить(ТекДата);
		СпрКассир                = ЮрЛицо.Кассир.Получить(ТекДата);
		
		Руководитель             = Строка(СпрРуководитель);
		ГлБухгалтер              = Строка(СпрГлБухгалтер);
		Кассир                   = Строка(СпрКассир);
		
		МетодыОпределенияВыручки1   = ЮрЛицо.МетодОпределенияВыручки.Получить(ТекДата).ПорядковыйНомер();
		МетодыРасчетаСебестоимости1 = ЮрЛицо.МетодРасчетаСебестоимости.Получить(ТекДата).ПорядковыйНомер();
		МетодУчетаРозницы1 			= ЮрЛицо.МетодУчетаРозницы.ПорядковыйНомер();
	    УчитыватьНДС                = ЮрЛицо.УчитыватьНДС;
	    УчитыватьНП                 = ЮрЛицо.УчитыватьНП;
	    СтавкаНПсАванса             = ЮрЛицо.СтавкаНПсАванса;
		
		// Основной счет
		ОсновнойСчет         = Фирма.ОсновнойСчет;
		НаименованиеОснСчета = ОсновнойСчет.Наименование;
		Банк                 = ОсновнойСчет.Банк;
		БанкДляРасчетов      = ОсновнойСчет.БанкДляРасчетов;
		НомерСчета           = ОсновнойСчет.НомерСчета;
		ВалютаСчета          = ОсновнойСчет.ВалютаСчета;
		ДатаОткрытияСчета    = ОсновнойСчет.ДатаОткрытияСчета;
		СуммаБез00Копеек     = ОсновнойСчет.СуммаБез00Копеек;
		МесяцПрописью        = ОсновнойСчет.МесяцПрописью;
		
		Если (ВалютаСчета = глРубли) ИЛИ (ВалютаСчета.Выбран() = 0) Тогда
			Форма.ТекстВидСчета.Заголовок("Вид счета (расчетный и т. д.):");
			ВидСчетаНомерРазрешения = ОсновнойСчет.ВидСчета;
		Иначе
			Форма.ТекстВидСчета.Заголовок("Номер и дата разрешения ЦБ:");
			ВидСчетаНомерРазрешения = ОсновнойСчет.НомерИДатаРазрешения;
		КонецЕсли;
	
		
	Иначе
		Наименование = "Юридическое лицо основной фирмы";
		УчитыватьНДС = 1;
		
	КонецЕсли;                                           
	
	// Заполним пустые значения по умолчанию
	Если ПустоеЗначение(МетодыОпределенияВыручки1)   = 1 Тогда 
		МетодыОпределенияВыручки1   = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке.ПорядковыйНомер();
	КонецЕсли;
	
	Если ПустоеЗначение(МетодыРасчетаСебестоимости1) = 1 Тогда 
		МетодыРасчетаСебестоимости1 = Перечисление.МетодыРасчетаСебестоимости.FIFO.ПорядковыйНомер();
	КонецЕсли;
	
	Если ПустоеЗначение(МетодУчетаРозницы1) = 1 Тогда 
		МетодУчетаРозницы1 = Перечисление.МетодыУчетаРозницы.ПоПродажнымЦенам.ПорядковыйНомер();
	КонецЕсли;
	
	Если ПустоеЗначение(НаименованиеОснСчета) = 1 Тогда НаименованиеОснСчета = "Основной" КонецЕсли;
	Если ПустоеЗначение(ВалютаСчета) = 1 Тогда ВалютаСчета = глРубли КонецЕсли;
	
	// Одиннадцатая страница
	НаименованиеУпрАналитики = Строка(Фирма.УпрАналитика);
	Если ПустоеЗначение(НаименованиеУпрАналитики) = 1 Тогда
	    НаименованиеУпрАналитики = "Основной учет";
	КонецЕсли;
	
	// Двенадцатая страница
	Если ПустоеЗначение(Склад) = 1 Тогда
		НаименованиеСклада = "Основной склад";
	Иначе
		НаименованиеСклада = Склад.Наименование;
		Если ПустоеЗначение(Склад.МОЛ) = 0 Тогда
			НаименованиеМОЛ = Строка(Склад.МОЛ);
		КонецЕсли;
	КонецЕсли;
	
	// Если не передали параметр, то не сможем передать обратно флаг запуска обработки
	Если ПустоеЗначение(Форма.Параметр) = 1 Тогда
		Форма.ФлагОткрытьНастройки.Доступность(0);
		Форма.ТекстФлагОткрытьНастройки.Доступность(0);
	Иначе
		ФлагОткрытьНастройки = Форма.Параметр - 1;
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьЗначения()

//******************************************************************************
// Готово()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  1- можно записывать, 0 - нет
//
// Описание:
//  Запись введенных в помощнике данных
//
Функция Готово() 
	
	// Вторая страница
	Константа.ВалютаБухУчета                 = ВалютаБухУчета;
	Константа.ВалютаУпрУчета                 = ВалютаУпрУчета;
	
	// Третья страница
	Константа.КонтрольОтрицательныхОстатков  = КонтрольОстатков;
	Константа.РозничныйТипЦен                = РозничныйТипЦен;
	
	// Четвертая страница
	Константа.РазрешитьПроводитьБудущейДатой = РазрешитьПроводитьБудущейДатой;
	Константа.ПоказыватьАртикул              = ПоказыватьАртикул;

	// Пятая страница
	Константа.ЕдиницаВеса                    = ЕдиницаВеса;
	Константа.ПрефиксИБ                      = ПрефиксИБ;
	
	// Шестая страница
	
	ВидСвойства = СоздатьОбъект("Справочник.ВидыСвойств");
	
	// Сначала свойства номенклатуры
	Если ПустоеЗначение(СвойствоНоменклатуры) = 1 Тогда

		// Если основные свойства уже задавались, то константу очищать нельзя 
		МенятьНельзя = 0;
		Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда

			Объект = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
			Если Объект.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваНоменклатуры, 1) = 1 Тогда
				МенятьНельзя = 1;
			КонецЕсли;
		    
		КонецЕсли;
		 
		Если Менятьнельзя = 0 Тогда
			Константа.ВидСвойстваНоменклатуры = ПолучитьПустоеЗначение("Справочник.ВидыСвойств");
		Иначе 
			Предупреждение("В справочнике ""Номенклатура"" для некоторых элементов уже указано основное свойство,
			               |поэтому наименование вида основного свойства не должно быть пустым.", 60);
			Возврат 0;			   
		КонецЕсли;
	Иначе
		
		
		НужноСоздать = 1;
		// Если задано основное свойство, то просто меняем его наименование
		Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0  Тогда
			Если ВидСвойства.НайтиЭлемент(Константа.ВидСвойстваНоменклатуры) = 1 Тогда
				ВидСвойства.Наименование = СвойствоНоменклатуры;
				ВидСвойства.Записать();
				НужноСоздать = 0
			КонецЕсли;
		КонецЕсли;
		
		Если НужноСоздать = 1 Тогда
			
			// Создавать надо в группе "Свойства номенклатуры"
			ГрВидовСвойств = СоздатьОбъект("Справочник.ВидыСвойств");
			Если ГрВидовСвойств.НайтиПоНаименованию("Свойства номенклатуры") = 0 Тогда
				ГрВидовСвойств.НоваяГруппа();
				ГрВидовСвойств.Наименование = "Свойства номенклатуры";
				ГрВидовСвойств.Записать();
			КонецЕсли;  
			
		    ВидСвойства.Новый();
			ВидСвойства.Родитель = ГрВидовСвойств.ТекущийЭлемент(); 
			ВидСвойства.Наименование = СвойствоНоменклатуры;
			ВидСвойства.Записать();
			
			Константа.ВидСвойстваНоменклатуры = ВидСвойства.ТекущийЭлемент(); 
		КонецЕсли;
	    
	КонецЕсли;

	// свойства контрагентов
	Если ПустоеЗначение(СвойствоКонтрагентов) = 1 Тогда
		// Если основные свойства уже задавались, то константу очищать нельзя 
		МенятьНельзя = 0;
		Если ПустоеЗначение(Константа.ВидСвойстваКонтрагентов) = 0  Тогда
			Объект = СоздатьОбъект("Справочник.СвойстваКонтрагентов");
			Если Объект.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваКонтрагентов, 1) = 1 Тогда
				МенятьНельзя = 1;
			КонецЕсли;
		    
		КонецЕсли;
		 
		Если Менятьнельзя = 0 Тогда
			Константа.ВидСвойстваКонтрагентов = ПолучитьПустоеЗначение("Справочник.ВидыСвойств");
		Иначе 
			Предупреждение("В справочнике ""Контрагенты"" для некоторых элементов уже указано основное свойство,
			               |поэтому наименование вида основного свойства не должно быть пустым.", 60);
			Возврат 0;			   
		КонецЕсли;
	Иначе
		
		НужноСоздать = 1;
		// Если задано основное свойство, то просто меняем его наименование
		Если ПустоеЗначение(Константа.ВидСвойстваКонтрагентов) = 0  Тогда
			Если ВидСвойства.НайтиЭлемент(Константа.ВидСвойстваКонтрагентов) = 1 Тогда
				ВидСвойства.Наименование = СвойствоКонтрагентов;
				ВидСвойства.Записать();
				НужноСоздать = 0
			КонецЕсли;
		КонецЕсли;
		
		Если НужноСоздать = 1 Тогда
			
			// Создавать надо в группе "Свойства контрагентов"
			ГрВидовСвойств = СоздатьОбъект("Справочник.ВидыСвойств");
			Если ГрВидовСвойств.НайтиПоНаименованию("Свойства контрагентов") = 0 Тогда
				ГрВидовСвойств.НоваяГруппа();
				ГрВидовСвойств.Наименование = "Свойства контрагентов";
				ГрВидовСвойств.Записать();
			КонецЕсли;  
			
		    ВидСвойства.Новый();
			ВидСвойства.Родитель = ГрВидовСвойств.ТекущийЭлемент(); 
			ВидСвойства.Наименование = СвойствоКонтрагентов;
			ВидСвойства.Записать();
			
			Константа.ВидСвойстваКонтрагентов = ВидСвойства.ТекущийЭлемент(); 
			
		КонецЕсли;
	КонецЕсли;
	
	//Информация о фирме (Седьмая, восьмая,  закладки)
	
    // Проверим заполнение обязательных реквизитов
	Если ПустоеЗначение(НаименованиеЮрЛица) = 1  Тогда
		Предупреждение("Не задано наименование юр. лица!",60);
		Возврат 0;
	КонецЕсли;

	Если ПустоеЗначение(НаименованиеУпрАналитики) = 1  Тогда
		Предупреждение("Не задано наименование аналитик упр. учета!",60);
		Возврат 0;
	КонецЕсли;
	
	// Теперь будем записывать фирму
	СпрФирмы        = СоздатьОбъект("Справочник.Фирмы");
	СпрУпрАналитика = СоздатьОбъект("Справочник.УпрАналитика");
	
	Если ПустоеЗначение(Фирма) = 0 Тогда
		СпрФирмы.НайтиЭлемент(Фирма); 
		ЮрЛицо = Фирма.ЮрЛицо;          
		Если ПустоеЗначение(ЮрЛицо) = 1 Тогда
			СпрЮрЛица.Новый();
		Иначе
		    СпрЮрЛица.НайтиЭлемент(ЮрЛицо);
		КонецЕсли;
		
		УпрАналитика = Фирма.УпрАналитика;
		Если ПустоеЗначение(УпрАналитика) = 1 Тогда
			СпрУпрАналитика.Новый();
		Иначе
		    СпрУпрАналитика.НайтиЭлемент(УпрАналитика);
		КонецЕсли;
		
	Иначе 
		СпрФирмы.Новый();
		СпрЮрЛица.Новый();
		СпрУпрАналитика.Новый();
	КонецЕсли;
	
	
	СпрЮрЛица.Наименование             = НаименованиеЮрЛица;
	СпрЮрЛица.ПолнНаименование         = ПолнНаименование;
	СпрЮрЛица.ЮрАдрес                  = ЮрАдрес;
	СпрЮрЛица.ФактАдрес                = ФактАдрес;
	СпрЮрЛица.ОргПравФорма             = ОргПравФорма;
	СпрЮрЛица.ОфициальноеНаименование  = ОфициальноеНаименование;
	СпрЮрЛица.ДатаРегистрации          = ДатаРегистрации;
	СпрЮрЛица.НаименованиеИМНС         = НаименованиеИМНС;         
	СпрЮрЛица.ПрефиксНомеровДокументов = ПрефиксНомеровДокументов; 
	СпрЮрЛица.Телефоны                 = Телефоны;
	СпрЮрЛица.ИНН                      = ИНН;
	СпрЮрЛица.ОКПО                     = ОКПО;
	СпрЮрЛица.ОКДП                     = ОКДП;
	СпрЮрЛица.ОКОНХ                    = ОКОНХ;
	СпрЮрЛица.ОКОПФ                    = ОКОПФ;
	СпрЮрЛица.ОКФС                     = ОКФС;
	СпрЮрЛица.УчитыватьНДС             = УчитыватьНДС;
	СпрЮрЛица.УчитыватьНП              = УчитыватьНП;
	СпрЮрЛица.МетодУчетаРозницы		   = Перечисление.МетодыУчетаРозницы.ЗначениеПоНомеру(МетодУчетаРозницы1);
	
    // Надо установить фамилии должностных лиц 
	ФизЛица = СоздатьОбъект("Справочник.ФизЛица");
	
	// Проверим есть ли группа "Сотрудники"
	Если ФизЛица.НайтиПоНаименованию("Сотрудники") = 0 Тогда
		ФизЛица.НоваяГруппа();
		ФизЛица.Наименование = "Сотрудники";
		ФизЛица.Записать();
	КонецЕсли;
	ГрСотрудники = ФизЛица.ТекущийЭлемент();

	ИзменитьОтветственного(ФизЛица, СпрРуководитель, Руководитель, ГрСотрудники);
	ИзменитьОтветственного(ФизЛица, СпрГлБухгалтер,  ГлБухгалтер,  ГрСотрудники);
	ИзменитьОтветственного(ФизЛица, СпрКассир,       Кассир,       ГрСотрудники);
	

	// Обработке ЗаписьПериодическихРеквизитов необходимо передать
	// значения периодических реквизитов, введенные в форме диалога.
	Список = СоздатьОбъект("СписокЗначений");
	
	Список.Установить("Руководитель", СпрРуководитель);
	Список.Установить("ГлБухгалтер",  СпрГлБухгалтер);
	Список.Установить("Кассир",       СпрКассир);
	Список.Установить("МетодОпределенияВыручки", Перечисление.МетодыОпределенияВыручки.ЗначениеПоНомеру(МетодыОпределенияВыручки1));
	Список.Установить("МетодРасчетаСебестоимости", Перечисление.МетодыРасчетаСебестоимости.ЗначениеПоНомеру(МетодыРасчетаСебестоимости1));
	Список.Установить("СтавкаНПсАванса",СтавкаНПсАванса);
	
	// При записи вызывается обработка ЗаписьПериодическихРеквизитов 
	// для управления записью значений периодических реквизитов.
	Если глЗаписьПериодическихРеквизитов(СпрЮрЛица, Список, СпрЮрЛица.ИспользоватьДату(), '01.01.1980') = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	
	СпрЮрЛица.Записать();                     
	
	СпрУпрАналитика.Наименование = НаименованиеУпрАналитики;
	СпрУпрАналитика.Записать();
	
	СпрФирмы.ЮрЛицо       = СпрЮрЛица.ТекущийЭлемент();  
	СпрФирмы.УпрАналитика = СпрУпрАналитика.ТекущийЭлемент(); 
	Если ПустоеЗначение(СпрФирмы.Наименование) = 1  Тогда
		СпрФирмы.Наименование = СокрЛП(СпрЮрЛица.Наименование) + "(" + 
		                     СокрЛП(СпрУпрАналитика.Наименование) + ")"; 
	КонецЕсли;
	СпрФирмы.Записать();
	УстановитьЗначениеПоУмолчанию("ОсновнаяФирма", СпрФирмы.ТекущийЭлемент());
	
	// Двенадцатая страница
	Если ПустоеЗначение(НаименованиеСклада) = 0 Тогда
		СпрСклады = СоздатьОбъект("Справочник.Склады");
		Если ПустоеЗначение(Склад) = 1  Тогда
			СпрСклады.Новый();
		Иначе
		    СпрСклады.НайтиЭлемент(Склад);
		КонецЕсли;
		
		СпрСклады.Наименование = НаименованиеСклада; 
		СпрСклады.Записать();
		
		Если ПустоеЗначение(НаименованиеМОЛ) = 0 Тогда
			МОЛ = СпрСклады.МОЛ;
			ИзменитьОтветственного(ФизЛица, МОЛ, НаименованиеМОЛ, ГрСотрудники);
			СпрСклады.МОЛ = МОЛ;
			СпрСклады.Записать();
		КонецЕсли;   
		
		УстановитьЗначениеПоУмолчанию("ОсновнойСклад", СпрСклады.ТекущийЭлемент());
		
	КонецЕсли;                            

	// Счет записывается, если указан номер.
	Если ПустаяСтрока(НомерСчета) = 0 Тогда
		
		ОсновнойСчет = СпрФирмы.ОсновнойСчет;
		// Объект для записи основного счета.
		Объект = СоздатьОбъект("Справочник.БанковскиеСчета");
		
		Если Объект.НайтиЭлемент(ОсновнойСчет) = 0 Тогда
			Объект.Новый();
		КонецЕсли;
		
		Объект.Наименование      = НаименованиеОснСчета;
		Объект.ЮрФизЛицо         = СпрФирмы.ЮрЛицо;
		Объект.Банк              = Банк;
		Объект.БанкДляРасчетов   = БанкДляРасчетов;
		Объект.НомерСчета        = НомерСчета;
		Объект.ВалютаСчета       = ВалютаСчета;
		Объект.ДатаОткрытияСчета = ДатаОткрытияСчета;
		Объект.СуммаБез00Копеек  = СуммаБез00Копеек;
		Объект.МесяцПрописью     = МесяцПрописью;
		Объект.ВидСчета          = ВидСчетаНомерРазрешения;
		
		Объект.Записать();
		
		// Установка основного счета.
		СпрФирмы.ОсновнойСчет = Объект.ТекущийЭлемент();
		СпрФирмы.Записать();
		
	КонецЕсли;                            

	//Если нужно заполнять справочники для выгрузки проводок
	Если ПустоеЗначение(ЗаполнитьПланСчетов) = 0 Тогда
		ОткрытьФорму("Обработка.НастройкаФормированияПроводок", "ПроводкиХозОпераций");
	КонецЕсли;	
	
	Форма.Параметр = ФлагОткрытьНастройки;
	
	Возврат 1;
КонецФункции // Готово()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Форма.кнНазад.Доступность(0);
	Форма.кнГотово.Доступность(0);
	Форма.ИспользоватьСлой("Основной",2);
	Страница=1; 
	Форма.ИспользоватьСлой("Страница1",1);
	ОтменятьЗапись=1;
	Если ПроверкаСуществованияДокументов()=1 тогда
		Форма.ВалютаБухУчета.Доступность(0);
		Форма.ВалютаУпрУчета.Доступность(0);
	КонецЕсли;              
	                    
	// Группы банков не выбираем
	Форма.Банк.ВыборГруппы(0);
	Форма.БанкДляРасчетов.ВыборГруппы(0);
	
	ПрочитатьЗначения();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	Если ОтменятьЗапись=1 тогда
		Ответ=Вопрос("Сохранить введенные во время работы с помощником данные?","Да+Нет+Отмена", 60);
		Если Ответ = "Да" Тогда
			ОтменятьЗапись=0;
		ИначеЕсли Ответ = "Нет" Тогда
			Возврат;
		Иначе
			СтатусВозврата(0); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтатусВозврата(0); 
	Попытка
		НачатьТранзакцию(); 
		ПрефиксАвтоНумерации("Справочник.*",СокрЛП(ПрефиксИБ));    
		Если Готово() = 1 Тогда
			СтатусВозврата(1);
			ЗафиксироватьТранзакцию();
			глРубли	 = ВалютаБухУчета; //обновим глобальную переменную
			глДоллары= ВалютаУпрУчета; //обновим глобальную переменную     
		Иначе 
			ОтменитьТранзакцию();
			ПрефиксАвтоНумерации("Справочник.*",СокрЛП(Константа.ПрефиксИБ));
			ОтменятьЗапись = 1;
		КонецЕсли;
    Исключение
		Сообщить(ОписаниеОшибки(), "!");
	КонецПопытки;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ТекстПроПрефиксИБ       = "Префикс ИБ целесообразно задавать при работе с распределенной базой данных.
                          |Префикс ИБ используется как префикс кодов справочников и добавляется к префиксу номеров документов.
					      |В каждом филиале распределенной базы данных необходимо задать уникальный префикс ИБ.";
					  
ТекстПроБудущуюДату     = "Проведение документа будущей датой приводит к тому, что Точка актуальности итогов (ТА) " +
                          "оказывается ""в будущем"" и все документы за текущую дату после этого проводятся "+
					      """задним числом"", что значительно замедляет процесс проведения.";
					  
ТекстПроСвойства        = "Основное свойство показывается в списках справочников для удобства идентификации элементов. " +
					      "По основному свойству можно группировать и фильтровать данные в отчетах. " +
					      "Изменить выбранный вид свойства номенклатуры или контрагентов можно только до тех пор, " +
					      "пока ни для одного элемента соответствующего справочника не задано основное свойство.";
					  
ТекстПроСклад           = "Учет может вестись на любом количестве складов.
                          |Здесь корректируются параметры основного склада. 
					      |На разных складах может быть назначено одно материально ответственное лицо. 
					      |Себестоимость ТМЦ калькулируется по материально - ответственному лицу.";   
					  
ТекстПроРозничныйТипЦен = "Розничный тип цен используется для определения цены услуги
	                      |при реализации услуг в розницу. Заданная типом цен
	                      |наценка определяет розничную цену по умолчанию
	                      |при оформлении поступления на розничный склад.";
					
СпрЮрЛица       = СоздатьОбъект("Справочник.СвоиЮрЛица");
СпрЮрЛица.ИспользоватьДату(РабочаяДата());
Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
Склад = глЗначениеПоУмолчанию("ОсновнойСклад");
КоличествоСтраниц = 14;
