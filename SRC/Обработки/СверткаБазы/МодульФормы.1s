////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем   СписокСозданныхДок,СсылкиНаДокументы,СворачиваемыеДокументы,ДатаГраницыБудущего;
Перем	гXMLАнализатор;
Перем	гПутьОбъекта_КомпонентаV7plus;
Перем	гПутьОбъекта_УниверсальнаяОбработкаВыгрузки;
Перем   Сообщение1,Сообщение2;
Перем   ДатаПоследнейСвертки;
Перем   гПравила,ФормИмяФайлаПравил;
Перем   СчетчикДокументов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// УправлениеДиалогом()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура УправлениеДиалогом()
	
	Форма.ФормИмяФайлаДанных.Доступность(ФлагВыгрузкиВАрхив);
	
КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// ПроверитьИсходныеДанные(Этап)
//
// Параметры:
//  Этап - этап работы обработки на котором выполняется проверка исходных данных
//
// Вызывается из процедуры "ПриНачалеВыбораЗначения","Выполнить".
//
// Описание:
//  Проверяет, существование файла содержащего правила выгрузки
//
Функция ПроверитьИсходныеДанные(Этап="")
	
	Если Найти("Начало,ЗагрузкаПравил", Этап) > 0 Тогда
		Если	ФС.СуществуетФайл(ФормИмяФайлаПравил)		=	0	Тогда	Предупреждение("Не найден файл правил!");
			Возврат(0);
		КонецЕсли;

		Если ФлагВыгрузкиВАрхив = 1 Тогда
			Если	ПустоеЗначение(ФормИмяФайлаДанных)			=	1	Тогда	Предупреждение("Не выбран файл для выгрузки данных!");
				Возврат(0);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции

//******************************************************************************
// НайтиПервыйСуществующийФайл(СписокВозможныхМест)
//
// Параметры:
//  СписокВозможныхМест - места где может находится файл
//
// Вызывается при начале работы обработки
//
// Описание:
//  Последовательно ищет файл по списку возможных мест
//
Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//******************************************************************************
// ВыборФайла(ИмяФайла,Фильтр)
//
// Параметры:
//  ИмяФайла - строка с именем файла
//  Фильтр   - фильтр отбора по расширениям
//
// Вызывается из процедуры "ПриВыбореЗначения"
//
// Описание:
//  Интерактивный выбор файла
//
Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//******************************************************************************
// ЕстьКолонкаВТаблице()
//
// Параметры:
//  ИдКолонки - идентификатор колонки
//  Табл - таблица значений
//
// Вызывается из процедуры "СоздатьДокументыВводаОстатковВРегистры".
//
// Описание:
//  Проверяет, существует ли в таблице значений колонка с заданным идентификатором
//  возвращает либо 0, либо номер найденной колонки
//
Функция ЕстьКолонкаВТаблице(ИдКолонки,Табл)
	
	Перем Рез;
	
	Рез = 0;
	Если ПустоеЗначение(ИдКолонки) = 0 Тогда
		Для т = 1 По Табл.КоличествоКолонок() Цикл
			Если СокрЛП(Табл.ПолучитьПараметрыКолонки(т)) = СокрЛП(ИдКолонки) Тогда
				Рез = т;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЕстьКолонкиВТаблице()

//******************************************************************************
// СоответствуетКлючу(ТабОст,Индекс,Ключи)
//
// Параметры:
//  ТабОст - таблица остатков
//  Индекс - строка в таблице остатков
//  Ключи  - список ключевых колонок
//
// Вызывается из процедуры "СоздатьДокументыВводаОстатковВРегистры".
//
// Описание:
//  Проверяет соответствуют-ли значения в списке ключевых колонок, значениям
//  колонок в строке с номером Индекс таблицы остатков
//
Функция СоответствуетКлючу(ТабОст,Индекс,Ключи)
	
	Перем Ключ,ЗначКлюч,ЗначТабл,Рез,СчетчикЦикла;
	
	Рез = 1;

	Для СчетчикЦикла = 1 По Ключи.РазмерСписка() Цикл
		Ключ = "";
		ЗначКлюч = Ключи.ПолучитьЗначение(СчетчикЦикла,Ключ); 
		
		Если ЕстьКолонкаВТаблице(Ключ,ТабОст) <> 0 Тогда

			// это ключевая колонка таблицы остатков
			ЗначТабл = ТабОст.ПолучитьЗначение(Индекс,Ключ);
			Если ЗначКлюч<>ЗначТабл Тогда

				// обновляем значение ключа
				Если ПустоеЗначение(ЗначТабл) = 0 Тогда
					Ключи.Установить(Ключ,ЗначТабл);
				Иначе
					Ключи.Установить(Ключ,"");
				КонецЕсли;
				Рез = 0;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // СоответствуетКлючу()

//******************************************************************************
// СоздатьДокументыВводаОстатковВРегистры()
//
// Параметры:
//  ТекВидДокумента - вид документа используемого для занесения остатков в регистры
//  ТабОстатков - таблица содержащая все текущие остатки по регистрам, соответствующим виду документа
//                для занесения остатков и виду операции
//  Ключи       - ключевые колонки таблицы остатков или отдельные значения, используются для задания 
//                реквизитов шапки документа вода остатков
//  ВидОперации - вид операции по вводу остатков (тип: Перечисление.ВидОперацииПоВводуОстатков)     
//
// Вызывается из процедуры "АнализОперативныхОстатков".
//
// Описание:
//  выполняет создание и заполнение документов ввода начальных остатков в регистры
//
Процедура СоздатьДокументыВводаОстатковВРегистры(ТекВидДокумента,ТабОстатков,Ключи)

	Перем ДокОст,Ключ,ЗначКлюч;

	// контроль входных данных

	Если (ТабОстатков.КоличествоСтрок() = 0)
	 или (ПустоеЗначение(ТекВидДокумента) = 1)
	 или (ТипЗначенияСтр(Ключи) <> "СписокЗначений") Тогда
		
		// не все входные параметры определены - ничего не делаем
		
		Возврат;
	КонецЕсли;
	
	ДокОст = СоздатьОбъект("Документ."+ТекВидДокумента);

	// сортировка по ключевым колонкам
	СтрСорт = "";
	Для т = 1 По Ключи.РазмерСписка() Цикл
		Ключ = "";
		Если ПустоеЗначение(Ключи.ПолучитьЗначение(т,Ключ)) = 1 Тогда
			
			// это ключевая колонка таблицы остатков
			
			Если ПустаяСтрока(СтрСорт) = 1 Тогда
				СтрСорт = Ключ;
			Иначе
				СтрСорт = СтрСорт + "," + Ключ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТабОстатков.Сортировать(СтрСорт);

	Для т = 1 По ТабОстатков.КоличествоСтрок() Цикл

		Если СоответствуетКлючу(ТабОстатков,т,Ключи) = 0 Тогда

			// Сменились один или несколько ключевых реквизитов - нужен другой документ ввода остатков			

			Если ДокОст.КоличествоСтрок()>0 Тогда

				//Запись заполненного документа (самый последний документ будет сохранен сразу по окончании цикла)

				ДокОст.АвтоВремяКонецДня();
				ДокОст.Записать();
				ДокОст.Провести();
				
				СчетчикДокументов = СчетчикДокументов + 1;
				Состояние("Формирование документов ввода остатков: " + СчетчикДокументов + " документов сформировано...");

				Если СписокСозданныхДок.НайтиЗначение(ДокОст.ТекущийДокумент()) = 0 Тогда
					СписокСозданныхДок.ДобавитьЗначение(ДокОст.ТекущийДокумент());
				КонецЕсли;
			КонецЕсли;

			Найден = 0; // признак наличия документа ввода остатков соответствующего ключевым реквизитам

			// Поиск документа ввода остатков, соответствующего ключевым реквизитам
			ДокОст.ВыбратьДокументы(ДатаСвертки,ДатаСвертки);
			Пока ДокОст.ПолучитьДокумент() = 1 Цикл

				Найден = 1; // может этот?

				Для п = 1 По Ключи.РазмерСписка() Цикл
					Ключ = "";
					ЗначКлюч = Ключи.ПолучитьЗначение(п,Ключ);
					Если ГлЕстьРеквизитШапки(Ключ,ТекВидДокумента) = 1 Тогда
						Если ЗначКлюч <> ДокОст.ПолучитьАтрибут(Ключ) Тогда
							
							Найден = 0; // нет - это не тот документ (по крайней мере один реквизит не соответсвует ключу)
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;

				Если Найден = 1 Тогда
					
					// нашли документ соответствующий ключевым реквизитам
					  
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Найден <> 1 Тогда
				
				// Не нашли! Заводим новый документ ввода остатков
				
				ДокОст.Новый();
				ДокОст.ДатаДок = ДатаСвертки;
				ДокОст.Автор   = ГлПользователь;
				ДокОст.ФлагСвертки = 1;
				ДокОст.Комментарий = "Создан обработкой 'СверткаБазы' "+ТекущаяДата();

				Для п = 1 По Ключи.РазмерСписка() Цикл
					Ключ = "";
					ЗначКлюч = Ключи.ПолучитьЗначение(п,Ключ);
					Если ГлЕстьРеквизитШапки(Ключ,ТекВидДокумента) = 1 Тогда
						ДокОст.УстановитьАтрибут(Ключ,ЗначКлюч);
					КонецЕсли;	
				КонецЦикла;

				ГлПриИзмененииФирмы(ДокОст);				
			Иначе

				Если ДокОст.ПометкаУдаления() = 1 Тогда
					ДокОст.СнятьПометкуУдаления();
				КонецЕсли;
                
				ДокОст.Автор   = ГлПользователь;
				ДокОст.ФлагСвертки = 1;
				ДокОст.Комментарий = "Создан повторно обработкой 'СверткаБазы' "+ТекущаяДата();

				// удаляем старые табличные части
				ДокОст.УдалитьСтроки();
			КонецЕсли;
			
		КонецЕсли;

		// Работаем с табличной частью очередного документа ввода остатков

		// Создаем список трансляции идентификаторов колонок в реквизиты документов для тех случаев, когда они не соответствуют
        ТрансляторСвязей = СоздатьОбъект("СписокЗначений");
		ТрансляторСвязей.ДобавитьЗначение("Объект","Касса");
		ТрансляторСвязей.ДобавитьЗначение("Объект","БанковскийСчет");
		ТрансляторСвязей.ДобавитьЗначение("Объект","ФизЛицо");
		ТрансляторСвязей.ДобавитьЗначение("ДокПродажиПередачи","ДокПродажи");
		ТрансляторСвязей.ДобавитьЗначение("ДокПродажиПередачи","ДокументПередачи");
		ТрансляторСвязей.ДобавитьЗначение("Статус","СтатусПартии");
		ТрансляторСвязей.ДобавитьЗначение("Договор","ДоговорПоставщика");
		ТрансляторСвязей.ДобавитьЗначение("Договор","ДоговорПокупателя");
		ТрансляторСвязей.ДобавитьЗначение("Количество","КоличествоПриход");
		ТрансляторСвязей.ДобавитьЗначение("ПродЦена","ЦенаПрод");
		ТрансляторСвязей.ДобавитьЗначение("Стоимость","СтоимостьПриход");
		ТрансляторСвязей.ДобавитьЗначение("Количество","КоличествоРасход");
		ТрансляторСвязей.ДобавитьЗначение("Стоимость","СтоимостьРасход");
		ТрансляторСвязей.ДобавитьЗначение("Сумма","СуммаБезНДС");
		Если глЕстьРеквизитМнЧ("ДоговорПокПост",ДокОст.Вид())=1 Тогда
			ТрансляторСвязей.ДобавитьЗначение("ДоговорПокПост","Договор");
		КонецЕсли;
		
		ДокОст.НоваяСтрока();
		Для п = 1 По ТабОстатков.КоличествоКолонок() Цикл

			// проходим по колонкам таблицы остатков

			ИдКолонки = ТабОстатков.ПолучитьПараметрыКолонки(п);

			Если глЕстьРеквизитМнЧ(ИдКолонки,ДокОст.Вид()) = 1 Тогда
				
				// стандартная ситуация - идентификатор реквизита напрямую соответствует колонке таблицы остатков 

				Рекв         = ИдКолонки;
				ЗначениеРекв = ТабОстатков.ПолучитьЗначение(т,ИдКолонки);

			ИначеЕсли ПустоеЗначение(ТрансляторСвязей.Получить(ИдКолонки)) = 0 Тогда

				// нестандартная ситуация - идентификатор колонки транслируется в реквизит документа 

				Рекв         = ТрансляторСвязей.Получить(ИдКолонки);
				ЗначениеРекв = ТабОстатков.ПолучитьЗначение(т,ИдКолонки);

			Иначе
				
				// служебная колонка - реквизит заполнять ненужно

				Рекв = "";
				ЗначениеРекв = "";

			КонецЕсли;

			Если ПустоеЗначение(Рекв)=0 Тогда
				ДокОст.УстановитьАтрибут(Рекв,ЗначениеРекв);
			КонецЕсли;
			
		КонецЦикла;
		
		// Обработка исключительных ситуации по заполнению реквизитов документа

		Если глЕстьРеквизитМнЧ("Единица",ДокОст.Вид()) = 1 Тогда
			Если глЕстьРеквизитМнЧ("Номенклатура",ДокОст.Вид()) = 1 Тогда
				Если ТипЗначенияСтр(ДокОст.Номенклатура) = "Справочник" Тогда
					Если ДокОст.Номенклатура.Выбран() = 1 Тогда
						Если Метаданные.Справочник(ДокОст.Номенклатура.Вид()).Реквизит("БазоваяЕдиница").Выбран() = 1 Тогда
							ДокОст.УстановитьАтрибут("Единица",ДокОст.Номенклатура.БазоваяЕдиница);   
						КонецЕсли;         
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		Если глЕстьРеквизитМнЧ("Коэффициент",ДокОст.Вид()) = 1 Тогда
			Если глЕстьРеквизитМнЧ("Единица",ДокОст.Вид()) = 1 Тогда
				Если ТипЗначенияСтр(ДокОст.Единица) = "Справочник" Тогда
					Если ДокОст.Единица.Выбран() = 1 Тогда
						Если Метаданные.Справочник(ДокОст.Единица.Вид()).Реквизит("Коэффициент").Выбран() = 1 Тогда
							ДокОст.УстановитьАтрибут("Коэффициент",ДокОст.Единица.Коэффициент);   
						КонецЕсли;         
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если глЕстьРеквизитМнЧ("Валюта",ДокОст.Вид()) = 1 Тогда
			Если ПустоеЗначение(ДокОст.Валюта) = 1 Тогда
				Если глЕстьРеквизитМнЧ("Объект",ДокОст.Вид()) = 1 Тогда
					Если ТипЗначенияСтр(ДокОст.Объект) = "Справочник" Тогда
						Если ДокОст.Объект.Выбран() = 1 Тогда
							Если Метаданные.Справочник(ДокОст.Объект.Вид()).Реквизит("ВалютаСчета").Выбран() = 1 Тогда
								ДокОст.УстановитьАтрибут("Валюта",ДокОст.Объект.ВалютаСчета);   
							КонецЕсли;         
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;	
	
	Если ДокОст.КоличествоСтрок()>0 Тогда
		ДокОст.АвтоВремяКонецДня();
		ДокОст.Записать();
		ДокОст.Провести();
		
		СчетчикДокументов = СчетчикДокументов + 1;
		Состояние("Формирование документов ввода остатков: " + СчетчикДокументов + " документов сформировано...");

		Если СписокСозданныхДок.НайтиЗначение(ДокОст.ТекущийДокумент()) = 0 Тогда
			СписокСозданныхДок.ДобавитьЗначение(ДокОст.ТекущийДокумент());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СоздатьДокументыВводаОстатковВРегистры()

//******************************************************************************
// ПодготовкаСпискаСсылок(СсылкиНаДокументы) 
//
// Параметры: 
//  СсылкиНаДокументы - "ТаблицаЗначений", которая содержит ссылки на документы в ИБ, и эти документы следовательно
//  нельзя удалять при свертке
//
// Вызывается из процедуры "Выполнить":
//
// Описание: 
//  выполняет анализ ИБ на наличие ссылок типа документ и помещает эти ссылки в Таблицу для последующего анализа
//
Процедура ПодготовкаСпискаСсылок(СсылкиНаДокументы)

	Перем КритичныеЭлементы;

	СсылкиНаДокументы.УдалитьСтроки();

	// Цикл просмотра "КОНСТАНТ"
	
	Для т = 1 По Метаданные.Константа() Цикл

		Состояние("Контроль ссылок: "+" анализ константы "+Метаданные.Константа(т).Идентификатор);

		Если Метаданные.Константа(т).Тип = "Документ" Тогда
			
			ИдКонст = Метаданные.Константа(т).Идентификатор;
			
			Если Метаданные.Константа(т).Периодический = 1 Тогда
				ЗначКонст = СоздатьОбъект("Периодический");
				ЗначКонст.ВыбратьЗначения();
				Пока ЗначКонст.ПолучитьЗначение() = 1 Цикл
					Если (ЗначКонст.Значение.Выбран() = 1)
					   и (ЗначКонст.Значение.ДатаДок <= ДатаСвертки) Тогда

					   	// дополняем таблицу ссылок

						СсылкиНаДокументы.НоваяСтрока();
						СсылкиНаДокументы.ДокументИБ = ЗначКонст.Значение.ТекущийДокумент();
						СсылкиНаДокументы.ОбъектИБ   = "Константа";
						СсылкиНаДокументы.Атрибут    = ИдКонст;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Если (Константа.ПолучитьАтрибут(ИдКонст).Выбран() = 1)
				   и (Константа.ПолучитьАтрибут(ИдКонст).ДатаДок <= ДатаСвертки) Тогда

				   	// дополняем таблицу ссылок

					СсылкиНаДокументы.НоваяСтрока();
					СсылкиНаДокументы.ДокументИБ = Константа.ПолучитьАтрибут(ИдКонст).ТекущийДокумент();
					СсылкиНаДокументы.ОбъектИБ   = "Константа";
					СсылкиНаДокументы.Атрибут    = ИдКонст;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла; 	// Цикл просмотра "КОНСТАНТ"

	// Цикл по просмотру объектов метаданных "СПРАВОЧНИКИ"

	КритичныеЭлементы = СоздатьОбъект("СписокЗначений");
	
	Для т = 1 По Метаданные.Справочник() Цикл

		Состояние("Контроль ссылок: "+" анализ справочника "+Метаданные.Справочник(т).Идентификатор);

		ЕстьРеквДок = 0;
		Для п = 1 По Метаданные.Справочник(т).Реквизит() Цикл
			Если Метаданные.Справочник(т).Реквизит(п).Тип = "Документ" Тогда
				ЕстьРеквДок = 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьРеквДок = 1 Тогда
			
			КритичныеЭлементы.УдалитьВсе();

			// Далее необходимо искать факты наличия элементов этого справочника в измерениях оперативных
			// регистров по которым существуют ненулевые остатки на дату свертки
			
			СтрокаИзмерений = "";
			РесурсыИФункции = СоздатьОбъект("СписокЗначений");
			
			Для к = 1 По Метаданные.Регистр() Цикл

				// Сначала анализируем измерения регистра

				ИдРегистра = Метаданные.Регистр(к).Идентификатор;
				ПодозрительныеИзмерения = 0;
				
				Для л = 1 По Метаданные.Регистр(к).Измерение() Цикл
                	Если (Метаданные.Регистр(к).Измерение(л).Тип = "Справочник") 
					   и ( (ПустоеЗначение(Метаданные.Регистр(к).Измерение(л).Вид) = 1)
					 или   (Метаданные.Регистр(к).Измерение(л).Вид = Метаданные.Справочник(т).Идентификатор) ) Тогда

						// Нужно учесть измерение этого регистра в строке запроса
						ИдИзмерения = Метаданные.Регистр(к).Измерение(л).Идентификатор;
						
						Если ПустаяСтрока(СтрокаИзмерений) = 1 Тогда
							СтрокаИзмерений = "Ссылка = " + "Регистр." + ИдРегистра + "." + ИдИзмерения;
						Иначе
							СтрокаИзмерений = СтрокаИзмерений + ", Регистр." + ИдРегистра + "." + ИдИзмерения;
						КонецЕсли;
						
						ПодозрительныеИзмерения = 1;
						
					КонецЕсли;
				КонецЦикла;

				Если ПодозрительныеИзмерения = 1 Тогда

					// Формируем функции в строке запроса				

					Для л = 1 По Метаданные.Регистр(к).Ресурс() Цикл
						ИдРесурса = Метаданные.Регистр(к).Ресурс(л).Идентификатор;
						Если ПустоеЗначение(РесурсыИФункции.Получить(ИдРесурса))=1 Тогда
							// такой ресурс встречается впервые    
							РесурсыИФункции.ДобавитьЗначение(""+ИдРесурса+"="+"Регистр."+ИдРегистра+"."+ИдРесурса, ИдРесурса);
							// добавляем соответсвующую функцию
							РесурсыИФункции.ДобавитьЗначение("Функция "+"Фост"+ИдРесурса+" = КонОст("+ИдРесурса+")", "Фост"+ИдРесурса);
						Иначе
							// уже встречался раньше такой ресурс
							Старое = РесурсыИФункции.Получить(ИдРесурса);
							РесурсыИФункции.Установить(ИдРесурса, Старое+","+"Регистр."+ИдРегистра+"."+ИдРесурса);
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;
				
			КонецЦикла;
			
			Если (ПустаяСтрока(СтрокаИзмерений) = 0) Тогда
			   	
            	// Выполняем контрольный запрос к остаткам регистров

				ТекстЗапроса = 
				"Период с ДатаСвертки по ДатаСвертки;";
		
				ТекстЗапроса = ТекстЗапроса + СтрокаИзмерений + ";";

				// включаем в запрос переменные и функции
				СтрокаПеременных = "";
				СтрокаФункций    = "";
				
				Для к = 1 По РесурсыИФункции.РазмерСписка() Цикл
					Предст      = "";
					ЧастьСтроки = РесурсыИФункции.ПолучитьЗначение(к,Предст);
					Если Найти(Предст,"Фост") = 1 Тогда
						// это функция
						СтрокаФункций = СтрокаФункций + ЧастьСтроки + ";";
					Иначе
						// это переменная
						СтрокаПеременных = СтрокаПеременных + ЧастьСтроки + ";";
					КонецЕсли;
				КонецЦикла;

				ТекстЗапроса = ТекстЗапроса + СтрокаПеременных + СтрокаФункций + "Группировка Ссылка;"; 
		
				// Выполняем запрос к Оперативным итогам
				Запрос = СоздатьОбъект("Запрос");
		
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
					Возврат;
				КонецЕсли;

				Пока Запрос.Группировка("Ссылка") = 1 Цикл
					Если (КритичныеЭлементы.НайтиЗначение(Запрос.Ссылка.ТекущийЭлемент()) = 0)
					   и (ПустоеЗначение(Запрос.Ссылка.ТекущийЭлемент()) = 0)
					   и (Запрос.Ссылка.Вид() = Метаданные.Справочник(т).Идентификатор) Тогда
						КритичныеЭлементы.ДобавитьЗначение(Запрос.Ссылка);
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;
		
			// Далее будем искать ссылки на элементы этого справочника в документах, дата которых расположена в диапазоне
			// от даты свертки, до даты указанной в переменной "ДатаГраницыБудущего"
			
			СтрокаПеременных = "";
			
			Для к = 1 По Метаданные.Документ() Цикл

				Для л = 1 По Метаданные.Документ(к).РеквизитШапки() Цикл
					
					ИдДокумента  = Метаданные.Документ(к).Идентификатор;
					ИдРеквШапки  = Метаданные.Документ(к).РеквизитШапки(л).Идентификатор;
					ВидРеквШапки = Метаданные.Документ(к).РеквизитШапки(л).Вид;
					
					Если (Метаданные.Документ(к).РеквизитШапки(л).Тип = "Справочник") 
					   и ( (ПустоеЗначение(ВидРеквШапки) = 1)
					 или   (ВидРеквШапки = Метаданные.Справочник(т).Идентификатор) ) Тогда

						// Нужно учесть этот реквизит в строке запроса
						
						Если ПустаяСтрока(СтрокаПеременных) = 1 Тогда
							СтрокаПеременных = "Ссылка = "+"Документ."+ИдДокумента+"."+ИдРеквШапки;
						Иначе
							СтрокаПеременных = СтрокаПеременных+", Документ."+ИдДокумента+"."+ИдРеквШапки;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;

				Для л = 1 По Метаданные.Документ(к).РеквизитТабличнойЧасти() Цикл				

					ИдДокумента  = Метаданные.Документ(к).Идентификатор;
					ИдРеквШапки  = Метаданные.Документ(к).РеквизитТабличнойЧасти(л).Идентификатор;
					ВидРеквШапки = Метаданные.Документ(к).РеквизитТабличнойЧасти(л).Вид;
					
					Если (Метаданные.Документ(к).РеквизитТабличнойЧасти(л).Тип = "Справочник") 
					   и ( (ПустоеЗначение(ВидРеквШапки) = 1)
					 или   (ВидРеквШапки = Метаданные.Справочник(т).Идентификатор) ) Тогда

						// Нужно учесть этот реквизит в строке запроса
						
						Если ПустаяСтрока(СтрокаПеременных) = 1 Тогда
							СтрокаПеременных = "Ссылка = "+"Документ."+ИдДокумента+"."+ИдРеквШапки;
						Иначе
							СтрокаПеременных = СтрокаПеременных+", Документ."+ИдДокумента+"."+ИдРеквШапки;
						КонецЕсли;
					КонецЕсли;

				КонецЦикла;
			КонецЦикла;
			
			Если (ПустаяСтрока(СтрокаПеременных) = 0) Тогда
			   	
            	// Выполняем контрольный запрос по реквизитам документов имеющим тип "Справочник"

				ТекстЗапроса = 
				"Период с '" + (ДатаСвертки + 1) + "' по ДатаГраницыБудущего;";
		
				ТекстЗапроса = ТекстЗапроса + СтрокаПеременных + ";";
				ТекстЗапроса = ТекстЗапроса + "Группировка Ссылка;"; 
		
				// Выполняем запрос к Оперативным итогам
				Запрос = СоздатьОбъект("Запрос");
		
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
					Возврат;
				КонецЕсли;

				Пока Запрос.Группировка("Ссылка") = 1 Цикл
					Если (КритичныеЭлементы.НайтиЗначение(Запрос.Ссылка.ТекущийЭлемент()) = 0)
					   и (ПустоеЗначение(Запрос.Ссылка.ТекущийЭлемент()) = 0)
					   и (Запрос.Ссылка.Вид() = Метаданные.Справочник(т).Идентификатор) Тогда
						КритичныеЭлементы.ДобавитьЗначение(Запрос.Ссылка.ТекущийЭлемент());
					КонецЕсли;
				КонецЦикла;

			КонецЕсли;

			// Анализ списка критичных элементов справочников и составление на его основе списка не подлежащих 
			// удалению документов в сворачиваемом периоде
			
			Если КритичныеЭлементы.РазмерСписка()>0 Тогда
				Для к = 1 По КритичныеЭлементы.РазмерСписка() Цикл
					
					ТекЭлем = КритичныеЭлементы.ПолучитьЗначение(к);

					Для п = 1 По Метаданные.Справочник(т).Реквизит() Цикл
						Если Метаданные.Справочник(т).Реквизит(п).Тип = "Документ" Тогда
							ИдРеквСправ = Метаданные.Справочник(т).Реквизит(п).Идентификатор;
							Если (ТекЭлем.ПолучитьАтрибут(ИдРеквСправ).Выбран() = 1)
							   и (Дата(ТекЭлем.ПолучитьАтрибут(ИдРеквСправ).ДатаДок) <= ДатаСвертки) Тогда

							   	// дополняем таблицу ссылок

								СсылкиНаДокументы.НоваяСтрока();
								СсылкиНаДокументы.ДокументИБ = ТекЭлем.ПолучитьАтрибут(ИдРеквСправ).ТекущийДокумент();
								СсылкиНаДокументы.ОбъектИБ   = ТекЭлем;
								СсылкиНаДокументы.Атрибут    = ИдРеквСправ;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;    // Конец цикла по просмотру объектов метаданных "СПРАВОЧНИКИ"

	// Цикл по просмотру объектов метаданных "ДОКУМЕНТЫ"

	СтрокаПеременных  = "";
	СтрокаПеременных2 = "";

	Для т = 1 По Метаданные.Документ() Цикл

		Состояние("Контроль ссылок: "+" анализ документа "+Метаданные.Документ(т).Идентификатор);

		Для п = 1 По Метаданные.Документ(т).РеквизитШапки() Цикл
					
			ИдДокумента  = Метаданные.Документ(т).Идентификатор;
			ИдРеквШапки  = Метаданные.Документ(т).РеквизитШапки(п).Идентификатор;
			ВидРеквШапки = Метаданные.Документ(т).РеквизитШапки(п).Вид;
					
			Если Метаданные.Документ(т).РеквизитШапки(п).Тип = "Документ" Тогда

				// Нужно учесть этот реквизит в строке запроса
						
				Если ПустаяСтрока(СтрокаПеременных) = 1 Тогда
					СтрокаПеременных  = "Ссылка = "+"Документ."+ИдДокумента+"."+ИдРеквШапки+".ТекущийДокумент";
					СтрокаПеременных2 = "ТекущийДок = "+"Документ."+ИдДокумента+".ТекущийДокумент";
				Иначе
					СтрокаПеременных  = СтрокаПеременных +", Документ."+ИдДокумента+"."+ИдРеквШапки+".ТекущийДокумент";
					СтрокаПеременных2 = СтрокаПеременных2+", Документ."+ИдДокумента+".ТекущийДокумент";
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

		Для п = 1 По Метаданные.Документ(т).РеквизитТабличнойЧасти() Цикл
					
			ИдДокумента  = Метаданные.Документ(т).Идентификатор;
			ИдРеквШапки  = Метаданные.Документ(т).РеквизитТабличнойЧасти(п).Идентификатор;
			ВидРеквШапки = Метаданные.Документ(т).РеквизитТабличнойЧасти(п).Вид;
					
			Если Метаданные.Документ(т).РеквизитТабличнойЧасти(п).Тип = "Документ" Тогда

				// Нужно учесть этот реквизит в строке запроса
						
				Если ПустаяСтрока(СтрокаПеременных) = 1 Тогда
					СтрокаПеременных  = "Ссылка = "+"Документ."+ИдДокумента+"."+ИдРеквШапки+".ТекущийДокумент";
					СтрокаПеременных2 = "ТекущийДок = "+"Документ."+ИдДокумента+".ТекущийДокумент";
				Иначе
					СтрокаПеременных  = СтрокаПеременных +", Документ."+ИдДокумента+"."+ИдРеквШапки+".ТекущийДокумент";
					СтрокаПеременных2 = СтрокаПеременных2+", Документ."+ИдДокумента+".ТекущийДокумент";
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;

	КонецЦикла; // Конец цикла по просмотру объектов метаданных "ДОКУМЕНТЫ"

	Если (ПустаяСтрока(СтрокаПеременных) = 0) Тогда
				   	
    	// Выполняем контрольный запрос по реквизитам документов имеющим тип "Документ"

		ТекстЗапроса = 
		"Период с '" + (ДатаСвертки + 1) + "' по ДатаГраницыБудущего;";
		ТекстЗапроса = ТекстЗапроса + "ОбрабатыватьДокументы все;";

		ТекстЗапроса = ТекстЗапроса + СтрокаПеременных  + ";";
		ТекстЗапроса = ТекстЗапроса + СтрокаПеременных2 + ";";
		ТекстЗапроса = ТекстЗапроса + "Группировка ТекущийДок;";
		ТекстЗапроса = ТекстЗапроса + "Условие (Ссылка.ДатаДок <= ДатаСвертки);"; 
		ТекстЗапроса = ТекстЗапроса + "Условие (ПустоеЗначение(Ссылка) = 0);"; 

		// Выполняем запрос к Оперативным итогам
		Запрос = СоздатьОбъект("Запрос");

		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;

		Пока Запрос.Группировка("ТекущийДок") = 1 Цикл
			Если Запрос.Ссылка.Выбран()=1 Тогда
				
				// дополняем таблицу ссылок
				
				СсылкиНаДокументы.НоваяСтрока();
				СсылкиНаДокументы.ДокументИБ = Запрос.Ссылка;
				СсылкиНаДокументы.ОбъектИБ   = Запрос.ТекущийДок;
				СсылкиНаДокументы.Атрибут    = "";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Проверка наличия ссылок на документы периода свертки в "ОСТАТКАХ РЕГИСТРОВ"
	
	СтрокаИзмерений   = "";
	СтрокаПеременных  = "";
	СтрокаПеременных2 = "";
	СтрокаФункций     = "";
			
	Для к = 1 По Метаданные.Регистр() Цикл
    
		Состояние("Контроль ссылок: "+" анализ регистра "+Метаданные.Регистр(к).Идентификатор);

		// Сначала анализируем измерения регистра

		ИдРегистра = Метаданные.Регистр(к).Идентификатор;
		ПодозрительныеИзмерения = 0;
		
		Для л = 1 По Метаданные.Регистр(к).Измерение() Цикл
			Если (Метаданные.Регистр(к).Измерение(л).Тип = "Документ") Тогда

				// Нужно учесть измерение этого регистра в строке запроса
				ИдИзмерения = Метаданные.Регистр(к).Измерение(л).Идентификатор;
				
				Если ПустаяСтрока(СтрокаИзмерений) = 1 Тогда
					СтрокаИзмерений = "Ссылка = " + "Регистр." + ИдРегистра + "." + ИдИзмерения+".ТекущийДокумент";
					СтрокаПеременных2 = "ДтДок = " + "Регистр." + ИдРегистра + "." + ИдИзмерения + ".ДатаДок";
				Иначе
					СтрокаИзмерений = СтрокаИзмерений + ", Регистр." + ИдРегистра + "." + ИдИзмерения+".ТекущийДокумент";
					СтрокаПеременных2 = СтрокаПеременных2 + ", Регистр." + ИдРегистра + "." + ИдИзмерения + ".ДатаДок";
				КонецЕсли;
				
				ПодозрительныеИзмерения = 1;
				
			КонецЕсли;
		КонецЦикла;

		Если ПодозрительныеИзмерения = 1 Тогда

			// Формируем функции в строке запроса				

			Для л = 1 По Метаданные.Регистр(к).Ресурс() Цикл
				ИдРесурса = Метаданные.Регистр(к).Ресурс(л).Идентификатор;
				Если ПустоеЗначение(РесурсыИФункции.Получить(ИдРесурса))=1 Тогда
					// такой ресурс встречается впервые    
					РесурсыИФункции.ДобавитьЗначение(""+ИдРесурса+"="+"Регистр."+ИдРегистра+"."+ИдРесурса, ИдРесурса);
					// добавляем соответсвующую функцию
					РесурсыИФункции.ДобавитьЗначение("Функция "+"Фост"+ИдРесурса+" = КонОст("+ИдРесурса+")", "Фост"+ИдРесурса);
				Иначе
					// уже встречался раньше такой ресурс
					Старое = РесурсыИФункции.Получить(ИдРесурса);
					РесурсыИФункции.Установить(ИдРесурса, Старое+","+"Регистр."+ИдРегистра+"."+ИдРесурса);
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	КонецЦикла;
			
	Если (ПустаяСтрока(СтрокаИзмерений) = 0) Тогда
			   	
 		// Выполняем контрольный запрос к остаткам регистров

		ТекстЗапроса = "Период с ДатаСвертки по ДатаСвертки;";

		ТекстЗапроса = ТекстЗапроса + СтрокаИзмерений + ";";     // перем запроса "Ссылка"
		ТекстЗапроса = ТекстЗапроса + СтрокаПеременных2 + ";";   // перем запроса "ДтДок"

		// включаем в запрос переменные и функции
		СтрокаПеременных = "";
		СтрокаФункций    = "";
		
		Для к = 1 По РесурсыИФункции.РазмерСписка() Цикл
			Предст      = "";
			ЧастьСтроки = РесурсыИФункции.ПолучитьЗначение(к,Предст);
			Если Найти(Предст,"Фост") = 1 Тогда
				// это функция
				СтрокаФункций = СтрокаФункций + ЧастьСтроки + ";";
			Иначе
				// это переменная
				СтрокаПеременных = СтрокаПеременных + ЧастьСтроки + ";";
			КонецЕсли;
		КонецЦикла;

		ТекстЗапроса = ТекстЗапроса + СтрокаПеременных + СтрокаФункций + "Группировка Ссылка;"; 
		ТекстЗапроса = ТекстЗапроса + "Условие (ДтДок <= ДатаСвертки);";  // ссылки на документы только сворачиваемого периода

		// Выполняем запрос к Оперативным итогам
		Запрос = СоздатьОбъект("Запрос");

		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;

		Пока Запрос.Группировка("Ссылка") = 1 Цикл
			Если Запрос.Ссылка.Выбран()=1 Тогда
				
				// дополняем таблицу ссылок
				
				СсылкиНаДокументы.НоваяСтрока();
				СсылкиНаДокументы.ДокументИБ = Запрос.Ссылка;
				СсылкиНаДокументы.ОбъектИБ   = "Регистр";
				СсылкиНаДокументы.Атрибут    = "";
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	// Закончилась проверка наличия ссылок на документы периода свертки в "ОСТАТКАХ РЕГИСТРОВ"

	// Дополнительный проход с целью контроля случаев сязки документов "Накладная" - "СчетФактура"
	// Если мы решили не удалять накладную, тогда не нужно удалять и счет-фактуру, введенную на ее 
	// основании 
	
	ТекДок    = СоздатьОбъект("Документ");
	СсылкиНаДокументы.ВыбратьСтроки();
	РазмерТаблицы = СсылкиНаДокументы.КоличествоСтрок();

	Состояние("Контроль ссылок: "+" проверка удаления пар документов: Накладная - Счет-фактура");

	Для т1 = 1 По РазмерТаблицы Цикл

		Если ТекДок.НайтиДокумент(СсылкиНаДокументы.ПолучитьЗначение(т1,"ДокументИБ")) = 0 Тогда
		    Продолжить;
		КонецЕсли;

		Для х = 1 По Метаданные.Документ(ТекДок.Вид()).ВводимыеНаОснованииДокументы.Количество() Цикл
			Если (Найти(Метаданные.Документ(ТекДок.Вид()).ВводимыеНаОснованииДокументы.Получить(х).Идентификатор,"СчетФактураВыданный") = 1)
			 или (Найти(Метаданные.Документ(ТекДок.Вид()).ВводимыеНаОснованииДокументы.Получить(х).Идентификатор,"СчетФактураПолученный") = 1) Тогда
				
			 	// поиск документа введенного на основании
			 	
	            СсылкаДок = ТекДок.ТекущийДокумент();
				
			 	//Создание объекта типа Запрос
				Запрос = СоздатьОбъект("Запрос");
				ТекстЗапроса = 
				"//{{ЗАПРОС(Сформировать)
				|Обрабатывать НеПомеченныеНаУдаление;
				|Док = Документ.СчетФактураВыданный.ТекущийДокумент, Документ.СчетФактураПолученный.ТекущийДокумент;
				|ДокОсн = Документ.СчетФактураВыданный.ДокОснование.ТекущийДокумент, Документ.СчетФактураПолученный.ДокОснование.ТекущийДокумент;
				|Группировка Док;
				|Условие(ДокОсн = СсылкаДок);
				|"//}}ЗАПРОС
				;
				// Если ошибка в запросе, то выход из процедуры
				Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
					Возврат;
				КонецЕсли;
			
				Пока Запрос.Группировка("Док") = 1 Цикл
					Стр = "";
					Если СсылкиНаДокументы.НайтиЗначение(Запрос.Док,Стр,"ДокументИБ") = 0 Тогда
						СсылкиНаДокументы.НоваяСтрока();
						СсылкиНаДокументы.ДокументИБ = Запрос.Док;
						СсылкиНаДокументы.ОбъектИБ   = ТекДок.ТекущийДокумент();
						СсылкиНаДокументы.Атрибут    = "ДокОснование";
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла
		
	КонецЦикла;
	
	// Ну а теперь проверяются возможные ситуации, когда документ, который принято решение 
	// не удалять (но сворачивать) содержит в своем составе ссылки на документы, которые планируется удалить. 
	// В таких случаях системный контроль проверки ссылочной целостности не позволит
	// нам полностью удалить помечнные на удаление документы. Чтобы избежать этого в документах, 
	// которые мы планируем оставить в ИБ очищаем все ссылки на какие-либо другие документы этой ИБ.
	
	СсылкиНаДокументы.ВыбратьСтроки();

	Состояние("Контроль ссылок: отрываем все ссылки на объекты, которые принято решение удалять...");

	Пока СсылкиНаДокументы.ПолучитьСтроку() = 1 Цикл

		Если ТекДок.НайтиДокумент(СсылкиНаДокументы.ДокументИБ) = 0 Тогда
		    Продолжить;
		КонецЕсли;

		НужноЗаписывать = 0;
	    
		Для т = 1 По Метаданные.Документ(ТекДок.Вид()).РеквизитШапки() Цикл
			Если Метаданные.Документ(ТекДок.Вид()).РеквизитШапки(т).Тип = "Документ" Тогда
				ИдДок = Метаданные.Документ(ТекДок.Вид()).РеквизитШапки(т).Идентификатор;
				Если ТекДок.ПолучитьАтрибут(ИдДок).Выбран() = 1 Тогда
					Стр ="";
					Если СсылкиНаДокументы.НайтиЗначение(ТекДок.ПолучитьАтрибут(ИдДок), Стр, "ДокументИБ") = 0 Тогда
						ТекДок.УстановитьАтрибут(ИдДок,"");
						НужноЗаписывать = 1;
					КонецЕсли;
					
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

		Для т = 1 По Метаданные.Документ(ТекДок.Вид()).РеквизитТабличнойЧасти() Цикл
			Если Метаданные.Документ(ТекДок.Вид()).РеквизитТабличнойЧасти(т).Тип = "Документ" Тогда
				ИдДок = Метаданные.Документ(ТекДок.Вид()).РеквизитТабличнойЧасти(т).Идентификатор;
				Если ТекДок.ПолучитьАтрибут(ИдДок).Выбран() = 1 Тогда
					Стр ="";
					Если СсылкиНаДокументы.НайтиЗначение(ТекДок.ПолучитьАтрибут(ИдДок), Стр, "ДокументИБ") = 0 Тогда
						ТекДок.УстановитьАтрибут(ИдДок,"");
						НужноЗаписывать = 1;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноЗаписывать = 1 Тогда
			ТекДок.Записать();
		КонецЕсли;

	КонецЦикла;	

КонецПроцедуры //ПодготовкаСпискаСсылок()

//******************************************************************************
// АнализОперативныхОстатков() 
//
// Параметры: 
//  нет
//
// Вызывается из процедуры "Выполнить":
//
// Описание: 
//  выполняет анализ итогов оперативного учета и осуществляет ввод начальных остатков в регистры на дату свертки
//
Процедура АнализОперативныхОстатков()
	
	Перем Запрос,ТекстЗапроса,СписокРег,ИдентРег,ТекВидРегистра,ТекВидДокумента;
	Перем ИдентИзмерения,ИдентРесурса,ИдентРеквизита,СтрокаВЗапрос,ТабОстатков;

	СчетчикДокументов = 0;

	// Определяем группы регистров
	ГруппыРегистров = СоздатьОбъект("СписокЗначений");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковКассаБанкПодотчетник","ПодотчетныеЛица");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковКассаБанкПодотчетник","Банк");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковКассаБанкПодотчетник","Касса");

	ГруппыРегистров.ДобавитьЗначение("ВводОстатковПокупателя","Покупатели");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковПокупателя","КнигаПродаж");

	ГруппыРегистров.ДобавитьЗначение("ВводОстатковПоставщика","Поставщики");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковПоставщика","КнигаПокупок");
	
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковТМЦ","ПартииОтданные");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковТМЦ","РеализованныйТовар");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковТМЦ","ПартииНаличие");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковТМЦ","ОстаткиТМЦ");
	
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковЗаказыЗаявки","Заказы");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковЗаказыЗаявки","Заявки");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковЗаказыЗаявки","ЗаказыЗаявки");
	ГруппыРегистров.ДобавитьЗначение("ВводОстатковЗаказыЗаявки","РезервыТМЦ");

	// Определяем Виды операций
	ВидыОпераций = СоздатьОбъект("СписокЗначений");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоПодотчЛицам,"ПодотчетныеЛица");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоБанкСчетам,"Банк");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПоКассам,"Касса");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателяНам,"Покупатели");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиКнигиПродаж,"КнигаПродаж");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПоставщикаНам,"Поставщики");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиКнигиПокупок,"КнигаПокупок");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиПереданныхТМЦ,"ПартииОтданные");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРеализованныхТоваров,"РеализованныйТовар");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦПартии,"ПартииНаличие");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиТМЦБезПартий,"ОстаткиТМЦ");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаказов,"Заказы");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаявок,"Заявки");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиЗаказовЗаявок,"ЗаказыЗаявки");
	ВидыОпераций.ДобавитьЗначение(Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиРезервов,"РезервыТМЦ");

	Для т = 1 По ГруппыРегистров.РазмерСписка() Цикл  //ЦИКЛ ПО ГРУППЕ РЕГИСТРОВ

		ТекВидРегистра  = "";
		ТекВидДокумента = ГруппыРегистров.ПолучитьЗначение(т,ТекВидРегистра);
		СтрокаГруппировок = "";

		// определение списка ключевых реквизитов документов
		
		КлючевыеРеквизиты = СоздатьОбъект("СписокЗначений");

		КлючевыеРеквизиты.ДобавитьЗначение("","Фирма");

		КлючевыеРеквизиты.ДобавитьЗначение(ВидыОпераций.Получить(ТекВидРегистра),"ВидОперации");

		Если (ТекВидДокумента = "ВводОстатковПокупателя")
		 или (ТекВидДокумента = "ВводОстатковПоставщика") Тогда
			Если (ТекВидРегистра = "Покупатели")
			 или (ТекВидРегистра = "Поставщики")
			 или (ТекВидРегистра = "КнигаПродаж") Тогда
				КлючевыеРеквизиты.ДобавитьЗначение("","Контрагент");
				КлючевыеРеквизиты.ДобавитьЗначение("","Договор");
			КонецЕсли;
		ИначеЕсли (ТекВидДокумента = "ВводОстатковТМЦ")
				и (ТекВидРегистра  = "ОстаткиТМЦ") Тогда
			КлючевыеРеквизиты.ДобавитьЗначение("","Склад");
		КонецЕсли;

		// обрабатываем измерения регистра
        ПеременныеЗапроса = СоздатьОбъект("СписокЗначений");
		
		Для к = 1 По Метаданные.Регистр(ТекВидРегистра).Измерение() Цикл

			ИдентИзмерения   = Метаданные.Регистр(ТекВидРегистра).Измерение(к).Идентификатор;
			СтрокаВЗапрос =ПеременныеЗапроса.Получить(ИдентИзмерения);
			Если ПустоеЗначение(СтрокаВЗапрос)=0 Тогда
				// уже есть переменные в запросе с таким идентификатором
				СтрокаВЗапрос = СтрокаВЗапрос+", "+"Регистр."+ТекВидРегистра+"."+ИдентИзмерения; 
			Иначе
				// еще нет переменных в запросе с таким идентификатором
				СтрокаВЗапрос = "Регистр."+ТекВидРегистра+"."+ИдентИзмерения; 
			КонецЕсли;

			ПеременныеЗапроса.Установить(ИдентИзмерения,СтрокаВЗапрос);
			СтрокаГруппировок = СтрокаГруппировок + "Группировка " + ИдентИзмерения + ";";
		КонецЦикла;
				
		// обрабатываем ресурсы регистра

		Для к = 1 По Метаданные.Регистр(ТекВидРегистра).Ресурс() Цикл

			ИдентРесурса   = Метаданные.Регистр(ТекВидРегистра).Ресурс(к).Идентификатор;
			СтрокаВЗапрос =ПеременныеЗапроса.Получить(ИдентРесурса);
			Если ПустоеЗначение(СтрокаВЗапрос)=0 Тогда
				// уже есть переменные в запросе с таким идентификатором
				СтрокаВЗапрос = СтрокаВЗапрос+", "+"Регистр."+ТекВидРегистра+"."+ИдентРесурса; 
			Иначе
				// еще нет переменных в запросе с таким идентификатором
				СтрокаВЗапрос = "Регистр."+ТекВидРегистра+"."+ИдентРесурса; 
			КонецЕсли;

			ПеременныеЗапроса.Установить(ИдентРесурса,СтрокаВЗапрос);
			
			// для ресурсов устанавливаем пометку в списке
			ПеременныеЗапроса.Пометка(ПеременныеЗапроса.НайтиЗначение(СтрокаВЗапрос),1);
		КонецЦикла;
				
		// Формируем строку запроса к оперативным итогам
		ТекстЗапроса = "Период с ДатаСвертки по ДатаСвертки;";

		// Формируем описания переменных
		Для к = 1 По ПеременныеЗапроса.РазмерСписка() Цикл
			ИдентПеременной = "";
			СтрокаВЗапрос =ПеременныеЗапроса.ПолучитьЗначение(к,ИдентПеременной);
			ТекстЗапроса = ТекстЗапроса + ИдентПеременной + "=" + СтрокаВЗапрос +";";
		КонецЦикла;
			
		// Формируем описания функций
		Для к = 1 По ПеременныеЗапроса.РазмерСписка() Цикл
			Если ПеременныеЗапроса.Пометка(к) = 1 Тогда

				// Это ресурс и нужно сконструировать описание функций на получение остатка по регистру
				ИдентПеременной = "";
				ПеременныеЗапроса.ПолучитьЗначение(к,ИдентПеременной);
				ТекстЗапроса = ТекстЗапроса + "Функция " + СокрЛП(ИдентПеременной) + "КонОст" + " = " + 
								"КонОст(" + ИдентПеременной + ");";
 			КонецЕсли;
		КонецЦикла;

		// Добавляем значения группировок 
		ТекстЗапроса = ТекстЗапроса + СтрокаГруппировок; 

		// Выполняем запрос к Оперативным итогам
		Запрос = СоздатьОбъект("Запрос");

		// Если ошибка в запросе, то выход из процедуры
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
			Возврат;
		КонецЕсли;
		ТабОстатков = СоздатьОбъект("ТаблицаЗначений");
		Запрос.Выгрузить(ТабОстатков,1,0);

		// В таблице остатков, для правильной работы процедуры "СоздатьДокументыВводаОстатковВРегистры"
		// необходимо наличие колонок напрямую соответствующих ключевым реквизитам
		
		СписокПроизводныхКолонок = СоздатьОбъект("СписокЗначений");
		
		Для к = 1 По КлючевыеРеквизиты.РазмерСписка() Цикл
			Ключ = "";
			КлючевыеРеквизиты.ПолучитьЗначение(к,Ключ);
			Если ЕстьКолонкаВТаблице(Ключ,ТабОстатков) = 0 Тогда
				
				// Если мы не можем получить значение какой-то ключевой колонки непосредственно
				// из измерений остатков регистра - будем называть ее производной
				ТабОстатков.НоваяКолонка(Ключ);
				СписокПроизводныхКолонок.ДобавитьЗначение(Ключ);
				
			КонецЕсли;
		КонецЦикла;

		Если СписокПроизводныхКолонок.РазмерСписка()>0 Тогда
			ТабОстатков.ВыбратьСтроки();
			Пока ТабОстатков.ПолучитьСтроку() = 1 Цикл
				Для к = 1 По СписокПроизводныхКолонок.РазмерСписка() Цикл

					// Пытаемся определить значения производных колонок, если не удается - тогда
					// оставляем их пустыми
					
					ПроизводнаяКолонка = СписокПроизводныхКолонок.ПолучитьЗначение(к);
					Если ((ПроизводнаяКолонка = "Контрагент")
					 или  (ПроизводнаяКолонка = "Фирма"))
					   и  (ЕстьКолонкаВТаблице("КредДокумент",ТабОстатков) <> 0) Тогда

					   	// Определяем Контрагента при работе с регистрами "Покупатели" и "Поставщики"
					   	// или определяем Фирму при работе с регистрами "КнигаПродаж" и "КнигаПокупок"

						Если глЕстьРеквизитШапки(ПроизводнаяКолонка,ТабОстатков.КредДокумент.Вид()) = 1 Тогда
							Значение = ТабОстатков.КредДокумент.ПолучитьАтрибут(ПроизводнаяКолонка);
							ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,Значение);    

						ИначеЕсли (ПроизводнаяКолонка = "Контрагент")
								и (ЕстьКолонкаВТаблице("Договор",ТабОстатков) <> 0) Тогда
							// Если не удалось определить Контрагента из одноименного реквизита документа
							// указанного в поле КредДокумент, пытаемся определить его по реквизиту Договор
							Значение = ТабОстатков.Договор.Владелец;
							ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,Значение);    

						КонецЕсли;    
					ИначеЕсли (ПроизводнаяКолонка = "Фирма")
						    и ((ЕстьКолонкаВТаблице("ЗаявкаПокупателя",ТабОстатков) <> 0) 
                          или  (ЕстьКолонкаВТаблице("ЗаказПоставщику",ТабОстатков)  <> 0)) Тогда

						// Определяем фирму для ввода остатков в регистр "ЗаказыЗаявки"
						  	
						Значение = ТабОстатков.ЗаявкаПокупателя.ПолучитьАтрибут(ПроизводнаяКолонка);
						Если ПустоеЗначение(Значение) = 0 Тогда
							ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,Значение);    
						Иначе
							Значение = ТабОстатков.ЗаказПоставщику.ПолучитьАтрибут(ПроизводнаяКолонка);
							ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,Значение);    
						КонецЕсли;
					ИначеЕсли ПроизводнаяКолонка = "ВидОперации" Тогда
						Если (ТекВидРегистра = "Покупатели")
						 или (ТекВидРегистра = "Поставщики") Тогда
							
						 	// Анализ ситуации когда долг покупателя или поставщика в регистре является отрицательным
						 	// в этом случае нужно инвертировать знак сумм и скорректировать вид операции
						 	
							КонтрольнаяСумма = ТабОстатков.ПолучитьЗначение(ТабОстатков.НомерСтроки,"СуммаВал") +
											   ТабОстатков.ПолучитьЗначение(ТабОстатков.НомерСтроки,"СуммаУпр")	+
											   ТабОстатков.ПолучитьЗначение(ТабОстатков.НомерСтроки,"СуммаРуб");

							Если КонтрольнаяСумма < 0  Тогда
								Если ТекВидРегистра = "Покупатели" Тогда
									НовыйВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПокупателю;
								ИначеЕсли ТекВидРегистра = "Поставщики" Тогда
									НовыйВидОперации = Перечисление.ВидыОперацийПоВводуОстатков.ОстаткиДолгаПоставщику;
								КонецЕсли;
								ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,НовыйВидОперации);    
								х = 0;
								Для х = 1 По Метаданные.Регистр(ТекВидРегистра).Ресурс() Цикл
									// Инверсия знаков в таблице
									ИдКол = Метаданные.Регистр(ТекВидРегистра).Ресурс(х).Идентификатор;
									ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ИдКол,-1*ТабОстатков.ПолучитьЗначение(ТабОстатков.НомерСтроки,ИдКол));
								КонецЦикла;
							Иначе
								ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,КлючевыеРеквизиты.Получить(ПроизводнаяКолонка));    
							КонецЕсли;
                        
						Иначе
							ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ПроизводнаяКолонка,КлючевыеРеквизиты.Получить(ПроизводнаяКолонка));    
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если (ТекВидРегистра = "КнигаПокупок") Тогда
							
					// Для отрцательных остатков необходима инверсия знаков, это требование документа
					// которым будут введены начальные остатки
					Для х = 1 По Метаданные.Регистр(ТекВидРегистра).Ресурс() Цикл
						// Инверсия знаков в таблице
						ИдКол = Метаданные.Регистр(ТекВидРегистра).Ресурс(х).Идентификатор;
						ТабЗн = ТабОстатков.ПолучитьЗначение(ТабОстатков.НомерСтроки,ИдКол);
						Если ТабЗн > 0  Тогда
							Сообщить("Ошибочная ситуация! В регистре ""КнигаПокупок"" существуют положительные остатки.");
						КонецЕсли;
						ТабОстатков.УстановитьЗначение(ТабОстатков.НомерСтроки,ИдКол,-1*ТабЗн);
					КонецЦикла;
					
				КонецЕсли;
						
			КонецЦикла;
		КонецЕсли;
		
		СоздатьДокументыВводаОстатковВРегистры(ТекВидДокумента,ТабОстатков,КлючевыеРеквизиты);
		
	КонецЦикла;

КонецПроцедуры // АнализОперативныхОстатков()

//******************************************************************************
// ВыгрузкаЧерезXML(Объект) 
//
// Параметры: 
//  Объект - объект текущей ИБ, который нужно выгрузить в архивную ИБ
//
// Вызывается из процедуры "СверткаДокументов":
//
// Описание: 
//  Загрузка правил конвертации в объект гПравила
//
Функция ЗагрузитьПравилаКонвертации()
	    
	Если ПустоеЗначение(гПравила) = 0 Тогда	Возврат(1) КонецЕсли;
	
	
	Состояние("Выполняется загрузка и проверка файла правил конвертации...");
	                                                         
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	
	Попытка
		гПравила.Загрузить(ФормИмяФайлаПравил);
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()

//******************************************************************************
// ВыгрузкаЧерезXML(Объект) 
//
// Параметры: 
//  Нет
//
// Вызывается из процедуры "СверткаДокументов":
//
// Описание: 
//  Выгрузка с документов с ДатаПоследнейСвертки по ДатаСвертки в аврхивную ИБ с использованием XML
//
Процедура ВыгрузкаЧерезXML(Рез)

	Рез = ЗагрузитьПравилаКонвертации();

	Если Рез = 0  Тогда
		Возврат;    
	КонецЕсли;
	
	Запрос		=	"//Правило[(ОбъектИсточник/@Тип = ""Документ"")]";
	Выборка = гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		Правило	= Выборка.ПолучитьУзел(Сч);
		Правило.УстановитьАтрибут("ПоСсылкам", 0);
	КонецЦикла;

	Запрос		=	"//ПараметрыЗагрузки";
	Выборка = гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		Параметры	=	Выборка.ПолучитьУзел(Сч);
		Если Найти(НРег(Параметры.ПолучитьАтрибут("Имя")), "справочник") > 0 Тогда		//	это параметры обмена для справочников
			Параметры.УстановитьАтрибут("ЗамещатьНайденные", 1);
		КонецЕсли;
	КонецЦикла;
	
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.Установить("ИмяФайлаПравил",			ФормИмяФайлаПравил);
	СписокПараметров.Установить("ИмяФайлаДанных",			ФормИмяФайлаДанных);
	СписокПараметров.Установить("ВыгружатьТолькоУказанные",	0);
	СписокПараметров.Установить("ВключатьПравилаВФайл",		1);
	СписокПараметров.Установить("НеОбрабатыватьПроведение",	0);
	СписокПараметров.Установить("БезОткрытияФормы",			1);
	СписокПараметров.Установить("ПравилаКонвертации",		гПравила);
	СписокПараметров.Установить("ФормДатаНач",				ДатаПоследнейСвертки+1);
	СписокПараметров.Установить("ФормДатаКон",				ДатаСвертки);
	
	Если Найти(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, ".ert") > 0 Тогда
		ОткрытьФормуМодально("Отчет", СписокПараметров, гПутьОбъекта_УниверсальнаяОбработкаВыгрузки);
	Иначе
		ОткрытьФормуМодально(гПутьОбъекта_УниверсальнаяОбработкаВыгрузки, СписокПараметров);
	КонецЕсли;
	
КонецПроцедуры // ВыгрузкаЧерезXML()

//******************************************************************************
// УдалениеДокументов(СворачиваемыеДокументы) 
//
// Параметры: 
//  СворачиваемыеДокументы - "Таблица значений", содержит список документов, которые надо снять 
//  с проведения и удалить или свернуть
//
// Вызывается из процедуры "Выполнить":
//
// Описание: 
//  Удалет документы или их табличные части, в зависимости от содержания колонки "Операция" в таблице
//  сворачиваемые документы 1 - пометка на удаление, 2 - удаление только табличной части, 
//  иначе - ничего не делать
//
Процедура УдалениеДокументов(СворачиваемыеДокументы)
    
	Перем Док;
	
	Док = СоздатьОбъект("Документ");
	
	СчетчикДокументов = 0;
	СчетчикУдаленныхДокументов = 0;
	
	СворачиваемыеДокументы.ВыбратьСтроки();
	Пока СворачиваемыеДокументы.ПолучитьСтроку() = 1 Цикл
		Если СворачиваемыеДокументы.Документ.Выбран()=1 Тогда
            
			Если Док.НайтиДокумент(СворачиваемыеДокументы.Документ) <> 1 Тогда
				Продолжить;
			КонецЕсли;

			Если Док.Проведен()=1 Тогда
				Док.СделатьНеПроведенным();
			КонецЕсли;

			Если СворачиваемыеДокументы.Операция = 1 Тогда

				// удаляем документ из ИБ
				Док.Удалить(0);

				СчетчикУдаленныхДокументов = СчетчикУдаленныхДокументов + 1;

			ИначеЕсли СворачиваемыеДокументы.Операция = 2 Тогда

				// удаляем только табличную часть документа не удаляя его самого т.к. на него есть ссылки в объектах
				// и эти ссылки могут понадобится для операций с ИБ после даты свертки

				Если (Док.КоличествоСтрок() > 0) Тогда
					Док.УдалитьСтроки();
				КонецЕсли;

				Если ГлЕстьРеквизитШапки("ФлагСвертки",Док.Вид())=1  Тогда
					Док.ФлагСвертки = 1;                
				КонецЕсли;
				Док.Комментарий = "Свернут обработкой СверткаБазы " + ТекущаяДата();
				Док.Записать();

				СчетчикДокументов = СчетчикДокументов + 1;

			КонецЕсли;

            Состояние("Документов свернуто: "+Формат(СчетчикДокументов,"Ч5")+" документов удалено: "+Формат(СчетчикУдаленныхДокументов,"Ч5"));
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры  // УдалениеДокументов(СворачиваемыеДокументы)

//******************************************************************************
// ОпределениеДатыПоследнейСвертки(ДтСвертки) 
//
// Параметры: 
//  ДтСвертки - дата последней выполненной операции свертки
//
// Вызывается из процедуры "ПриОткрытии":
//
// Описание: 
//  Определяет дату, когда в последний раз выполнялась свертка базы
//
Процедура ОпределениеДатыПоследнейСвертки(ДтСвертки)

	ДтСвертки = ПолучитьПустоеЗначение("Дата");
	
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|ОбрабатыватьДокументы все;
	|Обрабатывать НеПомеченныеНаУдаление;
	|ДокОстатков = Документ.ВводОстатковКассаБанкПодотчетник.ТекущийДокумент, Документ.ВводОстатковПокупателя.ТекущийДокумент, Документ.ВводОстатковПоставщика.ТекущийДокумент, Документ.ВводОстатковТМЦ.ТекущийДокумент, Документ.ВводОстатковЗаказыЗаявки.ТекущийДокумент;
	|ФлагСвертки = Документ.ВводОстатковКассаБанкПодотчетник.ФлагСвертки, Документ.ВводОстатковПокупателя.ФлагСвертки, Документ.ВводОстатковПоставщика.ФлагСвертки, Документ.ВводОстатковТМЦ.ФлагСвертки, Документ.ВводОстатковЗаказыЗаявки.ФлагСвертки;
	|Группировка ДокОстатков упорядочить по ДокОстатков.ДатаДок;
	|Условие(ФлагСвертки = 1);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Если Запрос.Группировка(1,-1) = 1 Тогда
		ДтСвертки = Запрос.ДокОстатков.ДатаДок;
	КонецЕсли;
	
КонецПроцедуры  // ОпределениеДатыПоследнейСвертки()

//******************************************************************************
// ПриВводеДатыСвертки() 
//
// Параметры: 
//  нет
//
// Вызывается из формулы реквизита диалога "ДатаСвертки"
//
// Описание: 
//  Определяет допустимое значение реквизита "ДатаСвертки"
//
Процедура ПриВводеДатыСвертки()

	Если ПустоеЗначение(ДатаПоследнейСвертки)=0 Тогда
		Если ДатаСвертки < (ДатаПоследнейСвертки + 1) Тогда
		    Сообщить("Нужно указывать дату свертки больше даты предыдущей свертки!");
			ДатаСвертки = ДатаПоследнейСвертки + 1;
		КонецЕсли;    
	КонецЕсли;
	
КонецПроцедуры  // ПриВводеДатыСвертки()

//******************************************************************************
// СверткаДокументов(СписокВидовДок) 
//
// Параметры: 
//  СписокВидовДок - "Список значений", содержащий виды документов базы подлежащих свертке
//
// Вызывается из процедуры "Выполнить":
//
// Описание: 
//  Делает проход по базе, определяет необходимость свертки документов
//  и формирует таблицу "СворачиваемыеДокументы" из документов подлежащих удалению
//
Процедура СверткаДокументов(СписокВидовДок)

	СворачиваемыеДокументы.УдалитьСтроки();

	Док = СоздатьОбъект("Документ");
	
	Док.ВыбратьДокументы(ДатаПоследнейСвертки,ДатаСвертки);
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если СписокВидовДок.Получить(Док.Вид()) = 1 Тогда

			Если СписокСозданныхДок.НайтиЗначение(Док.ТекущийДокумент()) <> 0 Тогда

				// Документ создан самой обработкой в текущем сеансе, его не трогаем
 				Продолжить;				
			КонецЕсли;
			
			// Контроль ссылочной целостности

			Стр = "";

			Если СсылкиНаДокументы.НайтиЗначение(Док.ТекущийДокумент(),Стр,"") = 1 Тогда
				Если (Найти(Док.Комментарий,"СверткаБазы") = 0) Тогда

					// Документ еще не выгружался из текущей ИБ и поэтому подлежит выгрузке
					// Выгрузка документа выполняется только один раз! При возможных последующих
					// операциях свертки документ выгружаться не будет

					СворачиваемыеДокументы.НоваяСтрока();
					СворачиваемыеДокументы.ВидДокумента = Док.Вид();
					СворачиваемыеДокументы.Документ = Док.ТекущийДокумент();
					СворачиваемыеДокументы.Операция = 2;
					
				КонецЕсли;
			Иначе
				СворачиваемыеДокументы.НоваяСтрока();
				СворачиваемыеДокументы.ВидДокумента = Док.Вид();
				СворачиваемыеДокументы.Документ = Док.ТекущийДокумент();
				СворачиваемыеДокументы.Операция = 1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //СверткаДокументов()

//*******************************************
Процедура Выполнить()
    
	ДатаГраницыБудущего = Макс( КонКвартала(ТекущаяДата()), ДатаСвертки+1);

	Если ПустоеЗначение(ДатаСвертки)=1 Тогда
		Сообщить("Не указана дата свертки!");
		Возврат;
	КонецЕсли;
	
	Если ДатаСвертки > ПолучитьДатуТА() Тогда
		Сообщить("Нельзя выполнять свертку на дату большую точки актуальности!");
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(ДатаПоследнейСвертки) = 0 Тогда
		Если ДатаСвертки <= ДатаПоследнейСвертки Тогда
			Сообщить("На этот период свертка уже выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ПроверитьИсходныеДанные("Начало")	=	0 Тогда	Возврат	КонецЕсли;

	// Перед началом работы напоминаем пользователю о необходимости создать резервнйю копию

	Если Вопрос("Внимание!!! Свертка базы - необратимая операция. В случае неудачного ее завершения,
				|единственный способ поправить положение - восстановление из резервной копии.
				|Если у вас нет резервной копии, рекомендуем обязательно сделать ее!
				|
				|Прервать дальнейшую работу для создания резервной копии ИБ?","Да+Нет") = "Да" Тогда
		Возврат;    
	КонецЕсли;
						
	Сообщение1 = "Внимание идет свертка!";
	Форма.Текст1.Заголовок(Сообщение1);
	
	Сообщение2 = "Выгрузка данных в файл";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	Рез = 0;
	Если ФлагВыгрузкиВАрхив = 1 Тогда
		ВыгрузкаЧерезXML(Рез);
	Иначе
		Рез = 1;		
	КонецЕсли;
	
	Если Рез = 0 Тогда

		Сообщение1 = "Свертка незакончена!";
		Форма.Текст1.Заголовок(Сообщение1);
		
		Сообщение2 = "Не указан файл правил обмена";
		Форма.Текст2.Заголовок(Сообщение2);
		Форма.Обновить();

		Возврат;

	КонецЕсли;

	// Список документов, ссылки на которые присутствуют в остатках и объектах ИБ после даты свертки
	СсылкиНаДокументы  = СоздатьОбъект("ТаблицаЗначений");
	СсылкиНаДокументы.НоваяКолонка("ДокументИБ");          // Документ периода свертки
	СсылкиНаДокументы.НоваяКолонка("ОбъектИБ");            // Объект ИБ содержащий ссылку на документ периода свертки
	СсылкиНаДокументы.НоваяКолонка("Атрибут");             // Реквизит объекта ИБ, который непосредственно содержит ссылку на документ

	// Список документов созданных в ходе работы данной обработки
	СписокСозданныхДок = СоздатьОбъект("СписокЗначений");

	// Документы подлежащие свертке в текущей ИБ
	СворачиваемыеДокументы = СоздатьОбъект("ТаблицаЗначений");
	СворачиваемыеДокументы.НоваяКолонка("ВидДокумента");
	СворачиваемыеДокументы.НоваяКолонка("Документ","Документ");
	СворачиваемыеДокументы.НоваяКолонка("Операция","Число",1,0);  // 1 - пометка на удаление, 2 - удаление табличной части
	
	Сообщение2 = "Проверка ссылок на объекты";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	ПодготовкаСпискаСсылок(СсылкиНаДокументы);

	Сообщение2 = "Анализ остатков регистров";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	АнализОперативныхОстатков();

	СписокВидовДок = СоздатьОбъект("СписокЗначений");
	Для т = 1 По Метаданные.Документ() Цикл
			
		Тест = ""+Метаданные.Документ(т).БухгалтерскийУчет+Метаданные.Документ(т).ОперативныйУчет+Метаданные.Документ(т).Расчет;
		Если (Тест = "010")
		 или (Тест = "000") Тогда
                        
		//Сворачиваем только оперативные документы или документы вообще не имеющие признака учета
	 	
			СписокВидовДок.ДобавитьЗначение(1,Метаданные.Документ(т).Идентификатор);

		КонецЕсли;
	КонецЦикла;

	Сообщение2 = "Создание списка документов";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	СверткаДокументов(СписокВидовДок);

	Сообщение2 = "Удаление документов из ИБ";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	УдалениеДокументов(СворачиваемыеДокументы);
	
	Сообщение1 = "Свертка базы закончена!";
	Форма.Текст1.Заголовок(Сообщение1);
	Сообщение2 = "";
	Форма.Текст2.Заголовок(Сообщение2);
	Форма.Обновить();

	Если ФлагЗапретаРедактирования = 1 Тогда

		// Изменим значение даты запрета редактирования
		Константа.УстановитьАтрибут("ДатаЗапретаРедактирования",ДатаСвертки);
		
	КонецЕсли;

	ДатаПоследнейСвертки = ДатаСвертки;
	ДатаСвертки = ДатаПоследнейСвертки + 1;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()

	ФлагЗапретаРедактирования = 1;
	ФлагВыгрузкиВАрхив = 1;

	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	Если Число(гXMLАнализатор.ВерсияАнализатора) < 2 Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;

	ОпределениеДатыПоследнейСвертки(ДатаПоследнейСвертки);

	ДатаСвертки = Макс(ТекущаяДата(),Дата(ДатаПоследнейСвертки)+1);
	
	гПравила = "";

	УправлениеДиалогом();

КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если		ИдЭлементаДиалога = "ФормИмяФайлаПравил"	Тогда
		
		ВыборФайла(ФормИмяФайлаПравил, "xml");
		
	ИначеЕсли	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
////////////////////////////////////////////////////////////////////////////////////////////////////
//	Поиск внешней компоненты V7Plus.dll
	
СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);

гПутьОбъекта_КомпонентаV7plus				=	НайтиПервыйСуществующийФайл(СписокВозможныхМест); 

////////////////////////////////////////////////////////////////////////////////////////////////////
//	Поиск исполняющей обработки

Если Метаданные.Обработка("ВыгрузкаДанных").Выбран() = 1 Тогда
	гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	"Обработка.ВыгрузкаДанных";
Иначе
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"CDExport.ert"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"CDExport.ert"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"CDExport.ert"	);
	
	гПутьОбъекта_УниверсальнаяОбработкаВыгрузки	=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
КонецЕсли;
	                     
////////////////////////////////////////////////////////////////////////////////////////////////////
//	Поиск правил выгрузки данных (проводок, документов и др.)
	
СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"ExtForms\RTr92_Tr.xml"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"RTr92_Tr.xml"	);
СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"RTr92_Tr.xml"	);
	
ФормИмяФайлаПравил			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
Если ПустоеЗначение(ФормИмяФайлаПравил) = 1 Тогда
	Предупреждение("Не найден файл правил конвертации: RTr92_Tr.xml
	                |
					|Следует разместить данный файл в каталоге
					|ExtForms информационной базы!");
	СтатусВозврата(0);
КонецЕсли;
