////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем КонтДок, СписокДок, ИсключенияВшапке, ИсключенияВТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ДобавитьДок(СписДок, ВидДок)
//
// Параметры: 
//  СписДок - список значений видов документов
//  ВидДок  - добавляемая строка вида документа
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет строку вида документа в список документов, в которые собираемся копировать 
//
Процедура ДобавитьДок(СписДок, ВидДок)
	СписДок.ДобавитьЗначение(ВидДок,Метаданные.Документ(ВидДок).Представление());
КонецПроцедуры // ДобавитьДок()

//******************************************************************************
// СформироватьСписокДок()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список документов, которые можем заполнять копированием
//
Процедура СформироватьСписокДок()
	
СписокДок = СоздатьОбъект("СписокЗначений");

// Заполним список видов документов, которые можем копировать
ДобавитьДок(СписокДок, "ВозвратОтПокупателя");	
ДобавитьДок(СписокДок, "ВозвратПоставщику");	
ДобавитьДок(СписокДок, "ЗаявкаПокупателя");	
ДобавитьДок(СписокДок, "ЗаказПоставщику");	
ДобавитьДок(СписокДок, "ОприходованиеТМЦ");	
ДобавитьДок(СписокДок, "ОтчетККМ");	
ДобавитьДок(СписокДок, "ОтчетКомиссионера");	
ДобавитьДок(СписокДок, "ОтчетКомитенту");	
ДобавитьДок(СписокДок, "ПеремещениеТМЦ");	
ДобавитьДок(СписокДок, "ПоступлениеТМЦ");	
ДобавитьДок(СписокДок, "ПоступлениеТМЦРозница");	
ДобавитьДок(СписокДок, "ПоступлениеТМЦИмпорт");	
ДобавитьДок(СписокДок, "Реализация");	
ДобавитьДок(СписокДок, "РеализацияРозница");	
ДобавитьДок(СписокДок, "СписаниеТМЦ");	
ДобавитьДок(СписокДок, "СтрокаАвансОтчетаТМЦ");	

// Составим список реквизитов, которые должны заполняться другими значениями,
// чем в копируемом документе, для каждого из обрабатываемых видов документов

// Исключения в шапке
ИсключенияВшапке = СоздатьОбъект("ТаблицаЗначений"); 

ИсключенияВшапке.ВставитьКолонку("ВидДок");	
ИсключенияВшапке.ВставитьКолонку("КодОперации");	
ИсключенияВшапке.ВставитьКолонку("ВидОперации");	
ИсключенияВшапке.ВставитьКолонку("ДокОснование");	
ИсключенияВшапке.ВставитьКолонку("ДатаОплаты");	
ИсключенияВшапке.ВставитьКолонку("ДатаОтгрузки");	
ИсключенияВшапке.ВставитьКолонку("УчитыватьЕНВД");	
ИсключенияВшапке.ВставитьКолонку("ДатаДокВходящий");	
ИсключенияВшапке.ВставитьКолонку("Касса");	
ИсключенияВшапке.ВставитьКолонку("Автор");	
ИсключенияВшапке.ВставитьКолонку("СпособРасчета");	
ИсключенияВшапке.ВставитьКолонку("Процент");	
ИсключенияВшапке.ВставитьКолонку("РежимВыбораТМЦ");	
ИсключенияВшапке.ВставитьКолонку("СуммаВклНДС");	
ИсключенияВшапке.ВставитьКолонку("СуммаВклНП");	

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ВозвратОтПокупателя";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.ВозвратОтПокупателя; 
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ВозвратПоставщику";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.ВозвратПоставщику; 
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ЗаявкаПокупателя";
ИсключенияВшапке.ВидОперации         = Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаОтгрузки        = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ЗаказПоставщику";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаОтгрузки        = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ОприходованиеТМЦ";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ОтчетККМ";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.Касса               = глЗначениеПоУмолчанию("ОсновнаяКасса");   
ИсключенияВшапке.УчитыватьЕНВД       = 0;  
ИсключенияВшапке.Автор               = глПользователь;  
ИсключенияВшапке.СуммаВклНДС         = 1;  
ИсключенияВшапке.СуммаВклНП          = 1;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ОтчетКомиссионера";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаДокВходящий     = РабочаяДата();
ИсключенияВшапке.Автор               = глПользователь;  
ИсключенияВшапке.СпособРасчета       = Перечисление.СпособыРасчетаВознаграждения.ПроцентОтПрибыли;
ИсключенияВшапке.Процент             = 100;


ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ОтчетКомитенту";
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  
ИсключенияВшапке.РежимВыбораТМЦ      = 2;

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ПеремещениеТМЦ";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ПоступлениеТМЦ";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.Закупка; 
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаДокВходящий     = РабочаяДата();
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ПоступлениеТМЦРозница";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.ЗакупкаРозница; 
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаДокВходящий     = РабочаяДата();
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "ПоступлениеТМЦИмпорт";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.ДатаДокВходящий     = РабочаяДата();
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "Реализация";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.Продажа; 
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();  
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "РеализацияРозница";
ИсключенияВшапке.КодОперации         = Перечисление.КодыОпераций.РозничнаяПродажа; 
ИсключенияВшапке.ВидОперации         = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам;
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.ДатаОплаты          = РабочаяДата();
ИсключенияВшапке.Автор               = глПользователь;
ИсключенияВшапке.СуммаВклНДС         = 1;  
ИсключенияВшапке.СуммаВклНП          = 1;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "СписаниеТМЦ";
ИсключенияВшапке.ДокОснование        = ПолучитьПустоеЗначение("Документ");
ИсключенияВшапке.Автор               = глПользователь;  

ИсключенияВшапке.НоваяСтрока();
ИсключенияВшапке.ВидДок              = "СтрокаАвансОтчетаТМЦ";
ИсключенияВшапке.Автор               = глПользователь;  

// исключения в табличной части
ИсключенияВТЧ = СоздатьОбъект("ТаблицаЗначений");

ИсключенияВТЧ.ВставитьКолонку("ВидДок");	
ИсключенияВТЧ.ВставитьКолонку("ВидСтатус");	
ИсключенияВТЧ.ВставитьКолонку("ВидТМЦ");	
ИсключенияВТЧ.ВставитьКолонку("Партия");	
ИсключенияВТЧ.ВставитьКолонку("СтавкаПошлины");	

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ВозвратОтПокупателя";
ИсключенияВТЧ.ВидСтатус        = Перечисление.ВидыТМЦ.Товар; 

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ВозвратПоставщику";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ОприходованиеТМЦ";
ИсключенияВТЧ.ВидТМЦ           = Перечисление.ВидыТМЦ.Товар; 

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ОтчетККМ";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ОтчетКомиссионера";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ОтчетКомитенту";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ПеремещениеТМЦ";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ПоступлениеТМЦ";
ИсключенияВТЧ.ВидТМЦ           = Перечисление.ВидыТМЦ.Товар; 

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ПоступлениеТМЦРозница";
ИсключенияВТЧ.ВидТМЦ           = Перечисление.ВидыТМЦ.Товар; 

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "ПоступлениеТМЦИмпорт";
ИсключенияВТЧ.ВидТМЦ           = Перечисление.ВидыТМЦ.Товар; 
ИсключенияВТЧ.СтавкаПошлины    = ВосстановитьЗначение("СтавкаПошлиныИмпорта");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "Реализация";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");
ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "РеализацияРозница";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "СписаниеТМЦ";
ИсключенияВТЧ.Партия           = ПолучитьПустоеЗначение("Справочник.Партии");

ИсключенияВТЧ.НоваяСтрока();
ИсключенияВТЧ.ВидДок           = "СтрокаАвансОтчетаТМЦ";
ИсключенияВТЧ.ВидТМЦ           = Перечисление.ВидыТМЦ.Товар; 

КонецПроцедуры // СформироватьСписокДок()


//******************************************************************************
// ЗаполнитьШапку(КонтДок, ДокОсн)
//
// Параметры: 
//  КонтДок - контекст нового документа
//  ДокОсн  - документ основание
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет шапку документа
//
Процедура ЗаполнитьШапку(КонтДок, ДокОсн)
	
	Перем НомерСтроки;
	
	// Вначале просто копируем реквизиты
	ВидДок = КонтДок.Вид();
	КолОбъектов = Метаданные.Документ(ВидДок).РеквизитШапки();
	Для Номер = 1 По КолОбъектов Цикл
		Объект = Метаданные.Документ(ВидДок).РеквизитШапки(Номер);   
		// Имеет смысл копировать только те реквизиты, которые есть и у документа-основания
		Если глЕстьРеквизитШапки(Объект.Идентификатор, ДокОсн.Вид()) = 1 Тогда
			Значение = ДокОсн.ПолучитьАтрибут(Объект.Идентификатор);
			КонтДок.УстановитьАтрибут(Объект.Идентификатор, Значение);
		КонецЕсли;
	КонецЦикла; 

	// Общие реквизиты
	КолОбъектов = Метаданные.ОбщийРеквизитДокумента();
	Для Номер = 1 По КолОбъектов Цикл
		Объект = Метаданные.ОбщийРеквизитДокумента(Номер);   
		Значение = ДокОсн.ПолучитьАтрибут(Объект.Идентификатор);
		КонтДок.УстановитьАтрибут(Объект.Идентификатор, Значение);
	КонецЦикла; 
	               
	
	// Заполняем исключения, если они есть для этого документа
	Если ИсключенияВшапке.НайтиЗначение(ВидДок, НомерСтроки, "ВидДок") = 1 Тогда; 
		ИсключенияВшапке.ТекущаяСтрока(НомерСтроки);
		КолОбъектов = ИсключенияВшапке.КоличествоКолонок(); 
		Для Номер = 1 По КолОбъектов Цикл
			ИсключенияВшапке.ТекущаяКолонка(Номер);
			Значение = ИсключенияВшапке.ПолучитьЗначение(НомерСтроки,Номер);
			Объект   = ИсключенияВшапке.ТекущаяКолонка(); 
			
			Если ((Объект <> "СуммаВклНДС") и (Объект <> "СуммаВклНП")) 
				или ((ВидДок = "ОтчетККМ") или (ВидДок = "РеализацияРозница")) Тогда
					
				Если глЕстьРеквизитШапки(Объект, ВидДок) = 1  Тогда
					КонтДок.УстановитьАтрибут(Объект, Значение);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	// Установка номера с учетом префикса
	Префикс = СокрЛП(Константа.ПрефиксИБ);
	Если ПустоеЗначение(КонтДок.Фирма) = 0 Тогда
		Префикс = Префикс + СокрЛП(КонтДок.Фирма.ЮрЛицо.ПрефиксНомеровДокументов);
	КонецЕсли;
	КонтДок.УстановитьНовыйНомер(Префикс);

	
КонецПроцедуры // ЗаполнитьШапку()        

//******************************************************************************
// ЗаполнитьТЧ(КонтДок, ДокОсн)
//
// Параметры: 
//  КонтДок - контекст нового документа
//  ДокОсн  - документ основание
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет табличную часть документа
//
Процедура ЗаполнитьТЧ(КонтДок, ДокОсн)
	
	Перем НомерСтроки;
	                                              
	ВидДок = КонтДок.Вид();
	// Составим список реквизитов табличной части
	Список      = СоздатьОбъект("СписокЗначений");
	КолОбъектов = Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти();
	Для Номер = 1 По КолОбъектов Цикл
		Объект = Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(Номер);   
		
		// Имеет смысл копировать только те реквизиты, которые есть и у документа-основания
		Если глЕстьРеквизитМнЧ(Объект.Идентификатор, ДокОсн.Вид()) = 1 Тогда
			Список.ДобавитьЗначение(Объект.Идентификатор, Объект.Представление());
		КонецЕсли;
	КонецЦикла;
	
	
	ДокОсн.ВыбратьСтроки();                
	Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
		
		КонтДок.НоваяСтрока();
		
		// Цикл по реквизит 
		Для Номер = 1 По Список.РазмерСписка() Цикл
			Объект   = Список.ПолучитьЗначение(Номер,"");
			Значение = ДокОсн.ПолучитьАтрибут(Объект);
			КонтДок.УстановитьАтрибут(Объект, Значение);
		КонецЦикла;
		
		// Заполняем исключения, если они есть для этого документа
		Если ИсключенияВТЧ.НайтиЗначение(ВидДок, НомерСтроки, "ВидДок") = 1 Тогда; 
			ИсключенияВТЧ.ТекущаяСтрока(НомерСтроки);
			КолОбъектов = ИсключенияВТЧ.КоличествоКолонок(); 
			Для Номер = 1 По КолОбъектов Цикл
				ИсключенияВТЧ.ТекущаяКолонка(Номер);
				Значение = ИсключенияВТЧ.ПолучитьЗначение(НомерСтроки,Номер);
				Объект   = ИсключенияВТЧ.ТекущаяКолонка();
				
				Если глЕстьРеквизитМнч(Объект, ВидДок) = 1  Тогда
					
					Если Метаданные.Документ(ВидДок).РеквизитТабличнойЧасти(Объект).Тип = "Неопределенный" Тогда
						ТипЗнач = ТипЗначенияСтр(Значение);
						Если (ТипЗнач = "Справочник")
						 ИЛИ (ТипЗнач = "Документ")
						 ИЛИ (ТипЗнач = "Перечисление") Тогда
							КонтДок.НазначитьТип(Объект, ТипЗнач + "." + Значение.Вид());
						ИначеЕсли (ТипЗнач = "Строка") Тогда
							КонтДок.НазначитьТип(Объект, "Строка");
						ИначеЕсли (ТипЗнач = "Число") Тогда
							КонтДок.НазначитьТип(Объект, "Число");
						ИначеЕсли (ТипЗнач = "Дата") Тогда
							КонтДок.НазначитьТип(Объект, "Дата");
						КонецЕсли;
					КонецЕсли;
					КонтДок.УстановитьАтрибут(Объект, Значение);
				КонецЕсли
			КонецЦикла; 
		КонецЕсли;

		// Нужно пересчитать строку
		глПересчетТаблЧасти(КонтДок,"Количество");
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТЧ()

//******************************************************************************
// ОбработкаИсключениий(Конт, ДокОсн)
//
// Параметры: 
//  Конт    - контекст нового документа
//  ДокОсн  - документ основание
//
// Возвращаемое значение:
//  1 - можно записывать документ
//  0 - нельзя
//
// Описание:
//  Обработка исключений при заполнении документа
//
Функция ОбработкаИсключениий(Конт, ДокОсн)

// Надо рассчитывать сумму взаиморасчетов
Если (глЕстьРеквизитШапки("СуммаВзаиморасчетов", Конт.Вид())  = 1 ) Тогда
	Если (Конт.Договор.Выбран() = 1 ) Тогда
		Если Конт.СуммаВзаиморасчетов = 0 Тогда
			Сумма                = Конт.Итог("Сумма"); 
			ВалютаВзаиморасчетов = Конт.Договор.ВалютаВзаиморасчетов;
			
			// Если валюта документа (есть во всех копируемых документах) совпадает
			// с валютой взаиморасчетов, то сумма взаиморасчетов равна сумме документа
			Если Конт.Валюта = ВалютаВзаиморасчетов Тогда
				Конт.СуммаВзаиморасчетов = Сумма;
			Иначе
				
				// пересчитываем в рубли по курсу документа
				Сумма = глПересчет(Сумма, Конт.Валюта, Конт.Курс, глРубли, 1);
				
				// в валюту взаиморасчетов по курсу на дату документа
				Конт.СуммаВзаиморасчетов = глПересчет(Сумма, глРубли, 1, ВалютаВзаиморасчетов, Конт.ДатаДок);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецЕсли;

ПересчитатьНалоги = 0;
ВключаяНП         = 0;
ВключаяНДС        = 0;
ОбнулитьЦену      = 0;

Если (Найти(Конт.Вид(), "ОтчетККМ, РеализацияРозница") > 0) Тогда
	
	// В розничных документах налоги всегда должны быть включены в сумму
	Если Конт.Склад.ОблагаетсяЕНВД > 0 Тогда
		
		Конт.ОблагаетсяЕНВД = 1; 
		Если Конт.Вид() = "РеализацияРозница" Тогда
			Конт.КодОперации = глКО.РозничнаяПродажаЕНВД;
		КонецЕсли;
		
		ВключаяНП  = Конт.СуммаВклНП;
		ВключаяНДС = Конт.СуммаВклНДС;
		
		Если (Конт.УчитыватьНДС > 0) 
		 ИЛИ (Конт.УчитыватьНП  > 0) Тогда
			Конт.УчитыватьНДС   = 0;
			Конт.УчитыватьНП    = 0;
			ПересчитатьНалоги = 1;
		КонецЕсли;
	Иначе 
		
		Если (Конт.УчитыватьНДС > 0)
		   И (Конт.СуммаВклНДС = 0)    Тогда
			Конт.СуммаВклНДС  = 1;
			ПересчитатьНалоги = 1;
		КонецЕсли;
		
		Если (Конт.УчитыватьНП > 0) 
		   И (Конт.СуммаВклНП = 0)     Тогда
			Конт.СуммаВклНП  = 1;
			ПересчитатьНалоги = 1;
		КонецЕсли;
	КонецЕсли;
	
ИначеЕсли Конт.Вид() = "ПеремещениеТМЦ" Тогда
	Если (Конт.Склад.РозничныйСклад = 1) 
	ИЛИ (Конт.СкладПолучатель.РозничныйСклад = 1) Тогда
		
		ВключаяНП  = Конт.СуммаВклНП;
		ВключаяНДС = Конт.СуммаВклНДС;
		
		Если (Конт.УчитыватьНДС > 0)
		   И (Конт.СуммаВклНДС = 0)    Тогда
			Конт.СуммаВклНДС  = 1;
			ПересчитатьНалоги = 1;
		КонецЕсли;
		
		Если (Конт.УчитыватьНП > 0) 
		И (Конт.СуммаВклНП = 0)     Тогда
			Конт.СуммаВклНП  = 1;
			ПересчитатьНалоги = 1;
		КонецЕсли;
	Иначе  // не розничное перещение. м.б. надо обнулять цены            
		Если Конт.Итог("Сумма") > 0 Тогда
			ОбнулитьЦену = 1;
		КонецЕсли;
	КонецЕсли;
ИначеЕсли Конт.Вид() = "СписаниеТМЦ" Тогда
	Если Конт.Итог("Сумма") > 0 Тогда
		ОбнулитьЦену = 1;
	КонецЕсли;
ИначеЕсли Конт.Вид() = "ПоступлениеТМЦИмпорт" Тогда
	// В Поступлении (импорт) надо посчитать таможенную стоимость
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()  = 1 Цикл
		Конт.ТаможеннаяСтоимость = глПересчет(Конт.Сумма,Конт.Валюта,Конт.Курс,глРубли,Конт.ДатаДок);
	    Конт.СуммаПошлиныРуб     = Конт.ТаможеннаяСтоимость * Конт.СтавкаПошлины/100;
		Конт.СуммаНДСРуб 	     = (Конт.ТаможеннаяСтоимость + Конт.СуммаПошлиныРуб) *
		                            глНачисляемыйНДС(Конт.СтавкаНДС);
	КонецЦикла; 
	
КонецЕсли;

Если ПересчитатьНалоги = 1 Тогда
	глПересчитатьНалоги(Конт, ВключаяНП, ВключаяНДС);
КонецЕсли;

// В складских документах списания и перемещения цену надо 
// заполнять только для розничного склада
Если ОбнулитьЦену = 1 Тогда
	Конт.ВыбратьСтроки();
	Пока Конт.ПолучитьСтроку()  = 1 Цикл
	    Конт.Цена = 0;
		глПересчетТаблЧасти(Конт,"Цена");
	КонецЦикла; 
КонецЕсли;

Возврат 1;
КонецФункции // ОбработкаИсключениий()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии() 
	Перем Конт, ВидДок;
	
	ДокОсн = Форма.Параметр;
	
	// Если не передали копируемый документ, то делать нечего
	Если ПустоеЗначение(ДокОсн) = 0 Тогда
		
		// Сформируем список документов, которые можем заполнять копированием
		СформироватьСписокДок();
		
		// Считаем, что можем копировать только документы из предопределенного списка
		Если СписокДок.НайтиЗначение(ДокОсн.Вид()) = 0 Тогда
			//Предупреждение("Этот вид документа неподлежит копированию с помощью данной обработки",60);
			Предупреждение("Копируются только документы, имеющие в табличной части 
			               |колонки ""Номенклатура"", ""Количество"" и ""Цена"".", 60);
		Иначе
		    
			Если СписокДок.ВыбратьЗначение(ВидДок,"Выберите вид документа",1,60) = 1 Тогда
				
				Конт = СоздатьОбъект("Документ." + ВидДок);
				Конт.Новый();
				
				ЗаполнитьШапку(Конт, ДокОсн);
				ЗаполнитьТЧ(Конт, ДокОсн);      
				
				// К сожалению не все исключения удалось обработать. 
				Если ОбработкаИсключениий(Конт, ДокОсн) = 1 Тогда;
				
					Конт.Записать();
					ОткрытьФорму(Конт.ТекущийДокумент());
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
	Иначе
		Предупреждение("Данная обработка вызывается из других процедур конфигурации.",60);
	КонецЕсли;
		
	СтатусВозврата(0);
	Возврат;
	
	
КонецПроцедуры // ПриОткрытии()

