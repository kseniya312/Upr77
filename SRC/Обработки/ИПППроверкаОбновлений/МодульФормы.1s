Перем ИмяФайлаВерсийТмп,Таб; 
Перем ДатаПросмотраНовостей,ДатаПоследнейНовости;
Перем Соединение;
//*******************************************************************************
Функция Загрузить(ИмяФайлаВерсий)
	Стр = "";
	Адрес = "http://www.1c.ru/buhplace/ITSRepV/";  
	Попытка                    
		Соединение.ПолучитьКакСтроку(Адрес+ИмяФайлаВерсий, Стр);
	Исключение 
		Сообщить("Не удалось получить данные с сервера!");
		Возврат "";
	КонецПопытки;
	Возврат Стр;
КонецФункции
//*******************************************************************************
Функция Сформировать(Реж) 
	Перем Стр;
	// проверка наличия новой конфигурации
	НовыйНомерРелизаКонфигурации = Загрузить(глИдентификаторКонфигурации()+"/Ver.id");
	Конфигурация = "";   // Нет данных о конфигурации 
	Если ПустоеЗначение(НовыйНомерРелизаКонфигурации) = 0 Тогда
		Если НовыйНомерРелизаКонфигурации>глНомерРелиза() Тогда    
			 Конфигурация = "Вышел новый релиз конфигурации";
		КонецЕсли;
	КонецЕсли;
	
	// проверка наличия свежих новостей 
	ДатаПросмотраНовостей=ВосстановитьЗначение("ДатаПросмотраНовостей");
	ДатаПросмотраНовостей=?(ПустоеЗначение(ДатаПросмотраНовостей)=1,"",ДатаПросмотраНовостей); 
	Попытка
		Соединение.ПолучитьКакСтроку("http://www.1c.ru/buhplace/lastnewstime.asp", Стр);
	Исключение
		Сообщить("Неудачная попытка соединения");
		Возврат 0;
	КонецПопытки;
	ДатаПоследнейНовости=Сред(Стр,7,4)+Лев(Стр,2)+Сред(Стр,4,2)+Сред(Стр,12,2)+Сред(Стр,15,2)+Прав(Стр,2);
	// дописать проверку дат по формату ГГГГММДДЧЧММСС
	Если ДатаПоследнейНовости>ДатаПросмотраНовостей Тогда
		Новости = "Есть непрочитанные новости";
	Иначе
		Новости = "";   //Новостей нет
	КонецЕсли;
    
	// проверка необходимости сведений о выходе новых регламентированных отчетов
	Если Найти(",BUTK,BU42TK,BUBK,NCPBK,NCBK,BUOURCLK,BUOUSL,BUPSB25,PBOUL,NLGPL,BASUOR,",","+глИдентификаторКонфигурации()+",")>0 Тогда 
		Если Найти(",BUBK,NCPBK,NCBK,",","+глИдентификаторКонфигурации()+",")>0 Тогда
			НоваяВерсияР = Загрузить("Reports/BudgetN/Ver.id");     // Номер релиза регл. отчетов для бюджетной конфигурации
		ИначеЕсли глИдентификаторКонфигурации()="PBOUL" Тогда 		
			НоваяВерсияР = Загрузить("Reports/PBOUL/Ver.id");   	// Номер релиза регл. отчетов для 1С:Предприниматель
		ИначеЕсли глИдентификаторКонфигурации()="BASUOR" Тогда 		
			НоваяВерсияР = Загрузить("Reports/BASUOR/Ver.id");   	// Номер релиза регл. отчетов для 1С:УСН
		Иначе
			НоваяВерсияР = Загрузить("Reports/GeneralN/Ver.id");    // Номер релиза регл. отчетов для других конфигураций
		КонецЕсли;
		РОтчеты = ""; // Нет новых отчетов        
		РО = " Регламентированные отчеты";
		Если ПустоеЗначение(НоваяВерсияР)=0 Тогда
			РОтчеты = "Вышел новый комплект регламентированных отчетов";
			Каталог=КаталогИБ()+"ExtForms\";
			ФГ=СоздатьОбъект("ФС");
			Файл=ФГ.НайтиПервыйФайл(Каталог+"rp"+Лев(НоваяВерсияР,4)+".grp");    
			Текст = СоздатьОбъект("Текст");
			Если Файл<>"" Тогда
				Если ФГ.СуществуетФайл(Каталог+Файл+"\Ver.id")=1 Тогда
				    Текст.Открыть(Каталог+Файл+"\Ver.id");
					ТекущийРелизаОтчетов = Текст.ПолучитьСтроку(1);
					РОтчеты = ""; 
					Если ТекущийРелизаОтчетов<НоваяВерсияР Тогда
						РОтчеты = "Есть новый релиз регламентированных отчетов";
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				РОтчеты = "Есть новый релиз регламентированных отчетов"; // т.к. каталога регл.отч. не обнаружено
			КонецЕсли; 
		КонецЕсли; 
		СохранитьЗначение("НовыйНомерРелизаОтчетов",НоваяВерсияР);
	КонецЕсли; 
	
	СохранитьЗначение("ДатаПоследнейНовости",ДатаПоследнейНовости);
	СохранитьЗначение("НовыйНомерРелизаКонфигурации",НовыйНомерРелизаКонфигурации);
	Возврат 1;
КонецФункции
//*******************************************************************************
Процедура ИПП()
	Сп = СоздатьОбъект("СписокЗначений");
	Сп.ДобавитьЗначение(Контекст,"Контекст");
	Сп.ДобавитьЗначение(Конфигурация,"Конфигурация");
	Сп.ДобавитьЗначение(Новости,"Новости"); 
	Сп.ДобавитьЗначение(1,"Закрывать"); 
	
	Если Найти(",BUTK,BU42TK,BUBK,NCPBK,NCBK,BUOURCLK,BUOUSL,BUPSB25,PBOUL,NLGPL,BASUOR,",","+глИдентификаторКонфигурации()+",")>0 Тогда 
		Сп.ДобавитьЗначение(РОтчеты,"Отчеты");  
	КонецЕсли;
	
	ОткрытьФорму("Обработка.ИППГлавная",Сп);
	Форма.Закрыть();
КонецПроцедуры
//*******************************************************************************
//	УстановитьКомпоненту()
//
//	Описание:  Осуществляет загрузку внешней компоненты V7Plus.dll
Функция УстановитьКомпоненту()
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ()+"ExtForms\v7plus.dll")=0 Тогда
		Если ЗагрузитьВнешнююКомпоненту("v7plus.dll")=0 Тогда
			Сообщить("Не удалось обнаружить компоненту v7plus.dll!"); 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	Попытка
		Соединение = СоздатьОбъект("Addin.V7HttpReader");
		Соединение.КоличествоПопытокАвторизации = 3;
	Исключение 
		Сообщить("Не удалось создать объект Addin.V7HttpReader!");
		Возврат 0;
	КонецПопытки; 
	Возврат 1;
КонецФункции  //  УстановитьКомпоненту
//*******************************************************************************
Процедура ПриОткрытии()  
	Если УстановитьКомпоненту()=1 Тогда
		Сп = Форма.Параметр;  Реж = 0;
		Если ПустоеЗначение(Сп)=0 Тогда
			Если ТипЗначенияСтр(Сп)="СписокЗначений" Тогда 
				Если Сп.Получить("Сведения")=1 Тогда 
					Сп.ДобавитьЗначение("001","Версия");
					Сп.ДобавитьЗначение("Отчет об изменениях","Наименование");
					СтатусВозврата(0);
					Возврат;
				КонецЕсли;
			КонецЕсли;
		    Если Сп.Получить("Режим")=1 Тогда  
				Реж = 1;  // запуск был из ИПП (таблицы формировать не надо. только )
			КонецЕсли;
		КонецЕсли;
		Если Сформировать(Реж)=1 Тогда
			Таблица.Опции(0,0,1,0,,"ПроверкаОбновлений");
			
			// Формировать текст сообщений для ИПП (запуск был из ИПП)   
			Если Реж = 1 Тогда
				Сп.ДобавитьЗначение(Конфигурация,"Конфигурация");
				Сп.ДобавитьЗначение(Новости,"Новости");
				
				Если Найти(",BUTK,BU42TK,BUBK,NCPBK,NCBK,BUOURCLK,BUOUSL,BUPSB25,PBOUL,NLGPL,BASUOR,",","+глИдентификаторКонфигурации()+",")>0 Тогда 
					Сп.ДобавитьЗначение(РОтчеты,"Отчеты"); 
				КонецЕсли;
				
				СтатусВозврата(0);
				Возврат; 
			Иначе 
			КонецЕсли;
		Иначе
			СтатусВозврата(0);
			Возврат; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
//*******************************************************************************
