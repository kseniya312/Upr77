Перем ОстатокНаНачалоДня;
                             

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура УправлениеДиалогом()
	
	Если Автообновление = 1 Тогда
	    Форма.кнОбновить.Доступность(0);
	Иначе
		Форма.кнОбновить.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// ПоступлениеПоДокументам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Поступление по документам".
//
// Описание:
//  Открывает подбор по документам.
//
Процедура ПоступлениеПоДокументам()
	
	Меню = СоздатьОбъект("СписокЗначений");
	Меню.ДобавитьЗначение("ЗаявкаПокупателя",  ПолучитьПустоеЗначение("Документ.ЗаявкаПокупателя"). ПредставлениеВида());
	Меню.ДобавитьЗначение("ОтчетКомиссионера", ПолучитьПустоеЗначение("Документ.ОтчетКомиссионера").ПредставлениеВида());
	Меню.ДобавитьЗначение("Реализация",        ПолучитьПустоеЗначение("Документ.Реализация").       ПредставлениеВида());
	Меню.ДобавитьЗначение("РеализацияРозница", ПолучитьПустоеЗначение("Документ.РеализацияРозница").ПредставлениеВида());
	Меню.ДобавитьЗначение("РеализацияПрочее",  ПолучитьПустоеЗначение("Документ.РеализацияПрочее"). ПредставлениеВида());
	
	ВидДок = "";
	Если Меню.ВыбратьЗначение(ВидДок,,,,1) = 1 Тогда
		Док = СоздатьОбъект("Документ."+ВидДок);
		Если Док.Выбрать("Выберите документ, в оплату которого поступили денежные средства") = 1 Тогда
			
			Если Док.Фирма <> Фирма Тогда
			    Предупреждение("У выбранного документа установлена фирма """ + Фирма +
				               """, что не соответствует фирме """ + Док.Фирма + """, выбранной в выписке банка!", 60);
			Иначе
				// введем на основании
				Парам	= СоздатьОбъект("СписокЗначений");
				Парам.Установить("Параметры"		, 1);
				Парам.Установить("ДатаДок"			, ДатаДок);
				Парам.Установить("БанковскийСчет"	, БанковскийСчет);
				Парам.Установить("Контекст"	, глВзятьКонтекст(Контекст));
				
				ОткрытьФорму("Документ.СтрокаВыпискиПриход", Парам, Док.ТекущийДокумент());
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПоступлениеПоДокументам()  

//******************************************************************************
// ПодборПоПлатежнымДокументам()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Подбор по платежным документам".
//
// Описание:
//  Открываем подбор по платежным документам.
//
Процедура ПодборПоПлатежнымДокументам()
	
	Если БанковскийСчет.Выбран() = 0 Тогда
		Предупреждение("Сначала выберите банковский счет!", 60);
	Иначе
		КонтекстФормы = глВзятьКонтекст(Контекст);
		ОткрытьПодбор("Журнал.ПлатежныеДокументы","ДляПодбора",КонтекстФормы);
	КонецЕсли;
	
КонецПроцедуры //ПодборПоПлатежнымДокументам()

//******************************************************************************
// ПосчитатьОстатокНаНачалоДня()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Производит расчет остатка на начало дня. Заполняет переменную ОстатокНаНачалоДня
//
Процедура ПосчитатьОстатокНаНачалоДня()
	    
	Если (ПустоеЗначение(ДатаДок)=1) или
		 (ПустоеЗначение(Фирма)=1) или
		 (ПустоеЗначение(БанковскийСчет)=1) Тогда
		ОстатокНаНачалоДня = "Остаток не может быть посчитан: не заполнены реквизиты!";
		Возврат;
	КонецЕсли;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	РегБанк		 = ВремРегистры.Банк;
	РегБанк.УстановитьЗначениеФильтра("БанковскийСчет", БанковскийСчет);
	
	// в этом случае надо сделать временный расчет итогов
	Если (ДатаДок>ПолучитьДатуТА()) Тогда
		ОстатокНаНачалоДня = "Остаток не может быть посчитан: дата превышает дату ТА!";
	Иначе
		РегБанк.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыНа(ДатаДок);
		ОстатокНаНачалоДня = РегБанк.СводныйОстаток(,БанковскийСчет,"СуммаВал");
	КонецЕсли;
	    
КонецПроцедуры // ПосчитатьОстатокНаНачалоДня()

//******************************************************************************
// СтатусДока(Док)
//
// Параметры:
//  Док
//
// Возвращаемое значение:
//  Номер картинки, соответствующий статусу документа.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Анализирует документ (проведен, помечен, и т.д.)
//
Функция СтатусДока(Док)
	
	Если Док.Выбран() = 0 Тогда
		Возврат (0);
	ИначеЕсли Док.ПометкаУдаления()=1 Тогда
		Возврат (7);
	ИначеЕсли Док.Проведен()=0 Тогда
		Возврат (1);
	ИначеЕсли Док.Проведен()=1 Тогда
		Возврат (2);
	КонецЕсли;
	
КонецФункции // СтатусДока()


//******************************************************************************
// ЗаполнитьТаблицу()
//
// Параметры:
//  
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Заполняет таблицу документов - строк выписки
//
Процедура ЗаполнитьТаблицу()
	
	ТабДокументов.УдалитьСтроки();
	
	Если (ПустоеЗначение(ДатаДок)=1) или
		 (ПустоеЗначение(Фирма)=1) или
		 (ПустоеЗначение(БанковскийСчет)=1) Тогда
		Возврат;
	КонецЕсли;
	
	Док = СоздатьОбъект("Документ");
	Док.ИспользоватьЖурнал("ДокументыПоБанку");
	Док.УстановитьФильтр(1,0);
	Док.ВыбратьДокументы(ДатаДок,ДатаДок);
	Пока Док.ПолучитьДокумент()=1 Цикл
		Если (Док.Графа("БанковскийСчет") <> БанковскийСчет) или
			 (Док.Вид() = "ПеремещениеДенегБанк") Тогда
			Продолжить;
		КонецЕсли;
		ТабДокументов.НоваяСтрока();
		ТабДокументов.Статус 	= СтатусДока(Док);
		ТабДокументов.Документ 	= Док.ТекущийДокумент();
		ТабДокументов.Валюта	= Док.Графа("Валюта");
		ТабДокументов.СтрокаДокумента = глНазваниеДокументаВЖурнале(ТабДокументов.Документ)+" "+ТабДокументов.Документ.НомерДок;
		ТабДокументов.Приход 	= Док.Графа("Приход");
		ТабДокументов.Расход 	= Док.Графа("Расход");
		ТабДокументов.ПриходПроведен = ?(Док.Проведен()=1,Док.Графа("Приход"),0);
		ТабДокументов.РасходПроведен = ?(Док.Проведен()=1,Док.Графа("Расход"),0);
		ТабДокументов.Контрагент = Док.Графа("Контрагент");
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицу()
         
//******************************************************************************
// ВвестиДокумент(ВидДвижения)
//
// Параметры:
//  ВидДвижения - строка  - "Приход" или "Расход"
//  Контрагент	- элемент справочника контрагенты.
//
// Возвращаемое значение:
//  1 - удалось открыть форму документа, 0 - нет
//
// Вызывается из формул элементов диалога:
//  Кнопки "Приход", "Расход"
//
// Описание:
//  Выписывает новый документ СтрокуВыпискаБанкаПриход, если параметр ВидДвижения
//  "приход"или СтрокуВыпискаБанкаРасход, если если параметр ВидДвижения "расход".
//  Если задан параметр Контрагент, то в выписываемом документе заполнятся
//  реквизиты Контрагент и Договор основным договор контрагента.
//
Процедура ВвестиДокумент(ВидДвижения, Контрагент="")
	          
	Если (ПустоеЗначение(ДатаДок) = 1)
	 ИЛИ (ПустоеЗначение(Фирма) = 1)
	 ИЛИ (ПустоеЗначение(БанковскийСчет) = 1)
	Тогда
		Предупреждение("Не выбрана дата, фирма, или банковский счет!",60);
	Иначе
		Парам	= СоздатьОбъект("СписокЗначений");
		
		Парам.Установить("Параметры"		, 1);
		Парам.Установить("ДатаДок"			, ДатаДок);
		Парам.Установить("Фирма"			, Фирма);
		Парам.Установить("БанковскийСчет"	, БанковскийСчет);
		Парам.Установить("Контрагент"		, Контрагент);
		Парам.Установить("Контекст"			, глВзятьКонтекст(Контекст));
		
		ОткрытьФорму("Документ.СтрокаВыписки" + ВидДвижения, Парам);
		
	КонецЕсли;
	
КонецПроцедуры // ВвестиДокумент()
            
//******************************************************************************
// ВвестиПриходПоРС()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Приход по р/с"
//
// Описание:
//  Вводит новый документ СтрокаВыпискиПриход. Перед вводом документа 
//  предлагается номер банковского счета. По этому номеру ищется контрагент.
//  Найденный контрагент прописывается в документ.
//
Процедура ВвестиПриходПоРС()
	Перем НомБанкСчета, ВыбКонтр, КонтФормыДок;
	
	Если ВвестиСтроку(НомБанкСчета, "Введите номер р/с контрагента", 20, 0, 60) = 1 Тогда
	    СпрБанкСчета = СоздатьОбъект("Справочник.БанковскиеСчета");
		
		Если СпрБанкСчета.НайтиПоРеквизиту("НомерСчета", НомБанкСчета, 1) = 0 Тогда
		    Предупреждение("Счет с номером " + НомБанкСчета  + " не найден в справочнике банковских счетов", 60);
		Иначе
			СписКонтрагентов	= СоздатьОбъект("СписокЗначений");
			СпрКонтрагенты		= СоздатьОбъект("Справочник.Контрагенты");
			
			СпрКонтрагенты.ВыбратьЭлементыПоРеквизиту("ЮрФизЛицо", СпрБанкСчета.ЮрФизЛицо, 0, 0);
			Пока СпрКонтрагенты.ПолучитьЭлемент() = 1 Цикл
		        СписКонтрагентов.ДобавитьЗначение(СпрКонтрагенты.ТекущийЭлемент());
			КонецЦикла;
			
			Если СписКонтрагентов.РазмерСписка() = 0 Тогда
			    Предупреждение("Контрагент с юр./физ. лицом """ +СпрБанкСчета.ЮрФизЛицо + """ не найден в справочнике контрагентов", 60);
				Возврат;
			ИначеЕсли СписКонтрагентов.РазмерСписка() = 1 Тогда
				// в списке только 1 контрагент
				ВыбКонтр	= СписКонтрагентов.ПолучитьЗначение(1);
			Иначе
				// контрагента нужно выбрать
				Если СписКонтрагентов.ВыбратьЗначение(ВыбКонтр, "Выберите контрагента",, 60, 0) <> 1 Тогда
				    // отказ от выбора
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ВвестиДокумент("Приход", ВыбКонтр);

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВвестиПриходПоРС()

//******************************************************************************
// ИзменитьДокумент()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Таблица документов
//
// Описание:
//  Открывает форму текущего (выбранного в таблице) документа.
//
Процедура ИзменитьДокумент()
	
	ТекСтрока = ТабДокументов.ТекущаяСтрока();
	Если ТекСтрока <> 0 Тогда                  
		КонтФормы = глВзятьКонтекст(Контекст);
		
		ОткрытьФорму(ТабДокументов.ПолучитьЗначение(ТекСтрока,"Документ"),КонтФормы);
	КонецЕсли;
	
КонецПроцедуры // ИзменитьДокумент()
                          
//******************************************************************************
// УдалитьДокумент()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Кнопка "Удалить"
//
// Описание:
//  Удаляет текущий документ.
//
Процедура УдалитьДокумент()
	
	ТекСтрока = ТабДокументов.ТекущаяСтрока();
	Если ТекСтрока <> 0 Тогда                                            
		ТекДок = ТабДокументов.ПолучитьЗначение(ТекСтрока,"Документ");
		
		Док = СоздатьОбъект("Документ");
		Если Док.НайтиДокумент(ТекДок)=1 Тогда
			Если Док.ПометкаУдаления() = 1 Тогда
				Если Вопрос("Снять пометку удаления: " + ТекДок+"?", "Да+Нет",60) <> "Да" Тогда
					Возврат;
				КонецЕсли;
				Док.СнятьПометкуУдаления();
			Иначе   
				Если Вопрос("Удалить документ: " + ТекДок+"?", "Да+Нет",60) <> "Да" Тогда
					Возврат;
				КонецЕсли;
				Док.Удалить(0);
			КонецЕсли;
			ЗаполнитьТаблицу();
		КонецЕсли;
	Иначе
		Предупреждение("Не выбран документ!",60);
	КонецЕсли;
	    
КонецПроцедуры // УдалитьДокумент()

//******************************************************************************
// ПоКнопкеСкопироватьСтроку()
//
// Параметры: 
//  Нет
//     
// Вызывается из формул диалога:
//  По кнопке "Скопировать документ"
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ПоКнопкеСкопироватьСтроку()
	
	ТекСтрока	= ТабДокументов.ТекущаяСтрока();
	Если ТекСтрока = 0 Тогда
	    Предупреждение("Не выбрана строка документа!", 60);
	Иначе
		ТекДок	= ТабДокументов.ПолучитьЗначение(ТекСтрока, "Документ");

		КонтФормы = глВзятьКонтекст(Контекст);
	
		ОткрытьФорму("Документ." + ТекДок.Вид(),КонтФормы);
		
		КонтФормы.ДатаДок 					= ДатаДок;
		КонтФормы.Фирма 					= ТекДок.Фирма;
		КонтФормы.Проект 					= ТекДок.Проект;
		КонтФормы.ДокОснование				= ТекДок.ДокОснование;
		КонтФормы.БанковскийСчет			= ТекДок.БанковскийСчет;
		КонтФормы.Контрагент				= ТекДок.Контрагент;
		КонтФормы.Договор					= ТекДок.Договор;
		КонтФормы.Валюта 					= ТекДок.БанковскийСчет.ВалютаСчета;
		КонтФормы.Курс						= глКурсДляВалюты(КонтФормы.Валюта, ДатаДок);
		КонтФормы.Сумма						= ТекДок.Сумма;
		КонтФормы.ОблагаетсяНП				= ТекДок.ОблагаетсяНП;
		КонтФормы.Счет						= ТекДок.Счет;
		КонтФормы.Субконто1					= ТекДок.Субконто1;
		КонтФормы.Субконто2					= ТекДок.Субконто2;
		КонтФормы.Субконто3					= ТекДок.Субконто3;
		КонтФормы.ДвижениеДенежныхСредств	= ТекДок.ДвижениеДенежныхСредств;

		Если ПустоеЗначение(КонтФормы.Договор.ВалютаВзаиморасчетов) =1 Тогда
			КонтФормы.СуммаВзаиморасчетов	= 0;
			
		Иначе
			КонтФормы.СуммаВзаиморасчетов = глПересчет(КонтФормы.Сумма,
						КонтФормы.Валюта,КонтФормы.Курс,
						КонтФормы.Договор.ВалютаВзаиморасчетов,
						КонтФормы.ДатаДок);
		КонецЕсли;
		КонтФормы.Форма.Обновить();
		
	КонецЕсли;

КонецПроцедуры // ПоКнопкеСкопироватьСтроку()


//******************************************************************************
// ПриИзмененииДатыДок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  ДатаДок
//
// Описание:
//  Производит все необходимые действия при изменении даты выписки
//
Процедура ПриИзмененииДатыДок()
	                   
	ЗаполнитьТаблицу();	
	ПосчитатьОстатокНаНачалоДня();
	
КонецПроцедуры // ПриИзмененииДатыДок()       

//******************************************************************************
// ПриИзмененииСчета()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Банковский счет.
//
// Описание:
//  Производит все необходимые действия при изменении банковского счета.
//
Процедура ПриИзмененииСчета()
	                       
	ЗаполнитьТаблицу();
	ПосчитатьОстатокНаНачалоДня();
	
КонецПроцедуры // ПриИзмененииСчета()
                 
//******************************************************************************
// ПриИзмененииФирмы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Фирма.
//
// Описание:
//  Производит все необходимые действия при изменении фирмы.
//
Процедура ПриИзмененииФирмы()
	                   
	Если БанковскийСчет.ЮрФизЛицо<>Фирма.ЮрЛицо Тогда
		БанковскийСчет = Фирма.ОсновнойСчет;
		ЗаполнитьТаблицу();	
		ПосчитатьОстатокНаНачалоДня();
	КонецЕсли;                               
	
КонецПроцедуры // ПриИзмененииФирмы()

//******************************************************************************
// ИтоговаяСтрока()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка
//
// Вызывается из формул элементов диалога:
//  
//
// Описание:
//  Здесь описывается функция.
//
Функция ИтоговаяСтрока()
	    
	// в этом случае там содержится описание ошибки!
	Если ТипЗначенияСтр(ОстатокНаНачалоДня) = "Строка" Тогда
		Возврат (ОстатокНаНачалоДня);
	КонецЕсли;
	
	Валюта = БанковскийСчет.ВалютаСчета;
	Приход = ТабДокументов.Итог("ПриходПроведен");
	Расход = ТабДокументов.Итог("РасходПроведен");
	
	ОстатокНаКонецДня = ОстатокНаНачалоДня + Приход - Расход;
	Стр = 	" На начало: " 	+ глФРМ(ОстатокНаНачалоДня,Валюта) +
	      	" Поступило: " 	+ глФРМ(Приход,Валюта) +
	      	" Списано: " 	+ глФРМ(Расход,Валюта) +
		 	" На конец: " 	+ глФРМ(ОстатокНаКонецДня,Валюта);
	Возврат Стр;
	
КонецФункции // ИтоговаяСтрока()
        
//******************************************************************************
// ПроверитьИОбновить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Невидимое текстовое поле.
//
// Описание:
//  Проверяет и, при необходимости, перечитывает список документов
//
Функция ПроверитьИОбновить()
	
	Если (НадоОбновить   = 1) 
	и    (Автообновление = 1)
	Тогда
		
		Если ТипЗначенияСтр(ОстатокНаНачалоДня) = "Строка" Тогда
			// в этом случае там содержится описание ошибки!
			ПосчитатьОстатокНаНачалоДня();
		КонецЕсли;
			
		ЗаполнитьТаблицу();
		НадоОбновить = 0;
	КонецЕсли;
	
КонецФункции // ПроверитьИОбновить()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(ВыбрДок)
	
	ДокСтрока = СоздатьОбъект("Документ.СтрокаВыпискиРасход");
	
	Если ТипЗначенияСтр(ВыбрДок) = "ТаблицаЗначений" Тогда
		ВыбрДок.ВыбратьСтроки();
		Пока ВыбрДок.ПолучитьСтроку() = 1 Цикл
			НачатьТранзакцию(); 
			ДокСтрока.Новый();   
			ДокСтрока.ДатаДок = ДатаДок;
			
			глЗаполнитьШапкуНаОсн(ДокСтрока,ВыбрДок.ПлатДок);
			
			ДокСтрока.БанковскийСчет = БанковскийСчет;
			ДокСтрока.Валюта 	  = глРубли;
     		ДокСтрока.Курс 		  = глКурсДляВалюты(глРубли, ДокСтрока.ДатаДок);
	    	ДокСтрока.Сумма		  = ВыбрДок.СуммаДок;
			ДокСтрока.КодОперации = глКО.ОплатаПоставщику;
            ДокСтрока.СуммаВзаиморасчетов =  глПересчет(ДокСтрока.Сумма,
					  ДокСтрока.Валюта,                      ДокСтрока.Курс,
					  ДокСтрока.Договор.ВалютаВзаиморасчетов,ДокСтрока.ДатаДок);
       
			глПриВыбореБухСчета(ДокСтрока,0);

			ДокСтрока.Записать();            
			Если ДокСтрока.Провести() = 0 Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();    
			КонецЕсли;                    
		КонецЦикла;
		
		ЗаполнитьТаблицу();
		ТабДокументов.ТекущаяСтрока(ТабДокументов.КоличествоСтрок());
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии()
	
	ДатаДок = РабочаяДата();
	
	Если ПустоеЗначение(Фирма) = 1 Тогда
		
		Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
		
		Если ПустоеЗначение(Фирма) = 0 Тогда
			БанковскийСчет = Фирма.ОсновнойСчет;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТаблицу();
	ПосчитатьОстатокНаНачалоДня();                         
	Автообновление = ВосстановитьЗначение("ВыпискаБанкаАвтообновление");
	УправлениеДиалогом();
	
КонецПроцедуры // ПриОткрытии()    

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагСтандОбр)
	
	Если ЭлементДиалога="БанковскийСчет" Тогда
		ЮрФизЛицо = Фирма.ЮрЛицо;
		ОткрытьФорму("Справочник.БанковскиеСчета.ФормаСписка", ЮрФизЛицо);
		ФлагСтандОбр = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ВыпискаБанкаАвтообновление",Автообновление);
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// 

ТабДокументов.НоваяКолонка("Статус",,,,"",5);
ТабДокументов.НоваяКолонка("Документ");
ТабДокументов.НоваяКолонка("СтрокаДокумента",,,,"Документ",30);
ТабДокументов.НоваяКолонка("Валюта",,,,"Вал",5);
ТабДокументов.НоваяКолонка("Приход","Число",15,2,"Приход",15,"Ч15.2.'",2);
ТабДокументов.НоваяКолонка("Расход","Число",15,2,"Расход",15,"Ч15.2.'",2);
ТабДокументов.НоваяКолонка("ПриходПроведен","Число",15,2);
ТабДокументов.НоваяКолонка("РасходПроведен","Число",15,2);
ТабДокументов.НоваяКолонка("Контрагент",,,,"Аналитика",30);
ТабДокументов.ВидимостьКолонки("Документ", 0);
ТабДокументов.ВидимостьКолонки("ПриходПроведен", 0);
ТабДокументов.ВидимостьКолонки("РасходПроведен", 0);
ТабДокументов.ВыводитьПиктограммы("Статус",1); 
ТабДокументов.Фиксировать(0,1); // первую колонку фиксируем