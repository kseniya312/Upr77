////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	Объект_Почта;

Перем	Конт;						//	Контекст загружаемого документа, если загрузка осуществляется из открытого документа
Перем	ВидТекущегоДокумента;		
Перем	СписокХозОпераций;			//	Список выбранных для отбора хоз. операций

Перем	Пометка_Выключена;			//	Номер пиктограммы
Перем	Пометка_Включена;			//	Номер пиктограммы
            
Перем	РежимРаботыОбработки;		//	"Документ" Или "ВыборДокумента"

Перем	СписокРолейКонтрагента;		//	Список возможных ролей контрагентов в соответсвии со схемой
Перем	XML_Документ;				//	XML_Документ из которого загружаем данные 

Перем	СписокПоддерживаемыхХозОпераций;	
                                    
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 

//******************************************************************************
// ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
//
// Параметры:
//  Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата
//
// Возвращаемое значение:
//  Значение колонки найденной строки
//
// Описание:
//  Ищет строку по значению в колонке поиска и возвращает значение другой колонки в найденной строке
//
Функция ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
                             
	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таб.ПолучитьЗначение(НомСтр, ИдКолонкиВозврата);
	КонецЕсли;
	
КонецФункции		//	ПолучитьЗначениеКолонки()

//******************************************************************************
// УстановитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки)
//
// Параметры:
//  Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Ищет строку по значению в колонке поиска и устанавливает значение другой колонки в найденной строке
//
Процедура УстановитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки)
                             
	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат;
	Иначе
		Таб.УстановитьЗначение(НомСтр, ИдКолонкиУстановки, ЗнУстановки);
	КонецЕсли;
	
КонецПроцедуры		//	УстановитьЗначениеКолонки()
                        

//******************************************************************************
// ВхождениеНайдено(Стр, СписокЗначений)
//
// Параметры:
//  Стр				-	Строка, в которой ищем вхождение
//	СписокЗначений	-	СписокЗначений подстрок, которые могут входить в Стр
//
// Возвращаемое значение:
//  Число - Позиция первого вхождения, 0 - если не ничего нашли
//
// Описание:
//	Возвращает позицию первого вхождение одной из подстроки переданного списка значений
//
Функция ВхождениеНайдено(Стр, СписокЗначений)
	
	Для Сч = 1 По СписокЗначений.РазмерСписка() Цикл
		Поз	=	Найти(НРег(Стр), НРег(СписокЗначений.ПолучитьЗначение(Сч)));
	    Если Поз > 0 Тогда Возврат(Поз) КонецЕсли;
	КонецЦикла;
	
	Возврат(0);

КонецФункции

//******************************************************************************
// ВклПометки(Таб, ИдКолонки, Режим)
//
// Параметры:
//  Режим - Строка "Инвертировать" отметки
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	Кнопки с пиктограммами - "Отметить все/ снять пометку у всех / инвертировать"

// Описание:
//	
//
Процедура ВклПометки(Таб, ИдКолонки, Режим)
	
    Таб.ВыбратьСтроки();
    Пока Таб.ПолучитьСтроку() = 1 Цикл
    	Если Режим = "Инвертировать" Тогда
    		Таб.Пометка = Пометка_Включена + Пометка_Выключена - Таб.Пометка;
		Иначе
			Таб.УстановитьЗначение(Таб.НомерСтроки, ИдКолонки, Режим);
    	КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры		//	ВклПометки()

//******************************************************************************
// ПриВыбореХозОперации()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	по щелчку на таблице хоз. операций
//	
// Описание:
//	Устанавливает / снимает отметку на выбранной хоз. операции
//
Процедура ПриВыбореХозОперации()
	
    ТекСтр	= ФормТабОпераций.ТекущаяСтрока();
	ТекКол	= ФормТабОпераций.ТекущаяКолонка();
	
	Если (ПустоеЗначение(ТекСтр) = 1) Или (ПустоеЗначение(ТекКол) = 1) Тогда
        Возврат;
	КонецЕсли;
	
	//ФормТабОпераций.Пометка = Пометка_Выключена + Пометка_Включена - ФормТабОпераций.Пометка;
	
	ВыбХозОперация	=	ФормТабОпераций.ХозОперация;
	
	ФормТабОпераций.ВыбратьСтроки();
	Пока ФормТабОпераций.ПолучитьСтроку() = 1 Цикл
		Если ФормТабОпераций.ХозОперация <> ВыбХозОперация Тогда Продолжить КонецЕсли;
		ФормТабОпераций.Пометка = Пометка_Выключена + Пометка_Включена - ФормТабОпераций.Пометка;
	КонецЦикла;
    
КонецПроцедуры		//	ПриВыбореХозОперации()

//******************************************************************************
// ПриВыбореСообщения()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	По щелчку на таблице полученных докуменов
//	
// Описание:
//	В зависимости от выбранной колонки - выполняет действие
//
Процедура ПриВыбореСообщения()

    ТекСтр	= ФормТабПочты.ТекущаяСтрока();
	ТекКол	= ФормТабПочты.ТекущаяКолонка();
	
	Если (ПустоеЗначение(ТекСтр) = 1) Или (ПустоеЗначение(ТекКол) = 1) Тогда
        Возврат;
	КонецЕсли;
	
	Если		РежимРаботыОбработки = "Групповой" Тогда
		
		Если		ТекКол = "ФлПрочитано" Тогда
			
			ФормТабПочты.ФлПрочитано = Пометка_Выключена + Пометка_Включена - ФормТабПочты.ФлПрочитано;
			
		ИначеЕсли	ТекКол = "ФлЗагрузить" Тогда
		
			ФормТабПочты.ФлЗагрузить = Пометка_Выключена + Пометка_Включена - ФормТабПочты.ФлЗагрузить;
			ФормТабПочты.ФлПрочитано = Пометка_Выключена + Пометка_Включена - ФормТабПочты.ФлПрочитано;
			
		КонецЕсли;
		
	ИначеЕсли	(РежимРаботыОбработки = "Документ") Или (РежимРаботыОбработки = "ВыборДокумента") Тогда
		
		ФлПрочитано = 0;
		Если Вопрос("Пометить данный документ как прочитанный?", 4, 60)  = 6 Тогда
			ФлПрочитано = 1;
		КонецЕсли;

		Объект_Почта.Подключиться();
	
		Объект_Почта.ВыбратьСообщения();
		Пока Объект_Почта.ПолучитьСообщение() = 1 Цикл
			
			ЗаголовокПисьма		= СокрЛП(Объект_Почта.Заголовок);
			АдресОтправителя	= Объект_Почта.АдресОтправителя();
			АдресОтправителя	= СтрЗаменить(АдресОтправителя, "SMTP:", "");
			
			Если 	(ЗаголовокПисьма	= ФормТабПочты.ЗаголовокПисьма)		И 
					(АдресОтправителя	= ФормТабПочты.АдресОтправителя)	Тогда
			
				Объект_Почта.ПрочитатьСообщение(ФлПрочитано);
				
				ИмяФайлаXML		= "TempXML.xml";
				КаталогФайлаXML	= КаталогИБ();
				
				Объект_Почта.ПолучитьФайл(ИмяФайлаXML, КаталогФайлаXML);
				                                                      
				ИмяИсточника	= КаталогФайлаXML + ИмяФайлаXML;
				ИмяПриемника	= КаталогИБ() + ЗаголовокПисьма + ".xml";
				
				Фс.КопироватьФайл(ИмяИсточника, ИмяПриемника, 0);
				
				ФормТабПочты.ПолноеИмяФайла = ИмяПриемника;
				
				Прервать;
				
			КонецЕсли;
		    
		КонецЦикла;	
		
		Объект_Почта.Отключиться();
		
		Форма.Параметр = ФормТабПочты.ПолноеИмяФайла;
		
		Форма.Закрыть();
		
	КонецЕсли;

КонецПроцедуры		//	ПриВыбореСообщения()

//******************************************************************************
// ЗаполнитьСписокОпераций()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Заполняет список отмеченными хоз. операциями
//
Процедура ЗаполнитьСписокОпераций()
	
	СписокХозОпераций.УдалитьВсе();
	
	ФормТабОпераций.ВыбратьСтроки();
	Пока ФормТабОпераций.ПолучитьСтроку() = 1 Цикл
		Если ФормТабОпераций.Пометка = Пометка_Включена Тогда
			СписокХозОпераций.ДобавитьЗначение(ФормТабОпераций.ХозОперация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры		//	ЗаполнитьСписокОпераций()

//******************************************************************************
// РольФирмы(ЭлДокумент)
//
// Параметры:
//  ЭлДокумент - узел документа
//
// Возвращаемое значение:
//  Строка - роль фирмы
//
// Описание:
//	Определяет роль собственной фирмы в полученном документе
//
Функция РольФирмы(ЭлДокумент)

	РольФирмы		=	"";
	РольКонтрагента	=	"";
	СпрКонтрагентов	=	СоздатьОбъект("Справочник.Контрагенты");
	СпрФирм			=	СоздатьОбъект("Справочник.Фирмы");
	Контрагенты		=	ЭлДокумент.ВыбратьУзлы("ПредприятиеВДокументе");
	Для Сч = 0 По Контрагенты.КоличествоУзлов() - 1 Цикл
		ЭлКонтрагент		=	Контрагенты.ПолучитьУзел(Сч);
		ИдПредприятия		=	ЭлКонтрагент.ПолучитьАтрибут("Контрагент");
		
		Если		СпрФирм.НайтиПоРеквизиту("Идентификатор", ИдПредприятия, 1)	= 1	Тогда
			РольФирмы		=	СписокРолейКонтрагента.Получить( ЭлКонтрагент.ПолучитьАтрибут("Роль") );
		ИначеЕсли	СпрКонтрагентов.НайтиПоРеквизиту("Идентификатор", ИдПредприятия, 1)	= 1	Тогда
			РольКонтрагента	=	СписокРолейКонтрагента.Получить( ЭлКонтрагент.ПолучитьАтрибут("Роль") );
		КонецЕсли;
	КонецЦикла;
	Если		ПустоеЗначение(РольФирмы + РольКонтрагента) = 1 Тогда
		Предупреждение("Документ некорректен - неидентифицированы организации!");
	ИначеЕсли	ПустоеЗначение(РольФирмы) = 1 Тогда
		Если		РольКонтрагента = "Продавец"	Тогда
			РольФирмы	=	"Покупатель";
		ИначеЕсли	РольКонтрагента = "Покупатель"	Тогда
			РольФирмы	=	"Продавец";
		ИначеЕсли	РольКонтрагента = "Плательщик"	Тогда
			РольФирмы	=	"Получатель";
		ИначеЕсли	РольКонтрагента = "Получатель"	Тогда
			РольФирмы	=	"Плательщик";
		КонецЕсли;
	КонецЕсли;
	
	Возврат(РольФирмы);
	
КонецФункции		//	РольФирмы()

//******************************************************************************
// ОпределитьВидДокумента(ПолноеИмяФайла)
//
// Параметры:
//  ПолноеИмяФайла
//
// Возвращаемое значение:
//  Чтрока - вид документа
//
// Описание:
//	Определяет вид загружаемого документа, в зависимости от хоз.операции и роли фирмы
//
Функция ОпределитьВидДокумента(ПолноеИмяФайла)
	               
	XML_Документ.Загрузить(ПолноеИмяФайла);
	Если ПустоеЗначение(XML_Документ) = 1 Тогда Возврат("") КонецЕсли;
	
	ЭлДокумент				=	XML_Документ.ВыбратьУзел("//Документ");
	
	Если ПустоеЗначение(ЭлДокумент) = 1 Тогда Возврат("") КонецЕсли;
	         
	РольФирмы			=	РольФирмы(ЭлДокумент);
	СтрХозОперация		=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	ВидДокумента		=	ПолучитьЗначениеКолонки(ФормТабОпераций, "ИндексПоиска", РольФирмы+СтрХозОперация, "ВидДокумента");
	
	Возврат( ВидДокумента );

КонецФункции		//	ОпределитьВидДокумента()

//******************************************************************************
// ОтделитьРазделителем(Стр, Разделитель)
//
// Параметры:
//  Стр, Разделитель
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Разделяет строку на подстроки: до и после разделителя
//
Функция ОтделитьРазделителем(Стр, Разделитель)
    
	ПраваяЧасть		=	"";
	Стр				=	СокрЛП(Стр);
	Разделитель		=	СокрЛП(Разделитель);
	ПозРазделителя	=	Найти(Стр, Разделитель);
	
	Если ПозРазделителя > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		ПозРазделителя + СтрДлина(Разделитель));
		Стр			=	СокрЛП(Лев(Стр,	ПозРазделителя-1));
	КонецЕсли;

	Возврат(СокрЛП(ПраваяЧасть));
	
КонецФункции		//	ОтделитьРазделителем()

//******************************************************************************
// ПрочитатьЗаголовкиПисем()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Заполняет таблицу полученных сообщений
//
Процедура ПрочитатьЗаголовкиПисем()
	
	Если (РежимРаботыОбработки = "Групповой") Или (РежимРаботыОбработки = "ВыборДокумента") Тогда
		ЗаполнитьСписокОпераций();
	КонецЕсли;
	
	ФормТабПочты.УдалитьСтроки();      
	         
	Объект_Почта.Подключиться();

	Объект_Почта.ВыбратьСообщения();
	Пока Объект_Почта.ПолучитьСообщение() = 1 Цикл
		   
		ЗаголовокПисьма		= СокрЛП(Объект_Почта.Заголовок);
		АдресОтправителя	= СокрЛП(Объект_Почта.АдресОтправителя());
		АдресОтправителя	= СтрЗаменить(АдресОтправителя, "SMTP:", "");
		              
		Комментарий			=	ЗаголовокПисьма;
		
		//ХозОперация		=	ОтделитьРазделителем(Комментарий,	"-/-");
		//НомерДок			=	ОтделитьРазделителем(ХозОперация,	"-/-");
		//
		//Если СписокХозОпераций.Принадлежит(ХозОперация) = 0 Тогда Продолжить КонецЕсли;
		
		Если ВхождениеНайдено(ЗаголовокПисьма, СписокПоддерживаемыхХозОпераций) = 0 Тогда Продолжить КонецЕсли;
		
		ФормТабПочты.НоваяСтрока();
		ФормТабПочты.ФлЗагрузить		= Пометка_Выключена;
		ФормТабПочты.ФлПрочитано		= Пометка_Выключена;
		ФормТабПочты.ЗаголовокПисьма	= ЗаголовокПисьма;
		ФормТабПочты.АдресОтправителя	= АдресОтправителя;
		ФормТабПочты.ИндексПоиска		= ЗаголовокПисьма + АдресОтправителя;
		ФормТабПочты.ДатаОтправки		= Объект_Почта.ДатаОтправки;
		                   
	КонецЦикла;
	
	Объект_Почта.Отключиться();
	
	Если (РежимРаботыОбработки = "Групповой") Или (РежимРаботыОбработки = "ВыборДокумента") Тогда
		//Форма.Закладки.ТекущаяСтрока(1);
		
		Если	РежимРаботыОбработки = "Групповой"	Тогда
			Форма.ИспользоватьСлой("Основной, Почта, РежимГрупповой",	2);
		Иначе
			Форма.ИспользоватьСлой("Основной, Почта, РежимДокумент",	2);
		КонецЕсли;
		
		Если (ФормТабПочты.КоличествоСтрок() > 0) И (РежимРаботыОбработки = "Групповой") Тогда
			Форма.кнВыполнить.Видимость(1);
		Иначе
			Форма.кнВыполнить.Видимость(0);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры		//	ПрочитатьЗаголовкиПисем()

//******************************************************************************
// ЗаписатьДокументы()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Создает и заполняет документы, отмеченные для загрузки
//
Процедура ЗаписатьДокументы()
	
    СписНовыхДокументов = СоздатьОбъект("СписокЗначений");

	ФормТабПочты.ВыбратьСтроки();
	Пока ФормТабПочты.ПолучитьСтроку() = 1 Цикл
		ФлЗагрузить			= ФормТабПочты.ФлЗагрузить;
		ПолноеИмяФайла		= ФормТабПочты.ПолноеИмяФайла;
		ЗаголовокПисьма		= ФормТабПочты.ЗаголовокПисьма;
		АдресОтправителя	= ФормТабПочты.АдресОтправителя;
		
		Если (ФлЗагрузить = Пометка_Выключена) Или (ПустоеЗначение(ПолноеИмяФайла) = 1) Тогда Продолжить КонецЕсли;
		
		//Комментарий		=	ЗаголовокПисьма;
		//
		//ХозОперация		=	ОтделитьРазделителем(Комментарий,	" -/- ");
		//НомерДок			=	ОтделитьРазделителем(ХозОперация,	" -/- ");
		                                
		ВидДокумента		=	ОпределитьВидДокумента(ПолноеИмяФайла);
		
		Если ПустоеЗначение(ВидДокумента) = 1 Тогда	Продолжить КонецЕсли;
		
		Док = СоздатьОбъект("Документ." + ВидДокумента);
		Док.Новый();
		Док.УстановитьНовыйНомер(Константа.ПрефиксИБ);
		Док.ДатаДок		= РабочаяДата();
		//Док.Комментарий = "Операция: " + ХозОперация + " ; Номер документа отправителя: " + НомерДок + " ; Адрес отправителя: " + АдресОтправителя;
		Док.Комментарий = "Адрес отправителя: " + АдресОтправителя + "  Тема: " + ЗаголовокПисьма;
		глЗаполнитьШапку(Док, 0);
		Док.Записать();
		
		СписПараметров = СоздатьОбъект("СписокЗначений");
		СписПараметров.ДобавитьЗначение(ПолноеИмяФайла,				"ПолноеИмяФайла");
		СписПараметров.ДобавитьЗначение(Док,						"Документ");
		
		ОткрытьФормуМодально("Обработка.XMLЗагрузкаДокументовПоСхеме", СписПараметров);
		
		Док.Записать();
		              
		СписНовыхДокументов.ДобавитьЗначение(Док);
		
		Фс.УдалитьФайл(ПолноеИмяФайла);
	КонецЦикла;
    
	//Если СписНовыхДокументов.РазмерСписка() > 0 Тогда
	//	ОткрытьФорму("Обработка.ГрупповаяОбработкаДокументов#", СписНовыхДокументов);
	//КонецЕсли;
	
КонецПроцедуры		//	ЗаписатьДокументы()

//******************************************************************************
// Выполнить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	Кнопка "Выполнить"
//	
// Описание:
//	Копирует полученные документы во временные файлы и запускает процедуру загрузки
//
Процедура Выполнить()
    
	СчДок	=	1;
	
	Объект_Почта.Подключиться();

	Объект_Почта.ВыбратьСообщения();
	Пока Объект_Почта.ПолучитьСообщение() = 1 Цикл
		
		ЗаголовокПисьма		= СокрЛП(Объект_Почта.Заголовок);
		АдресОтправителя	= СокрЛП(Объект_Почта.АдресОтправителя());
		АдресОтправителя	= СтрЗаменить(АдресОтправителя, "SMTP:", "");
		ИндексПоиска		= ЗаголовокПисьма + АдресОтправителя;
		
		ФлПрочитано			= ПолучитьЗначениеКолонки(ФормТабПочты, "ИндексПоиска", ИндексПоиска, "ФлПрочитано");
		ФлЗагрузить			= ПолучитьЗначениеКолонки(ФормТабПочты, "ИндексПоиска", ИндексПоиска, "ФлЗагрузить");
		           
		Если (ПустоеЗначение(ФлПрочитано) = 1) Или (ПустоеЗначение(ФлЗагрузить) = 1) Тогда Продолжить КонецЕсли;
		
		Объект_Почта.ПрочитатьСообщение(ФлПрочитано - Пометка_Выключена);
		
		Если ФлЗагрузить = Пометка_Включена Тогда
			
			ИмяФайлаXML		= "TempXML.xml";
			КаталогФайлаXML	= КаталогИБ();
			
			Объект_Почта.ПолучитьФайл(ИмяФайлаXML, КаталогФайлаXML);
			                                                      
			ИмяИсточника	= КаталогФайлаXML + ИмяФайлаXML;
			ИмяПриемника	= КаталогИБ() + "TempXML" + СчДок + ".xml";
			
			Фс.КопироватьФайл(ИмяИсточника, ИмяПриемника, 0);
			
			УстановитьЗначениеКолонки(ФормТабПочты, "ИндексПоиска", ИндексПоиска, "ПолноеИмяФайла", ИмяПриемника);
			
			СчДок	=	СчДок + 1;
			
		КонецЕсли;
	    
	КонецЦикла;	
	
	Объект_Почта.Отключиться();

	ЗаписатьДокументы();
	
	ПрочитатьЗаголовкиПисем();
	
КонецПроцедуры		//	Выполнить()

//******************************************************************************
// ДобавитьОперацию(РольФирмы, ХозОперация, ВидДокумента, Представление)
//
// Параметры:
//  РольФирмы, ХозОперация, ВидДокумента, Представление
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Добавляет описание хоз операции в таблицу
//
Процедура ДобавитьОперацию(РольФирмы, ХозОперация, ВидДокумента, Представление)
	
	ФормТабОпераций.НоваяСтрока();
	ФормТабОпераций.Пометка			=	Пометка_Включена;
	ФормТабОпераций.РольФирмы		=	РольФирмы;
	ФормТабОпераций.ВидДокумента	=	ВидДокумента;
	ФормТабОпераций.ХозОперация		=	ХозОперация;
	ФормТабОпераций.Представление	=	Представление;
	ФормТабОпераций.ИндексПоиска	=	РольФирмы + ХозОперация;
	
КонецПроцедуры		//	ДобавитьОперацию()

//******************************************************************************
// ДобавитьЗакладки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	
//
Процедура ДобавитьЗакладки()
	    
	Форма.ИспользоватьСлой("Основной, Почта, РежимГрупповой",	2);
	
	//Форма.ИспользоватьЗакладки(1);
	//
	//Форма.Закладки.УдалитьВсе();
	//Форма.Закладки.ДобавитьЗначение("Основная",		"Почта");
	//Форма.Закладки.ДобавитьЗначение("Настройка", 	"Настройка");
	//             
	//Если	РежимРаботыОбработки = "Групповой"	Тогда
	//	Форма.ИспользоватьСлой("Основной, Почта, РежимГрупповой",	2);
	//Иначе
	//	Форма.ИспользоватьСлой("Основной, Почта, РежимДокумент",	2);
	//КонецЕсли;
	
КонецПроцедуры		//	ДобавитьЗакладки()


////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(Ном, ИмяЗакладки)
	          
	Если ИмяЗакладки = "Основная" Тогда
		
		Если		РежимРаботыОбработки = "Групповой"									Тогда
			
			Форма.ИспользоватьСлой("Основной, Почта, РежимГрупповой", 2);
			
		ИначеЕсли	(РежимРаботыОбработки = "Документ") Или (РежимРаботыОбработки = "ВыборДокумента")	Тогда
			
			Форма.ИспользоватьСлой("Основной, Почта, РежимДокумент", 2);
			
		КонецЕсли;
		
	ИначеЕсли ИмяЗакладки = "Настройка" Тогда
		
		Форма.ИспользоватьСлой("Основной, Настройка", 2);
		
		Если РежимРаботыОбработки = "Групповой" Тогда
			Форма.ИспользоватьСлой("ЗаписыватьДокументыНаДату", 1);
		Иначе
			Форма.ИспользоватьСлой("ЗаписыватьДокументыНаДату", 0);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ФормТабПочты.КоличествоСтрок() > 0) И (РежимРаботыОбработки = "Групповой") Тогда
		Форма.кнВыполнить.Видимость(1);
	Иначе
		Форма.кнВыполнить.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
				Предупреждение("Компонента v7plus.dll не найдена!");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;    
	
	Попытка
		Объект_Почта = СоздатьОбъект("AddIn.V7Mail");
	Исключение 
		Предупреждение("Не удалось создать объект Addin.V7Mail!");
		Возврат;
	КонецПопытки;
	
	Анализатор		=	СоздатьОбъект("AddIn.XMLParser");
	XML_Документ	=	Анализатор.СоздатьДокумент();
	
                           
	СписокХозОпераций	= СоздатьОбъект("СписокЗначений");
	
	Конт				= Форма.Параметр;
	
	Если		Конт = "ВыборДокумента" Тогда

		РежимРаботыОбработки	=	"ВыборДокумента";
		
		ФормТабПочты.ВидимостьКолонки("ФлПрочитано", 	0);
		ФормТабПочты.ВидимостьКолонки("ФлЗагрузить", 	0);
		
		//ДобавитьЗакладки();
		Форма.ИспользоватьСлой("Основной, Почта, РежимДокумент",	2);
		
	ИначеЕсли	ПустоеЗначение(Конт) = 1 Тогда
		
		РежимРаботыОбработки = "Групповой";
		
		ФормТабПочты.ВидимостьКолонки("ФлПрочитано", 	1);
		ФормТабПочты.ВидимостьКолонки("ФлЗагрузить", 	1);
		
		//ДобавитьЗакладки();
		Форма.ИспользоватьСлой("Основной, Почта, РежимГрупповой",	2);
		
	Иначе
	    Если		ТипЗначенияСтр(Конт) = "ГрупповойКонтекст" Тогда
			                 
			РежимРаботыОбработки = "Документ";
			
			Форма.ИспользоватьСлой("Основной, Почта, РежимДокумент", 2);
			
			ВидТекущегоДокумента 	= Конт.Вид();			
			ПредОперации	= ПолучитьЗначениеКолонки(ФормТабОпераций, "ВидДокумента", ВидТекущегоДокумента, "Представление");
			ХозОперация		= ПолучитьЗначениеКолонки(ФормТабОпераций, "ВидДокумента", ВидТекущегоДокумента, "ХозОперация");
			СписокХозОпераций.ДобавитьЗначение(ХозОперация);
			
	    	Форма.Заголовок("  Выбор документа по операции:     " + ПредОперации);
			
			ПрочитатьЗаголовкиПисем();
			
	    ИначеЕсли	ТипЗначенияСтр(Конт) = "СписокЗначений" Тогда
	                          
			Форма.Заголовок("");
			
	    КонецЕсли;
	КонецЕсли;
	
	Форма.кнВыполнить.Видимость(0);
	
КонецПроцедуры		//	ПриОткрытии()

//******************************************************************************
                           

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
//******************************************************************************

ФормДатаДок			= РабочаяДата();

Пометка_Выключена	= 1;
Пометка_Включена	= 2;


ФормТабОпераций.НоваяКолонка("Пометка", 		"Число", 1, 0,	"", 2);
ФормТабОпераций.НоваяКолонка("Представление",	"Строка", , ,	"Хозяйственная операция", 40);
ФормТабОпераций.НоваяКолонка("ВидДокумента", 	"Строка");
ФормТабОпераций.НоваяКолонка("ХозОперация", 	"Строка");
ФормТабОпераций.НоваяКолонка("РольФирмы",		"Строка");
ФормТабОпераций.НоваяКолонка("ИндексПоиска",	"Строка");
                        

ФормТабОпераций.ВидимостьКолонки("РольФирмы",		0);
ФормТабОпераций.ВидимостьКолонки("ИндексПоиска",	0);
ФормТабОпераций.ВидимостьКолонки("ВидДокумента",	0);
ФормТабОпераций.ВидимостьКолонки("ХозОперация",		0);

ФормТабОпераций.ВыводитьПиктограммы("Пометка");


СписокРолейКонтрагента	=	СоздатьОбъект("СписокЗначений");
СписокРолейКонтрагента.ДобавитьЗначение("Продавец",		"Saler");
СписокРолейКонтрагента.ДобавитьЗначение("Покупатель",	"Buyer");
СписокРолейКонтрагента.ДобавитьЗначение("Плательщик",	"Payer");
СписокРолейКонтрагента.ДобавитьЗначение("Получатель",	"Recipient");
                                           

СписокПоддерживаемыхХозОпераций	=	СоздатьОбъект("СписокЗначений");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Order");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("PayableBill");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Sale");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Comission");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("BackSale");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("BackComission");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Invoice");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Cash");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("BackCash");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("Payment");
СписокПоддерживаемыхХозОпераций.ДобавитьЗначение("BackPayment");



ДобавитьОперацию("Покупатель",	"Order",			"ЗаказПоставщику",			"Заказ товара поставщику");
ДобавитьОперацию("Продавец",	"Order",			"ЗаявкаПокупателя",			"Заказ товара от покупателя (Заявка покупателя)");

ДобавитьОперацию("Покупатель",	"PayableBill",		"ПлатежноеПоручение",		"Платежное поручение");
ДобавитьОперацию("Продавец",	"PayableBill",		"ЗаявкаПокупателя",			"Счет на оплату (Заявка покупателя)");

ДобавитьОперацию("Покупатель",	"Sale",				"ПоступлениеТМЦ",			"Поступление товара");
ДобавитьОперацию("Продавец",	"Sale",				"Реализация",				"Отпуск товара");

ДобавитьОперацию("Покупатель",	"Comission",		"ПоступлениеТМЦ",			"Прием товара на реализацию");
ДобавитьОперацию("Продавец",	"Comission",		"Реализация",				"Передача товара на реализацию");

ДобавитьОперацию("Покупатель",	"BackSale",			"ВозвратОтПокупателя",		"Возврат товара от покупателя");
ДобавитьОперацию("Продавец",	"BackSale",			"ВозвратПоставщику",		"Возврат товара поставщику");

ДобавитьОперацию("Покупатель",	"BackComission",	"ВозвратОтПокупателя",		"Возврат товара от комиссионера");
ДобавитьОперацию("Продавец",	"BackComission",	"ВозвратПоставщику",		"Возврат товара комитенту");                                                                                                

ДобавитьОперацию("Покупатель",	"Invoice",			"СчетФактураПолученный",	"Счет-Фактура поставщика");
ДобавитьОперацию("Продавец",	"Invoice",			"СчетФактураВыданный",		"Счет-Фактура покупателю");


ДобавитьОперацию("Получатель",	"ReportComission",	"ОтчетКомиссионера",		"Отчет комиссионера");
ДобавитьОперацию("Плательщик",	"ReportComission",	"ОтчетКомитенту",			"Отчет комитенту");



ДобавитьОперацию("Получатель",	"Cash",				"ПКО",						"Поступление наличных денег от покупателя");
ДобавитьОперацию("Плательщик",	"Cash",				"РКО",						"Выплата наличных денег поставщику");

ДобавитьОперацию("Получатель",	"BackCash",			"ПКО",						"Возврат наличных денег от поставщика");
ДобавитьОперацию("Плательщик",	"BackCash",			"РКО",						"Возврат наличных денег покупателю");

ДобавитьОперацию("Получатель",	"Payment",			"СтрокаВыпискиПриход",		"Поступление  безналичных денег от покупателя");
ДобавитьОперацию("Плательщик",	"Payment",			"СтрокаВыпискиРасход",		"Выплата безналичных денег поставщику");

ДобавитьОперацию("Получатель",	"BackPayment",		"СтрокаВыпискиПриход",		"Возврат безналичных денег от поставщика");
ДобавитьОперацию("Плательщик",	"BackPayment",		"СтрокаВыпискиРасход",		"Возврат безналичных денег покупателю");

//******************************************************************************

ФормТабПочты.НоваяКолонка("ФлЗагрузить", "Число", 4, 0, 		"Загрузить",									13);
ФормТабПочты.НоваяКолонка("ФлПрочитано", "Число", 4, 0, 		"Прочитан",										12);
ФормТабПочты.НоваяКолонка("ЗаголовокПисьма", , , , 				"Комментарий -/- Операция -/- Номер документа",	60);
ФормТабПочты.НоваяКолонка("ДатаОтправки", , , , 				"Дата отправки",								14);
ФормТабПочты.НоваяКолонка("АдресОтправителя", , , , 			"Адрес отправителя",							14);
ФормТабПочты.НоваяКолонка("ПолноеИмяФайла");
ФормТабПочты.НоваяКолонка("ИндексПоиска");

ФормТабПочты.ВыводитьПиктограммы("ФлЗагрузить");
ФормТабПочты.ВыводитьПиктограммы("ФлПрочитано");

ФормТабПочты.ВидимостьКолонки("ФлЗагрузить", 	0);
ФормТабПочты.ВидимостьКолонки("ФлПрочитано", 	0);
ФормТабПочты.ВидимостьКолонки("ПолноеИмяФайла", 0);
ФормТабПочты.ВидимостьКолонки("ИндексПоиска",	0);

//******************************************************************************
