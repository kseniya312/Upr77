////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем СписокИзмененныхРеквизитов; // Список измененных реквизитов записываемого объекта.
Перем СписокЗагруженныхОбъектов;  // Список загруженных элементов справочников.
Перем СписокКолонокТаблицы;       // Список колонок загружаемой таблицы.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ЗаполнитьТексты()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполнение текстов в диалоге.
//
Процедура ЗаполнитьТексты()
	
	Стр = 
	"Эти справочники заполняются и перезаполняется автоматически при первом открытии и при обновлении 
	|информационной базы, а так же при заполнении остальных справочников механизма настройки 
	|формирования проводок. Редактировать эти справочники вручную запрещено.";
	Форма.Текст1.Заголовок(Стр);
	
	Стр = 
	"Эти справочники должны быть заполнены в полном соответсвии с бухгалтерской конфигурацией, в которую 
	|будет настраиваться выгрузка проводок по торговым операциям. С помощью данной обработки вы можете 
	|заполнить эти справочники для настройки выгрузки проводок в конфигурацию ""1С:Бухгалтерия"".";
	Форма.Текст2.Заголовок(Стр);
	
	Стр = 
	"В этом справочнике настраивается формирование бухгалтерских проводок по хозяйственным операциям 
	|оперативного учета. С помощью данной обработки справочник может быть заполнен и перезаполнен
	|автоматически типовыми настройками  для выгрузки проводок в конфигурацию ""1С:Бухгалтерия"".";
	Форма.Текст3.Заголовок(Стр);
	
КонецПроцедуры // ЗаполнитьТексты()

//******************************************************************************
// ПриУстановкеФлагов()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Флаги "Заполнить...".
//
// Описание:
//  Отработка установки флагов.
//
Процедура ПриУстановкеФлагов()
	
	Если ЗаполнитьПроводки = 1 Тогда
		ЗаполнитьПланСчетов = 1;
		
		Форма.ЗаполнитьПланСчетов.Доступность(0);
		
		Если ВариантыЗаполнения.РазмерСписка() <> 0 Тогда
			Форма.ТекстВариантЗаполнения.Доступность(1);
			Форма.ВариантыЗаполнения.Доступность(1);
			
			Если ВариантыЗаполнения.ТекущаяСтрока() = 0 Тогда
				ВариантыЗаполнения.ТекущаяСтрока(1);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		Форма.ЗаполнитьПланСчетов.Доступность(1);
		
		Форма.ТекстВариантЗаполнения.Доступность(0);
		Форма.ВариантыЗаполнения.Доступность(0);
		
	КонецЕсли;
	
КонецПроцедуры // ПриУстановкеФлагов()

//******************************************************************************
// ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, ТекстСообщения="")
//
// Параметры:
//  Объект          - элемент справочника, который записывается или удаляется.
//  Текст сообщения - "строка" - начало сообщения.
//  СписокИзмененныхРеквизитов - список реквизитов подлежащих изменению
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Выводит текст сообщений об измененях, производимых в информационной базе.
//
Процедура ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, ТекстСообщения="")
	
	Перем Реквизит;
	
	// Стандартное начало сообщения: "Создан" или "Изменен".
	
	Если ПустаяСтрока(ТекстСообщения) = 1 Тогда
		Если Объект.Выбран() = 0 Тогда
			ТекстСообщения = "Создан";
			
		ИначеЕсли 0 < СписокИзмененныхРеквизитов.РазмерСписка() Тогда
			ТекстСообщения = "Изменен";
			
		Иначе
			Возврат;
		КонецЕсли;
		
		Если Объект.ЭтоГруппа() = 0 Тогда
			ТекстСообщения = ТекстСообщения+" элемент";
		Иначе
			ТекстСообщения = ТекстСообщения+"а группа";
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения+" справочника """+Объект.ПредставлениеВида()+""":";
	
	// Полные код и наименование объекта.
	
	ПолныйКод          = Объект.Код;
	ПолноеНаименование = Объект.Наименование;
	
	Если ПустоеЗначение(Объект.Владелец) = 0 Тогда
		ПолныйКод          = Объект.Владелец.ПолныйКод()         +"/"+ПолныйКод;
		ПолноеНаименование = Объект.Владелец.ПолноеНаименование()+"/"+ПолноеНаименование;
	КонецЕсли;
	
	Если ПустоеЗначение(Объект.Владелец) = 0 Тогда
		ПолныйКод          = Объект.Владелец.ПолныйКод()         +"/"+ПолныйКод;
		ПолноеНаименование = Объект.Владелец.ПолноеНаименование()+"/"+ПолноеНаименование;
	КонецЕсли;
	
	ТекстСообщения = ТекстСообщения+" ("+ПолныйКод+") """+ПолноеНаименование+"""";
	
	Сообщить(ТекстСообщения, ".");
	
	// Измененные реквизиты измененного объекта.
	
	Если Объект.Выбран() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Номер = 1 По СписокИзмененныхРеквизитов.РазмерСписка() Цикл
		СтароеЗначение = СписокИзмененныхРеквизитов.ПолучитьЗначение(Номер, Реквизит);
		НовоеЗначение  = Объект.ПолучитьАтрибут(Реквизит);
		
		мдРеквизит = Метаданные.Справочник(Объект.Вид()).Реквизит(Реквизит);
		Если мдРеквизит.Выбран() = 1 Тогда
			Реквизит = мдРеквизит.Представление();
		КонецЕсли;
		
		Сообщить("Реквизит """+Реквизит+""": новое значение """ + НовоеЗначение + """, старое значение """ + СтароеЗначение + """", " ");
	КонецЦикла;
	
КонецПроцедуры // ВывестиСообщение()

//******************************************************************************
// СнятьПометкуУдаления(Объект)
//
// Параметры:
//  Объект - Справочник.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Отмена удаления элемента справочника.
//
Процедура СнятьПометкуУдаления(Объект)
	
	Если Объект.ПометкаУдаления() = 1 Тогда
		Если Объект.ЭтоГруппа() = 1 Тогда
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, "Отменено удаление группы");
		Иначе
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, "Отменено удаление элемента");
		КонецЕсли;
		
		Попытка
			Объект.СнятьПометкуУдаления();
		Исключение
			Сообщить(ОписаниеОшибки(), "!!");
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // СнятьПометкуУдаления()

//******************************************************************************
// УдалитьЛишниеЭлементы(ВидСправочника, НомерЖурнала = "все")
//
// Параметры:
//  ВидСправочника - "строка" - вид справочника, в котором нужно удалить лишние элементы.
//  НомерЖурнала - значение для отбора элементов справочника "ПроводкиХозОпераций"
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:  
//  Процедура помечает на удаление элементы справочника, не содержащиеся в списке
//  СписокЗагруженныхОбъектов.
//
Процедура УдалитьЛишниеЭлементы(ВидСправочника, НомерЖурнала = "все")
	
	Объект = СоздатьОбъект("Справочник." + ВидСправочника);
	Объект.ВыбратьЭлементы(0);
	
	Пока Объект.ПолучитьЭлемент(1) = 1 Цикл
		Если СписокЗагруженныхОбъектов.НайтиЗначение(Объект.ТекущийЭлемент()) > 0 Тогда
			Продолжить;
		КонецЕсли;

		Если (Объект.Вид() = "ПроводкиХозОпераций")
		   и (Объект.ЭтоГруппа() = 0) Тогда
		    Если ПустаяСтрока(Объект.НомерЖурнала) = 0 Тогда
				Если НомерЖурнала <> "все" Тогда
					// Дополнительно отфильтровываем проводки по всем номерам журналов заданных в конфигураторе
					Если СокрЛП(Объект.НомерЖурнала) <> НомерЖурнала Тогда
						Продолжить;
					КонецЕсли;
				Иначе
					// Дополнительно отфильтровываем проводки по конкретному значению реквизита "НомерЖурнала"
					Если ВариантыЗаполнения.НайтиЗначение(СокрЛП(Объект.НомерЖурнала)) = 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

		Если Объект.ПометкаУдаления() = 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Объект.ЭтоГруппа() = 1 Тогда
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, "Удалена группа");
		Иначе
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов, "Удален элемент");
		КонецЕсли;
		
		Попытка
			Объект.Удалить(0);
		Исключение
			Сообщить(ОписаниеОшибки(), "!!");
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры // УдалитьЛишниеЭлементы()
		
//******************************************************************************
// УстановитьРеквизит(Объект, Реквизит, Значение, ФлагИзменения, СписокИзмененныхРеквизитов)
//
// Параметры:
//  Объект        - справочник, в котором нужно установить значение атрибута.
//  Реквизит      - "строка", идентификатор атрибута значение которого нужно установить.
//  Значение      - <неопределенное>, значение атрибута которое нужно установить.
//  ФлагИзменения - переменная, при изменении значения атрибута присваивается 1.
//  СписокИзмененныхРеквизитов - перечень реквизитов, которые изменяются
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:  
//  Процедура устанавливает новое значение атрибута справочника, если он изменился.
//
Процедура УстановитьРеквизит(Объект, Реквизит, Значение, ФлагИзменения, СписокИзмененныхРеквизитов)
	
	СтароеЗначение = Объект.ПолучитьАтрибут(Реквизит);
	
	Если ТипЗначенияСтр(Значение) = "Строка" Тогда 
		Значение       = СокрЛП(Значение);
		СтароеЗначение = СокрЛП(СтароеЗначение);
	КонецЕсли;
			
	Если СтароеЗначение = Значение Тогда
		Возврат;
	КонецЕсли;
	
	мдРеквизит = Метаданные.Справочник(Объект.Вид()).Реквизит(Реквизит);
	
	Если мдРеквизит.Выбран() = 1 Тогда
		Если мдРеквизит.Тип = "Неопределенный" Тогда
			ТипВидРекв = ТипЗначенияСтр(Значение);
			
			Если (ТипВидРекв = "Справочник") ИЛИ (ТипВидРекв = "Перечисление") ИЛИ (ТипВидРекв = "Документ") Тогда
				ТипВидРекв = ТипВидРекв + "." + Значение.Вид();
			КонецЕсли;
			
			Объект.НазначитьТип(Реквизит, ТипВидРекв);
		КонецЕсли;
	КонецЕсли;
	
	Объект.УстановитьАтрибут(Реквизит, Значение);
	
	Если Реквизит <> "Код" Тогда
		СписокИзмененныхРеквизитов.ДобавитьЗначение(СтароеЗначение, Реквизит);
	КонецЕсли;
	
	ФлагИзменения = 1;
	
КонецПроцедуры // УстановитьРеквизит()

//******************************************************************************
// ПолучитьЯчейку(Таблица, Стр, Кол)
//
// Параметры:
//  Таблица - "Таблица" - таблица, из которой надо получить значение ячейки.
//  Стр     - "число"- номер строки таблицы.
//  Кол     - "строка" или "исло" - название или номер колонки таблицы.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:  
//  Возвращает значение ячейки таблицы по номеру строки и номеру или названию колонки.
//
Функция ПолучитьЯчейку(Таблица, Стр, Знач Кол)
	
	Если ТипЗначенияСтр(Кол) = "Строка" Тогда
		Если 0 < СписокКолонокТаблицы.Получить(Кол) Тогда
			Кол = СписокКолонокТаблицы.Получить(Кол);
		Иначе
			Кол = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(Таблица.Область(Стр, Кол).Текст);
	
КонецФункции // ПолучитьЯчейку()

//******************************************************************************
// ПолучитьТипЗначенияТорг(ТипВидСубконто)
//
// Параметры:
//  ТипВидСубконто - строка, тип и вид справочника в бухгалтерской конфигурации.
//
// Возвращаемое значение:
//  Тип.Вид - тип и вид справочника, в конфигурации "Торговля+Склад".
//  
// Вызывается из формул элементов диалога:
//
// Описание:
//  Определяет соответствие между справочниками конфигураций.
//
Функция ПолучитьТипЗначенияТорг(ТипВидСубконто)
	
	Если      ТипВидСубконто = "Справочник.Контрагенты" Тогда
		Возврат                "Справочник.Контрагенты";
		
	ИначеЕсли ТипВидСубконто = "Справочник.Договоры" Тогда
		Возврат                "Справочник.Договоры";
		
	ИначеЕсли ТипВидСубконто = "Справочник.БанковскиеСчета" Тогда
		Возврат                "Справочник.БанковскиеСчета";
		
	ИначеЕсли ТипВидСубконто = "Справочник.Сотрудники" Тогда
		Возврат                "Справочник.ФизЛица";
		
	ИначеЕсли ТипВидСубконто = "Справочник.МестаХранения" Тогда
		Возврат                "Справочник.Склады";
		
	ИначеЕсли ТипВидСубконто = "Справочник.Материалы" Тогда
		Возврат                "Справочник.Номенклатура";
		
	ИначеЕсли ТипВидСубконто = "Справочник.Номенклатура" Тогда
		Возврат                "Справочник.Номенклатура";
		
	ИначеЕсли ТипВидСубконто = "Справочник.ДвиженияДенежныхСредств" Тогда
		Возврат                "Справочник.ДвиженияДенежныхСредств";
		                
	ИначеЕсли ТипВидСубконто = "Справочник.СтавкиНДС" Тогда
		Возврат                "Перечисление.СтавкиНДС";
		
	ИначеЕсли ТипВидСубконто = "Справочник.СтавкиНП" Тогда
		Возврат                "Справочник.СтавкиНП";
		
	ИначеЕсли ТипВидСубконто = "Документ.СчетФактураПолученный" Тогда
		Возврат                "Документ.СчетФактураПолученный";

	ИначеЕсли ТипВидСубконто = "Документ.СчетФактура" Тогда
		Возврат                "Документ.СчетФактураВыданный";

	Иначе
		Возврат                "";
	КонецЕсли;
	
КонецФункции // ПолучитьТипЗначенияТорг()

//******************************************************************************
// ПолучитьВидСубконто(ТекстСубконто)
//
// Параметры:
//  ТекстСубконто - "строка" - описание вида субконто.
//
// Возвращаемое значение:
//  справочник "ВидыСубконто" - элемент справочника "ВидыСубконто".
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция осуществляет поиск элемента справочника "ВидыСубконто"
// виду, если не находит - создается новый элемент.
//
Функция ПолучитьВидСубконто(ТекстСубконто)
 Перем СписокИзмененныхРеквизитов;
	
	Если СтрКоличествоСтрок(ТекстСубконто) < 3 Тогда
		Возврат "";
	КонецЕсли;
	
	Новый = 0;
	Объект = СоздатьОбъект("Справочник.ВидыСубконто");
	
	Если Объект.НайтиПоНаименованию(СтрПолучитьСтроку(ТекстСубконто, 2), 1, 1) = 0 Тогда
		Объект.Новый();
		Объект.Идентификатор  = СтрПолучитьСтроку(ТекстСубконто, 1);
		Объект.Наименование   = СтрПолучитьСтроку(ТекстСубконто, 2);
		Объект.ТипЗначенияБух = СтрПолучитьСтроку(ТекстСубконто, 3);
		
		Если Лев(Объект.ТипЗначенияБух,10) = "Справочник" Тогда
			Объект.ИдРеквизита = "Наименование";
		КонецЕсли;
		
		ФлагИзменения = 1;
	Иначе
		ФлагИзменения = 0;
	КонецЕсли;
	
	СписокИзмененныхРеквизитов = СоздатьОбъект("СписокЗначений");
	
	УстановитьРеквизит(Объект, "ТипЗначенияТорг", ПолучитьТипЗначенияТорг(СтрПолучитьСтроку(ТекстСубконто, 3)), ФлагИзменения, СписокИзмененныхРеквизитов);
	
	Если ФлагИзменения = 1 Тогда
		ВывестиСообщение(Объект, СписокИзмененныхРеквизитов);
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), "!!");
			Возврат ПолучитьПустоеЗначение("Справочник.ВидыСубконто");
		КонецПопытки;
		
	КонецЕсли;
	
	Если СписокЗагруженныхОбъектов.НайтиЗначение(Объект.ТекущийЭлемент()) = 0 Тогда
		СписокЗагруженныхОбъектов.ДобавитьЗначение(Объект.ТекущийЭлемент());
		СнятьПометкуУдаления(Объект);
	КонецЕсли;
	
	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // ПолучитьВидСубконто()

//******************************************************************************
// ЗаполнитьНомераЖурналов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Создание списка различных номеров журналов в справочнике проводок
//
Процедура ЗаполнитьНомераЖурналов()
	// Исходная таблица.
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("Проводки");
	Таблица.Вывести();

	ВариантыЗаполнения.УдалитьВсе();

	НомерЖурнала = 22;
	
	Для Стр = 2 По Таблица.ВысотаТаблицы() Цикл
		Если ПустоеЗначение(Таблица.Область(Стр, НомерЖурнала).Текст) = 0 Тогда
			Если ВариантыЗаполнения.НайтиЗначение(СокрЛП(Таблица.Область(Стр, НомерЖурнала).Текст)) = 0 Тогда
				ВариантыЗаполнения.ДобавитьЗначение(СокрЛП(Таблица.Область(Стр, НомерЖурнала).Текст));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантыЗаполнения.РазмерСписка() <> 0 Тогда
		ВариантыЗаполнения.ВставитьЗначение(1, "все", "По всем журналам");
	    
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьНомераЖурналов()

//******************************************************************************
// ЗаполнитьПланСчетов()
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполнение справочников "ПланСчетов" и "ВидыСубконто".
//
Процедура ЗаполнитьПланСчетов()
	
	Объект      = СоздатьОбъект("Справочник.ПланСчетов");
	СпрПСГруппа = СоздатьОбъект("Справочник.ПланСчетов");
	
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("ПланСчетов");
	Таблица.Вывести();
	
	Для Стр = 2 По Таблица.ВысотаТаблицы() Цикл
		Состояние("Заполняется справочник ""План счетов"": загружено "+Стр+" строк");
		
		КодСчета    = ПолучитьЯчейку(Таблица, Стр, 2);
		Список      = глРазложить(КодСчета, ".");
		КодРодителя = "";
		Родитель    = ПолучитьПустоеЗначение("Справочник.ПланСчетов"); 
		ЭтоГруппа 	= Число(ПолучитьЯчейку(Таблица, Стр, 1));
		
		// Получение кода группы счетов.
		Для Номер = 1 По Список.РазмерСписка() - 2 Цикл
			КодРодителя = КодРодителя+Список.ПолучитьЗначение(Номер)+".";
		КонецЦикла;
		Если Номер = Список.РазмерСписка() - 1 Тогда
			КодРодителя = КодРодителя+Список.ПолучитьЗначение(Номер);
		КонецЕсли;
		
		// Группа счетов.
		Объект.НайтиПоКоду(КодРодителя, 0);
		Если Объект.ЭтоГруппа() = 1 Тогда
			Родитель = Объект.ТекущийЭлемент();
		КонецЕсли;
		
		// Поиск счета.
		Если Объект.НайтиПоКоду(КодСчета, 0) = 0 Тогда
			// Создание нового счета.
			Если Число(ПолучитьЯчейку(Таблица, Стр, 1)) = 1 Тогда
				Объект.НоваяГруппа();
			Иначе
				Объект.Новый();
			КонецЕсли;
			
			Объект.Код = КодСчета;
			
			ФлагИзменения = 1;
		ИначеЕсли Объект.ЭтоГруппа() <> ЭтоГруппа Тогда
			    
			// Если объект был элементом, а стал группой или наоборот.
			Объект.Код = "_" + Объект.Код;
			Объект.Удалить(0);            
			ФлагИзменения = 1;    
			
			Если ЭтоГруппа = 1 Тогда
				Объект.НоваяГруппа();
			Иначе 
				Объект.Новый();                                       
			КонецЕсли;
			
			Объект.Код = КодСчета;				
			
		Иначе
			ФлагИзменения = 0;
		КонецЕсли;
		
		СписокИзмененныхРеквизитов = СоздатьОбъект("СписокЗначений");
		
		УстановитьРеквизит(Объект, "Родитель",       Родитель, ФлагИзменения, СписокИзмененныхРеквизитов);
		УстановитьРеквизит(Объект, "Наименование",   ПолучитьЯчейку(Таблица, Стр, 3), ФлагИзменения, СписокИзмененныхРеквизитов);
		
		УстановитьРеквизит(Объект, "ВидСубконто1",   ПолучитьВидСубконто(ПолучитьЯчейку(Таблица, Стр, 5)), ФлагИзменения, СписокИзмененныхРеквизитов);
		УстановитьРеквизит(Объект, "ВидСубконто2",   ПолучитьВидСубконто(ПолучитьЯчейку(Таблица, Стр, 6)), ФлагИзменения, СписокИзмененныхРеквизитов);
		УстановитьРеквизит(Объект, "ВидСубконто3",   ПолучитьВидСубконто(ПолучитьЯчейку(Таблица, Стр, 7)), ФлагИзменения, СписокИзмененныхРеквизитов);
		
		УстановитьРеквизит(Объект, "Количественный", Число(ПолучитьЯчейку(Таблица, Стр, 8 )), ФлагИзменения, СписокИзмененныхРеквизитов);
		УстановитьРеквизит(Объект, "Валютный",       Число(ПолучитьЯчейку(Таблица, Стр, 9 )), ФлагИзменения, СписокИзмененныхРеквизитов);
		УстановитьРеквизит(Объект, "Забалансовый",   Число(ПолучитьЯчейку(Таблица, Стр, 10)), ФлагИзменения, СписокИзмененныхРеквизитов);
		
		УстановитьРеквизит(Объект, "Сортировка",     ПолучитьЯчейку(Таблица, Стр, 10) + КодСчета, ФлагИзменения, СписокИзмененныхРеквизитов);
		
		// Запись элемента.
		Если ФлагИзменения = 1 Тогда
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов);
			
			Попытка
				Объект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), "!!");
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		Если СписокЗагруженныхОбъектов.НайтиЗначение(Объект.ТекущийЭлемент()) = 0 Тогда
			СписокЗагруженныхОбъектов.ДобавитьЗначение(Объект.ТекущийЭлемент());
			СнятьПометкуУдаления(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление лишних элементов справочника.
	УдалитьЛишниеЭлементы("ПланСчетов");
	УдалитьЛишниеЭлементы("ВидыСубконто");  
	
	ВидыДвижений = СоздатьОбъект("Справочник.ДвиженияДенежныхСредств");    
	Если ВидыДвижений.НайтиПоНаименованию("Оплата поставщику") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Оплата поставщику";
		ВидыДвижений.Записать(); 
	КонецЕсли;
	          
	Если ВидыДвижений.НайтиПоНаименованию("Поступления от покупателей") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Поступления от покупателей";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Выплата зарплаты") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Выплата зарплаты";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Отчисления на социальные нужды") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Отчисления на социальные нужды";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Выдача под авансовый отчет") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Выдача под авансовый отчет";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Платежи в бюджет") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Платежи в бюджет";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Получение наличных из банка") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Получение наличных из банка";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Сдача наличных в банк") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Сдача наличных в банк";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Прочие выплаты") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Прочие выплаты";
		ВидыДвижений.Записать();
	КонецЕсли;
	
	Если ВидыДвижений.НайтиПоНаименованию("Прочие поступления") = 0 Тогда
		ВидыДвижений.Новый();
		ВидыДвижений.Наименование = "Прочие поступления";
		ВидыДвижений.Записать();    
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПланСчетов()

//******************************************************************************
// ПолучитьЗначениеПеречисления(ИдПеречисления, ИдЗначения)
//
// Параметры:
//  ИдПеречисления - "строка" - идентификатор перечисления по которому нужно плучить значение.
//  ИдЗначения     - "строка" - идентификатор (представление) значения перечисления.
//
// Возвращаемое значение:
//  Значение перечисления - по переданным идентификаторам вида перечисления и его значения.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция возвращает значение перечисления по переданным идентификатору перечисления и 
// представлению или идентификатору значения данного перечисления.
//
Функция ПолучитьЗначениеПеречисления(ИдПеречисления, ИдЗначения)
	
	Если ПустаяСтрока(ИдЗначения) = 1 Тогда
		Возврат ПолучитьПустоеЗначение("Перечисление."+ИдПеречисления);;
	Иначе
		Возврат Перечисление.ПолучитьАтрибут(ИдПеречисления).ЗначениеПоИдентификатору(ИдЗначения);
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПеречисления()

//******************************************************************************
// ПолучитьСубконто(Счет, НомерСубконто, ЗначениеСубконто)
//
// Параметры:
//  Счет             - "Справочник.ПланыСчетов" - счет, по которому устанавливается аналитика.
//  НомерСубконто    - "число" - номер субконто счета.
//  ЗначениеСубконто - "строка" - представление значения субконто.
//
// Возвращаемое значение:
//  Справочник.ЗначенияСубконто            - для предопределенной аналитики.
//  Перечисление.ЗначенияАтрибутовПроводок - для аналитики, формируемой по значениям измерений регистров.
//  
// Вызывается из формул элементов диалога:
//
// Описание:
//  Значения субконто проводок.
//
Функция ПолучитьСубконто(Счет, НомерСубконто, ЗначениеСубконто)
	
	Если ПустаяСтрока(ЗначениеСубконто) = 1 Тогда
		Возврат "";
	ИначеЕсли ПустоеЗначение(Счет) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	ВидСубконто = Счет.ПолучитьАтрибут("ВидСубконто" + Строка(НомерСубконто));
	Если ПустоеЗначение(ВидСубконто) = 1 Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПустаяСтрока(ВидСубконто.ТипЗначенияТорг) = 0 Тогда
		// Если используется в оперативном учете, то не задаются предопределенные значения.
		Возврат ПолучитьЗначениеПеречисления("ЗначенияАтрибутовПроводок", ЗначениеСубконто);
		
	Иначе
		Объект = СоздатьОбъект("Справочник.ЗначенияСубконто");
		Объект.ИспользоватьВладельца(ВидСубконто);
		
		Если Объект.НайтиПоНаименованию(ЗначениеСубконто, 1, 1) = 0 Тогда
			Объект.Новый();
			Объект.Наименование = ЗначениеСубконто;
			Объект.Значение     = ЗначениеСубконто;
			
			ВывестиСообщение(Объект, СписокИзмененныхРеквизитов);
			
			Попытка
				Объект.Записать();
			Исключение
				Сообщить(ОписаниеОшибки(), "!!");
				Возврат ПолучитьПустоеЗначение("Справочник.ЗначенияСубконто");
			КонецПопытки;
		КонецЕсли; 
		
		Если СписокЗагруженныхОбъектов.НайтиЗначение(Объект.ТекущийЭлемент()) = 0 Тогда
			СписокЗагруженныхОбъектов.ДобавитьЗначение(Объект.ТекущийЭлемент());
			СнятьПометкуУдаления(Объект);
		КонецЕсли;
		
		Возврат Объект.ТекущийЭлемент();
	КонецЕсли;
		
КонецФункции // ПолучитьСубконто()
	
//******************************************************************************
// ПолучитьСчет(КодСчета)
//
// Параметры:
//  КодСчета - "строка" - код счета из загруженного плана счетов.
//
// Возвращаемое значение:
//  "Справочник.ПланСчетов" - элемент справочника "План счетов".
//  
// Вызывается из формул элементов диалога:
//
// Описание:
//  Функция осуществляет поиск в справочнике "План счетов" элемента по коду. 
//
Функция ПолучитьСчет(КодСчета)
	
	Объект = СоздатьОбъект("Справочник.ПланСчетов");
	
	Объект.НайтиПоКоду(КодСчета, 0);
	
	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // ПолучитьСчет()

//******************************************************************************
// НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, ЭтоГруппа = 0, ВнутрКод = "")
//
// Параметры:
//  Объект           - "справочник" - объект, который добавляется.
//                     Должна быть открыта выборка.
//  СписокРеквизитов - "СписокЗначений" - список реквизитов, по которым осуществляется 
//                     поиск элемента (с пометкой), и список обновляемых реквизитов 
//                     (без пометки).
//  ЭтоГруппа        - 1 - поиск осуществляется среди групп справочника,
//                     0 - поиск осуществляется среди элементов справочника,
//                     по умолчанию 0.
//  ВнутрКод         - "строка", код записываемого элемента.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  В процедуре производится поиск элемента в справочнике по заданным в списке 
// значениям реквизитов, если элемента с такими значениями реквизтов нет, то  
// добавляется новый элемент.
//
Процедура НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, ЭтоГруппа = 0, ВнутрКод = "")
	
	Перем Реквизит;
	
	// Поиск ранее существовавшего элемента справочника.
	Пока Объект.ПолучитьЭлемент(1) = 1 Цикл
		Если Объект.ЭтоГруппа() <> ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка реквизитов выбранного элемента.
		Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
			Если СписокРеквизитов.Пометка(Номер) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = СписокРеквизитов.ПолучитьЗначение(Номер, Реквизит);
			
			Если ТипЗначенияСтр(Значение) = "Строка" Тогда 
				Если СокрЛП(Объект.ПолучитьАтрибут(Реквизит)) <> СокрЛП(Значение) Тогда
					Прервать;
				КонецЕсли;
				
			ИначеЕсли ТипЗначенияСтр(Объект.ПолучитьАтрибут(Реквизит)) = ТипЗначенияСтр(Значение) Тогда
				Если Объект.ПолучитьАтрибут(Реквизит) <> Значение Тогда
					Прервать;
				    
				КонецЕсли;

			ИначеЕсли (ПустоеЗначение(Объект.ПолучитьАтрибут(Реквизит)) <> 1)
				  или (ПустоеЗначение(Значение) <> 1) Тогда
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если СписокРеквизитов.РазмерСписка() < Номер Тогда
			Прервать; // найден соответствующий элемент
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Выбран() = 0 Тогда
		// Создание нового элемента или группы.
		Если ЭтоГруппа = 1 Тогда
			Объект.НоваяГруппа();
		Иначе
		    Объект.Новый();
		КонецЕсли;
		
		ФлагИзменения = 1;
	Иначе
		// Позиционирование на найденном элементе.
		Объект.НайтиЭлемент(Объект.ТекущийЭлемент());
		ФлагИзменения = 0;
	КонецЕсли;
	
	СписокИзмененныхРеквизитов = СоздатьОбъект("СписокЗначений");
	
	// Заполнение реквизитов.
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		Значение = СписокРеквизитов.ПолучитьЗначение(Номер, Реквизит);
		
		Если СписокРеквизитов.Пометка(Номер) = 0 Тогда
			УстановитьРеквизит(Объект, Реквизит, Значение, ФлагИзменения, СписокИзмененныхРеквизитов);
			
		ИначеЕсли Объект.Выбран() = 0 Тогда // для новых элементов
			УстановитьРеквизит(Объект, Реквизит, Значение, ФлагИзменения, СписокИзмененныхРеквизитов);
			
		КонецЕсли;
	КонецЦикла;
	
	// Запись элемента.
	Если ФлагИзменения = 1 Тогда
		ВывестиСообщение(Объект, СписокИзмененныхРеквизитов);
		
		Попытка
			Объект.Записать();
		Исключение
			Сообщить(ОписаниеОшибки(), "!!");
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	// Список загруженных элементов справочников.
	Если СписокЗагруженныхОбъектов.НайтиЗначение(Объект.ТекущийЭлемент()) = 0 Тогда
		СписокЗагруженныхОбъектов.ДобавитьЗначение(Объект.ТекущийЭлемент(), ВнутрКод);
		СнятьПометкуУдаления(Объект);
	КонецЕсли;
	
КонецПроцедуры // НайтиДобавитьЭлементГруппу()

//******************************************************************************
// ЗаписатьДвижение(Объект, Таблица, Стр)
//
// Параметры:
//  Объект  - "Справочник.ДвиженияРегистров" - записываемый элемент.
//  Таблица - "Таблица" - таблица, откуда берутся исходные данные.
//  Стр     - "число" - номер строки в таблице.
//
// Возвращаемое значение:
//  Нет.
//  
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет поиск элемента в справочнике.
//  Если не находит - добавляется новое.
//
Процедура ЗаписатьДвижение(Объект, Таблица, Стр)
	
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	
	ВидРегистра  = ПолучитьЯчейку(Таблица, Стр, "Регистр");
	
	Если Метаданные.Регистр(ВидРегистра).Измерение("СтатусПартии").Выбран() = 1 Тогда
		ВидСтатус = ПолучитьЗначениеПеречисления("СтатусыПартии", ПолучитьЯчейку(Таблица, Стр, "Вид, статус"));
		
	ИначеЕсли Метаданные.Регистр(ВидРегистра).Измерение("ВидДолга").Выбран() = 1 Тогда
		ВидСтатус = ПолучитьЗначениеПеречисления("ВидыДолга", ПолучитьЯчейку(Таблица, Стр, "Вид, статус"));
		
	Иначе
		ВидСтатус = "";
	КонецЕсли;
	
	// Установим значения по которым будет идентифицироваться элемент
	СписокРеквизитов.Установить("ВидРегистра",  ВидРегистра);
	СписокРеквизитов.Установить("ЗнакДвижения", ПолучитьЯчейку(Таблица, Стр, "Знак движения"));
	СписокРеквизитов.Установить("КодОперации",  ПолучитьЗначениеПеречисления("КодыОпераций", ПолучитьЯчейку(Таблица, Стр, "Код операции рег.")));
	СписокРеквизитов.Установить("ВидСтатус",    ВидСтатус);
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		СписокРеквизитов.Пометка(Номер, 1);
	КонецЦикла;
	
	СписокРеквизитов.Установить("Код",          Формат(Стр - 1, "Ч(0)4"));
	СписокРеквизитов.Установить("Наименование", ПолучитьЯчейку(Таблица, Стр, "Наименование"));
	
	КодРодителя = ПолучитьЯчейку(Таблица, Стр, "Внутр.код группы");
	
	Если ПустоеЗначение(КодРодителя) = 0 Тогда
		Родитель = СписокЗагруженныхОбъектов.Получить(КодРодителя);
	Иначе
		Родитель = ПолучитьПустоеЗначение("Справочник.ДвиженияРегистров");
	КонецЕсли;
	
	СписокРеквизитов.Установить("Родитель",     Родитель);
	
	Объект.ВыбратьЭлементы();
	НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, , ПолучитьЯчейку(Таблица, Стр, "Внутр.код"));
	
КонецПроцедуры // ЗаписатьДвижение()

//******************************************************************************
// ЗаписатьПроводку(Объект, Таблица, Стр)
//
// Параметры:
//  Объект  - "Справочник.ПроводкиХозОпераций" - добавляемый элемент.
//  Таблица - "Таблица" - таблица, откуда берутся исходные данные.
//  Стр     - "число" - номер строки в таблице.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет поиск элемента в справочнике.
//  Если не находит - добавляется новое.
//
Процедура ЗаписатьПроводку(Объект, Таблица, Стр)
	
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	// Установим значения по которым будет идентифицироваться элемент.
	ИдСчетД = ПолучитьЯчейку(Таблица, Стр, "СчетД");
	ИдСчетК = ПолучитьЯчейку(Таблица, Стр, "СчетК");
	
	СчетД = ПолучитьСчет(ИдСчетД);
	СчетК = ПолучитьСчет(ИдСчетК);
	
	Владелец = Объект.ИспользоватьВладельца();
	мдДокумент = Метаданные.Документ(СокрЛП(Владелец.ВидДокумента));
	ДокНазначенД = Макс(мдДокумент.РеквизитШапки(ИдСчетД).Выбран(), мдДокумент.РеквизитТабличнойЧасти(ИдСчетД).Выбран());

	Если ДокНазначенД = 1 Тогда
		// переопределяем счет дебета
		СчетД = Перечисление.ПолучитьАтрибут("ЗначенияАтрибутовПроводок").ЗначениеПоИдентификатору(ИдСчетД);    
	КонецЕсли;

	ДокНазначенК = Макс(мдДокумент.РеквизитШапки(ИдСчетК).Выбран(), мдДокумент.РеквизитТабличнойЧасти(ИдСчетК).Выбран());

	Если ДокНазначенК = 1 Тогда
		// переопределяем счет кредита
		СчетК = Перечисление.ПолучитьАтрибут("ЗначенияАтрибутовПроводок").ЗначениеПоИдентификатору(ИдСчетК);    
	КонецЕсли;
	
	СписокРеквизитов.Установить("Движение",     СписокЗагруженныхОбъектов.Получить(ПолучитьЯчейку(Таблица, Стр, "Внутр.код движения")));
	СписокРеквизитов.Установить("СчетД",        СчетД);
	СписокРеквизитов.Установить("СчетК",        СчетК);
	СписокРеквизитов.Установить("Сумма",        ПолучитьЗначениеПеречисления("ЗначенияАтрибутовПроводок", ПолучитьЯчейку(Таблица, Стр, "Сумма")));
	
	Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
		СписокРеквизитов.Пометка(Номер, 1);
	КонецЦикла;
	
	СписокРеквизитов.Установить("Код",          Формат(Стр - 1, "Ч(0)4") + "0");
	СписокРеквизитов.Установить("Наименование", ПолучитьЯчейку(Таблица, Стр, "Наименование"));
	
	КодРодителя = ПолучитьЯчейку(Таблица, Стр, "Внутр.код группы");
	
	Если ПустоеЗначение(КодРодителя) = 0 Тогда
		Родитель = СписокЗагруженныхОбъектов.Получить(КодРодителя);
	Иначе
		Родитель = ПолучитьПустоеЗначение("Справочник.ПроводкиХозОпераций");
	КонецЕсли;

	СписокРеквизитов.Установить("Родитель",     Родитель);

	Если ДокНазначенД = 0 Тогда
		СписокРеквизитов.Установить("СубконтоД1", ПолучитьСубконто(СчетД, 1, ПолучитьЯчейку(Таблица, Стр, "СубконтоД1")));
		СписокРеквизитов.Установить("СубконтоД2", ПолучитьСубконто(СчетД, 2, ПолучитьЯчейку(Таблица, Стр, "СубконтоД2")));
		СписокРеквизитов.Установить("СубконтоД3", ПолучитьСубконто(СчетД, 3, ПолучитьЯчейку(Таблица, Стр, "СубконтоД3")));
	КонецЕсли;	
	
	Если ДокНазначенК = 0 Тогда
		СписокРеквизитов.Установить("СубконтоК1", ПолучитьСубконто(СчетК, 1, ПолучитьЯчейку(Таблица, Стр, "СубконтоК1")));
		СписокРеквизитов.Установить("СубконтоК2", ПолучитьСубконто(СчетК, 2, ПолучитьЯчейку(Таблица, Стр, "СубконтоК2")));
		СписокРеквизитов.Установить("СубконтоК3", ПолучитьСубконто(СчетК, 3, ПолучитьЯчейку(Таблица, Стр, "СубконтоК3")));
	КонецЕсли;	
	
	СписокРеквизитов.Установить("МетодОпределенияВыручки", ПолучитьЗначениеПеречисления("МетодыОпределенияВыручки", ПолучитьЯчейку(Таблица, Стр, "Метод опред.выручки")));
	СписокРеквизитов.Установить("ВклСуммаОперации", Число(ПолучитьЯчейку(Таблица, Стр, "ВклСуммаОперации")));
	СписокРеквизитов.Установить("МетодУчетаРозницы", ПолучитьЗначениеПеречисления("МетодыУчетаРозницы", ПолучитьЯчейку(Таблица, Стр, "Метод учета розницы")));
	СписокРеквизитов.Установить("НомерЖурнала", ПолучитьЯчейку(Таблица, Стр, "НомерЖурнала"));
	СписокРеквизитов.Установить("МетодФильтрацииПроводокПоСумме", ПолучитьЗначениеПеречисления("МетодыФильтрацииПроводокПоСумме", ПолучитьЯчейку(Таблица, Стр, "Метод фильтрации по сумме")));

	НужноКоличество = 0;
	НужнаВалюта = 0;
	
	Если (ДокНазначенД = 1) ИЛИ (ДокНазначенК = 1) Тогда
		НужноКоличество = 1;
		НужнаВалюта = 1;
	Иначе
		Если (СчетД.Количественный = 1) ИЛИ (СчетК.Количественный = 1) Тогда
			НужноКоличество = 1;
		КонецЕсли;

		Если (СчетД.Валютный = 1) ИЛИ (СчетК.Валютный = 1) Тогда
			НужнаВалюта = 1;
		КонецЕсли;
	
	КонецЕсли;

	Если НужноКоличество = 1 Тогда
		Количество = ПолучитьЗначениеПеречисления("ЗначенияАтрибутовПроводок", ПолучитьЯчейку(Таблица, Стр, "Количество"));
	Иначе
		Количество = ПолучитьПустоеЗначение("Перечисление.ЗначенияАтрибутовПроводок");
	КонецЕсли;
	
	СписокРеквизитов.Установить("Количество", Количество);
		
	Если НужнаВалюта = 1 Тогда
		ВалСумма = ПолучитьЗначениеПеречисления("ЗначенияАтрибутовПроводок", ПолучитьЯчейку(Таблица, Стр, "Вал.сумма"));
		Валюта   = ПолучитьЗначениеПеречисления("ЗначенияАтрибутовПроводок", ПолучитьЯчейку(Таблица, Стр, "Валюта"));
	Иначе
		ВалСумма = ПолучитьПустоеЗначение("Перечисление.ЗначенияАтрибутовПроводок");
		Валюта   = ПолучитьПустоеЗначение("Перечисление.ЗначенияАтрибутовПроводок");
	КонецЕсли;
	
	СписокРеквизитов.Установить("ВалСумма", ВалСумма);
	СписокРеквизитов.Установить("Валюта",   Валюта);
	
	Объект.ВыбратьЭлементы();
	НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, , ПолучитьЯчейку(Таблица, Стр, "Внутр.код"));
	
КонецПроцедуры // ЗаписатьПроводку()

//******************************************************************************
// ЗаписатьГруппу(Объект, Таблица, Стр)
//
// Параметры:
//  Объект  - "Справочник" - добавляемая группа.
//  Таблица - "Таблица" - таблица, откуда берутся исходные данные.
//  Стр     - "число" - номер строки в таблице.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Осуществляет поиск группы в справочнике.
//  Если не находит - добавляется новое.
//
Процедура ЗаписатьГруппу(Объект, Таблица, Стр)
	
	// Наименование.
	СписокРеквизитов = СоздатьОбъект("СписокЗначений");
	СписокРеквизитов.Установить("Наименование", ПолучитьЯчейку(Таблица, Стр, "Наименование"));
	СписокРеквизитов.Пометка(1, 1);
	
	// Код.
	СписокРеквизитов.Установить("Код", Формат(Стр - 1, "Ч(0)4") + ?(Объект.Вид() = "ПроводкиХозОпераций", "0", ""));
	
	Объект.ВыбратьЭлементы(1);
	НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, 1, ПолучитьЯчейку(Таблица, Стр, "Внутр.код"));
	
	Объект.ИспользоватьРодителя(Объект.ТекущийЭлемент());
	
КонецПроцедуры // ЗаписатьГруппу()

//******************************************************************************
// ЗаполнитьХозОперации()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполнение справочника ХозОперации.
//
Процедура ЗаполнитьХозОперации()
	
	Объект = СоздатьОбъект("Справочник.ХозОперации");
	
	// Исходная таблица.
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("ХозОперации");
	Таблица.Вывести();
	
	// Заполнение списка колонок таблицы.
	СписокКолонокТаблицы = СоздатьОбъект("СписокЗначений");
	Для Кол = 1 По Таблица.ШиринаТаблицы() Цикл
		СписокКолонокТаблицы.Установить(ПолучитьЯчейку(Таблица, 1, Кол), Кол);
	КонецЦикла;
	
	Для Стр = 2 По Таблица.ВысотаТаблицы() Цикл
		Состояние("Заполняется справочник ""Хозяйственные операции"": загружено "+Стр+" строк");
		
		КодОперации = ПолучитьЯчейку(Таблица, Стр, "Внутр.код операции");
		
		Если ПустаяСтрока(КодОперации) = 1 Тогда
			Сообщить("Хозяйственные операции, строка "+Стр+": не определена хоз. операция - строка не загружена.", "!");
			Продолжить;
		КонецЕсли;
			
		// Список реквизитов. по которым идентифицируется элемент.
		СписокРеквизитов = СоздатьОбъект("СписокЗначений");
		СписокРеквизитов.Установить("ВидДокумента", ПолучитьЯчейку(Таблица, Стр, "Вид документа"));
		СписокРеквизитов.Установить("КодОперации",  ПолучитьЗначениеПеречисления("КодыОпераций", ПолучитьЯчейку(Таблица, Стр, "Код операции докум.")));
			
		Для Номер = 1 По СписокРеквизитов.РазмерСписка() Цикл
			СписокРеквизитов.Пометка(Номер, 1);
		КонецЦикла;
		
		СписокРеквизитов.Установить("Наименование", ПолучитьЯчейку(Таблица, Стр, "Наименование"));
		
		СписокРеквизитов.Установить("Код", Формат(Стр - 1, "Ч(0)3"));
		
		Объект.ВыбратьЭлементы();
		НайтиДобавитьЭлементГруппу(Объект, СписокРеквизитов, , КодОперации);
	КонецЦикла;
	
	// Удаление лишних элементов справочника.
	УдалитьЛишниеЭлементы("ХозОперации");
	
КонецПроцедуры // ЗаполнитьХозОперации()

//******************************************************************************
// ЗаполнитьДвиженияРегистров()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполнение справочника ДвиженияРегистров.
//
Процедура ЗаполнитьДвиженияРегистров()
	
	Объект = СоздатьОбъект("Справочник.ДвиженияРегистров");
	
	ХозОперация = ПолучитьПустоеЗначение("Справочник.ХозОперации");
	Родитель    = ПолучитьПустоеЗначение("Справочник.ДвиженияРегистров");
	КодОперации = "";
	КодРодителя = "";
	
	// Исходная таблица.
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("Движения");
	Таблица.Вывести();
	
	// Заполнение списка колонок таблицы.
	СписокКолонокТаблицы = СоздатьОбъект("СписокЗначений");
	Для Кол = 1 По Таблица.ШиринаТаблицы() Цикл
		СписокКолонокТаблицы.Установить(ПолучитьЯчейку(Таблица, 1, Кол), Кол);
	КонецЦикла;
	
	Для Стр = 2 По Таблица.ВысотаТаблицы() Цикл
		Состояние("Заполняется справочник ""Движения регистров"": загружено "+Стр+" строк");
	
		// ХозОперация.
		Если КодОперации <> ПолучитьЯчейку(Таблица, Стр, "Внутр.код операции") Тогда
			КодОперации = ПолучитьЯчейку(Таблица, Стр, "Внутр.код операции");
			ХозОперация = СписокЗагруженныхОбъектов.Получить(КодОперации);
		КонецЕсли;
		
		Если ПустоеЗначение(ХозОперация) = 1 Тогда
			Сообщить("Движения регистров, строка "+Стр+": не определена хоз. операция - строка не загружена.", "!");
			Продолжить;
		КонецЕсли;
		
		Объект.ИспользоватьВладельца(ХозОперация);
		Объект.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ДвиженияРегистров"));
		
		// Запись элемента.
		Если ПустаяСтрока(ПолучитьЯчейку(Таблица, Стр, "Регистр")) = 1 Тогда
			ЗаписатьГруппу(Объект, Таблица, Стр);
		Иначе
			ЗаписатьДвижение(Объект, Таблица, Стр);
		КонецЕсли;
	КонецЦикла;

	// Удаление лишних элементов справочника.
	УдалитьЛишниеЭлементы("ДвиженияРегистров");
	
КонецПроцедуры // ЗаполнитьДвиженияРегистров()

//******************************************************************************
// ЗаполнитьПроводки(НомерЖурнала = "все")
//
// Параметры:
//  НомерЖурнала - значение реквизит справочника проводок, для отбора проводок по которым нужно выполнить
//				   процедуру заполнения
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//
// Описание:
//  Заполнение справочника "ПроводкиХозОпераций".
//
Процедура ЗаполнитьПроводки(НомерЖурнала = "все")
	
	Объект = СоздатьОбъект("Справочник.ПроводкиХозОпераций");
	
	ХозОперация = ПолучитьПустоеЗначение("Справочник.ХозОперации");
	Родитель    = ПолучитьПустоеЗначение("Справочник.ПроводкиХозОпераций");
	КодОперации = "";
	КодРодителя = "";
	
	// Исходная таблица.
	Таблица = СоздатьОбъект("Таблица");
	Таблица.ИсходнаяТаблица("Проводки");
	Таблица.Вывести();
	
	// Заполнение списка колонок таблицы.
	СписокКолонокТаблицы = СоздатьОбъект("СписокЗначений");
	Для Кол = 1 По Таблица.ШиринаТаблицы() Цикл
		СписокКолонокТаблицы.Установить(ПолучитьЯчейку(Таблица, 1, Кол), Кол);
	КонецЦикла;
	
	Для Стр = 2 По Таблица.ВысотаТаблицы() Цикл
		Состояние("Заполняется справочник ""Проводки по хоз. операциям"": загружено "+Стр+" строк");
	    
		// Номер журнала
		Если (ПустоеЗначение(ПолучитьЯчейку(Таблица, Стр, "Внутр.код движения")) <> 1)
		   и (НомерЖурнала <> "все")
		   и (НомерЖурнала <> СокрЛП(ПолучитьЯчейку(Таблица, Стр, "НомерЖурнала"))) Тогда
			// Отбор элементов справочника проводок по определенному номеру журнала
			Продолжить;
		КонецЕсли;
		
		// ХозОперация.
		Если КодОперации <> ПолучитьЯчейку(Таблица, Стр, "Внутр.код операции") Тогда
			КодОперации = ПолучитьЯчейку(Таблица, Стр, "Внутр.код операции");
			ХозОперация = СписокЗагруженныхОбъектов.Получить(КодОперации);
		КонецЕсли;
		
		Если ПустоеЗначение(ХозОперация) = 1 Тогда
			Сообщить("Проводки по хоз. операциям, строка "+Стр+": не определена хоз. операция - строка не загружена.", "!");
			Продолжить;
		КонецЕсли;

		Объект.ИспользоватьВладельца(ХозОперация);
		Объект.ИспользоватьРодителя(ПолучитьПустоеЗначение("Справочник.ПроводкиХозОпераций"));
		
		// Запись элемента.
		Если ПустоеЗначение(ПолучитьЯчейку(Таблица, Стр, "Внутр.код движения")) = 1 Тогда
			ЗаписатьГруппу(Объект, Таблица, Стр);
		Иначе
			ЗаписатьПроводку(Объект, Таблица, Стр);
		КонецЕсли;
	КонецЦикла;
	
	// Удаление лишних элементов справочника.
	УдалитьЛишниеЭлементы("ПроводкиХозОпераций", НомерЖурнала);                
		
КонецПроцедуры // ЗаполнитьПроводки()
                      
//******************************************************************************
// Заполнить()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  "ОК".
//
// Описание:
//  Здесь описывается процедура.
//
Процедура Заполнить()
	
    НачатьТранзакцию();
	
	СписокЗагруженныхОбъектов = СоздатьОбъект("СписокЗначений");
	
	ЗаполнитьХозОперации();
	ЗаполнитьДвиженияРегистров();
	
	Если ЗаполнитьПланСчетов = 1 Тогда
		ЗаполнитьПланСчетов();
	
		Если ЗаполнитьПроводки = 1 Тогда
			Если (ВариантыЗаполнения.РазмерСписка() <> 0)
			   и (ВариантыЗаполнения.ТекущаяСтрока() <> 0) Тогда
				// С отбором по номеру журнала
				ЗаполнитьПроводки(ВариантыЗаполнения.ПолучитьЗначение(ВариантыЗаполнения.ТекущаяСтрока()));
			    
			Иначе
				// Для всех номеров журналов
				ЗаполнитьПроводки();
				
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // Заполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	ЗаполнитьХозОперации     = 1;
	
	Если Форма.Параметр      = "ХозОперации" Тогда
		ЗаполнитьПланСчетов  = 0;
		ЗаполнитьПроводки    = 0;
		
		Заполнить();
		СтатусВозврата(0); Возврат;
		
	ИначеЕсли Форма.Параметр = "ПланСчетов" Тогда
		ЗаполнитьПланСчетов  = 1;
		ЗаполнитьПроводки    = 0;
		
		Заполнить();
		СтатусВозврата(0); Возврат;
		
	ИначеЕсли Форма.Параметр = "ПроводкиХозОпераций" Тогда
		ЗаполнитьПланСчетов  = 1;
		ЗаполнитьПроводки    = 1;
		
		Заполнить();
		СтатусВозврата(0); Возврат;
		
	КонецЕсли;
	
	ЗаполнитьТексты();
	ЗаполнитьНомераЖурналов();
	ПриУстановкеФлагов();
	
КонецПроцедуры // ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
СписокИзмененныхРеквизитов = СоздатьОбъект("СписокЗначений");