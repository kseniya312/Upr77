////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	Документ;				//	Корневой узел XML-документа
Перем	ЭлПакетПредложений;		//	Элемент выбранного пакета предложений
Перем	XMLКаталог;				//	XML-элемент "Каталог"


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ВыборФайла()
//
// Параметры:
// 	Нет
//
// Возвращаемое значение:
// 	Нет.
//
// Описание
// 	Выбор файла в диалоге
//
Процедура ВыборФайла()
	
	Каталог = "";
	Если ФС.ВыбратьФайл(0, ФормИмяФайла, Каталог, "Выберите файл", "*.xml|*.xml", , ) = 1 Тогда
	    ФормИмяФайла = Каталог + ФормИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()
          
//******************************************************************************
// ОткрытьФайл()
//
// Параметры:
// 	Нет.
//
// Возвращаемое значение:
// 	Нет.
//
// Описание
// 	Открыть файл для просмотра в диалоге
//
Процедура ОткрытьФайл() 
	
	Если ФС.СуществуетФайл(ФормИмяФайла)=1 Тогда
		ЗапуститьПриложение(ФормИмяФайла);
	Иначе
		Предупреждение("Указанный файл не существует!", 5);
	КонецЕсли;
	
КонецПроцедуры		//	ОткрытьФайл()
                            
//******************************************************************************
// ВыбратьКаталог()
//
// Параметры:
// 	Нет.
//
// Возвращаемое значение:
// 	Нет.
//
// Описание
// 	Если файл содержит несколько каталогов, то предлагает выбрать обрабатываемй из списка
//
Функция ВыбратьКаталог()
    
	СписокКаталогов	=	СоздатьОбъект("СписокЗначений");
	
	Выборка			=	Документ.ВыбратьУзлы("//Каталог");
		
	Если		Выборка.КоличествоУзлов() = 0 Тогда
		Предупреждение("Данный файл не содержит ни одного каталога!");
		Возврат(0);
	КонецЕсли;
        
	СпрКаталогов	=	СоздатьОбъект("Справочник.Каталоги");
	
	КолвоКаталогов	=	Выборка.КоличествоУзлов();
	
	Для Индекс = 1 По КолвоКаталогов Цикл
		ДоступныйКаталог 		= Выборка.ПолучитьУзел(Индекс - 1);
		ИдентификаторКаталога	= ДоступныйКаталог.ПолучитьАтрибут("Идентификатор"); 
		НаименованиеКаталога	= ДоступныйКаталог.ПолучитьАтрибут("Наименование");
		
		Если СпрКаталогов.НайтиПоРеквизиту("Идентификатор", ИдентификаторКаталога, 1) = 1 Тогда
			СписокКаталогов.ДобавитьЗначение(СпрКаталогов.ТекущийЭлемент());
		Иначе
			//Предупреждение("Не найден каталог - " + НаименованиеКаталога + " (идентификатор: " + ИдентификаторКаталога + ")");
			Возврат(0);
		КонецЕсли;
		
		Если КолвоКаталогов = 1 Тогда Возврат(СпрКаталогов.ТекущийЭлемент()) КонецЕсли;
	КонецЦикла;
	
	Зн  = ""; Поз = "";
	Если СписокКаталогов.ВыбратьЗначение(Зн, "Выберите каталог", Поз, 60, 1) = 1 Тогда
		Возврат(Зн);
	Иначе 
		Возврат(0);
	КонецЕсли;
	
КонецФункции		//	ВыбратьКаталог()

//******************************************************************************
// ЗагрузитьXML_Документ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - документ загружен
//	0 - ошибка
//
// Описание:
//
Функция ЗагрузитьXML_Документ()
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
			Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
				Предупреждение("Компонента v7plus.dll не найдена!");
				Возврат(0);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Анализатор			=	СоздатьОбъект("AddIn.XMLParser");
	Документ			=	Анализатор.СоздатьДокумент();
	
	Если ПустоеЗначение(Документ) = 1 Тогда
		СтатусВозврата(0);
		Возврат(0);
	КонецЕсли;

	//КоллекцияСхем		= Анализатор.СоздатьКоллекциюСхем();
	//КоллекцияСхем.ДобавитьСхему("urn:CommerceML", КаталогИБ() + "ExtForms\CommerML.biz");
	//Документ.Схемы	= КоллекцияСхем;	                                         
	                              
	Если ПустоеЗначение(ФормИмяФайла) = 1 Тогда
		Предупреждение("Не выбран файл!");
		Возврат(0);
	КонецЕсли;
	
	Если ФС.СуществуетФайл(ФормИмяФайла) = 0 Тогда
		Предупреждение("Файл не существует!");
		Возврат(0);
	КонецЕсли;
	
	Документ.Загрузить(ФормИмяФайла);
	
	//Документ.Проверить();
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьXML_Документ()

//******************************************************************************
// ПросмотрТоваровКаталога()
//		
// Параметры:
//	Нет
//		
// Возвращаемое значение:
//	Нет
//		
// Описание
//
Процедура ПросмотрТоваровКаталога()
                
	Если ПустоеЗначение(ЗагрузитьXML_Документ())	=	1	Тогда	Возврат	КонецЕсли;
	
	СпрКаталог	=	ВыбратьКаталог();
	
	//Если ПустоеЗначение(СпрКаталог)					=	1 	Тогда	Возврат	КонецЕсли;
	                          
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(СпрКаталог,			"Каталог");
	СписокПараметров.ДобавитьЗначение(ФормИмяФайла,			"ИмяФайлаКаталога");
	                   
	ОткрытьФорму("Обработка.XMLРаботаСКаталогом", СписокПараметров);
	
КонецПроцедуры		//	ПросмотрТоваровКаталога()

//******************************************************************************
// Единица(Товар, ИмяЕдиницы, НормаУпаковки)
//		
// Параметры:
//	Товар			-	элемент справочника номенклатура
//	ИмяЕдиницы		-	Идентификатор единицы
//	НормаУпаковки	-	Коэффициент Единицы
//		
// Возвращаемое значение:
// 	Единица товара или, в случае неудачи, пустое значение.
//		
// Описание
//	Ищет у указанного товара единицу, если не находит, то создает новую
//	с коэффициентом - НормаУпаковки
//
Функция Единица(Товар, ИмяЕдиницы, НормаУпаковки=1)
	
	Если	ПустоеЗначение(Товар)		= 1 Тогда Возврат	ПолучитьПустоеЗначение()	КонецЕсли;
	Если	ПустоеЗначение(ИмяЕдиницы)	= 1 Тогда Возврат	ПолучитьПустоеЗначение()	КонецЕсли;
	
	СпрКлассификаторЕдиниц = СоздатьОбъект("Справочник.ОКЕИ");
    Если СпрКлассификаторЕдиниц.НайтиПоНаименованию(СокрЛП(ИмяЕдиницы), 0, 1) = 0 Тогда
		СпрКлассификаторЕдиниц.Новый();
		СпрКлассификаторЕдиниц.Наименование = СокрЛП(ИмяЕдиницы);
		СпрКлассификаторЕдиниц.Записать();
    КонецЕсли;
	
	СпрЕдиниц = СоздатьОбъект("Справочник.Единицы");
	СпрЕдиниц.ИспользоватьВладельца(Товар);
	          
	Если СпрЕдиниц.НайтиПоРеквизиту("ОКЕИ", СпрКлассификаторЕдиниц.ТекущийЭлемент(), 0) = 0 Тогда
		СпрЕдиниц.Новый();
		СпрЕдиниц.ОКЕИ			=	СпрКлассификаторЕдиниц.ТекущийЭлемент();
		СпрЕдиниц.Наименование	=	СокрЛП(ИмяЕдиницы);
		СпрЕдиниц.Коэффициент	=	Число(НормаУпаковки);
		СпрЕдиниц.Записать();
	КонецЕсли;
	
	Возврат СпрЕдиниц.ТекущийЭлемент();
	
КонецФункции		//	Единица()

//******************************************************************************
// Валюта(СтрВалюта)
//		
// Параметры:
//	СтрВалюта	-	Наименование валюты
//		
// Возвращаемое значение:
// 	Валюта или, в случае неудачи, пустое значение
//		
// Описание
//	Ищет валюту в справочнике по наименованию
//		
Функция Валюта(СтрВалюта)
	
	Если ПустоеЗначение(СтрВалюта) = 1 Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
    СпрВалюты = СоздатьОбъект("Справочник.Валюты");
	Если СпрВалюты.НайтиПоНаименованию(СокрЛП(СтрВалюта), 0, 1) = 0 Тогда
		Предупреждение("Валюта " + СтрВалюта + " не найдена!");
		Возврат ПолучитьПустоеЗначение();
	КонецЕсли;
	
	Возврат СпрВалюты.ТекущийЭлемент();
	
КонецФункции		//	Валюта()
               
//******************************************************************************
// ОпределитьТоварПредложения(Эл)
//		
// Параметры:
//	Эл	-	XML-элемент предложения
//		
// Возвращаемое значение:
// 	Элемент справочника "Номенклатура" или, в случае неудачи, пустое значение
//		
// Описание
//	Если элемент "Каталог" включен в файл, то ищем товар в нем, иначе
//	используем подчиненный "Предложению" элемент "СсылкаНаТовар". Если владелец 
//	каталога - фирма, то запрашиваем способ идентификации товаров и ищем в 
//	справочнике "Номенклатура", в противном случае, ищем по аналогам.
//
Функция ОпределитьТоварПредложения(Эл)
	
	ИдентификаторТовара	=	Эл.ПолучитьАтрибут("ИдентификаторТовара");
	Если ПустоеЗначение(ИдентификаторТовара) = 1 Тогда
		ЭлСсылкаНаТовар	=	Эл.ВыбратьУзел("СсылкаНаТовар");
	    ИдКаталога		=	ЭлСсылкаНаТовар.ПолучитьАтрибут("ИдентификаторКаталога");
		ИдТовара		=	ЭлСсылкаНаТовар.ПолучитьАтрибут("ИдентификаторВКаталоге");
	Иначе
		ЭлТовар			=	Документ.ВыбратьУзел("//Товар[@Идентификатор = """ + ИдентификаторТовара + """]");
		ИдКаталога		=	ЭлТовар.Родитель.ПолучитьАтрибут("Идентификатор");
		ИдТовара		=	ЭлТовар.ПолучитьАтрибут("ИдентификаторВКаталоге");
	КонецЕсли;
	    
	СпрНоменклатуры	= СоздатьОбъект("Справочник.Номенклатура");
	СпрКаталоги		= СоздатьОбъект("Справочник.Каталоги");
	Если СпрКаталоги.НайтиПоРеквизиту("Идентификатор", СокрЛП(ИдКаталога), 1) = 0 Тогда
		Предупреждение("Не найден каталог с идентификатором - " + ИдКаталога);
		Возврат ПолучитьПустоеЗначение();	
	КонецЕсли;
              
	Если СпрКаталоги.ВладелецКаталога.Вид() = "Фирмы" Тогда
		
		Если ПустоеЗначение(СпрКаталоги.СпособИдентификацииНоменклатуры) = 1 Тогда
			РеквизитИд	=	"Код";
		Иначе
			РеквизитИд	=	СпрКаталоги.СпособИдентификацииНоменклатуры.Идентификатор();
		КонецЕсли;
		
		Если (РеквизитИд = "Код") Или (ПустоеЗначение(РеквизитИд) = 1) Тогда
			Если СпрНоменклатуры.НайтиПоКоду(ИдТовара, 0) = 0 Тогда
				Предупреждение("Не найден товар с кодом - " + ИдТовара);
				Возврат "";
			КонецЕсли;	
		ИначеЕсли	РеквизитИд = "ШтрихКод" Тогда
			СпрЕдиниц	=	СоздатьОбъект("Справочник.Единицы");
			Если СпрЕдиниц.НайтиПоРеквизиту("ШтрихКод", ИдТовара, 1) = 1 Тогда
				СпрНоменклатуры.НайтиЭлемент(СпрЕдиниц.Владелец);
			КонецЕсли;
		Иначе
			Если СпрНоменклатуры.НайтиПоРеквизиту(РеквизитИд, ИдТовара, 1) = 0 Тогда
				Предупреждение("Не найден товар с реквизитом - " + РеквизитИд + " = " + ИдТовара);
				Возврат "";
			КонецЕсли;		
		КонецЕсли;
		
		Возврат СпрНоменклатуры.ТекущийЭлемент();
	Иначе
		СпрАналогов = СоздатьОбъект("Справочник.Аналоги");
		СпрАналогов.ВыбратьЭлементыПоРеквизиту("Каталог", СпрКаталоги.ТекущийЭлемент(), 0, 0);
		Пока СпрАналогов.ПолучитьЭлемент() = 1 Цикл
		    Если СокрЛП(СпрАналогов.ИдентификаторВКаталоге) = ИдТовара Тогда
				СпрНоменклатуры.НайтиЭлемент(СпрАналогов.Владелец);
		    	Возврат СпрНоменклатуры.ТекущийЭлемент();
		    КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Возврат ПолучитьПустоеЗначение();
	
КонецФункции		//	ОпределитьТоварПредложения()

//******************************************************************************
// КаталогПоИдентификатору(ИдКаталога)
//		
// Параметры:
//	ИдКаталога	-	Идентификатор каталога
//		
// Возвращаемое значение:
// 	Элемент справочника "Каталоги" или, в случае неудачи, пустое значение.
//		
// Описание
//	В справочнике "каталогов" ищем элемент по реквизиту "Идентификатор"
//		
Функция КаталогПоИдентификатору(ИдКаталога)
	
	КаталогПредложений	=	СоздатьОбъект("Справочник.Каталоги");
	Если КаталогПредложений.НайтиПоРеквизиту("Идентификатор", ИдКаталога, 1) = 0 Тогда
		Предупреждение("В справочнике каталогов не обнаружен каталог с идентификатором - " + КаталогПредложений.Идентификатор + "
						|Перед загрузкой пакета предложений необходимо загрузить каталог товаров!");
		Возврат(0);
	КонецЕсли;
	
	Если ПустоеЗначение(КаталогПредложений.ВладелецКаталога) = 1 Тогда
		Предупреждение("У каталога - '" + КаталогПредложений.Наименование + "' неопределен владелец!");
		Возврат(0);
	КонецЕсли;
	          
	Возврат(КаталогПредложений.ТекущийЭлемент());
	
КонецФункции		//	КаталогПоИдентификатору()

//******************************************************************************
// ВидСвойства(ИдКаталога, ИдСвойства)
//		
// Параметры:
//	ИдКаталога	-	Идентификатор каталога
//	ИдСвойства	-	Идентификатор вида свойства в каталоге
//		
// Возвращаемое значение:
// 	Элемент справочника "ВидыСвойств" или, в случае неудачи, пустое значение.
//		
// Описание
//	В справочнике "ВидыСвойств" ищем элемент по двум реквизитам (см. параметры)
//		
Функция ВидСвойства(ИдКаталога, ИдСвойства)
	
	СпрВидовСвойств	=	СоздатьОбъект("Справочник.ВидыСвойств");
	СпрВидовСвойств.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", СокрЛП(ИдСвойства), 0, 0);
	Пока СпрВидовСвойств.ПолучитьЭлемент() = 1 Цикл
		Если СпрВидовСвойств.Каталог.Идентификатор = СокрЛП(ИдКаталога) Тогда
			Возврат СпрВидовСвойств.Наименование;
		КонецЕсли;
	КонецЦикла;
	                    
	Если ПустоеЗначение(XMLКаталог) = 0 Тогда
		АтИмяСвойства	=	XMLКаталог.ВыбратьУзел("Свойство[@Идентификатор=""" + ИдСвойства + """]/@Наименование");
		Если ПустоеЗначение(АтИмяСвойства) = 0 Тогда
			Возврат АтИмяСвойства.Значение;
		КонецЕсли;
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ВидСвойства()

//******************************************************************************
// ВыбратьПакетПредложений()
//		
// Параметры:
//	Нет.
//		
// Возвращаемое значение:
// 	1	-	ЭлПакетПредложений выбран, 0	-	не выбран
//		
// Описание
//	Если в файле несколько "ПакетовПредложений", то заполняем Таблицу значений
//	со значениями свойств "ПакетовПредложений" по умолчанию, таких как "Тип цены",
//	"Способ доставки" и т.д. Чтобы можно было понять чем различаются данные пакеты
//	предложений и выбрать нужный для загрузки.
//          
Функция ВыбратьПакетПредложений()
	
	Выборка			=	Документ.ВыбратьУзлы("//ПакетПредложений");
	    
	СписокПакетовПредложений	=	СоздатьОбъект("СписокЗначений");
	
	Для Индекс = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		ДоступныйПакет 			=	Выборка.ПолучитьУзел(Индекс);
		ИдентификаторКаталога	=	ДоступныйПакет.ПолучитьАтрибут("ИдентификаторКаталога");
		ИдентификаторВладельца	=	ДоступныйПакет.ПолучитьАтрибут("Владелец");
		Описание				=	ДоступныйПакет.ПолучитьАтрибут("Описание");
		
		ИмяПакета				=	": ";
		
		Каталог					=	КаталогПоИдентификатору(ИдентификаторКаталога);
		
		Если ПустоеЗначение(Каталог) = 1 Тогда Продолжить КонецЕсли;
		
		ВыборкаСвойств	=	ДоступныйПакет.ВыбратьУзлы("ЗначениеСвойства");
		Для СчСвойств = 0 По ВыборкаСвойств.КоличествоУзлов() - 1 Цикл
			Свойство			=	ВыборкаСвойств.ПолучитьУзел(СчСвойств);
			ИдКаталогаСвойства	=	Свойство.ПолучитьАтрибут("ИдентификаторКаталога");
			ИдСвойства			=	Свойство.ПолучитьАтрибут("ИдентификаторСвойства");
			ЗначениеСвойства	=	Свойство.ПолучитьАтрибут("Значение");
			
			Если ПустоеЗначение(ЗначениеСвойства) = 0 Тогда
				ИмяВидаСвойства	=	ВидСвойства(ИдКаталогаСвойства, ИдСвойства);
				Если ПустоеЗначение(ИмяВидаСвойства) = 1 Тогда Продолжить КонецЕсли;
				ИмяПакета		=	ИмяПакета + СокрЛП(ЗначениеСвойства) + " (" + ИмяВидаСвойства + ") ";
			КонецЕсли;
		КонецЦикла;
	
		СписокПакетовПредложений.ДобавитьЗначение(ДоступныйПакет,	"№" + Строка(Индекс + 1) + ИмяПакета);
	КонецЦикла;
	
	ЭлПакетПредложений	=	"";		Поз	=	"";
	Если СписокПакетовПредложений.ВыбратьЗначение(ЭлПакетПредложений, "Выберите загружаемый пакет предложений", Поз, 60, 0) = 0 Тогда Возврат(0) КонецЕсли;
	
КонецФункции		//	ВыбратьПакетПредложений()

//******************************************************************************
// ПроверитьИсходныеДанные(Этап)
//		
// Параметры:
//	Этап	-	имя процесса, перед которым производится проверка исходных данных
//		
// Возвращаемое значение:
// 	1	-	все в порядке,	0	-	не запускать процесс
//		
// Описание
//	Проверяем исходные данные перед началом какого-либо процесса (этапа).
//		
Функция ПроверитьИсходныеДанные(Этап="")
	
	Если Этап = "Начало" Тогда
		
		Если	ПустоеЗначение(ФормТипЦен)					=	1	Тогда	Предупреждение("Не выбран тип цен!");
			Возврат(0);
		КонецЕсли;
		Если	ПустоеЗначение(ФормИмяФайла)				=	1	Тогда	Предупреждение("Не выбран файл загрузки!");
			Возврат(0);
		КонецЕсли;
		Если	ФС.СуществуетФайл(ФормИмяФайла)				=	0	Тогда	Предупреждение("Указанный файл не существует!");
			Возврат(0);
		КонецЕсли;
		Если	ПустоеЗначение(ФормДатаУстановки)			=	1	Тогда	Предупреждение("Не указана дата установки цен!");
			Возврат(0);
		КонецЕсли;
		Если	ЗагрузитьВнешнююКомпоненту("V7Plus.dll")	<>	1	Тогда	Предупреждение("Ошибка загрузки компоненты V7+");
			Возврат(0);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции		//	ПроверитьИсходныеДанные()

//******************************************************************************
// ПрописатьЦенуТовара(Товар, Цена, Валюта, Единица)
//		
// Параметры:
//	Товар	-	Элемент справочникка "Номенклатура", для которого устанавливаем цену
//	Цена	-	Значение цены
//	Валюта	-	Валюта цены		(Справочник.Цены)
//	Единица	-	Единица цены	(Справочник.Единицы)
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Если цены с выбранным в диалоге типом цен у товара нет, то добавляем новую, иначе,
//	в случае несовпадения на заданную дату реквизитов существующих и загружаемых - замещаем...
//		
Процедура ПрописатьЦенуТовара(Товар, Цена, Валюта, Единица)
	                                              
	ЭлементЦены	=	"";

	Если глВернутьЦену(Товар, ФормТипЦен, ФормДатаУстановки, , , , ,ЭлементЦены) = 0 Тогда
		СпрЦен	=	СоздатьОбъект("Справочник.Цены");
		СпрЦен.ИспользоватьДату(ФормДатаУстановки, 1);
		СпрЦен.ИспользоватьВладельца(Товар);
		СпрЦен.Новый();
		СпрЦен.ТипЦен	= ФормТипЦен;
		СпрЦен.Единица	= Единица;
		СпрЦен.Цена		= Цена;
		СпрЦен.Валюта	= Валюта;
		СпрЦен.Процент	= ФормТипЦен.Процент;
		СпрЦен.Записать();
	Иначе
		СпрЦен	=	СоздатьОбъект("Справочник.Цены");
		СпрЦен.НайтиЭлемент(ЭлементЦены);
		СпрЦен.ИспользоватьДату(ФормДатаУстановки, 1);
		
		ФлЦенаИзменена	=	0;
		Если	СпрЦен.Валюта	<>	Валюта	Тогда
			Сообщить("Товар - " + Товар + ";		текущая валюта цены		- "		+ СпрЦен.Валюта	+	" - изменена на загружаемую - " + Валюта);
			СпрЦен.Валюта	=	Валюта;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если	СпрЦен.Единица	<>	Единица	Тогда
			//Сообщить("Товар - " + Товар + ";		текущая единица цены	- "	+ СпрЦен.Единица	+	" - изменена на загружаемую - " + Единица);
			СпрЦен.Единица	=	Единица;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если	СпрЦен.Цена		<>	Цена	Тогда
			СпрЦен.Цена		=	Цена;
			ФлЦенаИзменена	=	1;
		КонецЕсли;
		Если ФлЦенаИзменена	=	1 Тогда	СпрЦен.Записать()	КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ПрописатьЦенуТовара()

//******************************************************************************
// Выполнить()
//		
// Параметры:
//	Нет
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Здесь, собственно, прописан алгоритм загрузки прайс-листа
//		
Процедура Выполнить()
	
	Если ПроверитьИсходныеДанные("Начало") = 0 Тогда Возврат КонецЕсли;
	
	Если ПустоеЗначение(Документ) = 1 Тогда
		Анализатор				=	СоздатьОбъект("AddIn.XMLParser");
		Документ				=	Анализатор.СоздатьДокумент();
		Если ПустоеЗначение(Документ) = 1 Тогда	Возврат КонецЕсли;
		Документ.Загрузить(ФормИмяФайла);
	КонецЕсли;
	
	XMLКаталог				=	Документ.ВыбратьУзел("//Каталог");
	
	Если	ВыбратьПакетПредложений()	=	0	Тогда	Возврат	КонецЕсли;
	                        
	ВалютаПоУмолчанию		=	Валюта(ЭлПакетПредложений.ПолучитьАтрибут("Валюта"));
	ИмяЕдиницыПоУмолчанию	=	?(ПустоеЗначение(XMLКаталог) = 0, XMLКаталог.ПолучитьАтрибут("Единица"), "");
	
	ВыборкаПредложений		=	ЭлПакетПредложений.ВыбратьУзлы("Предложение");
	ВсегоПредложений		=	ВыборкаПредложений.КоличествоУзлов();
	Для СчПредложений	= 0 По ВсегоПредложений - 1 Цикл
	    ЭлПредложения		=	ВыборкаПредложений.ПолучитьУзел(СчПредложений);
		
		ИдентификаторТовара	=	ЭлПредложения.ПолучитьАтрибут("ИдентификаторТовара");
		НормаУпаковки		=	ЭлПредложения.ПолучитьАтрибут("НормаУпаковки");
		Единица				=	ЭлПредложения.ПолучитьАтрибут("Единица");
		Валюта				=	ЭлПредложения.ПолучитьАтрибут("Валюта");
		Цена				=	ЭлПредложения.ПолучитьАтрибут("Цена");
		
		Товар				=	ОпределитьТоварПредложения(ЭлПредложения);
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
		
		//	Наименование единицы ищем последовательно пока не найдем в XML-элементах:
		//	Предложении, Товаре, Каталоге. Если нигде нет, то берем единицу по умолчанию из справочника.
		
		Если ПустоеЗначение(Единица) = 1 Тогда
			Если ПустоеЗначение(ИдентификаторТовара) = 0 Тогда
				ЭлТовар	=	Документ.ВыбратьУзел("//Товар[@Идентификатор = """ + ИдентификаторТовара + """]");
				Единица	=	ЭлТовар.ПолучитьАтрибут("Единица");
			КонецЕсли;
		КонецЕсли;
		Если	ПустоеЗначение(Единица) = 1	Тогда 	Единица	=	ИмяЕдиницыПоУмолчанию	КонецЕсли;

		Ед					=	Единица(Товар, Единица, НормаУпаковки);
		Вал					=	Валюта(Валюта);
		ВалютаЦены			=	?(ПустоеЗначение(Вал)	= 0, Вал,	ВалютаПоУмолчанию);
		ЕдиницаЦены			=	?(ПустоеЗначение(Ед)	= 0, Ед,	Товар.ОсновнаяЕдиница);
		
		ПрописатьЦенуТовара(Товар, Цена, ВалютаЦены, ЕдиницаЦены);
		
		Если (СчПредложений + 1) % 10 = 0 Тогда
			Состояние("Всего предложений: " + ВсегоПредложений + "  Обработано предложений: " + (СчПредложений+1) );
		КонецЕсли;
		
	КонецЦикла;
	
	Предупреждение("Загрузка коммерческих предложений завершена!");
	
КонецПроцедуры		//	Выполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗначение, ИдЭлементаДиалога, Флаг)
    
	Если ИдЭлементаДиалога = "ФормТипЦен" Тогда
		
		Если ВыбЗначение.Рассчитывается = 1 Тогда
			Предупреждение("Эта рассчетная цена не может быть установлена!", 60);
			Флаг = 0;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	ФормДатаУстановки	=	РабочаяДата();
	
КонецПроцедуры

//******************************************************************************



