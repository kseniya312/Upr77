////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТекСтрокаВТаблице;                         // Текущая строка в таблице значений  МФ
Перем МеткаЕсть, МеткиНет;                       // Номера иконок пометки строки таблицы
Перем ТекРеквизит;                               // Текущее значение в списке реквизитов

Перем НомерТекущейФормы, ТаблицаПечФорм;
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//            
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.ИспользоватьЗакладки() = 1 Тогда
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
			Форма.ИспользоватьСлой("Подбор, КнопкиПодбора");
			
			Если ВклВид =  1 Тогда
			    Форма.Вид.Доступность(1);
			Иначе
			    Форма.Вид.Доступность(0);
			КонецЕсли;                 
			
			
			Если ВклНП =  1 Тогда
			    Форма.НП.Доступность(1);
			Иначе
			    Форма.НП.Доступность(0);
			КонецЕсли;                 
			
			
			Если ВклНДС =  1 Тогда
			    Форма.НДС.Доступность(1);
			Иначе
			    Форма.НДС.Доступность(0);
			КонецЕсли;                 
			
			
			Если ВклГТД =  1 Тогда
			    Форма.ГТД.Доступность(1);
			Иначе
			    Форма.ГТД.Доступность(0);
			КонецЕсли;                 
			
			
			Если ВклСтрана =  1 Тогда
			    Форма.Страна.Доступность(1);
			Иначе
			    Форма.Страна.Доступность(0);
			КонецЕсли;                 
			
			
		Иначе     
			Форма.ИспользоватьСлой("МФ, КнопкиПодбора");
		КонецЕсли;
	Иначе
		Если ВариантДействия = 1 Тогда
			Форма.ВключениеВпрайс.Доступность(1);
		Иначе
			Форма.ВключениеВпрайс.Доступность(0);
		КонецЕсли;
		
		Если ВариантДействия = 2 Тогда
			Форма.ПометкаУдаления.Доступность(1);
		Иначе
			Форма.ПометкаУдаления.Доступность(0);
		КонецЕсли;
		
		Если ВариантДействия = 3 Тогда
			Форма.ГруппаНоменклатуры.Доступность(1);
		Иначе
			Форма.ГруппаНоменклатуры.Доступность(0);
		КонецЕсли;
		
		Если ВариантДействия = 4 Тогда
			Форма.УдаляемоеСвойство.Доступность(1);
		Иначе
			Форма.УдаляемоеСвойство.Доступность(0);
		КонецЕсли;
		
		Если ВариантДействия = 5 Тогда
			Форма.СписокРеквизитов.Доступность(1);
			Форма.ЗначениеРеквизита.Доступность(1);
		Иначе
			Форма.СписокРеквизитов.Доступность(0);
			Форма.ЗначениеРеквизита.Доступность(0);
		КонецЕсли;

		Если ВариантДействия = 6 Тогда
			Форма.ТипЦен.Доступность(1);
		Иначе
			Форма.ТипЦен.Доступность(0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************
// ПриСменеРеквизита()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  При изменении текущей строки в списке реквизитов
//
// Описание:
//  Устанавливает соответствующий тип значения реквизита, 
//  присваивает ему значение, заданное в списке реквизитов
//
Процедура ПриСменеРеквизита()
	
	НовыйРеквизит = СписокРеквизитов.ПолучитьЗначение(СписокРеквизитов.ТекущаяСтрока(),"");
	
	// Менять значение реквизита следует только при изменении текущей строки в списке реквизитов
	Если ТекРеквизит <> НовыйРеквизит Тогда
		ТекРеквизит = НовыйРеквизит;
		Форма.ЗначениеРеквизита.УстановитьТип(ТекРеквизит);
		ЗначениеРеквизита = ТекРеквизит;
	КонецЕсли;
	
КонецПроцедуры // ПриСменеРеквизита()

//******************************************************************************
// ЕстьОстатокТМЦ(ТМЦ, Остаток, Резерв)
//
// Параметры: 
//  ТМЦ     - элемент Номенклатура, по которому надо проанализипровать остаток,
//  Остаток - Фактический остаток
//  Резерв  - фактический резерв
// Возвращаемое значение:
//  1 - Есть остаток, 
//  0 - нет остатка
//
// Описание:
//  Определяет есть ли остаток данной ТМЦ 
//
Функция ЕстьОстатокТМЦ(ТМЦ, Остаток, Резерв)
	            
	Рез = 0;
	
	// Если нужно учитывать еще и резервы
	Если Показатель.ТекущаяСтрока() = 2 Тогда
		Остаток = Остаток - Резерв; 
	КонецЕсли;         
	     
	ТекСтр  = ЗначениеПоказателя.ТекущаяСтрока();
	ТекЗнач = ЗначениеПоказателя.ПолучитьЗначение(ТекСтр); 
	Если ТекЗнач = "все" Тогда Рез = 1;
		
	ИначеЕсли ТекЗнач = "положительные" Тогда
		
		Если Остаток > 0 Тогда Рез = 1; КонецЕсли;
		
	ИначеЕсли ТекЗнач =  "отрицательные и нулевые" Тогда
		
		Если Остаток <= 0 Тогда Рез = 1;	КонецЕсли;
		
	ИначеЕсли ТекЗнач =  "меньше мин. остатка" Тогда
		
		Если Остаток < ТМЦ.МинОстаток Тогда   Рез = 1;	КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЕстьОстатокТМЦ()

//******************************************************************************
// ГрупповаяПометка(Режим)
//
// Параметры: 
//  Режим:
//   1 - пометить все
//   2 - снять пометку
//   3 - инвертировать пометку
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
// кнопки групповой пометки
//
// Описание:
//  Производит групповые действия с пометкой строк таблицы формы
//
Процедура ГрупповаяПометка(Режим)
	
	ТаблицаНоменклатуры.ВыбратьСтроки();
	
	Пока ТаблицаНоменклатуры.ПолучитьСтроку() = 1 Цикл
		
		Если Режим=1 Тогда              
			
			ТаблицаНоменклатуры.Пометка = МеткаЕсть;
			
		ИначеЕсли Режим=2 Тогда
			
			ТаблицаНоменклатуры.Пометка = МеткиНет;
			
		ИначеЕсли Режим=3 Тогда
			
			Если ТаблицаНоменклатуры.Пометка=МеткиНет Тогда
				ТаблицаНоменклатуры.Пометка = МеткаЕсть;
			Иначе
				ТаблицаНоменклатуры.Пометка = МеткиНет;
			КонецЕсли;                           
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ГрупповаяПометка()         

//******************************************************************************
// ПерезаполнитьСтрокуТаблицы(НомерСтроки)
//
// Параметры: 
//  НомерСтроки - номер строки таблица, чьи колонки надо перезаполнить
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет значения ячеек для строки с переданным номером
//
Процедура ПерезаполнитьСтрокуТаблицы(НомерСтроки)
	
	Номенклатура = ТаблицаНоменклатуры.ПолучитьЗначение(НомерСтроки, "Номенклатура");

	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "Вид",              СокрЛП(Номенклатура.ВидНоменклатуры));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "Группа",           СокрЛП(Номенклатура.Родитель));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "Статус",           ?(Номенклатура.ПометкаУдаления() = 1, "Удален", ""));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "ВключенВпрайс",    ?(Номенклатура.НеВключатьВПрайс = 1, "Нет", ""));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "НДС",              Строка(Номенклатура.СтавкаНДС));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "НП",               Строка(Номенклатура.СтавкаНП));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "ОсновноеСвойство", СокрЛП(Номенклатура.ОсновноеСвойство.ЗначениеСвойства));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "МинОстаток",       Формат(Номенклатура.МинОстаток,"Ч14.3"));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "НомерГТД",         СокрЛП(Номенклатура.НомерГТД));
	ТаблицаНоменклатуры.УстановитьЗначение(НомерСтроки, "Страна",           СокрЛП(Номенклатура.СтранаПроисхождения));
	
КонецПроцедуры // ПерезаполнитьСтрокуТаблицы()


//******************************************************************************
// ПриДвойномЩелчкеНаТаблице()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  Таблица значений ТаблицаНоменклатуры
//
// Описание:
//  Обрабатывает двойной щелчок (нажатие клавиши "Enter") на таблице формы
//
Процедура ПриДвойномЩелчкеНаТаблице()
	Перем ТекКол, ТекСтр;
	
	ТаблицаНоменклатуры.ТекущаяКолонка(,ТекКол);
	ТекСтр = ТаблицаНоменклатуры.ТекущаяСтрока();
	КодТекКол = ТаблицаНоменклатуры.ПолучитьПараметрыКолонки(ТекКол);
	
	Если ТекСтр > 0 Тогда
		
		Если КодТекКол = "Пометка" Тогда
			
			Если ТаблицаНоменклатуры.Пометка = МеткаЕсть Тогда
				ТаблицаНоменклатуры.Пометка = МеткиНет;
			Иначе
				ТаблицаНоменклатуры.Пометка = МеткаЕсть;
			КонецЕсли;
			
		ИначеЕсли КодТекКол = "Номенклатура" Тогда
			
			ОткрытьФормуМодально(ТаблицаНоменклатуры.Номенклатура);
			ПерезаполнитьСтрокуТаблицы(ТекСтр);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриДвойномЩелчкеНаТаблице()


//******************************************************************************
// ПоКнопкеВыполнить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке выполнить
//
// Описание:
//  Производит выбранное действия с выбранными позициями номенклатуры
//
Процедура ПоКнопкеВыполнить()
	Перем ЦенаЦены, ЕдЦены;
	
	// Проверим, все ли задано
	Если ВариантДействия = 1 Тогда // Флаг включения в прайс
		
		Если ВключениеВпрайс.ТекущаяСтрока() = 0 Тогда
			Предупреждение("Не выбрано действие с флагом включения в прайс.",60);
			Активизировать("ВключениеВпрайс");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 2 Тогда // Пометка на удаление
		
		Если ПометкаУдаления.ТекущаяСтрока() = 0 Тогда
			Предупреждение("Не выбрано действие с пометкой на удаление.",60);
			Активизировать("ПометкаУдаления");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 3 Тогда // Перенести в группу
		
		Если ГруппаНоменклатуры.Выбран() = 0 Тогда
			Предупреждение("Не выбрана группа, в которую надо перенестие элементы.",60);
			Активизировать("ГруппаНоменклатуры");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 4 Тогда // Удалить свойство
		
		Если ПустоеЗначение(УдаляемоеСвойство) = 1 Тогда
			Предупреждение("Не выбрано свойство, которое надо удалить.",60);
			Активизировать("УдаляемоеСвойство");
			Возврат;
		КонецЕсли;
	ИначеЕсли ВариантДействия = 5 Тогда // Установить реквизит
		
		Если СписокРеквизитов.ТекущаяСтрока() = 0 Тогда
			Предупреждение("Не выбран устанавливаемый реквизит.",60);
			Активизировать("СписокРеквизитов");
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВариантДействия = 6 Тогда // расчет ценовых коэффициентов
		Если ПустоеЗначение(ТипЦен) = 1 Тогда
			Предупреждение("Не выбран тип цен, на основании которого будут рассчитаны ценовые коэффициенты.",60);
			Активизировать("ТипЦен");
			Возврат;
		КонецЕсли;
		
		СпрКомплектующие	= СоздатьОбъект("Справочник.Комплектация");
	КонецЕсли;	

	//Попытка
	//	НачатьТранзакцию();
		
		ТМЦ        = СоздатьОбъект("Справочник.Номенклатура");
		СпрСвойств = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
		ТаблицаНоменклатуры.ВыбратьСтроки();
		Пока ТаблицаНоменклатуры.ПолучитьСтроку() = 1 Цикл
			
			ТекСтрока = ТаблицаНоменклатуры.НомерСтроки; 
			
			// Не помечен к обработке
			Если ТаблицаНоменклатуры.Пометка = МеткиНет Тогда
				Продолжить;
			КонецЕсли;	
			
			// не оказалось товара
			Если ТМЦ.НайтиЭлемент(ТаблицаНоменклатуры.Номенклатура) = 0 Тогда
				Сообщить("Не найден """ + СокрЛП(ТаблицаНоменклатуры.Номенклатура) + """! Действие не выполнено!","!");
				Продолжить;
			КонецЕсли;	
			
			Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
			                 
			Если ВариантДействия = 1 Тогда  // ФлагВключения в прайс
				
				Если ВключениеВпрайс.ТекущаяСтрока() = 1 Тогда
					Выкл = 0;
				Иначе
					Выкл = 1;
				КонецЕсли;
				ТМЦ.НеВключатьВпрайс = Выкл;
				
			ИначеЕсли ВариантДействия = 2 Тогда  // Пометка на удаление	
				
				Если ПометкаУдаления.ТекущаяСтрока() = 1 Тогда
					Если глПриУдаленииЭлемента(ТМЦ, 0, 0, 0) = 1 Тогда
					    ТМЦ.Удалить(0);
					КонецЕсли;
				Иначе
					ТМЦ.СнятьПометкуУдаления();
					Если глПриУдаленииЭлемента(ТМЦ, 0, 0, 1) = 0 Тогда
						ТМЦ.Удалить(0);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ВариантДействия = 3 Тогда  // Перенести в группу 
				
				ТМЦ.Родитель = ГруппаНоменклатуры;
				
			ИначеЕсли ВариантДействия = 4 Тогда  // Удалить свойство 		
				
				СпрСвойств.ИспользоватьВладельца(ТМЦ);
				Если СпрСвойств.НайтиПоРеквизиту("ЗначениеСвойства", УдаляемоеСвойство, 0) = 1 Тогда
					
					// Свойство м.б. основным
					Если СпрСвойств.ВидСвойства = Константа.ВидСвойстваНоменклатуры Тогда
						ТМЦ.ОсновноеСвойство = "";
					КонецЕсли;
					СпрСвойств.Удалить(1);
				КонецЕсли;
					
			ИначеЕсли ВариантДействия = 5 Тогда  // Установить реквизит	
				                                 
				ТекРеквизит = "";
				Атрибут  = "";
				СписокРеквизитов.ПолучитьЗначение(СписокРеквизитов.ТекущаяСтрока(), ТекРеквизит);
				Если      ТекРеквизит = "Ставка НДС" Тогда
					
					Атрибут = "СтавкаНДС";
					
				ИначеЕсли ТекРеквизит = "Ставка НП" Тогда 	
					
					Атрибут = "СтавкаНП";    
					
				ИначеЕсли ТекРеквизит = "Основное свойство" Тогда 	
					
					СпрСвойств.ИспользоватьВладельца(ТМЦ);
					Если СпрСвойств.НайтиПоРеквизиту("ЗначениеСвойства", ЗначениеРеквизита, 0) = 1 Тогда
						
						// Уже есть такое, проверим не удалено ли
						Если СпрСвойств.ПометкаУдаления() = 1 Тогда
						    СпрСвойств.СнятьПометкуУдаления();
						КонецЕсли;
					Иначе
						СпрСвойств.Новый();
						СпрСвойств.ЗначениеСвойства = ЗначениеРеквизита;
						СпрСвойств.ВидСвойства      = ЗначениеРеквизита.Владелец;  
						СпрСвойств.Записать();
						
					КонецЕсли;
					
					Если СпрСвойств.ВидСвойства = Константа.ВидСвойстваНоменклатуры Тогда
						ТМЦ.ОсновноеСвойство = СпрСвойств.ТекущийЭлемент();
					КонецЕсли;
					
				ИначеЕсли ТекРеквизит = "Минимальный остаток" Тогда 	
					
					Атрибут = "МинОстаток";    
					
				ИначеЕсли ТекРеквизит = "Номер ГТД" Тогда 	
					
					Атрибут = "НомерГТД";
			//-----------------------------------------------------------------		
					
				ИначеЕсли ТекРеквизит = "Количество в упаковке" Тогда 	
					
					Атрибут = "КоличествоВУпаковке"; 
					
				ИначеЕсли ТекРеквизит = "Количество в коробке" Тогда 	
					
					Атрибут = "КоличествоВКоробке";
				ИначеЕсли ТекРеквизит = "Количество на паллете" Тогда 	
					
					Атрибут = "КоличествоНаПаллете"; 
			//-----------------------------------------------------------------
				ИначеЕсли ТекРеквизит = "Страна происхождения" Тогда 	
					
					Атрибут = "СтранаПроисхождения";    
				
				ИначеЕсли ТекРеквизит = "Производитель" Тогда
					Атрибут = "Производитель";
					
				ИначеЕсли ТекРеквизит = "Виды Отбора" Тогда 	

					Атрибут = "НеПоказывать";    

				КонецЕсли;
				
				Если ПустоеЗначение(Атрибут) = 0 Тогда
					ТМЦ.УстановитьАтрибут(Атрибут,ЗначениеРеквизита);
				КонецЕсли;
			    
			ИначеЕсли ВариантДействия = 6 Тогда  // Установить реквизит	
			    СпрКомплектующие.ИспользоватьВладельца(ТМЦ);
				СпрКомплектующие.ВыбратьЭлементы();
				
				Пока СпрКомплектующие.ПолучитьЭлемент() = 1 Цикл
					Номенклатура	= СпрКомплектующие.Номенклатура;
					СпрКомплектующие.ЦеновойКоэфф = глПолучитьЦену(Номенклатура,
					                                               ТипЦен, РабочаяДата(), Номенклатура.БазоваяЕдиница);
					СпрКомплектующие.Записать();
				КонецЦикла;
			КонецЕсли;     
			
			ТМЦ.Записать();
			ПерезаполнитьСтрокуТаблицы(ТекСтрока);
		КонецЦикла;
		
		Сообщить("Обработка закончена",".");
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение                          
	//	ОтменитьТранзакцию();
	//	Сообщить(ОписаниеОшибки(), "!");
	//КонецПопытки;
	
	
КонецПроцедуры // ПоКнопкеВыполнить() 

//******************************************************************************
// ПоКнопкеСформировать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "Сформировать"
// 
// Описание:
//  Отбирает необходимые ТМЦ и открывает слой обработки "Обработка"
//
Процедура ПоКнопкеСформировать()
	
    глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
                         
	// Формируем таблицу номенклатуры
	ТаблицаНоменклатуры.Очистить();
	ТаблицаНоменклатуры.НоваяКолонка("Пометка",         "Число" ,1,,                      , 4   );
	ТаблицаНоменклатуры.НоваяКолонка("Номенклатура",            , ,,                      ,30   );
	ТаблицаНоменклатуры.НоваяКолонка("Вид",             "Строка", ,,                      , 6   );                         
	ТаблицаНоменклатуры.НоваяКолонка("Группа",          "Строка", ,,                      ,20   ); 
	ТаблицаНоменклатуры.НоваяКолонка("Статус",          "Строка", ,,                      ,10,,2);
	ТаблицаНоменклатуры.НоваяКолонка("ВключенВпрайс",   "Строка", ,,"В прайсе"            ,12,,2);
	ТаблицаНоменклатуры.НоваяКолонка("НДС",             "Строка", ,,"НДС(%)"              ,10,,2);
	ТаблицаНоменклатуры.НоваяКолонка("НП",              "Строка", ,,"НП(%)"               , 8,,2);
	ТаблицаНоменклатуры.НоваяКолонка("ОсновноеСвойство","Строка", ,,"Свойство"            ,15   );
	ТаблицаНоменклатуры.НоваяКолонка("МинОстаток",      "Строка", ,,"Мин. остаток"        ,20,,2);
	ТаблицаНоменклатуры.НоваяКолонка("НомерГТД",        "Строка", ,,"Номер ГТД"           ,20,,2); 
	ТаблицаНоменклатуры.НоваяКолонка("Страна",          "Строка", ,,"Страна происхождения",30   );  

	ТаблицаНоменклатуры.ВыводитьПиктограммы("Пометка",1);

 	// Сначала запускаем запрос по одним только позициям номенклатуры	
 	// Если нуженфильтр по остаткам, то запрос по регистру, если нет, то по справочнику
 	Если ЗначениеПоказателя.ПолучитьЗначение(ЗначениеПоказателя.ТекущаяСтрока()) = "все" Тогда
 		ТекстЗапроса = 
 		"//{{ЗАПРОС(Сформировать)
 		|Номенклатура	= Справочник.Номенклатура.ТекущийЭлемент;      
 		|Группировка Номенклатура Без Групп;";
 	Иначе    
 		ДатаКон = ПолучитьДатуТА();
 		ТекстЗапроса = 
 		"//{{ЗАПРОС(Сформировать)
 		|Период с ДатаКон по ДатаКон;
 		|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура,      
 		|                 Регистр.РезервыТМЦ.Номенклатура,
	 	|                 Справочник.Номенклатура.ТекущийЭлемент;
 		|Остаток        = Регистр.ОстаткиТМЦ.Количество;
 		|Резерв         = Регистр.РезервыТМЦ.Количество;
 		|Функция ОстатокКонОст    = КонОст(Остаток);
 		|Функция РезервКонОст     = КонОст(Резерв);
 		|Группировка Номенклатура Без Групп все;";
 	КонецЕсли;
 	
	Если ВклВид = 1 Тогда
		Если ПустоеЗначение(Вид) = 1 Тогда
			Предупреждение("Не выбран вид номенклатуры.",60);
			Активизировать("Вид");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.ВидНоменклатуры в Вид);";
	КонецЕсли;
	

	Загол="";
	НетОш = 1; // нет ошибок при наложении фильтров
 	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	
	
	// Если ошибка в запросе, то выход из процедуры
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Условия по налогам
	Если ВклНП = 1 Тогда
		Если ПустоеЗначение(НП) = 1 Тогда
			Предупреждение("Не выбрана ставка НП.",60);
			Активизировать("НП");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.СтавкаНП в НП);";
	КонецЕсли;
	
	Если ВклНДС = 1 Тогда
		Если ПустоеЗначение(НДС) = 1 Тогда
			Предупреждение("Не выбрана ставка НДС.",60);
			Активизировать("НДС");
			Возврат;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.СтавкаНДС в НДС);";
	КонецЕсли;
	
	// Добавим отбор по флагу включения в прайс	
	Если ВариантВключенияВпрайс > 1 Тогда  
		Если ВариантВключенияВпрайс = 2 Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.НеВключатьВпрайс = 0);";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.НеВключатьВпрайс = 1);";
		КонецЕсли;
    КонецЕсли;

   //ГТД и Страна происхождения
	Если ВклГТД = 1 Тогда
		Если ПустоеЗначение(ГТД) = 1 Тогда
			Предупреждение("Не выбран номер ГТД.",60);
			Активизировать("ГТД");
			Возврат;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.НомерГТД в ГТД);";
	КонецЕсли;
	
	Если ВклСтрана = 1 Тогда
		Если ПустоеЗначение(Страна) = 1 Тогда
			Предупреждение("Не выбрана страна происхождения.",60);
			Активизировать("Страна");
			Возврат;
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "Условие (Номенклатура.СтранаПроисхождения в Страна);";
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	Счетчик = 0;
	ТекСтр  = 0;
 	Пока Запрос.Группировка("Номенклатура") = 1 Цикл
		
		Состояние("Обработано товаров: " + Строка(Счетчик));
		Счетчик = Счетчик + 1;
		
		// Проверим наличие
		Номенклатура = Запрос.Номенклатура; 
	 	Если ЗначениеПоказателя.ПолучитьЗначение(ЗначениеПоказателя.ТекущаяСтрока()) <> "все" Тогда
			Если ЕстьОстатокТМЦ(Номенклатура, Запрос.ОстатокКонОст, Запрос.РезервКонОст) = 0 Тогда
				Продолжить;
			КонецЕсли;     
		КонецЕсли;     
			
		ТаблицаНоменклатуры.НоваяСтрока();
		ТекСтр = ТекСтр + 1;
			
       	ТаблицаНоменклатуры.Номенклатура     = Номенклатура;
       	ТаблицаНоменклатуры.Пометка          = МеткаЕсть; //Все строки помечены по умолчанию
			
		ПерезаполнитьСтрокуТаблицы(ТекСтр);

		
 	КонецЦикла;
		
	// Таблица сформирована, если есть что обрабатывать, то запускаем обработку формирования
	Если ТаблицаНоменклатуры.КоличествоСтрок() = 0 Тогда
		Предупреждение("Ни одна позиция номенклатуры не удовлетворяет наложенным условиям.",60);
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьЗакладки(0);
	Форма.ИспользоватьСлой("Обработка, КнопкиОбработки");
	
	УправлениеДиалогом();
	ПриСменеРеквизита();
	Форма.КнопкаПоУмолчанию("кнВыполнить");
	
КонецПроцедуры // ПоКнопкеСформировать()

//******************************************************************************
// ПоКнопкеНастройка()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  по кнопке "Настройка"
//
// Описание:
//  Переключает форму на закладку поддбора
//
Процедура ПоКнопкеНастройка()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ТекущаяСтрока(1);
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();
	Форма.КнопкаПоУмолчанию("кнСформировать");
	
КонецПроцедуры // ПоКнопкеНастройка()

//******************************************************************************
// ДобавитьВтаблицу(Табл, Товар, Тип, ИспТип)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ДобавитьВтаблицу(Табл, Товар, Тип)
	Перем ВремЦена, ВремЕдиница, ВремВалюта;
	
	Если глВернутьЦену(Товар, Тип, РабочаяДата(), ВремЦена, ВремЕдиница, ВремВалюта) = 1 Тогда
		Табл.НоваяСтрока();
		Табл.Товар		= СокрЛП(Товар.ПолнНаименование);
		Табл.Цена		= ВремЦена;
		Табл.Валюта		= ВремВалюта;
		Табл.Единица	= ВремЕдиница;
	Иначе
		Сообщить("У товара """ + Товар.ПолнНаименование + """ отсутствует цена """ + Тип + """");
	КонецЕсли;	
	
КонецПроцедуры // ДобавитьВтаблицу()

//******************************************************************************
// ПечатьЦенников()
//
// Параметры:
//  Нет.
//
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу из всех помеченных позиций для вызова обработки печати ценников.
//
Процедура ПечатьЦенников() Экспорт
	Перем Таб;
 	Перем ТабТоваров, ДанныеДляПечати;
		
	Если ТаблицаНоменклатуры.КоличествоСтрок() = 0 Тогда
		Предупреждение("В таблице отсутствуют товары!", 60);
		Возврат;
	КонецЕсли;
		
    ТипЦены	=	СоздатьОбъект("Справочник.ТипыЦен");
	Если ТипЦены.Выбрать("Типы цен",) = 0 Тогда Возврат КонецЕсли;
 	ТипЦены	=	ТипЦены.ТекущийЭлемент();
	
	ТабТоваров = СоздатьОбъект("ТаблицаЗначений");
	ТабТоваров.НоваяКолонка("Товар");
	ТабТоваров.НоваяКолонка("Цена","Число");
	ТабТоваров.НоваяКолонка("Единица");
	ТабТоваров.НоваяКолонка("Валюта");
	
	ТаблицаНоменклатуры.ВыбратьСтроки();
		
	Пока ТаблицаНоменклатуры.ПолучитьСтроку() = 1 Цикл
		Если ТаблицаНоменклатуры.Пометка = МеткаЕсть Тогда
			ДобавитьВтаблицу(ТабТоваров, ТаблицаНоменклатуры.Номенклатура, ТипЦены);
		КонецЕсли; 
	КонецЦикла;
	
	// упакуем данные в список
	ДанныеДляПечати = СоздатьОбъект("СписокЗначений");
 	
	Фирма = СокрЛП(глЗначениеПоУмолчанию("ОсновнаяФирма").ЮрЛицо.ПолнНаименование);
	ДанныеДляПечати.ДобавитьЗначение(Фирма          , "Фирма");
	ДанныеДляПечати.ДобавитьЗначение(ТипЦены.Валюта , "Валюта");
	ДанныеДляПечати.ДобавитьЗначение(ТабТоваров     , "Таблица");
	
	ОткрытьФормуМодально("Обработка.ПечатьЦенников", ДанныеДляПечати);
	
КонецПроцедуры // ПечатьЦенников()

//******************************************************************************
// ПечатьЭтикеток()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Печать этикеток со штрихкодом для всех помеченных позиций номенклатуры
//
Процедура ПечатьЭтикеток()
	Перем СписВесовых;
	
	Если ТаблицаНоменклатуры.КоличествоСтрок() = 0 Тогда
		Предупреждение("В таблице отсутствуют товары!", 60);
		Возврат;
	КонецЕсли;
	
	СписВесовых = СоздатьОбъект("СписокЗначений");
		
	Табл = СоздатьОбъект("ТаблицаЗначений");
	Табл.НоваяКолонка("Товар", "Строка");
	Табл.НоваяКолонка("Штрихкод", "Строка");

	ТаблицаНоменклатуры.ВыбратьСтроки();
	Пока ТаблицаНоменклатуры.ПолучитьСтроку() = 1 Цикл
		                     
		Если ТаблицаНоменклатуры.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли; 
		
		Товар = ТаблицаНоменклатуры.Номенклатура;
		
		Если Товар.Весовой = 1 Тогда
		    СписВесовых.ДобавитьЗначение(Товар);
			Продолжить;
		КонецЕсли;
		
		Табл.НоваяСтрока();
		Табл.Товар    = СокрЛП(Товар.Наименование);
		Табл.Штрихкод = СокрЛП(Товар.БазоваяЕдиница.Штрихкод);
	КонецЦикла;

	Парам = СоздатьОбъект("СписокЗначений");
	Парам.ДобавитьЗначение(Табл, "ТаблицаТоваров");
	
	ОткрытьФормуМодально("Обработка.ПечатьЭтикетки", Парам);
	
	Если СписВесовых.РазмерСписка() > 0 Тогда
	    Сообщить("");
		Сообщить("Для печати этикеток нижеследующих весовых товаров воспользуйтесь");
		Сообщить("обработкой ""Этикеторование"", которую можно вызвать из меню ""Сервис"".");
	    Сообщить("================================================================================");
		Для Сч = 1 По СписВесовых.РазмерСписка() Цикл
			Сообщить(СписВесовых.ПолучитьЗначение(Сч));
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПечатьЭтикеток()

//******************************************************************************
// ПоКнопкеПечать()
// 
// Параметры: 
//	Нет
//
// Описание:
// 	Вызывается по кнопке "Печать"  
// 	
Процедура ПоКнопкеПечать(СразуНаПринтер = 0,КолЭкз = 1)
	
	Если  ПустоеЗначение(НомерТекущейФормы) = 1  Тогда
		НомерТекущейФормы = 1;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
	КонецЕсли;
	
	Если НомерТекущейФормы = 1  Тогда
		ПечатьЦенников();
	ИначеЕсли НомерТекущейФормы = 2  Тогда
		ПечатьЭтикеток();
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.ДобавитьЗначение(глВзятьКонтекст(Контекст), "Контекст");
		Параметры.ДобавитьЗначение(СразуНаПринтер, "Устройство");
		Параметры.ДобавитьЗначение(КолЭкз, "КоличествоКопий");
		
		ОткрытьФорму("Отчет", Параметры, глКаталогПечФорм+ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы,"Файл"));
	КонецЕсли;
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПоКнопкеВыборПечатнойФормы()
//
// Параметры:
//  нет.    
//
// Возвращаемое значение:
//  нет.
//
// Описание:
//  - открывает список для выбора способа печати. 
//  - формирует таблицу по выбранному способу.
//
Процедура ПоКнопкеВыборПечатнойФормы()
	
    ВыбНомер = глВыборПечатнойФормы("Справочник.Номенклатура", ТаблицаПечФорм);
	Если ВыбНомер > 0 Тогда
		НомерТекущейФормы = ВыбНомер;
		Форма.кнПечать.Заголовок(ТаблицаПечФорм.ПолучитьЗначение(НомерТекущейФормы, "Кнопка"));
		ПоКнопкеПечать();
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыборПечатнойФормыСпис()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии(ФлагВосстановленияНастройки)
	
	// Заполним таблицу для выбора печатной формы
	НомерТекущейФормы = глУстановкаКнопкиПечать(Контекст, "Справочник.Номенклатура", ТаблицаПечФорм);
	
	// Инициализация переменных
	Если ФлагВосстановленияНастройки = 0 Тогда
		ВариантВключенияВпрайс = 1;
		ВариантДействия = 1;
	КонецЕсли;
	
	ПерерисовкаНазванийЗакладок();
	
	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	УправлениеДиалогом();
	Форма.КнопкаПоУмолчанию("кнСформировать");
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	
	
	Если ИдентЭлемДиалога = "ЗначениеРеквизита" Тогда
		ТекРеквизит = "";
		СписокРеквизитов.ПолучитьЗначение(СписокРеквизитов.ТекущаяСтрока(), ТекРеквизит);
		Если ТекРеквизит = "Основное свойство" Тогда
			ЗначениеРеквизита.ИспользоватьВладельца(Константа.ВидСвойстваНоменклатуры);
		ИначеЕсли ТекРеквизит = "Ставка НП" Тогда
			// ставку НП нужно выбирать из выпадающего списка 
			ФлагСтандОбр = 0;
			СписНП	= СоздатьОбъект("СписокЗначений");
			СпрНП	= СоздатьОбъект("Справочник.СтавкиНП");
			СпрНП.ВыбратьЭлементы();
			Пока СпрНП.ПолучитьЭлемент() = 1 Цикл
			    СписНП.ДобавитьЗначение(СпрНП.ТекущийЭлемент());
			КонецЦикла;
			
			ВыбЗнач	= ЗначениеРеквизита;
			Если СписНП.ВыбратьЗначение(ВыбЗнач, , , 60, 2) = 1 Тогда
			    ЗначениеРеквизита	= ВыбЗнач;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач,ИдентЭлемДиалога,ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "ГруппаНоменклатуры" Тогда 
		
		Если ВыбЗнач.ЭтоГруппа() = 0 Тогда
		    ФлагСтандОбр = 0;   
			Предупреждение("Выберите группу!",60);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора()

 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
МеткаЕсть = 2;  МеткиНет = 1; // Номера иконок пометки

// инициализация списков
ВключениеВпрайс.УдалитьВсе();
ВключениеВпрайс.ДобавитьЗначение("Поставить");						
ВключениеВпрайс.ДобавитьЗначение("Снять");						
ВключениеВпрайс.ТекущаяСтрока(1);

ПометкаУдаления.УдалитьВсе();
ПометкаУдаления.ДобавитьЗначение("Поставить");						
ПометкаУдаления.ДобавитьЗначение("Снять");						
ПометкаУдаления.ТекущаяСтрока(1);

ЗначениеПоказателя.УдалитьВсе();                             
ЗначениеПоказателя.ДобавитьЗначение("все");                   
ЗначениеПоказателя.ДобавитьЗначение("положительные"); 
ЗначениеПоказателя.ДобавитьЗначение("отрицательные и нулевые"); 
ЗначениеПоказателя.ДобавитьЗначение("меньше мин. остатка"); 
ЗначениеПоказателя.ТекущаяСтрока(1);                                 

Показатель.УдалитьВсе();                             
Показатель.ДобавитьЗначение("остатки");
Показатель.ДобавитьЗначение("остатки за минусом резервов");
Показатель.ТекущаяСтрока(1);

СписокРеквизитов.УдалитьВсе();
СписокРеквизитов.ДобавитьЗначение(глЗначениеПоУмолчанию("ОсновнаяСтавкаНДС"),"Ставка НДС");						
СписокРеквизитов.ДобавитьЗначение(глЗначениеПоУмолчанию("ОсновнаяСтавкаНП"),"Ставка НП");						

Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры ) = 0 Тогда
	СписокРеквизитов.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств"),"Основное свойство");						
КонецЕсли;

СписокРеквизитов.ДобавитьЗначение(0, "Минимальный остаток");						
СписокРеквизитов.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.ГТД"),"Номер ГТД");						
СписокРеквизитов.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.ОКСМ"),"Страна происхождения");
СписокРеквизитов.ДобавитьЗначение(ПолучитьПустоеЗначение("Справочник.Производители"), "Производитель");
СписокРеквизитов.ДобавитьЗначение(0, "Количество в упаковке");
СписокРеквизитов.ДобавитьЗначение(0, "Количество в коробке");
СписокРеквизитов.ДобавитьЗначение(0, "Количество на паллете");



СписокРеквизитов.ДобавитьЗначение(Перечисление.ТипОтображенияВОтборе.Вариант1,"Виды Отбора");						

СписокРеквизитов.ТекущаяСтрока(1);


// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов");                 // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ");                           // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,);      // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
//                                 тип          вид                переменная          название
глДобавитьВТаблицуМФ(ТаблицаМФ, "Справочник", "Номенклатура",    "Номенклатура",  "По номенклатуре");
глДобавитьВТаблицуМФ(ТаблицаМФ, "Справочник", "ЗначенияСвойств", "Номенклатура",  "По свойствам номенклатуры");

ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);


////////////////////////////////////////////////////////////////////////////////
// 

ТаблицаПечФорм		= СоздатьОбъект("ТаблицаЗначений");
ТаблицаПечФорм.НоваяКолонка("Название","Строка",,,,30);
ТаблицаПечФорм.НоваяКолонка("Файл","Строка",,,"Файл",10);
ТаблицаПечФорм.НоваяКолонка("Кнопка","Строка",,,,10); 
ТаблицаПечФорм.НоваяКолонка("ФайлОписания","Строка");

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Ценники";
ТаблицаПечФорм.Кнопка	= "Ценники";

ТаблицаПечФорм.НоваяСтрока();
ТаблицаПечФорм.Название	= "Этикетки";
ТаблицаПечФорм.Кнопка	= "Этикетки";

НомерТекущейФормы = 0;