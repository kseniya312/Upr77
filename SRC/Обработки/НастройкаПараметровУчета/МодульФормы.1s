////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ВыписаныДокументы;
Перем ТекущаяЗакладка; // Текущая закладка формы.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// РассказатьОКонтролеОстатков()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
// Текст подсказки о текущем режиме контроля остатков ТМЦ.
//
// Вызывается из формул элементов диалога.
//
// Описание:
//  Формирует текст подсказки о текущем режиме работы с остатками.
//
Функция РассказатьОКонтролеОстатков()
	Если      КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоФирме          Тогда
		Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий выбранной в документе фирме.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоУпрАналитике	  Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий всем фирмам имеющим упр.аналитику, " +
		"совпадающую с упр. аналитикой выбранной в документе фирмы.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоЮрЛицу         Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться свободный остаток на складе " +
		"(за вычетом резерва), принадлежащий всем фирмам имеющим юр. лицо, " +
		"совпадающее с юр.лицом выбранной в документе фирмы.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.ПоКомпании       Тогда
        Возврат 
		"При отпуске ТМЦ будет контролироваться фактический остаток на складе " +
		"за вычетом резерва, принадлежащий всем фирмам компании.";
		
	ИначеЕсли КонтрольОстатков = Перечисление.СпособыКонтроляОстатковТМЦ.НеКонтролировать Тогда
		Возврат 
		"При отпуске ТМЦ остаток контролироваться не будет.
		|Отрицательные остатки будут записываеться за указанной в документе фирмой.";
	Иначе	
		Возврат 
		"Не выбран способ контроля остатков ТМЦ.";
	КонецЕсли;
КонецФункции //РассказатьОКонтролеОстатков()

//******************************************************************************
// ПоКнопкеЗначенияСвойств(Знач Параметр)
//
// Параметры:
//  Параметр - "Справочник.ВидыСвойств".
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки "Значения свойств".
//
// Описание:
//  Открывает справочник значений свойств указанного вида.
//
Процедура ПоКнопкеЗначенияСвойств(Знач Параметр)
	
	Если ПустоеЗначение(Параметр) = 0 Тогда
		ОткрытьФорму("Справочник.ЗначенияСвойств", Параметр);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗначенияСвойств()

//******************************************************************************
// ПоКнопкеОК()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//    
// Вызывается из формул диалога по кнопке ОК
//
// Описание:
//  Проверяет заполнение настроек и сохраняет их ы константах
//
Процедура ПоКнопкеОК()
	
	// изначально считаем, что не все обязательные поля заполнены
	ФлагОшибки	= 0;
	Описание	= "Не заполнено поле ";
	                
	Если ПустоеЗначение(ВалютаБухУчета) = 1 Тогда
		Описание = Описание + "'Валюта бух. учета'";
		Активизировать("ВалютаБухУчета");
	ИначеЕсли ПустоеЗначение(ВалютаУпрУчета) = 1 Тогда
		Описание = Описание + "'Валюта упр. учета'";
		Активизировать("ВалютаУпрУчета");
	Иначе
		// все обязательные поля заполнены
		ФлагОшибки = 1;
	КонецЕсли;
    
	Если ФлагОшибки = 0 Тогда
		Предупреждение(Описание, 60);
		Возврат;
	КонецЕсли;
	
	// В качестве вида свойств нельзя выбирать те, которые поддерживают множественность
	Если ПустоеЗначение(ВидСвойстваКонтрагентов) = 0 Тогда
		Если ПустоеЗначение(ВидСвойстваКонтрагентов.Множественность ) = 0 Тогда
			Предупреждение("Основное свойство не может принимать множество значений.
			               | Измените параметры вида свойства контрагентов.",60);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ВидСвойстваНоменклатуры) = 0 Тогда
		Если ПустоеЗначение(ВидСвойстваНоменклатуры.Множественность ) = 0 Тогда
			Предупреждение("Основное свойство не может принимать множество значений.
			               | Измените параметры вида свойства номенклатуры.",60);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Если все необходимое заполнено, сохраняем настройки
	Константа.ВалютаБухУчета                 = ВалютаБухУчета;
	Константа.ВалютаУпрУчета                 = ВалютаУпрУчета;
	Константа.ПрефиксИБ                      = ПрефиксИБ;
	Константа.РазрешитьПроводитьБудущейДатой = РазрешитьПроводитьБудущейДатой;
	Константа.РозничныйТипЦен                = РозничныйТипЦен;
	Константа.ДатаЗапретаРедактирования      = ДатаЗапретаРедактирования;
	Константа.КонтрольОтрицательныхОстатков  = КонтрольОстатков;
	Константа.ПоказыватьАртикул              = ПоказыватьАртикул;
	Константа.ЕдиницаВеса                    = ЕдиницаВеса;
	Константа.ВидСвойстваКонтрагентов        = ВидСвойстваКонтрагентов;
	Константа.ВидСвойстваНоменклатуры        = ВидСвойстваНоменклатуры;
	Константа.ПереоцениватьОстатки		     = ПереоцениватьОстатки;
	
	глРубли	 = ВалютаБухУчета; //обновим глобальную переменную
	глДоллары= ВалютаУпрУчета; //обновим глобальную переменную     
	ПрефиксАвтоНумерации("Справочник.*",СокрЛП(ПрефиксИБ));    

	
	Форма.Закрыть(0);
	
КонецПроцедуры // ПоКнопкеОК()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//  
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Форма.Закладки.УдалитьВсе();

	форма.КонтрольОстатков.Доступность(0);
	форма.ДатаЗапретаРедактирования.Доступность(0);

	// Валюты.
	
	Форма.Закладки.ДобавитьЗначение("ВалютыУчета", "Валюты");
	
	Форма.ТекстВалютаБухУчета.Заголовок(
	"В этой валюте ведется бухгалтерский учет. "  +
	"Кроме того, по отношению к этой валюте "     +
	"указываются курсы всех других валют. "       +
	"Для РФ валюта бухгалтерского учета - рубли. "
	);
	
	Форма.ТекстВалютаУпрУчета.Заголовок(
	"В конфигурации реализована возможность ведения " +
	"управленческого учета в произвольной валюте. "   +
	"Обычно в качестве валюты ведения управленческого учета " +
	"устанавливают USD."
	);
	
	Форма.ТекстВалютыВнимание.Заголовок(
	"Внимание!
	|Валюты бухгалтерского и управленческого учета
	|запрещается изменять после того, как введены документы.
	|"
	);
	
	// Свойства.
	
	Форма.Закладки.ДобавитьЗначение("ВидыСвойств", "Свойства");
	
	Форма.ТекстВидСвойстваКонтрагентов.Заголовок(
	"Для справочников ""Контрагенты"" и ""Номенклатура"" можно " +
	"определить виды основных свойств - настраиваемые наборы "   +
	"значений, характеризующих элементы справочников. "          +
	"Например, ""Статус партнера"": ""Дистрибьютор"", ""Дилер""."
	);
	
	Форма.ТекстВидСвойстваНоменклатуры.Заголовок(
	"Каждому элементу справочника может быть назначено "        +
	"свойство - одно из значений из соответствующего набора. "  +
	"Это свойство отображается в справочнике, по нему можно "   +
	"группировать и фильтровать данные отчетов. "
	);
	
	Форма.ТекстВидыСвойствВнимание.Заголовок(
	"Внимание!
	|Виды основных свойств запрещается изменять " + 
	"после того, как элементам соответствующих справочников заданы значения свойств."
	);
	
	// Вес и артикул.
	
	Форма.Закладки.ДобавитьЗначение("ВесАртикул", "Вес, артикул");
	
	Форма.ТекстПоказыватьАртикул.Заголовок(
	"Флаг управляет видимостью поля ""Артикул""
	|в диалоге подбора номенклатуры для поиска и идентификации элементов.
	|"
	);
	
	Форма.ТекстЕдиницаВеса.Заголовок(
	"Единица измерения, в которой указываются весовые 
	|характеристики товарно-материальных ценностей.
	|
	|"
	);
	
	// Режимы работы.
	
	Форма.Закладки.ДобавитьЗначение("РежимыРаботы", "Режимы работы");
	
	Форма.ТекстРазрешитьПроводитьБудущейДатой.Заголовок(
	"При проведении оперативных документов будущей датой
	|точка актуальности (ТА) оказывается в ""будущем времени"";
	|при этом замедляется проведение документов за текущую 
	|дату."
	);
	
	Форма.ТекстРозничныйТипЦен.Заголовок(
	"Розничный тип цен используется для определения цены услуги
	|при реализации услуг в розницу. Заданная типом цен
	|наценка определяет розничную цену по умолчанию при
	|оформлении поступления на розничный склад."
	);
	
	Форма.ТекстПереоцениватьОстатки.Заголовок(
	"Переоценивать остатки на розничном складе, если их цена 
	|отличается от цены вновь поступающего товара."
	);

	// Системные.
	
	Форма.Закладки.ДобавитьЗначение("Системные",   "Системные");
	
	Форма.ТекстПрефиксИБ.Заголовок(
    "Префикс ИБ целесообразно задавать при работе с распределенной базой данных. " +
    "Префикс ИБ используется как префикс кодов справочников и добавляется к префиксу номеров документов. " +
	"В каждом филиале распределенной базы данных необходимо задать уникальный префикс ИБ. "
	);
	
	Форма.ТекстДатаЗапретаРедактирования.Заголовок(
    "Ранее указанной даты запрещается редактировать и перепроводить документы. " + 
    "Рекомендуется устанавливать ее на последний день отчетного периода, " +
	"за который подведены окончательные итоги. " +
	"Таким образом, обеспечивается неизменность учетных данных в ""закрытом"" периоде. "
	);
	
	// Восстановление последней открытой закладки.        
	Закладка = 0;                      
	Если ПустоеЗначение(Форма.Параметр) = 0  Тогда // могли передать нужную закладку
		Закладка = Форма.Закладки.Получить(Форма.Параметр);
	КонецЕсли; 
	Если ПустоеЗначение(Закладка) = 1 Тогда // через параметр формы закаладка не передана, восстанавливаем предыдущую
		Закладка = ВосстановитьЗначение("Закладка настройки параметров учета");
	КонецЕсли;
	Закладка = Макс(1, Форма.Закладки.НайтиЗначение(Закладка));

	// Открытие нужного слоя.
	Форма.Закладки.ТекущаяСтрока(Закладка);
	ТекущаяЗакладка = Форма.Закладки.ПолучитьЗначение(Закладка);
	Форма.ИспользоватьСлой(ТекущаяЗакладка+", Кнопки", 2);
	
	// Считаем значения констант в реквизиты формы
	ВалютаБухУчета                 = Константа.ВалютаБухУчета;
	ВалютаУпрУчета                 = Константа.ВалютаУпрУчета;
	ПрефиксИБ                      = Константа.ПрефиксИБ;
	РазрешитьПроводитьБудущейДатой = Константа.РазрешитьПроводитьБудущейДатой;
	РозничныйТипЦен                = Константа.РозничныйТипЦен;
	ДатаЗапретаРедактирования      = Константа.ДатаЗапретаРедактирования;
	КонтрольОстатков               = Константа.КонтрольОтрицательныхОстатков;
	ПоказыватьАртикул              = Константа.ПоказыватьАртикул;
	ЕдиницаВеса                    = Константа.ЕдиницаВеса;
	ВидСвойстваКонтрагентов        = Константа.ВидСвойстваКонтрагентов;
	ВидСвойстваНоменклатуры        = Константа.ВидСвойстваНоменклатуры;
	ПереоцениватьОстатки	       = Константа.ПереоцениватьОстатки;
	                                              
	// Проверим, есть ли выписанные документы в ИБ
	Док = СоздатьОбъект("Документ");
	ВыписаныДокументы = Док.ВыбратьДокументы();
    
	// Если выписаны документы, то нельзя менять валюты учета
    Если (ПустоеЗначение(Константа.ВалютаБухУчета) = 0) И (ВыписаныДокументы = 1 ) Тогда
		Форма.ВалютаБухУчета.Доступность(0);
	КонецЕсли;

    Если (ПустоеЗначение(Константа.ВалютаУпрУчета) = 0) И (ВыписаныДокументы = 1 ) Тогда
		Форма.ВалютаУпрУчета.Доступность(0);
	КонецЕсли;           
	
	// Группы в качестве значений настроек не выбираем
	Форма.ВидСвойстваКонтрагентов.ВыборГруппы(0);
	Форма.ВидСвойстваНоменклатуры.ВыборГруппы(0);
	
	// Выбрать виды свойств можно пока не начали задавать основные свойства
	Если ПустоеЗначение(ВидСвойстваКонтрагентов) = 0  Тогда
		Объект = СоздатьОбъект("Справочник.СвойстваКонтрагентов");
		Если Объект.НайтиПоРеквизиту("ВидСвойства", ВидСвойстваКонтрагентов, 1) = 1 Тогда
			Форма.ВидСвойстваКонтрагентов.Доступность(0);
		КонецЕсли;
	КонецЕсли;
    
	Если ПустоеЗначение(ВидСвойстваНоменклатуры) = 0  Тогда
		Объект = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
		Если Объект.НайтиПоРеквизиту("ВидСвойства", ВидСвойстваНоменклатуры, 1) = 1 Тогда
			Форма.ВидСвойстваНоменклатуры.Доступность(0);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(Номер, Закладка)
	
	// Закрытие текущего слоя.
	Форма.ИспользоватьСлой(ТекущаяЗакладка, 0);
	// Открытие нужного слоя.
	ТекущаяЗакладка = Закладка;
	Форма.ИспользоватьСлой(ТекущаяЗакладка, 1);
	
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("Закладка настройки параметров учета", ТекущаяЗакладка);
	//Проверим, изменились ли значения настроек
	Если    (ВалютаБухУчета                 <> Константа.ВалютаБухУчета) 
	    ИЛИ (ВалютаУпрУчета                 <> Константа.ВалютаУпрУчета) 
	    ИЛИ (ПрефиксИБ                      <> Константа.ПрефиксИБ) 
	    ИЛИ (РазрешитьПроводитьБудущейДатой <> Константа.РазрешитьПроводитьБудущейДатой) 
	    ИЛИ (РозничныйТипЦен                <> Константа.РозничныйТипЦен) 
	    ИЛИ (ДатаЗапретаРедактирования      <> Константа.ДатаЗапретаРедактирования) 
      	ИЛИ (КонтрольОстатков               <> Константа.КонтрольОтрицательныхОстатков) 
	    ИЛИ (ПоказыватьАртикул              <> Константа.ПоказыватьАртикул) 
	    ИЛИ (ЕдиницаВеса                    <> Константа.ЕдиницаВеса) 
	    ИЛИ (ВидСвойстваКонтрагентов        <> Константа.ВидСвойстваКонтрагентов) 
	    ИЛИ (ВидСвойстваНоменклатуры        <> Константа.ВидСвойстваНоменклатуры) Тогда
		 	
		 // Если изменились настройки, то спросим, надо ли их сохранять
		Ответ = Вопрос("Сохранить изменения?","Да+Нет+Отмена", 60);
		Если Ответ = "Да" Тогда
			ПоКнопкеОК();   
			СтатусВозврата(0);
			Возврат;
		ИначеЕсли Ответ="Отмена" Тогда	   
			СтатусВозврата(0);
			Возврат;
		КонецЕсли;	
	КонецЕсли;     
КонецПроцедуры // ПриЗакрытии()

Процедура ПриИзмененииКО()
перем стр;
	стр="";
	ВвестиСтроку(стр,"Введите пароль для разблокирования функции контроля остатков",10,0,60);
	если стр="B6VCJGSF" тогда
		форма.КонтрольОстатков.Доступность(1);
	иначе
		форма.КонтрольОстатков.Доступность(0);
	КонецЕсли;
КонецПроцедуры  

//++Горлач
Процедура ПриИзмененииДатыЗапретаРедактирования()
перем стр;
	стр="";
	ВвестиСтроку(стр,"Введите пароль для изменения даты запрета редактирования",10,0,60);
	если стр="q23esa" тогда
		форма.ДатаЗапретаРедактирования.Доступность(1);
	иначе 
		Предупреждение("Неверный пароль!" , 60);
		форма.ДатаЗапретаРедактирования.Доступность(0);
	КонецЕсли;
КонецПроцедуры
//--Горлач	
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Форма.ИспользоватьЗакладки(1);


