////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ФорматАдреса;
Перем СписокАдресов;
Перем СписокОбъектов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ВидПоНомеру(Номер)
//
// Параметры:
//  Номер (целое число) - номер объекта (предопределенный) вид которого мы хотим получить.
//
// Возвращаемое значение:
//  (строка) - вид объекта
// 
// Описание:
//  Определяет вид объекта по номеру.
//
Функция ВидПоНомеру(Номер)
	
	Возврат ?(Номер = 1, "Регион", ?(Номер = 2, "Район", ?(Номер = 3, "Город", ?(Номер = 4, "НасПункт", ?(Номер = 5, "Улица", "Дом")))));
	
КонецФункции // ВидПоНомеру()

//******************************************************************************
// НомерПоВиду(Вид)
//
// Параметры:
//  Вид (строка) - вид объекта предопределенный номер которого мы хотим получить.
//
// Возвращаемое значение:
//  (число) - номер объекта
// 
// Описание:
//  Определяет номер объекта по виду.
//
Функция НомерПоВиду(Вид)
	
	Возврат ?(Вид = "Регион", 1, ?(Вид = "Район", 2, ?(Вид = "Город", 3, ?(Вид = "НасПункт", 4, ?(Вид = "Улица", 5, 6)))));
	
КонецФункции // НомерПоВиду()

//******************************************************************************
// ПолучитьПоследнееСловоИзСтроки(Стр)
// 
// Параметры:
//  Стр (строка) - строка в которой нужно выделить самое последнее слово.
//
// Возвращаемое значение:
//  строка - последнее слово в строке.
//
// Описание:
//
Функция ПолучитьПоследнееСловоИзСтроки(Стр)
	
	Пока СтрЧислоВхождений(СокрЛП(Стр), " ") > 0 Цикл
		Стр = Сред(Стр, Найти(Стр, " ") + 1, СтрДлина(Стр));
	КонецЦикла;
	
	Возврат СокрЛП(Стр);
	
КонецФункции // ПолучитьПоследнееСловоИзСтроки()

//******************************************************************************
// УстановитьЗначенияОбъекта(Вид, Код, Наименование, Индекс = "")
//
// Параметры:
//  Вид (строка) - вид объекта, значения по которому инициализируются.
//  Код (строка) - код объекта.
//  Наименование (строка) - наименование объекта.
//  Индекс (строка, необязательный) - индекс объекта.
//
// Описание:
//  Устанавливает в списке значений все данные об объекте.
//  Устанавливает наименование объекта в реквизит диалога.
//
Процедура УстановитьЗначенияОбъекта(Вид, Код, Наименование, Индекс = "")
	
	СписокАтрибутов = СоздатьОбъект("СписокЗначений");
	СписокАтрибутов.Установить("Код",          Код);
	СписокАтрибутов.Установить("Наименование", Наименование);
	СписокАтрибутов.Установить("Индекс",       Индекс);
	
	СписокОбъектов.Установить(Вид, СписокАтрибутов);
	
	Если Вид = "Регион" Тогда
		Регион    = Наименование;
		
	ИначеЕсли Вид = "Город" Тогда
		Город     = Наименование;
		
	ИначеЕсли Вид = "Район" Тогда
		Район     = Наименование;
		
	ИначеЕсли Вид = "НасПункт" Тогда
		НасПункт  = Наименование;
		
	ИначеЕсли Вид = "Улица" Тогда
		Улица     = Наименование;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияОбъекта()

//******************************************************************************
// ПредставитьАдресВФорматеМНС(Адрес)
//
// Параметры:
//  Адрес (строка) - строка разбиваемая по реквизитам диалога.
//
// Описание:
//    Переводит из реквизита "ТекстАдреса" данные по реквизитам
//  в соответствии с основными параметрами адреса по требованиям МНС.
//
Процедура ПредставитьАдресВФорматеМНС(Адрес)
	
	АдресСписком = глРазложить(Адрес);
	
	Попытка
		Индекс   = АдресСписком.ПолучитьЗначение(2);
		Для Номер = 1 По 5 Цикл 
			УстановитьЗначенияОбъекта(ВидПоНомеру(Номер), "", АдресСписком.ПолучитьЗначение(Номер + 2));
		КонецЦикла;
		Дом      = АдресСписком.ПолучитьЗначение(8);
		Корпус   = АдресСписком.ПолучитьЗначение(9);
		Квартира = АдресСписком.ПолучитьЗначение(10);
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ПредставитьАдресВФорматеМНС()

//******************************************************************************
// УстановитьИндекс()
//
// Описание:
//  Устанавливает индекс по самому младшему параметру адреса начиная с улицы.
//
Процедура УстановитьИндекс()
	
	Номер = 5;
	
	Пока  Номер > 0 Цикл
		
		Если ПустоеЗначение(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Индекс")) = 0 Тогда
			Индекс = СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Индекс");
			Возврат;
			
		ИначеЕсли ПустоеЗначение(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Код")) = 0 Тогда
			Возврат;
			
		КонецЕсли;
			
		Номер = Номер - 1;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьИндекс()

//******************************************************************************
// ПолучитьКодВладельца(Вид)
// 
// Параметры:
//  Вид (строка) - вид объекта, по которому определяется владелец.
//
// Возвращаемое значение:
//  (строка) - код владельца.
//
// Описание:
//  Определяет код владельца, по списку объектов.
//
Функция ПолучитьКодВладельца(Вид)
	
	Номер = НомерПоВиду(Вид) - 1;
	РазмерКода = 2 + (Номер - 1) * 3;
	
	Пока  Номер > 0 Цикл
		
		Если ПустаяСтрока(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Код")) = 0 Тогда
			Возврат Сред(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Код"), 1, РазмерКода);
		КонецЕсли;
		
		Номер = Номер - 1;
		РазмерКода = РазмерКода - 3;
		
	КонецЦикла;
	
	Возврат "";
	
КонецФункции // ПолучитьКодВладельца()

//******************************************************************************
// СформироватьСписокВладельцев(Вид)
// 
// Параметры:
//  Вид (строка) - вид объекта, по которому формируется список наименований объектов владельцев.
//
// Возвращаемое значение:
//  (список значений) - список наименований объектов.
//
// Описание:
//  Формирует список наименований объектов владельцев.
//
Функция СформироватьСписокВладельцев(Вид)
	
	Список = СоздатьОбъект("СписокЗначений");
	
	Для Номер = 1 По НомерПоВиду(Вид) Цикл
		Если ПустаяСтрока(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Наименование")) = 0 Тогда
			Список.Установить(ВидПоНомеру(Номер), СокрЛП(СписокОбъектов.Получить(ВидПоНомеру(Номер)).Получить("Наименование")));
		КонецЕсли;
	КонецЦикла;
		
	Возврат Список;
	
КонецФункции // СформироватьСписокВладельцев()

//******************************************************************************
// ПриРедактированииРеквизита(Значение)
//
// Параметры:
//  Значение (строка) - значение редактируемого реквизита.
//
// Вызывается из формул элементов диалога:
//  Регион, Район, Город, НасПункт, Улица
//  Дом, Корпус, Квартира, Индекс
//
// Описание:
//  Проверяет редактируемый реквизит на наличие запятых.
//  Устанавливает новые параметры адреса, в списке объектов.
//  Устанавливает индекс по номеру дома и корпуса.
//
Процедура ПриРедактированииРеквизита(Значение)
	
	Реквизит = Форма.АктивныйЭлемент();
	
	Значение = СтрЗаменить(Значение, ",", ";");
	
	Если ТипЗначенияСтр(СписокОбъектов.Получить(Реквизит)) = "СписокЗначений" Тогда
		УстановитьЗначенияОбъекта(Реквизит, "", СокрЛП(Значение), "");
	КонецЕсли;
	
	Если (Форма.АктивныйЭлемент() = "Дом") или (Форма.АктивныйЭлемент() = "Корпус") Тогда
	
		Если (ПустаяСтрока(Дом)=1) или 
		(ПустаяСтрока(СписокОбъектов.Получить("Улица").Получить("Код")) = 1) или 
		(ПустаяСтрока(СписокОбъектов.Получить("Улица").Получить("Индекс")) = 0) Тогда
			Возврат;
		КонецЕсли;
		
		//Установим индекс по номеру дома
		Параметры = СоздатьОбъект("СписокЗначений");
		Параметры.Установить("Получить индекс", 1);
		Параметры.Установить("Код улицы",       СписокОбъектов.Получить("Улица").Получить("Код"));
		Параметры.Установить("Дом",             Дом);
		Параметры.Установить("Корпус",          Корпус);
		
		Если Метаданные.Справочник("STREET").Выбран() = 1 Тогда
			ОткрытьФормуМодально("Справочник.STREET.ФормаСписка",Параметры);
			
		ИначеЕсли Метаданные.Обработка("ВыборИзКлассификатораАдресов").Выбран() = 1 Тогда
			ОткрытьФорму("Обработка.ВыборИзКлассификатораАдресов", Параметры);
			
		КонецЕсли;
		
		Если ТипЗначенияСтр(Параметры) = "Строка" Тогда
			Индекс = Параметры;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриРедактированииРеквизита()

//******************************************************************************
// СформироватьПолныйАдрес()
//
// Возвращаемое значение:
//  (строка) - адрес строкой.
//
// Описание:
//  Формирует адрес строкой по значениям реквизитов закладки "В формате МНС".
//
Функция СформироватьПолныйАдрес()
	
	Возврат "," + СокрЛП(Индекс) +
			"," + СокрЛП(Регион) + 
			"," + СокрЛП(Район) + 
			"," + СокрЛП(Город) + 
			"," + СокрЛП(НасПункт) + 
			"," + СокрЛП(Улица) + 
			"," + СокрЛП(Дом) + 
			"," + СокрЛП(Корпус) + 
			"," + СокрЛП(Квартира);
					   
КонецФункции // СформироватьПолныйАдрес()

//******************************************************************************
// Загрузить()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка загрузки классификаторов.
//
// Описание:
//  Загружает классификаторы с диска ИТС.
//
Процедура Загрузить()
	
	Для Номер = 68 По 90 Цикл
		КаталогИТС = Симв(Номер) + ":\1CIts\exe\kladr";
		
		Если ФС.СуществуетФайл(КаталогИТС) = 1 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Номер = 91 Тогда
		Предупреждение("Не найден загружаемый классификатор!
				       |Возможно, не установлен диск ИТС.", 60);
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Константа("КаталогКлассификаторов").Выбран() = 1 Тогда
		КаталогБазы = СокрЛП(Константа.ПолучитьАтрибут("КаталогКлассификаторов"));
	Иначе
		КаталогБазы = КаталогИБ() + "ExtDb\";
	КонецЕсли;
	
	Если ФС.СуществуетФайл(КаталогБазы) = 0 Тогда
		ФС.СоздатьКаталог(КаталогБазы);
	КонецЕсли;
	
	ФС.УстТекКаталог(КаталогБазы);
	
	ЗапуститьПриложение(КаталогИТС+"\kladr.exe");
	ЗапуститьПриложение(КаталогИТС+"\street.exe");
	ЗапуститьПриложение(КаталогИТС+"\socrbase.exe");
	
КонецПроцедуры // Загрузить()

//******************************************************************************
// ЗагрузитьПоПутям()
//
// Параметры:
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопка загрузки классификаторов.
//
// Описание:
//  Загружает классификаторыс указанного пути.
//
Процедура ЗагрузитьПоПутям()


	Если Метаданные.Константа("КаталогКлассификаторов").Выбран() = 1 Тогда
		КаталогБазы = СокрЛП(Константа.ПолучитьАтрибут("КаталогКлассификаторов"));
	Иначе
		КаталогБазы = КаталогИБ() + "ExtDb\";
	КонецЕсли;
	
	Если ФС.СуществуетФайл(КаталогБазы) = 0 Тогда
		ФС.СоздатьКаталог(КаталогБазы);
	КонецЕсли;

	ФС.УстТекКаталог(КаталогБазы);

	// Загрузить адресный классификатор
	
	Если ФС.СуществуетФайл(КаталогKLADR) = 1 Тогда

	
		// Запустить самораспаковывающийся архив

		Если ФС.СуществуетФайл(КаталогKLADR + "\kladr.exe") = 1 Тогда
			ЗапуститьПриложение(КаталогKLADR + "\kladr.exe");
			Сообщить("Архив с адресным классификатором найден. Запущен на разархивирование.", "I");
		
		ИначеЕсли ФС.СуществуетФайл(КаталогKLADR + "\kladr.dbf") = 1 Тогда
			Сообщить("Файл kladr.dbf с адресным классификатором найден, копируется...", "I");
			ФС.КопироватьФайл(КаталогKLADR + "\kladr.dbf", КаталогБазы + "\kladr.dbf", 0);
			Сообщить("Файл kladr.dbf с адресным классификатором скопирован.", "I");
		
		ИначеЕсли ФС.СуществуетФайл(КаталогKLADR + "\kladrw.dbf") = 1 Тогда
			Сообщить("Файл kladrw.dbf с адресным классификатором найден, копируется...", "I");
			ФС.КопироватьФайл(КаталогKLADR + "\kladrw.dbf", КаталогБазы + "\kladrw.dbf", 0);
			Сообщить("Файл kladrw.dbf с адресным классификатором скопирован.", "I");

		Иначе
			Сообщить("Не удалось найти адресный классификатор по указанному пути или он не разархивирован!", "!");
			
		КонецЕсли;                                         

	Иначе
		Сообщить("Не удалось найти указанный путь к адресному классификатору!", "!");
			
	КонецЕсли;                                         
	
	// Загрузить классификатор улиц

	Если ФС.СуществуетФайл(КаталогSTREET) = 1 Тогда
		
		Если ФС.СуществуетФайл(КаталогSTREET + "\street.exe") = 1 Тогда
			ЗапуститьПриложение(КаталогSTREET + "\street.exe");
			Сообщить("Архив с классификатором улиц найден. Запущен на разархивирование.", "I");
		
		ИначеЕсли ФС.СуществуетФайл(КаталогSTREET + "\street.dbf") = 1 Тогда
			Сообщить("Файл street.dbf с классификатором улиц найден, копируется...", "I");
			ФС.КопироватьФайл(КаталогSTREET + "\street.dbf", КаталогБазы + "\street.dbf", 0);
			Сообщить("Файл street.dbf с классификатором улиц скопирован.", "I");
		
		ИначеЕсли ФС.СуществуетФайл(КаталогSTREET + "\streetw.dbf") = 1 Тогда
			Сообщить("Файл streetw.dbf с классификатором улиц найден, копируется...", "I");
			ФС.КопироватьФайл(КаталогSTREET + "\streetw.dbf", КаталогБазы + "\streetw.dbf", 0);
			Сообщить("Файл streetw.dbf с классификатором улиц скопирован.", "I");
		
		Иначе
			Сообщить("Не удалось найти классификатор улиц по указанному пути или он не разархивирован!", "!");
			
		КонецЕсли;                                         

	Иначе
		Сообщить("Не удалось найти указанный путь к классификатору улиц!", "!");
			
	КонецЕсли;                                         

	// Загрузить классификатор сокращений
		
	Если ФС.СуществуетФайл(КаталогKLADR) = 1 Тогда

		Если ФС.СуществуетФайл(КаталогSOCRBASE + "\socrbase.exe") = 1 Тогда
			ЗапуститьПриложение(КаталогSOCRBASE + "\socrbase.exe");
			Сообщить("Архив с классификатором сокращений найден. Запущен на разархивирование.", "I");
		
		ИначеЕсли ФС.СуществуетФайл(КаталогSOCRBASE + "\socrbase.dbf") = 1 Тогда
			Сообщить("Файл socrbase.dbf с классификатором сокращений найден, копируется...", "I");
			ФС.КопироватьФайл(КаталогSOCRBASE + "\socrbase.dbf", КаталогБазы + "\socrbase.dbf", 0);
			Сообщить("Файл socrbase.dbf с классификатором сокращений скопирован.", "I");
		
		Иначе
			Сообщить("Не удалось найти классификатор сокращений по указанному пути или он не разархивирован!", "!");
			
		КонецЕсли;                                         
		
	Иначе
		Сообщить("Не удалось найти указанный путь к классификатору сокращений!", "!");
			
	КонецЕсли;                                         

КонецПроцедуры // ЗагрузитьПоПутям()

//******************************************************************************
// Вставить() 
//
// Вызывается из формул элементов диалога:
//  кнопка кнВставить
//
// Описание:
//  Устанавливает адрес, из списка последних 10 сохраненных.
//
Процедура Вставить() 
	
	СписокДляВыбора = СписокАдресов.Получить(ФорматАдреса);
	
	Если ТипЗначенияСтр(СписокДляВыбора) <> "СписокЗначений" Тогда
		СписокДляВыбора = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	Если СписокДляВыбора.РазмерСписка() > 0 Тогда
		Адрес = "";
		Если СписокДляВыбора.ВыбратьЗначение(Адрес, , , , 1) = 1 Тогда
			Если ФорматАдреса = 1 Тогда
				ПредставитьАдресВФорматеМНС(Адрес);
			Иначе
				ТекстАдреса = Адрес;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Вставить()

//******************************************************************************
// Очистить() 
//
// Вызывается из формул элементов диалога:
//  кнопка Очистить
//
// Описание:
//  Очищает адрес.
//
Процедура Очистить() 
	
	Если ФорматАдреса = 1 Тогда
		Дом = ""; Корпус = ""; Квартира = ""; Индекс = "";
		
		Для Номер = 1 По 5 Цикл 
			УстановитьЗначенияОбъекта(ВидПоНомеру(Номер), "", "", "");
		КонецЦикла;
	
	Иначе
		ТекстАдреса = "";
	
	КонецЕсли;
	
КонецПроцедуры // Очистить()

//******************************************************************************
// Выполнить() 
//
// Вызывается из формул элементов диалога:
//  кнопка ОК
//
// Описание:
//  Записывает измененный адрес в переданный при открытии объект.
//
Процедура Выполнить() 
	
	Если ФорматАдреса = 1 Тогда
		ТекстАдреса	= СформироватьПолныйАдрес();
		Врем		= СтрЗаменить(ТекстАдреса, ",", "");
		Если ПустаяСтрока(Врем) = 1 Тогда
		    ТекстАдреса	= "";
		КонецЕсли;
	КонецЕсли;
	
	СписокДляВыбора = СписокАдресов.Получить(ФорматАдреса);
	
	Если ТипЗначенияСтр(СписокДляВыбора) <> "СписокЗначений" Тогда
		СписокДляВыбора = СоздатьОбъект("СписокЗначений");
	КонецЕсли;
	
	Если ПустоеЗначение(ТекстАдреса) = 0 Тогда
		Если СписокДляВыбора.Принадлежит(ТекстАдреса) = 0 Тогда
			СписокДляВыбора.ВставитьЗначение(1, ТекстАдреса, глПредставлениеАдреса(ТекстАдреса));
			
			Если СписокДляВыбора.РазмерСписка() > 10 Тогда
				СписокДляВыбора.УдалитьЗначение(СписокДляВыбора.РазмерСписка());
			КонецЕсли;
			
			СписокАдресов.Установить(ФорматАдреса, СписокДляВыбора);
			
			СохранитьЗначение("СписокСохраненныхАдресов", СписокАдресов);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		Форма.Параметр.Установить("Адрес", ТекстАдреса);
	Иначе
		Форма.Параметр = ТекстАдреса;
	КонецЕсли;
	
КонецПроцедуры // Выполнить()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(Элемент, ФлагПродолжения)

	Если Элемент = "КаталогKLADR" Тогда
		ФС.ВыбратьКаталог(КаталогKLADR,"Выберите каталог с адресным классификатором:",60);
		
		Если ПустаяСтрока(КаталогSTREET) = 1 Тогда
			КаталогSTREET = КаталогKLADR;
		КонецЕсли;
		
		Если ПустаяСтрока(КаталогSOCRBASE) = 1 Тогда
			КаталогSOCRBASE = КаталогKLADR;
		КонецЕсли;

		Возврат;
		
	ИначеЕсли Элемент = "КаталогSTREET" Тогда
		ФС.ВыбратьКаталог(КаталогSTREET,"Выберите каталог с классификатором улиц:",60);
		Возврат;
		
	ИначеЕсли Элемент = "КаталогSOCRBASE" Тогда
		ФС.ВыбратьКаталог(КаталогSOCRBASE,"Выберите каталог с классификатором улиц:",60);
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗначенияСтр(СписокОбъектов.Получить(Элемент)) <> "СписокЗначений" Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Вид объекта",       Элемент);
	Параметры.Установить("Код объекта",       СписокОбъектов.Получить(Элемент).Получить("Код"));
	Параметры.Установить("Имя объекта",       СписокОбъектов.Получить(Элемент).Получить("Наименование"));
	Параметры.Установить("Код владельца",     ПолучитьКодВладельца(Элемент));
	Параметры.Установить("Список владельцев", СформироватьСписокВладельцев(Элемент));
	
	Если (1 = 1) и (Метаданные.Справочник("KLADR").Выбран() = 1) и 
	(Метаданные.Справочник("STREET").Выбран() = 1) Тогда
		
		Если Элемент = "Улица" Тогда
			ОткрытьФормуМодально("Справочник.STREET.ФормаСписка",Параметры);
			
		Иначе
			ОткрытьФормуМодально("Справочник.KLADR.ФормаСписка",Параметры);
			
		КонецЕсли;
		
	ИначеЕсли Метаданные.Справочник("SOCRBASE").Выбран() = 1 Тогда
		Значение = СокрЛП(СписокОбъектов.Получить(Элемент).Получить("Наименование"));
		Параметры = "";
		
		Если ПустаяСтрока(Значение)=0 Тогда
			Сокр = СоздатьОбъект("Справочник.SOCRBASE");
			Если Сокр.НайтиПоНаименованию("" + НомерПоВиду(Элемент) + ПолучитьПоследнееСловоИзСтроки(Значение)) =0 Тогда
				Параметры = НомерПоВиду(Элемент);
				
				ОткрытьФормуМодально("Справочник.SOCRBASE.ФормаСписка", Параметры);
				Если ТипЗначения(Параметры)=11 Тогда
					Параметры = СокрЛП(Сред(Параметры.Наименование, 2));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Метаданные.Обработка("ВыборИзКлассификатораАдресов").Выбран() = 1 Тогда
		ОткрытьФорму("Обработка.ВыборИзКлассификатораАдресов", Параметры);
		
	Иначе
		Параметры = "";
		
	КонецЕсли;
	
	Если ТипЗначенияСтр(Параметры) = "Строка" Тогда
		// установим значения редактируемого элемента
		УстановитьЗначенияОбъекта(Элемент, "", СокрЛП(СписокОбъектов.Получить(Элемент).Получить("Наименование")) + " " + Параметры, "");
		
	ИначеЕсли ТипЗначенияСтр(Параметры) = "СписокЗначений" Тогда
		
		// установим значения редактируемого элемента
		УстановитьЗначенияОбъекта(Элемент, Параметры.Получить("Код"), Параметры.Получить("Наименование"), Параметры.Получить("Индекс"));

//		Если Элемент <> "Улица" Тогда
	// установим значения родительских элементов
		Если ТипЗначенияСтр(Параметры.Получить("Родители")) = "СписокЗначений" Тогда
			Для Номер = 1 По Параметры.Получить("Родители").РазмерСписка() Цикл
				Вид = "";
				Список = Параметры.Получить("Родители").ПолучитьЗначение(Номер, Вид);
				УстановитьЗначенияОбъекта(Вид, Список.Получить("Код"), Список.Получить("Наименование"), Список.Получить("Индекс"));
			КонецЦикла;
		КонецЕсли;
//		КонецЕсли;

		УстановитьИндекс();
		Активизировать(ВидПоНомеру(НомерПоВиду(Элемент) + 1));
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	СписокАдресов = ВосстановитьЗначение("СписокСохраненныхАдресов");

	КаталогKLADR    = ВосстановитьЗначение("КаталогKLADR");
	КаталогSTREET   = ВосстановитьЗначение("КаталогSTREET");
	КаталогSOCRBASE = ВосстановитьЗначение("КаталогSOCRBASE");
	
	Если ТипЗначенияСтр(СписокАдресов) <> "СписокЗначений" Тогда
		Форма.кнВставить.Доступность(0);
		СписокАдресов = СоздатьОбъект("СписокЗначений");
	Иначе
		Форма.кнВставить.Доступность(1);
	КонецЕсли;
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		ФорматАдреса = Форма.Параметр.Получить("Формат адреса");
		ТекстАдреса = Форма.Параметр.Получить("Адрес");
		
	Иначе
		ТекстАдреса = Форма.Параметр;
		Если (ПустаяСтрока(ТекстАдреса) = 0) и (глАдресСоответствуетТребованиямМНС(ТекстАдреса) = 0) Тогда
			ФорматАдреса = 2;
		КонецЕсли;
		Форма.Закладки.ТекущаяСтрока(ФорматАдреса);
		
	КонецЕсли;
	
	Если ФорматАдреса = 1 Тогда
		Если ПустаяСтрока(ТекстАдреса) = 1 Тогда
			ТекстАдреса = СформироватьПолныйАдрес();
		КонецЕсли;
		ПредставитьАдресВФорматеМНС(ТекстАдреса);
		ТекстАдреса = "";
		Активизировать(ВидПоНомеру(1));
		Форма.ИспользоватьСлой("Кнопки, ФорматМНС", 2);
		
	Иначе
		Форма.ИспользоватьСлой("Кнопки, ПроизвольныйФормат", 2);
		
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриЗакрытии()

	СохранитьЗначение("КаталогKLADR",    КаталогKLADR);
	СохранитьЗначение("КаталогSTREET",   КаталогSTREET);
	СохранитьЗначение("КаталогSOCRBASE", КаталогSOCRBASE);

КонецПроцедуры // ПриЗакрытии()
	
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Если (НомерЗакладки = 2) и (ПустаяСтрока(ТекстАдреса) = 1) Тогда
		ТекстАдреса = глПредставлениеАдреса(СформироватьПолныйАдрес());
		
	ИначеЕсли НомерЗакладки = 1 Тогда
		ПредставитьАдресВФорматеМНС(СформироватьПолныйАдрес());
		
	КонецЕсли;
	
	ФорматАдреса = НомерЗакладки;
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);
	
КонецПроцедуры // ПриВыбореЗакладки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СписокОбъектов        = СоздатьОбъект("СписокЗначений");
ФорматАдреса = 1;

Форма.ИспользоватьЗакладки(1);
Форма.Закладки.Установить("Формат МНС",          "Кнопки, ФорматМНС");
Форма.Закладки.Установить("Произвольный формат", "Кнопки, ПроизвольныйФормат");
Форма.Закладки.Установить("Классификаторы", 	 "Загрузка");
