///////////////////////////////////////////////////////////////////////////////                                                                            
// ПЕРЕМЕННЫЕ МОДУЛЯ
//
Перем	гПутьОбъекта_ДаннаяОбработка;
Перем	гПутьОбъекта_ПравилаКонвертации;

//-----------------------------------------------------------------------------

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гСчетчикВыгруженныхОбъектов;

Перем	СписокСписковВыгруженныхОбъектов;


Перем	гСписокПараметров;

Перем	гXMLАнализатор;
Перем	гФайлДанных;
Перем	гПравила;

Перем	гПутьОбъекта_ИсполняемыйКод;

Перем	гТабОбъектов;	//	таблица интерактивно заданных объектов выгрузки

Перем	ТабВыгруженныхОбъектов;

Перем	гТабКэшПравил;
Перем	гТабКэшРеквизитов;
Перем	гТабКэшРеквизитовЗначений;
Перем	гТабКэшПараметровЗагрузки;


Перем	ФормКолвоБуферизуемыхОбъектов;
Перем	ФормФлЗапоминатьСсылки;


///////////////////////////////////////////////////////////////////////////////                                                                            
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ТабОпер; // таблица хозяйственных операций определенного вида

Перем УсловияИлиВидыПоступленийАванс;
Перем УсловияИлиВидыПоступленийОплата;
Перем УсловияИлиВидыПоступленийПолучениеСредствПереданныхРанееНаУсловияхВозврата;
Перем УсловияИлиВидыПоступленийПрочиеПоступления;
Перем УсловияИлиВидыПоступленийПрочиеПоступленияСвязанныеСВозникновениемЗадолженности;

Перем ПризнакЗадолженностиДебиторская;
Перем ПризнакЗадолженностиКредиторская;
Перем ПризнакЗадолженностиНеИзменяется;

Перем ПризнакДоходаРасходаДоход;
Перем ПризнакДоходаРасходаРасход;
Перем ВнереализационныеДоходыСуммовыеРазницы;
Перем ВнереализационныеРасходыСуммовыеРазницы;

Перем УсловияИлиВидыРасходовОплата;
Перем УсловияИлиВидыРасходовАванс;
Перем УсловияИлиВидыРасходовВозвратАвансов;
Перем УсловияИлиВидыРасходовПрочиеРасходы;
Перем УсловияИлиВидыРасходовПредоставлениеСредствНаУсловияхВозврата;
Перем УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованию;
Перем УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаОплатуМедицинскихРасходов;
Перем УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаСлучайСмерти;
Перем УсловияИлиВидыРасходовПрочиеРасходыСвязанныеСПогашениемЗадолженности;
Перем УсловияИлиВидыРасходовВзносыВкладыОбязательныеПлатежи;

Перем ВидыРасходовПрямыеРасходы;
Перем ВидыРасходовКосвенныеРасходы;
Перем ВидыРасходовНеПринимаемые;
Перем ВидыРасходовПриобретениеЦенныхБумаг;
Перем ВидыРасходовПриобретениеПрав;
Перем ВидыРасходовПриобретениеТоваров;
Перем ВидыРасходовПриобретениеМатериалов;
Перем ВидыРасходовПриобретениеОсновныхСредств;
Перем ВидыРасходовПриобретениеНематериальныхАктивов;
Перем ВидыРасходовРасходыБудущихПериодов;

Перем УсловияПолученияИмуществаВСчетРанееВыданныхАвансов;
Перем УсловияПолученияИмуществаСПоследующейОплатой;
Перем УсловияПолученияИмуществаДругие;

Перем ВидыДоходовРеализацияТоваров;
Перем ВидыДоходовРеализацияТоваровРанееОтгруженных;
Перем ВидыДоходовРеализацияПродукции;
Перем ВидыДоходовРеализацияПродукцииРанееОтгруженной;
Перем ВидыДоходовРеализацияОсновныхСредств;
Перем ВидыДоходовРеализацияНематериальныхАктивов;
Перем ВидыДоходовРеализацияПрочегоИмущества;

Перем УсловияВыбытияИмуществаДругие;
Перем УсловияВыбытияИмуществаВозвратТоваровПоставщику;
Перем УсловияВыбытияИмуществаВозвратМатериаловПоставщику;
Перем УсловияВыбытияИмуществаСПоследующейОплатой;
Перем УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов;

Перем ДатаНачалаВыборки,КонДатаДляЗапросов;

//**************************************************************************************************
//----	Начало предварительного описания функций	------------------------------------------------
//**************************************************************************************************

Функция	ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")		Далее
Функция	Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")	Далее
Функция	ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")									Далее
Функция	УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")											Далее
Функция	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")									Далее
Функция ПолучитьЗначениеМетодом(Источник, Метод)																Далее
Функция ДобавитьРеквизит(Таб, Источник, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")	Далее

Процедура НачальнаяИнициализация()			Далее

//**************************************************************************************************
//----	Конец предварительного описания функций	----------------------------------------------------
//**************************************************************************************************

//**************************************************************************************************
//----	Начало процедур и функций для выгрузки проводок
//**************************************************************************************************

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//--------------------------------------------------------------------------------------------------

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//--------------------------------------------------------------------------------------------------

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации()
	                                        
	Состояние("Выполняется загрузка правил конвертации...");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	Попытка
		гПравила.Загрузить(гПутьОбъекта_ПравилаКонвертации);
		гПравила.Проверить();
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()
    
//--------------------------------------------------------------------------------------------------

//**************************************************************************************************
//----	Конец процедур и функций для выгрузки проводок
//**************************************************************************************************
                            
                                                     
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура УстановитьАтрибут(Элемент, ИдАтрибута, ЗнАтрибута, Проверить=1);
	
	Если	Проверить = 1 Тогда
		Если ПустоеЗначение(ЗнАтрибута) = 0 Тогда
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
			Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
		КонецЕсли;
	Иначе
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
		Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
	КонецЕсли;
	
КонецПроцедуры		//	УстановитьАтрибут()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция КопироватьУзел(Узел)
	
	Если ПустоеЗначение(Узел) = 1 Тогда Возврат("") КонецЕсли;
	
	XML_DOM		=	гXMLАнализатор.СоздатьДокумент();
	XML_DOM.ЗагрузитьИзСтроки(Узел.ПредставлениеXML);
	КопияУзла	=	XML_DOM.ВыбратьУзел(Узел.ИмяТэга);
	
	Возврат( КопияУзла );
	
КонецФункции		//	КопироватьУзел()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОшибку(Содержание, Маркер="")
                        
	Сообщить(Содержание, Маркер);
	
КонецПроцедуры		//	ЗаписатьОшибку()

//--------------------------------------------------------------------------------------------------

Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть	=	"";
	Разделитель	=	Найти(Стр, Разделитель);
	Если Разделитель > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		Разделитель + ?(Режим=2, 0, 1));
		Стр			=	СокрЛП(Лев(Стр,	Разделитель - ?(Режим=1, 0, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()




//**************************************************************************************************
//----	Начало функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************

Функция ПривестиКТипу(Зн, Тип)
	
    Если		Тип = "Дата"	Тогда
		Возврат	Дата(Зн);                                  
	ИначеЕсли	Тип = "Число"	Тогда
		Возврат	Число(Зн);
	Иначе
		Возврат	НРег(СокрЛП(Зн));
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ПроверитьУсловие(Знач Условие, Знач Объект)
	
	ИдРеквизита			=	Условие.ПолучитьАтрибут("Реквизит");
	ВидУсловия			=	Условие.ПолучитьАтрибут("ВидУсловия");
	РеквизитОперации	=	Условие.ПолучитьАтрибут("ЭтоРеквизитОперации");
	Если Найти(ИдРеквизита, "()") > 0 Тогда
		Значение		=	ПолучитьЗначениеМетодом(Объект, ИдРеквизита);
	Иначе    
		Если		ПустоеЗначение(ИдРеквизита) = 1			Тогда
			Значение	=	Объект;
		//ИначеЕсли	ПустоеЗначение(СокрЛП(Объект)) = 1		Тогда
		//	Возврат(0);	
		ИначеЕсли	ТипЗначенияСтр(Объект) = "Операция"		Тогда
			Если		ИдРеквизита = "СчетДт" Тогда
				Значение	=	Объект.Дебет.Счет;
			ИначеЕсли	ИдРеквизита = "СчетКт" Тогда
				Значение	=	Объект.Кредит.Счет;
			Иначе
				Значение	=	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		ИначеЕсли	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			Значение		=	Объект.ПолучитьАтрибут(ИдРеквизита);
		Иначе
			Значение		=	Объект.Операция.ПолучитьАтрибут(ИдРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если		ВидУсловия	=	"УдовлетворяетУсловию" Тогда
		
		Возврат	УсловияВыполняются(Условие.ВыбратьУзел("Условия"), Значение);
		
	Иначе
		ТипЗнач		=	ТипЗначенияСтр(Значение);
		
		Зн			=	ПривестиКТипу(ПолучитьИдОбъектаИсточника(Значение), ТипЗнач);
		
		Знач1		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач1"), 	ТипЗнач);
		Знач2		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач2"), 	ТипЗнач);
		
		Если		ВидУсловия	=	"Равно"					Тогда	Возврат ?(	Зн	=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеРавно"				Тогда	Возврат ?(	Зн	<>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 1			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ВключаетПодстроку"		Тогда	Возврат ?(	Найти(Зн, Знач1) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеВключаетПодстроку"	Тогда	Возврат	?(	Найти(Зн, Знач1) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ЯвляетсяПодстрокой"	Тогда	Возврат ?(	Найти(Знач1, Зн) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеЯвляетсяПодстрокой"	Тогда	Возврат	?(	Найти(Знач1, Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Больше"				Тогда	Возврат ?(	Зн	>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"БольшеИлиРавно"		Тогда	Возврат ?(	Зн	>=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Меньше"				Тогда	Возврат ?(	Зн	<	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"МеньшеИлиРавно"		Тогда	Возврат	?(	Зн	<=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалСГраницами"	Тогда	Возврат ?(	(Зн	>=	Знач1) И (Зн <=	Знач2)	, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалБезГраниц"		Тогда	Возврат ?(	(Зн	>	Знач1) И (Зн <	Знач2)	, 1, 0);
		Иначе		ЗаписатьОшибку("Не идентифицирован вид условия:   " + ВидУсловия);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции		//	ПроверитьУсловие()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")
	
	Если ПустоеЗначение(Условия)	= 1				Тогда	Возврат(1)								КонецЕсли;
	Если ПустоеЗначение(ТипУсловия) = 1				Тогда	ТипУсловия = "И"						КонецЕсли;
	
	Если ТипЗначенияСтр(Объект)		= "Справочник"	Тогда	Объект.ИспользоватьДату(ФормДатаКон, 1)	КонецЕсли;
	                                                                     
	ВыборкаУсловий	=	Условия.ВыбратьУзлы("Условие");
	Для СчУсловий = 0 По ВыборкаУсловий.КоличествоУзлов() - 1 Цикл
		Условие		=	ВыборкаУсловий.ПолучитьУзел(СчУсловий);
		Результат	=	ПроверитьУсловие(Условие, Объект);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсл			=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Результат		=	ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсл);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	Если		ТипУсловия = "И"	Тогда	Возврат(1);
	ИначеЕсли	ТипУсловия = "Или"	Тогда	Возврат(0);
	ИначеЕсли	ТипУсловия = "Не"	Тогда	Возврат(0);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")
	
	Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЕстьПроцедура")) = 0 Тогда
		Возврат ДополнительныеПреобразования("Условие", Условия.ПолучитьАтрибут("Ид"), Объект, , ИдПравилаДок);
	КонецЕсли;
	
	Если ПроверитьГруппуУсловий(Условия, Объект) = 0 Тогда Возврат(0) КонецЕсли;	//	проверка одиночных условий
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсловия		=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Если ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсловия) = 0 Тогда Возврат(0) КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции

//**************************************************************************************************
//----	Конец функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************


//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПараметрыЗагрузки(Правило, Ид="")
                                     
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
	КонецЕсли;
	Если	ПустоеЗначение(Ид) = 1		Тогда
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);	//	в первой строке описаны параметры по умолчанию
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПараметровЗагрузки.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда

		ПараметрыЗагрузки	=	гПравила.ВыбратьУзел("//ПараметрыЗагрузки[@Ид=""" + СокрЛП(Ид) + """]");
		
		Если ПустоеЗначение(ПараметрыЗагрузки) = 1 Тогда
			ЗаписатьОшибку("Не найдены параметры загрузки. Ид = " + Ид + "!", "!!");
			гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);
			Возврат;
		КонецЕсли;
		
		гТабКэшПараметровЗагрузки.НоваяСтрока();
		гТабКэшПараметровЗагрузки.Ид							=	Ид;
	    
		ДатаУстановки											=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("Дата"));
		гТабКэшПараметровЗагрузки.Дата							=	?(ПустоеЗначение(ДатаУстановки)=1, ФормДатаКон, ДатаУстановки);

		СпособЗагрузки											=	ПараметрыЗагрузки.ПолучитьАтрибут("СпособЗагрузки");
		гТабКэшПараметровЗагрузки.СпособЗагрузки				=	?(ПустоеЗначение(СпособЗагрузки)=1, "ЗамещатьНеПустыми", СпособЗагрузки);
		
		гТабКэшПараметровЗагрузки.ПравилоОпераций				=	ПараметрыЗагрузки.ПолучитьАтрибут("ПравилоОпераций");
		
		гТабКэшПараметровЗагрузки.СтатусУдаления				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусУдаления");
		гТабКэшПараметровЗагрузки.СтатусПроводок				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроводок");
		гТабКэшПараметровЗагрузки.СтатусПроведения				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроведения");
		гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов		=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусРасчетныхДокументов");
		
		гТабКэшПараметровЗагрузки.ДатаТекущегоПериодаЖР			=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("ДатаТекущегоПериодаЖР"));
	
		гТабКэшПараметровЗагрузки.ЗамещатьНайденные				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗамещатьНайденные"));
		гТабКэшПараметровЗагрузки.НовыеНеСоздавать				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("НовыеНеСоздавать"));
		
		гТабКэшПараметровЗагрузки.ЗагружатьОперации				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьОперации"));
		гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьЗаписиЖР"));
		                            	
	Иначе
		
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПараметрыЗагрузки()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравилоРеквизитов(Правило, Таб)
                                       
	Таб.НоваяСтрока();
	
	Источник					=	Правило.ВыбратьУзел("Источник");
	Приемник					=	Правило.ВыбратьУзел("Приемник");
	
	Таб.Ид						=	Правило.ПолучитьАтрибут("Ид");
	Таб.Преобразование			=	Правило.ПолучитьАтрибут("Преобразование");
	Таб.Правило					=	Правило.ПолучитьАтрибут("Правило");
	Таб.ЕстьПроцедура			=	Правило.ПолучитьАтрибут("ЕстьПроцедура");
	Таб.ПараметрыПравила		=	Правило.ПолучитьАтрибут("ПараметрыПравила");
	Таб.ПолучитьИзПараметров	=	Правило.ПолучитьАтрибут("ПолучитьИзПараметров");
	Таб.СпособВыгрузки			=	Правило.ПолучитьАтрибут("СпособВыгрузки");
	Таб.СпособЗагрузки			=	Правило.ПолучитьАтрибут("СпособЗагрузки");
	
	Условия						=	Правило.ВыбратьУзел("Условия");
	
	Если ПустоеЗначение(Источник) = 0 Тогда
		Таб.Источник_Ид				=	Источник.ПолучитьАтрибут("Ид");
		Таб.Источник_ТипАтрибута	=	Источник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Источник_Тип			=	Источник.ПолучитьАтрибут("Тип");
		Таб.Источник_Вид			=	Источник.ПолучитьАтрибут("Вид");
		//Таб.Источник_Длина		=	Источник.ПолучитьАтрибут("Длина");
	КонецЕсли;

	Если ПустоеЗначение(Приемник) = 0 Тогда
		Таб.Приемник_Ид				=	Приемник.ПолучитьАтрибут("Ид");
		Таб.Приемник_ТипАтрибута	=	Приемник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Приемник_Тип			=	Приемник.ПолучитьАтрибут("Тип");
		Таб.Приемник_Вид			=	Приемник.ПолучитьАтрибут("Вид");
		Таб.Приемник_Длина			=	Приемник.ПолучитьАтрибут("Длина");
	КонецЕсли;
	
	Если ПустоеЗначение(Условия) = 0 Тогда
		Таб.Условия	=	Условия;
		Если (ПустоеЗначение(Условия.ПолучитьАтрибут("ЗаданыПоРеквизиту")) = 1) И (Таб.Источник_ТипАтрибута <> "К") И (Таб.Источник_ТипАтрибута <> "ПК") Тогда
			Таб.ВидУсловия	=	1;
		Иначе
			Таб.ВидУсловия	=	2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравилоРеквизитов()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравилоРеквизитовЗначения(Правило, Ид="")
                                       
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("Ид");
	ИначеЕсли	ПустоеЗначение(Ид) = 1		Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшРеквизитовЗначений.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		                    
		гТабКэшРеквизитовЗначений.НоваяСтрока();
		
		Источник										=	Правило.ВыбратьУзел("Источник");
		Приемник										=	Правило.ВыбратьУзел("Приемник");
		
		гТабКэшРеквизитовЗначений.Ид					=	Ид;
		гТабКэшРеквизитовЗначений.Преобразование		=	Правило.ПолучитьАтрибут("Преобразование");
		гТабКэшРеквизитовЗначений.Правило				=	Правило.ПолучитьАтрибут("Правило");
		гТабКэшРеквизитовЗначений.ЕстьПроцедура			=	Правило.ПолучитьАтрибут("ЕстьПроцедура");
		гТабКэшРеквизитовЗначений.ПараметрыПравила		=	Правило.ПолучитьАтрибут("ПараметрыПравила");
		
		
		Условия											=	Правило.ВыбратьУзел("Условия");
		Если ПустоеЗначение(Условия) = 0 Тогда
			гТабКэшРеквизитовЗначений.Условия		=	Условия;
			гТабКэшРеквизитовЗначений.ВидУсловия	=	1;
			//Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЗаданыПоРеквизиту")) = 1 Тогда
			//	гТабКэшРеквизитовЗначений.ВидУсловия	=	1;
			//Иначе
			//	гТабКэшРеквизитовЗначений.ВидУсловия	=	2;
			//КонецЕсли;
		КонецЕсли;
		
		
		Если ПустоеЗначение(Источник) = 0 Тогда
			гТабКэшРеквизитовЗначений.Источник_Ид		=	Источник.ПолучитьАтрибут("Ид");
			гТабКэшРеквизитовЗначений.Источник_Тип		=	Источник.ПолучитьАтрибут("Тип");
			гТабКэшРеквизитовЗначений.Источник_Вид		=	Источник.ПолучитьАтрибут("Вид");
		КонецЕсли;
	
		Если ПустоеЗначение(Приемник) = 0 Тогда
			гТабКэшРеквизитовЗначений.Приемник_Ид		=	Приемник.ПолучитьАтрибут("Ид");
			гТабКэшРеквизитовЗначений.Приемник_Тип		=	Приемник.ПолучитьАтрибут("Тип");
			гТабКэшРеквизитовЗначений.Приемник_Вид		=	Приемник.ПолучитьАтрибут("Вид");
			гТабКэшРеквизитовЗначений.Приемник_Длина	=	Приемник.ПолучитьАтрибут("Длина");
		КонецЕсли;
		
	Иначе
		
		гТабКэшРеквизитовЗначений.ПолучитьСтрокуПоНомеру(НомСтр);

	КонецЕсли;
										
КонецПроцедуры		//	ЗагрузитьПравилоРеквизитовЗначения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СистемноеПредставлениеОбъекта(Источник)
    
	//	Необходимо позиционироваться на объекты, т.к.
	//	если Источник - реквизит неопределенного типа,
	//	то ЗначениеВСтрокуВнутр - возвращает НЕСТАНДАРТНОЕ
	//	строковое представление !!!
	
	Тип	=	ТипЗначенияСтр(Источник);
	Стр	=	СокрЛП(Источник);
	
	Если		(Стр = "<Объект не найден>") Или (Стр = "") Тогда
		
		Возврат("");	//	Объект не существует в ИБ
		
	ИначеЕсли	Тип = "Справочник"	Тогда
		
		Об = СоздатьОбъект("Справочник." + Источник.Вид());
		Об.НайтиЭлемент(Источник);
		Возврат	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
		
	ИначеЕсли	Тип = "Документ"	Тогда
		
		Об = СоздатьОбъект("Документ." + Источник.Вид());
		Об.НайтиДокумент(Источник);
		Возврат	ЗначениеВСтрокуВнутр(Об.ТекущийДокумент());
		
	Иначе
		
		Об	=	Источник;
		Возврат	ЗначениеВСтрокуВнутр(Об);
		
	КонецЕсли;
	
КонецФункции		//	СистемноеПредставлениеОбъекта()

//--------------------------------------------------------------------------------------------------

Функция СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила)
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() = 0 Тогда
		Возврат(1);
	КонецЕсли;
    
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	УзелСсылки				=	XML_DOM.СоздатьУзел(1, "Ссылка");
	     
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	
    Если (ТипИсточника = "Справочник") Или (ТипИсточника = "Счет") Тогда
		ЭтоГруппа	=	Источник.ЭтоГруппа();
		УстановитьАтрибут(УзелСсылки,	"ЭтоГруппа",	ЭтоГруппа);
    КонецЕсли;
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() > 0 Тогда
		ТабРеквизитовПоиска.ВыбратьСтроки();
		Пока ТабРеквизитовПоиска.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитовПоиска, Источник, УзелСсылки, "#Получить", "Поиск", ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьАтрибут(УзелСсылки, "СистемныйИд", УзелСсылки.ПреобразоватьВ_ИД(СистемноеПредставлениеОбъекта(Источник)));
	КонецЕсли;
	
	Возврат(УзелСсылки);
	
КонецФункции	//	СоздатьУзелСсылки()
                        
//--------------------------------------------------------------------------------------------------

Функция ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, Режим=0, ПараметрыПравила="", НовыеНеСоздавать=0, НеСинхронизироватьПоДопПараметрам=0)
	
	Перем	НомСтр;
	
	
	Если (ФормФлЗапоминатьСсылки = 0) И (Режим <> "Проведение") Тогда
		УзелСсылки	=	СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
		Если НовыеНеСоздавать = 1 Тогда Возврат(1) КонецЕсли;	//	в данном случае нам нужна только ссылка
	КонецЕсли;
	
	
	//СписокВыгруженныхОбъектов = СписокСписковВыгруженныхОбъектов.Получить(ИдПравила);

	Если ТабВыгруженныхОбъектов.НайтиЗначение(ИдПравила, НомСтр, "ИдПравила") = 0 Тогда
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		ТабВыгруженныхОбъектов.НоваяСтрока();
		ТабВыгруженныхОбъектов.ИдПравила	=	ИдПравила;
		ТабВыгруженныхОбъектов.ТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ТабОбъектов;
		ТабОбъектов.НоваяКолонка("Объект");
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			ТабОбъектов.НоваяКолонка("Ссылка",	"Строка");
		КонецЕсли;
	Иначе
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	КонецЕсли;
	
	//Если ТипЗначенияСтр(СписокВыгруженныхОбъектов) <> "СписокЗначений" Тогда
	//	Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
	//	СписокВыгруженныхОбъектов = СоздатьОбъект("СписокЗначений");
	//	СписокСписковВыгруженныхОбъектов.Установить(ИдПравила, СписокВыгруженныхОбъектов);
	//КонецЕсли;
                                                       
	
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда
		СистПредставление = ИдПравила + ?(ПустоеЗначение(ПараметрыПравила)=0, ЗначениеВСтрокуВнутр(ПараметрыПравила), "");
	Иначе
		Если (ПустоеЗначение(ПараметрыПравила)=0) И (НеСинхронизироватьПоДопПараметрам=0) Тогда
			
			//Тип	=	ТипЗначенияСтр(Источник);
			//Если		СокрЛП(Источник) = "<Объект не найден>" Тогда
			//	//	Объект не существует в ИБ
			//	Об					=	Источник;
			//	СистПредставление	=	"";
			//ИначеЕсли	Тип = "Справочник"	Тогда
			//	Об = СоздатьОбъект("Справочник." + Источник.Вид());
			//	Об.НайтиЭлемент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
			//ИначеЕсли	Тип = "Документ"	Тогда
			//	Об = СоздатьОбъект("Документ");
			//	Об.НайтиДокумент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийДокумент());
			//Иначе
			//	Об					=	Источник;
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об);
			//КонецЕсли;
			//СистПредставление		=	СистПредставление + ЗначениеВСтрокуВнутр(ПараметрыПравила);
			                                                                                       
			СистПредставление		=	СистемноеПредставлениеОбъекта(Источник) + ЗначениеВСтрокуВнутр(ПараметрыПравила);
			
		Иначе
			СистПредставление	=	Источник;
		КонецЕсли;
	КонецЕсли;

	
	НомСтр = "";
	Если ТабОбъектов.НайтиЗначение(СистПредставление, НомСтр, "Объект") = 0 Тогда
		
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			УзелСсылки				=	СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
			
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект	=	СистПредставление;
			
			Если УзелСсылки <> 1 Тогда
				ТабОбъектов.Ссылка	=	УзелСсылки.ПредставлениеXML;
				//ТабОбъектов.УстановитьЗначение(НомерНовойСтроки, "Ссылка", УзелСсылки.ПредставлениеXML);
			КонецЕсли;
		Иначе
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект = СистПредставление;
		КонецЕсли;
		
		Если НовыеНеСоздавать = 1 Тогда Возврат(1) КонецЕсли;	//	в данном случае нам нужна только ссылка
		
		Возврат(0);
		
	ИначеЕсли	ФормФлЗапоминатьСсылки = 1	Тогда
		                            
		СтрСсылка	=	ТабОбъектов.ПолучитьЗначение(НомСтр, "Ссылка");
		Если ПустоеЗначение(СтрСсылка) = 0 Тогда
			XML_DOM		=	гXMLАнализатор.СоздатьДокумент();
			XML_DOM.ЗагрузитьИзСтроки(СтрСсылка);
			УзелСсылки	=	XML_DOM.ВыбратьУзел("Ссылка");
		КонецЕсли;
		
	Иначе
	    
		Если Режим = "Проведение" Тогда
			УзелСсылки = СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
		КонецЕсли;
		
	КонецЕсли;
	    
	Возврат(1);
	
КонецФункции		//	ОбъектУжеВыгружен()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОбъектВФайл(XML_DOM);
    
	гСчетчикВыгруженныхОбъектов	=	гСчетчикВыгруженныхОбъектов + 1;
	
	XML_DOM.УстановитьАтрибут("Нпп", гСчетчикВыгруженныхОбъектов);
	
    гФайлДанных.ВключитьЭлемент(XML_DOM);
	                                   
	
	Если гСчетчикВыгруженныхОбъектов % ФормКолвоБуферизуемыхОбъектов = 0 Тогда
		гФайлДанных.Сбросить();
	КонецЕсли;
	
	Если гСчетчикВыгруженныхОбъектов % 10 = 0 Тогда	Состояние("Выгружено объектов:    " + гСчетчикВыгруженныхОбъектов) КонецЕсли;
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Функция ПометкаУдаления(Источник, СтатусУдаления)
                                
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат(0) КонецЕсли;
	
	Если		СтатусУдаления	= "Авто"			Тогда
		
		Возврат(Источник.ПометкаУдаления());
		
	//ИначеЕсли СтатусУдаления	= "Пометить"		Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусУдаления	= "СнятьПометку"	Тогда
	
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ПометкаУдаления()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыключитьПроводки(Источник, СтатусПроводок)
	
	Если		СтатусПроводок	= "Авто"			Тогда	//	на бух. учет и СуществуетОперация() проверили раньше
		 
		Возврат(1 - Источник.Операция.ВключитьПроводки());
		
	//ИначеЕсли СтатусУдаления	= "Включить "		Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусУдаления	= "Выключить "		Тогда
	
	КонецЕсли;
	
	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ОтменитьПроведение(Источник, СтатусПроведения);
	
	Если		СтатусПроведения	= "Авто"				Тогда
		
		Если Источник.ПометкаУдаления() = 1 Тогда Возврат(0) КонецЕсли;
		
		Если Метаданные.Документ(Источник.Вид()).РазрешитьПроведение = 0 Тогда
			Возврат(0);
		КонецЕсли;
		 
		Возврат( 1 - Источник.Проведен() );
		
	//ИначеЕсли СтатусПроведения	= "Провести"			Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусПроведения	= "ОтменитьПроведение"	Тогда
	
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ОтменитьПроведение()

//--------------------------------------------------------------------------------------------------

Функция НужноПровести(Источник, СтатусПроведения)
	                                             
	//Если Источник.ПометкаУдаления() = 1 Тогда Возврат(0) КонецЕсли;
	
	Если		СтатусПроведения	= "Авто"			Тогда
		     
		ВидДокумента	=	Источник.Вид();
		
		Если		ВидДокумента = "Операция" Тогда
			Возврат(1);
		ИначеЕсли	Метаданные.Документ(ВидДокумента).РазрешитьПроведение = 0 Тогда
			Возврат(0);
		КонецЕсли;
		 
		Возврат( Источник.Проведен() );
		
	ИначеЕсли СтатусПроведения	= "Провести"			Тогда
		
		Возврат(1);
		
	ИначеЕсли СтатусПроведения	= "ОтменитьПроведение"	Тогда
	
	КонецЕсли;
	
	Возврат(0);

КонецФункции		//	НужноПровести()
                      
//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравило(Правило, Ид="")
                                       
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("Ид");
	ИначеЕсли	ПустоеЗначение(Ид) = 1		Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПравил.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гПравила.ВыбратьУзел("//Правило[@Ид=""" + Ид + """]");
		КонецЕсли;
		
		Источник									=	Правило.ВыбратьУзел("ОбъектИсточник");
		Приемник									=	Правило.ВыбратьУзел("ОбъектПриемник");
		
		гТабКэшПравил.НоваяСтрока();
		гТабКэшПравил.Ид							=	Ид;
		гТабКэшПравил.Правило						=	Правило;
		гТабКэшПравил.ПоСсылкам						=	Число(Правило.ПолучитьАтрибут("ПоСсылкам"));
		гТабКэшПравил.Преобразование				=	Правило.ПолучитьАтрибут("Преобразование");
		гТабКэшПравил.ПравилоПереадресации			=	Правило.ПолучитьАтрибут("Правило");
		гТабКэшПравил.ПараметрыЗагрузки				=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
		гТабКэшПравил.ИдСинхронизирующегоРеквизита	=	Правило.ПолучитьАтрибут("ИдСинхронизирующегоРеквизита");
		
		Условия										=	Правило.ВыбратьУзел("Условия");
		Если ПустоеЗначение(Условия) = 0 Тогда
			гТабКэшПравил.Условия		=	Условия;
			гТабКэшПравил.ВидУсловия	=	1;
		КонецЕсли;
		                            	
		Если ПустоеЗначение(Источник) = 0 Тогда
			гТабКэшПравил.Источник_Тип				=	Источник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Источник_Вид				=	Источник.ПолучитьАтрибут("Вид");
		КонецЕсли;
	
		Если ПустоеЗначение(Приемник) = 0 Тогда
			гТабКэшПравил.Приемник_Тип				=	Приемник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Приемник_Вид				=	Приемник.ПолучитьАтрибут("Вид");
			Если гТабКэшПравил.Приемник_Тип = "ЖурналРасчетов" Тогда
				гТабКэшПравил.Уникальность			=	Приемник.ПолучитьАтрибут("Уникальность");
				гТабКэшПравил.ДатаОтсчета			=	Приемник.ПолучитьАтрибут("ДатаОтсчета");
			КонецЕсли;
		КонецЕсли;
		
		Приемник_Тип								=	гТабКэшПравил.Приемник_Тип;
		Источник_Тип								=	гТабКэшПравил.Источник_Тип;
		//Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат КонецЕсли;
		
		//-------------------------------------------
		
		гТабКэшПравил.ТабРеквизитовПоиска			=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитов					=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитовСтрок			=	СоздатьОбъект("ТаблицаЗначений");
		
		Реквизиты = Правило.ВыбратьУзлы("Реквизит[@СпособЗагрузки=""Поиск""]");
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитовПоиска.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовПоиска);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Справочник"	Тогда
        	Запрос	=	"Реквизит[(@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки))]";
		ИначеЕсли	Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута != ""РТД"") or (not(Приемник)) ) and ( (@СпособВыгрузки != ""ПеребратьСтрокиДокумента"") or (not(СпособВыгрузки)) )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута = ""АО"") or (Приемник/@ТипАтрибута = ""РО"") ]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки != ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"Реквизит";
		КонецЕсли;
		
		Реквизиты = Правило.ВыбратьУзлы(Запрос);
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитов.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитов);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута = ""РТД"") or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"") )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			//Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ]";
			Запрос	=	"Реквизит[( (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ) or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"";
		КонецЕсли;
		
		Если Запрос <> "" Тогда
			Реквизиты	=	Правило.ВыбратьУзлы(Запрос);
			Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
				гТабКэшПравил.ТабРеквизитовСтрок.Загрузить(гТабКэшРеквизитов);
				Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
					ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовСтрок);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		гТабКэшПравил.ПолучитьСтрокуПоНомеру(НомСтр);
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гТабКэшПравил.Правило;			//  нужно для поиска значений и др.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравило()

//--------------------------------------------------------------------------------------------------

Функция НайтиПравило(Источник, Правило="", ИдПравила="", ТипПриемника="", ВидПриемника="", ИдПравилаДок="")
	          
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Вид				=	"";
	Запрос			=	"";
	
	Тип				=	ТипЗначенияСтр(Источник);
	
	
	Если	ПустоеЗначение(Тип) = 1									Тогда Возврат(0) КонецЕсли;
	Если	(Тип = "Строка") И (ТипПриемника = "Неопределенный")	Тогда Возврат(0) КонецЕсли;
	
	
	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Тип + """)";
	
	Если (Найти("Строка,Число,Дата,Операция,Календарь,ВидСубконто,ВидРасчета", Тип) = 0) И (Тип <> "ПланСчетов") Тогда
		Вид			=	Источник.Вид();
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Вид + """)";
	КонецЕсли;
	
	Если (ПустоеЗначение(ТипПриемника) = 0) И (ТипПриемника <> "Неопределенный") Тогда
		Запрос		=	Запрос + "and(ОбъектПриемник/@Тип = """ + ТипПриемника + """)";
		Если ПустоеЗначение(ВидПриемника) = 0 Тогда
			Запрос	=	Запрос + "and(ОбъектПриемник/@Вид = """ + ВидПриемника + """)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		       
	
	Если Тип <> "ЖурналРасчетов" Тогда
		ЗаписатьОшибку("Не найдено правило конвертации объекта: " + Тип + "." + Вид + " - " + Источник, "!!");
	КонецЕсли;
	
	
	Возврат(0);
	
КонецФункции		//	НайтиПравило()
            
//--------------------------------------------------------------------------------------------------

Функция НайтиПравилоДляАтрибутаЗначения(Знач Источник, Правило="", ИдПравила="", ПравилоАтрибутаЗначения="")
	              
	Если (ПустоеЗначение(ИдПравила) = 1) И (ПустоеЗначение(ПравилоАтрибутаЗначения) = 0) Тогда
		ИдПравила	=	ПравилоАтрибутаЗначения.ПолучитьАтрибут("Правило");
	КонецЕсли;
	
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Если ПустоеЗначение(ПравилоАтрибутаЗначения) = 1 Тогда Возврат(0) КонецЕсли;
	
	Запрос				=	"";
	Источник_Тип		=	"";
	Источник_Вид		=	"";
	Приемник_Тип		=	"";
	Приемник_Вид		=	"";
	
	УзелИсточник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Источник");
	УзелПриемник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Приемник");
	
	Если ПустоеЗначение(УзелИсточник) = 0 Тогда
		Источник_Тип	=	УзелИсточник.ПолучитьАтрибут("Тип");
		Источник_Вид	=	УзелИсточник.ПолучитьАтрибут("Вид");
	КонецЕсли;

	Если ПустоеЗначение(УзелПриемник) = 0 Тогда
		Приемник_Тип	=	УзелПриемник.ПолучитьАтрибут("Тип");
		Приемник_Вид	=	УзелПриемник.ПолучитьАтрибут("Вид");
	КонецЕсли;
	            
	Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат(0)								КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Источник_Тип = ТипЗначенияСтр(Источник)	КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Возврат(0) 								КонецЕсли;

	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Источник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Источник_Тип) = 0 Тогда
		Если ПустоеЗначение(Источник_Вид) = 1 Тогда Источник_Вид = Источник.Вид() КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Источник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "and(ОбъектПриемник/@Тип = """ + Приемник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Приемник_Тип) = 0 Тогда
		Если ПустоеЗначение(Приемник_Вид) = 1 Тогда Приемник_Вид = Источник_Вид КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектПриемник/@Вид = """ + Приемник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		
	ЗаписатьОшибку("Не найдено правило конвертации атрибута значения: " + ПравилоАтрибутаЗначения.ПолучитьАтрибут("Имя") + " - " + Источник_Тип + "." + Источник_Вид + " - " + Источник, "!!");
	Возврат(0);
	
КонецФункции		//	НайтиПравилоДляАтрибутаЗначения()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеМетодом(Источник, Метод)
                                        
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	    
	Если		Метод = "Значение()"				Тогда
		Возврат		Источник;
	ИначеЕсли	Метод = "Вид()"						Тогда
		Возврат		Источник.Вид();
	ИначеЕсли	Метод = "ПометкаУдаления()"			Тогда
		Возврат		Источник.ПометкаУдаления();
	ИначеЕсли	Метод = "СистемноеПредставление()"	Тогда
		Возврат		ЗначениеВСтрокуВнутр(Источник);
	ИначеЕсли	Метод = "Код()"						Тогда
		Возврат		Источник.Код;
	КонецЕсли;
	
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	
	
    Если		ТипИсточника = "Справочник"			Тогда
		      
		Если		Метод = "ТекущийЭлемент()"		Тогда
			Зн	=	Источник.ТекущийЭлемент();
		ИначеЕсли	Метод = "ЭтоГруппа()"			Тогда
			Зн	=	Источник.ЭтоГруппа();
		КонецЕсли;
		                                     
	ИначеЕсли	ТипИсточника = "Документ"			Тогда

		Если		Метод = "ТекущийДокумент()"		Тогда
			//Зн	=	Источник.ТекущийДокумент();
			Возврат(Источник);
		ИначеЕсли	Метод = "Проведен()"			Тогда
			Зн	=	Источник.Проведен();
		ИначеЕсли	Метод = "ПроводкиВключены()"	Тогда
			Зн	=	Источник.Операция.ВключитьПроводки();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Перечисление"		Тогда
		
		Если			Метод = "ТекущееЗначение()"	Тогда
			Зн	=	Источник;
		ИначеЕсли		Метод = "Представление()"	Тогда
			Зн	=	Строка(Источник);
		ИначеЕсли		Метод = "Идентификатор()"	Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли		Метод = "ПорядковыйНомер()"	Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Счет"				Тогда
		
		Если		Метод = "ТекущийСчет()"			Тогда
			Зн	=	Источник.ТекущийСчет();
		ИначеЕсли	Метод = "Родитель()"			Тогда
			Зн	=	Источник.Родитель();
		ИначеЕсли	Найти(Метод, "ВидСубконто") > 0	Тогда
			НомерСубконто	=	Число(Сред(Метод, 12, 1));
			Если НомерСубконто > МаксимальноеКоличествоСубконто() Тогда
				Возврат("");
			КонецЕсли;
			Зн	=	Источник.ВидСубконто(НомерСубконто);
		КонецЕсли;
	
	ИначеЕсли	ТипИсточника = "ВидСубконто"		Тогда
		
		Если		Метод = "Идентификатор()"		Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли	Метод = "Представление()"		Тогда
			Зн	=	Метаданные.ВидСубконто(Источник.Идентификатор()).Представление();
		ИначеЕсли	Метод = "ТипСубконто()"			Тогда
			Зн	=	Источник.ТипСубконто();
		ИначеЕсли	Метод = "ПорядковыйНомер()"		Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Операция"			Тогда

		Если		Метод = "ПланСчетов()"			Тогда
			Если Источник.ПроводкаВыбрана() = 1 Тогда
				Зн	=	Источник.ПланСчетов().Идентификатор();
			Иначе
				ЗаписатьОшибку("Не выбрана проводка для получения плана счетов!", "!");
			КонецЕсли;
		ИначеЕсли	Метод = "ВидДокумента()"		Тогда
			Зн	=	Источник.Документ.Вид();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(Зн);
	
КонецФункции		//	ПолучитьЗначениеМетодом()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПодобратьЗначениеПоТипу(Объект, ТипЗнач, ВидЗнач, НомерСубконтоИсточника="")
	
	Если  		ТипЗначенияСтр(Объект) = "СписокЗначений" Тогда
		
		Для Сч = 1 По Объект.РазмерСписка() Цикл
			Значение = Объект.ПолучитьЗначение(Сч);
			Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
				Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
				    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли  	ТипЗначенияСтр(Объект) = "Справочник" Тогда
	                                                       
		ОбъектМД	=	Метаданные.Справочник(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если ОбъектМД.Реквизит(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.Реквизит() Цикл
		    РеквМД	=	ОбъектМД.Реквизит(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли	ТипЗначенияСтр(Объект) = "Документ" Тогда
		
		ОбъектМД	=	Метаданные.Документ(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если		ОбъектМД.РеквизитШапки(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			ИначеЕсли	ОбъектМД.РеквизитТабличнойЧасти(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.РеквизитШапки() Цикл
		    РеквМД	=	ОбъектМД.РеквизитШапки(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Сч = 1 По ОбъектМД.РеквизитТабличнойЧасти() Цикл
		    РеквМД	=	ОбъектМД.РеквизитТабличнойЧасти(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат("");

КонецФункции		//	ПодобратьЗначениеПоТипу()

//-------------------------------------------------------------------------------------------------- 
             
Функция ВыделитьПрефикс(Знач Стр, ЧисловаяЧасть="", Режим="")
    
	Стр		=	СокрЛП(Стр);
	Префикс	=	Стр;
	Длина	=	СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		ЧисловаяЧасть	=	Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			Префикс	=	Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			Стр = Прав(Стр, Длина - Сч);
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда	ЧисловаяЧасть = - ЧисловаяЧасть		КонецЕсли;
			
	КонецЦикла;
	              
	Если Режим = "Число" Тогда
	    Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции		//	ВыделитьПрефикс()

//--------------------------------------------------------------------------------------------------

Функция ДополнитьНулями(Стр, Длина)
                            
	Стр			=	СокрЛП(Стр);
	//Добавить	=	Длина - СтрДлина(Стр);
	
	//Если	Добавить > 0	Тогда
		
		ЧисловаяЧасть	=	"";
		Результат		=	ВыделитьПрефикс(Стр, ЧисловаяЧасть);
		Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
		    Результат	=	Результат + "0";
		КонецЦикла;
		Результат	=	Результат + Строка(ЧисловаяЧасть);
		
		Возврат(Результат);
		
	//Иначе
	//	Возврат	Стр;
	//КонецЕсли;
	
КонецФункции		//	ДополнитьСтроку()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ДобавитьКПрефиксу(Стр, Добавок="", Длина, Режим="Слева")
	                     
	ЧисловаяЧасть		=	"";
	Префикс			=	ВыделитьПрефикс(Стр, ЧисловаяЧасть);
	Если Режим="Слева" Тогда
		Результат	=	СокрЛП(Добавок) + Префикс;
	Иначе
		Результат	=	Префикс + СокрЛП(Добавок);
	КонецЕсли;

	Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
	    Результат	=	Результат + "0";
	КонецЦикла;
	Результат	=	Результат + Строка(ЧисловаяЧасть);
	
	Возврат(Результат);
	
	//Возврат ДополнитьНулями(НовыйПрефикс + ЧисловаяЧасть, Длина);

КонецФункции

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыполнитьПреобразование(СписокСтрокой, Знач Объект, Знач Реквизит="", ИдПравила="", Приемник_Длина=0)
	
	Если ПустоеЗначение(СписокСтрокой) = 1 Тогда Возврат("") КонецЕсли;
	
	Список	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(Список) <> "СписокЗначений" Тогда Возврат(СписокСтрокой) КонецЕсли;	//	Для простых строковых значений...

	Если Список.Получить("ОбъектИлиРеквизит") = "Реквизит" Тогда	Объект = Реквизит	КонецЕсли;

	Значение	=	Список.Получить("Значение");
	
	Если		Значение = "<Пустое значение>" Тогда
		Возврат("");
	ИначеЕсли	ПустоеЗначение(Значение) = 0 Тогда
		Значение	=	СтрЗаменить(Значение,	Симв(10),			"#рс#" );
		//Значение	=	СтрЗаменить(Значение,	СимволТабуляции,	"#ст#" );
		Возврат(Значение);
	КонецЕсли;
	
	СтрокаСумма	=	"";
	
	Для Сч = 1 По Список.РазмерСписка() Цикл
		
		Пред	=	"";
	    Зн		=	Список.ПолучитьЗначение(Сч, Пред);
		
		Если		Пред = "Атрибут"								Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
					Объект.ИспользоватьДату(ФормДатаКон, 1);
				КонецЕсли;
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
		ИначеЕсли	Пред = "ИтогПоКолонке"							Тогда
			
			Объект	=	Объект.Итог(Зн);
			                     
		ИначеЕсли	Пред = "Конкатенация"							Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(Объект.ПолучитьАтрибут(Зн)));
			Иначе
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(ПолучитьЗначениеМетодом(Объект, Зн)));
			КонецЕсли;
			
		ИначеЕсли	Пред = "ДополнитьНулями"						Тогда

			Если Найти(Зн, "()") = 0 Тогда
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
			Объект	=	ДополнитьНулями(Объект, Приемник_Длина);
			                      
		ИначеЕсли	Пред = "ПолучитьИзПараметров"					Тогда
			
			Возврат("#ПолучитьИзПараметров");
			
		ИначеЕсли	Найти(Пред, "ИспользоватьСубконтоСчета") > 0	Тогда
			
			Правило	=	"";
			Счет	=	Объект.ПолучитьАтрибут(Зн);
			Если ПустоеЗначение(Счет)					= 1	Тогда	Возврат("")	КонецЕсли;
			Если НайтиПравило(Счет, Правило, ИдПравила)	= 0	Тогда	Возврат("")	КонецЕсли;
			    
			ИдПравила			=	"";
			УзелЗначения		=	Правило.ВыбратьУзел("Значение[@Источник=""" + Счет.Код + """]");
			Если ПустоеЗначение(УзелЗначения) = 1 Тогда	ЗаписатьОшибку("Не найдено правило конвертации значения " + Счет, "!"); Возврат("");	КонецЕсли;
			
			НомерСубконто		=	СокрЛП(СтрЗаменить(Пред, "ИспользоватьСубконтоСчета_", ""));
			
			Запрос				=	"Реквизит[(Приемник/@НомерСубконто = """ + НомерСубконто + """)]";
			АтрибутыЗначения	=	УзелЗначения.ВыбратьУзлы(Запрос);
			КоличествоУзлов		=	АтрибутыЗначения.КоличествоУзлов();
			Если ПустоеЗначение(КоличествоУзлов) = 1 Тогда Возврат("") КонецЕсли;
			     
			СписокВозможныхЗначений	=	Реквизит;
			
			Для СчАтрибутов = 0 По КоличествоУзлов - 1 Цикл
				АтрибутЗначения	=	АтрибутыЗначения.ПолучитьУзел(СчАтрибутов);
				                                                            
				Если (ПустоеЗначение(Реквизит) = 1) Или (Реквизит = "#Получить") Или (ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений") Тогда
					РеквИсточник	=	АтрибутЗначения.ВыбратьУзел("Источник");
					Если ПустоеЗначение(РеквИсточник) = 0 Тогда
						ТипРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Тип");
						ВидРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Вид");
						НомерСубконтоИсточника	=	РеквИсточник.ПолучитьАтрибут("НомерСубконто");
						Если ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений" Тогда
							Реквизит		=	ПодобратьЗначениеПоТипу(СписокВозможныхЗначений, ТипРеквИсточника, ВидРеквИсточника);
						Иначе
							Реквизит		=	ПодобратьЗначениеПоТипу(Объект, ТипРеквИсточника, ВидРеквИсточника, НомерСубконтоИсточника);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				                        
				Усл	=	АтрибутЗначения.ВыбратьУзел("Условия");
				Если ПустоеЗначение(Усл) = 0 Тогда
					Если УсловияВыполняются(Усл, Реквизит) = 0 Тогда Продолжить	КонецЕсли;
				КонецЕсли;
				
				ИдПравила	=	"";
				НайтиПравилоДляАтрибутаЗначения(Реквизит, , ИдПравила, АтрибутЗначения);
				Возврат(Реквизит);
			КонецЦикла;
			
		ИначеЕсли	Найти("ОбъектИлиРеквизит,Значение", Пред) > 0	Тогда
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустоеЗначение(СтрокаСумма) = 1 Тогда
		Возврат(Объект);
	Иначе
		Возврат(СтрокаСумма);
	КонецЕсли;
	
КонецФункции		//	ВыполнитьПреобразование()

//--------------------------------------------------------------------------------------------------
                                                                                           
Функция ПолучитьПараметрыПравила(СписокСтрокой, Знач Объект, Знач Реквизит="", СписокПараметровПравила="")

	СписокИсточник	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(СписокИсточник) <> "СписокЗначений" Тогда Возврат("") КонецЕсли;
	
	СписокПриемник	=	СоздатьОбъект("СписокЗначений");
    
	Для Сч = 1 По СписокИсточник.РазмерСписка() Цикл
		Атрибут		=	"";
		Значение	=	ВыполнитьПреобразование(СписокИсточник.ПолучитьЗначение(Сч, Атрибут), Объект, Реквизит);
		Если Значение = "#ПолучитьИзПараметров" Тогда
			Если ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
				ЗначениеАтрибутаИзСписка = СписокПараметровПравила.Получить(Атрибут);
				Если ПустоеЗначение(ЗначениеАтрибутаИзСписка) = 0 Тогда
					СписокПриемник.ДобавитьЗначение(ЗначениеАтрибутаИзСписка, Атрибут);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустоеЗначение(Значение) = 0 Тогда
				СписокПриемник.ДобавитьЗначение(Значение, Атрибут);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(СписокПриемник);
	
КонецФункции		//	ПолучитьПараметрыПравила()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ДобавитьРеквизит(Таб, Источник, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")
	                                                       
	ИдПравилаРеквизитов		=	Таб.Ид;
	ВидУсловия				=	Таб.ВидУсловия;
	
	Если		ВидУсловия = 1 Тогда		//	условие задано по объекту
		Условия				=	Таб.Условия;
		Если УсловияВыполняются(Условия, Источник) = 0 Тогда Возврат("") КонецЕсли;
	ИначеЕсли	ВидУсловия = 2 Тогда			//	условие задано по значению реквизита
		Условия				=	Таб.Условия;
	КонецЕсли;
	
	
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	
	Источник_Ид				=	Таб.Источник_Ид;
	Источник_Тип			=	Таб.Источник_Тип;
	Источник_ТипАтрибута	=	Таб.Источник_ТипАтрибута;
	
	Приемник_Ид				=	Таб.Приемник_Ид;
	Приемник_ТипАтрибута	=	Таб.Приемник_ТипАтрибута;
	Приемник_Тип			=	Таб.Приемник_Тип;
	Приемник_Вид			=	Таб.Приемник_Вид;
	Приемник_Длина			=	Таб.Приемник_Длина;
	
	Преобразование			=	Таб.Преобразование;
	ПравилоВыгрузки			=	Таб.Правило;
	
	ЕстьПроцедура			=	Таб.ЕстьПроцедура;
	ПараметрыПравила		=	Таб.ПараметрыПравила;
	ПолучитьИзПараметров	=	Таб.ПолучитьИзПараметров;
	
	СпособЗагрузки			=	Таб.СпособЗагрузки;
	                         
	
	//-------------------------------------------
	
	
    Если		(ТипИсточника = "Справочник") Или (ТипИсточника = "Счет")	Тогда
		
		ЭтоГруппа		=	Источник.ЭтоГруппа();
		Если (Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		Если (Найти(Приемник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		
		
		Если	(	(Найти(Источник_ТипАтрибута, "Г") > 0)		Или
					(Найти(Приемник_ТипАтрибута, "Г") > 0)	)	И	(ЭтоГруппа = 0) Тогда
			//	Проверим: не указано ли уже в xml-объекте что это все-таки группа
			Если ПустоеЗначение(Приемник.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
				УзелДляПроверки	=	Приемник.ВыбратьУзел("Ссылка");
				Если ПустоеЗначение(УзелДляПроверки) = 0 Тогда
					Если ПустоеЗначение(УзелДляПроверки.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
						Возврат("");
					КонецЕсли;
				Иначе
					Возврат("");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Документ"		Тогда
		
		Если Источник_Ид = "ВремяДок" Тогда
			Зн	=	Источник.ПолучитьВремя();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "ЖурналРасчетов"	Тогда
		    
		ПервичнаяЗапись	=	Источник.ПервичнаяЗапись;	//	через две точки не работает!
		Если		Источник_Ид = "ДокументПервичнойЗаписи"		Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			Зн	=	ПервичнаяЗапись.РодительскийДокумент;
			Если ПустоеЗначение(Зн) = 1 Тогда 	Возврат("") КонецЕсли;
		ИначеЕсли	Источник_Ид = "РегистрацияПервичнойЗаписи"	Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			ПериодРегистрации	=	ПервичнаяЗапись.ПериодРегистрации;
			Зн					=	ПериодРегистрации.ДатаНачала;
		КонецЕсли;
		
	КонецЕсли;
    
	
	//-------------------------------------------
	           
	
	ПрерватьПослеОбработки	=	0;
	Если	ПустоеЗначение(ЕстьПроцедура) = 0 Тогда
		Зн	=	ДополнительныеПреобразования("ПравилоРеквизита", ИдПравилаРеквизитов, Источник, Приемник, СписокДопПараметровПравила);
		Если		Зн = 0 Тогда
			
			Возврат(0);
			
		ИначеЕсли	Зн = "#Прервать" Тогда
			
			Возврат("#Прервать");
			
		ИначеЕсли	Зн = "#ПрерватьПослеОбработки"	Тогда
			
			ЕстьПроцедура			=	0;
			ПрерватьПослеОбработки	=	1;
			
		ИначеЕсли	Зн = "#ПрерватьПереборСтрок"	Тогда
			
			Возврат("#ПрерватьПереборСтрок");
			
		КонецЕсли;
	КонецЕсли;
	                                             
	
	//-------------------------------------------
	
	
	ЗначениеИстории		=	"";
        
	Если	ПустоеЗначение(ЕстьПроцедура) = 1 Тогда
		
		Если		Источник_ТипАтрибута = "М"								Тогда
			Зн	=	ПолучитьЗначениеМетодом(Источник, Источник_Ид);
		ИначеЕсли	(Зн = "#Получить") И (ПустоеЗначение(Источник_Ид) = 0)	Тогда
			Если		(Найти("АО,РО", Источник_ТипАтрибута) > 0) И (ТипИсточника <> "Операция")	Тогда
				Зн		=	Источник.Операция.ПолучитьАтрибут(Источник_Ид);
			ИначеЕсли	Источник_ТипАтрибута = "ПК"	Тогда
				Врем	=	СоздатьОбъект("Периодический");
				Врем.ИспользоватьОбъект(Источник_Ид);
				Зн		=	Врем.ЗначениеНаДату( ?(ПустоеЗначение(ФормДатаКон)=1, РабочаяДата(), ФормДатаКон) );
			ИначеЕсли	Источник_ТипАтрибута = "К"	Тогда
				Зн		=	Константа.ПолучитьАтрибут(Источник_Ид);
			Иначе
				//Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
				
				//	Это помогает при отладке
				Попытка
					Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
				Исключение
				    Сообщить("Неверное имя реквизита! Объект:  " + Источник + ";   Реквизит:  " + Источник_Ид + ";   Правило реквизита:  " + ИдПравилаРеквизитов);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли	ТипЗначенияСтр(Зн) = "Периодический" Тогда
			ЗначениеИстории	=	Зн;
			Зн				=	ЗначениеИстории.Значение;
			ДатаЗначения	=	ЗначениеИстории.ДатаЗнач;
		ИначеЕсли	ПустоеЗначение(ПолучитьИзПараметров) = 0	Тогда
			Если ТипЗначенияСтр(СписокДопПараметровПравила) = "СписокЗначений" Тогда
				Зн			=	СписокДопПараметровПравила.Получить(Приемник_Ид);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	Если ВидУсловия = 2 Тогда	//	т.е. условие задано по значению реквизита
		Если УсловияВыполняются(Условия, Зн) = 0 Тогда Возврат("") КонецЕсли;
	КонецЕсли;
	
	
	
	Если		ПустоеЗначение(Преобразование) = 0	Тогда
		Зн	=	ВыполнитьПреобразование(Преобразование, Источник, Зн, ПравилоВыгрузки, Приемник_Длина);
	КонецЕсли;
	
	
	Если	Зн = "#Получить" Тогда	// значит это виртуальный объект (которого нет в базе источнике)
		Зн				=	"";
	//ИначеЕсли	Найти("Строка,Дата,Число", Приемник_Тип) > 0 Тогда
		// Хорошо бы здесь в таком случае сразу ПолучитьИдОбъектаИсточника()
	ИначеЕсли	(СпособЗагрузки				=	"ЗамещатьНеПустыми")	Или 
				((СпособЗагрузкиПоУмолчанию	=	"ЗамещатьНеПустыми")	И	(ПустоеЗначение(СпособЗагрузки) = 1))	Тогда
		Если ПустоеЗначение(Зн) = 1 Тогда	Возврат("")	КонецЕсли;
	КонецЕсли;

	
	Если	ПустоеЗначение(ПараметрыПравила) = 0	Тогда
		ПараметрыПравила = ПолучитьПараметрыПравила(ПараметрыПравила, Источник, Зн, СписокДопПараметровПравила);
	КонецЕсли;
	
	
	
	УзелСсылки				=	1;		// означает что нам нужна ссылка
	Значение				=	Выгрузить(Зн, ПравилоВыгрузки, УзелСсылки, ПараметрыПравила, Приемник_Тип, Приемник_Вид);
	
	
	
	Если		Приемник_ТипАтрибута = "М"			Тогда
		
		Если		Приемник_Ид = "ЭтоГруппа()"			Тогда
			УстановитьАтрибут(Приемник, "ЭтоГруппа", Значение);
			Возврат("");
		ИначеЕсли	Приемник_Ид = "СистемноеПредставление()"	Тогда
			
		Иначе
			Возврат(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
    
	
	Если ПустоеЗначение(Приемник_Ид)	= 1	Тогда	Возврат(Значение)	КонецЕсли;
	Если ПустоеЗначение(Приемник)		= 1	Тогда	Возврат(Значение)	КонецЕсли;
	
	
	
	//-------------- xml --------------
	
	Если ПустоеЗначение(ЗначениеИстории) = 1 Тогда
		Если (Приемник_ТипАтрибута = "К") Или (Приемник_ТипАтрибута = "ПК") Тогда
		    Реквизит	=	Приемник;
		Иначе
			Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
		КонецЕсли;
		УстановитьАтрибут(Реквизит,	"Идентификатор",	Приемник_Ид);
		УстановитьАтрибут(Реквизит,	"Значение", 		Значение);
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Реквизит,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
	Иначе
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Приемник,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
		Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("История");
		УстановитьАтрибут(Реквизит,	"Дата",			Выгрузить(ДатаЗначения));
		УстановитьАтрибут(Реквизит,	"Значение",		Значение);
	КонецЕсли;
	
	
	Если 		Найти("АО,РО", Приемник_ТипАтрибута) = 0	Тогда
	ИначеЕсли	ТипИсточника <> "Операция"					Тогда
		УстановитьАтрибут(Реквизит,	"ЭтоРеквизитОперации", "1");
	КонецЕсли;
	
        
	Если УзелСсылки <> 1 Тогда	// значит узел ссылки создан
		Реквизит.ДобавитьПодчиненный(УзелСсылки);
	КонецЕсли;
	
	
	Если	(Приемник_Тип	=	"Неопределенный")	Или
			((ПустоеЗначение(Приемник_Вид) = 1)		И	(Найти("Справочник,Документ,Перечисление,Счет", Приемник_Тип) > 0)) Тогда
				
		Если  ПустоеЗначение(ПравилоВыгрузки) = 1 Тогда
			Т	=	ТипЗначенияСтр(Зн);
			Если (ПустоеЗначение(Зн) = 1) И (Т = "Строка") Тогда
				Приемник.УдалитьПодчиненный(Реквизит);
			Иначе
				УстановитьАтрибут(Реквизит,	"ТипЗначения", 	Т);
			КонецЕсли;
		ИначеЕсли ПустоеЗначение(НайтиПравило(Зн, , ПравилоВыгрузки)) = 0 Тогда
			УстановитьАтрибут(Реквизит,	"ТипЗначения", 	гТабКэшПравил.Приемник_Тип);
			УстановитьАтрибут(Реквизит,	"ВидЗначения", 	гТабКэшПравил.Приемник_Вид);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ПрерватьПослеОбработки = 1 Тогда
		Возврат("#Прервать");
	Иначе
		Возврат("");
	КонецЕсли;
	
КонецФункции		//	ДобавитьРеквизит()

//--------------------------------------------------------------------------------------------------
                                                                                 
Процедура ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила)
	    
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	                                                                  
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
	    ФлНеВыгружатьИсторию		=	1;
		СпособВыгрузки				=	ТабРеквизитов.СпособВыгрузки;
		
		Если ТипИсточника = "Справочник" Тогда
			ЭтоГруппа				=	Источник.ЭтоГруппа();
			
			Источник_ТипАтрибута	=	ТабРеквизитов.Источник_ТипАтрибута;
			Приемник_ТипАтрибута 	=	ТабРеквизитов.Приемник_ТипАтрибута;
		      
			Если 	(Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда Продолжить КонецЕсли;
			Если	(Найти(Источник_ТипАтрибута, "Г") > 0) И (ЭтоГруппа = 0)	Тогда Продолжить КонецЕсли;
			
			Если (СпособВыгрузки = "ВсюИсторию") Или (СпособВыгрузки = "ВсюИсториюРучную") Тогда
				Если (Лев(Источник_ТипАтрибута, 1)="П") И (Лев(Приемник_ТипАтрибута, 1)="П") Тогда
					ФлНеВыгружатьИсторию	=	0;
					Источник_Ид				=	ТабРеквизитов.Источник_Ид;
					Приемник_Ид				=	ТабРеквизитов.Приемник_Ид;
					История					=	СоздатьОбъект("Периодический");
					История.ИспользоватьОбъект(Источник_Ид, Источник);
					
					ДатаНачалаВыборки		=	ФормДатаНач;
					Если ПустоеЗначение(ФормДатаНач) = 0 Тогда
						История.ОбратныйПорядок(1);
						История.ВыбратьЗначения(, ФормДатаНач);
						Если История.ПолучитьЗначение() = 1 Тогда
							ДатаНачалаВыборки	=	История.ДатаЗнач;
						КонецЕсли;
					КонецЕсли;
					        
					
					История.ОбратныйПорядок(0);
					Если История.ВыбратьЗначения(ДатаНачалаВыборки, ФормДатаКон) = 0 Тогда Продолжить; КонецЕсли;
					РеквизитСИсторией	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
					УстановитьАтрибут(РеквизитСИсторией,	"Идентификатор", 	Приемник_Ид);
					Пока История.ПолучитьЗначение() = 1 Цикл
						Если СпособВыгрузки = "ВсюИсториюРучную" Тогда
							Если ПустоеЗначение(История.ТекущийДокумент()) = 0 Тогда Продолжить КонецЕсли;
						КонецЕсли;
						Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, РеквизитСИсторией, История, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;		//	если способ выгрузки "Выгружать историю"
		КонецЕсли;
		
		Если ФлНеВыгружатьИсторию = 1 Тогда
			Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЕсли;
	КонецЦикла;		//	по правилам реквизитов
	
	ЗаписатьОбъектВФайл(Приемник);
	
КонецПроцедуры		//	ВыгрузитьОбъектСправочника()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ВыгрузитьКонстанты(ТабРеквизитов, ИдПравила)
                  
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
		                  
		Источник_ТипАтрибута	=	ТабРеквизитов.Источник_ТипАтрибута;
		Приемник_ТипАтрибута 	=	ТабРеквизитов.Приемник_ТипАтрибута;
		      
		Источник_Ид				=	ТабРеквизитов.Источник_Ид;
		Приемник_Ид				=	ТабРеквизитов.Приемник_Ид;
		СпособВыгрузки			=	ТабРеквизитов.СпособВыгрузки;
		
		Если	ПустоеЗначение(Приемник_Ид) = 1		Тогда	Продолжить	КонецЕсли;
		
		XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
		Приемник				=	XML_DOM.СоздатьУзел(1, "Константа");
		                   
		ИсточникПериодический	=	?(Лев(Источник_ТипАтрибута, 1)="П", 1, 0);
		ПриемникПериодический	=	?(Лев(Приемник_ТипАтрибута, 1)="П", 1, 0);
		
		Если	(ИсточникПериодический = 1) И (ПриемникПериодический = 1) И ( Найти(СпособВыгрузки, "ВсюИсторию")>0 ) Тогда
			История	=	СоздатьОбъект("Периодический");
			История.ИспользоватьОбъект(Источник_Ид);
			
			ДатаНачалаВыборки		=	ФормДатаНач;
			Если ПустоеЗначение(ФормДатаНач) = 0 Тогда
				История.ОбратныйПорядок(1);
				История.ВыбратьЗначения(, ФормДатаНач);
				Если История.ПолучитьЗначение() = 1 Тогда
					ДатаНачалаВыборки	=	История.ДатаЗнач;
				КонецЕсли;
			КонецЕсли;
			
			Если История.ВыбратьЗначения(ДатаНачалаВыборки, ФормДатаКон) = 0 Тогда Продолжить КонецЕсли;
			УстановитьАтрибут(Приемник,	"Идентификатор", 	Приемник_Ид);
			Пока История.ПолучитьЗначение() = 1 Цикл
				Если СпособВыгрузки = "ВсюИсториюРучную" Тогда
					Если ПустоеЗначение(История.ТекущийДокумент()) = 0 Тогда Продолжить КонецЕсли;
				КонецЕсли;
				Результат = ДобавитьРеквизит(ТабРеквизитов, Константа, Приемник, История);
			КонецЦикла;
		Иначе
			Результат = ДобавитьРеквизит(ТабРеквизитов, Константа, Приемник, "#Получить");
		КонецЕсли;
		Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
	
		ЗаписатьОбъектВФайл(Приемник);
		
	КонецЦикла;
	
КонецПроцедуры		//	ВыгрузитьКонстанты()

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьКалендари(Правило, ИдПравила)

	Если (ПустоеЗначение(ФормДатаНач)=1) Или (ПустоеЗначение(ФормДатаКон) = 1) Тогда
		ЗаписатьОшибку("Для выгрузки календарей необходимо выбрать конкретный период!", "!");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Правило.ВыбратьУзел("Значение[@Источник = ""Праздники""]")) = 0 Тогда
		Праздники	=	СоздатьОбъект("Праздники");
		Если Праздники.ВыбратьДаты(ФормДатаНач, ФормДатаКон) = 1 Тогда
			XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
			Приемник				=	XML_DOM.СоздатьУзел(1, "Календарь");
			УстановитьАтрибут(Приемник,	"Вид", 	"Праздники");
			Пока Праздники.СледующаяДата() = 1 Цикл
				День	=	Приемник.СоздатьПодчиненныйЭлемент("День");
				УстановитьАтрибут(День,	"Дата", 	Формат(Праздники.Дата, "ДДДММГГГГ") );
				УстановитьАтрибут(День,	"Значение",	Праздники.Значение);
			КонецЦикла;
			ЗаписатьОбъектВФайл(Приемник);
		КонецЕсли;
	КонецЕсли;    
	
	ВидыКалендарей	=	Правило.ВыбратьУзлы("Значение[@Источник != ""Праздники""]");
	Для Сч = 0 По ВидыКалендарей.КоличествоУзлов() - 1 Цикл
		ЭлКалендарь		=	ВидыКалендарей.ПолучитьУзел(Сч);
		ВидИсточника	=	ЭлКалендарь.ПолучитьАтрибут("Источник");
		ВидПриемника	=	ЭлКалендарь.ПолучитьАтрибут("Приемник");
		
		Календарь		=	СоздатьОбъект("Календарь." + ВидИсточника);
		Если Календарь.ВыбратьДаты(ФормДатаНач, ФормДатаКон) = 1 Тогда
			XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
			Приемник				=	XML_DOM.СоздатьУзел(1, "Календарь");
			УстановитьАтрибут(Приемник,	"Вид", 					ВидПриемника);
			УстановитьАтрибут(Приемник,	"ДатаНачала",			Формат(ФормДатаНач, "ДДДММГГГГ") );
			УстановитьАтрибут(Приемник,	"ДатаОкончания",		Формат(ФормДатаКон, "ДДДММГГГГ") );
			УстановитьАтрибут(Приемник,	"УчитыватьПраздники",	1);
			Пока Календарь.СледующаяДата() = 1 Цикл
				День	=	Приемник.СоздатьПодчиненныйЭлемент("День");
				УстановитьАтрибут(День,	"Дата", 	Формат(Календарь.Дата, "ДДДММГГГГ") );
				УстановитьАтрибут(День,	"Значение",	Календарь.Значение);
			КонецЦикла;
			ЗаписатьОбъектВФайл(Приемник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры		//	ВыгрузитьКалендари()

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила)
	
	//-----------------		Реквизиты	----------------------
	
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
		Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
	КонецЦикла;
	
	//-----------------		Строки	----------------------
	
	Если ТабРеквизитовСтрок.КоличествоСтрок() > 0 Тогда
		    
		СтрокиЕсть		=	0;
		Если ТипЗначенияСтр(Источник) = "Документ" Тогда
			СтрокиЕсть	=	Источник.ВыбратьСтроки();
		КонецЕсли;
		
		Если СтрокиЕсть = 1 Тогда
			Пока Источник.ПолучитьСтроку() = 1 Цикл
				Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
				ТабРеквизитовСтрок.ВыбратьСтроки();
				Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
					Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					Если (Результат = "#Прервать") Или (Результат = "#ПрерватьПереборСтрок") Тогда Прервать КонецЕсли;
				КонецЦикла;
				Если Результат = "#ПрерватьПереборСтрок" Тогда Прервать КонецЕсли;
			КонецЦикла;
		Иначе
			ФлагСтрокиОписаныВПараметрах	=	0;
			Если ТипЗначенияСтр(ПараметрыПравила) = "СписокЗначений" Тогда
				Если ПустоеЗначение(ПараметрыПравила.Получить("#Строка")) = 0 Тогда
					ФлагСтрокиОписаныВПараметрах	=	1;
					НовыйСписок						=	СоздатьОбъект("СписокЗначений");
					Для СчПараметров = 1 По ПараметрыПравила.РазмерСписка() Цикл
						СтрРеквизит		=	"";
						ЗначРеквизита	=	ПараметрыПравила.ПолучитьЗначение(СчПараметров, СтрРеквизит);
						Если СтрРеквизит = "#Строка" Тогда Продолжить КонецЕсли;
						НовыйСписок.ДобавитьЗначение(ЗначРеквизита, СтрРеквизит);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ФлагСтрокиОписаныВПараметрах = 1 Тогда
				Для СчПараметров = 1 По ПараметрыПравила.РазмерСписка() Цикл
					СтрРеквизит		=	"";
					ЗначРеквизита	=	ПараметрыПравила.ПолучитьЗначение(СчПараметров, СтрРеквизит);
					Если СтрРеквизит <> "#Строка" Тогда Продолжить КонецЕсли;
					ОкончательныйСписокПараметров	=	СоздатьОбъект("СписокЗначений");
					НовыйСписок.Выгрузить(ОкончательныйСписокПараметров);
					Для Ссс = 1 По ЗначРеквизита.РазмерСписка() Цикл
						СссСтр	=	"";
						СссЗн	=	ЗначРеквизита.ПолучитьЗначение(Ссс, СссСтр);
						ОкончательныйСписокПараметров.ДобавитьЗначение(СссЗн, СссСтр);
					КонецЦикла;
					Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
					ТабРеквизитовСтрок.ВыбратьСтроки();
					Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
						Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ОкончательныйСписокПараметров);
						Если (Результат = "#Прервать") Или (Результат = "#ПрерватьПереборСтрок") Тогда Прервать КонецЕсли;
					КонецЦикла;
					Если Результат = "#ПрерватьПереборСтрок" Тогда Прервать КонецЕсли;
				КонецЦикла;
			Иначе
				//	для правил вида: "РШД -> РТД" (когда в источнике нет табличной части) - сливаем все в одну строку
				Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
				ТабРеквизитовСтрок.ВыбратьСтроки();
				Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
					Если ТабРеквизитовСтрок.Источник_ТипАтрибута = "РТД" Тогда Продолжить КонецЕсли; // м.б. в документе просто нет строк
					Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	              
	ЗаписатьОбъектВФайл(Приемник);
	
КонецПроцедуры		//	ВыгрузитьДокумент()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")
    
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	
	СтрИсточник		=	"";
	ТипИсточника	=	ТипЗначенияСтр(Источник);

	Если		ТипИсточника	= "Число" 			Тогда	СтрИсточник	=	Строка(Источник);
	ИначеЕсли	ТипИсточника	= "Строка" 			Тогда	СтрИсточник	=	СокрП(Источник);
	ИначеЕсли 	ТипИсточника	= "Дата" 			Тогда	СтрИсточник	=	Формат(Источник, "ДДДММГГГГ");
	
	ИначеЕсли 	ТипИсточника	= "Перечисление"	Тогда	СтрИсточник	=	Источник.Идентификатор();
		
	ИначеЕсли 	ТипИсточника	= "ПланСчетов" 		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "ВидСубконто"		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "Календарь" 		Тогда	СтрИсточник	=	Источник.Вид();
	ИначеЕсли 	ТипИсточника	= "ВидРасчета" 		Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Счет" 			Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Справочник"		Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Наименование"	КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Документ"		Тогда

		//Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "НомерДок"		КонецЕсли;
		//СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
		СтрИсточник	=	СокрЛП(Источник);
	
	Иначе
		
		ЗаписатьОшибку("Неизвестный тип объекта:   " + ТипИсточника);
		
	КонецЕсли;
	          
	Возврат(СтрИсточник);
	
КонецФункции		//	ПолучитьИдОбъектаИсточника()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыгрузитьПоПравилу(Знач Источник="", Правило="", ИдПравила="", УзелСсылки=1, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="", НеСинхронизироватьПоДопПараметрам=0)
	  
	Перем	ТабРеквизитов;
	Перем	ТабРеквизитовПоиска;
	Перем	ТабРеквизитовСтрок;
	
	Если НайтиПравило(Источник, Правило, ИдПравила, ТипПриемника, ВидПриемника) = 0	Тогда	Возврат("")	КонецЕсли;

	
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	Если (ТипПриемника = "") Или (ТипПриемника = "Неопределенный") Тогда
		ТипПриемника		=	гТабКэшПравил.Приемник_Тип;
	КонецЕсли;
	
	
	Преобразование			=	гТабКэшПравил.Преобразование;
	ПравилоПереадресации	=	гТабКэшПравил.ПравилоПереадресации;
	
	Если ПустоеЗначение(Преобразование)			= 0	Тогда	Источник =	ВыполнитьПреобразование(Преобразование, Источник)		КонецЕсли;
	Если ПустоеЗначение(ПравилоПереадресации)	= 0	Тогда	Возврат		Выгрузить(Источник, ПравилоПереадресации, УзелСсылки)	КонецЕсли;
	
	
	Если 		ТипПриемника	=	"Справочник"	Тогда	Тег	=	"ОбъектСправочника";
	ИначеЕсли 	ТипПриемника	=	"Документ"		Тогда	Тег	=	"Документ";
	ИначеЕсли 	ТипПриемника	=	"Константа"		Тогда
		гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
		ВыгрузитьКонстанты(ТабРеквизитов, ИдПравила);
		Возврат("");
	ИначеЕсли 	ПустоеЗначение(ТипПриемника) = 1	Тогда	//	???
		//Тег			=	ТипИсточника;
		Тег				=	"ОбъектСправочника";
		ТипПриемника	=	ТипИсточника;
	Иначе
	    //-------	Найдем идентифицирующее значение объекта ----------------
		
		ИдСинхронизирующегоРеквизита	=	гТабКэшПравил.ИдСинхронизирующегоРеквизита;
		ИдОбъектаИсточника				=	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита);	// на пустое не проверяем специально
		//УзелЗначения					=	Правило.ВыбратьУзел("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		//Если ПустоеЗначение(УзелЗначения) = 0 Тогда Возврат(УзелЗначения.ПолучитьАтрибут("Приемник")) КонецЕсли;

		ВыборкаУзловЗначений			=	Правило.ВыбратьУзлы("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		КолвоУзлов						=	ВыборкаУзловЗначений.КоличествоУзлов();
		УзелНайден						=	0;
		Если		КолвоУзлов = 1 Тогда
			УзелНайден		=	1;
			УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(0);
			//Возврат ВыборкаУзловЗначений.ПолучитьУзел(0).ПолучитьАтрибут("Приемник");
		ИначеЕсли	КолвоУзлов > 1 Тогда	//	в таком случае считаем что условия заданы обязательно
			Для Сч = 0 По КолвоУзлов - 1 Цикл
				УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(Сч);
				Если УсловияВыполняются(УзелЗначения.ВыбратьУзел("Условия"), Источник) = 1 Тогда
					УзелНайден	=	1;
					Прервать;
					//Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УзелНайден = 1 Тогда
			Если ПустоеЗначение(УзелЗначения.ПолучитьАтрибут("ЕстьПроцедура")) = 1 Тогда
				Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
			Иначе
				ИдПравилаЗначения	=	УзелЗначения.ПолучитьАтрибут("Ид");
				Зн					=	ДополнительныеПреобразования("ПравилоЗначения", ИдПравилаЗначения, Источник, УзелЗначения.ПолучитьАтрибут("Приемник"));	// на всякий случай передадим туда значение приемника
				Возврат(Зн);
			КонецЕсли;
		КонецЕсли;
		   
		//	В значениях не нашли, тогда попробуем правила реквизитов посмотреть
		
		гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
		
        ТабРеквизитов.ВыбратьСтроки();
        Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитов, Источник, , , , ПараметрыПравила);		//	обработка методов со стороны приемника
			Если ПустоеЗначение(Результат) = 0 Тогда	Возврат(Результат)	КонецЕсли;
        КонецЦикла;
		                                         
		Если		ПустоеЗначение(Преобразование) = 0		Тогда
			Возврат(Источник);
		ИначеЕсли	ПустоеЗначение(ИдОбъектаИсточника) = 0	Тогда
			ЗаписатьОшибку("Не найдено соответствие для значения источника:  " + ТипИсточника + "." + гТабКэшПравил.Источник_Вид + "." + ИдОбъектаИсточника,  "!");
		КонецЕсли;
		
		Возврат("");
	КонецЕсли;
    
	
	// если объект не виртуальный и источник пустой
	Если	(ПустоеЗначение(гТабКэшПравил.Источник_Тип) = 0)	И
			(ПустоеЗначение(СокрЛП(Источник)) = 1)				И
			(ПустоеЗначение(ПараметрыПравила) = 1)				Тогда	Возврат("") КонецЕсли;
	
	                                                         
	гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
	гТабКэшПравил.ТабРеквизитовПоиска.Выгрузить(ТабРеквизитовПоиска);
	гТабКэшПравил.ТабРеквизитовСтрок.Выгрузить(ТабРеквизитовСтрок);
	
	ПараметрыЗагрузки			=	гТабКэшПравил.ПараметрыЗагрузки;
	
	ЗагрузитьПараметрыЗагрузки("", ПараметрыЗагрузки);
	СтатусУдаления				=	гТабКэшПараметровЗагрузки.СтатусУдаления;
	СпособЗагрузкиПоУмолчанию	=	гТабКэшПараметровЗагрузки.СпособЗагрузки;
	НовыеНеСоздавать			=	гТабКэшПараметровЗагрузки.НовыеНеСоздавать;
	СтатусПроведения			=	гТабКэшПараметровЗагрузки.СтатусПроведения;
	
	
	Если ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, , ПараметрыПравила, НовыеНеСоздавать, НеСинхронизироватьПоДопПараметрам) = 1 Тогда Возврат("") КонецЕсли;
	
	
	Если ПустоеЗначение(Источник) = 0 Тогда
	    Если		ТипИсточника = "Справочник"	Тогда
			Источник.ИспользоватьДату(ФормДатаКон, 1);
		ИначеЕсли	ТипИсточника = "Счет"		Тогда
			Источник.ИспользоватьДату(ФормДатаКон);
		КонецЕсли;
	КонецЕсли;
	
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	Приемник				=	XML_DOM.СоздатьУзел(1, Тег);
	        
	Если (ПустоеЗначение(УзелСсылки) = 0) И (УзелСсылки <> 1) Тогда
		Приемник.ДобавитьПодчиненный(УзелСсылки);
		УзелСсылки	=	Приемник.ВыбратьУзел("Ссылка");
	КонецЕсли;
	
	
	УстановитьАтрибут(Приемник,	"Правило", ИдПравила);
	Если	(Найти("Справочник,Документ", ТипПриемника) > 0) И
			(Найти("Справочник,Документ", ТипИсточника) > 0) Тогда
		УстановитьАтрибут(Приемник,	"ПометитьНаУдаление",	ПометкаУдаления(Источник, СтатусУдаления));
	КонецЕсли;
	
	
	Если 		ТипПриемника	= "Справочник"		Тогда
		
	    Если		ТипИсточника = "Справочник"	Тогда
			УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
		ИначеЕсли	ТипИсточника = "Счет"		Тогда
			УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
		КонецЕсли;
		ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
	ИначеЕсли 	ТипПриемника	= "Документ"		Тогда
		
		Если ТипИсточника = "Документ"	Тогда
			УстановитьАтрибут(Приемник,	"ОтменитьПроведение",	ОтменитьПроведение(Источник, СтатусПроведения));
		КонецЕсли;
		ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
	КонецЕсли;
    
	
	Возврат("");
	
КонецФункции		//	ВыгрузитьПоПравилу()
            
//--------------------------------------------------------------------------------------------------

Функция Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")
	
	Если ПустоеЗначение(ИдПравила) = 0 Тогда
		Возврат	ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
	КонецЕсли;
	
	
	Если (ПустоеЗначение(СокрЛП(Источник)) = 1) И (ТипПриемника <> "Неопределенный") Тогда
		Возврат("");
	КонецЕсли;
	
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	
	Если		ПустоеЗначение(ТипПриемника) = 0	Тогда
		
		Если		Найти("Справочник,Документ,Неопределенный", ТипПриемника) = 0 Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		ИначеЕсли	(ТипПриемника = "Неопределенный") И (Найти("Справочник,Документ,Перечисление,Счет", ТипИсточника) = 0) Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		Иначе
			Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		КонецЕсли;
		
	ИначеЕсли	Найти("Справочник,Документ", ТипИсточника) = 0 Тогда
		
		Возврат	ПолучитьИдОбъектаИсточника(Источник);
		
	Иначе
		
		Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		
	КонецЕсли;
	
КонецФункции		//	Выгрузить()

//--------------------------------------------------------------------------------------------------
                                                                                                     
Функция ВыгрузитьДанныеПоПравилу(Эл_Правило)
    
	ИдПравила				=	Эл_Правило.ПолучитьАтрибут("Ид");
	ИмяПравила				=	Эл_Правило.ПолучитьАтрибут("Имя");
	ПоСсылкам				=	Эл_Правило.ПолучитьАтрибут("ПоСсылкам");
	ЕстьПроцедураВыборки	=	Эл_Правило.ПолучитьАтрибут("ЕстьПроцедураВыборки");
	ИспользоватьВладельцев	=	Эл_Правило.ПолучитьАтрибут("ИспользоватьВладельцев");
    
	
	Если ПустоеЗначение(Число(ПоСсылкам))								=	0	Тогда	Возврат(1)	КонецЕсли;	//	продолжаем перебор правил...
        
	
	Если ПустоеЗначение(ЕстьПроцедураВыборки) = 0 Тогда
	    Результат	=	ДополнительныеПреобразования("ПравилоВыборкиОбъектов", ИдПравила );
		Если Результат = "#Прервать" Тогда
			Предупреждение("Выгрузка данных прекращена согласно инструкции правила: '" + ИмяПравила + "' !");
			Возврат("Возврат");
		КонецЕсли;
	КонецЕсли;
                                                                           
	
	ЗагрузитьПравило(Эл_Правило, ИдПравила);
	
	Источник_Тип		=	гТабКэшПравил.Источник_Тип;
	Источник_Вид		=	гТабКэшПравил.Источник_Вид;
	
	Приемник_Тип		=	гТабКэшПравил.Приемник_Тип;
	Приемник_Вид		=	гТабКэшПравил.Приемник_Вид;
	
	
	
	Если ПустоеЗначение(ЕстьПроцедураВыборки) = 1 Тогда
		Если ПустоеЗначение(Источник_Тип) = 1 Тогда	//	возможно это виртуальный объект...
			ВыгрузитьПоПравилу(, Эл_Правило, ИдПравила);
			Возврат(1);
		КонецЕсли;
	КонецЕсли;
	
	
	//----	Выборки	-------------
	
	Если 			ПустоеЗначение(ЕстьПроцедураВыборки) = 0		Тогда
		
	ИначеЕсли		Источник_Тип	=	"Справочник"				Тогда
		    
		ОбъектВыгрузки = СоздатьОбъект("Справочник." + Источник_Вид);
		Если ПустоеЗначение(ИспользоватьВладельцев) = 1 Тогда
			ОбъектВыгрузки.ВыбратьЭлементы(0);
			Пока ОбъектВыгрузки.ПолучитьЭлемент() = 1 Цикл
				ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийЭлемент(), Эл_Правило, ИдПравила);
			КонецЦикла;
		Иначе
			ИдВладельца			=	Метаданные.Справочник(Источник_Вид).Владелец.Идентификатор;
			Запрос				=	"//Правило[(ОбъектИсточник/@Тип = ""Справочник"")and(ОбъектИсточник/@Вид = """ + ИдВладельца + """)]";
			ПравилаВладельца	=	гПравила.ВыбратьУзлы(Запрос);
			Для Сч = 0 По ПравилаВладельца.КоличествоУзлов() - 1 Цикл
				ПравилоВладельца			=	ПравилаВладельца.ПолучитьУзел(Сч);
				ИдПравилаВладельца			=	ПравилоВладельца.ПолучитьАтрибут("Ид");
				//СписокВыгруженныхВладельцев	=	СписокСписковВыгруженныхОбъектов.Получить(ИдПравилаВладельца);
				НомСтр						=	"";
				Если ТабВыгруженныхОбъектов.НайтиЗначение(ИдПравилаВладельца, НомСтр, "ИдПравила") = 0 Тогда Продолжить КонецЕсли;
				ТабОбъектов	=	ТабВыгруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
				//Если ТипЗначенияСтр(СписокВыгруженныхВладельцев) <> "СписокЗначений" Тогда Продолжить КонецЕсли;
				//Для СчВладельцев = 1 По СписокВыгруженныхВладельцев.РазмерСписка() Цикл
				ТабОбъектов.ВыбратьСтроки();
				Пока ТабОбъектов.ПолучитьСтроку() = 1 Цикл
					//СистПредставлениеВладельца	=	"";
					//СписокВыгруженныхВладельцев.ПолучитьЗначение(СчВладельцев, СистПредставлениеВладельца);
					СистПредставлениеВладельца	=	ТабОбъектов.Объект;
					Если Найти(СистПредставлениеВладельца, "}") > 0 Тогда
						ОтделитьРазделителем(СистПредставлениеВладельца, "}", 1);
					    ЭлементВладелец	=	ЗначениеИзСтрокиВнутр(СистПредставлениеВладельца);
					Иначе
						ЭлементВладелец	=	СистПредставлениеВладельца;
					КонецЕсли;
					ОбъектВыгрузки.ИспользоватьВладельца(ЭлементВладелец);
					ОбъектВыгрузки.ВыбратьЭлементы(1);
					Пока ОбъектВыгрузки.ПолучитьЭлемент() = 1 Цикл
						ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийЭлемент(), Эл_Правило, ИдПравила);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли		Источник_Тип	=	"Документ"					Тогда
		
		ОбъектВыгрузки	=	СоздатьОбъект("Документ." + Источник_Вид);
		ОбъектВыгрузки.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока ОбъектВыгрузки.ПолучитьДокумент() = 1 Цикл
			ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийДокумент(), Эл_Правило, ИдПравила);
		КонецЦикла;
	
	ИначеЕсли		Источник_Тип	=	"Регистр"					Тогда

		
	ИначеЕсли		Источник_Тип	=	"Счет"						Тогда

		ОбъектВыгрузки = СоздатьОбъект("Счет." + Источник_Вид);
		ОбъектВыгрузки.ВыбратьСчета();
		Пока ОбъектВыгрузки.ПолучитьСчет() = 1 Цикл
			ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийСчет(), Эл_Правило, ИдПравила);
		КонецЦикла;

	ИначеЕсли		Источник_Тип	=	"Константа"					Тогда
		
		ВыгрузитьПоПравилу(, Эл_Правило, ИдПравила);
		
	ИначеЕсли		Источник_Тип	=	"Календарь"					Тогда
		
		ВыгрузитьКалендари(Эл_Правило, ИдПравила);
		
	ИначеЕсли		Источник_Тип	=	"Операция"					Тогда
	ИначеЕсли		Источник_Тип	=	"ВидСубконто"				Тогда
		
		Для СчВидовСубконто = 1 По ВидыСубконто.КоличествоЗначений() Цикл
			ВыгрузитьПоПравилу(ВидыСубконто.ЗначениеПоНомеру(СчВидовСубконто), Эл_Правило, ИдПравила);
		КонецЦикла;
		
	ИначеЕсли		Источник_Тип	=	"Перечисление"				Тогда
		                                  
		ВидПеречисления	=	Перечисление.ПолучитьАтрибут(Источник_Вид);
		Для СчЗначенийПеречисления = 1 По ВидПеречисления.КоличествоЗначений() Цикл
			ВыгрузитьПоПравилу(ВидПеречисления.ЗначениеПоНомеру(СчЗначенийПеречисления), Эл_Правило, ИдПравила);
		КонецЦикла;
		
	ИначеЕсли		Источник_Тип	=	"ПланСчетов"				Тогда	
	ИначеЕсли		Источник_Тип	=	"ВидРасчета"				Тогда
	ИначеЕсли		Источник_Тип	=	"ЖурналРасчетов"			Тогда
	КонецЕсли;

	
	//	над этим еще нужно поработать...
	
	//гСписокОбработанныхПравил.ДобавитьЗначение(ИдПравила);
	//Поз	=	гСписокНеобработанныхПравил.НайтиЗначение(ИдПравила);
	//Если ПустоеЗначение(Поз) = 0 Тогда
	//	гСписокНеобработанныхПравил.УдалитьЗначение(Поз);
	//КонецЕсли;
	
	//Если ФормФлЗапоминатьСсылки = 0 Тогда
	//	СписокВыгруженныхОбъектов	=	СписокСписковВыгруженныхОбъектов.Получить(ИдПравила);
	//	Поз							=	СписокСписковВыгруженныхОбъектов.НайтиЗначение(СписокВыгруженныхОбъектов);
	//	Если ПустоеЗначение(Поз) = 0 Тогда
	//		СписокСписковВыгруженныхОбъектов.УдалитьЗначение(Поз);
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Возврат(1);
	
КонецФункции		//	ВыгрузитьДанныеПоПравилу()

//--------------------------------------------------------------------------------------------------

Процедура УстановитьПараметрыПоУмолчанию()

	гТабКэшПараметровЗагрузки.НоваяСтрока();
	гТабКэшПараметровЗагрузки.Ид						=	"ПараметрыПоУмолчанию";
	гТабКэшПараметровЗагрузки.Дата						=	РабочаяДата();
	гТабКэшПараметровЗагрузки.ЗамещатьНайденные			=	1;
	гТабКэшПараметровЗагрузки.СпособЗагрузки			=	"ЗамещатьНеПустыми";
	гТабКэшПараметровЗагрузки.НовыеНеСоздавать			=	0;
	гТабКэшПараметровЗагрузки.СтатусУдаления			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроводок			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроведения			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов	=	"Авто";
	гТабКэшПараметровЗагрузки.ЗагружатьОперации			=	1;
	гТабКэшПараметровЗагрузки.ПравилоОпераций			=	"";
	гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР			=	1;
	
КонецПроцедуры		//	УстановитьПараметрыПоУмолчанию()
                          
//--------------------------------------------------------------------------------------------------




//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//-----------------  Выгрузка налоговых документов	------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------



	  
	  
///////////////////////////////////////////////////////////////////////////////                                                                            
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// НайтиСчетВСтроке(ИсхСтрока, КодСчета)
//
// Параметры:
//  ИсхСтрока - Строка. Строка кодов счетов, раздяленных запятыми.
//  КодСчета  - Строка. Код счета.
//
// Возвращаемое значение:
//  0 - код счета в строке не найден.
//  1 - код счета в строке найден.
//
// Описание:
//  Определяет, указан ли переданный код счета или код группы этого счета
// в переданной строке.
//
Функция НайтиСчетВСтроке(ИсхСтрока, КодСчета)
	
	КодБезПробелов = СтрЗаменить(КодСчета, " ", "");
	
	СтрокаДляПоиска = ИсхСтрока + ",";
	СчетДляПоиска = КодБезПробелов + ",";
	ГруппаДляПоиска = Лев(КодБезПробелов, 2) + ",";
	
	Если Найти(СтрокаДляПоиска, СчетДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода счета.
		Возврат 1;
		
	ИначеЕсли Найти(СтрокаДляПоиска, ГруппаДляПоиска) > 0 Тогда
	    // Найдено точное соответствие кода группы счета.
		Возврат 1;
	
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // НайтиСчетВСтроке()

//******************************************************************************
// Мод(х)
//
// Параметры:
//  х - аргумент, математический модуль которого должна вернуть функция.
//
// Возвращаемое значение:
//  Абсолютная математическая величина переменной х.
//
// Описание:
//  Определяет абсолютную величину числа.
//
Функция Мод(х)
	Если х >= 0 Тогда
		Возврат х;
	Иначе
		Возврат -х;
	КонецЕсли;
КонецФункции // Мод(х)

//******************************************************************************
// ПроверкаДаты(Режим)
//
// Параметры:
//  Режим - 1 при открытии обработки из журнала или меню
//          2 при открытии обработки из форм налоговых документов
// 
// Возвращаемое значение:
//  1 - неправильный период
//  0 - правильный период
//
// Описание:
//  осуществляет контроль правильности ввода граничных дат
//
Функция ПроверкаДаты(Режим = 1)
	
	Если ФормДатаНач > ФормДатаКон Тогда
		Предупреждение("Неправильно задан период!"+РазделительСтрок+
		               "Дата начала больше даты окончания периода.", 60);
		Возврат 1;

	ИначеЕсли Константа.ДатаЗапретаРедактирования > ФормДатаНач Тогда
		Предупреждение("За выбранный период запрещена запись документов!"+РазделительСтрок+
		               "Дата начала меньше даты запрета редактирования документов.", 60);
	    Возврат 1;
		
	ИначеЕсли ФормДатаКон > ПолучитьДатуТА() Тогда
		Предупреждение("Дата точки актуальности итогов меньше даты: "+ФормДатаКон+"!" + РазделительСтрок +
					   "Формирование налоговых документов невозможно!", 60);
		Возврат 1;

	КонецЕсли;
	
	КонДатаДляЗапросов = Мин(КонМесяца(ФормДатаКон), ПолучитьДатуТА());
	
	// проверка наличия обязятельных регламентных документов "Книга покупок" и "Книга продаж"
	
	СписокФирм = СоздатьОбъект("СписокЗначений");
	КнПок = СоздатьОбъект("Документ.КнигаПокупок");
	КнПрод= СоздатьОбъект("Документ.КнигаПродаж");
	Фирмы = СоздатьОбъект("Справочник.Фирмы");

	Фирмы.ВыбратьЭлементы();

	Пока Фирмы.ПолучитьЭлемент() = 1 Цикл
		Если Фирмы.ЮрЛицо = ЮрЛицо Тогда
			СписокФирм.ДобавитьЗначение(Фирмы.ТекущийЭлемент());		
		КонецЕсли;
	КонецЦикла;

	Для т = 1  По СписокФирм.РазмерСписка() Цикл

		ТекФирма = СписокФирм.ПолучитьЗначение(т);

		Найден = 0;

		КнПок.УстановитьФильтр(1,0,0,1,1,1);    // только проведенные
		Если КнПок.ВыбратьДокументы(НачМесяца(КонДатаДляЗапросов),КонДатаДляЗапросов) = 1 Тогда
			Пока КнПок.ПолучитьДокумент() = 1 Цикл
				Если КнПок.Фирма = ТекФирма Тогда
					Найден = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если Найден = 0 Тогда
			Если Вопрос("В периоде: " + ПериодСтр(НачМесяца(КонДатаДляЗапросов),КонДатаДляЗапросов) + РазделительСтрок +
						"для фирмы: " + ТекФирма +" отсутствует регламентный документ ""Книга покупок""! " + РазделительСтрок +
						"суммы НДС в налоговых документах могут быть заполнены неправильно!" + РазделительСтрок +
						"Продолжить ?", "Да+Нет",60) = "Нет" Тогда
			
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	
		Найден = 0;
		
		КнПрод.УстановитьФильтр(1,0,0,1,1,1);    // только проведенные
		Если КнПрод.ВыбратьДокументы(НачМесяца(КонДатаДляЗапросов),КонДатаДляЗапросов) = 1 Тогда
			Пока КнПрод.ПолучитьДокумент() = 1 Цикл
				Если КнПрод.Фирма = ТекФирма Тогда
					Найден = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
			
		Если Найден = 0 Тогда
			Если Вопрос("В периоде: " + ПериодСтр(НачМесяца(КонДатаДляЗапросов),КонДатаДляЗапросов) + РазделительСтрок +
						"для фирмы: " + ТекФирма +" отсутствует регламентный документ ""Книга продаж""! " + РазделительСтрок +
						"суммы НДС в налоговых документах могут быть заполнены неправильно!" + РазделительСтрок +
						"Продолжить ?", "Да+Нет",60) = "Нет" Тогда
			
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат 0;
	
КонецФункции // ПроверкаДаты()

//******************************************************************************
// ПолучитьСписокСторнируемыхДокументов(ВидыДокументов)
//
// Параметры:
//  ВидыДокументов - список содержащий виды документов, подлежащие обработке
// 
// Возвращаемое значение:
//  СписокЗначений - содержащий ссылки на документы, которые сторнировались в течение 
//                   периода формирования отчета
//
// Описание:
//  Формирует список документов которые сторнировались в периоде формирования отчета
//  при необходимости переопределяет значение переменной модуля: ДатаНачалаВыборки
//  используемой для задания периода последующих запросов
//
Функция ПолучитьСписокСторнируемыхДокументов(ВидыДокументов) 

	Перем СписокДокументов;
	
	СписокДокументов = СоздатьОбъект("СписокЗначений");

	// Запрос для выборки документов, которые были отсторнированы документом "Сторно" в текущем налоговом периоде
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ФормДатаНач по ФормДатаКон;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|
	|ТекущийДокумент = Документ.Сторно.СторнируемыйДокумент;
	|
	|ДокументСторно  = Документ.Сторно.ТекущийДокумент;
	|
	|Группировка ТекущийДокумент упорядочить по ТекущийДокумент.ДатаДок;
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос по документам сторнирования не выполнен:
				 |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат СписокДокументов;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		СписокДокументов.ДобавитьЗначение(Запрос.ТекущийДокумент, Строка(Запрос.ДокументСторно.ДатаДок));
	КонецЦикла;

	Если СписокДокументов.РазмерСписка() <> 0 Тогда
		ДатаНачалаВыборки    = СписокДокументов.ПолучитьЗначение(1).ДатаДок;
	Иначе
		ДатаНачалаВыборки    = ФормДатаНач;
	КонецЕсли;

	Возврат СписокДокументов;

КонецФункции

//******************************************************************************
// ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,Режим = "")
//
// Параметры:
//  ВидыДокументов - список содержащий виды документов, подлежащих обработке
//  Режим - определяет режим построения запроса
// 
// Возвращаемое значение:
//  Объект типа "Запрос" - содержащий результирующий список документов
//
// Описание:
//   Возвращает результат выполнения запроса, содержащий список документов по которым происходили
//   движения, по книгам продаж или покупок, которые отражали изменения кредиторской задолженности
//   и следовательно НДС по этим движениям должен отразиться в налоговых документах
//
Функция ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,Режим) 

	// Запрос для выборки сумм НДС с авансов, в случаях необходимости корректировки кредиторской задолженности
	ЗапросПоАвансам = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|РазделительУчета =     Регистр.КнигаПродаж.ДокументОплаты.ЮрЛицо,
	|						Регистр.КнигаПокупок.ДокументОплаты.ЮрЛицо,
	|						Регистр.Покупатели.ТекущийДокумент.ЮрЛицо;
	|";

	Если (Режим = "Расходы денежных средств")
	 или (Режим = "Корректировка долга") Тогда
		ТекстЗапроса = ТекстЗапроса+ "
		|ТекущийДокумент =		Регистр.КнигаПродаж.ДокументОплаты,
		|						Регистр.КнигаПокупок.ДокументОплаты;
		|
		|КредДокумент	 =		Регистр.КнигаПродаж.КредДокумент,
		|						Регистр.КнигаПокупок.КредДокумент;
		|";
	Иначе
		ТекстЗапроса = ТекстЗапроса+ "
		|ТекущийДокумент =		Регистр.КнигаПродаж.ДокументОплаты,
		|						Регистр.КнигаПокупок.ДокументОплаты,
		|						Регистр.Покупатели.ТекущийДокумент;
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса+ "
	|ВидДолга		 =		Регистр.КнигаПродаж.ВидДолга,
	|						Регистр.КнигаПокупок.ВидДолга,
	|						Регистр.Покупатели.ВидДолга;
	|
	|ПокупателиСуммаРуб  =  Регистр.Покупатели.СуммаРуб;
	|
	|КнигаПродажСуммаРуб = 	Регистр.КнигаПродаж.СуммаРуб;
	|КнигаПродажСуммаНДС = 	Регистр.КнигаПродаж.СуммаНДС;
	|		
	|КнигаПокупокСуммаРуб = Регистр.КнигаПокупок.СуммаРуб;
	|КнигаПокупокСуммаНДС = Регистр.КнигаПокупок.СуммаНДС;
	|
	|Группировка ТекущийДокумент;
	|Группировка ВидДолга;
	|";

	Если Режим = "Приходы денежных средств" Тогда
		ТекстЗапроса = ТекстЗапроса+ "
		|Функция АвансУсловный= Расход(ПокупателиСуммаРуб)  Когда ((ВидДолга = Перечисление.ВидыДолга.Аванс) ИЛИ (ВидДолга = Перечисление.ВидыДолга.АвансВал));
		|Функция АвансВсего =	Расход(КнигаПродажСуммаРуб) Когда (КнигаПродажСуммаРуб > 0);
		|Функция АвансНДС =		Расход(КнигаПродажСуммаНДС) Когда (КнигаПродажСуммаНДС > 0);
		|";
	ИначеЕсли Режим = "Расходы денежных средств" Тогда
		ТекстЗапроса = ТекстЗапроса+ "
		|Группировка КредДокумент;
		|
		|Функция АвансВсего =	Расход(КнигаПродажСуммаРуб);
		|Функция АвансНДС =		Расход(КнигаПродажСуммаНДС);
		|Функция АвансВсегоПокупки =	Приход(КнигаПокупокСуммаРуб);
		|Функция АвансНДСПокупки   =	Приход(КнигаПокупокСуммаНДС);
		|";
	Иначе
		// Выбытие имущества или корректировка долга
		ТекстЗапроса = ТекстЗапроса+ "
		|Функция АвансУсловный=         Приход(ПокупателиСуммаРуб)  Когда ((ВидДолга = Перечисление.ВидыДолга.Аванс) ИЛИ (ВидДолга = Перечисление.ВидыДолга.АвансВал));
		|Функция АвансВсего =	Расход(КнигаПродажСуммаРуб);
		|Функция АвансНДС =		Расход(КнигаПродажСуммаНДС);
		|Функция АвансВсегоПокупки =	Приход(КнигаПокупокСуммаРуб);
		|Функция АвансНДСПокупки   =	Приход(КнигаПокупокСуммаНДС);
		|";
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса + "Условие(РазделительУчета = ЮрЛицо);";

	Если ЗапросПоАвансам.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос по авансам не выполнен:
				 |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат ЗапросПоАвансам;
	КонецЕсли;

	Возврат ЗапросПоАвансам;

КонецФункции  //ЗапросДляКоррекцииНДСсКредиторскойЗадолженности()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ПОСТУПЛЕНИЯ ДЕНЕЖНЫХ СРЕДСТВ
//
//*****************************************************************************
// ДобавитьОперациюПоступленияДенежныхСредств(ТекущийДокумент,ВидДолга,КодОперации,ДатаНалогДок,ЧисловыеПараметры)
//  Параметры:
//   ТекущийДокумент - оперативный документ на основании которого формируется налоговый
//                     документ
//   ВидДолга        - измерение регистра "Покупатели" по которому происходит изменение
//					   задолженности
//   КодОперации     - параметр движения оперативных регистров, используется для анализа
//   ДатаНалогДок    - дата налогового документа
//   ЧисловыеПараметры - список значений содержащий:
//	   Сторно   - знак сумм в заполняемом налоговом документе (+1/-1)
//	   СуммаРуб - сумма поступаемых денежных средств подлежащая отражению в налоговом учетк
//     АвансНДС - сумма для изменения НДС по кредиторской задолженности у контрагента
//
//  Описание:
//   Зполняет конкретными значениями строку таблицы операций поступления 
//   денежных средств за период, указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ДобавитьОперациюПоступленияДенежныхСредств(ТекущийДокумент,ВидДолга,КодОперации,ДатаНалогДок,ЧисловыеПараметры)

	ТабОпер.НоваяСтрока();
	ТабОпер.Контрагент						= ТекущийДокумент.Контрагент;
	ТабОпер.Договор							= ТекущийДокумент.Договор;
	
	Если (ВидДолга = глВД.Аванс) ИЛИ (ВидДолга = глВД.АвансВал) Тогда
		УсловиеИлиВидПоступления			= УсловияИлиВидыПоступленийАванс;
		
	ИначеЕсли ПустоеЗначение(ВидДолга) = 0 Тогда
		УсловиеИлиВидПоступления			= УсловияИлиВидыПоступленийОплата;
		
	Иначе
		Если (КодОперации = глКО.Прочее)
		 или (КодОперации = глКО.ПрочееВал) Тогда
			Если 0 < Найти("50.1, 50.2, 50.11, 51, 52, 55.1, 55.4, 55.11, 55.44, "+
			               "57.1, 57.11, 71.1, 71.11, 75.1, 75.2, 75.3, ", ТекущийДокумент.Счет+",") Тогда
                // отменяем ввод строки
				Возврат;
			КонецЕсли;

			Если (Найти(ТекущийДокумент.Счет.Код,"76") <> 0)
			 или (Найти(ТекущийДокумент.Счет.Код,"60") <> 0)
			 или (Найти(ТекущийДокумент.Счет.Код,"66") <> 0) 
			 или (Найти(ТекущийДокумент.Счет.Код,"67") <> 0) Тогда
				УсловиеИлиВидПоступления 			= УсловияИлиВидыПоступленийПрочиеПоступленияСвязанныеСВозникновениемЗадолженности;
				ТабОпер.Контрагент					= ТекущийДокумент.Субконто1;
				ТабОпер.Договор						= ТекущийДокумент.Субконто2;
			 	
			Иначе
				УсловиеИлиВидПоступления			= УсловияИлиВидыПоступленийПрочиеПоступления;

			КонецЕсли;

		ИначеЕсли (КодОперации = глКО.ВозвратОплатыОтПоставщика)
		 	  или (КодОперации = глКО.ВозвратОплатыОтПоставщикаВал) Тогда
			УсловиеИлиВидПоступления			= УсловияИлиВидыПоступленийПолучениеСредствПереданныхРанееНаУсловияхВозврата;

		КонецЕсли;
	КонецЕсли;
	
	Сторно   = Число(ЧисловыеПараметры.Получить("Сторно"));
	СуммаРуб = Число(ЧисловыеПараметры.Получить("СуммаРуб"));
	АвансНДС = Число(ЧисловыеПараметры.Получить("АвансНДС"));

	ТабОпер.День							= ДатаНалогДок;
	ТабОпер.Документ						= ТекущийДокумент;
	ТабОпер.НаименованиеОперации			= глНазваниеДокументаВЖурнале(ТекущийДокумент);
	ТабОпер.УсловиеИлиВидПоступления		= УсловиеИлиВидПоступления;
	ТабОпер.Сумма							= Сторно * СуммаРуб;
	ТабОпер.НДС								= Сторно * АвансНДС;
	
	Если ТекущийДокумент.Валюта <> глРубли Тогда
		ТабОпер.ВалСумма					= Сторно * глПересчет(СуммаРуб, глРубли, 1, ТекущийДокумент.Валюта, ТекущийДокумент.Курс);
		ТабОпер.Валюта						= ТекущийДокумент.Валюта;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОперациюПоступленияДенежныхСредств()

//*****************************************************************************
// ПолучитьОперацииПоступленияДенежныхСредств()
//
// Описание:
//  Формирует таблицу операций поступления денежных средств за период,
// указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ПолучитьОперацииПоступленияДенежныхСредств()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("УсловиеИлиВидПоступления");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("ВалСумма","Число");
	ТабОпер.НоваяКолонка("Валюта","Справочник.Валюты");
	
	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ПКО");
	ВидыДокументов.ДобавитьЗначение("ОтчетККМ");
	ВидыДокументов.ДобавитьЗначение("СтрокаВыпискиПриход");

	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыДокументов);
	
	ЗапросПоАвансам = ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,"Приходы денежных средств");

	Запрос = СоздатьОбъект("Запрос");
	
	// Запрос для выборки операций поступления денег
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.Касса.ТекущийДокумент,
	|						Регистр.Банк.ТекущийДокумент,
	|						Регистр.Покупатели.ТекущийДокумент;
	|						
	|ВидДолга =				Регистр.Покупатели.ВидДолга;
	|						
	|БанкКассаСуммаРуб =	Регистр.Касса.СуммаРуб,
	|						Регистр.Банк.СуммаРуб;
	|						
	|ПокупателиСуммаРуб = 	Регистр.Покупатели.СуммаРуб;
	|
	|КодОперации =			Регистр.Касса.КодОперации,
	|						Регистр.Банк.КодОперации,
	|						Регистр.Покупатели.КодОперации;
	|
	|Условие((ТекущийДокумент.Вид() = ""ПКО"") 
	|    ИЛИ (ТекущийДокумент.Вид() = ""ОтчетККМ"") 
	|    ИЛИ (ТекущийДокумент.Вид() = ""СтрокаВыпискиПриход""));
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Группировка ТекущийДокумент;
	|Группировка ВидДолга;
	|
	|Функция СуммаРуб =		Приход(БанкКассаСуммаРуб)	Когда((КодОперации = глКО.ВозвратОплатыОтПоставщика)
	|												  	  ИЛИ (КодОперации = глКО.ВозвратОплатыОтПоставщикаВал)
	|												  	  ИЛИ (КодОперации = глКО.Прочее)
	|												  	  ИЛИ (КодОперации = глКО.ПрочееВал));
	|
	|Функция ДолгРуб =		Расход(ПокупателиСуммаРуб)	Когда((КодОперации <> глКО.РозничнаяПродажаЕНВД)
	|														И (КодОперации <> глКО.РозничнаяВыручкаЕНВД));
	|";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		ТекущийДокумент = Запрос.ТекущийДокумент;

		Пока Запрос.Группировка(2) = 1 Цикл

			Если ЗапросПоАвансам.Получить(ТекущийДокумент,Запрос.ВидДолга) = 1 Тогда
				АвансНДС	= ЗапросПоАвансам.АвансНДС;

				// Анализируем на наличие условного аванса
				УсловныйАванс 	= ЗапросПоАвансам.АвансУсловный;
				Если (АвансНДС = 0)И(УсловныйАванс <> 0) Тогда
					// Был сделан условный аванс, т.е. аванс который был закрыт в том же месяце 
					// и на него не выставлялась счет - фактура и соответственно не делалось записей в КП
					// для таких авансов определяем НДС по расчетной ставке 
					АвансНДС = Окр(УсловныйАванс * ГлВыделяемыйНДС(Перечисление.СтавкиНДС.НДС20_120),2);
				КонецЕсли;

			Иначе
				АвансНДС	= 0;
			КонецЕсли;        

			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(Макс(Запрос.СуммаРуб,Запрос.ДолгРуб),"СуммаРуб");
			ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
			
			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ЧисловыеПараметры.Установить("Сторно",1);
				
				ДобавитьОперациюПоступленияДенежныхСредств(ТекущийДокумент,Запрос.ВидДолга,Запрос.КодОперации,ТекущийДокумент.ДатаДок,ЧисловыеПараметры);

			КонецЕсли;

			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.Установить("Сторно",-1);
				
				ДобавитьОперациюПоступленияДенежныхСредств(ТекущийДокумент,Запрос.ВидДолга,Запрос.КодОперации,ДатаНалогДок,ЧисловыеПараметры);

			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

	ТабОпер.Свернуть("День,Документ,НаименованиеОперации,УсловиеИлиВидПоступления,Контрагент,Договор,"+
					 "Валюта", "Сумма,НДС,ВалСумма");
	
КонецПроцедуры // ПолучитьОперацииПоступленияДенежныхСредств()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ РАСХОДА ДЕНЕЖНЫХ СРЕДСТВ
//
//*****************************************************************************
// ДобавитьОперациюРасходаДенежныхСредств(ТекущийДокумент,КредДокумент,ВидДолга,Договор,ДатаНалогДок,ЧисловыеПараметры)
//  Параметры:
//   ТекущийДокумент - оперативный документ, на основании которого формируется налоговый документ
//   КредДокумент    - документ, который оплачивается операцией расхода денежных средств
//   ВидДолга        - измерение регистра "Покупатели" по которому происходит изменение задолженности
//   Договор         - договор по которому происходит расход денег
//   ДатаНалогДок    - дата налогового документа
//   ЧисловыеПараметры - список значений содержащий:
//	   Сторно     - знак сумм в заполняемом налоговом документе (+1/-1)
//	   СуммаРуб   - сумма расходуемых денежных средств, подлежащая отражению в налоговом учете для случаев,
//					когда расход денег не влияет на состояние взаиморасчетов с контрагентами
//     ПокупкиРуб - сумма расходуемых денежных средств, подлежащая отражению в налоговом учете для случаев,
//					когда расход денег влияет на состояние взаиморасчетов с контрагентами
//     ПокупкиНДС - сумма НДС, подлежащая отражению в налоговом учете для случаев,
//					когда расход денег влияет на корректировку кредиторской задолженности
//     ПродажиРуб - сумма расходуемых денежных средств, подлежащая отражению в налоговом учете для случаев,
//					когда происходит возврат поставщику денежных средств
//     ПродажиНДС - сумма НДС, подлежащая отражению в налоговом учете для случаев,
//					когда расход денег влияет на корректировку кредиторской задолженности
//
//  Описание:
//   Зполняет конкретными значениями строку таблицы операций поступления 
//   денежных средств за период, указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ДобавитьОперациюРасходаДенежныхСредств(ТекущийДокумент,КредДокумент,ВидДолга,Договор,ДатаНалогДок,ЧисловыеПараметры)

	Сторно     = Число(ЧисловыеПараметры.Получить("Сторно"));
	СуммаРуб   = Число(ЧисловыеПараметры.Получить("СуммаРуб"));
	ПокупкиРуб = Число(ЧисловыеПараметры.Получить("ПокупкиРуб"));
	ПокупкиНДС = Число(ЧисловыеПараметры.Получить("ПокупкиНДС"));
	ПродажиРуб = Число(ЧисловыеПараметры.Получить("ПродажиРуб"));
	ПродажиНДС = Число(ЧисловыеПараметры.Получить("ПродажиНДС"));

	Если (ТекущийДокумент.Вид() = "СтрокаАвансОтчетаТМЦ")
	 или (ТекущийДокумент.Вид() = "СтрокаАвансОтчетаПрочее") Тогда
		СуммаРубАвансовые = СуммаРуб;
		ПокупкиНДСАвансовые	= ЧисловыеПараметры.Получить("ПокупкиНДС");
		СуммаРуб = 0;
	КонецЕсли;
	
	Если ПокупкиРуб <> 0 Тогда
		ТабОпер.НоваяСтрока();
		
		Если (ВидДолга = глВД.Аванс) ИЛИ (ВидДолга = глВД.АвансВал) Тогда
			ТабОпер.УсловиеИлиВидРасхода	= УсловияИлиВидыРасходовАванс;
		Иначе
			ТабОпер.УсловиеИлиВидРасхода	= УсловияИлиВидыРасходовОплата;
		КонецЕсли;
		
		Если (глЕстьРеквизитШапки("Контрагент",КредДокумент.Вид()) = 1)
		   и (глЕстьРеквизитШапки("Договор",   КредДокумент.Вид()) = 1) Тогда
			ТабОпер.Контрагент				= КредДокумент.Контрагент;
			ТабОпер.Договор					= КредДокумент.Договор;

		ИначеЕсли ПустоеЗначение(Договор) = 0 Тогда
			ТабОпер.Контрагент				= Договор.Владелец;
			ТабОпер.Договор					= Договор;
			
		КонецЕсли;

		ТабОпер.Сумма						= Сторно * ПокупкиРуб;
		ТабОпер.НДС							= Сторно * ПокупкиНДС;
		
	ИначеЕсли ПродажиРуб <> 0 Тогда
		ТабОпер.НоваяСтрока();
		
		ТабОпер.УсловиеИлиВидРасхода		= УсловияИлиВидыРасходовВозвратАвансов;

		Если (глЕстьРеквизитШапки("Контрагент",КредДокумент.Вид()) = 1)
		   и (глЕстьРеквизитШапки("Договор",   КредДокумент.Вид()) = 1) Тогда
			ТабОпер.Контрагент					= КредДокумент.Контрагент;
			ТабОпер.Договор						= КредДокумент.Договор;

		ИначеЕсли ПустоеЗначение(Договор) = 0 Тогда
			ТабОпер.Контрагент					= Договор.Владелец;
			ТабОпер.Договор						= Договор;
			
		КонецЕсли;

		ТабОпер.Сумма						= Сторно * ПродажиРуб;
		ТабОпер.НДС							= Сторно * (-ПродажиНДС); // НДС по книге продаж сторнируется
		
	ИначеЕсли (СуммаРуб <> 0) Тогда
		// Для всех случаев расходов денежных средств, когда нет определенного контрагента (кроме авансовых отчетов)
		Если 0 < Найти("50.1, 50.2, 50.11, 51, 52, 55.2, 55.4, 55.44, "+
		               "57.1, 57.11, 70, 71.1, 71.11, 75.1, 75.2, 75.3, ", ТекущийДокумент.Счет+",") Тогда
			Возврат;
		КонецЕсли;
	
		ТабОпер.НоваяСтрока();
		
		КодКоррСчета = СокрЛП(ТекущийДокумент.Счет.Код);

		Если (КодКоррСчета = "58.3") Тогда
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовПредоставлениеСредствНаУсловияхВозврата;

		ИначеЕсли КодКоррСчета = "76.1.2" Тогда
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованию;
			ТабОпер.Контрагент= ТекущийДокумент.Субконто1;
			ТабОпер.Договор	  = ТекущийДокумент.Субконто2;
			ТабОпер.Сотрудник = ТекущийДокумент.Субконто3;

		ИначеЕсли КодКоррСчета = "76.1.3" Тогда
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаОплатуМедицинскихРасходов;
			ТабОпер.Контрагент= ТекущийДокумент.Субконто1;
			ТабОпер.Договор	  = ТекущийДокумент.Субконто2;
			ТабОпер.Сотрудник = ТекущийДокумент.Субконто3;

		ИначеЕсли КодКоррСчета = "76.1.4" Тогда
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаСлучайСмерти;
			ТабОпер.Контрагент= ТекущийДокумент.Субконто1;
			ТабОпер.Договор	  = ТекущийДокумент.Субконто2;
			ТабОпер.Сотрудник = ТекущийДокумент.Субконто3;

		ИначеЕсли (Найти(КодКоррСчета,"76") <> 0)
		 	  или (Найти(КодКоррСчета,"60") <> 0)
		 	  или (Найти(КодКоррСчета,"62") <> 0)
		 	  или (Найти(КодКоррСчета,"66") <> 0) 
		 	  или (Найти(КодКоррСчета,"67") <> 0) Тогда
			ТабОпер.Контрагент			 = ТекущийДокумент.Субконто1;
			ТабОпер.Договор				 = ТекущийДокумент.Субконто2;
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовПрочиеРасходыСвязанныеСПогашениемЗадолженности;
		 	
		ИначеЕсли (Лев(КодКоррСчета, 2) = "68") или (Лев(КодКоррСчета, 2) = "69") Тогда
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовВзносыВкладыОбязательныеПлатежи;

		Иначе
			ТабОпер.УсловиеИлиВидРасхода = УсловияИлиВидыРасходовПрочиеРасходы;

		КонецЕсли;

		ТабОпер.Сумма						= Сторно * СуммаРуб;
		
	ИначеЕсли (СуммаРубАвансовые <> 0) или (ПокупкиНДСАвансовые <> 0) Тогда
		// Для строк авансового отчета, кроме оплаты поставщику

		ТабОпер.НоваяСтрока();
		
		ТабОпер.УсловиеИлиВидРасхода		= УсловияИлиВидыРасходовПрочиеРасходы;
		ТабОпер.Сумма						= Сторно * СуммаРубАвансовые;
		ТабОпер.НДС							= Сторно * ПокупкиНДСАвансовые;

	Иначе
		Возврат;
	КонецЕсли;
	
	ТабОпер.День							= ДатаНалогДок;
	ТабОпер.Документ						= ТекущийДокумент;
	ТабОпер.НаименованиеОперации			= глНазваниеДокументаВЖурнале(ТекущийДокумент);
	
	Если ТекущийДокумент.Валюта <> глРубли Тогда
		ТабОпер.ВалСумма					= Сторно * глПересчет(ТабОпер.Сумма, глРубли, 1, ТекущийДокумент.Валюта, ТекущийДокумент.Курс);
		ТабОпер.Валюта						= ТекущийДокумент.Валюта;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОперациюРасходаДенежныхСредств()

//*****************************************************************************
// ПолучитьОперацииРасходаДенежныхСредств()
//
// Описание:
//  Формирует таблицу операций расхода денежных средств за период,
// указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ПолучитьОперацииРасходаДенежныхСредств()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("УсловиеИлиВидРасхода");
	ТабОпер.НоваяКолонка("Контрагент","Справочник.Контрагенты");
	ТабОпер.НоваяКолонка("Договор","Справочник.Договоры");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("ВалСумма","Число");
	ТабОпер.НоваяКолонка("Валюта","Справочник.Валюты");
	ТабОпер.НоваяКолонка("СтатьяРасходовНаСтрахование","Справочник");
	ТабОпер.НоваяКолонка("Сотрудник","Справочник.ФизЛица");

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("РКО");
	ВидыДокументов.ДобавитьЗначение("СтрокаВыпискиРасход");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаТМЦ");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаПрочее");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаОплата");

	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыДокументов);
	
	ЗапросПоАвансам = ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,"Расходы денежных средств");

	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.Касса.ТекущийДокумент,
	|						Регистр.Банк.ТекущийДокумент,
	|						Регистр.ПодотчетныеЛица.ТекущийДокумент,
	|						Регистр.Поставщики.ТекущийДокумент,
	|						Регистр.Покупатели.ТекущийДокумент;
	|
	|Договор =              Регистр.Поставщики.Договор,
	|						Регистр.Покупатели.Договор;
	|
	|ВидДолга =				Регистр.Поставщики.ВидДолга,
	|						Регистр.Покупатели.ВидДолга;
	|
	|КредДокумент = 		Регистр.Поставщики.КредДокумент,
	|						Регистр.Покупатели.КредДокумент,
	|						Регистр.ПодотчетныеЛица.КредДокумент;
	|						
	|БанкКассаСуммаРуб =	Регистр.Касса.СуммаРуб,
	|						Регистр.ПодотчетныеЛица.СуммаРуб,
	|						Регистр.Банк.СуммаРуб;
	|						
	|ПоставщикиСуммаРуб = 	Регистр.Поставщики.СуммаРуб;
	|ПокупателиСуммаРуб =	Регистр.Покупатели.СуммаРуб;
	|
	|КодОперации =			Регистр.Касса.КодОперации,
	|						Регистр.Банк.КодОперации,
	|						Регистр.ПодотчетныеЛица.КодОперации,
	|						Регистр.Поставщики.КодОперации,
	|						Регистр.Покупатели.КодОперации;
	|
	|Условие((ТекущийДокумент.Вид() = ""РКО"")
	|	 ИЛИ (ТекущийДокумент.Вид() = ""СтрокаВыпискиРасход"")
	| 	 ИЛИ (ТекущийДокумент.Вид() = ""СтрокаАвансОтчетаТМЦ"")
	|	 ИЛИ (ТекущийДокумент.Вид() = ""СтрокаАвансОтчетаПрочее"")
	|    ИЛИ (ТекущийДокумент.Вид() = ""СтрокаАвансОтчетаОплата""));
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Группировка ТекущийДокумент;
	|Группировка ВидДолга;
	|Группировка КредДокумент;
	|
	|Функция СуммаРуб =		Расход(БанкКассаСуммаРуб) Когда(((КодОперации = глКО.Прочее) 
	|												 	 ИЛИ (КодОперации = глКО.ПрочееВал)
	|													 ИЛИ (КодОперации = глКО.АвансовыйОтчет)
	|													 ИЛИ (КодОперации = глКО.АвансовыйОтчетВал))
	|													   И (ТекущийДокумент.Вид() <> ""СтрокаАвансОтчетаОплата""));
	|Функция ПокупкиРуб =	Приход(ПоставщикиСуммаРуб);
	|Функция ПродажиРуб =	Приход(ПокупателиСуммаРуб);
	|";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
				 |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		ТекущийДокумент = Запрос.ТекущийДокумент;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			Пока Запрос.Группировка(3) = 1 Цикл

				Если ЗапросПоАвансам.Получить(ТекущийДокумент,Запрос.ВидДолга,Запрос.КредДокумент) = 1 Тогда
					АвансНДС		= ЗапросПоАвансам.АвансНДС;
					АвансНДСПокупки	= ЗапросПоАвансам.АвансНДСПокупки;
				Иначе
					АвансНДС		= 0;
					АвансНДСПокупки	= 0;
				КонецЕсли;        
	
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.СуммаРуб,"СуммаРуб");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПокупкиРуб,"ПокупкиРуб");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДСПокупки,"ПокупкиНДС");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПродажиРуб,"ПродажиРуб");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"ПродажиНДС");

				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ЧисловыеПараметры.Установить("Сторно",1);
					
					ДобавитьОперациюРасходаДенежныхСредств(ТекущийДокумент,Запрос.КредДокумент,Запрос.ВидДолга,Запрос.Договор,ТекущийДокумент.ДатаДок,ЧисловыеПараметры)
	
				КонецЕсли;
	
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.Установить("Сторно",-1);
					
					ДобавитьОперациюРасходаДенежныхСредств(ТекущийДокумент,Запрос.КредДокумент,Запрос.ВидДолга,Запрос.Договор,ДатаНалогДок,ЧисловыеПараметры)
	
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;

	ТабОпер.Свернуть("День,Документ,НаименованиеОперации,УсловиеИлиВидРасхода,Контрагент,Договор,"+
					 "Валюта,СтатьяРасходовНаСтрахование,Сотрудник", "Сумма,НДС,ВалСумма");
	
КонецПроцедуры // ПолучитьОперацииРасходаДенежныхСредств()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ПРИОБРЕТЕНИЯ ИМУЩЕСТВА, РАБОТ, УСЛУГ, ПРАВ
//
//******************************************************************************
//ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,СтатусПартии,КодОперации,Объект,ДатаНалогДок,НомерСтроки,ЧисловыеПараметры)
//
// Параметры:
//  ТекущийДокумент		- Оперативный документ, на основании которого происходит формирование налогового документа.
//  СтатусПартии		- Для поступления ТМЦ - статус партии на которую занесены остатки, для прочих поступлений
//						  не определен
//  КодОперации         - Код операции, отраженной в оперативном учете
//  Объект				- Объект налогового учета - соответствует номенклатуре
//  ДатаНалогДок		- дата за которую нужно ввести налоговый документ
//  НомерСтроки         - номер строки оперативного документа, которая отражается в налоговом учете
//
//  ЧисловыеПараметры	- список значений:
//    Сторно	 		- знак сумм налогового документа (+1/-1)
//    Количество 		- подлежащее оприходованию
//    ЦенаБезНДС 		- цена ТМЦ или услуги без налогов
//    АвансВсего 		- сумма авансов, которые были уплачены поставщику за эту поставку
//    СуммаНДС 			- сумма НДС
//
// Описание:
//  Добавляет операцию приобретения имущества на основании данных запроса по регистрам.
//
Процедура ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,СтатусПартии,КодОперации,Объект,ДатаНалогДок,НомерСтроки="",ЧисловыеПараметры)
	
	ТабОпер.НоваяСтрока();
	
	ТабОпер.День					= ДатаНалогДок;
	ТабОпер.Документ				= ТекущийДокумент;
	
	Если ТипЗначенияСтр(СтатусПартии) = "Перечисление" Тогда
		Если      Лев(СтатусПартии.Идентификатор(), 1) = "Т" Тогда
			ТабОпер.ВидРасхода			= ВидыРасходовПриобретениеТоваров;
			ТабОпер.Объект				= Объект;
			
		ИначеЕсли Лев(СтатусПартии.Идентификатор(), 1) = "М" Тогда
			ТабОпер.ВидРасхода			= ВидыРасходовПриобретениеМатериалов;
			ТабОпер.Объект				= Объект;
			
		КонецЕсли;

	Иначе	
		Если (ТекущийДокумент.Вид() = "ПоступлениеПрочее") ИЛИ
			 (ТекущийДокумент.Вид() = "СтрокаАвансОтчетаПрочее") Тогда
				  	
			Если НайтиСчетВСтроке("07,08.1,08.2,08.3,08.4", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода		= ВидыРасходовПриобретениеОсновныхСредств;
				ТабОпер.Объект			= ТекущийДокумент.Субконто1;
				
			ИначеЕсли НайтиСчетВСтроке("08.5", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода		= ВидыРасходовПриобретениеНематериальныхАктивов;
				ТабОпер.Объект			= ТекущийДокумент.Субконто1;
				
			ИначеЕсли НайтиСчетВСтроке("15.1", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовПриобретениеМатериалов;
				
			ИначеЕсли НайтиСчетВСтроке("15.2", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовПриобретениеТоваров;
				
			ИначеЕсли НайтиСчетВСтроке("15.3", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовПриобретениеОсновныхСредств;
				
			ИначеЕсли (НайтиСчетВСтроке("44.1.2", ТекущийДокумент.Счет) = 1)
			      или (НайтиСчетВСтроке("20", ТекущийДокумент.Счет) = 1)
				  или (НайтиСчетВСтроке("25", ТекущийДокумент.Счет) = 1)
				  или (НайтиСчетВСтроке("26", ТекущийДокумент.Счет) = 1) Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовКосвенныеРасходы;
				ТабОпер.ЭлементРасхода = "МатериальныеРасходы";                      

			ИначеЕсли НайтиСчетВСтроке("44.1.2", ТекущийДокумент.Счет) = 1 Тогда 
				ТабОпер.ВидРасхода 		= ВидыРасходовНеПринимаемые;
		
			ИначеЕсли НайтиСчетВСтроке("44.1.3", ТекущийДокумент.Счет) = 1 Тогда 
				ТабОпер.ВидРасхода 		= ВидыРасходовНеПринимаемые;
		
			ИначеЕсли НайтиСчетВСтроке("58.2", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовПриобретениеЦенныхБумаг;
				ТабОпер.Объект = ТекущийДокумент.Субконто2
				
			ИначеЕсли НайтиСчетВСтроке("58.5", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовПриобретениеПрав;
				ТабОпер.Объект = ТекущийДокумент.Субконто2
				
			ИначеЕсли НайтиСчетВСтроке("97", ТекущийДокумент.Счет) = 1 Тогда
				ТабОпер.ВидРасхода 		= ВидыРасходовРасходыБудущихПериодов;
				ТабОпер.Объект = ТекущийДокумент.Субконто1;
			КонецЕсли;
					
		КонецЕсли;
	КонецЕсли;

	ТабОпер.НаименованиеОперации	= глНазваниеДокументаВЖурнале(ТекущийДокумент);
	ТабОпер.ДатаПризнания			= ТекущийДокумент.ДатаДок;
	ТабОпер.ОснованиеПризнания		= "" + ТекущийДокумент+" стр. "+НомерСтроки;
	
	ДругиеУсловия = 0;
	
	Если (КодОперации = глКО.Закупка) ИЛИ
		 (КодОперации = глКО.ЗакупкаРозница) ИЛИ
	     (КодОперации = глКО.ДополнительныеРасходы) ИЛИ
		 (КодОперации = глКО.ВозвратОтПокупателя) Тогда
		 	
		ТабОпер.Контрагент		= ТекущийДокумент.Контрагент;
		ТабОпер.Договор			= ТекущийДокумент.Договор;
		
	ИначеЕсли КодОперации = глКО.ТаможенныеПлатежи Тогда
		ТабОпер.Контрагент		= ТекущийДокумент.Таможня;
		// переопределяем вид расхода
		ТабОпер.ВидРасхода 		= ВидыРасходовКосвенныеРасходы;
		ТабОпер.Объект	 		= "";

	ИначеЕсли (ПустоеЗначение(ТабОпер.Контрагент) = 1)
			и (ПустоеЗначение(ТабОпер.Договор) = 1) Тогда
		ДругиеУсловия = 1;
	КонецЕсли;

	// Определение ЧИСЛОВЫХ ЗНАЧЕНИЙ налогового документа

	Количество   = Число(ЧисловыеПараметры.Получить("Количество"));
	ЦенаБезНДС   = Число(ЧисловыеПараметры.Получить("ЦенаБезНДС"));
	СуммаВсего   = Число(ЧисловыеПараметры.Получить("СуммаВсего"));
	АвансВсего   = Число(ЧисловыеПараметры.Получить("АвансВсего"));
	СуммаНДС  	 = Число(ЧисловыеПараметры.Получить("СуммаНДС"));
	Сторно       = Число(ЧисловыеПараметры.Получить("Сторно"));

 	Если (Количество = 0) Тогда
		Количество = 1;
	КонецЕсли;

	// Значения переменных СуммаВсего и АвансВсего предполагаются всегда положительными	

	Если      (СуммаВсего <= АвансВсего) И (ДругиеУсловия = 0) Тогда
		// ВСчетРанееВыданныхАвансов - полностью
		ТабОпер.УсловиеПолучения	= УсловияПолученияИмуществаВСчетРанееВыданныхАвансов;

		ТабОпер.Количество			= Сторно * Количество;
		ТабОпер.Сумма				= Сторно * (Количество * ЦенаБезНДС);
		ТабОпер.Задолженность		= Сторно * СуммаВсего;
		ТабОпер.НДС					= 0;
		
		АвансВсего					= АвансВсего - СуммаВсего;
	
	ИначеЕсли (0 < АвансВсего) И (АвансВсего < СуммаВсего) И (ДругиеУсловия = 0) Тогда
		// ВСчетРанееВыданныхАвансов - частично
		Коэффициент					= АвансВсего / СуммаВсего;
		ТабОпер.УсловиеПолучения	= УсловияПолученияИмуществаВСчетРанееВыданныхАвансов;

		ТабОпер.Количество			= Сторно * Количество * Коэффициент;
		ТабОпер.Сумма				= Сторно * (Количество * ЦенаБезНДС) * Коэффициент;
		ТабОпер.Задолженность		= Сторно * АвансВсего;
		ТабОпер.НДС					= 0;
		
		// СПоследующейОплатой - частично
		Коэффициент					= 1 - Коэффициент;

		ТабОпер.НоваяСтрока();
		// Копируем значения из предыдущей строки
		ТабОпер.День					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"День");
		ТабОпер.Документ				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Документ");
		ТабОпер.ВидРасхода				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ВидРасхода");
		ТабОпер.ЭлементРасхода			= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ЭлементРасхода");
		ТабОпер.Объект					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Объект");
		ТабОпер.НаименованиеОперации	= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"НаименованиеОперации");
		ТабОпер.ОснованиеПризнания		= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ОснованиеПризнания");
		ТабОпер.ДатаПризнания			= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ДатаПризнания");
		ТабОпер.Контрагент				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Контрагент");
		ТабОпер.Договор					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Договор");
		ТабОпер.ВидРасхода				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ВидРасхода");

		ТабОпер.УсловиеПолучения	= УсловияПолученияИмуществаСПоследующейОплатой;

		ТабОпер.Количество			= Сторно * Количество * Коэффициент;
		ТабОпер.Сумма				= Сторно * (Количество * ЦенаБезНДС) * Коэффициент;
		ТабОпер.Задолженность		= Сторно * (СуммаВсего - АвансВсего);
		ТабОпер.НДС					= Сторно * СуммаНДС * Коэффициент;
	
		АвансВсего					= 0;
		СуммаНДС					= СуммаНДС - (СуммаНДС * Коэффициент);
		
	ИначеЕсли (АвансВсего = 0) ИЛИ (ДругиеУсловия = 1) Тогда
		// СПоследующейОплатой - полностью
		Если ДругиеУсловия = 1 Тогда
			ТабОпер.УсловиеПолучения	= УсловияПолученияИмуществаДругие;
		Иначе
			ТабОпер.УсловиеПолучения	= УсловияПолученияИмуществаСПоследующейОплатой;
		КонецЕсли;
			
		ТабОпер.Количество			= Сторно * Количество;
		ТабОпер.Сумма				= Сторно * (Количество * ЦенаБезНДС);
		
		Если ДругиеУсловия = 1 Тогда
			ТабОпер.Задолженность		= 0;
			ТабОпер.НДС					= 0;
		Иначе
			ТабОпер.Задолженность		= Сторно * СуммаВсего;
			ТабОпер.НДС					= Сторно * СуммаНДС;
		КонецЕсли;
			
		СуммаНДС					= 0;
		
	КонецЕсли;

	Если (ТекущийДокумент.Вид() = "ПоступлениеДопРасходы")
	 или ((ТекущийДокумент.Вид() = "ПоступлениеТМЦИмпорт") и (КодОперации = глКО.ТаможенныеПлатежи)) Тогда
        // Для дополнительных расходов и таможенных платежей реквизит "Количество" смысла не имеет
	 	ТабОпер.Количество	= 0;
	КонецЕсли;

	// Возвращение числовых значений 
	ЧисловыеПараметры.Установить("АвансВсего",АвансВсего);
	ЧисловыеПараметры.Установить("СуммаНДС",СуммаНДС);
	
КонецПроцедуры // ДобавитьОперациюПриобретенияТорг()

//*****************************************************************************
// ПолучитьОперацииПриобретенияКомплектация()
//
// Параметры:
//   нет
//
// Описание:
//   Формирует таблицу операций поступлений имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "Комплектация ТМЦ".
//
Процедура ПолучитьОперацииПриобретенияКомплектация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("КомплектацияТМЦ");

	КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(глКО.Сборка);

	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =			Регистр.ПартииНаличие.СтатусПартии;
	|
	|КодОперации  = 		Регистр.ПартииНаличие.КодОперации;
	|
	|пКоличество =			Регистр.ПартииНаличие.Количество;
	|пСумма =				Регистр.ПартииНаличие.СуммаРуб;
	|
	|Группировка ТекущийДокумент;
	|Группировка Объект без групп;
	|Группировка СтатусПартии;
	|
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|Условие(КодОперации в КодыОпераций);
	// исключаем операции комплектации продукции
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Продукция);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Функция ПриходКоличество =	Приход(пКоличество);
	|Функция ПриходСумма =		Приход(пСумма);
	|"
	;

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент = Запрос.ТекущийДокумент;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			Пока Запрос.Группировка(3) = 1 Цикл

				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");

				Если Запрос.ПриходКоличество = 0 Тогда
					Продолжить;
				КонецЕсли;
					
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПриходКоличество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(0,"ЦенаБезНДС");
				ЧисловыеПараметры.ДобавитьЗначение(0,"СуммаВсего");
				ЧисловыеПараметры.ДобавитьЗначение(0,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(0,"СуммаНДС");

				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент, Запрос.СтатусПартии, Запрос.КодОперации, Запрос.Объект,
													 ТекущийДокумент.ДатаДок, ,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.Установить("Сторно",-1);
		
					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент, Запрос.СтатусПартии, Запрос.КодОперации, Запрос.Объект,
													 ТекущийДокумент.ДатаДок, ,ЧисловыеПараметры);
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииПриобретенияКомплектация()

//*****************************************************************************
// ПолучитьОперацииПриобретенияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций поступлений имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "Возврат от покупателя".
//
Процедура ПолучитьОперацииПриобретенияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Регистр.КнигаПродаж.ТекущийДокумент;
	|
	|ВидОперации =			Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.КодОперации,
	|						Регистр.КнигаПродаж.ТекущийДокумент.ВозвратОтПокупателя.КодОперации;
	|
	|ДокументОснование =	Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.ДокОснование,
	|						Регистр.КнигаПродаж.ТекущийДокумент.ВозвратОтПокупателя.ДокОснование;
	|
	// данные по конкретной позиции товара
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|КодОперации =	 		Регистр.ПартииНаличие.КодОперации;
	|		
	// данные по количеству и себестоимости ТМЦ
	|ПартииКоличество 	=	Регистр.ПартииНаличие.Количество;
	|ПартииСумма	 	=	Регистр.ПартииНаличие.СуммаБезНДС;
	|		
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
	// итоги по количеству и себестоимости ТМЦ 
	|Функция ПартииКол =	Приход(ПартииКоличество);
	|Функция ПартииСумм =	Приход(ПартииСумма);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	// исключаем возврат комиссионного имущества
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|
	|Условие(ВидОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	  = Запрос.ТекущийДокумент;
		ДокументОснование = Запрос.ДокументОснование;

		АвансВсего			= 0;
		АвансНДСПоДокументу	= 0;

		Если ПустоеЗначение(ДокументОснование) = 0 Тогда
			// Запрос для выявления авансов по реализации, на основании которой происходит возврат товара от покупателя
			ЗапросПоАвансам = СоздатьОбъект("Запрос");
	
			ТекстЗапроса = "
			|Период с '"+ДокументОснование.ДатаДок+"' по КонДатаДляЗапросов;
			|		
			|ОбрабатыватьДокументы Проведенные;
			|		
			|ТекущийДокумент =		Регистр.КнигаПродаж.ДокументОплаты,
			|						Регистр.КнигаПокупок.ДокументОплаты,
			|						Регистр.Покупатели.ТекущийДокумент;
			|
			|ВидДолга		 =		Регистр.КнигаПродаж.ВидДолга,
			|						Регистр.КнигаПокупок.ВидДолга,
			|						Регистр.Покупатели.ВидДолга;
			|
			|ПокупателиСуммаРуб  =  Регистр.Покупатели.СуммаРуб;
			|
			|КнигаПродажСуммаРуб = 	Регистр.КнигаПродаж.СуммаРуб;
			|КнигаПродажСуммаНДС = 	Регистр.КнигаПродаж.СуммаНДС;
			|		
			|КнигаПокупокСуммаРуб = Регистр.КнигаПокупок.СуммаРуб;
			|КнигаПокупокСуммаНДС = Регистр.КнигаПокупок.СуммаНДС;
			|
			|Группировка ТекущийДокумент;
			|
			|Функция АвансУсловный=         Приход(ПокупателиСуммаРуб)  Когда ((ВидДолга = Перечисление.ВидыДолга.Аванс) ИЛИ (ВидДолга = Перечисление.ВидыДолга.АвансВал));
			|Функция АвансВсего =           Расход(КнигаПродажСуммаРуб);
			|Функция АвансНДС =	            Расход(КнигаПродажСуммаНДС);
			|Функция АвансВсегоПокупки =    Приход(КнигаПокупокСуммаРуб);
			|Функция АвансНДСПокупки   =    Приход(КнигаПокупокСуммаНДС);
	        |
			|Условие(ТекущийДокумент = ДокументОснование);
			|";
	
			ЗапросПоАвансам.Выполнить(ТекстЗапроса);
			
			Если ЗапросПоАвансам.Получить(ДокументОснование) = 1 Тогда
				// Информация по зачету аванса берется либо из книги продаж (до вступления в силу постановления 575 от 27.07.2002)
				// либо из книги покупок (после вступления в силу постановления 575 от 27.07.2002)
		
				АвансВсего			= Мод(ЗапросПоАвансам.АвансВсего) + Мод(ЗапросПоАвансам.АвансВсегоПокупки);
				АвансНДСПоДокументу	= Мод(ЗапросПоАвансам.АвансНДС) + Мод(ЗапросПоАвансам.АвансНДСПокупки);
	
				// Анализируем на наличие условного аванса
				УсловныйАванс 		= Мод(ЗапросПоАвансам.АвансУсловный);
				Если (АвансНДСПоДокументу = 0)И(УсловныйАванс <> 0) Тогда
					// Был сделан условный аванс, т.е. аванс который был закрыт в том же месяце 
					// и на него не выставлялась счет - фактура и соответственно не делалось записей в КП
					// для таких авансов определяем НДС по расчетной ставке 
					АвансВсего			= УсловныйАванс;
					АвансНДСПоДокументу = Окр(УсловныйАванс * ГлВыделяемыйНДС(Перечисление.СтавкиНДС.НДС20_120),2);
				КонецЕсли;
	
			КонецЕсли;
		КонецЕсли;

		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);

		Если АвансВсего >= ТаблицаДокумента.Итог("СуммаРуб") Тогда
			АвансВсего = 0;
		Иначе
			АвансВсего = ТаблицаДокумента.Итог("СуммаРуб") - АвансВсего;
		КонецЕсли;
			
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
			КонецЕсли;

			Пока Запрос.Группировка(3) = 1 Цикл

				Если Запрос.ПартииКол = 0 Тогда
					СредняяЦена = Запрос.ПартииСумм;
				Иначе
					СредняяЦена = Запрос.ПартииСумм/Запрос.ПартииКол;
				КонецЕсли;
				
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииКол,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(СредняяЦена,"ЦенаБезНДС");
				ЧисловыеПараметры.ДобавитьЗначение(ТаблицаДокумента.СуммаРуб,"СуммаВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(ТаблицаДокумента.СуммаНДС,"СуммаНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);

				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(ТаблицаДокумента.СуммаНДС,"СуммаНДС");
					ЧисловыеПараметры.Установить("Сторно",-1);

					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);
				КонецЕсли;

				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				СуммаНДС   = ЧисловыеПараметры.Получить("СуммаНДС");

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияВозвратыОтПокупателей()

//*****************************************************************************
// ПолучитьОперацииПриобретенияДопРасходы(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций поступления имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ПоступлениеДопРасходы".
//
Процедура ПолучитьОперацииПриобретенияДопРасходы(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеДопРасходы");	

	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ТекущийДокумент =		Регистр.Поставщики.ТекущийДокумент,
	|						Регистр.ПартииНаличие.ТекущийДокумент;
	|
	|Объект = 				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =			Регистр.ПартииНаличие.СтатусПартии;
	|Количество =	 		Регистр.ПартииНаличие.Количество;
	|					
	|ПоставщикиСуммаРуб =	Регистр.Поставщики.СуммаРуб;
	|
	|ПартииСуммаРуб = 		Регистр.ПартииНаличие.СуммаРуб;
	|ПартииСуммаБезНДС =	Регистр.ПартииНаличие.СуммаБезНДС;
	|
	|КодОперации =			Регистр.ПартииНаличие.КодОперации;
	|					
	|Группировка ТекущийДокумент;
	|Группировка Объект без групп;
	|
	|Функция АвансВсего   =	Приход(ПоставщикиСуммаРуб);	
	|
	|Функция ПартииВсего  =	Приход(ПартииСуммаРуб); 		
	|Функция ПартииБезНДС =	Приход(ПартииСуммаБезНДС); 	
	|Функция ПартииКол  =	Приход(Количество); 		
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() в ВидыДокументов));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		АвансВсего		= Запрос.АвансВсего;
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.Объект) = 1 Тогда
				Продолжить;    
			КонецЕсли;

			СуммаНДС = Запрос.ПартииВсего- Запрос.ПартииБезНДС;

			Если Запрос.ПартииКол = 0 Тогда
				СредняяЦена = Запрос.ПартииБезНДС;
			Иначе
				СредняяЦена = Запрос.ПартииБезНДС/Запрос.ПартииКол;
			КонецЕсли;
			
			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(0,"Количество");
			ЧисловыеПараметры.ДобавитьЗначение(СредняяЦена,"ЦенаБезНДС");
			ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииВсего,"СуммаВсего");
			ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
			ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
			ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
			
			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ДатаНалогДок = ТекущийДокумент.ДатаДок;
				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,,ЧисловыеПараметры);

			КонецЕсли;
			
			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
				ЧисловыеПараметры.Установить("Сторно",-1);

				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,,ЧисловыеПараметры);
			КонецЕсли;

			АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
			СуммаНДС   = ЧисловыеПараметры.Получить("СуммаНДС");

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияДопРасходы()

//*****************************************************************************
// ПолучитьОперацииПриобретенияПоступлениеТМЦИмпорт(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций поступления имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ПоступлениеТМЦИмпорт".
//
Процедура ПолучитьОперацииПриобретенияПоступлениеТМЦИмпорт(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;

	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ТекущийДокумент =		Регистр.Поставщики.ТекущийДокумент,
	|						Регистр.ПартииНаличие.ТекущийДокумент;
	|
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки;
	|					
	|Объект = 				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =			Регистр.ПартииНаличие.СтатусПартии;
	|Количество =	 		Регистр.ПартииНаличие.Количество;
	|					
	|ПоставщикиСуммаРуб =	Регистр.Поставщики.СуммаРуб;
	|
	|ПартииСуммаРуб = 		Регистр.ПартииНаличие.СуммаРуб;
	|ПартииСуммаБезНДС =	Регистр.ПартииНаличие.СуммаБезНДС;
	|
	|КодОперации =			Регистр.ПартииНаличие.КодОперации,
	|						Регистр.Поставщики.КодОперации;
	|					
	|Группировка ТекущийДокумент;
	|Группировка КодОперации;
	|Группировка Объект без групп;
	|
	|Функция СуммаДолга   =	Расход(ПоставщикиСуммаРуб);	
	|Функция АвансВсего   =	Приход(ПоставщикиСуммаРуб);	
	|
	|Функция ПартииВсего  =	Приход(ПартииСуммаРуб); 		
	|Функция ПартииБезНДС =	Приход(ПартииСуммаБезНДС); 	
	|Функция ПартииКол  =	Приход(Количество); 		
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() = ""ПоступлениеТМЦИмпорт""));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		// Открываем выборку по документам поступления импорта

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		АвансВсего		= Запрос.АвансВсего;
		
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл
			// Открываем выборку по документам кодам операций, с целью раздельного отражения
			// операций либо с поставщиком либо с таможней

			Пока Запрос.Группировка(3) = 1 Цикл
				
				Если ПустоеЗначение(Запрос.Объект) = 1 Тогда
					Продолжить;    
				КонецЕсли;
	
				СуммаНДС		= Запрос.ПартииВсего - Запрос.ПартииБезНДС;

				Если Запрос.ПартииКол = 0 Тогда
					СредняяЦена = Запрос.ПартииБезНДС;
				Иначе
					СредняяЦена = Запрос.ПартииБезНДС/Запрос.ПартииКол;
				КонецЕсли;
				
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииКол,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(СредняяЦена,"ЦенаБезНДС");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииВсего,"СуммаВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);
	
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
					ЧисловыеПараметры.Установить("Сторно",-1);
	
					ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);
				КонецЕсли;
	
				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				СуммаНДС   = ЧисловыеПараметры.Получить("СуммаНДС");
	
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияПоступлениеТМЦИмпорт()

//*****************************************************************************
// ПолучитьОперацииПриобретенияПоступлениеТМЦ(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций поступления имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ОприходованиеТМЦ",ПоступлениеТМЦ","ПоступлениеТМЦРозница","СтрокаАвансОтчетаТМЦ".
//
Процедура ПолучитьОперацииПриобретенияПоступлениеТМЦ(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ОприходованиеТМЦ");	
	ВидыДокументов.ДобавитьЗначение("ПоступлениеТМЦ");	
	ВидыДокументов.ДобавитьЗначение("ПоступлениеТМЦРозница");	
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаТМЦ");	

	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ТекущийДокумент =		Регистр.Поставщики.ТекущийДокумент,
	|						Регистр.ПартииНаличие.ТекущийДокумент, 
	|						Регистр.ПодотчетныеЛица.ТекущийДокумент;
	|
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки;
	|					
	|Объект = 				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =			Регистр.ПартииНаличие.СтатусПартии;
	|Количество =	 		Регистр.ПартииНаличие.Количество;
	|					
	|ПоставщикиСуммаРуб =	Регистр.Поставщики.СуммаРуб;
	|ПрочиеАвансыСуммаРуб =	Регистр.ПодотчетныеЛица.СуммаРуб;
	|
	|ПартииСуммаРуб = 		Регистр.ПартииНаличие.СуммаРуб;
	|ПартииСуммаБезНДС =	Регистр.ПартииНаличие.СуммаБезНДС;
	|
	|КодОперации =			Регистр.ПартииНаличие.КодОперации;
	|					
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|
	|Функция АвансВсего   =	Приход(ПоставщикиСуммаРуб);	
	|Функция ПрочиеАвансы =	Расход(ПрочиеАвансыСуммаРуб);
	|
	|Функция ПартииВсего  =	Приход(ПартииСуммаРуб); 		
	|Функция ПартииБезНДС =	Приход(ПартииСуммаБезНДС); 	
	|Функция ПартииКол  =	Приход(Количество); 		
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	// дополнительно фильтруем (исключаем комиссию, и продукцию)
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Продукция);
	|
	|Условие((ТекущийДокумент.Вид() в ВидыДокументов));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		Если глЕстьРеквизитШапки("Счет", ТекущийДокумент.Вид()) = 1 Тогда
			Если ТипЗначенияСтр(ТекущийДокумент.Счет) = "Справочник" Тогда
				Если Найти(ТекущийДокумент.Счет.Код,"10.7")<>0 Тогда
					// Это случай прихода давальческого сырья! В налоговом учете не отражается...	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		АвансВсего			= Запрос.АвансВсего + Запрос.ПрочиеАвансы;
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если (ПустоеЗначение(Запрос.НомерСтроки) = 1) Тогда
				Продолжить;
			Иначе
				// Определение суммы НДС по конкретной строке документа
				СуммаНДС = Запрос.ПартииВсего - Запрос.ПартииБезНДС;
			КонецЕсли;

			Если Запрос.ПартииКол = 0 Тогда
				СредняяЦена = Запрос.ПартииБезНДС;
			Иначе
				СредняяЦена = Запрос.ПартииБезНДС/Запрос.ПартииКол;
			КонецЕсли;
			
			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииКол,"Количество");
			ЧисловыеПараметры.ДобавитьЗначение(СредняяЦена,"ЦенаБезНДС");
			ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПартииВсего,"СуммаВсего");
			ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
			ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
			ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
			
			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ДатаНалогДок = ТекущийДокумент.ДатаДок;
				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);

			КонецЕсли;
			
			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
				ЧисловыеПараметры.Установить("Сторно",-1);

				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.КодОперации,Запрос.Объект,ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);
			КонецЕсли;

			АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
			СуммаНДС   = ЧисловыеПараметры.Получить("СуммаНДС");

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияПоступлениеТМЦ()

//*****************************************************************************
// ПолучитьОперацииПриобретенияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций поступления имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ПоступлениеПрочее","СтрокаАвансОтчетаПрочее".
//
Процедура ПолучитьОперацииПриобретенияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеПрочее");	
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаПрочее");	

	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ТекущийДокумент =		Регистр.Поставщики.ТекущийДокумент,
	|						Регистр.ПодотчетныеЛица.ТекущийДокумент,
	|						Регистр.КнигаПокупок.ТекущийДокумент;
	|
	|НомерСтроки = 			Регистр.Поставщики.НомерСтроки,
	|						Регистр.ПодотчетныеЛица.НомерСтроки,
	|						Регистр.КнигаПокупок.НомерСтроки;
	|
	|ПоставщикиСуммаРуб =	Регистр.Поставщики.СуммаРуб;
	|ПрочиеАвансыСуммаРуб =	Регистр.ПодотчетныеЛица.СуммаРуб;
	|
	|ПрочееСуммаРуб =		Регистр.КнигаПокупок.СуммаРуб;
	|ПрочееСуммаНДС =		Регистр.КнигаПокупок.СуммаНДС;
	|
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|
	|Функция АвансВсего =	Приход(ПоставщикиСуммаРуб);	
	|Функция ПрочиеАвансы =	Расход(ПрочиеАвансыСуммаРуб);
	|
	|Функция ПрочееВсего =	Расход(ПрочееСуммаРуб);
	|Функция ПрочееНДС =	Расход(ПрочееСуммаНДС);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() в ВидыДокументов));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;
		Если ТекущийДокумент.Вид() = "ПоступлениеПрочее" Тогда
			КодОперации = глКО.Закупка;
		Иначе
			КодОперации = глКО.АвансовыйОтчет;
		КонецЕсли;

		АвансВсего			= Запрос.АвансВсего + Запрос.ПрочиеАвансы;
		СуммаНДСПоДокументу	= Мод(Запрос.ПрочееНДС);
		
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если (ПустоеЗначение(Запрос.НомерСтроки) = 1) Тогда
				Продолжить;
			Иначе
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				СуммаНДС = Мин(СуммаНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				СуммаНДСПоДокументу = СуммаНДСПоДокументу - СуммаНДС;

				//Позиционирование для последующего считывания процедурой ДобавитьОперациюПриобретенияТорг реквизитов табл части документа
				ТекущийДокумент.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
			КонецЕсли;

			Если ТаблицаДокумента.Количество = 0 Тогда
				СредняяЦена = ТаблицаДокумента.СуммаРуб;
				ЦенаБезНДС  = ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНП;
			Иначе
				СредняяЦена = ТаблицаДокумента.СуммаРуб/ТаблицаДокумента.Количество;
				ЦенаБезНДС  = (ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНП)/ТаблицаДокумента.Количество;
			КонецЕсли;
			
			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(ТаблицаДокумента.Количество,"Количество");
			ЧисловыеПараметры.ДобавитьЗначение(ЦенаБезНДС,"ЦенаБезНДС");
			ЧисловыеПараметры.ДобавитьЗначение(ТаблицаДокумента.СуммаРуб,"СуммаВсего");
			ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
			ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
			ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
			
			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ДатаНалогДок = ТекущийДокумент.ДатаДок;
				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,"",КодОперации,"",ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);

			КонецЕсли;
			
			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(СуммаНДС,"СуммаНДС");
				ЧисловыеПараметры.Установить("Сторно",-1);

				ДобавитьОперациюПриобретенияТорг(ТекущийДокумент,"",КодОперации,"",ДатаНалогДок,Запрос.НомерСтроки,ЧисловыеПараметры);
			КонецЕсли;

			АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
			СуммаНДС   = ЧисловыеПараметры.Получить("СуммаНДС");

		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииПриобретенияПрочее()

//*****************************************************************************
// ПолучитьОперацииПриобретенияИмущества()
//
// Описание:
//  Формирует таблицу операций приобретения имущества, работ, услуг, прав за период,
// указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ПолучитьОперацииПриобретенияИмущества()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("НомерПроводки","Число");
	ТабОпер.НоваяКолонка("УсловиеПолучения");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("ЭлементРасхода");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Объект","Справочник");
	ТабОпер.НоваяКолонка("ДатаПризнания","Дата");
	ТабОпер.НоваяКолонка("ОснованиеПризнания","Строка");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("Задолженность","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	
	СчетаДтСтр = "07,08,10,15,20,21,23,25,26,28,29,41,44,45,58.2,58.5,91.2,97,99";
	СчетаКтСтр = "60,66,67,71,76.5,76.55,86,91.1,98";
	
	// Запрос для выборки документов, которые были отсторнированы документом "Сторно" в текущем налоговом периоде
	ВидыСторнируемыхДок = СоздатьОбъект("СписокЗначений");

	ВидыСторнируемыхДок.ДобавитьЗначение("КомплектацияТМЦ");
	ВидыСторнируемыхДок.ДобавитьЗначение("ВозвратОтПокупателя");

	ВидыСторнируемыхДок.ДобавитьЗначение("ОприходованиеТМЦ");
	ВидыСторнируемыхДок.ДобавитьЗначение("ПоступлениеДопРасходы");
	ВидыСторнируемыхДок.ДобавитьЗначение("ПоступлениеТМЦ");
	ВидыСторнируемыхДок.ДобавитьЗначение("ПоступлениеТМЦИмпорт");
	ВидыСторнируемыхДок.ДобавитьЗначение("ПоступлениеТМЦРозница");
	ВидыСторнируемыхДок.ДобавитьЗначение("СтрокаАвансОтчетаТМЦ");

	ВидыСторнируемыхДок.ДобавитьЗначение("ПоступлениеПрочее");
	ВидыСторнируемыхДок.ДобавитьЗначение("СтрокаАвансОтчетаПрочее");
	
	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыСторнируемыхДок);

	// Заполнение по операциям КОМПЛЕКТАЦИИ ТМЦ оформленных документом "КОМПЛЕКТАЦИЯ ТМЦ"
	ПолучитьОперацииПриобретенияКомплектация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям ВОЗВРАТЫ ТМЦ ОТ ПОКУПАТЕЛЕЙ оформленных документом "ВОЗВРАТ ОТ ПОКУПАТЕЛЯ"
	ПолучитьОперацииПриобретенияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям поступления ДОП РАСХОДОВ, оформленных документами "ПоступлениеДопРасходы"
	ПолучитьОперацииПриобретенияДопРасходы(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям поступления ИМПОРТНЫХ ТОВАРОВ, оформленных документами "ПоступлениеТМЦИмпорт"
	ПолучитьОперацииПриобретенияПоступлениеТМЦИмпорт(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям поступления ТМЦ, оформленных документами "ОприходованиеТМЦ","ПоступлениеТМЦ",
	// "ПоступлениеТМЦРозница","СтрокаАвансОтчетаТМЦ"
	ПолучитьОперацииПриобретенияПоступлениеТМЦ(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям поступления услуг, оформленных документами "ПоступлениеПрочее",
	// "СтрокаАвансОтчетаПрочее"
	ПолучитьОперацииПриобретенияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

КонецПроцедуры // ПолучитьОперацииПриобретенияИмущества()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ВЫБЫТИЯ ИМУЩЕСТВА, РАБОТ, УСЛУГ, ПРАВ
//
//******************************************************************************
// ДобавитьОперациюВыбытияТорг(ТекущийДокумент,СтатусВид,Объект,ДатаНалогДок,ЧиловыеПараметры)
//
// Параметры:
//  ТекущийДокумент		- текущий оперативный документ на основе которого заполняем строку таблицы операций.
//  СтатусВид			- статус партии реализуемой номенклатуры, или строка с видом справочника для прочих
//                        видов реализации (ОС, НМА, услуги и пр).
//  Объект				- Объект налогового учета (Номенклатура, ОС НМА, услуги и т.п.).
//  ДатаНалогДок        - дата налогового документа
//  ТаблицаДокумента    - формализованная табличная часть документа
// 
//  Список значений "ЧисловыеПараметры" содержит следующие значения:
//  Количество          - количество реализумых ТМЦ или услуг
//  АвансВсего          - величина аванса, который необходимо учесть для определения условия выбытия
//  АвансНДС            - величина НДС с аванса, который необходимо учесть при корректировке кредиторской задолженности
//  Сторно              - знак сумм в налоговом документе (положительные или отрицательные)
//
// Описание:
//  Добавляет операцию выбытия имущества на основании данных запроса по регистрам.
//
Процедура ДобавитьОперациюВыбытияТорг(ТекущийДокумент, СтатусВид, Объект, ДатаНалогДок, ТаблицаДокумента, ЧисловыеПараметры)

	ТабОпер.НоваяСтрока();

	ТабОпер.День					= ДатаНалогДок;
	ТабОпер.Документ				= ТекущийДокумент;
	ТабОпер.Контрагент				= ТекущийДокумент.Контрагент;
	ТабОпер.Договор					= ТекущийДокумент.Договор;
	ТабОпер.Объект					= Объект;
	ТабОпер.НаименованиеОперации	= глНазваниеДокументаВЖурнале(ТекущийДокумент);
	
	Если ТипЗначенияСтр(СтатусВид) = "Перечисление" Тогда
		// Для ТМЦ учитываемых в оперативном регистре "ПартииНаличие" или "ПартииОтданные"

		Если      Лев(СтатусВид.Идентификатор(), 1) = "Т" Тогда
			Если ТекущийДокумент.Вид() = "ОтчетКомиссионера" Тогда
				ТабОпер.ВидДохода	= ВидыДоходовРеализацияТоваровРанееОтгруженных;
			Иначе
				ТабОпер.ВидДохода	= ВидыДоходовРеализацияТоваров;
			КонецЕсли;

		ИначеЕсли Лев(СтатусВид.Идентификатор(), 1) = "М" Тогда
			ТабОпер.ВидДохода		= ВидыДоходовРеализацияПрочегоИмущества;

		ИначеЕсли Лев(СтатусВид.Идентификатор(), 1) = "П" Тогда
			Если ТекущийДокумент.Вид() = "ОтчетКомиссионера" Тогда
				ТабОпер.ВидДохода		= ВидыДоходовРеализацияПродукцииРанееОтгруженной;
			Иначе
				ТабОпер.ВидДохода		= ВидыДоходовРеализацияПродукции;
			КонецЕсли;

		КонецЕсли;

	Иначе
		ТабОпер.ВидДохода		= ВидыДоходовРеализацияПрочегоИмущества;
	КонецЕсли;
	
	// Определение ЧИСЛОВЫХ ЗНАЧЕНИЙ формируемого налогового документа 

	// находим цены продажи товара или услуги
	Если ТаблицаДокумента.Количество = 0 Тогда
		СредняяЦена = ТаблицаДокумента.СуммаРуб;
		ЦенаБезНДС  = ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНП;
	Иначе
		СредняяЦена = ТаблицаДокумента.СуммаРуб/ТаблицаДокумента.Количество;
		ЦенаБезНДС  = (ТаблицаДокумента.СуммаРуб - ТаблицаДокумента.СуммаНДС - ТаблицаДокумента.СуммаНП)/ТаблицаДокумента.Количество;
	КонецЕсли;

	Количество   = Число(ЧисловыеПараметры.Получить("Количество"));
	АвансВсего   = Число(ЧисловыеПараметры.Получить("АвансВсего"));
	АвансНДС     = Число(ЧисловыеПараметры.Получить("АвансНДС"));
	Сторно       = Число(ЧисловыеПараметры.Получить("Сторно"));

	Если Количество = 0 Тогда
		Количество = 1; // если в документе количество не указано
	КонецЕсли;
					
	СуммаВсего = СредняяЦена * Количество;

    // Далее в алгоритме величины: "СуммаВсего","АвансВсего","АвансНДС" - предполагаются всегда положительными!
	// независимо от того, формируется сторнирующий налоговый документ или обычный
	
	Если (СуммаВсего <= АвансВсего) И (СуммаВсего <> 0) Тогда

		// Доопределяем реквизиты табличной части:					
		ТабОпер.Количество		= Сторно * (Количество);
		ТабОпер.Сумма			= Сторно * (Количество * ЦенаБезНДС);
		ТабОпер.Задолженность	= Сторно * (СуммаВсего);
		ТабОпер.НДС				= Сторно * АвансНДС;

		ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов;

		АвансВсего 				= АвансВсего - СуммаВсего;
	
	ИначеЕсли (0 < АвансВсего) И (АвансВсего < СуммаВсего)  И (СуммаВсего <> 0) Тогда
		// ВСчетРанееВыданныхАвансов - частично
		Коэффициент				= АвансВсего/СуммаВсего;

		// Доопределяем реквизиты табличной части:					
		ТабОпер.Количество		= Сторно * (Количество * Коэффициент);
		ТабОпер.Сумма			= Сторно * (Количество * ЦенаБезНДС * Коэффициент);
		ТабОпер.Задолженность	= Сторно * (АвансВсего);
		ТабОпер.НДС				= Сторно * (АвансНДС);

		ТабОпер.УсловиеВыбытия		= УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов;
		
		// СПоследующейОплатой - частично
		Коэффициент 			= 1 - Коэффициент;

		ТабОпер.НоваяСтрока();
		// Копируем значения из предыдущей строки
		ТабОпер.День					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"День");
		ТабОпер.Документ				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Документ");
		ТабОпер.Контрагент				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Контрагент");
		ТабОпер.Договор					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Договор");
		ТабОпер.Объект					= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"Объект");
		ТабОпер.НаименованиеОперации	= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"НаименованиеОперации");
		ТабОпер.ВидДохода				= ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки - 1,"ВидДохода");

		// Доопределяем реквизиты табличной части:
		ТабОпер.Количество		= Сторно * (Количество * Коэффициент);
		ТабОпер.Сумма			= Сторно * (Количество * ЦенаБезНДС * Коэффициент);
		ТабОпер.Задолженность	= Сторно * (СуммаВсего - АвансВсего);
		ТабОпер.НДС				= 0;

		ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаСПоследующейОплатой;
	
		АвансВсего				= 0;
		АвансНДС				= 0;
		
	ИначеЕсли (АвансВсего = 0) И (СуммаВсего <> 0) Тогда
		// СПоследующейОплатой - полностью
		
		ТабОпер.Количество		= Сторно * (Количество);
		ТабОпер.Сумма			= Сторно * (Количество * ЦенаБезНДС);
		ТабОпер.Задолженность	= Сторно * СуммаВсего;
		ТабОпер.НДС				= 0;

		ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаСПоследующейОплатой;
	КонецЕсли;

	Если ТекущийДокумент.Вид() = "ВозвратПоставщику" Тогда
		Если      Лев(СтатусВид.Идентификатор(), 1) = "Т" Тогда
			ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаВозвратТоваровПоставщику;
    	Иначе
			ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаВозвратМатериаловПоставщику;
    	КонецЕсли;
		ТабОпер.ВидДохода = "";
	КонецЕсли;
		
	Если ТекущийДокумент.Вид() = "ВозвратОтПокупателя" Тогда
		ТабОпер.УсловиеВыбытия	= УсловияВыбытияИмуществаДругие;
		ТабОпер.Количество = 0;
	КонецЕсли;

	// Возвращение числовых значений 
	ЧисловыеПараметры.Установить("АвансВсего",АвансВсего);
	ЧисловыеПараметры.Установить("АвансНДС",АвансНДС);

КонецПроцедуры // ДобавитьОперациюВыбытияТорг()
					
//*****************************************************************************
// ПолучитьОперацииВыбытияОтчетКомитенту(ТабОпер,ВидыСторнируемыхДок)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ОтчетКомитенту".
//
Процедура ПолучитьОперацииВыбытияОтчетКомитенту(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
    |
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.РеализованныйТовар.ТекущийДокумент,
	|						Регистр.КнигаПродаж.ТекущийДокумент;
	|
	// сумма вознаграждения по конкретной позиции товара
	|пВознаграждение = 		Регистр.РеализованныйТовар.Вознаграждение;						
	|
	// данные по НДС и фактам оплаты 
	|КнигаПродажСуммаРуб = 	Регистр.КнигаПродаж.СуммаРуб;
	|КнигаПродажСуммаНДС = 	Регистр.КнигаПродаж.СуммаНДС;
	|	
	|Функция АвансВсего =	Приход(КнигаПродажСуммаРуб);
	|Функция АвансНДС =		Приход(КнигаПродажСуммаНДС);
	|
	|Функция КомиссионноеВознаграждение = Сумма(пВознаграждение);
	|
	|Группировка ТекущийДокумент;
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() = ""ОтчетКомитенту""));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл
		ТекущийДокумент	= Запрос.ТекущийДокумент;

		АвансВсего		= Мод(Запрос.АвансВсего);
		АвансНДС		= Мод(Запрос.АвансНДС);
		
		Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
		   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
			//Формирование обычного (несторнирующего) налогового документа  	
			ДатаНалогДок = ТекущийДокумент.ДатаДок;
					
			ТабОпер.НоваяСтрока();
			ТабОпер.День					= ДатаНалогДок;
			ТабОпер.Документ				= ТекущийДокумент;
			ТабОпер.Контрагент				= ТекущийДокумент.Контрагент;
			ТабОпер.Договор					= ТекущийДокумент.Договор;
			ТабОпер.Объект					= "Комиссионное вознаграждение";
			ТабОпер.НаименованиеОперации	= глНазваниеДокументаВЖурнале(ТекущийДокумент);
			ТабОпер.ВидДохода				= ВидыДоходовРеализацияПродукции;

			Сторно = 1;

			ТабОпер.Количество				= Сторно;
			ТабОпер.Сумма					= Сторно * (Мод(Запрос.КомиссионноеВознаграждение) - Мод(Запрос.АвансНДС));
			ТабОпер.Задолженность			= Сторно *  Мод(Запрос.КомиссионноеВознаграждение);
			ТабОпер.НДС						= Сторно *  Мод(Запрос.АвансНДС);
			ТабОпер.УсловиеВыбытия			= УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов;

		КонецЕсли;
				
		ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
		ДатаСторно = "";
		
		Если ИндексСторнируемогоДокумента <> 0 Тогда
			//Формирование сторнирующего налогового документа  	
			ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
			ДатаНалогДок = Дата(ДатаСторно);

			ТабОпер.НоваяСтрока();
			ТабОпер.День					= ДатаНалогДок;
			ТабОпер.Документ				= ТекущийДокумент;
			ТабОпер.Контрагент				= ТекущийДокумент.Контрагент;
			ТабОпер.Договор					= ТекущийДокумент.Договор;
			ТабОпер.Объект					= "Комиссионное вознаграждение";
			ТабОпер.НаименованиеОперации	= глНазваниеДокументаВЖурнале(ТекущийДокумент);
			ТабОпер.ВидДохода				= ВидыДоходовРеализацияПродукции;

			Сторно = - 1;

			ТабОпер.Количество				= Сторно;
			ТабОпер.Сумма					= Сторно * (Мод(Запрос.КомиссионноеВознаграждение) - Мод(Запрос.АвансНДС));
			ТабОпер.Задолженность			= Сторно *  Мод(Запрос.КомиссионноеВознаграждение);
			ТабОпер.НДС						= Сторно *  Мод(Запрос.АвансНДС);
			ТабОпер.УсловиеВыбытия			= УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов;

		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииВыбытияОтчетКомитенту()

//*****************************************************************************
// ПолучитьОперацииВыбытияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ВозвратОтПокупателя".
//
Процедура ПолучитьОперацииВыбытияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Регистр.КнигаПродаж.ТекущийДокумент;
	|
	|ВидОперации =			Регистр.ПартииНаличие.ТекущийДокумент.ВозвратОтПокупателя.КодОперации,
	|						Регистр.КнигаПродаж.ТекущийДокумент.ВозвратОтПокупателя.КодОперации;
	|
	// данные по конкретной позиции товара
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|		
	// данные по количеству и себестоимости ТМЦ
	|ПартииКоличество =	Регистр.ПартииНаличие.Количество;
	|
	// данные по НДС и фактам оплаты 
	|КнигаПродажСуммаРуб = 	Регистр.КнигаПродаж.СуммаРуб;
	|КнигаПродажСуммаНДС = 	Регистр.КнигаПродаж.СуммаНДС;
	|		
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
	// итоги по НДС и фактам оплаты 
	|Функция АвансВсего =	Расход(КнигаПродажСуммаРуб);
	|Функция АвансНДС =		Расход(КнигаПродажСуммаНДС);
	|		
	// итоги по количеству и себестоимости ТМЦ 
	|Функция ПартииКол =	Приход(ПартииКоличество);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	// исключаем выбытие комиссионного имущества
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|
	|Условие(ВидОперации = Перечисление.КодыОпераций.ВозвратОтПокупателя);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		АвансВсего			= Мод(Запрос.АвансВсего);
		АвансНДСПоДокументу	= Мод(Запрос.АвансНДС);
		
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				АвансНДС = Мин(АвансНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				АвансНДСПоДокументу = АвансНДСПоДокументу - АвансНДС;
			КонецЕсли;

			Пока Запрос.Группировка(3) = 1 Цикл

				Количество = Запрос.ПартииКол;
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
				ЧисловыеПараметры.ДобавитьЗначение(-1,"Сторно");
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					
					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
					ЧисловыеПараметры.Установить("Сторно",1);

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;

				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииВыбытияВозвратыОтПокупателей()

//*****************************************************************************
// ПолучитьОперацииВыбытияВозвратыПоставщикам(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ВозвратПоставщику".
//
Процедура ПолучитьОперацииВыбытияВозвратыПоставщикам(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Регистр.КнигаПокупок.ТекущийДокумент;
	|
	// данные по конкретной позиции товара
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|
	// данные по количеству и себестоимости ТМЦ
	|ПартииКоличество =		Регистр.ПартииНаличие.Количество;
	|	
	// данные по НДС и фактам оплаты 
	|КнигаПокупокСуммаРуб = Регистр.КнигаПокупок.СуммаРуб;
	|КнигаПокупокСуммаНДС = Регистр.КнигаПокупок.СуммаНДС;
	|	
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|	
	// итоги по НДС и фактам оплаты 
	|Функция АвансВсего =	Расход(КнигаПокупокСуммаРуб);
	|Функция АвансНДС =		Расход(КнигаПокупокСуммаНДС);
	|	
	// итоги по количеству и себестоимости ТМЦ 
	|Функция ПартииКол =	Расход(ПартииКоличество);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	// исключаем выбытие комиссионного имущества
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|
	|Условие((ТекущийДокумент.Вид() = ""ВозвратПоставщику""));
	|";
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		АвансВсего			= Мод(Запрос.АвансВсего);
		АвансНДСПоДокументу	= Мод(Запрос.АвансНДС);

		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				АвансНДС = Мин(АвансНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				АвансНДСПоДокументу = АвансНДСПоДокументу - АвансНДС;
			КонецЕсли;

			Пока Запрос.Группировка(3) = 1 Цикл

				Количество = Запрос.ПартииКол;
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					
					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
					ЧисловыеПараметры.Установить("Сторно",-1);

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;

				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииВыбытияВозвратыПоставщикам()

//*****************************************************************************
// ПолучитьОперацииВыбытияОтчетКомиссионера(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//   ЗапросПоАвансам - запрос для опереления сумм авансов, зачитываемых документами отгрузки
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "ОтчетКомиссионера".
//
Процедура ПолучитьОперацииВыбытияОтчетКомиссионера(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|	
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииОтданные.ТекущийДокумент;
	|
	// данные по конкретной позиции товара
	|НомерСтроки =			Регистр.ПартииОтданные.НомерСтроки;
	|Объект =				Регистр.ПартииОтданные.Номенклатура;
	|СтатусПартии =	 		Регистр.ПартииОтданные.СтатусПартии;
	|		
	// данные по количеству и себестоимости ТМЦ
	|ПартииКоличество =		Регистр.ПартииОтданные.Количество;
	|
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
	// итоги по количеству и себестоимости ТМЦ 
	|Функция ПартииКол =	Расход(ПартииКоличество);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() = ""ОтчетКомиссионера""));
		// дополнительно фильтруем третью выборку (исключаем комиссию)
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		Если ЗапросПоАвансам.Получить(ТекущийДокумент,) = 1 Тогда
			// Информация по зачету аванса берется либо из книги продаж (до вступления в силу постановления 575 от 27.07.2002)
			// либо из книги покупок (после вступления в силу постановления 575 от 27.07.2002)
	
			АвансВсего			= Мод(ЗапросПоАвансам.АвансВсего) + Мод(ЗапросПоАвансам.АвансВсегоПокупки);
			АвансНДСПоДокументу	= Мод(ЗапросПоАвансам.АвансНДС) + Мод(ЗапросПоАвансам.АвансНДСПокупки);

			// Анализируем на наличие условного аванса
			УсловныйАванс 		= Мод(ЗапросПоАвансам.АвансУсловный);
			Если (АвансНДСПоДокументу = 0)И(УсловныйАванс <> 0) Тогда
				// Был сделан условный аванс, т.е. аванс который был закрыт в том же месяце 
				// и на него не выставлялась счет - фактура и соответственно не делалось записей в КП
				// для таких авансов определяем НДС по расчетной ставке 
				АвансВсего			= УсловныйАванс;
				АвансНДСПоДокументу = Окр(УсловныйАванс * ГлВыделяемыйНДС(Перечисление.СтавкиНДС.НДС20_120),2);
			КонецЕсли;

		Иначе
			АвансВсего			= 0;
			АвансНДСПоДокументу	= 0;
		КонецЕсли;        
			
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				АвансНДС = Мин(АвансНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				АвансНДСПоДокументу = АвансНДСПоДокументу - АвансНДС;
			КонецЕсли;

			Пока Запрос.Группировка(3) = 1 Цикл
				
				Количество = Запрос.ПартииКол;
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					
					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
					ЧисловыеПараметры.Установить("Сторно",-1);

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;

				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");

			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьОперацииВыбытияОтчетКомиссионера()

//*****************************************************************************
// ПолучитьОперацииВыбытияРозничнаяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "РеализацияРозница", "ОтчетККМ".
//
Процедура ПолучитьОперацииВыбытияРозничнаяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Документ.ОтчетККМ.ТекущийДокумент,
	|						Документ.РеализацияРозница.ТекущийДокумент;
	|
		// данные по конкретной позиции ТМЦ или услуги в документе
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки,
	|						Документ.ОтчетККМ.НомерСтроки,
	|						Документ.РеализацияРозница.НомерСтроки;
	|
	|Объект =				Регистр.ПартииНаличие.Номенклатура,
	|						Документ.ОтчетККМ.Номенклатура,
	|						Документ.РеализацияРозница.Номенклатура;
	|
	|ВидОбъект =			Регистр.ПартииНаличие.Номенклатура.ВидНоменклатуры,
	|						Документ.ОтчетККМ.Номенклатура.ВидНоменклатуры,
	|						Документ.РеализацияРозница.Номенклатура.ВидНоменклатуры;
	|						
		// данные по количеству и себестоимости ТМЦ или услуги
	|ПартииКоличество =		Регистр.ПартииНаличие.Количество;
	|УслугиКоличество =		Документ.ОтчетККМ.Количество,
	|						Документ.РеализацияРозница.Количество;
	|
	|ПартииСумма =			Регистр.ПартииНаличие.СуммаРуб,
	|						Документ.ОтчетККМ.Сумма,
	|						Документ.РеализацияРозница.Сумма;
	|
	|Коэффициент =			Документ.ОтчетККМ.Коэффициент,
	|						Документ.РеализацияРозница.Коэффициент;
	|
		// данные по каждому статусу партии ТМЦ
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|КодОперации =	 		Регистр.ПартииНаличие.КодОперации;
	|
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
		// итоги по реализованным ТМЦ 
	|Функция ПартииКол =	Расход(ПартииКоличество);
	|
		// итоги по реализованным услугам 
	|Функция УслугиКол =	Сумма(УслугиКоличество)		Когда (ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга);
	|Функция УслугиСумм=	Сумма(ПартииСумма)			Когда (ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
		// дополнительно фильтруем третью выборку (исключаем комиссию и внутренние перемещения)
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|Условие(КодОперации = Перечисление.КодыОпераций.РозничнаяПродажа);
	|Условие((ТекущийДокумент.Вид() = ""ОтчетККМ"") ИЛИ (ТекущийДокумент.Вид() = ""РеализацияРозница""));
	|
		// отфильтровываем только розничные продажи без ЕНВД
	|Условие(ТекущийДокумент.ОблагаетсяЕНВД = 0);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент 	= Запрос.ТекущийДокумент;

		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе	
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
			КонецЕсли;

			Если Запрос.ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга Тогда
				// Это реализация услуг и значит нижний уровень группировок (СтатусПартии) проходить не нужно
				Количество = Запрос.УслугиКол*Запрос.Коэффициент;
				
				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(0,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(0,"АвансНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");

				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент, Перечисление.СтатусыПартии.Продукция,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.Установить("Сторно",-1);

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент, Перечисление.СтатусыПартии.Продукция,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
			Иначе
				// Это реализация ТМЦ проходим группировку (СтатусуПартии)
				Пока Запрос.Группировка(3) = 1 Цикл
	
					Количество = Запрос.ПартииКол;
					ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
					ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
					ЧисловыеПараметры.ДобавитьЗначение(0,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(0,"АвансНДС");
					ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
					
					Если (Запрос.ТекущийДокумент.ДатаДок >= ФормДатаНач)
					   и (Запрос.ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
						//Формирование обычного (несторнирующего) налогового документа  	
						ДатаНалогДок = ТекущийДокумент.ДатаДок;
						
						ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
					КонецЕсли;
					
					ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
					ДатаСторно = "";
					
					Если ИндексСторнируемогоДокумента <> 0 Тогда
						//Формирование сторнирующего налогового документа  	
						ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
						ДатаНалогДок = Дата(ДатаСторно);
						ЧисловыеПараметры.Установить("Сторно",-1);
	
						ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
					КонецЕсли;
	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииВыбытияРозничнаяРеализация()

//*****************************************************************************
// ПолучитьОперацииВыбытияОптоваяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//   ЗапросПоАвансам - запрос для определения сумм авансов подлежащих зачету документами отгрузки
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "Реализация".
//
Процедура ПолучитьОперацииВыбытияОптоваяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|	
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Документ.Реализация.ТекущийДокумент;
	|
		// данные по конкретной позиции ТМЦ или услуги
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки,
	|						Документ.Реализация.НомерСтроки;
	|
	|Объект =				Регистр.ПартииНаличие.Номенклатура,
	|						Документ.Реализация.Номенклатура;
	|
	|ВидОбъект =			Регистр.ПартииНаличие.Номенклатура.ВидНоменклатуры,
	|						Документ.Реализация.Номенклатура.ВидНоменклатуры;
	|
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|КодОперации =	 		Регистр.ПартииНаличие.КодОперации;
	|		
		// данные по количеству и себестоимости ТМЦ или услуги
	|ПартииКоличество =		Регистр.ПартииНаличие.Количество;
	|УслугиКоличество =		Документ.Реализация.Количество;
	|
	|ПартииСумма =			Регистр.ПартииНаличие.СуммаРуб,
	|						Документ.Реализация.Сумма;
	|
	|Коэффициент =			Документ.Реализация.Коэффициент;
	|
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
		// итоги по количеству и себестоимости ТМЦ 
	|Функция ПартииКол =	Расход(ПартииКоличество);
	|
		// итоги по реализованным услугам 
	|Функция УслугиКол =	Сумма(УслугиКоличество)		Когда (ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга);
	|Функция УслугиСумм=	Сумма(ПартииСумма)			Когда (ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
		// дополнительно фильтруем третью выборку (исключаем комиссию)
	|Условие(СтатусПартии <> Перечисление.СтатусыПартии.Т_Принятый);
	|Условие(КодОперации  <> Перечисление.КодыОпераций.ПередачаНаРеализацию);
	|
	|Условие((ТекущийДокумент.Вид() = ""Реализация""));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;

		Если ЗапросПоАвансам.Получить(ТекущийДокумент,) = 1 Тогда
			// Информация по зачету аванса берется либо из книги продаж (до вступления в силу постановления 575 от 27.07.2002)
			// либо из книги покупок (после вступления в силу постановления 575 от 27.07.2002)
	
			АвансВсего			= Мод(ЗапросПоАвансам.АвансВсего) + Мод(ЗапросПоАвансам.АвансВсегоПокупки);
			АвансНДСПоДокументу	= Мод(ЗапросПоАвансам.АвансНДС) + Мод(ЗапросПоАвансам.АвансНДСПокупки);

			// Анализируем на наличие условного аванса
			УсловныйАванс 		= Мод(ЗапросПоАвансам.АвансУсловный);
			Если (АвансНДСПоДокументу = 0)И(УсловныйАванс <> 0) Тогда
				// Был сделан условный аванс, т.е. аванс который был закрыт в том же месяце 
				// и на него не выставлялась счет - фактура и соответственно не делалось записей в КП
				// для таких авансов определяем НДС по расчетной ставке 
				АвансВсего			= УсловныйАванс;
				АвансНДСПоДокументу = Окр(УсловныйАванс * ГлВыделяемыйНДС(Перечисление.СтавкиНДС.НДС20_120),2);
			КонецЕсли;

		Иначе
			АвансВсего	= 0;
			АвансНДСПоДокументу	= 0;
		КонецЕсли;        
			
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе	
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				АвансНДС = Мин(АвансНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				АвансНДСПоДокументу = АвансНДСПоДокументу - АвансНДС;
			КонецЕсли;

			Если Запрос.ВидОбъект = Перечисление.ВидыНоменклатуры.Услуга Тогда
				// Это реализация услуг и значит нижний уровень группировок (СтатусПартии) проходить не нужно

				Количество = Запрос.УслугиКол*Запрос.Коэффициент;

				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");

				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДатаНалогДок = ТекущийДокумент.ДатаДок;
					
					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,  Перечисление.СтатусыПартии.Продукция, Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
					
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
					ЧисловыеПараметры.Установить("Сторно",-1);

					ДобавитьОперациюВыбытияТорг(ТекущийДокумент,  Перечисление.СтатусыПартии.Продукция, Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
				КонецЕсли;

				АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
				АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");
				
            Иначе
				Пока Запрос.Группировка(3) = 1 Цикл
	
					Количество = Запрос.ПартииКол;
					ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
					ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
					ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
					ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
					ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
					
					Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
					   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
						//Формирование обычного (несторнирующего) налогового документа  	
						ДатаНалогДок = ТекущийДокумент.ДатаДок;
						
						ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
					КонецЕсли;
					
					ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
					ДатаСторно = "";
					
					Если ИндексСторнируемогоДокумента <> 0 Тогда
						//Формирование сторнирующего налогового документа  	
						ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
						ДатаНалогДок = Дата(ДатаСторно);
						ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
						ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
						ЧисловыеПараметры.Установить("Сторно",-1);
	
						ДобавитьОперациюВыбытияТорг(ТекущийДокумент,Запрос.СтатусПартии,Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
					КонецЕсли;

					АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
					АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");
					
				КонецЦикла;
			КонецЕсли;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииВыбытияОптоваяРеализация()

//*****************************************************************************
// ПолучитьОперацииВыбытияРеализацияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыСторнируемыхДок - список документов, которые были сторнированы в текущем периоде
//                         формирования отчета
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//   ЗапросПоАвансам - результаты запроса по авансам, которые были зачтены документами отгрузки
//
//  Описание:
//   Формирует таблицу операций выбытия имущества, работ, услуг, прав, за период
//   на основе документов оперативного учета "Реализация ОС НМА и пр.".
//
Процедура ПолучитьОперацииВыбытияРеализацияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|	
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Документ.РеализацияПрочее.ТекущийДокумент,
	|						Регистр.КнигаПродаж.КредДокумент;
	|
	// данные по конкретной позиции товара
	|НомерСтроки =			Документ.РеализацияПрочее.НомерСтроки;
	|Объект =				Документ.РеализацияПрочее.Содержание;
	|		
	// данные по количеству и себестоимости ОС НМА и пр.
	|пПрочееКоличество =	Документ.РеализацияПрочее.Количество;
	|
	// данные по НДС и фактам оплаты 
	|КнигаПродажСуммаРуб = 	Регистр.КнигаПродаж.СуммаРуб;
	|КнигаПродажСуммаНДС = 	Регистр.КнигаПродаж.СуммаНДС;
	|		
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|		
	// итоги по НДС и фактам оплаты 
	|Функция АвансВсего =	Расход(КнигаПродажСуммаРуб);
	|Функция АвансНДС =		Расход(КнигаПродажСуммаНДС);
	|		
	// итоги по количеству  
	|Функция ПартииКол =	Сумма(пПрочееКоличество);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие((ТекущийДокумент.Вид() = ""РеализацияПрочее""));
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
				 |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент		= Запрос.ТекущийДокумент;

		Если ЗапросПоАвансам.Получить(ТекущийДокумент,) = 1 Тогда
			// Информация по зачету аванса берется либо из книги продаж (до вступления в силу постановления 575 от 27.07.2002)
			// либо из книги покупок (после вступления в силу постановления 575 от 27.07.2002)
	
			АвансВсего			= Мод(ЗапросПоАвансам.АвансВсего) + Мод(ЗапросПоАвансам.АвансВсегоПокупки);
			АвансНДСПоДокументу	= Мод(ЗапросПоАвансам.АвансНДС) + Мод(ЗапросПоАвансам.АвансНДСПокупки);

			// Анализируем на наличие условного аванса
			УсловныйАванс 		= Мод(ЗапросПоАвансам.АвансУсловный);
			Если (АвансНДСПоДокументу = 0)И(УсловныйАванс <> 0) Тогда
				// Был сделан условный аванс, т.е. аванс который был закрыт в том же месяце 
				// и на него не выставлялась счет - фактура и соответственно не делалось записей в КП
				// для таких авансов определяем НДС по расчетной ставке
				АвансВсего			= УсловныйАванс;
				АвансНДСПоДокументу = Окр(УсловныйАванс * ГлВыделяемыйНДС(Перечисление.СтавкиНДС.НДС20_120),2);
			КонецЕсли;

		Иначе
			АвансВсего			= 0;
			АвансНДСПоДокументу	= 0;
		КонецЕсли;        
		
		ТаблицаДокумента	= глПодготовитьТаблицуДокумента(ТекущийДокумент);
		
		Пока Запрос.Группировка(2) = 1 Цикл

			Если ПустоеЗначение(Запрос.НомерСтроки) = 1 Тогда
				Продолжить;				
			Иначе	
				// Определение суммы НДС по конкретной строке документа
				ТаблицаДокумента.ПолучитьСтрокуПоНомеру(Запрос.НомерСтроки);
				АвансНДС = Мин(АвансНДСПоДокументу,ТаблицаДокумента.СуммаНДС);
				АвансНДСПоДокументу = АвансНДСПоДокументу - АвансНДС;
			КонецЕсли;

			Количество = Запрос.ПартииКол;
			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(Количество,"Количество");
			ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
			ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
			ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");

			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ДатаНалогДок = ТекущийДокумент.ДатаДок;
				
				ДобавитьОперациюВыбытияТорг(ТекущийДокумент,"",Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
			КонецЕсли;
			
			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.ДобавитьЗначение(АвансВсего,"АвансВсего");
				ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДС");
				ЧисловыеПараметры.Установить("Сторно",-1);

				ДобавитьОперациюВыбытияТорг(ТекущийДокумент,"",Запрос.Объект,ДатаНалогДок,ТаблицаДокумента,ЧисловыеПараметры);
			КонецЕсли;

			АвансВсего = ЧисловыеПараметры.Получить("АвансВсего");
			АвансНДС   = ЧисловыеПараметры.Получить("АвансНДС");

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииВыбытияВыбытиеПрочее()

//*****************************************************************************
// ПолучитьОперацииВыбытияИмущества()
//
// Описание:
//  Формирует таблицу операций приобретения имущества, работ, услуг, прав, за период
// указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ПолучитьОперацииВыбытияИмущества()

	Перем ДатаНалогДок;
	
	Запрос = СоздатьОбъект("Запрос");

	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("НомерПроводки","Число");
	ТабОпер.НоваяКолонка("Объект",);
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("Задолженность","Число");
	ТабОпер.НоваяКолонка("УсловиеВыбытия");
	ТабОпер.НоваяКолонка("ВидДохода");
	ТабОпер.НоваяКолонка("ЭлементДохода");
	
	СчетаДтСтр = "50,51,57,58.3,62,76.5,76.55";
	СчетаКтСтр = "90.1.1,91.1";

	// Запрос для выборки документов, которые были отсторнированы документом "Сторно" в текущем налоговом периоде
	ВидыСторнируемыхДок = СоздатьОбъект("СписокЗначений");
	ВидыСторнируемыхДок.ДобавитьЗначение("ОтчетКомитенту");
	ВидыСторнируемыхДок.ДобавитьЗначение("ВозвратОтПокупателя");
	ВидыСторнируемыхДок.ДобавитьЗначение("ВозвратПоставщику");
	ВидыСторнируемыхДок.ДобавитьЗначение("ОтчетКомиссионера");
	ВидыСторнируемыхДок.ДобавитьЗначение("ОтчетККМ");
	ВидыСторнируемыхДок.ДобавитьЗначение("РеализацияРозница");
	ВидыСторнируемыхДок.ДобавитьЗначение("Реализация");
	ВидыСторнируемыхДок.ДобавитьЗначение("РеализацияПрочее");
	
	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыСторнируемыхДок);

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("Реализация");
	ВидыДокументов.ДобавитьЗначение("РеализацияПрочее");
	ВидыДокументов.ДобавитьЗначение("ОтчетКомиссионера");

	ЗапросПоАвансам = ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,);

	// Заполнение по реализациям ПОСРЕДНИЧЕСКИХ УСЛУГ, оформленных документом "ОТЧЕТ КОМИТЕНТУ"
	ПолучитьОперацииВыбытияОтчетКомитенту(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям ВОЗВРАТЫ ТМЦ ОТ ПОКУПАТЕЛЕЙ оформленных документом "ВОЗВРАТ ОТ ПОКУПАТЕЛЯ"
	ПолучитьОперацииВыбытияВозвратыОтПокупателей(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям ВОЗВРАТЫ ТМЦ ПОСТАВЩИКАМ оформленных документом "ВОЗВРАТ ПОСТАВЩИКУ"
	ПолучитьОперацииВыбытияВозвратыПоставщикам(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);
	
	// Заполнение по операциям РЕАЛИЗАЦИЯ ТМЦ ПЕРЕДАННЫХ НА КОМИССИЮ оформленных документом "ОТЧЕТ КОМИССИОНЕРА"
	ПолучитьОперацииВыбытияОтчетКомиссионера(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам);
	
	// Заполнение по операциям  РОЗНИЧНЫЕ ПРОДАЖИ ТМЦ и УСЛУГ оформленных документами "ОТЧЕТ ККМ" или "РЕАЛИЗАЦИЯ РОЗНИЦА"
	ПолучитьОперацииВыбытияРозничнаяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию);

	// Заполнение по операциям  ОПТОВЫЕ ПРОДАЖИ ТМЦ и УСЛУГ, оформленных документами "Реализация"
	ПолучитьОперацииВыбытияОптоваяРеализация(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам);

	// Заполнение по операциям РЕАЛИЗАЦИИ, оформленных документами "РеализацияПрочее"
	ПолучитьОперацииВыбытияРеализацияПрочее(ТабОпер,ВидыСторнируемыхДок,ДокументыПодлежащиеСторнированию,ЗапросПоАвансам);	
	
КонецПроцедуры // ПолучитьОперацииВыбытияИмущества()

///////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ ЗАЧЕТА ЗАДОЛЖЕННОСТЕЙ ПО ОБЯЗАТЕЛЬСТВАМ СТОРОН
//
// ДобавитьОперациюКорректировкиЗадолженности(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)
// Параметры:
//  ТекущийДокумент - оперативный документ, по которому происходит ввод налогового документа
//  ДатаНалогДок - дата в которой должен быть заведен налоговый документ
//  ЧисловыеПараметры - список значений содержащий:
//    Сторно - знак сумм в налоговом документе (+,-) 
//    ПриходСумма - сумма зачитываемого аванса поставщику
//    ПриходНДС   - сумма НДС по зачитываемому авансу поставщику
//    РасходСумма - сумма зачитываемого аванса покупателя
//    РасходНДС   - сумма НДС по зачитываемому авансу покупателя
//
// Описание:
//  Формирует конкретную строку таблицы операций по зачету задолженностей за период,
//  соответствующий одному налоговому документу
//
Процедура ДобавитьОперациюКорректировкиЗадолженности(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)

	ПриходСумма = Число(ЧисловыеПараметры.Получить("ПриходСумма"));
	РасходСумма = Число(ЧисловыеПараметры.Получить("РасходСумма"));
	ПриходНДС   = Число(ЧисловыеПараметры.Получить("ПриходНДС"));
	РасходНДС   = Число(ЧисловыеПараметры.Получить("РасходНДС"));
	Сторно      = Число(ЧисловыеПараметры.Получить("Сторно"));

	ТабОпер.НоваяСтрока();
	ТабОпер.День =		ДатаНалогДок;
	ТабОпер.Документ =	ПолучитьПустоеЗначение("Документ"); // так как потом свернем по договорам
	ТабОпер.НаименованиеОперации = "Зачет аванса";

	Если (ПриходСумма > 0) И (РасходСумма  = 0) Тогда
	   	// зачет аванса поставщику
		ТабОпер.Контрагент =			ТекущийДокумент.Контрагент;
		ТабОпер.Договор =				ТекущийДокумент.Договор;  
		ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиКредиторская;
		ТабОпер.Сумма =					- (Сторно * ПриходСумма);
		ТабОпер.НДС   =					- (Сторно * (ПриходНДС - РасходНДС));

	ИначеЕсли (РасходСумма > 0) И (ПриходСумма  = 0) Тогда
		// зачет аванса покупателя
		ТабОпер.Контрагент =			ТекущийДокумент.Контрагент;
		ТабОпер.Договор =				ТекущийДокумент.Договор;
		ТабОпер.ПризнакЗадолженности	= ПризнакЗадолженностиДебиторская;
		ТабОпер.Сумма =					- (Сторно * РасходСумма);
		ТабОпер.НДС   =					0;    // при корректировке дебиторской задолженности НДС не изменяется
		
	КонецЕсли;
		
КонецПроцедуры  //ДобавитьОперациюКорректировкиЗадолженности()

//*****************************************************************************
// ДобавитьОперациюКорректировкиЗадолженностиКомиссия(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)
// Параметры:
//  ТекущийДокумент - оперативный документ, по которому происходит ввод налогового документа
//  ДатаНалогДок - дата в которой должен быть заведен налоговый документ
//  ЧисловыеПараметры - список значений содержащий:
//    Сторно - знак сумм в налоговом документе (+,-) 
//    АвансВсегоПокупателя - сумма зачитываемого аванса от покупателя
//    АвансНДСПокупателя   - сумма НДС с зачитываемого аванса от покупателя
//    АвансВсегоКомитенту  - сумма зачитываемого авансу комитенту
//    ПриходСумма - сумма корректировки дебиторской задолженности
//    РасходСумма - сумма корректировки кредиторской задолженности
//
// Описание:
//  Формирует конкретную строку таблицы операций зачета задолженностей между комиссионером и
//  и комитентом, соответствующую одному налоговому документу
//
Процедура ДобавитьОперациюКорректировкиЗадолженностиКомиссия(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)

	Сторно      		 = Число(ЧисловыеПараметры.Получить("Сторно"));
	АвансВсегоПокупателя = Число(ЧисловыеПараметры.Получить("АвансВсегоПокупателя"));
	АвансВсегоКомитенту  = Число(ЧисловыеПараметры.Получить("АвансВсегоКомитенту"));
	АвансНДСПокупателя   = Число(ЧисловыеПараметры.Получить("АвансНДСПокупателя"));
	ПриходСумма          = Число(ЧисловыеПараметры.Получить("ПриходСумма"));
	РасходСумма          = Число(ЧисловыеПараметры.Получить("РасходСумма"));
	
	Если ТекущийДокумент.Вид() = "Реализация" Тогда
		// работаем с покупателем комиссионного товара
		АвансКонтрагента = АвансВсегоПокупателя;	// аванс подлежащий зачету
		СуммаРеализации  = ПриходСумма;				// выручка от реализации покупателю комиссионных товаров
	ИначеЕсли ТекущийДокумент.Вид() = "ОтчетКомитенту" Тогда
		// работаем с комитентом, которому принадлежит комиссионный товар
		АвансКонтрагента = АвансВсегоКомитенту;		// аванс подлежащий зачету
		СуммаРеализации  = РасходСумма;				// выручка от реализации товаров комитента
	КонецЕсли;
	
	Если АвансКонтрагента >= СуммаРеализации Тогда

		// Оплата документа закрывается авансом в полном объеме
		ТабОпер.НоваяСтрока();
		ТабОпер.День =		ДатаНалогДок;
		ТабОпер.Документ =	ПолучитьПустоеЗначение("Документ"); // так как потом свернем по договорам

		Если ТекущийДокумент.Вид() = "Реализация" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности покупателя (комиссия)";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиКредиторская;
			ТабОпер.НДС   =		Сторно * АвансНДСПокупателя;
		ИначеЕсли ТекущийДокумент.Вид() = "ОтчетКомитенту" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности комитента";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиДебиторская;
			ТабОпер.НДС   =		0;
		КонецЕсли;
		
		ТабОпер.Контрагент= ТекущийДокумент.Контрагент;
		ТабОпер.Договор =	ТекущийДокумент.Договор;  
		ТабОпер.Сумма =		(Сторно * СуммаРеализации);

	ИначеЕсли (АвансКонтрагента > 0) И (АвансКонтрагента < СуммаРеализации) Тогда
		// Оплата документа закрывается авансом только частично

		// сначала сделаем корректировку на сумму аванса
		ТабОпер.НоваяСтрока();
		ТабОпер.День =		ДатаНалогДок;
		ТабОпер.Документ =	ПолучитьПустоеЗначение("Документ"); // так как потом свернем по договорам

		Если ТекущийДокумент.Вид() = "Реализация" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности покупателя (комиссия)";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиКредиторская;
			ТабОпер.НДС   =		Сторно * АвансНДСПокупателя;
		ИначеЕсли ТекущийДокумент.Вид() = "ОтчетКомитенту" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности комитента";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиДебиторская;
			ТабОпер.НДС   =		0;
		КонецЕсли;
		
		ТабОпер.Контрагент= ТекущийДокумент.Контрагент;
		ТабОпер.Договор =	ТекущийДокумент.Договор;  
		ТабОпер.Сумма =		(Сторно * АвансКонтрагента);
	
		// теперь сделаем корректировку на оставшуюся сумму
		ТабОпер.НоваяСтрока();
		ТабОпер.День =		ТекущийДокумент.ДатаДок;
		ТабОпер.Документ =	ПолучитьПустоеЗначение("Документ"); // так как потом свернем по договорам

		Если ТекущийДокумент.Вид() = "Реализация" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности покупателя (комиссия)";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиДебиторская;
		ИначеЕсли ТекущийДокумент.Вид() = "ОтчетКомитенту" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности комитента";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиКредиторская;
		КонецЕсли;
		
		ТабОпер.Контрагент= ТекущийДокумент.Контрагент;
		ТабОпер.Договор =	ТекущийДокумент.Договор;  
		ТабОпер.Сумма =		Сторно * (СуммаРеализации - АвансКонтрагента);
		ТабОпер.НДС   =		0;

	ИначеЕсли (АвансКонтрагента = 0) И (СуммаРеализации <> 0) Тогда

		// Зачета аванса делать не нужно - корректируем как отгрузку в счет последующей оплаты
		ТабОпер.НоваяСтрока();
		ТабОпер.День =		ДатаНалогДок;
		ТабОпер.Документ =	ПолучитьПустоеЗначение("Документ"); // так как потом свернем по договорам

		Если ТекущийДокумент.Вид() = "Реализация" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности покупателя (комиссия)";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиДебиторская;
		ИначеЕсли ТекущийДокумент.Вид() = "ОтчетКомитенту" Тогда
			ТабОпер.НаименованиеОперации = "Корректировка задолженности комитента";
			ТабОпер.ПризнакЗадолженности =	ПризнакЗадолженностиКредиторская;
		КонецЕсли;
		
		ТабОпер.Контрагент= ТекущийДокумент.Контрагент;
		ТабОпер.Договор =	ТекущийДокумент.Договор;  
		ТабОпер.Сумма =		Сторно * СуммаРеализации;
		ТабОпер.НДС   =		0;

	КонецЕсли;

КонецПроцедуры //ДобавитьОперациюКорректировкиЗадолженностиКомиссия()

//*****************************************************************************
// ПолучитьОперацииКорректировкиЗадолженности()
//
// Описание:
//  Формирует таблицу операций зачета задолженностей за период,
// указанный в полях ввода ФормДатаНач и ФормДатаКон.
//
Процедура ПолучитьОперацииКорректировкиЗадолженности()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("ПризнакЗадолженности");
	ТабОпер.НоваяКолонка("НомерПроводки", "Число"); // только для комиссионной торговли для раздел. на опл. и аванс
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("НаименованиеОперации","Строка");
	
	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("КорректировкаДолга");
	ВидыДокументов.ДобавитьЗначение("Реализация");
	ВидыДокументов.ДобавитьЗначение("ОтчетКомитенту");

	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыДокументов);

	ЗапросПоАвансам = ЗапросДляКоррекцииНДСсКредиторскойЗадолженности(ВидыДокументов,"Корректировка долга");

	Запрос = СоздатьОбъект("Запрос");
	
	// Обработка ситуаций корректировки задолженностей покупателей или поставщиков
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.Покупатели.ТекущийДокумент,
	|						Регистр.Поставщики.ТекущийДокумент;
	|
	|СуммаРуб =				Регистр.Покупатели.СуммаРуб,
	|						Регистр.Поставщики.СуммаРуб;
	|
	|КодОперации =			Регистр.Покупатели.КодОперации,
	|						Регистр.Поставщики.КодОперации;
	|						
	|Условие(ТекущийДокумент.Вид()  = ""КорректировкаДолга"");
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Группировка ТекущийДокумент;
	|
	|Функция РасходСумма =	Расход(СуммаРуб) Когда (КодОперации <> Перечисление.КодыОпераций.СуммоваяРазница);
	|
	|Функция ПриходСумма =	Приход(СуммаРуб) Когда (КодОперации <> Перечисление.КодыОпераций.СуммоваяРазница);
	|";

	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент = Запрос.ТекущийДокумент;

		Если ЗапросПоАвансам.Получить(ТекущийДокумент,) = 1 Тогда
			АвансНДСПокупки = ЗапросПоАвансам.АвансНДСПокупки;
			АвансНДС		= ЗапросПоАвансам.АвансНДС;
		Иначе
			АвансНДСПокупки = 0;
			АвансНДС		= 0;
		КонецЕсли;        

		ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
		ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПриходСумма,"ПриходСумма");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.РасходСумма,"РасходСумма");
		ЧисловыеПараметры.ДобавитьЗначение(АвансНДСПокупки,   "ПриходНДС");
		ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,  		  "РасходНДС");

		Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
		   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
			//Формирование обычного (несторнирующего) налогового документа  	
			ДобавитьОперациюКорректировкиЗадолженности(ТекущийДокумент,ТекущийДокумент.ДатаДок,ЧисловыеПараметры)
		КонецЕсли;
		
		ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
		ДатаСторно = "";
		
		Если ИндексСторнируемогоДокумента <> 0 Тогда
			//Формирование сторнирующего налогового документа  	
			ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
			ДатаНалогДок = Дата(ДатаСторно);
			ЧисловыеПараметры.Установить("Сторно",-1);

			ДобавитьОперациюКорректировкиЗадолженности(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)
		КонецЕсли;
		
	КонецЦикла;

	// Обработка ситуаций изменения задолженностей покупателя и комитента
	// при реализации комиссионного товара 
    КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(глКО.ЗачтенАвансПокупателя);
	КодыОпераций.ДобавитьЗначение(глКО.ЗачтенАвансПоставщику);
	КодыОпераций.ДобавитьЗначение(глКО.ЗачтеноКомиссионноеВознаграждение);
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =	Регистр.РеализованныйТовар.ТекущийДокумент,
	|					Регистр.Покупатели.ТекущийДокумент,
	|					Регистр.Поставщики.ТекущийДокумент;
	|
	|ДоговорКомитента =	Регистр.РеализованныйТовар.Договор;
	|				
	|СуммаРуб	  	 =	Регистр.РеализованныйТовар.ПродСтоимость;
	|Вознаграждение	 =	Регистр.РеализованныйТовар.Вознаграждение;
	|
	|АвансПокупателя = 	Регистр.Покупатели.СуммаРуб;
	|
	|АвансКомитенту = 	Регистр.Поставщики.СуммаРуб;
	|
	|КодОперации 	= 	Регистр.Покупатели.КодОперации,
	|					Регистр.Поставщики.КодОперации;
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Группировка ТекущийДокумент;
	|
	|Функция ПриходСумма =	Приход(СуммаРуб);
	|Функция РасходСумма =	Расход(СуммаРуб);
	|
	|Функция АвансВсегоПокупателя =	Расход(АвансПокупателя) Когда (КодОперации в КодыОпераций);
	|
	|Функция АвансВсегоКомитенту =	Приход(АвансКомитенту) Когда (КодОперации в КодыОпераций);
	|
	|Функция ПосредническиеУслуги =	Сумма(Вознаграждение);
	|
	|Условие((ТекущийДокумент.Вид() = ""Реализация"") ИЛИ (ТекущийДокумент.Вид() = ""ОтчетКомитенту""));
	|";

	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		Если (Запрос.ПриходСумма = 0)
		   и (Запрос.РасходСумма = 0)
		   и (Запрос.ПосредническиеУслуги = 0) Тогда
		   	Продолжить;
		КонецЕсли;

		ТекущийДокумент = Запрос.ТекущийДокумент;

		Если ЗапросПоАвансам.Получить(ТекущийДокумент,) = 1 Тогда
			АвансНДС		  = ЗапросПоАвансам.АвансНДС;
		Иначе
			АвансНДС		  = 0;
		КонецЕсли;        

		ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
		ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.АвансВсегоПокупателя,"АвансВсегоПокупателя");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.АвансВсегоКомитенту,"АвансВсегоКомитенту");
		ЧисловыеПараметры.ДобавитьЗначение(АвансНДС,"АвансНДСПокупателя");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.ПриходСумма,"ПриходСумма");
		ЧисловыеПараметры.ДобавитьЗначение(Запрос.РасходСумма,"РасходСумма");

		Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
		   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
			//Формирование обычного (несторнирующего) налогового документа  	
			ДобавитьОперациюКорректировкиЗадолженностиКомиссия(ТекущийДокумент,ТекущийДокумент.ДатаДок,ЧисловыеПараметры)
		КонецЕсли;
		
		ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
		ДатаСторно = "";
		
		Если ИндексСторнируемогоДокумента <> 0 Тогда
			//Формирование сторнирующего налогового документа  	
			ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
			ДатаНалогДок = Дата(ДатаСторно);
			ЧисловыеПараметры.Установить("Сторно",-1);

			ДобавитьОперациюКорректировкиЗадолженностиКомиссия(ТекущийДокумент,ДатаНалогДок,ЧисловыеПараметры)
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииКорректировкиЗадолженности()

/////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ РАСЧЕТА КУРСОВЫХ (СУММОВЫХ) РАЗНИЦ
//
//******************************************************************************
//ДобавитьОперациюОтраженияСуммовойРазницы(Запрос, ДатаНалогДок, ЧисловыеПараметры)
// Параметры:
//  Запрос				- ссылка на результаты запроса к оперативным итогам.
//  ДатаНалогДок        - дата налогового документа
// 
//  Список значений "ЧисловыеПараметры" содержит следующие значения:
//  Сторно              - знак сумм в налоговом документе (положительные или отрицательные)
//
// Описание:
//  Добавляет операцию отражения суммовой разницы в результирующую таблиу
//  на основании данных запроса по регистрам.
//
Процедура ДобавитьОперациюОтраженияСуммовойРазницы(Запрос, ДатаНалогДок, ЧисловыеПараметры)

	Сторно       = Число(ЧисловыеПараметры.Получить("Сторно"));

	ТабОпер.НоваяСтрока();

	ТабОпер.День					= ДатаНалогДок;
	ТабОпер.Документ				= Запрос.ТекущийДокумент;
	ТабОпер.Контрагент				= Запрос.ТекущийДокумент.Контрагент;
	ТабОпер.Договор					= Запрос.ТекущийДокумент.Договор;
	ТабОпер.НаименованиеОперации	= глНазваниеДокументаВЖурнале(Запрос.ТекущийДокумент);

	// определяем признак задолженности
	Если (Запрос.ПриходСумма <> 0) Тогда
		// дебиторская задолженность
		ТабОпер.ПризнакЗадолженности = ПризнакЗадолженностиДебиторская;
		// выясняем доход это или расход
		Если (Запрос.ПриходСумма > 0) Тогда
			// это доход
			ТабОпер.ПризнакДоходаРасхода = ПризнакДоходаРасходаДоход;
			ТабОпер.ВидДоходаРасхода	 = ВнереализационныеДоходыСуммовыеРазницы;
			
		Иначе
			// это расход
			ТабОпер.ПризнакДоходаРасхода = ПризнакДоходаРасходаРасход;
			ТабОпер.ВидДоходаРасхода	 = ВнереализационныеРасходыСуммовыеРазницы;
			
		КонецЕсли;

	ИначеЕсли (Запрос.РасходСумма <> 0) Тогда
		// кредиторская задолженность
		ТабОпер.ПризнакЗадолженности = ПризнакЗадолженностиКредиторская;
		// выясняем доход это или расход
		Если (Запрос.РасходСумма < 0) Тогда
			// это доход
			ТабОпер.ПризнакДоходаРасхода = ПризнакДоходаРасходаДоход;
			ТабОпер.ВидДоходаРасхода	 = ВнереализационныеДоходыСуммовыеРазницы;
			
		Иначе
			// это расход
			ТабОпер.ПризнакДоходаРасхода = ПризнакДоходаРасходаРасход;
			ТабОпер.ВидДоходаРасхода	 = ВнереализационныеРасходыСуммовыеРазницы;
			
		КонецЕсли;

	Иначе
		ТабОпер.ПризнакЗадолженности = ПризнакЗадолженностиНеИзменяется;
		
	КонецЕсли;
	
	ТабОпер.Сумма =	Сторно * Мод(Запрос.ПриходСумма + Запрос.РасходСумма);

КонецПроцедуры // ДобавитьОперациюОтраженияСуммовойРазницы()

//*****************************************************************************
// ПолучитьОперацииОтраженияСуммовыхРазниц(ТабОпер,ВидыДокументов,ДокументыПодлежащиеСторнированию)
//  Параметры:
//   ТабОпер - сводная таблица на основе которой потом формируются налоговые документы
//   ВидыДокументов - список видов оперативных документов, подлежащих обработке
//   ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
//  Описание:
//   Формирует таблицу операций отражения суммовых разниц в налоговом учете
//   как прочих внереализационных доходов или расходов.
//
Процедура ПолучитьОперацииОтраженияСуммовыхРазниц(ТабОпер,ВидыДокументов,ДокументыПодлежащиеСторнированию)

	Перем Запрос;
	
	Запрос = СоздатьОбъект("Запрос");

	КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(Перечисление.КодыОпераций.СуммоваяРазница);
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|	
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.КнигаПокупок.ТекущийДокумент,
	|						Регистр.КнигаПродаж.ТекущийДокумент;
	|
	|КодОперации =	 		Регистр.КнигаПокупок.КодОперации,
	|						Регистр.КнигаПродаж.КодОперации;
	|
	|Сумма =				Регистр.КнигаПокупок.СуммаРуб,
	|						Регистр.КнигаПродаж.СуммаРуб;
	|
	|СуммаНДС =				Регистр.КнигаПокупок.СуммаНДС,
	|						Регистр.КнигаПродаж.СуммаНДС;
	|		
	|Группировка ТекущийДокумент;
	|		
	|Функция ПриходСумма =	Приход(Сумма);
	|Функция ПриходСуммаНДС=Приход(СуммаНДС);
	|		
	|Функция РасходСумма =	Расход(Сумма);
	|Функция РасходСуммаНДС=Расход(СуммаНДС);
	|		
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|Условие(КодОперации в КодыОпераций);
	|";

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент	= Запрос.ТекущийДокумент;
		ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
		ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
		
		Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
		   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
			//Формирование обычного (несторнирующего) налогового документа  	
			ДобавитьОперациюОтраженияСуммовойРазницы(Запрос, ТекущийДокумент.ДатаДок, ЧисловыеПараметры);
		КонецЕсли;
		
		ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
		ДатаСторно = "";
		
		Если ИндексСторнируемогоДокумента <> 0 Тогда
			//Формирование сторнирующего налогового документа  	
			ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
			ДатаНалогДок = Дата(ДатаСторно);
			ЧисловыеПараметры.Установить("Сторно",-1);

			ДобавитьОперациюОтраженияСуммовойРазницы(Запрос, ДатаНалогДок, ЧисловыеПараметры);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииОтраженияСуммовыхРазниц()

//*****************************************************************************
// ПолучитьПрочиеВнереализационныеДоходыИРасходы()
//
// Описание:
//  Формирует таблицу прочие внереализационных доходов и расходов за период,
// указанный в полях ввода НачДата и КонДата.
//
Процедура ПолучитьПрочиеВнереализационныеДоходыИРасходы()
	
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("Контрагент","Справочник");
	ТабОпер.НоваяКолонка("Договор","Справочник");
	ТабОпер.НоваяКолонка("ПризнакДоходаРасхода");
	ТабОпер.НоваяКолонка("ВидДоходаРасхода");
	ТабОпер.НоваяКолонка("ПризнакЗадолженности");
	ТабОпер.НоваяКолонка("Сумма","Число");
	ТабОпер.НоваяКолонка("НДС","Число");
	ТабОпер.НоваяКолонка("НаименованиеОперации");
	
	// Анализ оперативных итогов для выявления суммовых разниц, которые подлежат отражению в числе 
	// внереализационных доходов и расходов в налоговом учете
	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	// документы выполняющие движения денежных средств
	ВидыДокументов.ДобавитьЗначение("ПКО");
	ВидыДокументов.ДобавитьЗначение("РКО");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаОплата");
	ВидыДокументов.ДобавитьЗначение("СтрокаВыпискиПриход");
	ВидыДокументов.ДобавитьЗначение("СтрокаВыпискиРасход");
	// документы отражающие поступление ТМЦ, по которым могут возникать суммовые разницы
	ВидыДокументов.ДобавитьЗначение("ВозвратОтПокупателя");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеТМЦ");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеТМЦИмпорт");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеТМЦРозница");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеДопРасходы");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаТМЦ");
	ВидыДокументов.ДобавитьЗначение("СтрокаАвансОтчетаПрочее");
	ВидыДокументов.ДобавитьЗначение("ПоступлениеПрочее");
	// документы отражающие реализацию ТМЦ, по которым могут возникать суммовые разницы
	ВидыДокументов.ДобавитьЗначение("ОтчетКомитенту");
	ВидыДокументов.ДобавитьЗначение("ВозвратПоставщику");
	ВидыДокументов.ДобавитьЗначение("ОтчетКомиссионера");
	ВидыДокументов.ДобавитьЗначение("РеализацияРозница");
	ВидыДокументов.ДобавитьЗначение("Реализация");
	ВидыДокументов.ДобавитьЗначение("РеализацияПрочее");

	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыДокументов);

	// Заполнение таблицы операциями отражающих суммовые разницы
	ПолучитьОперацииОтраженияСуммовыхРазниц(ТабОпер,ВидыДокументов,ДокументыПодлежащиеСторнированию);
	
КонецПроцедуры // ПолучитьПрочиеВнереализационныеДоходыИРасходы() 
	
///////////////////////////////////////////////////////////////////////////////
// ФОРМИРОВАНИЕ ТАБЛИЦЫ ОПЕРАЦИЙ СПИСАНИЯ МАТЕРИАЛОВ, ТОВАРОВ, ПРОДУКЦИИ
//
//*****************************************************************************
// ДобавитьОперациюСписания(ТекущийДокумент,Объект,СтатусПартии,ДатаНалогДок,ЧисловыеПараметры)
// Параметры:
//  ТекущийДокумент - оперативный документ, по которому происходит ввод налогового документа
//  Объект          - объект для налогового учета
//  СтатусПартии - статус партии ТМЦ, которая списывается
//  ДатаНалогДок - дата в которой должен быть заведен налоговый документ
//  ЧисловыеПараметры   - количество сисываемого МПЗ
//
// Описание:
//  Формирует конкретную строку таблицы операций по зачету задолженностей за период,
//  соответствующий одному налоговому документу
//
Процедура ДобавитьОперациюСписания(ТекущийДокумент,Объект,СтатусПартии,ДатаНалогДок,ЧисловыеПараметры)

	Счет = "нет";
		
	Сторно     = ЧисловыеПараметры.Получить("Сторно");
	Количество = ЧисловыеПараметры.Получить("Количество");

	ТабОпер.НоваяСтрока();
	ТабОпер.День =					ДатаНалогДок;
	ТабОпер.Документ =				ТекущийДокумент;
	ТабОпер.НаименованиеОперации =	ТекущийДокумент.ПредставлениеВида();
	ТабОпер.Количество =			Сторно * Количество;
	ТабОпер.СтатусПартии = 			СтатусПартии;

	Если ТекущийДокумент.Вид() = "СписаниеТМЦ" Тогда
		Счет = ТекущийДокумент.Счет;
		ТабОпер.Объект = ТекущийДокумент.Субконто1;
		ТабОпер.МПЗ =	 Объект;

	КонецЕсли;
		
	Если (НайтиСчетВСтроке("20,25", Счет) = 1) Тогда // если расходы материальные, то они всегда прямые
		ТабОпер.ВидРасхода = ВидыРасходовПрямыеРасходы;
		
	ИначеЕсли (НайтиСчетВСтроке("28", Счет) = 1) Тогда
		ТабОпер.Объект = "";                     
		                                                                                               
	ИначеЕсли (НайтиСчетВСтроке("26,44.1.1,44.2,44.3", Счет) = 1) Тогда // это всегда косвенные расходы
		ТабОпер.ВидРасхода = ВидыРасходовКосвенныеРасходы;
		                                                                                               
	ИначеЕсли (НайтиСчетВСтроке("44.1.2", Счет) = 1) Тогда // ЕНВД
		ТабОпер.ВидРасхода = ВидыРасходовНеПринимаемые;
		
	ИначеЕсли НайтиСчетВСтроке("58.2", Счет) = 1 Тогда
		ТабОпер.ВидРасхода = ВидыРасходовПриобретениеЦенныхБумаг;
		ТабОпер.Объект = ТекущийДокумент.Субконто2;	                         

	ИначеЕсли НайтиСчетВСтроке("58.5", Счет) = 1 Тогда
		ТабОпер.ВидРасхода = ВидыРасходовПриобретениеПрав;
		ТабОпер.Объект = ТекущийДокумент.Субконто2;	                         

	ИначеЕсли  ТекущийДокумент.Вид() = "КомплектацияТМЦ" Тогда
		// обработка операций комплектации или разукомплектации ТМЦ
		Разукомплектация = ЧисловыеПараметры.Получить("Разукомплектация");
		Комплект		 = ЧисловыеПараметры.Получить("Комплект");
		ВидТМЦКомп		 = ЧисловыеПараметры.Получить("ВидТМЦКомп");

		Если Разукомплектация = 1 Тогда
			ТабОпер.МПЗ = 		 Комплект;
			Если      Лев(СтатусПартии.Идентификатор(), 1) = "Т" Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПриобретениеТоваров;
				ТабОпер.Объект = 	 Объект;
				
			ИначеЕсли Лев(СтатусПартии.Идентификатор(), 1) = "М" Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПриобретениеМатериалов;
				ТабОпер.Объект = 	 Объект;
				
			ИначеЕсли Лев(СтатусПартии.Идентификатор(), 1) = "П" Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПрямыеРасходы;
				ТабОпер.Объект = 	 "";

			КонецЕсли;
		Иначе
			ТабОпер.МПЗ =	  	 Объект;
			Если ВидТМЦКомп = Перечисление.ВидыТМЦ.Товар Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПриобретениеТоваров;
				ТабОпер.Объект 	= 	 Комплект;
	
			ИначеЕсли ВидТМЦКомп = Перечисление.ВидыТМЦ.Материал Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПриобретениеМатериалов;
				ТабОпер.Объект 	= 	 Комплект;

			ИначеЕсли ВидТМЦКомп = Перечисление.ВидыТМЦ.Продукция Тогда
				ТабОпер.ВидРасхода = ВидыРасходовПрямыеРасходы;
				ТабОпер.Объект = 	 "";
				
			КонецЕсли;
		КонецЕсли;
	
	ИначеЕсли (ТекущийДокумент.Вид() = "РеализацияРозница")
		  или (ТекущийДокумент.Вид() = "ОтчетККМ") Тогда
		ТабОпер.ВидРасхода = ВидыРасходовНеПринимаемые;
		ТабОпер.МПЗ = 		 Объект;

	КонецЕсли;

КонецПроцедуры  // ДобавитьОперациюСписания()

//*****************************************************************************
// ПолучитьОперацииСписанияТМЦ(СтатусыПартий, ДокументыПодлежащиеСторнированию)
//
// Параметры:
//  СтатусыПартий - список значений, содержащий статусы партий, по которым
//                  нужно отбирать операции списания;
//  ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
// Описание:
//  Формирует таблицу операций списания материалов, товаров и продукции,
//  на основе документов оперативного учета "СписаниеТМЦ".
//
Процедура ПолучитьОперацииСписанияТМЦ(СтатусыПартий, ДокументыПодлежащиеСторнированию)
	
	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("СписаниеТМЦ");

	КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(глКО.Списание);

	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СчетСписания = 		Регистр.ПартииНаличие.ТекущийДокумент.СписаниеТМЦ.Счет;
	|
	|СтатусПартии = 		Регистр.ПартииНаличие.СтатусПартии;
	|КодОперации  = 		Регистр.ПартииНаличие.КодОперации;
	|
	|пКоличество =			Регистр.ПартииНаличие.Количество;
	|пСумма =				Регистр.ПартииНаличие.СуммаРуб;
	|
	|Группировка ТекущийДокумент;
	|Группировка Объект без групп;
	|
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Условие(СтатусПартии в СтатусыПартий);
	|
	|Функция Количество =	Расход(пКоличество) Когда (КодОперации в КодыОпераций);
	|Функция Сумма =		Расход(пСумма) 		Когда (КодОперации в КодыОпераций);
	|"
	;

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент		= Запрос.ТекущийДокумент;

		Если глЕстьРеквизитШапки("Счет", ТекущийДокумент.Вид()) = 1 Тогда
			Если ТипЗначенияСтр(ТекущийДокумент.Счет) = "Справочник" Тогда
				Если Найти(ТекущийДокумент.Счет.Код,"10.7")<>0 Тогда
					// Это случай передачи сырья в переработку другой фирме! В налоговом учете не отражается...	
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Пока Запрос.Группировка(2) = 1 Цикл

			ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
			ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
			ЧисловыеПараметры.ДобавитьЗначение(Запрос.Количество,"Количество");
	
			Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
			   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
				//Формирование обычного (несторнирующего) налогового документа  	
				ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ТекущийДокумент.ДатаДок,ЧисловыеПараметры);
			КонецЕсли;
			
			ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
			ДатаСторно = "";
			
			Если ИндексСторнируемогоДокумента <> 0 Тогда
				//Формирование сторнирующего налогового документа  	
				ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
				ДатаНалогДок = Дата(ДатаСторно);
				ЧисловыеПараметры.Установить("Сторно",-1);
	
				ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ДатаНалогДок,ЧисловыеПараметры);
			КонецЕсли;
		
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры //ПолучитьОперацииСписанияТМЦ()

//*****************************************************************************
// ПолучитьОперацииСписанияКомплектация(СтатусыПартий, ДокументыПодлежащиеСторнированию)
//
// Параметры:
//  СтатусыПартий - статусы партий которые должны учитываться
//  ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
// Описание:
//  Формирует таблицу операций списания материалов, товаров и продукции на
//  основе операций комплектации или разукомплектации в оперативном учете
//
Процедура ПолучитьОперацииСписанияКомплектация(СтатусыПартий, ДокументыПодлежащиеСторнированию)

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("КомплектацияТМЦ");

	КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(глКО.Сборка);
	КодыОпераций.ДобавитьЗначение(глКО.Разукомплектация);

	Запрос = СоздатьОбъект("Запрос");
	
	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент;
	|Объект =				Регистр.ПартииНаличие.Номенклатура;
	|СтатусПартии =			Регистр.ПартииНаличие.СтатусПартии;
	|
	|КодОперации  = 		Регистр.ПартииНаличие.КодОперации;
	|
	|пКоличество =			Регистр.ПартииНаличие.Количество;
	|пСумма =				Регистр.ПартииНаличие.СуммаРуб;
	|
	|Группировка ТекущийДокумент;
	|Группировка Объект без групп;
	|Группировка СтатусПартии;
	|
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
	|Функция РасходКоличество =	Расход(пКоличество) Когда(СтатусПартии в СтатусыПартий);
	|Функция РасходСумма =		Расход(пСумма)		Когда(СтатусПартии в СтатусыПартий);
	|Функция ПриходКоличество =	Приход(пКоличество);
	|Функция ПриходСумма =		Приход(пСумма);
	|"
	;

	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент		= Запрос.ТекущийДокумент;
		ПриходПоДокументу	= Запрос.ПриходКоличество;
		РасходПоДокументу	= Запрос.РасходКоличество;
		УжеУчтено			= 0;

		Если РасходПоДокументу = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			Пока Запрос.Группировка(3) = 1 Цикл

				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");

				Если Запрос.КодОперации = Перечисление.КодыОпераций.Разукомплектация Тогда
					// Операция разукомплектации ТМЦ
					Если Запрос.ПриходКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					Коэффициент = 		 Запрос.ПриходКоличество / ПриходПоДокументу;
					КоличествоСписания = Окр(РасходПоДокументу * Коэффициент,3);
                
					Разность = РасходПоДокументу - (УжеУчтено + КоличествоСписания);

					Если (Разность <= 0.005)
					   и (Разность >= -0.005) Тогда
						// учитываем погрешность, которая могла возникнуть при округлениях
						КоличествоСписания = РасходПоДокументу - УжеУчтено;					
					КонецЕсли;

					УжеУчтено = УжеУчтено + КоличествоСписания;
				
					ЧисловыеПараметры.ДобавитьЗначение(КоличествоСписания,"Количество");
					ЧисловыеПараметры.ДобавитьЗначение(1,"Разукомплектация");
					ЧисловыеПараметры.ДобавитьЗначение(ТекущийДокумент.Комплект, "Комплект");

				ИначеЕсли Запрос.КодОперации = Перечисление.КодыОпераций.Сборка Тогда 
					// Операция комплектации ТМЦ 
					Если Запрос.РасходКоличество = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ЧисловыеПараметры.ДобавитьЗначение(Запрос.РасходКоличество, "Количество");
					ЧисловыеПараметры.ДобавитьЗначение(0,"Разукомплектация");
					ЧисловыеПараметры.ДобавитьЗначение(ТекущийДокумент.Комплект, "Комплект");
					ЧисловыеПараметры.ДобавитьЗначение(ТекущийДокумент.ВидТМЦКомп, "ВидТМЦКомп");
				КонецЕсли;
				
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ТекущийДокумент.ДатаДок,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.Установить("Сторно",-1);
		
					ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ДатаНалогДок,ЧисловыеПараметры);
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииСписанияКомплектация()

//*****************************************************************************
// ПолучитьОперацииСписанияПродажаЕНВД(СтатусыПартий, ДокументыПодлежащиеСторнированию)
//
// Параметры:
//  СтатусыПартий - статусы партий которые должны учитываться
//  ДокументыПодлежащиеСторнированию - перечень документов, которые сторнируются в текущем периоде
//
// Описание:
//  Формирует таблицу операций списания материалов, товаров и продукции на
//  основе операций комплектации или разукомплектации в оперативном учете
//
Процедура ПолучитьОперацииСписанияПродажаЕНВД(СтатусыПартий, ДокументыПодлежащиеСторнированию)

	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ОтчетККМ");
	ВидыДокументов.ДобавитьЗначение("РеализацияРозница");
	
	КодыОпераций = СоздатьОбъект("СписокЗначений");
	КодыОпераций.ДобавитьЗначение(глКО.РозничнаяПродажаЕНВД);

	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = "
	|Период с ДатаНачалаВыборки по КонДатаДляЗапросов;
	|		
	|ОбрабатыватьДокументы Проведенные;
	|		
	|ТекущийДокумент =		Регистр.ПартииНаличие.ТекущийДокумент,
	|						Документ.ОтчетККМ.ТекущийДокумент,
	|						Документ.РеализацияРозница.ТекущийДокумент;
	|
			// данные по конкретной позиции ТМЦ или услуги в документе
	|НомерСтроки =			Регистр.ПартииНаличие.НомерСтроки,
	|						Документ.ОтчетККМ.НомерСтроки,
	|						Документ.РеализацияРозница.НомерСтроки;
	|
	|Объект =				Регистр.ПартииНаличие.Номенклатура,
	|						Документ.ОтчетККМ.Номенклатура,
	|						Документ.РеализацияРозница.Номенклатура;
	|
	|ВидОбъект =			Регистр.ПартииНаличие.Номенклатура.ВидНоменклатуры,
	|						Документ.ОтчетККМ.Номенклатура.ВидНоменклатуры,
	|						Документ.РеализацияРозница.Номенклатура.ВидНоменклатуры;
	|						
			// данные по количеству ТМЦ 
	|ПартииКоличество =		Регистр.ПартииНаличие.Количество;
	|
			// данные по каждому статусу партии ТМЦ
	|СтатусПартии =	 		Регистр.ПартииНаличие.СтатусПартии;
	|КодОперации =	 		Регистр.ПартииНаличие.КодОперации;
	|
	|Группировка ТекущийДокумент;
	|Группировка НомерСтроки;
	|Группировка СтатусПартии;
	|		
			// итоги по реализованным ТМЦ 
	|Функция Количество =	Расход(ПартииКоличество);
	|
	|Условие(ТекущийДокумент.ЮрЛицо = ЮрЛицо);
	|Условие((ТекущийДокумент.ДатаДок >= ФормДатаНач) ИЛИ
	|		 ((ТекущийДокумент.ДатаДок >= ДатаНачалаВыборки) И (ТекущийДокумент в ДокументыПодлежащиеСторнированию)));
	|Условие(ТекущийДокумент.ДатаДок <= ФормДатаКон);
	|
			// дополнительно фильтруем третью выборку (исключаем комиссию и внутренние перемещения)
	|Условие(СтатусПартии в СтатусыПартий);
	|Условие(КодОперации в КодыОпераций);
	|Условие(ТекущийДокумент.Вид() в ВидыДокументов);
	|
			// отфильтровываем только розничные продажи c ЕНВД
	|Условие(ТекущийДокумент.ОблагаетсяЕНВД = 1);
	|"
	;
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Сообщить("Запрос не выполнен:
		         |"+ТекстЗапроса+"
				 |", "!!!");
		Возврат;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл

		ТекущийДокумент		= Запрос.ТекущийДокумент;
		
		Пока Запрос.Группировка(2) = 1 Цикл
			Пока Запрос.Группировка(3) = 1 Цикл

				ЧисловыеПараметры = СоздатьОбъект("СписокЗначений");
				ЧисловыеПараметры.ДобавитьЗначение(1,"Сторно");
				ЧисловыеПараметры.ДобавитьЗначение(Запрос.Количество,"Количество");
					
				Если (ТекущийДокумент.ДатаДок >= ФормДатаНач)
				   и (ТекущийДокумент.ДатаДок <= ФормДатаКон) Тогда
					//Формирование обычного (несторнирующего) налогового документа  	
					ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ТекущийДокумент.ДатаДок,ЧисловыеПараметры);
				КонецЕсли;
				
				ИндексСторнируемогоДокумента = ДокументыПодлежащиеСторнированию.НайтиЗначение(ТекущийДокумент);
				ДатаСторно = "";
				
				Если ИндексСторнируемогоДокумента <> 0 Тогда
					//Формирование сторнирующего налогового документа  	
					ДокументыПодлежащиеСторнированию.ПолучитьЗначение(ИндексСторнируемогоДокумента,ДатаСторно);
					ДатаНалогДок = Дата(ДатаСторно);
					ЧисловыеПараметры.Установить("Сторно",-1);
		
					ДобавитьОперациюСписания(ТекущийДокумент,Запрос.Объект,Запрос.СтатусПартии,ДатаНалогДок,ЧисловыеПараметры);
				КонецЕсли;
			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ПолучитьОперацииСписанияПродажаЕНВД()

//*****************************************************************************
// ПолучитьОперацииСписания(СчетУчета)
//
// Параметры:
//  СчетУчета - Строка. Код счета учета МПЗ;
//
// Описание:
//  Формирует таблицу операций списания материалов, товаров и продукции.
//
Процедура ПолучитьОперацииСписания(КодСчета)
 
	ТабОпер = СоздатьОбъект("ТаблицаЗначений");
	ТабОпер.НоваяКолонка("День","Дата");
	ТабОпер.НоваяКолонка("Документ","Документ");
	ТабОпер.НоваяКолонка("ВидРасхода");
	ТабОпер.НоваяКолонка("МПЗ");
	ТабОпер.НоваяКолонка("Количество","Число");
	ТабОпер.НоваяКолонка("Объект");
	ТабОпер.НоваяКолонка("ЭлементРасхода");
	ТабОпер.НоваяКолонка("НаименованиеОперации");
 	ТабОпер.НоваяКолонка("СтатусПартии");

	СтатусыПартий = СоздатьОбъект("СписокЗначений");
	
	Если      КодСчета = "10" Тогда
		СтатусыПартий.ДобавитьЗначение(глСП.М_Запчасть);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Инвентарь);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Полуфабрикат);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Прочее);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Стройматериал);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Сырье);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Тара);
		СтатусыПартий.ДобавитьЗначение(глСП.М_Топливо);
		
	ИначеЕсли КодСчета = "41" Тогда
		СтатусыПартий.ДобавитьЗначение(глСП.Т_Купленный);
		СтатусыПартий.ДобавитьЗначение(глСП.Т_ВРознице);
		СтатусыПартий.ДобавитьЗначение(глСП.Т_Тара);

	ИначеЕсли КодСчета = "43" Тогда
		СтатусыПартий.ДобавитьЗначение(глСП.Продукция);

	КонецЕсли;
	
	// Анализ операций сторнирования
	ВидыДокументов = СоздатьОбъект("СписокЗначений");
	ВидыДокументов.ДобавитьЗначение("ОтчетККМ");
	ВидыДокументов.ДобавитьЗначение("РеализацияРозница");
	ВидыДокументов.ДобавитьЗначение("КомплектацияТМЦ");
 	ВидыДокументов.ДобавитьЗначение("СписаниеТМЦ");

	ДокументыПодлежащиеСторнированию = ПолучитьСписокСторнируемыхДокументов(ВидыДокументов);

	// Анализ операций списания
	ПолучитьОперацииСписанияТМЦ(СтатусыПартий, ДокументыПодлежащиеСторнированию);
	
	// Анализ операций комплектации
	ПолучитьОперацииСписанияКомплектация(СтатусыПартий, ДокументыПодлежащиеСторнированию);

	// Анализ розничных продаж с ЕНВД
	ПолучитьОперацииСписанияПродажаЕНВД(СтатусыПартий, ДокументыПодлежащиеСторнированию);
	
КонецПроцедуры // ПолучитьОперацииСписания()

///////////////////////////////////////////////////////////////////////////////                                                                            
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//*****************************************************************************
// Заполнить(Документ)
//
// Параметры:
//  Документ - Контекст формы или идентификатор документа налогового учета.
//
// Описание:
//  1. В зависимости от вида документа определяет порядок формирования
// таблицы хозяйственных операций.
//  2. При пакетной обработке создает новые документы.
//  3. Полученную таблицу заносит в табличные части документов.
//
Процедура Заполнить(Документ)
	
	ДокВид = ?(ТипЗначенияСтр(Документ) = "Строка", Документ, Документ.Вид());
	
	Если ДокВид = "ПоступленияДенежныхСредств" Тогда
		ПолучитьОперацииПоступленияДенежныхСредств();

	ИначеЕсли ДокВид = "РасходДенежныхСредств" Тогда
		ПолучитьОперацииРасходаДенежныхСредств();
		
	ИначеЕсли ДокВид = "ОперацииПриобретенияИмущества" Тогда
		ПолучитьОперацииПриобретенияИмущества();

	ИначеЕсли ДокВид = "ОперацииВыбытияИмущества" Тогда
		ПолучитьОперацииВыбытияИмущества();

	ИначеЕсли ДокВид = "ЗачетЗадолженности" Тогда
		ПолучитьОперацииКорректировкиЗадолженности();
		
	ИначеЕсли ДокВид = "РасчетКурсовыхРазниц" Тогда
		ПолучитьПрочиеВнереализационныеДоходыИРасходы();

	ИначеЕсли Найти(ДокВид,"СписаниеМатериаловТоваровПродукции") = 1 Тогда
		Если Найти(ДокВид,"Материалы") <> 0 Тогда
			ПолучитьОперацииСписания("10"); 
		ИначеЕсли Найти(ДокВид,"Товары") <> 0 Тогда
			ПолучитьОперацииСписания("41"); 
		ИначеЕсли Найти(ДокВид,"Продукция") <> 0 Тогда
			ПолучитьОперацииСписания("43"); 
		КонецЕсли;

		//Корректируем вид документа
		ДокВид = "СписаниеМатериаловТоваровПродукции";		
	КонецЕсли;
	
	ТабОпер.Сортировать("Документ,День", 1);

	//------------------------------------------------
    
	Попытка ТабОпер.УдалитьКолонку("Документ")		Исключение КонецПопытки;
	Попытка ТабОпер.УдалитьКолонку("НомерПроводки")	Исключение КонецПопытки;

	Правило				=	гПравила.ВыбратьУзел("//Правило[@Имя = """ + ДокВид + """]");
	СписокПараметров	=	"";
	ДатаДокТекущая		=	"";
	
	ТабОпер.ВыбратьСтроки();
	Пока ТабОпер.ПолучитьСтроку() = 1 Цикл
		                             
		ДатаДок	=	ТабОпер.День;
		Если ДатаДокТекущая <> ДатаДок Тогда
			Если ПустоеЗначение(СписокПараметров) = 0 Тогда
				ВыгрузитьПоПравилу( , Правило, , 1, СписокПараметров);
			КонецЕсли;
			ДатаДокТекущая		=	ДатаДок;
			СписокПараметров	=	СоздатьОбъект("СписокЗначений");
			СписокПараметров.Установить("ДатаДок",	ДатаДок);
		КонецЕсли;
		
		ПараметрыСтроки	=	СоздатьОбъект("СписокЗначений");
		СписокПараметров.ДобавитьЗначение(ПараметрыСтроки,	"#Строка");
		          
		Для СчКолонок = 1 По ТабОпер.КоличествоКолонок() Цикл
			ИдКолонки			=	ТабОпер.ПолучитьПараметрыКолонки(СчКолонок);
			ЗначениеРеквизита	=	ТабОпер.ПолучитьЗначение(ТабОпер.НомерСтроки, ИдКолонки);
			ПараметрыСтроки.Установить(ИдКолонки, ЗначениеРеквизита);
		КонецЦикла;
		
	КонецЦикла;		//	перебор строк таблицы
	              
	Если ПустоеЗначение(СписокПараметров) = 0 Тогда
		ВыгрузитьПоПравилу( , Правило, , 1, СписокПараметров);
	КонецЕсли;

КонецПроцедуры // Заполнить()

//******************************************************************************
// ПоКнопкеОткрыть(Объект)
//
// Параметры:
//  Объект - объект, который необходимо открыть.
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Кнопки "Открыть".
//
// Описание:
//  Открывает форму объекта.
//
Процедура ПоКнопкеОткрыть(Объект, ЭлементДиалога="")
	
	Если Объект.Выбран() = 1 Тогда
		ОткрытьФормуМодально(Объект, , -1);
	Иначе
		Активизировать(ЭлементДиалога, 1);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОткрыть()

//******************************************************************************
//	Установить(Режим) 
//
// Параметры:
//  Режим - Строка. "Все" - пометить все строки,
//                  "Сброс" - снять пометку всех строк,
//                  "" - инвертировать пометку всех строк.
//
// Вызывается из формул элементов диалога:
//  Кнопка ВыделитьВсе,
//  Кнопка Инверсия,
//  Кнопка ОчиститьВсе.
//
// Описание:
//  Устанавливает, снимает или инвертирует пометки у списка документов.
//
Процедура Установить(Режим = "") 
	
	Для а = 1 По СписокДокументов.РазмерСписка() Цикл
		Если Режим="Все" Тогда
			СписокДокументов.Пометка(а, 1);
			
		ИначеЕсли Режим="Сброс" Тогда
			СписокДокументов.Пометка(а,0); 
			
		Иначе
			СписокДокументов.Пометка(а,?(СписокДокументов.Пометка(а) = 1, 0, 1)); 
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры  // Установить()

//*****************************************************************************
// Сформировать()
//
// Вызывается из формул элементов диалога:
//  Кнопка "Сформировать".
//
// Описание:
//  Вызывает процедуру заполнения для каждого, указанного пользователем,
// вида документов.
//
Процедура Сформировать()
	
	Если ПроверкаДаты(1) = 1 Тогда
		Возврат;
	КонецЕсли;

	Если ПустоеЗначение(ЮрЛицо) = 1 Тогда
		Предупреждение("Не выбрано юридическое лицо!");
		               
		Возврат;
		
	КонецЕсли;

	//-------------------------------------------------------
	
	гСчетчикВыгруженныхОбъектов				=	0;
	СписокСписковВыгруженныхОбъектов		=	СоздатьОбъект("СписокЗначений"); 

	
	ТабВыгруженныхОбъектов					=	СоздатьОбъект("ТаблицаЗначений");
	ТабВыгруженныхОбъектов.НоваяКолонка("ИдПравила",	"Строка");
	ТабВыгруженныхОбъектов.НоваяКолонка("ТабОбъектов",	"ТаблицаЗначений");
	
	
	
	гТабКэшРеквизитовЗначений.УдалитьСтроки();
	гТабКэшРеквизитов.УдалитьСтроки();
	гТабКэшПравил.УдалитьСтроки();
	гТабКэшПараметровЗагрузки.УдалитьСтроки();
	УстановитьПараметрыПоУмолчанию();
	

	ПравилаОбмена							=	гПравила.ВыбратьУзел("ПравилаОбмена");
	                                                                                  
	
	гФайлДанных								=	гXMLАнализатор.СоздатьПоследовательноЗаписываемыйДокумент();
	гФайлДанных.ИмяФайла					=	ФормИмяФайлаДанных;
	
	АтрибутыЭлемента						=	гФайлДанных.АтрибутыЭлемента;
	АтрибутыЭлемента.УстановитьАтрибут("ВерсияФормата",				"1.0");
	АтрибутыЭлемента.УстановитьАтрибут("ИдКонфигурацииПриемника",	ПравилаОбмена.ПолучитьАтрибут("ИдКонфигурацииПриемника"),	0);
	АтрибутыЭлемента.УстановитьАтрибут("ИдПравилКонвертации",		ПравилаОбмена.ПолучитьАтрибут("Ид"), 						0);
	АтрибутыЭлемента.УстановитьАтрибут("ДатаНачала",				ПолучитьИдОбъектаИсточника(ФормДатаНач)  );
	АтрибутыЭлемента.УстановитьАтрибут("ДатаОкончания",				ПолучитьИдОбъектаИсточника(ФормДатаКон)  );
	//АтрибутыЭлемента.УстановитьАтрибут("Комментарий",				,	0);
	
	гФайлДанных.ОткрытьЭлемент("ФайлОбмена");
	                          
	
	// Удалим ненужные правила очистки
	    
	СтрокаУдаляемыхВидов	=	"ЗаписьКнигиПокупок,ЗаписьКнигиПродаж,Операция,СчетФактура,СчетФактураПолученный,ПриходныйОрдер,РасходныйОрдер";
	Выборка					=	ПравилаОбмена.ВыбратьУзлы("УдалитьВсеПоУсловиям");
	Для Сч = 1 по СписокДокументов.РазмерСписка() Цикл
		Если СписокДокументов.Пометка(Сч) = 0 Тогда 
	    	СтрокаУдаляемыхВидов	=	СтрокаУдаляемыхВидов + СписокДокументов.ПолучитьЗначение(Сч) + ","; 
		КонецЕсли;
	КонецЦикла; 
	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		ПравилоОчистки	=	Выборка.ПолучитьУзел(Сч);
		ВидДокументов	=	ПравилоОчистки.ПолучитьАтрибут("Вид");
		Если Найти(СтрокаУдаляемыхВидов, ВидДокументов) > 0 Тогда
			ПравилаОбмена.УдалитьПодчиненный(ПравилоОчистки);
		КонецЕсли;
	КонецЦикла;
	                
	
	гФайлДанных.ВключитьЭлемент(ПравилаОбмена);
	гФайлДанных.Сбросить();

	//-------------------------------------------------------
	
	
	Для а = 1 по СписокДокументов.РазмерСписка() Цикл
		Если СписокДокументов.Пометка(а) = 1 Тогда
			Если СокрЛП(СписокДокументов.ПолучитьЗначение(а)) <> "СписаниеМатериаловТоваровПродукции" Тогда
				Заполнить(СписокДокументов.ПолучитьЗначение(а));
			Иначе
				Заполнить(СписокДокументов.ПолучитьЗначение(а)+"(Материалы)");
				Заполнить(СписокДокументов.ПолучитьЗначение(а)+"(Товары)");
				Заполнить(СписокДокументов.ПолучитьЗначение(а)+"(Продукция)");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	//-------------------------------------------------------
	
	
	гФайлДанных.ЗакрытьЭлемент();
	гФайлДанных.Сбросить();
	гФайлДанных.Завершить();
           
	
	Состояние("Выгрузка данных завершена!");
	Предупреждение("Выгрузка данных завершена!");
	
	
КонецПроцедуры		//	Сформировать()

//*****************************************************************************
// ДействияПриОткрытии(ФлагЧтенияНастройки)
//
// Параметры:
//  ФлагЧтенияНастройки - Число. 0 - настройка не считана.
//                               1 - настройка считана.
//
// Возвращаемое значение:
//  Число - 1 - открыть форму,
//          0 - не открывать форму.
//
// Описаниие: 
//  Обрабатывает параметры формы. Данная обработка должна получать в качестве
// параметра список значений с определенными представлениями. Допустимы следующие 
// представления значений:
//  ВидыДокументов    - Список значений, содержащий идентификаторы документов,
//
Функция ДействияПриОткрытии(ФлагЧтенияНастройки = 0)
	
	Если ТипЗначенияСтр(Форма.Параметр) = "СписокЗначений" Тогда
		Если ТипЗначенияСтр(Форма.Параметр.Получить("ВидыДокументов")) = "СписокЗначений" Тогда
			СписокВидов = Форма.Параметр.Получить("ВидыДокументов");
			СписокДокументов.УдалитьВсе();
			ФормДатаНач = НачГода(РабочаяДата());
		    Для а = 1 по СписокВидов.РазмерСписка() Цикл
				// Найдем документ этого вида с самой поздней датой.
				Док = СоздатьОбъект("Документ." + СписокВидов.ПолучитьЗначение(а));
				Док.ОбратныйПорядок(1);
				Если Док.ВыбратьДокументы(НачГода(РабочаяДата()), РабочаяДата()) = 1 Тогда
					Док.ПолучитьДокумент();
					ДатаПоследнегоДокумента = Док.ТекущийДокумент().ДатаДок + 1;
				Иначе
					ДатаПоследнегоДокумента = НачГода(РабочаяДата());
				КонецЕсли;
				ФормДатаНач = ?(ДатаПоследнегоДокумента > ФормДатаНач, ДатаПоследнегоДокумента, ФормДатаНач);
				
				// Дополним реквизит формы СписокДокументов документом очередного вида.
				СписокДокументов.ДобавитьЗначение(Док.Вид(), Док.ПредставлениеВида());
				СписокДокументов.Пометка(а, 1);
			КонецЦикла;
			ФормДатаКон = Макс(ФормДатаНач, РабочаяДата());
			Возврат 1;
		КонецЕсли;
		
	Иначе
		ФормДатаНач = РабочаяДата();
		ФормДатаКон = РабочаяДата();
		Если ФлагЧтенияНастройки = 0 Тогда
			СписокВидов = СоздатьОбъект("СписокЗначений");
			СписокВидов.ДобавитьЗначение("ПоступленияДенежныхСредств",		"Поступления денежных средств");
			СписокВидов.ДобавитьЗначение("РасходДенежныхСредств",			"Расход денежных средств");
			СписокВидов.ДобавитьЗначение("ОперацииПриобретенияИмущества",	"Операции приобретения имущества, работ, услуг, прав");
			СписокВидов.ДобавитьЗначение("ОперацииВыбытияИмущества", 		"Операции выбытия имущества, работ, услуг, прав");
			СписокВидов.ДобавитьЗначение("ЗачетЗадолженности", 				"Корректировка задолженности");
			СписокВидов.ДобавитьЗначение("РасчетКурсовыхРазниц", 			"Прочие внереализационные доходы и расходы");
			СписокВидов.ДобавитьЗначение("СписаниеМатериаловТоваровПродукции","Списание материалов, товаров, продукции");
			
			СписокВидов.Выгрузить(СписокДокументов);
			
			Для а = 1 по СписокДокументов.РазмерСписка() Цикл
				СписокДокументов.Пометка(а, 1);
			КонецЦикла;
			
			//Для а = 1 по СписокВидов.РазмерСписка() Цикл
			//	ДокВид = СписокВидов.ПолучитьЗначение(а);
			//	ДокПредставление = Метаданные.Документ(ДокВид).Представление();
			//	СписокДокументов.ДобавитьЗначение(ДокВид, ДокПредставление);
			//	СписокДокументов.Пометка(а, 1);
			//КонецЦикла;
			            
			
			
		КонецЕсли;
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции // ДействияПриОткрытии()

///////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	СтатусВозврата(ДействияПриОткрытии(ФлагЧтенияНастройки));
	
	НачальнаяИнициализация();

КонецПроцедуры // ПриОткрытии()

//*****************************************************************************
// Предопределенная процедура
//
Процедура ПриПовторномОткрытии()
	
	СтатусВозврата(ДействияПриОткрытии());

КонецПроцедуры // ПриПовторномОткрытии()

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
                                                                                                    
                                                                                                    
Процедура ИнициализацияВыгрузкиНабораДанных()
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск правил выгрузки данных (проводок, документов и др.)
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"ExtForms\RTr9_Ac4.xml"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"RTr9_Ac4.xml"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"RTr9_Ac4.xml"	);
	
	гПутьОбъекта_ПравилаКонвертации			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	                               
	
	Если ПустоеЗначение(гПутьОбъекта_ПравилаКонвертации) = 1 Тогда
		Предупреждение("Не найден файл правил конвертации: RTr9_Ac4.xml
		                |
						|Следует разместить данный файл в каталоге
						|ExtForms информационной базы!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	ВерсияАнализатора	=	гXMLАнализатор.ВерсияАнализатора;
	Если ВерсияАнализатора <> "2.0" Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;

	
	ЗагрузитьПравилаКонвертации();
	

	ФормЮрЛицо								=	глПользователь.ОсновнаяФирма.ЮрЛицо;
	
	ФормИмяФайлаДанных						=	КаталогПользователя()	+	"DTr9_Ac4.xml";
	
	
	ФормКолвоБуферизуемыхОбъектов			=	50;
	ФормФлЗапоминатьСсылки					=	1;
	
	
	гСписокПараметров						=	СоздатьОбъект("СписокЗначений");
	гТабОбъектов							=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	             
КонецПроцедуры		//	ИнициализацияВыгрузкиНабораДанных()

//--------------------------------------------------------------------------------------------------

Процедура НачальнаяИнициализация()
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	

	РасположениеФайла(гСтрПуть, гИмяФайла);
	
	гПутьОбъекта_ИсполняемыйКод			=	КаталогИБ() + "CDExpVar.txt";
	
	гПутьОбъекта_ДаннаяОбработка		=	гСтрПуть + гИмяФайла;
	                                
	
	ИнициализацияВыгрузкиНабораДанных();
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация кэш-таблиц
	
	гТабКэшРеквизитов	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитов.НоваяКолонка("Ид",								"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Источник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Вид",						"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Вид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Длина",					"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("Преобразование",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Правило",							"Строка");
	
	//гТабКэшРеквизитов.НоваяКолонка("ЕстьПроцедура",					"Число", 1, 0);
	//гТабКэшРеквизитов.НоваяКолонка("ПолучитьИзПараметров",			"Число", 1, 0);
	
	гТабКэшРеквизитов.НоваяКолонка("ЕстьПроцедура",						"Число");	//	так работает быстрее
	гТабКэшРеквизитов.НоваяКолонка("ПолучитьИзПараметров",				"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("ПараметрыПравила",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("СпособВыгрузки",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("СпособЗагрузки",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Условия");
	гТабКэшРеквизитов.НоваяКолонка("ВидУсловия", 						"Число");	// 0 - не задано, 1 - по объекту, 2 - по реквизиту
	
	//--------------------
	
	гТабКэшРеквизитовЗначений	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Ид",						"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Вид",				"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Вид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Длина",			"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Преобразование",			"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Правило",					"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ЕстьПроцедура",				"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("ПараметрыПравила",			"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Условия");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ВидУсловия", 				"Число");	// 1 - условие задано
	
	//--------------------
	
	гТабКэшПравил	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("Ид",									"Строка");
	
	гТабКэшПравил.НоваяКолонка("Правило");
	гТабКэшПравил.НоваяКолонка("Условия");
	гТабКэшПравил.НоваяКолонка("ВидУсловия", 							"Число");	// 1 - условие задано
	
	гТабКэшПравил.НоваяКолонка("ПоСсылкам",								"Число");
	
	гТабКэшПравил.НоваяКолонка("Источник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Источник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("Приемник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Приемник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("ИдСинхронизирующегоРеквизита",			"Строка");
	
	гТабКэшПравил.НоваяКолонка("Преобразование",						"Строка");
	гТабКэшПравил.НоваяКолонка("ПравилоПереадресации",					"Строка");
	гТабКэшПравил.НоваяКолонка("ПараметрыЗагрузки",						"Строка");
	
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовПоиска",					"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитов",							"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовСтрок",					"ТаблицаЗначений");
	
	//--------------------
	
	гТабКэшПараметровЗагрузки	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Ид",						"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Дата",						"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗамещатьНайденные",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("НовыеНеСоздавать",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("СпособЗагрузки",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусУдаления",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроводок",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроведения",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусРасчетныхДокументов",	"Строка");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ДатаТекущегоПериодаЖР",		"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьОперации",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьЗаписиЖР",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ПравилоОпераций");
	
КонецПроцедуры		//	НачальнаяИнициализация()

//--------------------------------------------------------------------------------------------------

Функция ПравилоПоИмени(Имя)

	Возврат гПравила.ВыбратьУзел("//Правило[@Имя = """ + Имя + """]");
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьРеквизит(Приемник, ИдРеквизита, Значение="", Объект="", ТипПриемника="", ВидПриемника="", ПравилоИлиИмя="", ПараметрыПравила="")
    
	Если		ПустоеЗначение(Значение) = 0 Тогда
		
		Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
		Реквизит.УстановитьАтрибут("Идентификатор",	ИдРеквизита);
		Реквизит.УстановитьАтрибут("Значение",		СокрЛП(Значение));
		УстановитьАтрибут(Реквизит, "ТипЗначения", ТипПриемника);
		УстановитьАтрибут(Реквизит, "ВидЗначения", ВидПриемника);
	
	ИначеЕсли	(ПустоеЗначение(Объект) = 0) Или (ПустоеЗначение(ПравилоИлиИмя) = 0) Тогда
		                           
		УзелСсылки			=	1;
		Правило				=	"";
		ИдПравила			=	"";
		Если ПустоеЗначение(ПравилоИлиИмя) = 0 Тогда
			Правило			=	ПравилоИлиИмя;
			Если ТипЗначенияСтр(ПравилоИлиИмя) = "Строка" Тогда
				Правило		=	ПравилоПоИмени(ПравилоИлиИмя);
			КонецЕсли;
		КонецЕсли;
		ВыгрузитьПоПравилу(Объект, Правило, ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		Если УзелСсылки <> 1 Тогда
			Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
			Реквизит.УстановитьАтрибут("Идентификатор",	ИдРеквизита);
			УстановитьАтрибут(Реквизит, "ТипЗначения", ТипПриемника);
			УстановитьАтрибут(Реквизит, "ВидЗначения", ВидПриемника);
			Реквизит.ДобавитьПодчиненный(УзелСсылки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры		//	ВыгрузитьРеквизит()

//--------------------------------------------------------------------------------------------------

//Функция	ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")
//	Возврат(0);
//КонецФункции

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------


// Сюда необходимо скопировать дополнительный програиммный код (скрипты)


//--------------------------------------------------------------------------------------------------


//	Есть табличная часть
Функция Условие_ID1С_0000552(Объект, ИдПравила)

	Если Объект.КоличествоСтрок() > 0 Тогда Возврат(1) КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Конвертируем табл. часть счета фактуры
Функция ПравилоРеквизита_ID1С_0007616(Источник, Приемник, СписокПараметровПравила)

	Док =	Источник;
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		Эл_Строка				=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
		
		Товар					=	Док.Наименование;
		Количество				=	Док.Количество;
		Цена					=	Док.Цена;
		НДС						=	Док.СуммаНДС;
		СтавкаНДС				=	Док.СтавкаНДС;
		ГТД						=	Док.ГТД;
		СтранаПроисхождения		=	СокрЛП(Док.СтранаПроисхождения);
		                    
		
		Если		(Док.СФНаАванс = 1)		Тогда
			Сумма				=	Док.Сумма;
			Всего				=	Док.Сумма;
		ИначеЕсли	(Док.СуммаВклНДС = 1)	Тогда
			Сумма				=	Док.Сумма - НДС;	//	это сумма без НДС
			Всего				=	Док.Сумма;
		Иначе
			Сумма				=	Док.Сумма;
			Всего				=	Док.Сумма + НДС;
		КонецЕсли;
		
		
		Если Док.СуммаВклНП = 1 Тогда
			Сумма				=	Сумма - Док.СуммаНП;
			Всего				=	Всего - Док.СуммаНП;
		КонецЕсли;
		
		
		ВыгрузитьРеквизит(Эл_Строка, "Товар", Товар, 	, "Строка");
		
		ВыгрузитьРеквизит(Эл_Строка, "ГТД", , 				ГТД);
		ВыгрузитьРеквизит(Эл_Строка, "СтранаПроисхождения",	СтранаПроисхождения);
		
		ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,			СтавкаНДС);
		
		ВыгрузитьРеквизит(Эл_Строка, "Количество", 			Количество);
		ВыгрузитьРеквизит(Эл_Строка, "Цена", 				Цена);
		ВыгрузитьРеквизит(Эл_Строка, "НДС", 				НДС);
		ВыгрузитьРеквизит(Эл_Строка, "Сумма", 				Сумма);
		ВыгрузитьРеквизит(Эл_Строка, "Всего", 				Всего);
		
		ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"91.2");
		ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,	"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
		
	КонецЦикла;		//	по строкам документа
	
	Возврат("#Прервать");

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005550(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005551(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0005944(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0005946(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0007495(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидКонтрагента
Функция ПравилоРеквизита_ID1С_0005507(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
		Возврат	"ЧастноеЛицо";
	Иначе
		Возврат	"Организация";
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидНоменклатуры
Функция ПравилоРеквизита_ID1С_0005528(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		ТипНоменклатуры	 = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ТипНоменклатуры = "Продукция" Тогда
			Возврат(0);
		КонецЕсли;
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат(0);
	КонецЕсли;
	
	Возврат(111111111111);   // генерить объект по этому правилу

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ДатаНомерСчетаФактуры
Функция ПравилоРеквизита_ID1С_0007594(Источник, Приемник, СписокПараметровПравила)

	Возврат СокрЛП(Источник.ДатаДокВходящий) + " № " + СокрЛП(Источник.НомерДокВходящий);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ДатаОприходования  ( !! задано условие !! )
Функция ПравилоРеквизита_ID1С_0007596(Источник, Приемник, СписокПараметровПравила)

	Возврат Источник.ДокОснование.ДатаДок;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Договор
Функция ПравилоРеквизита_ID1С_0005591(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Договор");
	Если Зн. Вид() = "Договоры" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Договор
Функция ПравилоРеквизита_ID1С_0005592(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Договор");
	Если Зн. Вид() <> "Договоры" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ИНН
Функция ПравилоРеквизита_ID1С_0005505(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ИНН;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Контрагент
Функция ПравилоРеквизита_ID1С_0005589(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Контрагент");
	Если Зн. Вид() = "Контрагенты" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Контрагент
Функция ПравилоРеквизита_ID1С_0005590(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Контрагент");
	Если Зн. Вид() <> "Контрагенты" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  МПЗ
Функция ПравилоРеквизита_ID1С_0007789(Источник, Приемник, СписокПараметровПравила)

	СтатусПартии	=	СписокПараметровПравила.Получить("СтатусПартии");
	Если Лев(СтатусПартии.Идентификатор(), 1) = "М" Тогда
		Возврат	СписокПараметровПравила.Получить("МПЗ");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  МПЗ
Функция ПравилоРеквизита_ID1С_0007788(Источник, Приемник, СписокПараметровПравила)

	СтатусПартии	=	СписокПараметровПравила.Получить("СтатусПартии");
	Если Найти("ТП", Лев(СтатусПартии.Идентификатор(), 1)) > 0 Тогда
		Возврат	СписокПараметровПравила.Получить("МПЗ");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидОбъекта
Функция ПравилоРеквизита_ID1С_0007784(Источник, Приемник, СписокПараметровПравила)
	
    СтатусПартии = СписокПараметровПравила.ПолучитьЗначение(2).Получить("СтатусПартии");
	Если Лев(СтатусПартии.Идентификатор(), 1) = "М" Тогда
		Возврат	0;
	ИначеЕсли Лев(СтатусПартии.Идентификатор(), 1) = "П" Тогда
		Возврат	2;
	Иначе
		Возврат	1;
	КонецЕсли;
КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007430(Источник, Приемник, СписокПараметровПравила)

	ВидРасхода	=	СписокПараметровПравила.Получить("ВидРасхода");
	
	Если ВидРасхода = ВидыРасходовПриобретениеТоваров Тогда
	
		СписокПараметровПравила.Установить("ТипНоменклатуры", "Товар");
	
		Возврат	СписокПараметровПравила.Получить("Объект");
	
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007431(Источник, Приемник, СписокПараметровПравила)

	ВидРасхода	=	СписокПараметровПравила.Получить("ВидРасхода");
	
	Если ВидРасхода = ВидыРасходовПриобретениеМатериалов Тогда
		Возврат	СписокПараметровПравила.Получить("Объект");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007432(Источник, Приемник, СписокПараметровПравила)

	ВидРасхода	=	СписокПараметровПравила.Получить("ВидРасхода");
	
	Если (ВидРасхода <> ВидыРасходовПриобретениеТоваров) И (ВидРасхода <> ВидыРасходовПриобретениеМатериалов) Тогда
		
		Объект = СписокПараметровПравила.Получить("Объект");
		Если ТипЗначенияСтр(Объект) = "Строка" Тогда
			Возврат(0);
		Иначе
			Возврат(Объект);
		КонецЕсли;
			
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007406(Источник, Приемник, СписокПараметровПравила)

	Если СокрЛП(СписокПараметровПравила.Получить("Объект")) = "Комиссионное вознаграждение" Тогда
		Возврат(0);	
	КонецЕсли;
	
	ВидДохода	=	СписокПараметровПравила.Получить("ВидДохода");
	
	Если		Найти(ВидДохода, "РеализацияТоваров") > 0 Тогда
	
		СписокПараметровПравила.Установить("ТипНоменклатуры", "Товар");
		Возврат	СписокПараметровПравила.Получить("Объект");
	
	ИначеЕсли	Найти(ВидДохода, "РеализацияПродукции") > 0 Тогда
	
		СписокПараметровПравила.Установить("ТипНоменклатуры", "Продукция");
		Возврат	СписокПараметровПравила.Получить("Объект");
	
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007407(Источник, Приемник, СписокПараметровПравила)

	ВидДохода	=	СписокПараметровПравила.Получить("ВидДохода");
	
	Если		Найти(ВидДохода, "РеализацияТоваров") > 0 Тогда
	ИначеЕсли	Найти(ВидДохода, "РеализацияПродукции") > 0 Тогда
	ИначеЕсли	ВидДохода = ВидыДоходовРеализацияПрочегоИмущества	Тогда
	Иначе
		Объект = СписокПараметровПравила.Получить("Объект");
		Если ТипЗначенияСтр(Объект) = "Строка" Тогда
			Возврат(0);
		Иначе
			Возврат(Объект);
		КонецЕсли;
	КонецЕсли;
	
	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Объект
Функция ПравилоРеквизита_ID1С_0007806(Источник, Приемник, СписокПараметровПравила)

	ВидДохода	=	СписокПараметровПравила.Получить("ВидДохода");
	
	Если ВидДохода = ВидыДоходовРеализацияПрочегоИмущества	Тогда
	                        
		Объект = СписокПараметровПравила.Получить("Объект");
		Если ТипЗначенияСтр(Объект)= "Справочник" Тогда
			Если Объект.Вид() = "Номенклатура" Тогда
				Возврат(Объект);
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Основание
Функция ПравилоРеквизита_ID1С_0007621(Источник, Приемник, СписокПараметровПравила)

	Возврат "Лента ККМ № " + Источник.НомерЛентыККМ;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПолнНаименование
Функция ПравилоРеквизита_ID1С_0005502(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ПолнНаименование;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПочтовыйАдрес
Функция ПравилоРеквизита_ID1С_0005504(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ФактАдрес;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПринятоОт
Функция ПравилоРеквизита_ID1С_0007502(Источник, Приемник, СписокПараметровПравила)

	Возврат "Прием выручки ККМ";

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  СубСчет10
Функция ПравилоРеквизита_ID1С_0005531(Источник, Приемник, СписокПараметровПравила)

	СчетДт	=	СписокПараметровПравила;
	СчетКт	=	ОтделитьРазделителем(СчетДт, ",");
	Если Найти(СчетДт, "10.") > 0 Тогда
		Возврат(СчетДт);
	Иначе
		Возврат(СчетКт);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Телефоны
Функция ПравилоРеквизита_ID1С_0005506(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.Телефоны;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ТипНоменклатуры
Функция ПравилоРеквизита_ID1С_0005523(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		ТипНоменклатуры = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ПустоеЗначение(ТипНоменклатуры) = 1 Тогда
			Возврат("Товар");
		КонецЕсли;
		
		Возврат ТипНоменклатуры;
		
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат("Продукция");
	Иначе
		Возврат("Товар");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ТипТовара
Функция ПравилоРеквизита_ID1С_0005522(Источник, Приемник, СписокПараметровПравила)

	Если		Найти(СписокПараметровПравила, "41.1") > 0	Тогда
		Возврат("Собственный");
	ИначеЕсли	Найти(СписокПараметровПравила, "41.3") > 0	Тогда
		Возврат("Тара");
	ИначеЕсли	Найти(СписокПараметровПравила, "004") > 0	Тогда
		Возврат("НаКомиссии");
	ИначеЕсли	Найти(СписокПараметровПравила, "принятый") > 0  Тогда
		Возврат("НаКомиссии");
	Иначе
		Возврат("Собственный");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ЮридическийАдрес
Функция ПравилоРеквизита_ID1С_0005503(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ЮрАдрес;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	ВалютаВзаиморасчетов  -->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005500(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	ВидНоменклатуры  -->  ВидНоменклатуры
Функция ПравилоРеквизита_ID1С_0005524(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		ТипНоменклатуры	 = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ТипНоменклатуры = "Продукция" Тогда
			Возврат(1111111111);   // генерить объект по этому правилу
		КонецЕсли;
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат(1111111111); 
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Код  -->  Код
Функция ПравилоРеквизита_ID1С_0004564(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		ТипНоменклатуры = СписокПараметровПравила.Получить("ТипНоменклатуры");
		
		Если ТипНоменклатуры = "Продукция" Тогда
			Возврат	"П" + Источник.Код;  // продукция
		Иначе
			Возврат	"С" + Источник.Код;  // собственный
		КонецЕсли;
		
	Иначе
	
		Если		Найти(СписокПараметровПравила, "41.1") > 0	Тогда
			Возврат	"С" + Источник.Код;  // собственный
		ИначеЕсли	Найти(СписокПараметровПравила, "41.3") > 0	Тогда
			Возврат	"Т" + Источник.Код;  // тара
		ИначеЕсли	Найти(СписокПараметровПравила, "004") > 0	Тогда
			Возврат	"К" + Источник.Код;  // комиссионный
		ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
			Возврат	"П" + Источник.Код;  // продукция
		ИначеЕсли	Найти(СписокПараметровПравила, "принятый") > 0	Тогда
			Возврат	"К" + Источник.Код;  // комиссионный
		Иначе
			Возврат	"С" + Источник.Код;  // собственный
		КонецЕсли;
	
	КонецЕсли;

Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Комиссионное вознаграждение
Функция ПравилоРеквизита_ID1С_0007805(Источник, Приемник, СписокПараметровПравила)

	Если СокрЛП(СписокПараметровПравила.Получить("Объект")) = "Комиссионное вознаграждение" Тогда
		Возврат	"111111";
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0005532(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0005541(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0007485(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0009495(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004560(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004567(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0005529(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004570(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидДоходаРасхода
Функция ПравилоРеквизита_ID1С_0018663(Источник, Приемник, СписокПараметровПравила)

	ПризнакДоходаРасхода = СписокПараметровПравила.Получить("ПризнакДоходаРасхода");
	
	Если ПризнакДоходаРасхода = "Доход" Тогда
	
		Возврат	СписокПараметровПравила.Получить("ВидДоходаРасхода");
	
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидДоходаРасхода
Функция ПравилоРеквизита_ID1С_0018664(Источник, Приемник, СписокПараметровПравила)

	ПризнакДоходаРасхода = СписокПараметровПравила.Получить("ПризнакДоходаРасхода");
	
	Если ПризнакДоходаРасхода = "Расход" Тогда
	
		Возврат	СписокПараметровПравила.Получить("ВидДоходаРасхода");
	
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------


Функция ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")

	Если Вид = "" Тогда

		Возврат(1);

	ИначеЕсли Вид = "Условие" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		ИначеЕсли Ид = "ID1С_0000552" Тогда
			Возврат Условие_ID1С_0000552(Источник, СписокПараметровПравила);	//	Есть табличная часть
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоВыборкиОбъектов" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизита" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		ИначеЕсли Ид = "ID1С_0007616" Тогда
			Возврат ПравилоРеквизита_ID1С_0007616(Источник, Приемник, СписокПараметровПравила);	//	Конвертируем табл. часть счета фактуры
		ИначеЕсли Ид = "ID1С_0005550" Тогда
			Возврат ПравилоРеквизита_ID1С_0005550(Источник, Приемник, СписокПараметровПравила);	//	-->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005551" Тогда
			Возврат ПравилоРеквизита_ID1С_0005551(Источник, Приемник, СписокПараметровПравила);	//	-->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005944" Тогда
			Возврат ПравилоРеквизита_ID1С_0005944(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0005946" Тогда
			Возврат ПравилоРеквизита_ID1С_0005946(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0007495" Тогда
			Возврат ПравилоРеквизита_ID1С_0007495(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0005507" Тогда
			Возврат ПравилоРеквизита_ID1С_0005507(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидКонтрагента
		ИначеЕсли Ид = "ID1С_0005528" Тогда
			Возврат ПравилоРеквизита_ID1С_0005528(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидНоменклатуры
		ИначеЕсли Ид = "ID1С_0007594" Тогда
			Возврат ПравилоРеквизита_ID1С_0007594(Источник, Приемник, СписокПараметровПравила);	//	-->  ДатаНомерСчетаФактуры
		ИначеЕсли Ид = "ID1С_0007596" Тогда
			Возврат ПравилоРеквизита_ID1С_0007596(Источник, Приемник, СписокПараметровПравила);	//	-->  ДатаОприходования  ( !! задано условие !! )
		ИначеЕсли Ид = "ID1С_0005591" Тогда
			Возврат ПравилоРеквизита_ID1С_0005591(Источник, Приемник, СписокПараметровПравила);	//	-->  Договор
		ИначеЕсли Ид = "ID1С_0005592" Тогда
			Возврат ПравилоРеквизита_ID1С_0005592(Источник, Приемник, СписокПараметровПравила);	//	-->  Договор
		ИначеЕсли Ид = "ID1С_0005505" Тогда
			Возврат ПравилоРеквизита_ID1С_0005505(Источник, Приемник, СписокПараметровПравила);	//	-->  ИНН
		ИначеЕсли Ид = "ID1С_0005589" Тогда
			Возврат ПравилоРеквизита_ID1С_0005589(Источник, Приемник, СписокПараметровПравила);	//	-->  Контрагент
		ИначеЕсли Ид = "ID1С_0005590" Тогда
			Возврат ПравилоРеквизита_ID1С_0005590(Источник, Приемник, СписокПараметровПравила);	//	-->  Контрагент
		ИначеЕсли Ид = "ID1С_0007789" Тогда
			Возврат ПравилоРеквизита_ID1С_0007789(Источник, Приемник, СписокПараметровПравила);	//	-->  МПЗ
		ИначеЕсли Ид = "ID1С_0007788" Тогда
			Возврат ПравилоРеквизита_ID1С_0007788(Источник, Приемник, СписокПараметровПравила);	//	-->  МПЗ
		ИначеЕсли Ид = "ID1С_0007784" Тогда
			Возврат ПравилоРеквизита_ID1С_0007784(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидОбъекта
		ИначеЕсли Ид = "ID1С_0007430" Тогда
			Возврат ПравилоРеквизита_ID1С_0007430(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007431" Тогда
			Возврат ПравилоРеквизита_ID1С_0007431(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007432" Тогда
			Возврат ПравилоРеквизита_ID1С_0007432(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007406" Тогда
			Возврат ПравилоРеквизита_ID1С_0007406(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007407" Тогда
			Возврат ПравилоРеквизита_ID1С_0007407(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007806" Тогда
			Возврат ПравилоРеквизита_ID1С_0007806(Источник, Приемник, СписокПараметровПравила);	//	-->  Объект
		ИначеЕсли Ид = "ID1С_0007621" Тогда
			Возврат ПравилоРеквизита_ID1С_0007621(Источник, Приемник, СписокПараметровПравила);	//	-->  Основание
		ИначеЕсли Ид = "ID1С_0005502" Тогда
			Возврат ПравилоРеквизита_ID1С_0005502(Источник, Приемник, СписокПараметровПравила);	//	-->  ПолнНаименование
		ИначеЕсли Ид = "ID1С_0005504" Тогда
			Возврат ПравилоРеквизита_ID1С_0005504(Источник, Приемник, СписокПараметровПравила);	//	-->  ПочтовыйАдрес
		ИначеЕсли Ид = "ID1С_0007502" Тогда
			Возврат ПравилоРеквизита_ID1С_0007502(Источник, Приемник, СписокПараметровПравила);	//	-->  ПринятоОт
		ИначеЕсли Ид = "ID1С_0005531" Тогда
			Возврат ПравилоРеквизита_ID1С_0005531(Источник, Приемник, СписокПараметровПравила);	//	-->  СубСчет10
		ИначеЕсли Ид = "ID1С_0005506" Тогда
			Возврат ПравилоРеквизита_ID1С_0005506(Источник, Приемник, СписокПараметровПравила);	//	-->  Телефоны
		ИначеЕсли Ид = "ID1С_0005523" Тогда
			Возврат ПравилоРеквизита_ID1С_0005523(Источник, Приемник, СписокПараметровПравила);	//	-->  ТипНоменклатуры
		ИначеЕсли Ид = "ID1С_0005522" Тогда
			Возврат ПравилоРеквизита_ID1С_0005522(Источник, Приемник, СписокПараметровПравила);	//	-->  ТипТовара
		ИначеЕсли Ид = "ID1С_0005503" Тогда
			Возврат ПравилоРеквизита_ID1С_0005503(Источник, Приемник, СписокПараметровПравила);	//	-->  ЮридическийАдрес
		ИначеЕсли Ид = "ID1С_0005500" Тогда
			Возврат ПравилоРеквизита_ID1С_0005500(Источник, Приемник, СписокПараметровПравила);	//	ВалютаВзаиморасчетов  -->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005524" Тогда
			Возврат ПравилоРеквизита_ID1С_0005524(Источник, Приемник, СписокПараметровПравила);	//	ВидНоменклатуры  -->  ВидНоменклатуры
		ИначеЕсли Ид = "ID1С_0004564" Тогда
			Возврат ПравилоРеквизита_ID1С_0004564(Источник, Приемник, СписокПараметровПравила);	//	Код  -->  Код
		ИначеЕсли Ид = "ID1С_0007805" Тогда
			Возврат ПравилоРеквизита_ID1С_0007805(Источник, Приемник, СписокПараметровПравила);	//	Комиссионное вознаграждение
		ИначеЕсли Ид = "ID1С_0005532" Тогда
			Возврат ПравилоРеквизита_ID1С_0005532(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0005541" Тогда
			Возврат ПравилоРеквизита_ID1С_0005541(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0007485" Тогда
			Возврат ПравилоРеквизита_ID1С_0007485(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0009495" Тогда
			Возврат ПравилоРеквизита_ID1С_0009495(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0004560" Тогда
			Возврат ПравилоРеквизита_ID1С_0004560(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0004567" Тогда
			Возврат ПравилоРеквизита_ID1С_0004567(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0005529" Тогда
			Возврат ПравилоРеквизита_ID1С_0005529(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0004570" Тогда
			Возврат ПравилоРеквизита_ID1С_0004570(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0018663" Тогда
			Возврат ПравилоРеквизита_ID1С_0018663(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидДоходаРасхода
		ИначеЕсли Ид = "ID1С_0018664" Тогда
			Возврат ПравилоРеквизита_ID1С_0018664(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидДоходаРасхода
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизитаЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	КонецЕсли;

	Возврат(0);

КонецФункции		//	ДополнительныеПреобразования()

//--------------------------------------------------------------------------------------------------




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

УсловияИлиВидыПоступленийАванс						= "Аванс";
УсловияИлиВидыПоступленийОплата						= "Оплата";
УсловияИлиВидыПоступленийПрочиеПоступления			= "ПрочиеПоступления";

ПризнакЗадолженностиДебиторская						= "Дебиторская";
ПризнакЗадолженностиКредиторская					= "Кредиторская";
ПризнакЗадолженностиНеИзменяется					= "НеИзменяется";

ПризнакДоходаРасходаДоход							= "Доход";
ПризнакДоходаРасходаРасход							= "Расход";
ВнереализационныеДоходыСуммовыеРазницы				= "СуммовыеРазницы";
ВнереализационныеРасходыСуммовыеРазницы				= "СуммовыеРазницы";

УсловияИлиВидыПоступленийОплата						= "Оплата";
УсловияИлиВидыПоступленийПолучениеСредствПереданныхРанееНаУсловияхВозврата = "ПолучениеСредствПереданныхРанееНаУсловияхВозврата";
УсловияИлиВидыПоступленийПрочиеПоступления			= "ПрочиеПоступления";
УсловияИлиВидыПоступленийПрочиеПоступленияСвязанныеСВозникновениемЗадолженности = "ПрочиеПоступленияСвязанныеСВозникновениемЗадолженности";

УсловияИлиВидыРасходовОплата						= "Оплата";
УсловияИлиВидыРасходовАванс							= "Аванс";
УсловияИлиВидыРасходовВозвратАвансов				= "ВозвратАвансов";
УсловияИлиВидыРасходовПрочиеРасходы					= "ПрочиеРасходы";
УсловияИлиВидыРасходовПредоставлениеСредствНаУсловияхВозврата = 					"ПредоставлениеСредствНаУсловияхВозврата";
УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованию = 							"ВзносыПоДобровольномуСтрахованию";
УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаОплатуМедицинскихРасходов = "ВзносыПоДобровольномуСтрахованиюНаОплатуМедицинскихРасходов";
УсловияИлиВидыРасходовВзносыПоДобровольномуСтрахованиюНаСлучайСмерти = 				"ВзносыПоДобровольномуСтрахованиюНаСлучайСмерти";
УсловияИлиВидыРасходовПрочиеРасходыСвязанныеСПогашениемЗадолженности = 				"ПрочиеРасходыСвязанныеСПогашениемЗадолженности";
УсловияИлиВидыРасходовВзносыВкладыОбязательныеПлатежи = 							"ВзносыВкладыОбязательныеПлатежи";

ВидыРасходовПриобретениеТоваров						= "ПриобретениеТоваров";
ВидыРасходовПриобретениеМатериалов					= "ПриобретениеМатериалов";
ВидыРасходовПриобретениеОсновныхСредств				= "ПриобретениеОсновныхСредств";
ВидыРасходовПриобретениеНематериальныхАктивов		= "ПриобретениеНематериальныхАктивов";
ВидыРасходовПрямыеРасходы							= "ПрямыеРасходы";
ВидыРасходовКосвенныеРасходы						= "КосвенныеРасходы";
ВидыРасходовНеПринимаемые							= "НеПринимаемые";
ВидыРасходовПриобретениеЦенныхБумаг 				= "ПриобретениеЦенныхБумаг";
ВидыРасходовПриобретениеПрав						= "ПриобретениеПрав";
ВидыРасходовРасходыБудущихПериодов                  = "РасходыБудущихПериодов";

УсловияПолученияИмуществаВСчетРанееВыданныхАвансов	= "ВСчетРанееВыданныхАвансов";
УсловияПолученияИмуществаСПоследующейОплатой		= "СПоследующейОплатой";
УсловияПолученияИмуществаДругие						= "Другие";

ВидыДоходовРеализацияТоваров						= "РеализацияТоваров";
ВидыДоходовРеализацияТоваровРанееОтгруженных		= "РеализацияТоваровРанееОтгруженных";
ВидыДоходовРеализацияПрочегоИмущества				= "РеализацияПрочегоИмущества";
ВидыДоходовРеализацияПродукции						= "РеализацияПродукции";
ВидыДоходовРеализацияПродукцииРанееОтгруженной		= "РеализацияПродукцииРанееОтгруженной";
ВидыДоходовРеализацияОсновныхСредств				= "РеализацияОсновныхСредств";
ВидыДоходовРеализацияНематериальныхАктивов			= "РеализацияНематериальныхАктивов";

УсловияВыбытияИмуществаДругие						= "Другие";
УсловияВыбытияИмуществаВозвратТоваровПоставщику		= "ВозвратТоваровПоставщику";
УсловияВыбытияИмуществаВозвратМатериаловПоставщику	= "ВозвратМатериаловПоставщику";
УсловияВыбытияИмуществаСПоследующейОплатой			= "СПоследующейОплатой";
УсловияВыбытияИмуществаВСчетРанееПолученныхАвансов	= "ВСчетРанееПолученныхАвансов";

