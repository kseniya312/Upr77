////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ВидОткрытогоФайла;	 // вид открытого файла (текст,DBF,XLS)	
Перем ВходнойФайлОткрыт;	 // флаг того, что импортируемый файл открыт
Перем ВходТекст;			 // текст входного файла (когда ВходнойФайлОткрыт = 1 и ВидОткрытогоФайла - текст)
Перем ВходDBF;               // импортируемая DBF-таблица (когда ВходнойФайлОткрыт=1 и ВидОткрытогоФайла - DBF)
Перем ВходExcel;			 //	Excel-сервер для импортируемой Excel-таблицы (когда ВходнойФайлОткрыт=1 и ВидОткрытогоФайла - XLS)
Перем Текст, XLS, DBF;       // названия возможных видов импортируемого файла
Перем ВидСправочника;        // Вид импортируемого справочника
Перем Разделитель;           // разделитель полей текстового файла
Перем СтрокаИсключений;      // Строка (список через запятую) реквизитов справочника, обрабатываемых особым образом

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ЗаполнитьТаблицуИмпортируемыхПолей()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполнение таблицы импортируемых полей
//
Процедура ЗаполнитьТаблицуИмпортируемыхПолей()
	
	// Заполняем общие поля
	Если Метаданные.Справочник(ВидСправочника).КоличествоУровней > 1 Тогда
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Это группа?";
		ИмпортируемыеПоля.Идентификатор  = "ЭтоГруппа";               
		ИмпортируемыеПоля.Тип            = "Число";
		ИмпортируемыеПоля.Длина          = 1;
		ИмпортируемыеПоля.Точность       = 0;
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Добавить в группу";
		ИмпортируемыеПоля.Идентификатор  = "Родитель";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = ВидСправочника;
	КонецЕсли;
	
	Если ВидСправочника = "Номенклатура" Тогда
		
		// теперь заполним исключительные поля
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Код";
		ИмпортируемыеПоля.Идентификатор  = "Код";
		Если Метаданные.Справочник(ВидСправочника).ТипКода = "Текстовый" Тогда
			ИмпортируемыеПоля.Тип        = "Строка";
		Иначе
			ИмпортируемыеПоля.Тип        = "Число";
		КонецЕсли;
		ИмпортируемыеПоля.Длина          = Метаданные.Справочник(ВидСправочника).ДлинаКода;
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Наименование";
		ИмпортируемыеПоля.Идентификатор  = "Наименование";               
		ИмпортируемыеПоля.Тип            = "Строка";
		ИмпортируемыеПоля.Длина          = Метаданные.Справочник(ВидСправочника).ДлинаНаименования;
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Базовая единица";
		ИмпортируемыеПоля.Идентификатор  = "БазоваяЕдиница";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = "ОКЕИ";
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Основная единица";
		ИмпортируемыеПоля.Идентификатор  = "ОсновнаяЕдиница";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = "ОКЕИ";
		
		Если ПустоеЗначение(Константа.ВидСвойстваНоменклатуры) = 0 Тогда
			ИмпортируемыеПоля.НоваяСтрока();
			ИмпортируемыеПоля.ПолноеНазвание = "Основное свойство";
			ИмпортируемыеПоля.Идентификатор  = "ОсновноеСвойство";               
			ИмпортируемыеПоля.Тип            = "Справочник";
			ИмпортируемыеПоля.Вид            = "ЗначенияСвойств";
			ИмпортируемыеПоля.Владелец       = Константа.ВидСвойстваНоменклатуры;
		КонецЕсли;
        
		СтрокаИсключений = "БазоваяЕдиница, ОсновнаяЕдиница, ОсновноеСвойство";
		
	ИначеЕсли ВидСправочника = "Цены" Тогда
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "ТМЦ";
		ИмпортируемыеПоля.Идентификатор  = "Владелец";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = "Номенклатура";
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Тип цены";
		ИмпортируемыеПоля.Идентификатор  = "ТипЦен";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = "ТипыЦен";
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.ПолноеНазвание = "Единица цены";
		ИмпортируемыеПоля.Идентификатор  = "Единица";               
		ИмпортируемыеПоля.Тип            = "Справочник";
		ИмпортируемыеПоля.Вид            = "ОКЕИ";
		
		СтрокаИсключений = "Единица,ТипЦен"; 
		
	КонецЕсли;
	
	// теперь заполним остальные реквизиты, кроме исключительных
	Для Сч=1 По Метаданные.Справочник(ВидСправочника).Реквизит() Цикл
		                             
		// исключения пропускаем
		Если Найти(СтрокаИсключений, Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Идентификатор) > 0 Тогда
		    Продолжить;
		КонецЕсли; 
		
		ИмпортируемыеПоля.НоваяСтрока();
		ИмпортируемыеПоля.Идентификатор  = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Идентификатор;
		ИмпортируемыеПоля.ПолноеНазвание = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Синоним;
		Если ПустоеЗначение(ИмпортируемыеПоля.ПолноеНазвание) = 1 Тогда // синоним не задан, тогда берем идентификатор
			ИмпортируемыеПоля.ПолноеНазвание = ИмпортируемыеПоля.Идентификатор;
		КонецЕсли;
		ИмпортируемыеПоля.Тип            = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Тип;
		ИмпортируемыеПоля.Вид            = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Вид;
		ИмпортируемыеПоля.Длина          = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Длина;
		ИмпортируемыеПоля.Точность       = Метаданные.Справочник(ВидСправочника).Реквизит(Сч).Точность;
	КонецЦикла;   

	
КонецПроцедуры // ЗаполнитьТаблицуИмпортируемыхПолей()

//******************************************************************************
// ПрочитатьСписокПолейВходногоФайла()
//
// Параметры:
// Нет
//
// Возвращаемое значение:
//   1 тогда и только тогда, когда структура входного файла корректна
//
// Описание:
//   заполняем список полей входного импортируемого файла
//
Функция ПрочитатьСписокПолейВходногоФайла()
	          
	// удаляем из списка все
	ВходныеПоля.УдалитьВсе();
	
	Если ВидОткрытогоФайла = Текст Тогда // текст
            
		// вычисляем максимальное число полей               
		ПерваяСтрока="";
		ЧислоПолей=1;
		Для НомерСтроки = 1 По ВходТекст.КоличествоСтрок() Цикл
			Если ПустаяСтрока(ПерваяСтрока)>0 Тогда
				ПерваяСтрока = СокрЛП(ВходТекст.ПолучитьСтроку(НомерСтроки));
			КонецЕсли;	
			ЧислоПолей = Макс(ЧислоПолей,СтрЧислоВхождений(СокрЛП(ВходТекст.ПолучитьСтроку(НомерСтроки)),Разделитель)+1);
		КонецЦикла;                   
		      
		ЧислоКолонок = ЧислоПолей;     
		НачальнаяСтрока = 2; 
		КонечнаяСтрока = ВходТекст.КоличествоСтрок();
		
		// Заполняем список входных полей
		Для НомерПоля = 1 По ЧислоПолей Цикл
			ПозицияРазделителя = Найти(ПерваяСтрока,Разделитель);
           
			// вырезаем значение очередного поля входного файла
			Если ПозицияРазделителя=0 Тогда
				НазваниеОдногоПоля = ПерваяСтрока;
				ПерваяСтрока = "";
			Иначе
				НазваниеОдногоПоля = Лев(ПерваяСтрока,ПозицияРазделителя-1);
				ПерваяСтрока = Прав(ПерваяСтрока,СтрДлина(ПерваяСтрока)-ПозицияРазделителя);
			КонецЕсли;

			// убираем пробелы
			НазваниеОдногоПоля = СокрЛП(НазваниеОдногоПоля);
			ПерваяСтрока = СокрЛП(ПерваяСтрока);

			Если ПустаяСтрока(НазваниеОдногоПоля)>0 Тогда
				НазваниеОдногоПоля = "Колонка №"+Строка(НомерПоля);
			КонецЕсли;
			
			//	добавляем название входного поля в список полей входного файла
			ВходныеПоля.ДобавитьЗначение(НомерПоля,НазваниеОдногоПоля);
		КонецЦикла;                 
		
	ИначеЕсли ВидОткрытогоФайла = DBF Тогда // DBF
                                  
		ЧислоКолонок = ВходDBF.КоличествоПолей();  
		НачальнаяСтрока = 1; 
		КонечнаяСтрока = ВходDBF.КоличествоЗаписей();  
		
		Для НомерПоля = 1 По ВходDBF.КоличествоПолей() Цикл
			НазваниеОдногоПоля = "";
			ВходDBF.ОписаниеПоля(НомерПоля,НазваниеОдногоПоля,,,);

			//	добавляем название входного поля в список полей входного файла
			ВходныеПоля.ДобавитьЗначение(НомерПоля,НазваниеОдногоПоля);
		КонецЦикла;

	ИначеЕсли ВидОткрытогоФайла = XLS Тогда // XLS
        
		Если ЧислоКолонок<=0 Тогда  	// не задано число используемых колонок                                  
			ЧислоКолонок = 1;
			// число колонок определяем по первой строке
			Пока ПустаяСтрока(ВходExcel.ActiveSheet.Cells(1,ЧислоКолонок).Value)=0 Цикл
				ЧислоКолонок = ЧислоКолонок + 1;
			КонецЦикла;	
			ЧислоКолонок = Макс(ЧислоКолонок-1,1);
		КонецЕсли;
		
		Если НачальнаяСтрока<=0 Тогда  	
			НачальнаяСтрока = 2;
		КонецЕсли;
		
		Если КонечнаяСтрока<=0 Тогда  	
			КонечнаяСтрока = НачальнаяСтрока;                         
			// число колонок определяем по первому столбцу
			Пока ПустаяСтрока(ВходExcel.ActiveSheet.Cells(КонечнаяСтрока,1).Value)=0 Цикл
				КонечнаяСтрока = КонечнаяСтрока + 1;
			КонецЦикла;	                          
			КонечнаяСтрока = Макс(КонечнаяСтрока-1,1);
		КонецЕсли;
		
		Для НомерПоля = 1 По ЧислоКолонок Цикл
			НазваниеОдногоПоля = ВходExcel.ActiveSheet.Cells(1,НомерПоля).Value;

			Если ПустаяСтрока(НазваниеОдногоПоля)>0 Тогда
				НазваниеОдногоПоля = "Колонка №"+Строка(НомерПоля);
			КонецЕсли;	
				
			//	добавляем название входного поля в список полей входного файла
			ВходныеПоля.ДобавитьЗначение(НомерПоля,СокрЛП(НазваниеОдногоПоля));
		КонецЦикла;
		
	КонецЕсли;
                             
	Возврат 1;
КонецФункции  // ПрочитатьСписокПолейВходногоФайла()

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает доступность реквизитов диалога
//
Процедура УправлениеДиалогом()
	                
	Если ПустоеЗначение(ВидОткрытогоФайла)  = 1 Тогда  // Если не выбран вид, файла, то пусть будет первый в списке
		ВидФайла.ТекущаяСтрока(1);
		ВидОткрытогоФайла = ВидФайла.ПолучитьЗначение(ВидФайла.ТекущаяСтрока());
	КонецЕсли;
	
	Если ВидОткрытогоФайла = XLS  Тогда
		Форма.Кодировка.Доступность(0);
		Кодировка.ТекущаяСтрока(1); 
		Форма.ЧислоКолонок.Доступность(1);
	Иначе
		// текст или DBF
		Форма.Кодировка.Доступность(1);
		Форма.ЧислоКолонок.Доступность(0);
	КонецЕсли;

	Если ВидОткрытогоФайла = Текст Тогда
		// текст
		Форма.СписокРазделителей.Доступность(1);
		Форма.кнДобавитьРазделитель.Доступность(1);
	Иначе
		// XLS или DBF
		Форма.СписокРазделителей.Доступность(0);
		Форма.кнДобавитьРазделитель.Доступность(0);
	КонецЕсли;
    
КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// ПоКнопкеДобавитьРазделитель()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "..." (Добавить разделитель)
//
// Описание:
//  Добавляет разделитель в список разделителей
//
Процедура ПоКнопкеДобавитьРазделитель()        
	
	НовыйРазделитель = "";
	Если ВвестиСтроку(НовыйРазделитель, "Введите символ-разделитель в импортируемом файле", 1, 0, 60) = 1 Тогда
		Если ПустоеЗначение(НовыйРазделитель) = 0 Тогда   // Что-то ввели
			Позиция = СписокРазделителей.НайтиЗначение(НовыйРазделитель);
			Если Позиция = 0 Тогда // Такого еще не было
				СписокРазделителей.ДобавитьЗначение(НовыйРазделитель);
				Позиция = СписокРазделителей.НайтиЗначение(НовыйРазделитель);
			КонецЕсли;
			СписокРазделителей.ТекущаяСтрока(Позиция);
			Разделитель = СписокРазделителей.ПолучитьЗначение(Позиция);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеДобавитьРазделитель()

//******************************************************************************
// УстановитьСвязь()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  по кнопке "Установить", по двойному щелчку на таблице импортируемых полей и 
//  на списке полей входного файла
//
// Описание:
//  Устанавливает соответствие между списком импортируемых полей и полями входного файла
//
Процедура УстановитьСвязь()
	Перем НазвВходПоля;
	
	ТекПозицияВСпискеВхПолей     = ВходныеПоля.ТекущаяСтрока();
	ТекПозицияВСпискеИмпортПолей = ИмпортируемыеПоля.ТекущаяСтрока();

	Если (ТекПозицияВСпискеВхПолей     > 0) 
	   И (ТекПозицияВСпискеИмпортПолей > 0) Тогда
		НомерВходПоля = ВходныеПоля.ПолучитьЗначение(ТекПозицияВСпискеВхПолей,НазвВходПоля);
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "ФиксирЗначение", "");
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "НомерВходногоПоля",НомерВходПоля);
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "ПредставлениеЗначения", НазвВходПоля);
	КонецЕсли;
		
КонецПроцедуры // УстановитьСвязь()

//******************************************************************************
// ПоКнопкеЗначение()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
// по кнопке "Значение"
// 
// Описание:
//  Устанавливает фиксированное значение для текущего импортируемого поля
//
Процедура ПоКнопкеЗначение()
	
	ТекПозицияВСпискеИмпортПолей = ИмпортируемыеПоля.ТекущаяСтрока();

	Если ТекПозицияВСпискеИмпортПолей > 0 Тогда
		Если ИмпортируемыеПоля.Тип = "Число" Тогда	
			
			Если ИмпортируемыеПоля.Длина = 1  Тогда // считаем, что это флаг
				Если Вопрос("Установить флаг """ + СокрЛП(ИмпортируемыеПоля.ПолноеНазвание)
				             + """?", "Да+Нет") = "Да"  Тогда
				    
					ИмпортируемыеПоля.ФиксирЗначение        = 1;
					ИмпортируемыеПоля.ПредставлениеЗначения = "Да";
					ИмпортируемыеПоля.НомерВходногоПоля     = 0;
				КонецЕсли;
				
			Иначе
				Значение = 0;
				Если ВвестиЧисло(Значение, "Задайте """ + СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """",
				                 ИмпортируемыеПоля.Длина, ИмпортируемыеПоля.Точность, 60) = 1 Тогда
					ИмпортируемыеПоля.ФиксирЗначение        = Значение;
					ИмпортируемыеПоля.ПредставлениеЗначения = Формат(Значение, "Ч" + 
					                                          СокрЛП(ИмпортируемыеПоля.Длина) + "."+ 
															  СокрЛП(ИмпортируемыеПоля.Точность));
					ИмпортируемыеПоля.НомерВходногоПоля     = 0;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ИмпортируемыеПоля.Тип = "Справочник" Тогда	
			Спр = СоздатьОбъект("Справочник." + ИмпортируемыеПоля.Вид);
			Если ПустоеЗначение(ИмпортируемыеПоля.Владелец) = 0 Тогда
				Спр.ИспользоватьВладельца(ИмпортируемыеПоля.Владелец);
			КонецЕсли;
			                     
			Если ИмпортируемыеПоля.Идентификатор = "Родитель" Тогда
				Спр.ВыборГруппы(1); 
			КонецЕсли; 
			
			Если Спр.Выбрать("Задайте """ + СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """","") = 1 Тогда
				Значение = Спр.ТекущийЭлемент();
				Если ИмпортируемыеПоля.Идентификатор = "Родитель" Тогда
					Если Значение.ЭтоГруппа() = 0 Тогда
					    Значение = Значение.Родитель;
					КонецЕсли;
				КонецЕсли;
				ИмпортируемыеПоля.ФиксирЗначение        = Значение;
				ИмпортируемыеПоля.ПредставлениеЗначения = ИмпортируемыеПоля.ФиксирЗначение;
				ИмпортируемыеПоля.НомерВходногоПоля     = 0;
			КонецЕсли;
		
		Иначе
			
			Значение = "";
		    Если ВвестиЗначение(Значение, "Задайте """ + СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """", 
			                  ИмпортируемыеПоля.Тип +
							  ?(ПустоеЗначение(ИмпортируемыеПоля.Вид) = 1,"", "." + ИмпортируемыеПоля.Вид), 
							  ИмпортируемыеПоля.Длина) = 1 Тогда
				ИмпортируемыеПоля.ФиксирЗначение        = Значение;
				ИмпортируемыеПоля.ПредставлениеЗначения = Значение;
				ИмпортируемыеПоля.НомерВходногоПоля     = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗначение()

//******************************************************************************
// ПоКнопкеОчистить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "Очистить"
//
// Описание:
//  Очищает текущую связь между списком импортируемых полей и полями входного файла
//
Процедура ПоКнопкеОчистить()

	ТекПозицияВСпискеИмпортПолей = ИмпортируемыеПоля.ТекущаяСтрока();

	Если ТекПозицияВСпискеИмпортПолей > 0 Тогда
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "ФиксирЗначение", "");
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "НомерВходногоПоля", 0);
		ИмпортируемыеПоля.УстановитьЗначение(ТекПозицияВСпискеИмпортПолей, "ПредставлениеЗначения", "");
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеОчистить()


//******************************************************************************
// ПоКнопкеОчиститьВсе()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "Очистить все"
// 
// Описание:
//  Очищает все связи между списком импортируемых полей и полями входного файла
//
Процедура ПоКнопкеОчиститьВсе()
	
	ИмпортируемыеПоля.ВыбратьСтроки();
	Пока ИмпортируемыеПоля.ПолучитьСтроку() = 1 Цикл
		ИмпортируемыеПоля.ФиксирЗначение        = "";
		ИмпортируемыеПоля.НомерВходногоПоля     = 0;
		ИмпортируемыеПоля.ПредставлениеЗначения = "";
	КонецЦикла;
	
КонецПроцедуры // ПоКнопкеОчиститьВсе()

//******************************************************************************
// ЗакрытьИмпортируемыйФайл()
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
//  НЕТ
//
// Описание:
// Если импортируемый файл открыт, то закрывает его
//
Процедура ЗакрытьИмпортируемыйФайл()               
	Если ВходнойФайлОткрыт = 1 Тогда
		                  
		Если ВидОткрытогоФайла = "DBF-таблица" Тогда 		// DBF-таблица
			ВходDBF.ЗакрытьФайл();
		ИначеЕсли ВидОткрытогоФайла = "XLS-таблица" Тогда 	
			ВходExcel.ActiveWorkbook.Close();
			ВходExcel.Quit();
		КонецЕсли;
		                  
		ВходнойФайлОткрыт = 0;
		
		НачальнаяСтрока   = 0; 
		КонечнаяСтрока    = 0;                                   
		ЧислоКолонок      = 0; 
		                         
		// Надо очистить соответствия
		ВходныеПоля.УдалитьВсе();    
		ПоКнопкеОчиститьВсе();
		
	КонецЕсли;
КонецПроцедуры	// ЗакрытьИмпортируемыйФайл()

//******************************************************************************
// ОткрытьИмпортируемыйФайл()
//
// Параметры:
// Нет
//
// Возвращаемое значение:
//  1, если файл открыт успешно, и 0, иначе 
//
// Описание:
// если файл не открыт, то открывает его
//
Функция ОткрытьИмпортируемыйФайл()  
	
	Перем ЗапущенExcel;
	Перем ОшибкаОткрытия;
	
	Если ВходнойФайлОткрыт = 1 Тогда	// уже открыт
	    Возврат 1;                                     
	КонецЕсли;	
	
	Если ПустоеЗначение(НазваниеФайла) = 1 Тогда // нечего открывать
	    Возврат 0;                                     
	КонецЕсли;
	
	// Счтитаем расширение файла
	Расширение = ВРег(Прав(НазваниеФайла,3));
	
	
	Если ВидОткрытогоФайла = Текст Тогда		// текст с разделителем
		
		ВходТекст.КодоваяСтраница(?(Кодировка.ТекущаяСтрока()=1,0,1));
        
		ОшибкаОткрытия = 0;
		
		Попытка 
			ВходТекст.Открыть(НазваниеФайла);	// открываем файл
        Исключение       
			ОшибкаОткрытия = 1;
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;                   
		                             
		Если (ОшибкаОткрытия=0)
		   И (ВходТекст.КоличествоСтрок()>0) Тогда
		    ВходнойФайлОткрыт = 1; // файл открылся
		КонецЕсли;

		
	ИначеЕсли ВидОткрытогоФайла = DBF Тогда		// DBF
		
		Если Врег(Расширение) <> "DBF" Тогда
		    Предупреждение("Расширение файла отлично от ""DBF"".
			               |Файл не открыт!",60);
			Возврат 0;
		КонецЕсли;
		
		ВходDBF.КодоваяСтраница(?(Кодировка.ТекущаяСтрока()=1,0,1));

		ОшибкаОткрытия = 0;
		
		Попытка 
			ВходDBF.ОткрытьФайл(НазваниеФайла);
		Исключение       
			ОшибкаОткрытия = 1;                     
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;                   
		
		Если (ОшибкаОткрытия=0)
		   И (ВходDBF.Открыта() = 1) Тогда
		    ВходнойФайлОткрыт = 1; // файл открылся
		КонецЕсли;

	ИначеЕсли ВидОткрытогоФайла = XLS Тогда		// XLS
		
		Если Врег(Расширение) <> "XLS" Тогда
		    Предупреждение("Расширение файла отлично от ""XLS"".
			               |Файл не открыт!",60);
			Возврат 0;
		КонецЕсли;
		
		ЗапущенExcel = 1;
		
		Попытка 
			// запускаем Excel-Server 
			ВходExcel = СоздатьОбъект("Excel.Application");
		Исключение       
			ЗапущенExcel = 0;
			Сообщить(ОписаниеОшибки(),"!");
		КонецПопытки;
		
		Если ЗапущенExcel=1 Тогда
			Попытка
				// открываем файл
				ВходExcel.Application.Workbooks.Open(НазваниеФайла);
				ВходнойФайлОткрыт = 1;
	        Исключение
				ВходExcel.Quit();
				Сообщить(ОписаниеОшибки(),"!");
			КонецПопытки;

		КонецЕсли;
	КонецЕсли;	
	
	Если ВходнойФайлОткрыт = 1 Тогда	// успешно открыт            
		ВидОткрытогоФайла = ВидФайла.ПолучитьЗначение(ВидФайла.ТекущаяСтрока());
	Иначе	
	    Предупреждение("Не удалось открыть файл "+НазваниеФайла);
	КонецЕсли;	
		
	Возврат ВходнойФайлОткрыт;
		
КонецФункции	// ОткрытьИмпортируемыйФайл()

//******************************************************************************
// ПроверкаСтруктурыФайла()
//
// Параметры:
//  Режим - режим проверки структуры:
//		0 - переоткрыть, только если файл был открыт 
//		1 - открыть
//		2 - не переоткрывать
//
// Возвращаемое значение:
// Нет
//
// Описание:
// Открывает(переоткрывает) импортируемый файл и проверяет его структуру
//
Процедура ПроверкаСтруктурыФайла(Режим=0)
	Если Режим=0 Тогда		//		0 - переоткрыть, только если файл был открыт                
		Если ВходнойФайлОткрыт=1 Тогда
			ЗакрытьИмпортируемыйФайл();
			ОткрытьИмпортируемыйФайл();
		КонецЕсли;	
	ИначеЕсли Режим=1 Тогда      //	1 - открыть         
		ЗакрытьИмпортируемыйФайл();
		ОткрытьИмпортируемыйФайл();
	КонецЕсли;
            
	Если ВходнойФайлОткрыт=1 Тогда	// удалось открыть файл
	
		// проверяем корректность шапки входного файла и заполняем список полей входного импортируемого файла
		Если ПрочитатьСписокПолейВходногоФайла()=0 Тогда   // не удалось
			Предупреждение("Входной файл имеет некорректную структуру");
		КонецЕсли;
		
	КонецЕсли;	            
	
КонецПроцедуры  // ПроверкаСтруктурыФайла()

//******************************************************************************
// ПриСменеНазванияФайла()
//
// Параметры:
// Нет
//
// Возвращаемое значение:
// Нет
//
// Вызывается из формул элементов диалога:
// 	при смене значения реквизита НазваниеФайла
//
// Описание:
// переоткрывает файл и проверяет его структуру
//
Процедура ПриСменеНазванияФайла()
    
	ЗакрытьИмпортируемыйФайл();
	
	Если ПустаяСтрока(НазваниеФайла)=1 Тогда
		Возврат;
	КонецЕсли;	
	
	Если ФС.СуществуетФайл(НазваниеФайла)=1 Тогда		// то, что ввели, является названием существующего файла
		ПроверкаСтруктурыФайла(1); // надо открывать
	Иначе       // то, что ввели, не является названием существующего файла
	   	Предупреждение("Файл "+НазваниеФайла+" не существует");
	КонецЕсли;
    
КонецПроцедуры  // ПриСменеНазванияФайла()

//******************************************************************************
// ВвестиНазваниеФайла()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нкт
//
// Вызывается из формул элементов диалога:
//  кнопка "Файл..."
//
// Описание:
//  открывает диалог выбора импортируемого файла
//
Процедура ВвестиНазваниеФайла()
	// процедура ввода названия входного файла

	Перем Путь,Расширение,СтароеНазваниеФайла;
                                             
	СтароеНазваниеФайла = НазваниеФайла;
	
	Если Найти(НазваниеФайла,"\")<=0 Тогда
		Путь = КаталогПользователя();
	Иначе      
		Индекс = СтрДлина(НазваниеФайла);
		Пока Сред(НазваниеФайла,Индекс,1)<>"\" Цикл
			Индекс = Индекс - 1;
		КонецЦикла;	            
		Путь = Лев(НазваниеФайла,Индекс);
	КонецЕсли;	
		
	Если ВидФайла.ТекущаяСтрока()=1 Тогда
		Расширение = "Все файлы(*.*)|*.*";
	ИначеЕсли ВидФайла.ТекущаяСтрока()=2 Тогда
		Расширение = "DBF-таблица(*.dbf)|*.dbf";
	ИначеЕсли ВидФайла.ТекущаяСтрока()=3 Тогда
		Расширение = "XLS-таблица(*.xls)|*.xls";
	Иначе
		Расширение = "Все файлы(*.*)|*.*";
	КонецЕсли;
                                     
	НазвФайла = "";
	
	Если ФС.ВыбратьФайл(0,НазвФайла,Путь,"Выберите импортируемый файл",Расширение,,60)=1 Тогда
		НазваниеФайла = Путь + НазвФайла;
		Если НазваниеФайла<>СтароеНазваниеФайла Тогда	// изменилось название импортируемого файла
		    ПриСменеНазванияФайла();
		КонецЕсли;
	Иначе		// отказались от выбора - восстанавливаем старое название файла
		НазваниеФайла = СтароеНазваниеФайла;
	КонецЕсли;
    
КонецПроцедуры  // ВвестиНазваниеФайла()

//******************************************************************************
// ПриСменеВидаФайла()
//
// Параметры:
//  НЕТ
//
// Возвращаемое значение:
// НЕТ
//
// Вызывается из формул элементов диалога:
//  при смене значения реквизита ВидФайла
//
// Описание:
//  Отрабатывет смену вида файла
//
Процедура ПриСменеВидаФайла()	
	                          
	ТекСтр = ВидФайла.ТекущаяСтрока();
    Если ВидОткрытогоФайла <> ВидФайла.ПолучитьЗначение(ТекСтр) Тогда
		
		// Закрываем импортируемый файл, если он был открыт	
		ЗакрытьИмпортируемыйФайл();               
		
		ВидОткрытогоФайла = ВидФайла.ПолучитьЗначение(ТекСтр);

		// устанавливаем доступность реквизитов диалога
		УправлениеДиалогом();
		
		Если ПустаяСтрока(НазваниеФайла)=0 Тогда
			ПроверкаСтруктурыФайла(1); // надо открывать
		КонецЕсли;        
    КонецЕсли;
	
КонецПроцедуры // ПриСменеВидаФайла()

//******************************************************************************
// ПриСменеКодировки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
// Нет
//
// Вызывается из формул элементов диалога:
// при смене значения реквизита Кодировка
//
// Описание:
// Переоткрывает файл и проверяет его структуру
//
Процедура ПриСменеКодировки()
	Если ПустаяСтрока(НазваниеФайла)=0 Тогда
		ПроверкаСтруктурыФайла(0); // надо переоткрывать
	КонецЕсли;	
КонецПроцедуры  // ПриСменеКодировки()

//******************************************************************************
// ПриСменеРазделителя()                                              
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  При смене значения реквизита Разделитель
//
// Описание:
// Переоткрывает импортируемый файл и проверяет его структуру
//
Процедура ПриСменеРазделителя()
	
	Если ВидОткрытогоФайла = Текст Тогда   	 // текст с разделителями
		ТекСтр = ?(СписокРазделителей.ТекущаяСтрока() = 0, 1, СписокРазделителей.ТекущаяСтрока());
		СписокРазделителей.ТекущаяСтрока(ТекСтр);
		Разделитель = СписокРазделителей.ПолучитьЗначение(ТекСтр);
	КонецЕсли;  
	
	Если ПустаяСтрока(НазваниеФайла)=0 Тогда
		ПроверкаСтруктурыФайла(2);               // не надо переоткрывать
	КонецЕсли;	                                 
	
КонецПроцедуры // ПриСменеРазделителя()

//******************************************************************************
// ПриСменеЧислаКолонок()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  При смене значения реквизита ЧислоКолонок
//
// Описание:
//  перезаполняет список импортируемых полей
//
Процедура ПриСменеЧислаКолонок()
	Если (ВходнойФайлОткрыт = 1)
	   И (ВидОткрытогоФайла = XLS ) Тогда	// входной файл открыт и это XLS-таблица	
		Если ПустаяСтрока(НазваниеФайла)=0 Тогда
			ПроверкаСтруктурыФайла(2);      // не надо переоткрывать
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // ПриСменеЧислаКолонок()

//******************************************************************************
// ПреобразоватьКтипу(Значение, Тип, Вид)
//
// Параметры: 
//  Значение - преобразуемое значение, 
//  Тип      - тип к которому надо преобразовать
//  Вид      - вид (для справочников)
//
// Возвращаемое значение:
//  1 - удалось преобразовать
//  0 - не удалось 
//
// Описание:
//  Преобразует значение к заданному типу
//
Функция ПреобразоватьКтипу(Значение, Тип, Вид) 
	Перем Объект;
	
	Если Тип = "Строка" Тогда
	    Значение = Строка(Значение);
		
	ИначеЕсли Тип = "Число" Тогда
		Значение = Число(Значение);
		
	ИначеЕсли Тип = "Дата" Тогда
		Значение = Дата(Значение);
		
	ИначеЕсли Тип = "Перечисление" Тогда
		
		// Может и преобразовывать не надо
		Если ТипЗначенияСтр(Значение) = Тип Тогда
		    Если Значение.Вид() = Вид Тогда
		        Возврат 1;
		    КонецЕсли;
		КонецЕсли;                        
		
		// Вначале пытаемся найти по идентификатору
		// потом найти по представлению
		Объект	=	Метаданные.Перечисление(Вид);
		Если ПустоеЗначение(Значение) = 1 Тогда 
			Значение = ПолучитьПустоеЗначение("Перечисление." + Вид);
			Возврат 1;
		КонецЕсли;
		ВидПеречисления	=	Перечисление.ПолучитьАтрибут(Вид);
		СтрЗначение		=	Значение;
		Значение		=	ВидПеречисления.ЗначениеПоИдентификатору(СтрЗначение);
		Если ПустоеЗначение(Значение) = 0 Тогда 
			Возврат 1;
		КонецЕсли;
		Для СчЗнач = 1 По Объект.Значение() Цикл
			ЗначениеМД	=	Объект.Значение(СчЗнач);
			Если СтрЗначение = ЗначениеМД.Представление() Тогда
				Значение = ВидПеречисления.ЗначениеПоИдентификатору(ЗначениеМД.Идентификатор);
				Возврат	1;
			КонецЕсли;
		КонецЦикла;
		
		Возврат 0;
		
	ИначеЕсли Тип = "Справочник" Тогда	
		
		Объект = СоздатьОбъект("Справочник." + Вид);
		Если ПустоеЗначение(Значение) = 1 Тогда
			Значение = ПолучитьПустоеЗначение("Справочник." + Вид);
			Возврат 1;
		КонецЕсли;          
		
		// Значение м.б. уже справочником
		Если ТипЗначенияСтр(Значение) = Тип Тогда
		    Если Значение.Вид() = Вид Тогда
		        Возврат 1;
		    КонецЕсли;
		КонецЕсли;               
		
		// значение ищем по коду, потом по наименованию
		Если Объект.НайтиПоКоду(Значение) = 1 Тогда
		    Значение = Объект.ТекущийЭлемент();
			Возврат 1;
		КонецЕсли;
		
		Если Объект.НайтиПоНаименованию(Значение,0,1) = 1 Тогда
		    Значение = Объект.ТекущийЭлемент();
			Возврат 1;
		КонецЕсли;
		
		Возврат 0;
		
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ПреобразоватьКтипу()
  
//******************************************************************************
// ПолучитьЗначениеТекущейСтроки(ЗначенияПолей)
//
// Параметры: 
//  ЗначенияПолей - список значений полей импортируемого входного файла
//
// Возвращаемое значение:
//  Импортируемое значение текущего реквизита (текущей строки ТЗ ИмпортируемыеПоля)
//
// Описание:
//  Определяет импортируемое значение для текущей строки ТЗ ИмпортируемыеПоля
//
Функция ПолучитьЗначениеТекущейСтроки(ЗначенияПолей)
	
	Значение = "";
	НомерПоля = ИмпортируемыеПоля.НомерВходногоПоля;
	Если ПустоеЗначение(НомерПоля) = 0 Тогда                             // Берем значение из файла
		Значение = ЗначенияПолей.ПолучитьЗначение(НомерПоля);      
		
	ИначеЕсли ПустоеЗначение(ИмпортируемыеПоля.ФиксирЗначение) = 0 Тогда // Берем фиксированное значение
		Значение = ИмпортируемыеПоля.ФиксирЗначение;
		
	Иначе                                                                // Возвращаем пустое нужного типа	
		ПреобразоватьКтипу(Значение,ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид);
	КонецЕсли; 
	
	Возврат Значение;
	
КонецФункции // ПолучитьЗначениеТекущейСтроки()

//******************************************************************************
// ИмпортироватьНоменклатуру(ЗначенияПолей)
//
// Параметры:
//  ЗначенияПолей - список значений полей импортируемого входного файла
//
// Возвращаемое значение:
//  Возвращает 1, если очередная позиция успешно импортирована
//	   		   0, если НОВАЯ позиция не импортирована, но прекращать импорт не нужно         
//			  -1, если позиция не импортирована, и надо прекращать импорт
//
// Описание: импортирует новую позицию справочника и возвращает "успешность" импорта
// 
//
Функция ИмпортироватьНоменклатуру(ЗначенияПолей)      
	Перем Позиция, БазоваяЕдиница, ОсновнаяЕдиница, ОсновноеСвойство, ГТД;
	Результат = 1;  
	
	// Если задан код, то ищем по коду, нет - по наименованию
	ЕстьЭлемент = 0;                              
	Объект = СоздатьОбъект("Справочник.Номенклатура");
	Если ИмпортируемыеПоля.НайтиЗначение("Код",Позиция,"Идентификатор") = 0 Тогда 
		Сообщить("Не найдена строка кода справочника","!");
		Возврат -1;
	КонецЕсли;
	
	НомерПоля = ИмпортируемыеПоля.ПолучитьЗначение(Позиция,"НомерВходногоПоля");
	Если ПустоеЗначение(НомерПоля) = 0  Тогда
		Значение    = ЗначенияПолей.ПолучитьЗначение(НомерПоля);
		ЕстьЭлемент = Объект.НайтиПоКоду(Значение,0);
	Иначе // ищем по наименованию
		                                                                  
		Позиция = 0;
		Если ИмпортируемыеПоля.НайтиЗначение("Наименование",Позиция,"Идентификатор") = 0 Тогда 
			Сообщить("Не найдена строка наименования справочника","!");
			Возврат -1;
		КонецЕсли;
		
		НомерПоля = ИмпортируемыеПоля.ПолучитьЗначение(Позиция,"НомерВходногоПоля");
		Если ПустоеЗначение(НомерПоля) = 0  Тогда
			Значение    = ЗначенияПолей.ПолучитьЗначение(НомерПоля);
			ЕстьЭлемент = Объект.НайтиПоНаименованию(Значение,0,1);
		Иначе
			Сообщить("Не установлены соответствия ни для кода ни для наименования.","!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	// Теперь в цикле по полям заполняем реквизиты
	ИмпортируемыеПоля.ВыбратьСтроки();
	Пока ИмпортируемыеПоля.ПолучитьСтроку() = 1 Цикл 
		
		Если ИмпортируемыеПоля.Идентификатор = "ЭтоГруппа" Тогда
			 
			 Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
			 
			 //  Флаг группы д.б. числом
		 	 Если ПреобразоватьКтипу(Значение , ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
			     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				 Возврат 0;
			 КонецЕсли;
			 Если ПустоеЗначение(Значение) = 0 Тогда // Это д.б. группа
			 	Если ЕстьЭлемент = 0 Тогда
			 		Объект.НоваяГруппа();
			 	ИначеЕсли Объект.ЭтоГруппа() = 0 Тогда // Нашли элемент, а д.б. группа    
			 		Объект.НоваяГруппа();
			 	КонецЕсли;       
			 Иначе
			 	Если ЕстьЭлемент = 0 Тогда
			 		Объект.Новый();
				 КонецЕсли;
			 КонецЕсли;
		 	 ЕстьЭлемент = 1; // теперь точно есть элемент или группа
		 	 
	    ИначеЕсли ИмпортируемыеПоля.Идентификатор = "Родитель" Тогда  
		
			 Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);                                 
			 
			 // Родитель должен существовать.
		 	 Если ПреобразоватьКтипу(Значение , ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
			     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				 Возврат 0;
			 КонецЕсли;
			 Если ПустоеЗначение(Значение) = 0 Тогда
			 	Если Значение.ЭтоГруппа() = 1 Тогда
				 	Объект.Родитель = Значение;
				 Иначе
				     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
					 Возврат 0;
			 	КонецЕсли;
			 КонецЕсли; 
		    
        ИначеЕсли ИмпортируемыеПоля.Идентификатор = "БазоваяЕдиница" Тогда  

             Если Объект.ЭтоГруппа() =1  Тогда
                 Продолжить;  // для групп не надо задавать базовую единицу
             КонецЕсли;
   			 //Базовую единицу считаем в отдельную переменную, обработаем позже
			 БазоваяЕдиница = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
			 Если ПустоеЗначение(БазоваяЕдиница) = 1 Тогда
			 	БазоваяЕдиница = глЗначениеПоУмолчанию("ОсновнаяОКЕИ");
			 Иначе 
			 	Если ПреобразоватьКтипу(БазоваяЕдиница, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
				     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
					 Возврат 0;
				 КонецЕсли;

			 КонецЕсли; 
			 
			 Если ПустоеЗначение(БазоваяЕдиница) = 1 Тогда
			 	Сообщить("Не задана базовая единица","!");
			 	Возврат 0;
			 КонецЕсли;
        ИначеЕсли ИмпортируемыеПоля.Идентификатор = "ОсновнаяЕдиница" Тогда  

             Если Объект.ЭтоГруппа() =1  Тогда
                 Продолжить;  // для групп не надо задавать
             КонецЕсли;
   			 //Основную единицу считаем в отдельную переменную, обработаем позже
			 ОсновнаяЕдиница = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
		 	 Если ПреобразоватьКтипу(ОсновнаяЕдиница, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
			     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				 Возврат 0;
			 КонецЕсли;
			 
        ИначеЕсли ИмпортируемыеПоля.Идентификатор = "ОсновноеСвойство" Тогда  

             Если Объект.ЭтоГруппа() =1  Тогда
                 Продолжить;  // для групп не надо задавать
             КонецЕсли;
   			 //Основное свойство считаем в отдельную переменную, обработаем позже
			 ОсновноеСвойство = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
		 	 Если ПреобразоватьКтипу(ОсновноеСвойство, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
			     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				 Возврат 0;
			 КонецЕсли;
        ИначеЕсли ИмпортируемыеПоля.Идентификатор = "НомерГТД" Тогда  

             Если Объект.ЭтоГруппа() =1  Тогда
                 Продолжить;  // для групп не надо задавать
             КонецЕсли;
			 Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);                                 
			 ГТД = Значение;
		 	 Если ПреобразоватьКтипу(ГТД, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
		 	 	
		 	 	// Нет такого номера, надо создавать
		 	 	СпрГТД = СоздатьОбъект("Справочник.ГТД");
		 	 	СпрГТД.Новый();
		 	 	СпрГТД.Наименование = Значение;
		 	 	СпрГТД.Записать();
		 	 	ГТД = СпрГТД.ТекущийЭлемент();
			 КонецЕсли;
		Иначе
             
			 Если Найти(СтрокаИсключений, ИмпортируемыеПоля.Идентификатор) > 0 Тогда // Исключения пропускаем
			    Продолжить;
			 КонецЕсли; 
			 Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
			 Если ПреобразоватьКтипу(Значение, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
			     Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				 Возврат 0;
			 КонецЕсли;
             
			 Если ПустоеЗначение(Значение) = 0  Тогда
	             Объект.УстановитьАтрибут(ИмпортируемыеПоля.Идентификатор, Значение);
			 КонецЕсли;

		КонецЕсли; 
	    
	КонецЦикла;
	
	
	// Теперь проверим заполненность обязательных реквизитов
	Если ПустоеЗначение(Объект.Наименование) = 1 Тогда
		Сообщить("Не задано наименование.", "!");
		Возврат 0;
	КонецЕсли;
	
	// Заполним реквизиты, которые можно заполнить по имеющимся данным
	Если ПустоеЗначение(Объект.ВидНоменклатуры) = 1 Тогда
		Объект.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Прочее;
	КонецЕсли;
	
	Если ПустоеЗначение(Объект.ПолнНаименование) = 1 Тогда
	    Объект.ПолнНаименование = Объект.Наименование;
	КонецЕсли;                       
	                          
	Если ПустоеЗначение(ГТД) = 0 Тогда
	    Объект.НомерГТД= ГТД;
	КонецЕсли;
	// Вроде можно записывать
	Попытка
		Объект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(),"!");
		Возврат -1;
	КонецПопытки;            
	
	// Теперь заполним исключительные поля
	Если Объект.ЭтоГруппа() = 0 Тогда  // у группы таких полей нет
		
		Единица = СоздатьОбъект("Справочник.Единицы");
		Единица.ИспользоватьВладельца(Объект.ТекущийЭлемент());
		
		СтараяБазовая = Объект.БазоваяЕдиница;                 
		
		Если ПустоеЗначение(СтараяБазовая) = 1 Тогда // Считаем, что новый товар
			
			Единица.Новый();
			Единица.ОКЕИ = БазоваяЕдиница;
			Единица.Коэффициент = 1;
			Единица.Записать();
		    Объект.БазоваяЕдиница = Единица.ТекущийЭлемент();
			
		Иначе // меняем тип базовой
			
			Единица.НайтиЭлемент(СтараяБазовая);
			Единица.ОКЕИ = БазоваяЕдиница;
			Единица.Записать();
			
		КонецЕсли;
		
		Если ПустоеЗначение(ОсновнаяЕдиница) = 1  Тогда
			Если ПустоеЗначение(Объект.ОсновнаяЕдиница) = 1 Тогда
			    Объект.ОсновнаяЕдиница = Объект.БазоваяЕдиница; // базовая единица не м.б. пустой (уже проверили)
			КонецЕсли;
		Иначе	
		    Если Единица.НайтиПоРеквизиту("ОКЕИ",ОсновнаяЕдиница, 0) = 0 Тогда
				Единица.Новый();
				Единица.ОКЕИ = ОсновнаяЕдиница;
				Единица.Коэффициент = 1;
				Единица.Записать();
				
			КонецЕсли;
		    Объект.ОсновнаяЕдиница = Единица.ТекущийЭлемент();
		КонецЕсли;
		
		Если ПустоеЗначение(ОсновноеСвойство) = 0 Тогда
			Свойство = СоздатьОбъект("Справочник.СвойстваНоменклатуры");
			Свойство.ИспользоватьВладельца(Объект.ТекущийЭлемент());
			Если Свойство.НайтиПоРеквизиту("ВидСвойства", Константа.ВидСвойстваНоменклатуры, 0) = 0 Тогда
				Свойство.Новый();
				Свойство.ВидСвойства = Константа.ВидСвойстваНоменклатуры;
			КонецЕсли;
	
			Свойство.ЗначениеСвойства = ОсновноеСвойство;
			Свойство.Записать();
			Объект.ОсновноеСвойство = Свойство.ТекущийЭлемент();
		    
		КонецЕсли;
		Объект.Записать();
	    
	КонецЕсли;
    Возврат Результат;
КонецФункции  // ИмпортироватьНоменклатуру()

//******************************************************************************
// ИмпортироватьЦены(ЗначенияПолей)
//
// Параметры:
//  ЗначенияПолей - список значений полей импортируемого входного файла
//
// Возвращаемое значение:
//  Возвращает 1, если очередная позиция успешно импортирована
//	   		   0, если НОВАЯ позиция не импортирована, но прекращать импорт не нужно         
//			  -1, если позиция не импортирована, и надо прекращать импорт
//
// Описание: импортирует новую позицию справочника и возвращает "успешность" импорта
// 
//
Функция ИмпортироватьЦены(ЗначенияПолей)      
	Перем Позиция, Единица;
	
	Результат = 1;  
	
	Объект = СоздатьОбъект("Справочник.Цены");
	Объект.ИспользоватьДату(ДатаЦен);
	
	// Теперь в цикле по полям заполняем реквизиты
	ИмпортируемыеПоля.ВыбратьСтроки();
	Пока ИмпортируемыеПоля.ПолучитьСтроку() = 1 Цикл 
		
		Если ИмпортируемыеПоля.Идентификатор = "Владелец" Тогда  // это д.б. первая строка
			
			Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);                                 
			
			// Владелец должен существовать.
			Если ПреобразоватьКтипу(Значение , ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
				Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				Возврат 0;
			КонецЕсли;
			Если ПустоеЗначение(Значение) = 0 Тогда
				Объект.ИспользоватьВладельца(Значение);
			Иначе
				Сообщить("Не задан Владелец","!");
				Возврат 0;
			КонецЕсли; 
			
		ИначеЕсли ИмпортируемыеПоля.Идентификатор = "ТипЦен" Тогда  //это д.б. вторая строка
			
			Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);                                 
			
			// Тип цен должен быть задан
			Если ПреобразоватьКтипу(Значение , ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
				Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				Возврат 0;
			КонецЕсли;
			Если ПустоеЗначение(Значение) = 0 Тогда
				
				//Динамически рассчитываемые цены импортировать не надо
				Если Значение.Рассчитывается = 1 Тогда
					Сообщить("Динамически рассчитываемые цены не импортируются","!");
					Возврат 0;
				КонецЕсли;	
				
				Если Объект.НайтиПоРеквизиту("ТипЦен", Значение, 0) = 0 Тогда
					Объект.Новый();
					Объект.ТипЦен = Значение;
				КонецЕсли;
			Иначе
				Сообщить("Не задан Тип цен","!");
				Возврат 0;
			КонецЕсли; 
			
		ИначеЕсли ИмпортируемыеПоля.Идентификатор = "Единица" Тогда
			
			Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);                                 
			
			//Единицу считаем в отдельную переменную, обработаем позже
			Единица = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
			Если ПреобразоватьКтипу(Единица, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
				Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				Возврат 0;
			КонецЕсли;
			
		Иначе
			
			Значение  = ПолучитьЗначениеТекущейСтроки(ЗначенияПолей);
			Если ПреобразоватьКтипу(Значение, ИмпортируемыеПоля.Тип, ИмпортируемыеПоля.Вид) = 0 Тогда
				Сообщить("Неверное значение поля """+ СокрЛП(ИмпортируемыеПоля.ПолноеНазвание) + """.","!");
				Возврат 0;
			КонецЕсли;
			
			Если ПустоеЗначение(Значение) = 0  Тогда
				Объект.УстановитьАтрибут(ИмпортируемыеПоля.Идентификатор, Значение);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	// Заполним реквизиты, которые можно заполнить по имеющимся данным
	Если ПустоеЗначение(Единица) = 1 Тогда
		Объект.Единица = Объект.Владелец.ОсновнаяЕдиница;
	Иначе
		СпрЕд = СоздатьОбъект("Справочник.Единицы");
		СпрЕд.ИспользоватьВладельца(Объект.Владелец);
		Если СпрЕд.НайтиПоРеквизиту("ОКЕИ", Единица, 0) = 1 Тогда;
			Объект.Единица = СпрЕд.ТекущийЭлемент();
		Иначе
			Сообщить("Неверно задана единица цены","!");
		КонецЕсли;
	КонецЕсли;
	
	// Вроде можно записывать
	Попытка
		Объект.Записать();
	Исключение
		Сообщить(ОписаниеОшибки(),"!");
		Возврат -1;
	КонецПопытки;            
	
	Возврат Результат;
	
КонецФункции  // ИмпортироватьЦены()

//******************************************************************************
// ИмпортироватьПозициюСправочника(ЗначенияПолей)
//
// Параметры:
//  ЗначенияПолей - список значений полей импортируемого входного файла
//
// Возвращаемое значение:
//  Возвращает 1, если очередная позиция успешно импортирована
//	   		   0, если НОВАЯ позиция не импортирована, но прекращать импорт не нужно         
//			  -1, если позиция не импортирована, и надо прекращать импорт
//
// Описание: импортирует новую позицию справочника и возвращает "успешность" импорта
// 
//
Функция ИмпортироватьПозициюСправочника(ЗначенияПолей)
	Перем ИмпОбъект, Результат, ЗначВхФайла, СоздалиНовый;   
	
	Результат = 0;
	Если      ВидСправочника = "Номенклатура" Тогда
		Результат = ИмпортироватьНоменклатуру(ЗначенияПолей);
	ИначеЕсли ВидСправочника = "Цены" Тогда 	
		Результат = ИмпортироватьЦены(ЗначенияПолей);
	КонецЕсли;
	
    Возврат Результат;
КонецФункции  // ИмпортироватьПозициюСправочника()

//******************************************************************************
// Выполнить()
//
// Параметры:
//   Режим = "Импорт"
//         = "Просмотр"    
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  по кнопке "Просмотр"
//
// Описание:
//  выполняет просмотр импортируемого файла
//
Процедура Выполнить(Режим = "Импорт") 
	
	Если ВходнойФайлОткрыт = 0 Тогда
		Предупреждение("Не открыт импортируемый файл",60);
		Возврат;
	КонецЕсли;	
	
	ЭтоПросмотр = ?(Режим = "Просмотр",1,0);
    
	ЧислоИмпортирПозиций = 0;
	ЧислоВходПолей       = ВходныеПоля.РазмерСписка();

	// создаем пустой список значений с импортированными данными об одном товаре - список занчений входных полей
	СписокЗначенийВхПолей = СоздатьОбъект("СписокЗначений");
	СписокЗначенийВхПолей.ВставитьЗначение(1,0,"",ЧислоВходПолей);
    
	Если ЭтоПросмотр=1 Тогда
		Таб = СоздатьОбъект("Таблица");
		Таб.ИсходнаяТаблица("Таблица");                            
		Таб.ВывестиСекцию("Отчет");
		
		ПросмНомерСтроки = 0;
		        
		Таб.ВывестиСекцию("Шапка|Номер");
		Для Индекс = 1 По ЧислоВходПолей Цикл
			ПросмЗначение = "";
			ВходныеПоля.ПолучитьЗначение(Индекс,ПросмЗначение);
			Таб.ПрисоединитьСекцию("Шапка|Колонка");
		КонецЦикла;	
	Иначе
		НачатьТранзакцию();
	КонецЕсли;	
		
	
	Если ВидФайла.ТекущаяСтрока()=1 Тогда  // текст с разделителями
                                                    
		НСтрока     = Макс(НачальнаяСтрока,1);  
		КСтрока     = Мин(ВходТекст.КоличествоСтрок(),КонечнаяСтрока);
		
		Для НомерСтроки = НСтрока По КСтрока Цикл	// цикл по всем строкам входного файла
			
			// СЧИТЫВАЕМ ЗНАЧЕНИЯ ПОЛЕЙ В СПИСОК ЗНАЧЕНИЙ
			
			Стр = ВходТекст.ПолучитьСтроку(НомерСтроки);
			Стр = СокрЛП(Стр);
	
			Если ПустаяСтрока(Стр)=1 Тогда	// очередная строка пуста
				Продолжить;	// пропускаем ее
			КонецЕсли;
	
			// Заполняем список значений входных полей
	
			Для НомерВхПоля = 1 По ЧислоВходПолей Цикл	// цикл по всем полям входного файла
				ПозицияРазделителя = Найти(Стр,Разделитель);
	
				// вырезаем значение очередного поля входного файла
				Если ПозицияРазделителя=0 Тогда
					ЗначениеВхПоля = Стр;
					Стр = "";
				Иначе
					ЗначениеВхПоля = Лев(Стр,ПозицияРазделителя-1);
					Стр = Прав(Стр,СтрДлина(Стр)-ПозицияРазделителя);
				КонецЕсли;
	
				// убираем пробелы
				ЗначениеВхПоля = СокрЛП(ЗначениеВхПоля);
				Стр = СокрЛП(Стр);
	
				// помещаем вырезанное значение в список
				СписокЗначенийВхПолей.УстановитьЗначение(НомерВхПоля,ЗначениеВхПоля);
			КонецЦикла;
				
			Если ЭтоПросмотр=1 Тогда // показываем

				ПросмНомерСтроки = НомерСтроки;
				Если ПросмНомерСтроки%10=0 Тогда
					Состояние("Выведена строка №"+Строка(ПросмНомерСтроки));
				КонецЕсли;	
				
				Таб.ВывестиСекцию("Значение|Номер");
				Для НомерВхПоля = 1 По ЧислоВходПолей Цикл      
					ПросмЗначение = СписокЗначенийВхПолей.ПолучитьЗначение(НомерВхПоля);
					Таб.ПрисоединитьСекцию("Значение|Колонка");
				КонецЦикла;	
				
			Иначе	// импортируем
				Рез = ИмпортироватьПозициюСправочника(СписокЗначенийВхПолей);
				Если Рез = 1 Тогда
					ЧислоИмпортирПозиций = ЧислоИмпортирПозиций + 1;
				ИначеЕсли Рез = 0 Тогда
					Сообщить("Строка номер """ + СокрЛП(НомерСтроки) + """ не импортирована","!");
				Иначе
					ОтменитьТранзакцию();
					Возврат;            
				КонецЕсли;	
			КонецЕсли;		

		КонецЦикла;

	ИначеЕсли ВидФайла.ТекущаяСтрока()=2 Тогда  // DBF
                 
		НомерЗаписи = 0;
		        
		ВходDBF.Первая();
		
		// пропускаем первые записи
		Для НомерСтроки = 1 По (НачальнаяСтрока-1) Цикл
			Если ВходDBF.ВКонце()>0 Тогда
				Прервать;
			КонецЕсли;
			ВходDBF.Следующая();
		КонецЦикла;	
		
		Для НомерЗаписи = НачальнаяСтрока По КонечнаяСтрока Цикл
			
			// СЧИТЫВАЕМ ЗНАЧЕНИЯ ПОЛЕЙ В СПИСОК ЗНАЧЕНИЙ
			Если ВходDBF.ВКонце()>0 Тогда
				Прервать;
			КонецЕсли;
			
			Для НомерВхПоля = 1 По ЧислоВходПолей Цикл	// цикл по всем полям входного файла
		    
				НазваниеВхПоля="";
				ВходныеПоля.ПолучитьЗначение(НомерВхПоля,НазваниеВхПоля);
				ЗначениеВхПоля = Строка(ВходDBF.ПолучитьЗначениеПоля(НазваниеВхПоля));
			    СписокЗначенийВхПолей.УстановитьЗначение(НомерВхПоля,ЗначениеВхПоля);
			КонецЦикла;
			
			ВходDBF.Следующая();
	
			Если ЭтоПросмотр=1 Тогда	// показываем
				
				ПросмНомерСтроки = НомерЗаписи;
				Если ПросмНомерСтроки%10=0 Тогда
					Состояние("Выведена строка №"+Строка(ПросмНомерСтроки));
				КонецЕсли;	
			
				Таб.ВывестиСекцию("Значение|Номер");
				Для НомерВхПоля = 1 По ЧислоВходПолей Цикл      
					ПросмЗначение = СписокЗначенийВхПолей.ПолучитьЗначение(НомерВхПоля);
					Таб.ПрисоединитьСекцию("Значение|Колонка");
				КонецЦикла;	
				
			Иначе	// импортируем

				Рез = ИмпортироватьПозициюСправочника(СписокЗначенийВхПолей);
				Если Рез = 1 Тогда
					ЧислоИмпортирПозиций = ЧислоИмпортирПозиций + 1;
				ИначеЕсли Рез = 0 Тогда
					Сообщить("Строка номер """ + СокрЛП(НомерСтроки) + """ не импортирована","!");
				Иначе
					ОтменитьТранзакцию();
					Возврат;            
				КонецЕсли;	
			КонецЕсли;		
			
		КонецЦикла;

	ИначеЕсли ВидФайла.ТекущаяСтрока()=3 Тогда  // XLS
        
		НСтрока = Макс(НачальнаяСтрока,1);
		КСтрока = КонечнаяСтрока;
				
		Для НомерСтроки = НСтрока По КСтрока Цикл	// цикл по всем строкам входного файла, кроме шапки
			
			// СЧИТЫВАЕМ ЗНАЧЕНИЯ ПОЛЕЙ В СПИСОК ЗНАЧЕНИЙ
		 	Для НомерВхПоля = 1 По ЧислоВходПолей Цикл	// цикл по всем полям входного файла
		 		ЗначениеВхПоля = ВходExcel.ActiveSheet.Cells(НомерСтроки,НомерВхПоля).Value;
		 	    СписокЗначенийВхПолей.УстановитьЗначение(НомерВхПоля,ЗначениеВхПоля);
		 	КонецЦикла;
		 	
	 		Если ЭтоПросмотр=1 Тогда	// показываем

	 			ПросмНомерСтроки = НомерСтроки;
				Если ПросмНомерСтроки%10=0 Тогда
					Состояние("Выведена строка №"+Строка(ПросмНомерСтроки));
				КонецЕсли;	
				
				Таб.ВывестиСекцию("Значение|Номер");
				Для НомерВхПоля = 1 По ЧислоВходПолей Цикл      
					ПросмЗначение = СписокЗначенийВхПолей.ПолучитьЗначение(НомерВхПоля);
					Таб.ПрисоединитьСекцию("Значение|Колонка");
				КонецЦикла;	
				
			Иначе		// импортируем

				Рез = ИмпортироватьПозициюСправочника(СписокЗначенийВхПолей);
				Если Рез = 1 Тогда
					ЧислоИмпортирПозиций = ЧислоИмпортирПозиций + 1;
				ИначеЕсли Рез = 0 Тогда
					Сообщить("Строка номер """ + СокрЛП(НомерСтроки) + """ не импортирована","!");
				Иначе
					ОтменитьТранзакцию();
					Возврат;            
				КонецЕсли;	
			КонецЕсли;	
	 	КонецЦикла;

	КонецЕсли;
    
	Если ЭтоПросмотр=1 Тогда
		Таб.Опции(0,0,1,0);
		Таб.ТолькоПросмотр(1);
		Таб.Показать("Содержимое импортируемого файла","");    
		Возврат;
	Иначе
		Предупреждение("Импорт завершен. Число импортированных элементов: "+Строка(ЧислоИмпортирПозиций));
	КонецЕсли;	
	
	Если ЧислоИмпортирПозиций>0 Тогда 
		
		Если Вопрос("Показать импортированный справочник?","Да+Нет")="Да" Тогда
			ОткрытьФормуМодально("Справочник.Номенклатура");
		КонецЕсли;	
		
		Если Вопрос("Вы согласны принять изменения?",
		            "Да+Нет", 60)="Да" Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЕсли;	   
	
КонецПроцедуры // Выполнить()
    
////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового()
	
	// При восстановлении настройки надо проверять заполнение ТЗ ИмпортируемыеПоля
	// если оно сделано для другого вида справочника, то ТЗ надо чистить 
	НужныйВид = Форма.Параметр;
	
	// В списке для "Номенклатуры" д.б. "БазоваяЕдиница", в "Цены" - "ТипЦен",
	Если НужныйВид = "Цены"  Тогда
		ИмяРеквизита = "ТипЦен";
	Иначе 
		ИмяРеквизита = "БазоваяЕдиница";
	КонецЕсли;
	Если ИмпортируемыеПоля.КоличествоСтрок() > 0 Тогда
		Стр = "";
		Если ИмпортируемыеПоля.НайтиЗначение(ИмяРеквизита, Стр, "Идентификатор") = 0 Тогда
			ИмпортируемыеПоля.УдалитьСтроки();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии(ФлагВосстановленияНастройки)
	
	Если МонопольныйРежим()<=0 Тогда
		Предупреждение("Для импорта справочников требуется монопольный режим!");	
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;	
	                     
	Если ИмпортируемыеПоля.КоличествоКолонок() = 0 Тогда
		
		ИмпортируемыеПоля.НоваяКолонка("ПолноеНазвание",,,,"Импортируемое поле");  // название (синоним) импортируемого атрибута
		ИмпортируемыеПоля.НоваяКолонка("Тип");                                     // его тип
		ИмпортируемыеПоля.НоваяКолонка("Вид");                                     // его Вид
		ИмпортируемыеПоля.НоваяКолонка("Длина");                                     
		ИмпортируемыеПоля.НоваяКолонка("Точность");                                     
		ИмпортируемыеПоля.НоваяКолонка("Владелец");                                // Владелец для подчиннных     
		ИмпортируемыеПоля.НоваяКолонка("Идентификатор");                           // его идентификатор
		ИмпортируемыеПоля.НоваяКолонка("НомерВходногоПоля");                       // номер входного поля, если импортируется из файла   
		ИмпортируемыеПоля.НоваяКолонка("ФиксирЗначение");                          // установленное фиксированное значение   
		ИмпортируемыеПоля.НоваяКолонка("ПредставлениеЗначения",,,,"Значение");     // отображаемое соответствие
	КонецЕсли; 
                                                                        
	// служебные колонки сделаем невидимыми
	ИмпортируемыеПоля.ВидимостьКолонки("Тип,Вид,Длина,Точность,Владелец,Идентификатор,НомерВходногоПоля,ФиксирЗначение,",0);
	
	// тип импортируемого справочника достаем из параметра обработки
    ВидСправочника = ?(ПустоеЗначение(Форма.Параметр)=0,Форма.Параметр,"Номенклатура");
	
	// устанавливаем заголовок
	Если ВРег(ВидСправочника)="НОМЕНКЛАТУРА"  Тогда
	    Форма.Заголовок("Импорт справочника номенклатуры");
	ИначеЕсли ВРег(ВидСправочника)="ЦЕНЫ"  Тогда
		Форма.Заголовок("Импорт справочника цен");	                    
		Форма.ДатаЦен.Видимость(1);
		Форма.ДатаЦенТекст.Видимость(1);
	Иначе
		СтатусВозврата(0);
		Возврат;
	КонецЕсли;

	Если ИмпортируемыеПоля.КоличествоСтрок() = 0 Тогда
		ЗаполнитьТаблицуИмпортируемыхПолей();
	КонецЕсли;

	// будем отслеживать только реальные изменения этих реквизитов
	Форма.Кодировка.ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.НазваниеФайла.ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.СписокРазделителей.ВыполнятьФормулуТолькоПриИзменении(1); 
	Форма.ЧислоКолонок.ВыполнятьФормулуТолькоПриИзменении(1);
    

	// инициализация списков
	Если ВидФайла.РазмерСписка() = 0 Тогда
		ВидФайла.ДобавитьЗначение(Текст);
		ВидФайла.ДобавитьЗначение(DBF);
		ВидФайла.ДобавитьЗначение(XLS);
	КонецЕсли;                         
	
	ТекСтр = ВидФайла.ТекущаяСтрока();
	Если ТекСтр = 0 Тогда
	    ТекСтр  = 1;
	КонецЕсли;      
	ВидФайла.ТекущаяСтрока(ТекСтр);
	ВидОткрытогоФайла = ВидФайла.ПолучитьЗначение(ТекСтр);

	Если Кодировка.РазмерСписка() = 0 Тогда
		Кодировка.ДобавитьЗначение("Windows(1251)");
		Кодировка.ДобавитьЗначение("DOS(866)");
	КонецЕсли;      
	ТекСтр = Кодировка.ТекущаяСтрока();
	Если ТекСтр = 0 Тогда
	    ТекСтр  = 1;
		Кодировка.ТекущаяСтрока(ТекСтр);
	КонецЕсли;      

	Если СписокРазделителей.РазмерСписка() = 0 Тогда
		СписокРазделителей.ДобавитьЗначение("TAB");
		СписокРазделителей.ДобавитьЗначение("Пробел");
		СписокРазделителей.ДобавитьЗначение("=");
		СписокРазделителей.ДобавитьЗначение("|");
		СписокРазделителей.ДобавитьЗначение(";");
		СписокРазделителей.ДобавитьЗначение(",");
		СписокРазделителей.ДобавитьЗначение("""");
		СписокРазделителей.ДобавитьЗначение("'");
	КонецЕсли;      
	ТекСтр = СписокРазделителей.ТекущаяСтрока();
	Если ТекСтр = 0 Тогда
	    ТекСтр  = 1;
		СписокРазделителей.ТекущаяСтрока(ТекСтр);
	КонецЕсли;      
	
	Разделитель = СписокРазделителей.ПолучитьЗначение(ТекСтр);
	ПроверкаСтруктурыФайла(1);
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога,ФлагСтандОбр)
	
	Если ИдентЭлемДиалога="НазваниеФайла" Тогда	// выбираем файл
		ФлагСтандОбр = 0;
		ВвестиНазваниеФайла();
	КонецЕсли;	           
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
Текст     = "Текст с разделителями"; XLS = "XLS-таблица"; DBF = "DBF-таблица";
ВходТекст = СоздатьОбъект("Текст");
ВходDBF   = СоздатьОбъект("XBase");
ДатаЦен   = РабочаяДата();
