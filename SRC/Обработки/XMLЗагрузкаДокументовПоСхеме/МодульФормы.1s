////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	Док;				//	Новый документ, реквизиты которого устанавливаем (загружаем из файла)
Перем	XML_Документ;		//	загружаемый XML-документ
Перем	СписокРасчСчетов;   //	Список загруженных банковских счетов ЮрЛиц
                                                                                                    
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ДатаИзСтроки(Зн)
//		
// Параметры:
//	Зн	-	строка - дата в международном формате ISO 8601 (ГГГГ-ММ-ЧЧ)
//		
// Возвращаемое значение:
// 	Значение типа "Дата"
//		
// Описание
//	Преобразуем строку в дату
//		
Функция ДатаИзСтроки(Зн)
	
	ПозРазделителя = Найти(Зн, "-");
	Если ПозРазделителя = 0 Тогда Возврат "" КонецЕсли;
	
	Зн1	= СокрЛП(Лев(Зн, ПозРазделителя - 1));
	Зн2	= СокрЛП(Прав(Зн, СтрДлина(Зн) - ПозРазделителя));
 
	ПозРазделителя = Найти(Зн2, "-");
	Если ПозРазделителя = 0 Тогда Возврат "" КонецЕсли;
	
	Зн3	= СокрЛП(Лев(Зн2, ПозРазделителя - 1));
	Зн4	= СокрЛП(Прав(Зн2, СтрДлина(Зн2) - ПозРазделителя));
	
	Возврат Дата(Зн1, Зн3, Зн4);
	
КонецФункции		//	ДатаИзСтроки()

//******************************************************************************
// ЗагрузитьБанк(Эл)
//		
// Параметры:
//	Эл - XML-элемент "Банк"
//		
// Возвращаемое значение:
// 	Элемент из Справочника "Банки"
//		
// Описание
//	Ищем банк по коду (БИК), если не находим , то создаем новый
//		
Функция ЗагрузитьБанк(Эл)
	
	Если ПустоеЗначение(Эл) = 1 Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;

	Наименование	=	Эл.ПолучитьАтрибут("Наименование");
	Местонахождение	=	Эл.ПолучитьАтрибут("Местонахождение");
	КоррСчет		=	Эл.ПолучитьАтрибут("НомерСчета");
	Адрес			=	Эл.ПолучитьАтрибут("Адрес");
	Телефоны		=	Эл.ПолучитьАтрибут("Телефон");
	БИК				=	СокрЛП(Эл.ПолучитьАтрибут("БИК"));
	                                                
	СпрБанки		= СоздатьОбъект("Справочник.Банки");
	
    Если СпрБанки.НайтиПоКоду(БИК, 0) = 0 Тогда
		СпрБанки.Новый();
		СпрБанки.Код				=	БИК;
		СпрБанки.Наименование		=	Наименование;
		СпрБанки.Местонахождение	=	Местонахождение;
		СпрБанки.КоррСчет			=	КоррСчет;
		СпрБанки.Адрес				=	Адрес;
		СпрБанки.Телефоны			=	Телефоны;
		СпрБанки.Записать();
	КонецЕсли;
	
	Возврат СпрБанки.ТекущийЭлемент();
	
КонецФункции		//	ЗагрузитьБанк()
  
//******************************************************************************
// ЗагрузитьРасчетныйСчет(Эл, ЮрЛицо, ОсновнойСчет)
//		
// Параметры:
//	Эл				-	XML-элемент "РасчетныйСчет"
//	ЮрЛицо			-	Фирма или Контрагент
//	ОсновнойСчет	- 	Основной банковский счет фирмы или контрагента
//		
// Возвращаемое значение:
// 	Элемент из Справочника "Расчетныесчета" или "БанковскиеСчета"
//		
// Описание
//	Ищем Счет по номеру, если не находим , то создаем новый
//	Если XML-элемент "РасчетныйСчет" не передан, то используем ОсновнойСчет
//		
Функция ЗагрузитьРасчетныйСчет(Эл, ЮрЛицо, ОсновнойСчет)
	
	Если ПустоеЗначение(Эл) = 1 Тогда
		СписокРасчСчетов.Установить(ЗначениеВстрокуВнутр(ЮрЛицо), ОсновнойСчет);
		Возврат(ОсновнойСчет);
	КонецЕсли;

	СпрРасчСчетов = СоздатьОбъект("Справочник.БанковскиеСчета");

    НомерСчета			= Эл.ПолучитьАтрибут("НомерСчета");
    Банк				= Эл.ПолучитьАтрибут("Банк");
	БанкКорреспондент	= Эл.ПолучитьАтрибут("БанкКорреспондент");
	                                         
	Если СпрРасчСчетов.НайтиПоРеквизиту("НомерСчета", НомерСчета, 0) = 0 Тогда
		ЭлБанкОрганизации = XML_Документ.ВыбратьУзел("//Банк[@Идентификатор = """ + Банк + """]");
		ЭлБанкДляРасчетов = XML_Документ.ВыбратьУзел("//Банк[@Идентификатор = """ + БанкКорреспондент + """]");
		
		СпрРасчСчетов.Новый();
		СпрРасчСчетов.ЮрФизЛицо			=	ЮрЛицо;
		СпрРасчСчетов.Наименование		=	"Новый счет";
		СпрРасчСчетов.НомерСчета		=	НомерСчета;
		СпрРасчСчетов.Банк				=	ЗагрузитьБанк(ЭлБанкОрганизации);
		СпрРасчСчетов.БанкДляРасчетов	=	ЗагрузитьБанк(ЭлБанкДляРасчетов);
		СпрРасчСчетов.Записать();
	КонецЕсли;
	
	СписокРасчСчетов.Установить(ЗначениеВстрокуВнутр(ЮрЛицо), СпрРасчСчетов.ТекущийЭлемент());
	
	Возврат СпрРасчСчетов.ТекущийЭлемент();
	
КонецФункции		//	ЗагрузитьРасчетныйСчет()

//******************************************************************************
// ЗагрузитьКонтрагента(Эл)
//		
// Параметры:
//	Эл	-	XML-элемент "контрагент"
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Ищем Контрагента в справочнике по реквизиту "Идентификатор", если не находим, то создаем новый
//		
Процедура ЗагрузитьКонтрагента(Эл)
	
	Если ПустоеЗначение(Эл) = 1 Тогда Возврат КонецЕсли;
	
	Идентификатор = СокрЛП(Эл.ПолучитьАтрибут("Контрагент"));
	
	Если ПустоеЗначение(Идентификатор) = 1	Тогда Предупреждение("У клиента не заполнен идентификатор!"); Возврат; КонецЕсли;
	
	ЭлКонтрагент = XML_Документ.ВыбратьУзел("//Контрагент[@Идентификатор = """ + Идентификатор + """]");

	СпрКонтрагентов = СоздатьОбъект("Справочник.Контрагенты");
	Если СпрКонтрагентов.НайтиПоРеквизиту("Идентификатор", СокрЛП(Идентификатор), 1) = 1 Тогда
		
		Док.Контрагент = СпрКонтрагентов.ТекущийЭлемент();
		
	Иначе
		
		Если ПустоеЗначение(ЭлКонтрагент) = 1 Тогда Предупреждение("Контрагент не найден!"); Возврат; КонецЕсли;
		
		Наименование	=	ЭлКонтрагент.ПолучитьАтрибут("ОтображаемоеНаименование");
		
		Если Вопрос("Контрагент " + Наименование + " не найден! Добавить данного контрагента в справочник", 4, 60) <> 6 Тогда Возврат КонецЕсли;
		
		Сайт = ЭлКонтрагент.ПолучитьАтрибут("Сайт");
		Если ПустоеЗначение(Сайт) = 0 Тогда
			СпрСайтов = СоздатьОбъект("Справочник.Сайты");
			Если СпрСайтов.НайтиПоНаименованию(СокрЛП(Сайт), 0, 1) = 0 Тогда
				СпрСайтов.Новый();
				СпрСайтов.Наименование	= Сайт;
				СпрСайтов.АдресСайта	= Сайт;
				СпрСайтов.Записать();
			КонецЕсли;
			Сайт = СпрСайтов.ТекущийЭлемент();
		Иначе
			Сайт = ПолучитьПустоеЗначение("Справочник.Сайты");
		КонецЕсли;
		
		СпрЮрЛиц		=	СоздатьОбъект("Справочник.ЮрЛица");
		СпрДоговоров	=	СоздатьОбъект("Справочник.Договоры");
		
		СпрКонтрагентов.Новый();
		СпрЮрЛиц.Новый();
		СпрДоговоров.Новый();

		СпрКонтрагентов.Наименование		=	Наименование;
		СпрКонтрагентов.Идентификатор       =	ЭлКонтрагент.ПолучитьАтрибут("Идентификатор");
		СпрКонтрагентов.Комментарий         =	ЭлКонтрагент.ПолучитьАтрибут("Комментарий");
		СпрКонтрагентов.Сайт                =	Сайт;
		СпрКонтрагентов.Записать();
		            
		СпрЮрЛиц.Наименование				=	Наименование;
		СпрЮрЛиц.ПолнНаименование			=	ЭлКонтрагент.ПолучитьАтрибут("Наименование");
		СпрЮрЛиц.ФактАдрес					=	ЭлКонтрагент.ПолучитьАтрибут("Адрес");
		СпрЮрЛиц.ЮрАдрес				    =	ЭлКонтрагент.ПолучитьАтрибут("ЮридическийАдрес");
		СпрЮрЛиц.Комментарий         		=	ЭлКонтрагент.ПолучитьАтрибут("Комментарий");
		                                                                         
		
		СпрДоговоров.Владелец				=	СпрКонтрагентов.ТекущийЭлемент();
		СпрДоговоров.Наименование			=	"Основной договор";
		СпрДоговоров.ВалютаВзаиморасчетов	=	глЗначениеПоУмолчанию("ОсновнаяВалютаВзаиморасчетов");
		Если ПустоеЗначение(СпрДоговоров.ВалютаВзаиморасчетов) = 1 Тогда
			СпрДоговоров.ВалютаВзаиморасчетов	= глРубли;
		КонецЕсли;
		
		
		Попытка СпрЮрЛиц.Телефоны			=	ЭлКонтрагент.ВыбратьУзел("Контакт/Телефон").Значение	Исключение КонецПопытки;
		Попытка СпрКонтрагентов.ЭлПочта		=	ЭлКонтрагент.ВыбратьУзел("Контакт/Почта").Значение 		Исключение КонецПопытки;
		
			
		СпрЮрЛиц.Записать();
		СпрДоговоров.Записать();
		
		СпрКонтрагентов.ЮрФизЛицо			=	СпрЮрЛиц.ТекущийЭлемент();
		СпрКонтрагентов.ОсновнойДоговор		=	СпрДоговоров.ТекущийЭлемент();
		СпрКонтрагентов.Записать();
		
		Док.Контрагент						=	СпрКонтрагентов.ТекущийЭлемент();
		
	КонецЕсли;

	ЭлРасчСчет	= ЭлКонтрагент.ВыбратьУзел("РасчетныйСчет");
	
	ЗагрузитьРасчетныйСчет(ЭлРасчСчет, СпрКонтрагентов.ЮрФизЛицо, СпрКонтрагентов.ОсновнойСчет);
	
КонецПроцедуры		//	ЗагрузитьКонтрагента()

//******************************************************************************
// ЗагрузитьФирму(Эл)
//		
// Параметры:
//	Эл	-	XML-элемент "контрагент"
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	Ищем Фирму в справочнике по реквизиту "Идентификатор"
//		
Процедура ЗагрузитьФирму(Эл)
	
	Если ПустоеЗначение(Эл) = 1 Тогда Возврат КонецЕсли;
	
	Идентификатор = СокрЛП(Эл.ПолучитьАтрибут("Контрагент"));
	
	Если ПустоеЗначение(Идентификатор) = 1	Тогда Предупреждение("У фирмы не заполнен идентификатор!");	Возврат; КонецЕсли;

	ЭлКонтрагент = XML_Документ.ВыбратьУзел("//Контрагент[@Идентификатор = """ + Идентификатор + """]");
	
	СпрФирмы = СоздатьОбъект("Справочник.Фирмы");
	Если СпрФирмы.НайтиПоРеквизиту("Идентификатор", СокрЛП(Идентификатор), 1) = 1 Тогда
		
		Док.Фирма	=	СпрФирмы.ТекущийЭлемент();
		
		ЭлРасчСчет	=	ЭлКонтрагент.ВыбратьУзел("РасчетныйСчет");
		
		ЗагрузитьРасчетныйСчет(ЭлРасчСчет, СпрФирмы.ЮрЛицо, СпрФирмы.ОсновнойСчет);
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьФирму()
                      
//******************************************************************************
// Единица(Товар, ИмяЕдиницы)
//		
// Параметры:
//	Товар		-	элемент справочника "Номенклатура"
//	ИмяЕдиницы	-	наименование единицы
//		
// Возвращаемое значение:
// 	Элемент Справочника "Единицы"
//		
// Описание
//	Ищем единицу в сравочнике, если не находим, то создаем новую
//		
Функция Единица(Товар, ИмяЕдиницы)
    
	Если ПустоеЗначение(Товар) = 1 		Тогда Возврат ПолучитьПустоеЗначение() КонецЕсли;
	Если ПустоеЗначение(ИмяЕдиницы) = 1 Тогда
		Возврат(Товар.ОсновнаяЕдиница);
	КонецЕсли;
	
	ИмяЕдиницы	=	СокрЛП(ИмяЕдиницы);
	
	СпрКлассификаторЕдиниц = СоздатьОбъект("Справочник.ОКЕИ");
    Если СпрКлассификаторЕдиниц.НайтиПоНаименованию(ИмяЕдиницы, 0, 1) = 0 Тогда
		СпрКлассификаторЕдиниц.Новый();
		СпрКлассификаторЕдиниц.Наименование		=	ИмяЕдиницы;
		СпрКлассификаторЕдиниц.ПолнНаименование	=	ИмяЕдиницы;
		СпрКлассификаторЕдиниц.Записать();
	КонецЕсли;
	
	Если Товар = "ОКЕИ" Тогда Возврат СпрКлассификаторЕдиниц.ТекущийЭлемент() КонецЕсли;
	
	СпрЕдиниц = СоздатьОбъект("Справочник.Единицы");
	СпрЕдиниц.ИспользоватьВладельца(Товар);
	          
	Если СпрЕдиниц.НайтиПоНаименованию(ИмяЕдиницы, 1, 1) = 0 Тогда
		СпрЕдиниц.Новый();
		СпрЕдиниц.ОКЕИ			=	СпрКлассификаторЕдиниц.ТекущийЭлемент();
		СпрЕдиниц.Наименование	=	ИмяЕдиницы;
		СпрЕдиниц.Коэффициент	=	1;
		СпрЕдиниц.Записать();
	КонецЕсли;
	
	Возврат СпрЕдиниц.ТекущийЭлемент();
	
КонецФункции		//	Единица()

//******************************************************************************
// ГТД(Наименование)
//		
// Параметры:
//	Наименование	-	номер ГТД
//		
// Возвращаемое значение:
// 	элемент Справочника "ГТД"
//		
// Описание
//	Ищем ГТД в сравочнике по наименованию, если не находим, то создаем новый
//		
Функция ГТД(Наименование)
                        
	Если ПустоеЗначение(Наименование) = 1 Тогда Возврат("") КонецЕсли;
	
	СпрГТД = СоздатьОбъект("Справочник.ГТД");
	Если СпрГТД.НайтиПоНаименованию(Наименование, 0, 1) = 0 Тогда
		СпрГТД.Новый();
		СпрГТД.Наименование = Наименование;
		СпрГТД.Записать();
	КонецЕсли; 
               
	Возврат СпрГТД.ТекущийЭлемент();
	
КонецФункции		//	ГТД()

//******************************************************************************
// Страна(Наименование)
//		
// Параметры:
//	Наименование	-	номер ГТД
//		
// Возвращаемое значение:
// 	элемент Справочника "Страны"
//		
// Описание
//	Ищем Страну в сравочнике по наименованию, если не находим, то создаем новый эл-т
//		
Функция Страна(Наименование)
	
	Если ПустоеЗначение(Наименование) = 1 Тогда Возврат("") КонецЕсли;
    
	СпрСтран = СоздатьОбъект("Справочник.ОКСМ");
	Если СпрСтран.НайтиПоНаименованию(Наименование, 0, 1) = 0 Тогда
		СпрСтран.Новый();
		СпрСтран.Наименование = Наименование;
		СпрСтран.Записать();
	КонецЕсли; 
               
	Возврат СпрСтран.ТекущийЭлемент();
	
КонецФункции		//	Страна()

//******************************************************************************
// ПрочитатьНДС(Эл, НДСВключенВСумму, СуммаНДС, СтавкаНДС)
//		
// Параметры:
//	Эл					-	XML-элемент, содержащий подчиненный элемент "СуммаНалога"
//	НДСВключенВСумму	-	получим данный флаг из атрибута XML-элемента "СуммаНалога"
//	СуммаНДС			-	получим данное значение из атрибута XML-элемента "СуммаНалога"
//	СтавкаНДС			-	число (в процентах) получим данное значение из атрибута XML-элемента "СуммаНалога"
//		
// Возвращаемое значение:
// 	Значение перечисления СтавкиНДС
//		
// Описание
//	Заполняем параметры НДС из атрибутов XML-элемента "СуммаНалога"
//		
Функция ПрочитатьНДС(Эл, НДСВключенВСумму=0, СуммаНДС=0, СтавкаНДС=0)
	
	СуммаНДС			=	0;
	СтавкаНДС			=	0;
	НДСВключенВСумму	=	0;

	ЭлНДС = Эл.ВыбратьУзел("СуммаНалога[@Налог=""AVT""]");
	Если ПустоеЗначение(ЭлНДС) = 0 Тогда
		СуммаНДС			=	Число(ЭлНДС.ПолучитьАтрибут("Сумма"));
		СтавкаНДС			=	Число(ЭлНДС.ПолучитьАтрибут("Ставка"));
		НДСВключенВСумму	=	Число(ЭлНДС.ПолучитьАтрибут("ВключенВСумму"));
		                                                              
		Если 		СтавкаНДС = 0 				Тогда ЗначСтавкиНДС = Перечисление.СтавкиНДС.БезНДС;
		ИначеЕсли	СтавкаНДС = 20 				Тогда ЗначСтавкиНДС = Перечисление.СтавкиНДС.НДС20;
		ИначеЕсли	СтавкаНДС = 10 				Тогда ЗначСтавкиНДС = Перечисление.СтавкиНДС.НДС10;
		ИначеЕсли	Окр(СтавкаНДС,2,1)=9.09		Тогда ЗначСтавкиНДС = Перечисление.СтавкиНДС.НДС9_09;
		ИначеЕсли	Окр(СтавкаНДС,2,1)=16.67	Тогда ЗначСтавкиНДС = Перечисление.СтавкиНДС.НДС16_67;
		КонецЕсли;			
	Иначе
		ЗначСтавкиНДС = Перечисление.СтавкиНДС.БезНДС;
	КонецЕсли;
	
	Возврат(ЗначСтавкиНДС);
	
КонецФункции		//	ПрочитатьНДС()

//******************************************************************************
// ПрочитатьНП(Эл, НПВключенВСумму, СуммаНП, СтавкаНП)
//		
// Параметры:
//	Эл					-	XML-элемент, содержащий подчиненный элемент "СуммаНалога"
//	НПВключенВСумму		-	получим данный флаг из атрибута XML-элемента "СуммаНалога"
//	СуммаНП				-	получим данное значение из атрибута XML-элемента "СуммаНалога"
//	СтавкаНП			-	число (в процентах) получим данное значение из атрибута XML-элемента "СуммаНалога"
//		
// Возвращаемое значение:
// 	Элемент справочника СтавкиНП
//		
// Описание
//	Заполняем параметры НП из атрибутов XML-элемента "СуммаНалога"
//		
Функция ПрочитатьНП(Эл, НПВключенВСумму=0, СуммаНП=0, СтавкаНП=0)

	СуммаНП						=	0;
	СтавкаНП					=	0;
	НПВключенВСумму				=	0;
	
	ЭлНП = Эл.ВыбратьУзел("СуммаНалога[@Налог=""ST""]");
	Если ПустоеЗначение(ЭлНП) = 0 Тогда
		СуммаНП			=	Число(ЭлНП.ПолучитьАтрибут("Сумма"));
		СтавкаНП		=	Число(ЭлНП.ПолучитьАтрибут("Ставка"));
		НПВключенВСумму	=	Число(ЭлНП.ПолучитьАтрибут("ВключенВСумму"));
	КонецЕсли;
	
	СпрСтавкиНП = СоздатьОбъект("Справочник.СтавкиНП");
	Если СпрСтавкиНП.НайтиПоРеквизиту("Ставка", СтавкаНП, 1) = 0 Тогда
		
		СпрСтавкиНП.Новый();
		СпрСтавкиНП.Наименование	=	Строка(СтавкаНП) + "%";
		СпрСтавкиНП.Ставка			=	СтавкаНП;
		СпрСтавкиНП.Записать();
		
		Сообщить("В справочник добавлена новая ставка налога с продаж - " + СтавкаНП + "% !");
	КонецЕсли;
	
	Возврат СпрСтавкиНП.ТекущийЭлемент();
	
КонецФункции		//	ПрочитатьНП()

//******************************************************************************
// НайтиВалюту(СтрВалюта)
//		
// Параметры:
//	СтрВалюта	-	наименование валюты
//		
// Возвращаемое значение:
// 	Элемент Справочника "Валюты"
//		
// Описание
//	Ищем валюту в сравочнике
//		
Функция НайтиВалюту(СтрВалюта)
	
    СпрВалюты = СоздатьОбъект("Справочник.Валюты");
	Если СпрВалюты.НайтиПоНаименованию(СокрЛП(СтрВалюта), 0, 1) = 0 Тогда
		Предупреждение("Валюта " + СтрВалюта + " не найдена!");
		Возврат("");
	КонецЕсли; 
    
	Возврат СпрВалюты.ТекущийЭлемент();	
	
КонецФункции		//	НайтиВалюту()
    
//******************************************************************************
// ЗагрузитьТовар(Эл)
//		
// Параметры:
//	Эл	-	XML-элемент "ТоварнаяПозиция"
//		
// Возвращаемое значение:
// 	Элемент из Справочника "Номенклатура"
//		
// Описание
//	Ищем товар либо по "Номенклатуре" (если каталог наш), либо по "Аналогам" (если каталог чужой)
//		
Функция ЗагрузитьТовар(Эл)
	
    ИдКаталога	= СокрЛП(Эл.ПолучитьАтрибут("Каталог"));
	ИдТовара	= СокрЛП(Эл.ПолучитьАтрибут("Товар"));
	    
	СпрНоменклатуры	= СоздатьОбъект("Справочник.Номенклатура");
	СпрКаталоги		= СоздатьОбъект("Справочник.Каталоги");
	Если СпрКаталоги.НайтиПоРеквизиту("Идентификатор", СокрЛП(ИдКаталога), 1) = 0 Тогда
		Предупреждение("Не найден каталог с идентификатором - " + ИдКаталога);
		Возврат "";	
	КонецЕсли;
              
	Если СпрКаталоги.ВладелецКаталога.Вид() = "Фирмы" Тогда
		
		Если ПустоеЗначение(СпрКаталоги.СпособИдентификацииНоменклатуры) = 1 Тогда
			СпособИдентификации	=	"Код";
		Иначе
			СпособИдентификации	=	СпрКаталоги.СпособИдентификацииНоменклатуры.Идентификатор();
		КонецЕсли;
		
		Если		СпособИдентификации = "Код" Тогда
			Если СпрНоменклатуры.НайтиПоКоду(ИдТовара, 0) = 0 Тогда
				Предупреждение("Не найден товар с кодом - " + ИдТовара);
				Возврат "";
			КонецЕсли;	
		ИначеЕсли	СпособИдентификации = "ШтрихКод" Тогда
			СпрЕдиниц	=	СоздатьОбъект("Справочник.Единицы");
			Если СпрЕдиниц.НайтиПоРеквизиту(СпособИдентификации, ИдТовара, 1) = 1 Тогда
				Возврат(СпрНоменклатуры.НайтиЭлемент(СпрЕдиниц.Владелец).ТекущийЭлемент());
			КонецЕсли;
			Предупреждение("Не найдена единица товара с ШтрихКодом - " + ИдТовара);
			Возврат "";
		Иначе
			Если СпрНоменклатуры.НайтиПоРеквизиту(СпособИдентификации, ИдТовара, 1) = 0 Тогда
				Предупреждение("Не найден товар с реквизитом - " + СпособИдентификации + " = " + ИдТовара);
				Возврат "";
			КонецЕсли;		
		КонецЕсли;
		
		Возврат СпрНоменклатуры.ТекущийЭлемент();
		
	Иначе
		
		СпрАналогов = СоздатьОбъект("Справочник.Аналоги");
		СпрАналогов.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", ИдТовара, 0, 0);
		Пока СпрАналогов.ПолучитьЭлемент() = 1 Цикл
		    Если СпрАналогов.Каталог = СпрКаталоги.ТекущийЭлемент() Тогда
				СпрНоменклатуры.НайтиЭлемент(СпрАналогов.Владелец);
		    	Возврат СпрНоменклатуры.ТекущийЭлемент();
		    КонецЕсли;
		КонецЦикла;
		    
		ИмяТовара	=	"";
		ЭлТовар		=	XML_Документ.ВыбратьУзел("//Каталог[@Идентификатор=""" + ИдКаталога + """]/Товар[@ИдентификаторВКаталоге=""" + ИдТовара + """]");
		Если ПустоеЗначение(ЭлТовар) = 0 Тогда
			ИмяТовара	=	ЭлТовар.ПолучитьАтрибут("Наименование");
		КонецЕсли;
		
		Сообщить("Не найден аналог для товара - " + ИмяТовара + " 		(по каталогу: " + ИдКаталога + ",   идентификатор товара в каталоге: " + ИдТовара + ")");
		Возврат(0);
	КонецЕсли;
	
КонецФункции		//	ЗагрузитьТовар()

//******************************************************************************        
// ПересчетСуммыВзаиморасчетов()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Пересчитывает сумму в валюте взаиморасчетов.
//
Функция ПересчетСуммыВзаиморасчетов()
	
	
	Если ПустоеЗначение(Док.Договор.ВалютаВзаиморасчетов)=1 Тогда
		Если Док.СуммаВзаиморасчетов<>0 Тогда
			Док.СуммаВзаиморасчетов=0;
		КонецЕсли;
		Возврат "";
	КонецЕсли;                      
	
	
	СуммаВзаиморасчетовДок		=	Док.Итог("Сумма");
	
	
	Если глЕстьРеквизитШапки("СуммаВклНДС", Док.Вид()) = 1 Тогда
		СуммаВзаиморасчетовДок	=	СуммаВзаиморасчетовДок + ?(Док.СуммаВклНДС=1,0, Док.Итог("СуммаНДС"));
	КонецЕсли;									
	
	
	Если глЕстьРеквизитШапки("СуммаВклНП", Док.Вид()) = 1 Тогда
		СуммаВзаиморасчетовДок	=	СуммаВзаиморасчетовДок + ?(Док.СуммаВклНП =1, 0, Док.Итог("СуммаНП" ));
	КонецЕсли;									
    
	
	СуммаВзаиморасчетовДокРуб	=	глПересчет (СуммаВзаиморасчетовДок, Док.Валюта, Док.Курс, глРубли, Док.ДатаДок);
	
    Док.СуммаВзаиморасчетов	=	глПересчет(СуммаВзаиморасчетовДок,
									Док.Валюта, Док.Курс,
									Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок);
								
КонецФункции		//	ПересчетСуммыВзаиморасчетов()

//******************************************************************************        
// СоздатьНовуюПартию(Товар)
// 
// Параметры: 
//  Товар - номенклатура партии
//
// Возвращаемое значение: 
//  Новая партия
//
// Описание:
// 	Создает новую партию
//
Функция СоздатьНовуюПартию(Товар, ГТД, СтранаПроисхождения)
	
	Партия	=	СоздатьОбъект("Справочник.Партии");
	Партия.ИспользоватьВладельца(Товар);
	Партия.Новый();
	Партия.ГТД					=	ГТД(ГТД);
	Партия.СтранаПроисхождения	=	Страна(СтранаПроисхождения);
	Партия.Записать();
	
	Возврат(Партия.ТекущийЭлемент());

КонецФункции		//	СоздатьНовуюПартию(()

//******************************************************************************        
// Документ_ПоступлениеТМЦ()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ПоступлениеТМЦ()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПоставщик);
	ЗагрузитьФирму(ЭлПокупатель);
	
	Док.Валюта				=	НайтиВалюту(СтрВалюта);
	Док.Курс				=	Курс;
	Док.ДатаОплаты			=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	
	Док.НомерДокВходящий	=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Док.ДатаДокВходящий	=	ДатаИзСтроки(ЭлДокумент.ПолучитьАтрибут("Дата"));
	
	Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Закупка;
	ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПриемНаРеализацию;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.ВидТМЦ					=	Перечисление.ВидыТМЦ.Товар;
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица					=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент				=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		Док.Партия					=	СоздатьНовуюПартию(Товар.ТекущийЭлемент(), ЭлТовар.ПолучитьАтрибут("ГТД"), ЭлТовар.ПолучитьАтрибут("СтранаПроисхождения"));
		
		глПересчетТаблЧасти(Док, "Цена");
		
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ПоступлениеТМЦ()

//******************************************************************************        
// Документ_Реализация()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_Реализация()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПокупатель);
	ЗагрузитьФирму(ЭлПоставщик);
	
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.ДатаОплаты	=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор	=	Док.Контрагент.ОсновнойДоговор;
	
	Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Продажа;
	ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПередачаНаРеализацию;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица				=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент			=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_Реализация()

//******************************************************************************        
// Документ_ОтчетКомитенту()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ОтчетКомитенту()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	//Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПолучатель);
	ЗагрузитьФирму(ЭлПлательщик);
	
	Док.Валюта			=	НайтиВалюту(СтрВалюта);
	Док.Курс			=	Курс;
	Док.ДатаОплаты		=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	Док.СпособРасчета	=	Перечисление.СпособыРасчетаВознаграждения.Ручное;
	Док.РежимВыбораТМЦ	=	2;
	
	
	//Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Продажа;
	//ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПередачаНаРеализацию;	КонецЕсли;
	
	//ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	//ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	//Если ПустоеЗначение(СуммаНДС) = 0 Тогда
	//	Док.УчитыватьНДС	=	1;
	//	Док.СуммаВклНДС	=	НДСВключенВСумму;
	//КонецЕсли;
	//Если ПустоеЗначение(СуммаНП) = 0 Тогда
	//	Док.УчитыватьНП	=	1;
	//	Док.СуммаВклНП		=	НПВключенВСумму;
	//КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Сумма					=	ЭлТовар.ПолучитьАтрибут("Сумма");
		Док.Единица					=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент				=	Док.Единица.Коэффициент;
		
		//Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		//Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		//глПересчетТаблЧасти(Док, "Цена");		//	???
		
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ОтчетКомитенту()

//******************************************************************************        
// Документ_ОтчетКомиссионера()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ОтчетКомиссионера()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	//Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПлательщик);
	ЗагрузитьФирму(ЭлПолучатель);
	
	Док.Валюта				=	НайтиВалюту(СтрВалюта);
	Док.Курс				=	Курс;
	Док.ДатаОплаты			=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор				=	Док.Контрагент.ОсновнойДоговор;
	Док.НомерДокВходящий	=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Док.ДатаДокВходящий		=	ДатаИзСтроки(ЭлДокумент.ПолучитьАтрибут("Дата"));
	
	
	//Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Продажа;
	//ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПередачаНаРеализацию;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	//ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС		=	НДСВключенВСумму;
	КонецЕсли;
	//Если ПустоеЗначение(СуммаНП) = 0 Тогда
	//	Док.УчитыватьНП		=	1;
	//	Док.СуммаВклНП		=	НПВключенВСумму;
	//КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Сумма					=	ЭлТовар.ПолучитьАтрибут("Сумма");
		Док.Единица					=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент				=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		//Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ОтчетКомиссионера()

//******************************************************************************        
// Документ_ВозвратПоставщику()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ВозвратПоставщику()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПокупатель);
	ЗагрузитьФирму(ЭлПоставщик);
	
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.ДатаОплаты	=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор	=	Док.Контрагент.ОсновнойДоговор;
	
	Если		СтрХозОперация = "BackSale" 	 Тогда	Док.КодОперации = глКО.ВозвратПоставщику;
	ИначеЕсли	СтрХозОперация = "BackComission" Тогда	Док.КодОперации = глКО.ВозвратКомитенту;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица				=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент			=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ВозвратПоставщику()

//******************************************************************************        
// Документ_ВозвратОтПокупателя()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ВозвратОтПокупателя()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПоставщик);
	ЗагрузитьФирму(ЭлПокупатель);
	
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.ДатаОплаты	=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор	=	Док.Контрагент.ОсновнойДоговор;
	
	Если		СтрХозОперация = "BackSale" 	 Тогда	Док.КодОперации = глКО.ВозвратОтПокупателя;
	ИначеЕсли	СтрХозОперация = "BackComission" Тогда	Док.КодОперации = глКО.ВозвратОтРеализатора;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура			=	Товар.ТекущийЭлемент();
		Док.Количество				=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена					=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица				=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент			=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС				=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП				=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ВозвратОтПокупателя()

//******************************************************************************        
// Документ_СчетФактураВыданный()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_СчетФактураВыданный()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПокупатель);
	ЗагрузитьФирму(ЭлПоставщик);
	
	
	//Док.НомерДок	=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Док.ДатаДок		=	ДатаИзСтроки( ЭлДокумент.ПолучитьАтрибут("Дата") );
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.Договор		=	Док.Контрагент.ОсновнойДоговор;
	
	//Если		СтрХозОперация = "BackSale" 	 Тогда	Док.КодОперации = глКО.ВозвратОтПокупателя;
	//ИначеЕсли	СтрХозОперация = "BackComission" Тогда	Док.КодОперации = глКО.ВозвратОтРеализатора;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС		=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП		=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);
		
		//Товар	= ЗагрузитьТовар(ЭлТовар);
		//Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();

	    ИдКаталога		=	СокрЛП(ЭлТовар.ПолучитьАтрибут("Каталог"));
		ИдТовара		=	СокрЛП(ЭлТовар.ПолучитьАтрибут("Товар"));
		ОписаниеТовара	=	XML_Документ.ВыбратьУзел("//Каталог[@Идентификатор=""" + ИдКаталога + """]/Товар[@ИдентификаторВКаталоге=""" + ИдТовара + """]");
		Если ПустоеЗначение(ОписаниеТовара) = 0 Тогда
			ИмяТовара	=	ОписаниеТовара.ПолучитьАтрибут("Наименование");
		Иначе
			ИмяТовара	=	ИдТовара;
		КонецЕсли;
		
		Док.Наименование		=	ИмяТовара;
		Док.Количество			=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена				=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица				=	Единица("ОКЕИ", ЭлТовар.ПолучитьАтрибут("Единица"));
		
		Док.СтавкаНДС			=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП			=	ПрочитатьНП(ЭлТовар);
		
		Док.ГТД					=	ГТД(ЭлТовар.ПолучитьАтрибут("ГТД"));
		Док.СтранаПроисхождения	=	Страна(ЭлТовар.ПолучитьАтрибут("СтранаПроисхождения"));
		
		глПересчетТаблЧасти(Док, "Цена");
	КонецЦикла;
	
КонецПроцедуры		//	Документ_СчетФактураВыданный()

//******************************************************************************        
// Документ_СчетФактураПолученный()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_СчетФактураПолученный()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПоставщик);
	ЗагрузитьФирму(ЭлПокупатель);
	
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	
	Док.НомерДокВходящий	=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Док.ДатаДокВходящий		=	ДатаИзСтроки(ЭлДокумент.ПолучитьАтрибут("Дата"));
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);
		
		Док.НоваяСтрока();
		
		СуммаНДС				=	0;
		НДСВключенВСумму		=	0;
		
		Док.СтавкаНДС			=	ПрочитатьНДС(ЭлТовар, НДСВключенВСумму, СуммаНДС);
		Док.СуммаНДС			=	СуммаНДС;
		
		Если ПустоеЗначение(НДСВключенВСумму) = 0 Тогда
			Док.Сумма			=	ЭлТовар.ПолучитьАтрибут("Сумма");
			Док.СуммаБезНДС		=	Док.Сумма - Док.СуммаНДС;
		Иначе
			Док.СуммаБезНДС		=	ЭлТовар.ПолучитьАтрибут("Сумма");
			Док.Сумма			=	Док.СуммаБезНДС + Док.СуммаНДС;
		КонецЕсли;
		
		Док.ВидДолга			=	Перечисление.ВидыДолга.ДолгЗаТовары;
		
		Док.ГТД					=	ГТД(ЭлТовар.ПолучитьАтрибут("ГТД"));
		Док.СтранаПроисхождения	=	Страна(ЭлТовар.ПолучитьАтрибут("СтранаПроисхождения"));
		
	КонецЦикла;
	
КонецПроцедуры		//	Документ_СчетФактураПолученный()

//******************************************************************************        
// Документ_ЗаявкаПокупателя()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ЗаявкаПокупателя()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПокупатель);
	ЗагрузитьФирму(ЭлПоставщик);
	
	Док.Валюта			=	НайтиВалюту(СтрВалюта);
	Док.Курс			=	Курс;
	Док.ДатаОплаты		=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	Док.БанковскийСчет	=	СписокРасчСчетов.Получить(ЗначениеВСтрокуВнутр(Док.Фирма.ЮрЛицо));
	
	//Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Продажа;
	//ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПередачаНаРеализацию;	КонецЕсли;
	
	Док.ВидОперации		=	Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура	=	Товар.ТекущийЭлемент();
		Док.Количество		=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена			=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица		=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент	=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС		=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП		=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ЗаявкаПокупателя()

//******************************************************************************        
// Документ_ЗаказПоставщику()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ЗаказПоставщику()
	
	Перем СуммаНДС,	НДСВключенВСумму;
	Перем СуммаНП,	НПВключенВСумму;
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СрокПлатежа		=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	
	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	                    
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПоставщик);
	ЗагрузитьФирму(ЭлПокупатель);
	
	Док.Валюта				=	НайтиВалюту(СтрВалюта);
	Док.Курс				=	Курс;
	Док.ДатаОплаты			=	ДатаИзСтроки(СрокПлатежа);
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	
	//Док.НомерДокВходящий	=	ЭлДокумент.ПолучитьАтрибут("Номер");
	//Док.ДатаДокВходящий	=	ДатаИзСтроки(ЭлДокумент.ПолучитьАтрибут("Дата"));
	
	//Если		СтрХозОперация = "Sale" 	 Тогда	Док.КодОперации = глКО.Закупка;
	//ИначеЕсли	СтрХозОперация = "Comission" Тогда	Док.КодОперации = глКО.ПриемНаРеализацию;	КонецЕсли;
	
	ПрочитатьНДС(ЭлДокумент,	НДСВключенВСумму,	СуммаНДС);
	ПрочитатьНП(ЭлДокумент,		НПВключенВСумму,	СуммаНП);
	                
	Если ПустоеЗначение(СуммаНДС) = 0 Тогда
		Док.УчитыватьНДС	=	1;
		Док.СуммаВклНДС	=	НДСВключенВСумму;
	КонецЕсли;
	Если ПустоеЗначение(СуммаНП) = 0 Тогда
		Док.УчитыватьНП	=	1;
		Док.СуммаВклНП		=	НПВключенВСумму;
	КонецЕсли;
	
    Док.УдалитьСтроки();
	
	ВыборкаТоваров = ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	Для Сч = 0 По ВыборкаТоваров.КоличествоУзлов() - 1 Цикл	
		ЭлТовар	= ВыборкаТоваров.ПолучитьУзел(Сч);		
		Товар	= ЗагрузитьТовар(ЭлТовар);
		    
		Если ПустоеЗначение(Товар) = 1 Тогда Продолжить КонецЕсли;
        
		Док.НоваяСтрока();
		
		Док.Номенклатура	=	Товар.ТекущийЭлемент();
		Док.Количество		=	ЭлТовар.ПолучитьАтрибут("Количество");
		Док.Цена			=	ЭлТовар.ПолучитьАтрибут("Цена");
		Док.Единица		=	Единица(Товар, ЭлТовар.ПолучитьАтрибут("Единица"));
		Док.Коэффициент	=	Док.Единица.Коэффициент;
		
		Док.СтавкаНДС		=	ПрочитатьНДС(ЭлТовар);
		Док.СтавкаНП		=	ПрочитатьНП(ЭлТовар);
		
		глПересчетТаблЧасти(Док, "Цена");
		ПересчетСуммыВзаиморасчетов();
	КонецЦикла;
	
КонецПроцедуры		//	Документ_ЗаказПоставщику()

//******************************************************************************        
// Документ_ПлатежноеПоручение()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ПлатежноеПоручение()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");

	ЭлПоставщик		=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Saler""]");
	ЭлПокупатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Buyer""]");
	
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПоставщик);
	ЗагрузитьФирму(ЭлПокупатель);
	
	Док.Договор			=	Док.Контрагент.ОсновнойДоговор;
	
	Док.БанковскийСчет		=	СписокРасчСчетов.Получить(ЗначениеВСтрокуВнутр(Док.Фирма.ЮрЛицо));
	Док.СчетКонтрагента	=	СписокРасчСчетов.Получить(ЗначениеВСтрокуВнутр(Док.Контрагент.ЮрФизЛицо));
	
	Док.Сумма				=	ЭлДокумент.ПолучитьАтрибут("Сумма");
	
КонецПроцедуры		//	Документ_ПлатежноеПоручение()

//******************************************************************************        
// Документ_ПКО()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_ПКО()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");

	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПлательщик);
	ЗагрузитьФирму(ЭлПолучатель);
	
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.Договор		=	Док.Контрагент.ОсновнойДоговор;
	Док.Касса		=	глЗначениеПоУмолчанию("ОсновнаяКасса");
	
	Док.Сумма		=	ЭлДокумент.ПолучитьАтрибут("Сумма");
	
	Если		СтрХозОперация = "Cash"		Тогда	Док.КодОперации = глКО.ОплатаОтПокупателя;
	ИначеЕсли	СтрХозОперация = "BackCash"	Тогда	Док.КодОперации = глКО.ВозвратОплатыОтПоставщика;	КонецЕсли;
	
	Док.СуммаВзаиморасчетов = глПересчет(Док.Сумма, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок);
	
	
КонецПроцедуры		//	Документ_ПКО()

//******************************************************************************        
// Документ_РКО()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_РКО()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");

	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПолучатель);
	ЗагрузитьФирму(ЭлПлательщик);
	
	Док.Валюта		=	НайтиВалюту(СтрВалюта);
	Док.Курс		=	Курс;
	Док.Договор		=	Док.Контрагент.ОсновнойДоговор;
	Док.Касса		=	глЗначениеПоУмолчанию("ОсновнаяКасса");
	
	Док.Сумма		=	ЭлДокумент.ПолучитьАтрибут("Сумма");
	
	Если		СтрХозОперация = "Cash"		Тогда	Док.КодОперации = глКО.ОплатаПоставщику;
	ИначеЕсли	СтрХозОперация = "BackCash"	Тогда	Док.КодОперации = глКО.ВозвратОплатыПокупателю;	КонецЕсли;
	
	Док.СуммаВзаиморасчетов = глПересчет(Док.Сумма, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок);
	
КонецПроцедуры		//	Документ_РКО()

//******************************************************************************        
// Документ_СтрокаВыпискиПриход()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_СтрокаВыпискиПриход()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");

	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПлательщик);
	ЗагрузитьФирму(ЭлПолучатель);
	
	Док.Валюта			=	НайтиВалюту(СтрВалюта);
	Док.Курс			=	Курс;
	Док.Договор		=	Док.Контрагент.ОсновнойДоговор;
	Док.БанковскийСчет	=	СписокРасчСчетов.Получить(ЗначениеВСтрокуВнутр(Док.Фирма.ЮрЛицо));
	
	Док.Сумма			=	ЭлДокумент.ПолучитьАтрибут("Сумма");
	
	Если		СтрХозОперация = "Payment"		Тогда	Док.КодОперации = глКО.ОплатаОтПокупателя;
	ИначеЕсли	СтрХозОперация = "BackPayment"	Тогда	Док.КодОперации = глКО.ВозвратОплатыОтПоставщика;	КонецЕсли;
	
	Док.СуммаВзаиморасчетов = глПересчет(Док.Сумма, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок);
	
КонецПроцедуры		//	Документ_СтрокаВыпискиПриход()

//******************************************************************************        
// Документ_СтрокаВыпискиРасход()
// 
// Параметры: 
//  Нет
//
// Возвращаемое значение: 
//  Нет (не используется)
//
// Описание:
// 	Загружает соответствующий документ
//
Процедура Документ_СтрокаВыпискиРасход()
	
	ЭлДокумент		=	XML_Документ.ВыбратьУзел("//Документ");
	
	СтрВалюта		=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	Курс			=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СтрХозОперация	=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");

	ЭлПолучатель	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Recipient""]");
	ЭлПлательщик	=	ЭлДокумент.ВыбратьУзел("ПредприятиеВДокументе[@Роль=""Payer""]");
	
	глЗаполнитьШапку(Док, 0);
	
	ЗагрузитьКонтрагента(ЭлПолучатель);
	ЗагрузитьФирму(ЭлПлательщик);
	
	Док.Валюта			=	НайтиВалюту(СтрВалюта);
	Док.Курс			=	Курс;
	Док.Договор		=	Док.Контрагент.ОсновнойДоговор;
	Док.БанковскийСчет	=	СписокРасчСчетов.Получить(ЗначениеВСтрокуВнутр(Док.Фирма.ЮрЛицо));
	
	Док.Сумма		=	ЭлДокумент.ПолучитьАтрибут("Сумма");
	
	Если		СтрХозОперация = "Payment"		Тогда	Док.КодОперации = глКО.ОплатаПоставщику;
	ИначеЕсли	СтрХозОперация = "BackPayment"	Тогда	Док.КодОперации = глКО.ВозвратОплатыПокупателю;	КонецЕсли;
	
	Док.СуммаВзаиморасчетов = глПересчет(Док.Сумма, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, Док.ДатаДок);
	
КонецПроцедуры		//	Документ_СтрокаВыпискиРасход()

//******************************************************************************
// ЗагрузитьДокумент(Вид)
//		
// Параметры:
//	Вид	 - строка - вид документа
//		
// Возвращаемое значение:
// 	Нет.
//		
// Описание
//	В зависимости от параметра вид вызывает нужную процедуру загрузки
//		
Процедура ЗагрузитьДокумент(Вид)
	
	Если		Вид = "ПоступлениеТМЦ"			Тогда	Документ_ПоступлениеТМЦ()
	ИначеЕсли	Вид = "Реализация"				Тогда	Документ_Реализация()
	
	ИначеЕсли	Вид = "ВозвратПоставщику"		Тогда	Документ_ВозвратПоставщику()
	ИначеЕсли	Вид = "ВозвратОтПокупателя"		Тогда	Документ_ВозвратОтПокупателя()
		
	ИначеЕсли	Вид = "СчетФактураВыданный"		Тогда	Документ_СчетФактураВыданный()
	ИначеЕсли	Вид = "СчетФактураПолученный"	Тогда	Документ_СчетФактураПолученный()
		
	ИначеЕсли	Вид = "ЗаявкаПокупателя"		Тогда	Документ_ЗаявкаПокупателя()
	ИначеЕсли	Вид = "ЗаказПоставщику"			Тогда	Документ_ЗаказПоставщику()
		
	ИначеЕсли	Вид = "ОтчетКомиссионера"		Тогда	Документ_ОтчетКомиссионера()
	ИначеЕсли	Вид = "ОтчетКомитенту"			Тогда	Документ_ОтчетКомитенту()
		
	ИначеЕсли	Вид = "ПлатежноеПоручение"		Тогда	Документ_ПлатежноеПоручение()
		
	ИначеЕсли	Вид = "ПКО"						Тогда	Документ_ПКО()
	ИначеЕсли	Вид = "РКО"						Тогда	Документ_РКО()
		
	ИначеЕсли	Вид = "СтрокаВыпискиПриход"		Тогда	Документ_СтрокаВыпискиПриход()
	ИначеЕсли	Вид = "СтрокаВыпискиРасход"		Тогда	Документ_СтрокаВыпискиРасход()
		
	КонецЕсли;                           

КонецПроцедуры		//	ЗагрузитьДокумент()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	СписокРасчСчетов	=	СоздатьОбъект("СписокЗначений");
	СписПараметров		=	Форма.Параметр;
	Форма.Параметр		=	ПолучитьПустоеЗначение();
	    
	СтатусВозврата(0);
	
	Если		ПустоеЗначение(СписПараметров) = 1						Тогда	Возврат;
	ИначеЕсли	ТипЗначенияСтр(СписПараметров) = "ГрупповойКонтекст"	Тогда	Возврат;
	Иначе
		ИмяФайла				= СписПараметров.Получить("ПолноеИмяФайла");
		Док					= СписПараметров.Получить("Документ");
	КонецЕсли;
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
				Предупреждение("Компонента v7plus.dll не найдена!");
				Возврат;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Анализатор		=	СоздатьОбъект("AddIn.XMLParser");
	
	XML_Документ		=	Анализатор.СоздатьДокумент();
	
	Если ПустоеЗначение(XML_Документ) = 1 Тогда	Возврат КонецЕсли;

	//КоллекцияСхем = Анализатор.СоздатьКоллекциюСхем();
	//КоллекцияСхем.ДобавитьСхему("urn:CommerceML", КаталогИБ() + "ExtForms\CommerML.biz");
	//XML_Документ.Схемы = КоллекцияСхем;	                                         
	                              
	Если ПустоеЗначение(ИмяФайла) = 1 Тогда
		ИмяФайла = КаталогИБ() + "Документ.xml";
		
		Если Фс.ВыбратьФайл(0, ИмяФайла, КаталогИБ(), "Выберите файл загрузки", "*.xml|*.xml", , ) = 0 Тогда	Возврат КонецЕсли;
		
		Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
			Предупреждение("Неправильное имя файла!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	XML_Документ.Загрузить(ИмяФайла);
    	
	ЗагрузитьДокумент(Док.Вид());
	
	СтатусВозврата(0);
	
КонецПроцедуры		//	ПриОткрытии()

//******************************************************************************
//				Для информации

//	РольФирмы, 		ХозОперация, 		ВидДокумента, 				СутьХозОперации
	
//	"Покупатель",	"Sale",				"ПоступлениеТМЦ",			"Поступление товара");
//	"Покупатель",	"Comission",		"ПоступлениеТМЦ",			"Прием товара на реализацию");

//	"Продавец",		"Sale",				"Реализация",				"Отпуск товара");
//	"Продавец",		"Comission",		"Реализация",				"Передача товара на реализацию");
               	
//	"Продавец",		"BackSale",			"ВозвратПоставщику",		"Возврат товара поставщику");
//	"Продавец",		"BackComission",	"ВозвратПоставщику",		"Возврат товара комитенту");

//	"Покупатель",	"BackSale",			"ВозвратОтПокупателя",		"Возврат товара от покупателя");
//	"Покупатель",	"BackComission",	"ВозвратОтПокупателя",		"Возврат товара от комиссионера");

//	"Продавец",		"Invoice",			"СчетФактураВыданный",		"Счет-Фактура");
//	"Покупатель",	"Invoice",			"СчетФактураПолученный",	"Счет-Фактура поставщика");

//	"Продавец",		"Order",			"ЗаявкаПокупателя",			"Заказ товара");
//	"Продавец",		"PayableBill",		"ЗаявкаПокупателя",			"Счет на оплату");

//	"Покупатель",	"Order",			"ЗаказПоставщику",			"Заказ товара");
//	"Покупатель",	"PayableBill",		"ПлатежноеПоручение",		"Счет на оплату");

//	"Получатель",	"Cash",				"ПКО",						"Поступление наличных денег от покупателя");
//	"Получатель",	"BackCash",			"ПКО",						"Возврат наличных денег от поставщика");

//	"Плательщик",	"Cash",				"РКО",						"Выплата наличных денег поставщику");
//	"Плательщик",	"BackCash",			"РКО",						"Возврат наличных денег покупателю");

//	"Получатель",	"Payment",			"СтрокаВыпискиПриход",		"Поступление  безналичных денег от покупателя");
//	"Получатель",	"BackPayment",		"СтрокаВыпискиПриход",		"Возврат безналичных денег от поставщика");

//	"Плательщик",	"Payment",			"СтрокаВыпискиРасход",		"Выплата безналичных денег поставщику");
//	"Плательщик",	"BackPayment",		"СтрокаВыпискиРасход",		"Возврат безналичных денег покупателю");
	
//******************************************************************************
