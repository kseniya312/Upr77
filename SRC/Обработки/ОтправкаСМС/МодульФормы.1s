// SMSC.RU версия 1.0.28 (10.12.2012)

Перем SMSC_Логин; 		// логин клиента
Перем SMSC_Пароль; 		// пароль клиента или MD5-хеш пароля в нижнем регистре
Перем SMSC_HTTPS;       // использовать HTTPS протокол
Перем SMSC_Отладка;		// флаг отладки
Перем SMSC_Кодировка;   // кодировка сообщения (utf-8 или koi8-r), по умолчанию используется windows-1251

Перем ЕСТЬ_ПРОКСИ;		// Флаг использования PROXY-сервера
Перем ПРОКСИ_АДРЕС;
Перем ПРОКСИ_ПОРТ;
Перем ПРОКСИ_ЛОГИН;
Перем ПРОКСИ_ПАРОЛЬ;

Перем Соединение;
Перем SMSC_ЧасовойПояс;
Перем ТекСправочник, ТекФИО, ТекТелефон; 
Перем Hex[16];
Перем ФорматыСообщений[6];
Перем ПоследнееИД, ПоследнийНомер;
Перем Запрос, ТекстЗапроса;
Перем СписокСтатусов;
Перем СписокОшибок;
Перем ТекущийБаланс;
Перем ПоследнийСтатус;
Перем ПоследнийОтвет;
Перем АвтоОтправка; 
Перем ТекДатаЕсть;

Процедура поКнопкеОтправитьSMS() Далее
//***************************************************************************************
// ВНУТРЕННИЕ СЛУЖЕБНЫЕ ФУНКЦИИ

//***************************************************************************************
// Функция преобразования строки вида х,у в список значений
//
Функция Строка2Список(Стр)       
	
	Перем Рез;
	    
	Рез = СоздатьОбъект("СписокЗначений");
	й = 1;
	
	Для й = 1 По 4 Цикл
	    
		Поз = Найти(Стр, ","); 
		
		Если  Поз = 0 Тогда
		    Рез.ДобавитьЗначение(Стр);
		    Прервать;                 
		Иначе	
			Рез.ДобавитьЗначение(Лев(Стр,Поз-1));
		КонецЕсли;	 
		
		Стр = Сред(Стр, Поз+1, СтрДлина(Стр)-Поз);
		
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // Строка2Список()


//***************************************************************************************
Функция URLEncode(Стр1)
             
	//СтрокаСимволов = " !""@№#;%:?*().,/$^&\";
	СтрокаСимволов = " @№#%?/$&+";
	
	Рез = ""; 
	Стр= СокрЛП(Стр1);
	Для Сч=1 По СтрДлина(Стр) Цикл
 
		Символ = Сред(Стр, Сч, 1);
		КС = КодСимв(Символ);
	
		флЗаменили = 0;    
		Если Найти(СтрокаСимволов, Символ) > 0 Тогда

			Рез = Рез + "%"+ Hex[Цел(КС/16)+1] + Hex[Цел(КС%16)+1];
			флЗаменили = 1;
		    
		КонецЕсли;

		Если (КС <= 127) и (флЗаменили = 0) Тогда 
			Рез = Рез + Символ; 
		ИначеЕсли флЗаменили = 0 Тогда
			Рез = Рез + "%"+ Hex[Цел(КС/16)+1] + Hex[Цел(КС%16)+1];
		КонецЕсли;
		
	КонецЦикла;
 
	Возврат Рез;

КонецФункции // URLEncode()        


//*******************************************************************************
// Переводит время в формате Unix DateTimeStamp в строку с датой, временем 
//
// Пареметры: 
// ШтампВремени - штамп времени в формате Unix
//
Функция Unix2Date (ШтампВремени)  
	
	ЧислоДней = Цел(ШтампВремени / 86400); 

	Д = Дата("01.01.1970") + ЧислоДней;
	ОстСек = ШтампВремени % 86400;

	Ч = Цел(ОстСек / 3600);
	ОстСек = ОстСек % 3600;         

	М = Цел(ОстСек / 60);
	С = ОстСек % 60;
	
	Возврат Формат(Д, "Д ДДММГГГГ") + " " + Ч + ":" + М + ":" + С;
	
КонецФункции // Unix2Date()


//*******************************************************************************
// Осуществляет загрузку внешней компоненты WinHttp.dll
//
Функция УстановитьКомпоненту()

	Попытка

		Соединение = СоздатьОбъект("WinHttp.WinHttpRequest.5.1");
		Соединение.Option(9, 80);
		Если ЕСТЬ_ПРОКСИ = 1 Тогда
			Соединение.SetProxy(2, СокрЛП(ПРОКСИ_АДРЕС) + ":" + СокрЛП(ПРОКСИ_ПОРТ));
		КонецЕсли;	

	Исключение 

		Сообщить("Не удалось создать объект WinHttp.WinHttpRequest.5.1!" + РазделительСтрок + 
				"Проверьте наличие системной библиотеки ""WinHttp.dll""!");
		Возврат 0;

	КонецПопытки; 

	Возврат 1;

КонецФункции  // УстановитьКомпоненту()


//***************************************************************************************
// Функция чтения адреса 
//
Функция _SMSC_ПрочитатьАдрес(Адрес, Параметры) 
	
	Перем Рез;	          
	
	Попытка
		Соединение.Open("POST", СокрЛП(Адрес), 0); 
		Если ЕСТЬ_ПРОКСИ = 1 Тогда
			Соединение.SetCredentials(СокрЛП(ПРОКСИ_ЛОГИН), СокрЛП(ПРОКСИ_ПАРОЛЬ), 1);
		КонецЕсли;	
		Соединение.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		Соединение.Send(СокрЛП(Параметры));
		Рез = Соединение.ResponseText();
	Исключение 
		Сообщить("Не удалось получить данные с сервера!", "!");
		Возврат "";
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции //_SMSC_ПрочитатьАдрес()
               

//***************************************************************************************
// Функция вызова запроса. Формирует URL и делает 3 попытки чтения.
//
Функция _SMSC_ПослатьКоманду(Команда, Аргументы = "") 

	Адрес = "http" + ?(SMSC_HTTPS = 1, "s", "") + "://smsc.ru/sys/" + Команда + ".php";
    Параметры = "login=" + СокрЛП(URLEncode(SMSC_Логин)) + "&psw=" + СокрЛП(URLEncode(SMSC_Пароль)) + "&fmt=1" + 
		?(ПустаяСтрока(SMSC_Кодировка) = 1, "", "&charset=" + SMSC_Кодировка) + "&" + СокрЛП(Аргументы);
	
	//Параметры = "";     
	//Адрес = "http://www.yandex.ru";
 		
	Для Сч = 1 По 3 Цикл
    	
		Если Сч > 1 Тогда
    	    Для Сч2 = 1 По 2000 Цикл
				у = Сч2; // Небольшой таймаут
			КонецЦикла;
		КонецЕсли;
		
		Рез = _SMSC_ПрочитатьАдрес(Адрес, Параметры);
		
		Если ПустоеЗначение(Рез) = 0 Тогда
		    Прервать;
		КонецЕсли;
		
	КонецЦикла;   
	
	Если ПустоеЗначение (Рез) = 1  Тогда

		Если SMSC_Отладка = 1 Тогда
	        Сообщить("Ошибка чтения адреса: "+ Адрес + "?" + Параметры);
		КонецЕсли;                                                    
		
		Рез = "," // Фиктивный ответ
		
	КонецЕсли;                       
	
	Возврат Строка2Список(Рез);
	
КонецФункции // _SMSC_ПослатьКоманду()	                      


//***************************************************************************************
// Функция отправки SMS
//
// обязательные параметры:
//
// Телефоны - список телефонов через запятую или точку с запятой
// Сообщение - отправляемое сообщение 
//
// необязательные параметры:
//
// Транслит - переводить или нет в транслит (1 или 0)
// Время - необходимое время доставки в виде строки (DDMMYYhhmm, h1-h2, 0ts, +m)
// ИД - идентификатор сообщения
// ФорматСообщения - формат сообщения (0 - обычное sms, 1 - flash-sms, 2 - wap-push, 3 - hlr, 4 - bin, 5 - bin-hex, 6 - ping-sms)
// Отправитель - имя отправителя (Sender ID)
// ДопПараметры - строка дополнительных параметров, добавляемая в URL-запрос ("valid=01:00&maxsms=3&tz=2")
//
// возвращает список (<id>, <количество sms>, <стоимость>, <баланс>) в случае успешной отправки
// либо список (<id>, -<код ошибки>) в случае ошибки
//
Функция ПослатьSMS(Телефоны, Сообщение, Транслит = 0, Время = "", ИД = 0, ФорматСообщения = 0, Отправитель = "", ДопПараметры = "")
    
	Ответ = _SMSC_ПослатьКоманду ("send", "cost=3&phones=" + URLEncode(Телефоны) + "&mes=" + URLEncode(Сообщение) + 
                    "&translit=" + Транслит + "&id=" + ИД + ?(ФорматСообщения > 0, "&" + ФорматыСообщений[ФорматСообщения], "") + 
					?(ПустаяСтрока(Отправитель) = 1, "", "&sender=" + URLEncode(Отправитель)) + 
                    ?(ПустаяСтрока(Время) = 1, "", "&time=" + URLEncode(Время)) +
					?(ПустаяСтрока(ДопПараметры) = 1, "", "&" + ДопПараметры));

    // (id, cnt, cost, balance) или (id, -error)

    Если (SMSC_Отладка = 1) Тогда

		РезИД = Число(Ответ.ПолучитьЗначение(1));
		Рез = Число(Ответ.ПолучитьЗначение(2));
		Если (Рез > 0) Тогда
            Сообщить ("Сообщение отправлено успешно. ID: " + РезИД + ", всего SMS: " + Ответ.ПолучитьЗначение(2) + 
					", стоимость: " + Ответ.ПолучитьЗначение(3) + " руб., баланс: " + Ответ.ПолучитьЗначение(4) + " руб.");
        Иначе       
            Сообщить ("Ошибка № " + Строка(-Рез) + ?(РезИД > 0, ", ID: " + РезИД, ""));
		КонецЕсли;	

	КонецЕсли;

    Возврат Ответ;
	
КонецФункции // ПослатьSMS()    


//***************************************************************************************
// Функция получения стоимости SMS
//
// обязательные параметры:
//
// Телефоны - список телефонов через запятую или точку с запятой
// Сообщение - отправляемое сообщение 
//
// необязательные параметры:
//
// Транслит - переводить или нет в транслит (1 или 0)
// Отправитель - имя отправителя (Sender ID)
// ДопПараметры - строка дополнительных параметров, добавляемая в URL-запрос ("list=79999999999:Ваш пароль: 123\n78888888888:Ваш пароль: 456")
//
// возвращает список (<стоимость>, <количество sms>) либо список (0, -<код ошибки>) в случае ошибки
//
Функция ПолучитьСтоимость(Телефоны, Сообщение, Транслит = 0, Отправитель = "", ДопПараметры = "")

    Ответ = _SMSC_ПослатьКоманду("send", "cost=1&phones=" + URLEncode(Телефоны) + "&mes=" + URLEncode(Сообщение) + 
					?(ПустаяСтрока(Отправитель) = 1, "", "&sender=" + URLEncode(Отправитель)) + 
					"&translit=" + Транслит + ?(ПустаяСтрока(ДопПараметры) = 1, "", "&" + ДопПараметры));

    // (cost, cnt) или (0, -error)

    Если (SMSC_Отладка = 1) Тогда
		
		Рез1 = Число(Ответ.ПолучитьЗначение(1));
		Рез2 = Число(Ответ.ПолучитьЗначение(2));
        Если (Рез2 > 0) Тогда
            Сообщить ("Стоимость рассылки: " + Рез1 + " руб. Всего SMS: " + Рез2);
        Иначе
            Сообщить ("Ошибка № " + Строка(-Рез2));
		КонецЕсли;	

	КонецЕсли;

    Возврат Ответ;

КонецФункции


//***************************************************************************************
// Функция проверки статуса отправленного SMS
//
// ИД - ID cообщения
// Телефон - номер телефона
//
// возвращает список:
// для отправленного SMS (<статус>, <время изменения>, <код ошибки sms>)
// для HLR-запроса (<статус>, <время изменения>, <код ошибки sms>, <код страны регистрации>, <код оператора абонента>,
// <название страны регистрации>, <название оператора абонента>, <название роуминговой страны>, <название роумингового оператора>,
// <код IMSI SIM-карты>, <номер сервис-центра>)
// либо список (0, -<код ошибки>) в случае ошибки
//
Функция ПолучитьСтатус(ИД, Телефон) 
     
	Ответ = _SMSC_ПослатьКоманду("status", "phone=" + URLEncode(Телефон) + "&id=" + ИД);

    // (status, time, err) или (0, -error)

    Если (SMSC_Отладка = 1) Тогда

		Рез1 = Число(Ответ.ПолучитьЗначение(1));
		Рез2 = Число(Ответ.ПолучитьЗначение(2));
		
		Если (Рез2 >= 0) Тогда
        	Сообщить ("Статус SMS = " + Рез1 +  ?(ПустоеЗначение(Рез2) = 0, ", время изменения статуса - " + Unix2Date(Число(Ответ.ПолучитьЗначение(2))), ""));
        Иначе
            Сообщить ("Ошибка № " + Строка(-Рез2));
		КонецЕсли;	
		
    КонецЕсли;

    Возврат Ответ;

КонецФункции // ПолучитьСтатус()


//***************************************************************************************
// Функция получения баланса
//
// без параметров
//
// возвращает баланс в виде строки или 0 в случае ошибки

Функция ПолучитьБаланс()
	Рез = 0;
	Если АвтоОтправка = 0 Тогда
		Ответ = _SMSC_ПослатьКоманду("balance"); // (balance) или (0, -error)
		Рез = Число(Ответ.ПолучитьЗначение(1));
		
		Если (SMSC_Отладка = 1) Тогда
			
			Если Рез >= 0 тогда
				Сообщить("Сумма на счете: " +  Рез + " руб.");
			Иначе
				Сообщить("Ошибка № " +  Строка(-Число(Ответ.ПолучитьЗначение(2))));
			КонецЕсли;	
			
		КонецЕсли;
				
	КонецЕсли;
	Возврат Рез;
КонецФункции // ПолучитьБаланс()    


//***************************************************************************************
// Вывод строки-статуса
//
// Параметры:
// Сообщение - сообщение, выводимое в строке статуса;
// флОшибка - 1 - сообщение выводится красным цветом, 0 - зеленым.
//
Процедура Статус(Сообщение, флОшибка = 0)
	
	Форма.СтатусСтрока.Заголовок("");
	Если флОшибка = 1 Тогда
		Форма.СтатусСтрока.Цвет(255, 0, 0);
	Иначе
		Форма.СтатусСтрока.Цвет(0, 128, 0);
	КонецЕсли;
	Форма.СтатусСтрока.Заголовок(Сообщение);

КонецПроцедуры // Статус()


//***************************************************************************************
Процедура ПоКнопкеБаланс()  
	
	Рез = ПолучитьБаланс(); 
	
    Если Рез >= 0 тогда
		
		Статус("Сумма на счете: " + Рез + " руб.");  
		ТекущийБаланс = Рез + " руб.";
		
	Иначе

		Статус("Ошибка получения баланса!", 1);
		
	КонецЕсли;	
	
КонецПроцедуры // ПоКнопкеБаланс()
               

//***************************************************************************************
Процедура ПоКнопкеСтатус()  
	
	Если ПустоеЗначение(ПоследнееИД) = 1 Тогда
	
		Статус("Нет отправленных сообщений!", 1);
		Возврат;                        
		
	КонецЕсли;
        
	Ответ = ПолучитьСтатус(ПоследнееИД, ПоследнийНомер);
	Рез1 = Число(Ответ.ПолучитьЗначение(1));
	Рез2 = Число(Ответ.ПолучитьЗначение(2));
	
	Если Рез2 >= 0 Тогда
        Попытка
			Стр = "";
			СписокСтатусов.ПолучитьЗначение(СписокСтатусов.НайтиЗначение(Рез1), Стр);
			Статус(ПоследнийНомер + ": " + Стр);
			ПоследнийСтатус = Стр; 
		Исключение	
			
			Статус("Ошибка получения статуса последнего сообщения!", 1);
		КонецПопытки;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры // ПоКнопкеСтатус()


//*******************************************************************************
Процедура ОбновитьБаланс()
	
	Рез = ПолучитьБаланс(); 
    Если Рез >= 0 тогда
		ТекущийБаланс = Рез + " руб.";
	Иначе
		ТекущийБаланс = "Ошибка!";
	КонецЕсли;	

	
КонецПроцедуры //ОбновитьБаланс()
 
Процедура АвтоОтправитьСМС()    
	
	Если ТекДатаЕсть <> ТекущаяДата() Тогда
		СтатусВозврата(0);	
		ЗавершитьРаботуСистемы(0);
	КонецЕсли;	
	
	//СпрСМС = СоздатьОбъект("Справочник.СМС");
	СпрСМСЗапись = СоздатьОбъект("Справочник.СМС");
	СпрСМСЗапись.ИспользоватьДату(ТекущаяДата());
	//СпрСМС.ИспользоватьДату(ТекущаяДата());
	//СпрСМС.ВыбратьЭлементыПоРеквизиту("Статус",Перечисление.СтатусыСМС.НеОтправлено);
	
	АвтоОтправка = 1;
	
	
	СпрСМС 		= СоздатьОбъект("Запрос");
	ТекСтатус 	= Перечисление.СтатусыСМС.НеОтправлено;
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПолучитьСчета) 
	|Обрабатывать НеПомеченныеНаУдаление;
	|ТекущийЭлемент = Справочник.СМС.ТекущийЭлемент;
	|Заявка = Справочник.СМС.Заявка;
	|Текст = Справочник.СМС.Текст;
	|ИД = Справочник.СМС.ИД;
	|НомерТелефона = Справочник.СМС.НомерТелефона;
	|Статус = Справочник.СМС.Статус;
	|Группировка ТекущийЭлемент;
	|Условие(Статус = ТекСтатус);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если СпрСМС.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка к заполнению выходных форм данными запроса
	
	// Заполнение полей "Заголовок"
	 
	//НачатьТранзакцию();
	
	СписокРасчетныхСчетовФирмы = СоздатьОбъект("СписокЗначений");	
	
	Сч = 1;
	
	Пока СпрСМС.Группировка(1) = 1 Цикл
		//Пока СпрСМС.ПолучитьЭлемент() = 1 Цикл
		//Если СпрСМС.ПометкаУдаления() = 1 Тогда
		//	Продолжить;
		//КонецЕсли;
		
		Если СпрСМС.Заявка.Выбран() = 1 Тогда 
			Если ((ТекущаяДата() - СпрСМС.Заявка.ДатаДок) >= 2) 
			//и (СпрСМС.ТекущийЭлемент.ПометкаУдаления() = 0) 
			Тогда
				СпрСМСЗапись.НайтиЭлемент(СпрСМС.ТекущийЭлемент);                       
				СпрСМСЗапись.Удалить(0);
				Продолжить;
			КонецЕсли;
		КонецЕсли;	
		
		Сообщение = СпрСМС.Текст;   
		СписокКлиентов.УдалитьВсе();
		СписокКлиентов.ДобавитьЗначение(СпрСМС.ТекущийЭлемент);
		ПоследнийОтвет = 0;
		
		Если Сч > 1 Тогда
			Для Сч2 = 1 По 2000 Цикл
				у = Сч2; // Небольшой таймаут
			КонецЦикла;
		КонецЕсли;
		
		поКнопкеОтправитьSMS();
		Сч = Сч + 1;
		
		Если ПоследнийОтвет > 0 Тогда
			СпрСМСЗапись.НайтиЭлемент(СпрСМС.ТекущийЭлемент);
			СпрСМСЗапись.ЛогОтправки 	= "Отправлено в СМС центр";
			СпрСМСЗапись.Статус 		= Перечисление.СтатусыСМС.ВОбработке;
			СпрСМСЗапись.ИД 			= ПоследнееИД;
			Попытка
				СпрСМСЗапись.Записать();  
			Исключение
			КонецПопытки;
		Иначе     
			СпрСМСЗапись.НайтиЭлемент(СпрСМС.ТекущийЭлемент);
			СпрСМСЗапись.ЛогОтправки 	= "Отправка не прошла в СМС центр"; 
			Попытка
				СпрСМСЗапись.Записать();  
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	ТекСтатус 	= Перечисление.СтатусыСМС.ВОбработке;
	
	//СпрСМС.ВыбратьЭлементыПоРеквизиту("Статус",Перечисление.СтатусыСМС.ВОбработке); 
	
	Если СпрСМС.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Пока СпрСМС.Группировка(1) = 1 Цикл
		//Пока СпрСМС.ПолучитьЭлемент() = 1 Цикл
		//Если СпрСМС.ПометкаУдаления() = 1 Тогда
		//Продолжить;
		//КонецЕсли;
		
		ПоследнееИД 	= СпрСМС.ИД;
		ПоследнийНомер 	= СпрСМС.НомерТелефона;
		ПоследнийСтатус = "";
		ПоКнопкеСтатус();
		
		Если ПоследнийСтатус = "Доставлено" Тогда
			СпрСМСЗапись.НайтиЭлемент(СпрСМС.ТекущийЭлемент);
			СпрСМСЗапись.ЛогОтправки = "Получен статус доставлено";
			СпрСМСЗапись.Статус = Перечисление.СтатусыСМС.Отправлено;
			Попытка СпрСМСЗапись.Записать(); Исключение КонецПопытки;
		Иначе     
			СпрСМСЗапись.НайтиЭлемент(СпрСМС.ТекущийЭлемент);
			СпрСМСЗапись.ЛогОтправки = "Получен статус "+ПоследнийСтатус;
			Попытка  СпрСМСЗапись.Записать();  Исключение КонецПопытки;
		КонецЕсли;
	КонецЦикла;  
	  
	//ЗафиксироватьТранзакцию();
	
КонецПроцедуры	

//***************************************************************************************
Процедура ПриОткрытии()           
	
	Если УстановитьКомпоненту() = 0 Тогда
	    Возврат;
	КонецЕсли;  
	
	Форма.ИспользоватьСлой("Основной");
	
	СтатусСтрока = "";
	ДатаОтправки = ТекущаяДата(); // для отложенной отправки
	Ч=0; М=0; С=0;
	ТекущееВремя(Ч, М, С);
	ВремяОтправки = Формат(Ч, "Ч(0)2") + ":" + Формат(М, "Ч(0)2"); // для отложенной отправки
	
	ТекСправочник = ВосстановитьЗначение("SMSC_РеквизитСправочник");
	
	ТекТелефон = ВосстановитьЗначение("SMSC_РеквизитТелефон");
	ТекФИО = ВосстановитьЗначение("SMSC_РеквизитФИО");
	SMSC_Логин = ВосстановитьЗначение("SMSC_Логин");
	SMSC_Пароль = ВосстановитьЗначение("SMSC_Пароль");     
	SMSC_Отладка = ВосстановитьЗначение("SMSC_Отладка");
	SMSC_HTTPS = ВосстановитьЗначение("SMSC_HTTPS");             
	SMSC_Отправитель = ВосстановитьЗначение("SMSC_Отправитель");  
	SMSC_ЧасовойПояс = ВосстановитьЗначение("SMSC_ЧасовойПояс"); 
    
	SMSC_Кодировка = "";
	
	ТекДатаЕсть = ТекущаяДата();
	
	//Если (глПользователь.Код="ОтправкаСМС") Тогда
		Форма.ОбработкаОжидания("АвтоОтправитьСМС", Константа.ПериодОтправкиСМС);
		//АвтоОтправитьСМС();
		//Форма.Закрыть();
	//КонецЕсли;	
	
	ОбновитьБаланс();
КонецПроцедуры // ПриОткрытии()  


//***************************************************************************************
Процедура ПриЗакрытии()
	
	СохранитьЗначение("SMSC_РеквизитСправочник",ТекСправочник);
	СохранитьЗначение("SMSC_РеквизитТелефон", 	ТекТелефон);
	СохранитьЗначение("SMSC_РеквизитФИО", 		ТекФИО);
	СохранитьЗначение("SMSC_Логин", 			SMSC_Логин);
	СохранитьЗначение("SMSC_Пароль", 			SMSC_Пароль);
	СохранитьЗначение("SMSC_Отправитель", 		SMSC_Отправитель);
	СохранитьЗначение("SMSC_Отладка", 			SMSC_Отладка); 
	СохранитьЗначение("SMSC_HTTPS", 			SMSC_HTTPS); 
	СохранитьЗначение("SMSC_Кодировка",			SMSC_Кодировка); 
	СохранитьЗначение("SMSC_ЧасовойПояс", 		SMSC_ЧасовойПояс);
	
КонецПроцедуры // ПриЗакрытии()


//***************************************************************************************
Процедура ПриИзмененииОтложеннойДоставки()
	
	Форма.ДатаОтправки.Доступность(флДатаОтправки);
	Форма.ВремяОтправки.Доступность(флДатаОтправки);

КонецПроцедуры //ПриИзмененииОтложеннойДоставки



//***************************************************************************************
Процедура Назад(Пар)
	
	Если Пар = 1 Тогда       
		
		Если (ТекСправочник <> Метаданные.Справочник(ВыбСправочник.ТекущаяСтрока()).Идентификатор) и (СписокКлиентов.РазмерСписка() > 0) Тогда
			Если Вопрос("Изменился справочник. Текущий список получателей будет очищен", "Ок+Отмена") = "Отмена" Тогда
				Форма.ИспользоватьСлой("Основной");
				Возврат;    
			КонецЕсли; 
			СписокКлиентов.УдалитьВсе();
		КонецЕсли;                                       
		
		ТекСправочник = Метаданные.Справочник(ВыбСправочник.ТекущаяСтрока()).Идентификатор;
		
		Если ВыбТелефон.ТекущаяСтрока()=1 Тогда
			ТекТелефон = "Наименование";
		Иначе
			ТекТелефон = Метаданные.Справочник(ВыбСправочник.ТекущаяСтрока()).Реквизит(ВыбТелефон.ТекущаяСтрока()-1).Идентификатор;
		КонецЕсли;
		
		Если ВыбФИО.ТекущаяСтрока()=1 Тогда
			ТекФИО = "Наименование";
		Иначе
			ТекФИО = Метаданные.Справочник(ВыбСправочник.ТекущаяСтрока()).Реквизит(ВыбФИО.ТекущаяСтрока()-1).Идентификатор;
		КонецЕсли;
		    
		SMSC_Логин = SMSC_Логин1;
		SMSC_Пароль = SMSC_Пароль1;
		SMSC_Отладка = SMSC_Отладка1;
		SMSC_HTTPS = SMSC_HTTPS1 - 1;
		SMSC_ЧасовойПояс = ЧасовыеПоясы.ТекущаяСтрока();
		
	    ОбновитьБаланс(); 
	КонецЕсли;	

	Форма.ИспользоватьСлой("Основной");
	
КонецПроцедуры // Назад()


//***************************************************************************************
Процедура ОткрНастройки()
	
	SMSC_Логин1 = SMSC_Логин;
	SMSC_Пароль1 = SMSC_Пароль;
	SMSC_Отладка1 = SMSC_Отладка;
	SMSC_HTTPS1 = SMSC_HTTPS + 1;       
	ЧасовыеПоясы.ТекущаяСтрока(SMSC_ЧасовойПояс);	
	
	Сп = СоздатьОбъект("СписокЗначений");
	Для Сч = 1 По Метаданные.Справочник() Цикл
		Сп.ДобавитьЗначение(Метаданные.Справочник(Сч).Идентификатор,Метаданные.Справочник(Сч).Представление());
	КонецЦикла; 
	
	Сп.Выгрузить(ВыбСправочник);

	Рез=1;
	Если СокрЛП(ТекСправочник)<>"" Тогда
		Рез = Сп.НайтиЗначение(СокрЛП(ТекСправочник));
		Если Рез<>0 Тогда
			ВыбСправочник.ТекущаяСтрока(Рез);
		КонецЕсли;
	ИначеЕсли Сп.РазмерСписка() > 0 Тогда
		ТекСправочник = Сп.ПолучитьЗначение(1);
	КонецЕсли;

	Сп.УдалитьВсе();                    
	Если Строка(Метаданные.Справочник(Рез)) = "Метаданные" Тогда
	    Рез = 1;
	КонецЕсли;

	Сп.ДобавитьЗначение("Наименование");
	Для Пер = 1 По Метаданные.Справочник(Рез).Реквизит() Цикл
		Сп.ДобавитьЗначение(Метаданные.Справочник(Рез).Реквизит(Пер).Идентификатор,Метаданные.Справочник(Рез).Реквизит(Пер).Представление());
	КонецЦикла; 

	Сп.Выгрузить(ВыбТелефон);
	Сп.Выгрузить(ВыбФИО);
	
	Если СокрЛП(ТекТелефон)<>"" Тогда
		Рез = Сп.НайтиЗначение(СокрЛП(ТекТелефон));
		Если Рез<>0 Тогда
			ВыбТелефон.ТекущаяСтрока(Рез);
		ИначеЕсли ВыбТелефон.РазмерСписка() > 0 Тогда
			ВыбТелефон.ТекущаяСтрока(1);
		КонецЕсли;
	КонецЕсли;   
	
	Если СокрЛП(ТекФИО)<>"" Тогда
		Рез = Сп.НайтиЗначение(СокрЛП(ТекФИО));
		Если Рез<>0 Тогда
			ВыбФИО.ТекущаяСтрока(Рез);  
		ИначеЕсли ВыбФИО.РазмерСписка > 0 Тогда
			ВыбФИО.ТекущаяСтрока(1);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ИспользоватьСлой("Настройки");
	
КонецПроцедуры // ОткрНастройки()  


//***************************************************************************************
Процедура ИзмСправочник()

	Рез = ВыбСправочник.ТекущаяСтрока();
	Сп = СоздатьОбъект("СписокЗначений");
	Сп.ДобавитьЗначение("Наименование");
	Для Сч = 1 По Метаданные.Справочник(Рез).Реквизит() Цикл
		Сп.ДобавитьЗначение(Метаданные.Справочник(Рез).Реквизит(Сч).Идентификатор,Метаданные.Справочник(Рез).Реквизит(Сч).Представление());
	КонецЦикла;
	
	Сп.Выгрузить(ВыбТелефон);
	Сп.Выгрузить(ВыбФИО);
		
КонецПроцедуры // ИзмСправочник()
        

//***************************************************************************************
Процедура ДобавитьПолучателя()

	Если СокрЛП(ТекСправочник)="" Тогда

		Статус("Вид справочника не выбран. Добавление не возможно!", 1);

	Иначе

		Спр = СоздатьОбъект("Справочник."+СокрЛП(ТекСправочник));
		Спр.ВыборГруппы(1);
		Если Спр.Выбрать("Выберите клиента","ФормаСписка")=1 Тогда
			Если СписокКлиентов.НайтиЗначение(Спр.ТекущийЭлемент())<>0 Тогда
				Статус("Клиент " + СокрЛП(Спр.ТекущийЭлемент()) + " уже добавлен", 1);
			Иначе
				СписокКлиентов.ДобавитьЗначение(Спр.текущийЭлемент());
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДобавитьПолучателя()


//***************************************************************************************
Процедура ОбработкаПодбора(Элемент, Кф)
	
	Если СписокКлиентов.НайтиЗначение(Элемент.ТекущийЭлемент())<>0 Тогда
		Статус("Клиент " + СокрЛП(Элемент.ТекущийЭлемент()) + " уже добавлен", 1);
	Иначе
		СписокКлиентов.ДобавитьЗначение(Элемент.ТекущийЭлемент());
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()


//***************************************************************************************
Процедура ДобавитьМного()

	Если СокрЛП(ТекСправочник)="" Тогда
		Статус("Вид справочника не выбран. Добавление не возможно!", 1);
	Иначе
		Конт="";
		ОткрытьПодбор("Справочник."+СокрЛП(ТекСправочник),"ФормаПодбора",Конт,1);
		Конт.ВыборГруппы(1);
	КонецЕсли;	

КонецПроцедуры // ДобавитьМного()


//***************************************************************************************
Процедура УдалитьТекущую()

	Если СписокКлиентов.ТекущаяСтрока()<>0 Тогда
		СписокКлиентов.УдалитьЗначение(СписокКлиентов.ТекущаяСтрока());
	КонецЕсли;

КонецПроцедуры // УдалитьТекущую()   


//***************************************************************************************
Процедура ДобавитьФамилию()

	Если Найти(Сообщение, "%f%") = 0 Тогда
		Сообщение=Сообщение+" %f% ";
	КонецЕсли;

КонецПроцедуры // ДобавитьИмя() 


//***************************************************************************************
Процедура ДобавитьИмя()

	Если Найти(Сообщение, "%i%") = 0 Тогда
		Сообщение=Сообщение+" %i% ";
	КонецЕсли;

КонецПроцедуры // ДобавитьИмя()


//***************************************************************************************
Процедура ДобавитьОтчество()

	Если Найти(Сообщение, "%o%") = 0 Тогда
		Сообщение=Сообщение+" %o% ";
	КонецЕсли;

КонецПроцедуры // ДобавитьОтчество()


//***************************************************************************************
Функция изСтрокиЛокал(Стр,раз,поз)
	 Кол = 1;
	 Посл = 0;
	 Рез = "";  
	 Для Сч = 1 По СтрДлина(Стр) Цикл

	 	Символ = Сред(Стр, Сч, 1);
	 	Если Символ = Раз Тогда
	 	    Если Кол = Поз Тогда
	 	    	 Возврат Рез;
	 		КонецЕсли;
	 		Кол = Кол + 1;
	 	  	Рез = "";
	 	Иначе
	 	    Рез = Рез + символ;
	 	КонецЕсли;
	 	
	КонецЦикла;  
	
   Возврат Рез;

КонецФункции // изСтрокиЛокал()


//***************************************************************************************
Процедура ДобавитьТелефон(НомерТелефона, НомераТелефонов)
	          
	НомераТелефонов = НомераТелефонов + ?(ПустаяСтрока(НомераТелефонов) = 0, ",", "") + СтрЗаменить(СтрЗаменить(НомерТелефона, ":", ","), ";", ",");
	
КонецПроцедуры // ДобавитьТелефон()    
                                     

//***************************************************************************************                
Функция ПолучитьСписокНомеровВГруппе(Группа)
	
	Рез = СоздатьОБъект("СписокЗначений");
	Спр = СоздатьОбъект("Справочник"); 
	ВидГруппы = Группа.ПредставлениеВида();
	Спр.Вид(ВидГруппы);
	
	Спр.ИспользоватьРодителя(Группа);
	Спр.ВыбратьЭлементы(1);
	
	Пока Спр.ПолучитьЭлемент() = 1 Цикл
	    Если (Спр.ЭтоГруппа() = 0) и (Спр.ПометкаУдаления() = 0) Тогда
	        Рез.ДобавитьЗначение(Спр.ТекущийЭлемент());
	    КонецЕсли;
	КонецЦикла;                                        
	
	Возврат Рез;
	
КонецФункции


//***************************************************************************************
Процедура ОбработатьОтправкуSMS(флПолучитьСтоимость = 0)
	                                
	Если флПолучитьСтоимость = 0 Тогда
		Статус("Отправляем SMS...");
	Иначе	
		Статус("Запрашиваем стоимость SMS...");
	КонецЕсли;
	
	Если СокрЛП(SMSC_Логин) = "" тогда
		Статус("Введите логин", 1);
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(SMSC_Пароль) = "" тогда
		Статус("Введите пароль", 1);
		Возврат;
	КонецЕсли;
	
	Если СокрЛП(Сообщение) = "" тогда
		Статус("Введите текст SMS", 1);
		Возврат;
	КонецЕсли;
	
	ИспФИО = 0;
	Если ОтправлятьТолькоДоп = 0 Тогда

		Если СокрЛП(ТекСправочник) = "" Тогда
			Статус("Выберите справочник", 1);
			Возврат;
		КонецЕсли;     
		
		Если СокрЛП(ТекТелефон) = "" Тогда
			Статус("Выберите поле справочника с номером телефона", 1);
			Возврат;
		КонецЕсли;     
		
		Если (Найти(Сообщение, "%f%") > 0) или (Найти(Сообщение, "%i%") > 0) или (Найти(Сообщение, "%o%") > 0) тогда

			Если СокрЛП(ТекФИО) = "" Тогда
				Статус("Выберите поле справочника с ФИО отправителя", 1);
				Возврат;
			КонецЕсли;
			ИспФИО = 1;

		КонецЕсли;
		
	КонецЕсли;       
	

	НомераТелефонов = "";
	Пер = 1;
	ДатаОтправкиСтрока = "";
	ВыборкаБыла = 0;
	Если (флДатаОтправки = 1) и (флПолучитьСтоимость = 0) тогда
		
		Если (ПустоеЗначение(ДатаОтправки) = 1) или (ПустоеЗначение(ВремяОтправки) = 1) тогда
		
			флДатаОтправки = 0;

		Иначе	

			Мин_н = Прав("0" + СокрЛП(изСтрокиЛокал(ВремяОтправки, ":", 2)), 2);
			Час_н = Прав("0" + СокрЛП(изСтрокиЛокал(ВремяОтправки, ":", 1)), 2);
			День_н = Прав("0" + СокрЛП(ДатаЧисло(ДатаОтправки)), 2);
			Мес_н = Прав("0" + СокрЛП(ДатаМесяц(ДатаОтправки)), 2);
			Год_н = СокрЛП(ДатаГод(ДатаОтправки));
			Год_н = СтрЗаменить(Год_н, " ", "");
			Год_н = Прав(СтрЗаменить(Год_н, Симв(160), ""), 2);
			ДатаОтправкиСтрока = День_н + "." + Мес_н + "." + Год_н + " " + Час_н + ":" + Мин_н;

		КонецЕсли;

	КонецЕсли;	
                           
	СписокГруппа = СоздатьОбъект("СписокЗначений");
	СтрокаСообщений = "";   
	Если (ОтправлятьТолькоДоп=0) и (СписокКлиентов.РазмерСписка() > 0) тогда

		Выборка = СоздатьОбъект("ТаблицаЗначений");
		СписокКлиентов.Выгрузить(Выборка);

		Выборка.ВыбратьСтроки();  
		РезультатВыборки = Выборка.ПолучитьСтроку();
		флГруппа = 0;
		ПозицияВГруппе = 0;
		
		Пока (РезультатВыборки = 1) или (флГруппа = 1) Цикл
                 
			Если флГруппа = 0 Тогда
				ТекущийЭлемент = Выборка._1.ТекущийЭлемент();
				
				Если ТекущийЭлемент.ЭтоГруппа() = 1 Тогда         
				    СписокГруппа = ПолучитьСписокНомеровВГруппе(ТекущийЭлемент); 
					Если СписокГруппа.РазмерСписка() = 0 Тогда
					    РезультатВыборки = Выборка.ПолучитьСтроку(); 
						Продолжить;
					КонецЕсли;
					флГруппа = 1;
					ПозицияВГруппе = 1;
				КонецЕсли;       
			КонецЕсли;
			            
			Если флГруппа = 1 Тогда
				ТекущийЭлемент = СписокГруппа.ПолучитьЗначение(ПозицияВГруппе);
			КонецЕсли;
			
			Если Лев(СокрЛП(ТекущийЭлемент.ПолучитьАтрибут(ТекТелефон)), 250) = "" Тогда 
				Продолжить; 
			Конецесли;
				
			ВремСообщение = Сообщение;
			НомерТелефона = Лев(СокрЛП(ТекущийЭлемент.ПолучитьАтрибут(ТекТелефон)), 250);
			Пар="";

			Если ИспФИО = 1 Тогда

				ФИО = СокрЛП(ТекущийЭлемент.ПолучитьАтрибут(ТекФИО));
				ФИО = СтрЗаменить(ФИО, Симв(13)," ");
				ФИО = СтрЗаменить(ФИО, Симв(10)," ");
				ФИО = СокрЛП(ФИО);     

				Если СтрЧислоВхождений(ФИО, " ") < 2 Тогда
				    // Считаем, что отчества нет, удаляем макрос
					ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", "");
				ИначеЕсли СтрЧислоВхождений(ФИО, " ") < 1 Тогда
				    // Считаем, что имени нет, удаляем макрос
					ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", "");
				КонецЕсли;

				Поз = Найти(ФИО," ");
				Для Сч = 1 по 3 цикл

					Если Сч=1 тогда 
						ВремСообщение = СтрЗаменить(ВремСообщение, "%f%", Лев(ФИО, Поз)); 
					ИначеЕсли Сч = 2 Тогда
						ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", ?(Поз = 0, ФИО, Лев(ФИО, Поз)));
					Иначе
						ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", ФИО);
					Конецесли;
					ФИО = Прав(ФИО, СтрДлина(ФИО) - Поз);
					Поз = Найти(ФИО, " ");
						
				КонецЦикла;     
					
				ВремСообщение = СтрЗаменить(ВремСообщение, Симв(13) + Симв(10), "\n");
                СтрокаСообщений = СтрокаСообщений + ?(ПустаяСтрока(СтрокаСообщений) = 1, "", РазделительСтрок) + НомерТелефона + ":" + ВремСообщение;
				
			Иначе	

				ДобавитьТелефон(НомерТелефона, НомераТелефонов);
				
			КонецЕсли;			


			Если флПолучитьСтоимость = 0 Тогда
				ПоследнийНомер = НомерТелефона;
			КонецЕсли;

			ВыборкаБыла = 1;
                                                               
			Если флГруппа = 1 Тогда
			    ПозицияВГруппе = ПозицияВГруппе + 1; 
			КонецЕсли; 
			
			Если ПозицияВГруппе > СписокГруппа.РазмерСписка() Тогда
				флГруппа = 0;    
			КонецЕсли;
			
			Если флГруппа = 0 Тогда
			    РезультатВыборки = Выборка.ПолучитьСтроку();
			КонецЕсли;                                        
			
		КонецЦикла;

	КонецЕсли; 
	
	флОтправки = 0; 
	СтоимостьSMS = 0;
	КоличествоSMS = 0;
	Если ПустаяСтрока(ДопНомера) = 0 тогда

		ВремДопНомера = СокрЛП(ДопНомера);
		ВремДопНомера = СтрЗаменить(ВремДопНомера, Симв(13), " ");
		ВремДопНомера = СтрЗаменить(ВремДопНомера, Симв(10), " ");
		ВремДопНомера = СокрЛП(ВремДопНомера);
		Поз = Найти(ВремДопНомера, " ");
		Пока Поз > 0 Цикл                  

			ДобавитьТелефон(СокрЛП(Лев(ВремДопНомера, Поз)), НомераТелефонов);
			ВремДопНомера = Прав(ВремДопНомера, СтрДлина(ВремДопНомера) - Поз);
			Поз = Найти(ВремДопНомера," ");

		КонецЦикла;

		Если ВремДопНомера <> "" Тогда 
 
			ДобавитьТелефон(ВремДопНомера, НомераТелефонов);
            ВыборкаБыла = 1;
			
		КонецЕсли;

	КонецЕсли;

    Если ПустаяСтрока(НомераТелефонов) = 0 Тогда
        
		ВремСообщение = СтрЗаменить(Сообщение, Симв(13)+Симв(10), "\n");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%f%", "");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%i%", "");
		ВремСообщение = СтрЗаменить(ВремСообщение, "%o%", ""); 
		
		СтрокаСообщений = СтрокаСообщений + ?(ПустаяСтрока(СтрокаСообщений) = 1, "", РазделительСтрок) + НомераТелефонов + ":" + ВремСообщение ;
	    
    КонецЕсли;

	Если (флПолучитьСтоимость = 0) и (ПустаяСтрока(СтрокаСообщений) = 0) Тогда

		Ответ = ПослатьSMS("", "", Транслит, ДатаОтправкиСтрока, 0, флФлэш, SMSC_Отправитель, "tz=" + ЧасовыеПоясы.ПолучитьЗначение(SMSC_ЧасовойПояс) + "&valid="+СрокЖизниSMS.ПолучитьЗначение(СрокЖизниSMS.ТекущаяСтрока())+"&list=" + URLEncode(СтрокаСообщений));
		Если Число(Ответ.ПолучитьЗначение(2)) > 0 Тогда
		    ТекущийБаланс = СокрЛП(Ответ.ПолучитьЗначение(4)) + " руб.";
		КонецЕсли;

	ИначеЕсли (флПолучитьСтоимость = 1) и (ПустаяСтрока(СтрокаСообщений) = 0) Тогда

		Ответ = ПолучитьСтоимость("", "", Транслит, SMSC_Отправитель, "&list=" + URLEncode(СтрокаСообщений));

	КонецЕсли;

	Если ВыборкаБыла = 0 Тогда

		Статус("Не выбрано ни одного номера для отправки!", 1);
		Возврат;
		
	Иначе	

		флОтправки = Число(Ответ.ПолучитьЗначение(2)); 
		флОтправкиДоп = флОтправки;
		
		Если (флОтправки > 0) и (флПолучитьСтоимость = 0) Тогда
		
			СтоимостьSMS = Число(Ответ.ПолучитьЗначение(3));
			КоличествоSMS = Число(Ответ.ПолучитьЗначение(2));
		    ПоследнееИД = Ответ.ПолучитьЗначение(1); 
			ПоследнийНомер = ?(ПустаяСтрока(ВремДопНомера) = 1, ПоследнийНомер, ВремДопНомера);
		
		ИначеЕсли (флОтправки > 0) и (флПолучитьСтоимость = 1) Тогда

			СтоимостьSMS = Число(Ответ.ПолучитьЗначение(1));
			КоличествоSMS = Число(Ответ.ПолучитьЗначение(2));

		КонецЕсли;
	
	КонецЕсли;
	       
	Если флПолучитьСтоимость = 0 Тогда
	    
		Если флОтправки < 0 Тогда                                      
			СтрОшибки = "";
			СписокОшибок.ПолучитьЗначение(СписокОшибок.НайтиЗначение(флОтправки), СтрОшибки);
			Статус("Ошибка отправки сообщений: " + СтрОшибки, 1);
		Иначе
			Статус("Сообщение отправлено. Количество SMS: " + КоличествоSMS + "; Стоимость SMS: " + СтоимостьSMS + " руб.");
		КонецЕсли;	
		
	Иначе
		
		Если флОтправки < 0 Тогда
			СтрОшибки = "";
			СписокОшибок.ПолучитьЗначение(СписокОшибок.НайтиЗначение(флОтправки), СтрОшибки);
			Статус("Ошибка получения стоимости сообщений: " + СтрОшибки, 1);
		Иначе                           
			Статус("Количество SMS: " + КоличествоSMS + "; Стоимость SMS: " + СтоимостьSMS + " руб.");
		КонецЕсли;	

	КонецЕсли;
        
	ПоследнийОтвет = флОтправки;
КонецПроцедуры // ОбработатьОтправкуSMS()


//***************************************************************************************
Процедура ПоКнопкеОтправитьSMS()       
	
	ОбработатьОтправкуSMS();
	
КонецПроцедуры //ПоКнопкеОтправитьSMS()


//***************************************************************************************
Процедура ПоКнопкеСтоимость()
	                      
	ОбработатьОтправкуSMS(1);
	
КонецПроцедуры // ПоКнопкеСтоимость()    


//***************************************************************************************
Процедура ПоКнопкеПерейтиНаСайт()       
	
	ЗапуститьПриложение("www.smsc.ru");	
	
КонецПроцедуры //ПоКнопкеПерейтиНаСайт()


//***************************************************************************************
Процедура ПриИзмененииСообщения()
	
	Если СтрДлина(Сообщение) > 800 Тогда
		Форма.ВсегоСимволов.Цвет(255, 0, 0);
	Иначе
		Форма.ВсегоСимволов.Цвет(0, 0, 255);
	КонецЕсли;
	
КонецПроцедуры


//***************************************************************************************
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//***************************************************************************************
Hex[1]="0";
Hex[2]="1";
Hex[3]="2";
Hex[4]="3";
Hex[5]="4";
Hex[6]="5";
Hex[7]="6";
Hex[8]="7";
Hex[9]="8";
Hex[10]="9";
Hex[11]="A";
Hex[12]="B";
Hex[13]="C";
Hex[14]="D";
Hex[15]="E";
Hex[16]="F";

ФорматыСообщений[1] = "flash=1";
ФорматыСообщений[2] = "push=1";
ФорматыСообщений[3] = "hlr=1";
ФорматыСообщений[4] = "bin=1";
ФорматыСообщений[5] = "bin=2";
ФорматыСообщений[6] = "ping=1";               

СписокСтатусов = СоздатьОбъект("СписокЗначений");
СписокСтатусов.ДобавитьЗначение(-1, "Ожидает отправки");
СписокСтатусов.ДобавитьЗначение(0,  "Передано оператору");
СписокСтатусов.ДобавитьЗначение(1,  "Доставлено");
СписокСтатусов.ДобавитьЗначение(2,  "Статус не получен");
СписокСтатусов.ДобавитьЗначение(3,  "Просрочено");
СписокСтатусов.ДобавитьЗначение(20, "Невозможно доставить");
СписокСтатусов.ДобавитьЗначение(21, "Неизвестный статус");
СписокСтатусов.ДобавитьЗначение(22, "Неверный номер");
СписокСтатусов.ДобавитьЗначение(23, "Запрещено");
СписокСтатусов.ДобавитьЗначение(24, "Недостаточно средств");

СписокОшибок = СоздатьОбъект("СписокЗначений");
СписокОшибок.ДобавитьЗначение(-1, "Ошибка в параметрах");
СписокОшибок.ДобавитьЗначение(-2, "Неверный логин или пароль");
СписокОшибок.ДобавитьЗначение(-3, "Недостаточно средств на счету Клиента");
СписокОшибок.ДобавитьЗначение(-4, "IP-адрес временно заблокирован");
СписокОшибок.ДобавитьЗначение(-5, "Неверный формат даты");
СписокОшибок.ДобавитьЗначение(-6, "Сообщение запрещено");
СписокОшибок.ДобавитьЗначение(-7, "Неверный формат номера телефона");
СписокОшибок.ДобавитьЗначение(-8, "Сообщение на указанный номер не может быть доставлено");
СписокОшибок.ДобавитьЗначение(-9, "Попытка отправки более двух одинаковых запросов в течение минуты");
СписокОшибок.ДобавитьЗначение(-10, "Превышен лимит запросов в сутки");

ЧасовыеПоясы.ДобавитьЗначение(-16, "GMT -12 Меридиан смены дат");
ЧасовыеПоясы.ДобавитьЗначение(-15, "GMT -11 Самоа");
ЧасовыеПоясы.ДобавитьЗначение(-14, "GMT -10 Гавайи");
ЧасовыеПоясы.ДобавитьЗначение(-13, "GMT -09 Аляска");
ЧасовыеПоясы.ДобавитьЗначение(-12, "GMT -08 Тихоокеанское время");
ЧасовыеПоясы.ДобавитьЗначение(-11, "GMT -07 Горное время (США и Канада)");
ЧасовыеПоясы.ДобавитьЗначение(-10, "GMT -06 Мехико");
ЧасовыеПоясы.ДобавитьЗначение(-9,  "GMT -05 Богота");
ЧасовыеПоясы.ДобавитьЗначение(-8,  "GMT -04 Атлантическое время");
ЧасовыеПоясы.ДобавитьЗначение(-7,  "GMT -03 Бразилия, Гренландия");
ЧасовыеПоясы.ДобавитьЗначение(-6,  "GMT -02 Среднеатлантическое время");
ЧасовыеПоясы.ДобавитьЗначение(-5,  "GMT -01 Азорские острова");
ЧасовыеПоясы.ДобавитьЗначение(-4,  "GMT +00 Время по Гринвичу: Лондон");
ЧасовыеПоясы.ДобавитьЗначение(-3,  "GMT +01 Амстердам, Берлин");
ЧасовыеПоясы.ДобавитьЗначение(-2,  "GMT +02 Афины, Киев, Минск, Калининград");
ЧасовыеПоясы.ДобавитьЗначение(-1,  "GMT +03 Найроби, Ирак, Кувейт");
ЧасовыеПоясы.ДобавитьЗначение(0,   "GMT +04 Москва, Баку, Ереван, Тбилиси");
ЧасовыеПоясы.ДобавитьЗначение(1,   "GMT +05 Исламабад, Ташкент, Карачи");
ЧасовыеПоясы.ДобавитьЗначение(2,   "GMT +06 Екатеринбург, Алма-Ата");
ЧасовыеПоясы.ДобавитьЗначение(3,   "GMT +07 Омск, Новосибирск, Бангкок");
ЧасовыеПоясы.ДобавитьЗначение(4,   "GMT +08 Красноярск, Гонконг, Пекин");
ЧасовыеПоясы.ДобавитьЗначение(5,   "GMT +09 Иркутск, Сеул, Токио");
ЧасовыеПоясы.ДобавитьЗначение(6,   "GMT +10 Якутск, Сидней, Гуам");
ЧасовыеПоясы.ДобавитьЗначение(7,   "GMT +11 Владивосток, Соломоновы острова");
ЧасовыеПоясы.ДобавитьЗначение(8,   "GMT +12 Магадан, Камчатка, Новая Зеландия"); 
                  
Для Сч = 0 По 7 Цикл
	СрокЖизниSMS.ДобавитьЗначение(24-Сч*2, Строка(24-Сч*2));
КонецЦикла;
Для Сч = 0 По 8 Цикл
	СрокЖизниSMS.ДобавитьЗначение(9-Сч, Строка(9-Сч));
КонецЦикла;

ЕСТЬ_ПРОКСИ = 0;
ПРОКСИ_АДРЕС = "192.168.192.27";
ПРОКСИ_ПОРТ = "8080";
ПРОКСИ_ЛОГИН = "";
ПРОКСИ_ПАРОЛЬ = "";        

АвтоОтправка = 0;
