////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	Конт;					//	Контекст загружаемого документа, если загрузка осуществляется из открытого документа
Перем	XML_Документ;			//	XML_Документ из которого загружаем данные

Перем	ТабХозОпераций;			//	Таблица значений с соответствиями хоз.операций видам документов
Перем	СписокРолейКонтрагента;	//	Список возможных ролей контрагентов в соответсвии со схемой
         

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 

//********************************************************************************

Процедура Показать() Далее

//********************************************************************************
// ДатаИзСтроки(Зн)
//		
// Параметры:
//	Зн	-	строка - дата в формате	ГГГГ-ММ-ЧЧ
//		
// Возвращаемое значение:
// 	Значение типа "Дата"
//		
// Описание
//	Преобразуем строку в дату
//		
Функция ДатаИзСтроки(Зн)
	
	ПозРазделителя = Найти(Зн, "-");
	Если ПозРазделителя = 0 Тогда Возврат "" КонецЕсли;
	
	Зн1	= СокрЛП(Лев(Зн, ПозРазделителя - 1));
	Зн2	= СокрЛП(Прав(Зн, СтрДлина(Зн) - ПозРазделителя));
 
	ПозРазделителя = Найти(Зн2, "-");
	Если ПозРазделителя = 0 Тогда Возврат "" КонецЕсли;
	
	Зн3	= СокрЛП(Лев(Зн2, ПозРазделителя - 1));
	Зн4	= СокрЛП(Прав(Зн2, СтрДлина(Зн2) - ПозРазделителя));
	
	Возврат Дата(Зн1, Зн3, Зн4);
	
КонецФункции		//	ДатаИзСтроки()

//******************************************************************************
// ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
//
// Параметры:
//  Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата
//
// Возвращаемое значение:
//  Значение колонки найденной строки
//
// Описание:
//  Ищет строку по значению в колонке поиска и возвращает значение другой колонки в найденной строке
//
Функция ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
                             
	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таб.ПолучитьЗначение(НомСтр, ИдКолонкиВозврата);
	КонецЕсли;
	
КонецФункции		//	ПолучитьЗначениеКолонки()

//******************************************************************************
// ВыборФайла()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ВыборФайла()
	
	Каталог = "";
	Если ФС.ВыбратьФайл(0,ФормИмяФайла ,Каталог,"Выберите файл","*.xml|*.xml",,) = 1 Тогда
	    ФормИмяФайла	=	Каталог + ФормИмяФайла;
		Показать();
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//******************************************************************************
// ОткрытьФайл()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ОткрытьФайл()
	
	Если ФС.СуществуетФайл(ФормИмяФайла)=1 Тогда
		ЗапуститьПриложение(ФормИмяФайла);
	Иначе
		Предупреждение("Указанный файл не существует!", 5);
	КонецЕсли;
	
КонецПроцедуры		//	ОткрытьФайл()

//******************************************************************************
// СтрКонтрагент(Идентификатор, НеИдентифицирован)
//
// Параметры:
//  Идентификатор		-	уникальный идентификатор контрагента
//	НеИдентифицирован	-	строка - "Не идентифицирован!", если контрагент не найден
//
// Возвращаемое значение:
//  Строка - наименование контрагента
//
// Описание:
//  Ищет контрагента по идентификатору
//
Функция СтрКонтрагент(Идентификатор, НеИдентифицирован="")
	
	Если ПустоеЗначение(Идентификатор) = 1	Тогда Предупреждение("У клиента не заполнен идентификатор!"); Возврат(""); КонецЕсли;

	СпрКонтрагентов	=	СоздатьОбъект("Справочник.Контрагенты");
	СпрФирм			=	СоздатьОбъект("Справочник.Фирмы");
	
	Если		СпрКонтрагентов.НайтиПоРеквизиту("Идентификатор", Идентификатор, 1)	= 1	Тогда
		
		Возврат(СпрКонтрагентов.Наименование);
		
	ИначеЕсли	СпрФирм.НайтиПоРеквизиту("Идентификатор", Идентификатор, 1)			= 1	Тогда
		 
		Возврат(СпрФирм.Наименование);
		
	Иначе
		
		ЭлКонтрагент = XML_Документ.ВыбратьУзел("//Контрагент[@Идентификатор = """ + Идентификатор + """]");
		
		Если ПустоеЗначение(ЭлКонтрагент) = 1 Тогда Предупреждение("Контрагент не найден!"); Возврат(""); КонецЕсли;
		
		Наименование = ЭлКонтрагент.ПолучитьАтрибут("ОтображаемоеНаименование");
		
		НеИдентифицирован	=	"Не идентифицирован!";
	    
		Возврат(Наименование);
		
	КонецЕсли;
	
КонецФункции		//	СтрКонтрагент()

//******************************************************************************
// Контакт(ИдКонтакта)
//
// Параметры:
//  ИдКонтакта - Идентификатор контакта в xml-документе
//
// Возвращаемое значение:
//  Строка - описание контакта (телефоны  и т.д.)
//
// Описание:
//  Разбирает элемент контакт и формирует строку - описание контакта (телефоны  и т.д.)
//
Функция Контакт(ИдКонтакта)
                              
	Если ПустоеЗначение(ИдКонтакта) = 1 Тогда Возврат("") КонецЕсли;
	
	ЭлКонтакт				=	XML_Документ.ВыбратьУзел("//Контакт[@Идентификатор=""" + СокрЛП(ИдКонтакта) + """]");
	                                             
	Наименование			=	ЭлКонтакт.ПолучитьАтрибут("Наименование");
	
	КонтактноеЛицо			=	"";
	Телефоны				=	"";
	Факс					=	"";	
	ЭлПочта					=	"";
	ICQ						=	"";
	
	Попытка КонтактноеЛицо	=	ЭлКонтакт.ВыбратьУзел("КонтактноеЛицо").Значение	Исключение КонецПопытки;
	Попытка Телефоны		=	ЭлКонтакт.ВыбратьУзел("Телефон").Значение			Исключение КонецПопытки;
	Попытка Факс			=	ЭлКонтакт.ВыбратьУзел("Факс").Значение				Исключение КонецПопытки;
	Попытка ЭлПочта			=	ЭлКонтакт.ВыбратьУзел("Почта").Значение 			Исключение КонецПопытки;
	Попытка ICQ				=	ЭлКонтакт.ВыбратьУзел("ICQ").Значение 				Исключение КонецПопытки;
		   
	Стр						=	"";
		
	Если ПустоеЗначение(КонтактноеЛицо) = 0 Тогда	Стр	=	Стр + "  Контактное лицо: "	+ СокрЛП(КонтактноеЛицо)	КонецЕсли;
	Если ПустоеЗначение(Телефоны)		= 0	Тогда	Стр	=	Стр + "  Телефоны: " 		+ СокрЛП(Телефоны)			КонецЕсли;
	Если ПустоеЗначение(Факс)			= 0	Тогда	Стр	=	Стр + "  Факс: "			+ СокрЛП(Факс)				КонецЕсли;
	Если ПустоеЗначение(ЭлПочта)		= 0 Тогда	Стр	=	Стр + "  Эл. почта: "		+ СокрЛП(ЭлПочта)			КонецЕсли;
	Если ПустоеЗначение(ICQ)			= 0 Тогда	Стр	=	Стр + "  ICQ: "				+ СокрЛП(ICQ)				КонецЕсли;
	                                             
	Возврат(Стр);	
	
КонецФункции		//	Контакт()                                                                                

//******************************************************************************
// НаименованиеТовараИзКаталога(ИдКаталога, ИдТовара)
//
// Параметры:
//  ИдКаталога, ИдТовара
//
// Возвращаемое значение:
//  Строка - наименование товара
//
// Описание:
//  Ищет в xml-каталоге товар по идентификатору и возвращает наименование
//	применяется для неидентифицированных товаров
//
Функция НаименованиеТовараИзКаталога(ИдКаталога, ИдТовара)
	
	ИмяТовара	=	"";
	ЭлТовар		=	XML_Документ.ВыбратьУзел("//Каталог[@Идентификатор=""" + ИдКаталога + """]/Товар[@ИдентификаторВКаталоге=""" + ИдТовара + """]");
	Если ПустоеЗначение(ЭлТовар) = 0 Тогда
		ИмяТовара	=	ЭлТовар.ПолучитьАтрибут("Наименование");
	КонецЕсли;
	
	Возврат(ИмяТовара);
	
КонецФункции		//	НаименованиеТовараИзКаталога()

//******************************************************************************
// СтрТовар(ИдКаталога, ИдТовара, НеИдентифицирован="")
//
// Параметры:
//  ИдКаталога, ИдТовара, НеИдентифицирован
//
// Возвращаемое значение:
//  Строка - наименование товара
//
// Описание:
//  Ищет товар либо в справочнике "Номенклатура" (если каталог "наш") по коду, артикулу или штрихкоду;
//	либо в справочнике "Аналоги" (если каталог - внешний)
//
Функция СтрТовар(ИдКаталога, ИдТовара, НеИдентифицирован="")
	
	СпрНоменклатуры	=	СоздатьОбъект("Справочник.Номенклатура");
	СпрКаталоги		=	СоздатьОбъект("Справочник.Каталоги");
	
	
	Если СпрКаталоги.НайтиПоРеквизиту("Идентификатор", СокрЛП(ИдКаталога), 1) = 0 Тогда
		Сообщить("Не найден каталог с идентификатором - " + ИдКаталога);
		НеИдентифицирован	=	"Не идентифицирован!";
		Возврат НаименованиеТовараИзКаталога(ИдКаталога, ИдТовара);
	КонецЕсли;
              
	Если СпрКаталоги.ВладелецКаталога.Вид() = "Фирмы" Тогда
		
		Если ПустоеЗначение(СпрКаталоги.СпособИдентификацииНоменклатуры) = 1 Тогда
			гСпособИдентификации	=	"Код";
		Иначе
			гСпособИдентификации	=	СпрКаталоги.СпособИдентификацииНоменклатуры.Идентификатор();
		КонецЕсли;
		
		Если гСпособИдентификации = "Код" Тогда
			Если	СпрНоменклатуры.НайтиПоКоду(ИдТовара, 0)							= 1 Тогда	Возврат(СпрНоменклатуры.Наименование)		КонецЕсли;
		ИначеЕсли гСпособИдентификации = "ШтрихКод" Тогда
			СпрЕдиницы = СоздатьОбъект("Справочник.Единицы");
			Если	СпрЕдиницы.НайтиПоРеквизиту(гСпособИдентификации, ИдТовара, 1)		= 1 Тогда	Возврат(СпрЕдиницы.Владелец.Наименование)	КонецЕсли;
		Иначе
			Если	СпрНоменклатуры.НайтиПоРеквизиту(гСпособИдентификации, ИдТовара, 1)	= 1 Тогда	Возврат(СпрНоменклатуры.Наименование)		КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		СпрАналогов = СоздатьОбъект("Справочник.Аналоги");
		СпрАналогов.ВыбратьЭлементыПоРеквизиту("ИдентификаторВКаталоге", ИдТовара, 0, 0);
		Пока СпрАналогов.ПолучитьЭлемент() = 1 Цикл
		    Если СпрАналогов.Каталог = СпрКаталоги.ТекущийЭлемент() Тогда
				СпрНоменклатуры.НайтиЭлемент(СпрАналогов.Владелец);
		    	Возврат СпрНоменклатуры.Наименование;
		    КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	НеИдентифицирован	=	"Не идентифицирован!";
	Возврат НаименованиеТовараИзКаталога(ИдКаталога, ИдТовара);
	
КонецФункции		//	СтрТовар()

//******************************************************************************
// РольФирмы(ЭлДокумент)
//
// Параметры:
//  ЭлДокумент - xml-документ
//
// Возвращаемое значение:
//  Строка - {Покупатель, Продавец, Получатель, Плательщик} - роль собственной фирмы в загружаемом документе
//
// Описание:
//  Перебирает элементы "ПредприятиеВДокументе" и пытается идентифицировать фирму и определить ее роль
//
Функция РольФирмы(ЭлДокумент)

	РольФирмы		=	"";
	РольКонтрагента	=	"";
	СпрКонтрагентов	=	СоздатьОбъект("Справочник.Контрагенты");
	СпрФирм			=	СоздатьОбъект("Справочник.Фирмы");
	Контрагенты		=	ЭлДокумент.ВыбратьУзлы("ПредприятиеВДокументе");
	Для Сч = 0 По Контрагенты.КоличествоУзлов() - 1 Цикл
		ЭлКонтрагент		=	Контрагенты.ПолучитьУзел(Сч);
		ИдПредприятия		=	ЭлКонтрагент.ПолучитьАтрибут("Контрагент");
		
		Если		СпрФирм.НайтиПоРеквизиту("Идентификатор", ИдПредприятия, 1)	= 1	Тогда
			РольФирмы		=	СписокРолейКонтрагента.Получить( ЭлКонтрагент.ПолучитьАтрибут("Роль") );
		ИначеЕсли	СпрКонтрагентов.НайтиПоРеквизиту("Идентификатор", ИдПредприятия, 1)	= 1	Тогда
			РольКонтрагента	=	СписокРолейКонтрагента.Получить( ЭлКонтрагент.ПолучитьАтрибут("Роль") );
		КонецЕсли;
	КонецЦикла;
	Если		ПустоеЗначение(РольФирмы + РольКонтрагента) = 1 Тогда
		Предупреждение("Документ некорректен - неидентифицированы организации!");
	ИначеЕсли	ПустоеЗначение(РольФирмы) = 1 Тогда
		Если		РольКонтрагента = "Продавец"	Тогда
			РольФирмы	=	"Покупатель";
		ИначеЕсли	РольКонтрагента = "Покупатель"	Тогда
			РольФирмы	=	"Продавец";
		ИначеЕсли	РольКонтрагента = "Плательщик"	Тогда
			РольФирмы	=	"Получатель";
		ИначеЕсли	РольКонтрагента = "Получатель"	Тогда
			РольФирмы	=	"Плательщик";
		КонецЕсли;
	КонецЕсли;
	
	Возврат(РольФирмы);
	
КонецФункции		//	РольФирмы()

//******************************************************************************
// СоздатьДокумент()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Определяет вид загружаемого документа в зависимости от хоз. операции и роли фирмы.
//	Создает новый документ и вызывает обработку загрузки "XMLЗагрузкаДокументовПоСхеме"
//
Процедура СоздатьДокумент()
	
	ЭлДокумент				=	XML_Документ.ВыбратьУзел("//Документ");
	
	Если ПустоеЗначение(ЭлДокумент) = 1 Тогда Возврат КонецЕсли;
	         
	РольФирмы			=	РольФирмы(ЭлДокумент);
	СтрХозОперация		=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СтрДатаДокумента	=	ЭлДокумент.ПолучитьАтрибут("Дата");
	НомерДокумента		=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Комментарий			=	ЭлДокумент.ПолучитьАтрибут("Комментарий");
	    
	ВидДокумента		=	ПолучитьЗначениеКолонки(ТабХозОпераций, "ИндексПоиска", РольФирмы+СтрХозОперация, "ВидДокумента");
	
	Если ПустоеЗначение(ВидДокумента) = 1 Тогда Возврат КонецЕсли;

	Док = СоздатьОбъект("Документ." + ВидДокумента);
	Док.Новый();
	Док.ДатаДок		= РабочаяДата();
	глЗаполнитьШапку(Док, 0);
	
	Док.Комментарий = "Операция: " + СтрХозОперация + " ; Документ отправителя: № " + НомерДокумента + " от " + ДатаИзСтроки(СтрДатаДокумента) + " " + Комментарий;

	СписПараметров = СоздатьОбъект("СписокЗначений");
	СписПараметров.ДобавитьЗначение(ФормИмяФайла,		"ПолноеИмяФайла");
	СписПараметров.ДобавитьЗначение(Док,				"Документ");
	
	ОткрытьФормуМодально("Обработка.XMLЗагрузкаДокументовПоСхеме", СписПараметров);
	
	Док.УстановитьНовыйНомер(Док.ЮрЛицо.ПрефиксНомеровДокументов);
	Док.Записать();
	
	ОткрытьФорму(Док.ТекущийДокумент());
	
КонецПроцедуры		//	СоздатьДокумент()

//******************************************************************************
// Загрузить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполняет загрузку документа из выбранного файла
//
Процедура Загрузить()
	
	Если Фс.СуществуетФайл(ФормИмяФайла) = 0 Тогда
		Предупреждение("Файл не существует!");
		Возврат;
	КонецЕсли;
	    
	Показать();
	
	Если ПустоеЗначение(Конт) = 1 Тогда
		СоздатьДокумент();
		Возврат;
	КонецЕсли;    
	
	СписПараметров = СоздатьОбъект("СписокЗначений");
	СписПараметров.ДобавитьЗначение(ФормИмяФайла,		"ПолноеИмяФайла");
	СписПараметров.ДобавитьЗначение(Конт,				"Документ");
	
	ОткрытьФормуМодально("Обработка.XMLЗагрузкаДокументовПоСхеме", СписПараметров);
	
	Форма.Закрыть();
	
КонецПроцедуры		//	Загрузить()
                      
//******************************************************************************
// ЗагрузитьXML_Документ()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - загрузка выполнена
//	0 - ошибка
//
// Описание:
//  Загружает xml-документ в оперативную память для дальнейшего анализа
//
Функция ЗагрузитьXML_Документ()
	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
				Предупреждение("Компонента v7plus.dll не найдена!");
				Возврат(0);
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Анализатор		= СоздатьОбъект("AddIn.XMLParser");
	XML_Документ	= Анализатор.СоздатьДокумент();
	
	Если ПустоеЗначение(XML_Документ) = 1 Тогда
		СтатусВозврата(0);
		Возврат(0);
	КонецЕсли;
	
	//КоллекцияСхем = Анализатор.СоздатьКоллекциюСхем();
	//КоллекцияСхем.ДобавитьСхему("urn:CommerceML", КаталогИБ() + "ExtForms\CommerML.biz");
	//XML_Документ.Схемы = КоллекцияСхем;	                                         
	                              
	Если ПустоеЗначение(ФормИмяФайла) = 1 Тогда
		Предупреждение("Не выбран файл!");
		Возврат(0);
	КонецЕсли;
	
	Если ФС.СуществуетФайл(ФормИмяФайла) = 0 Тогда
		Предупреждение("Файл не существует!");
		Возврат(0);
	КонецЕсли;
	
	XML_Документ.Загрузить(ФормИмяФайла);
	
	//XML_Документ.Проверить();
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьXML_Документ()

//******************************************************************************
// ВыбратьКаталог()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Функция ВыбратьКаталог()
    
	СписокКаталогов	=	СоздатьОбъект("СписокЗначений");
	
	Выборка = XML_Документ.ВыбратьУзлы("//Каталог");
		
	Если		Выборка.КоличествоУзлов() = 0 Тогда
		Предупреждение("Данный файл не содержит ни одного каталога!");
		Возврат(0);
	КонецЕсли;
        
	СпрКаталогов	=	СоздатьОбъект("Справочник.Каталоги");
	
	КолвоКаталогов	=	Выборка.КоличествоУзлов();
	
	Для Индекс = 1 По КолвоКаталогов Цикл
		ДоступныйКаталог 		= Выборка.ПолучитьУзел(Индекс - 1);
		ИдентификаторКаталога	= ДоступныйКаталог.ПолучитьАтрибут("Идентификатор"); 
		НаименованиеКаталога	= ДоступныйКаталог.ПолучитьАтрибут("Наименование");
		
		Если СпрКаталогов.НайтиПоРеквизиту("Идентификатор", ИдентификаторКаталога, 1) = 1 Тогда
			СписокКаталогов.ДобавитьЗначение(СпрКаталогов.ТекущийЭлемент());
		Иначе
			Предупреждение("Не найден каталог - " + НаименованиеКаталога + " (идентификатор: " + ИдентификаторКаталога + ")");
			Возврат(0);
		КонецЕсли;
		
		Если КолвоКаталогов = 1 Тогда Возврат(СпрКаталогов.ТекущийЭлемент()) КонецЕсли;
	КонецЦикла;
	
	Зн  = ""; Поз = "";
	Если СписокКаталогов.ВыбратьЗначение(Зн, "Выберите каталог", Поз, , 1) = 1 Тогда
		Возврат(Зн);
	Иначе 
		Возврат(0);
	КонецЕсли;
	
КонецФункции		//	ВыбратьКаталог()

//******************************************************************************
// ПросмотрТоваровКаталога()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//	По кнопке "Просмотр товаров каталога"
//	
// Описание:
//  
//
Процедура ПросмотрТоваровКаталога()
                
	Если ПустоеЗначение(ЗагрузитьXML_Документ())	=	1	Тогда	Возврат	КонецЕсли;
	СпрКаталог	=	ВыбратьКаталог();
	Если ПустоеЗначение(СпрКаталог)					=	1 	Тогда	Возврат	КонецЕсли;
	                          
	СписокПараметров	=	СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение(СпрКаталог,			"Каталог");
	СписокПараметров.ДобавитьЗначение(ФормИмяФайла,			"ИмяФайлаКаталога");
	                   
	ОткрытьФорму("Обработка.XMLРаботаСКаталогом", СписокПараметров);
	
КонецПроцедуры		//	ПросмотрТоваровКаталога()

//******************************************************************************
// Дополнительно(Эл)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура Дополнительно(Эл)

	ДопРеквизиты		=	Эл.ВыбратьУзлы("ДополнительныйРеквизит");
	Для Сч = 0 По ДопРеквизиты.КоличествоУзлов() - 1 Цикл
		ЭлДопРеквизит	=	ДопРеквизиты.ПолучитьУзел(Сч);
		
		ЭлДопРеквизит.ПолучитьАтрибут("Наименование");
		ЭлДопРеквизит.ПолучитьАтрибут("Значение");
		
	КонецЦикла;

	ДопРасходы		=	Эл.ВыбратьУзлы("ДополнительныйРасход");
	Для Сч = 0 По ДопРасходы.КоличествоУзлов() - 1 Цикл
		ЭлДопРасход	=	ДопРасходы.ПолучитьУзел(Сч);
		
		ЭлДопРасход.ПолучитьАтрибут("Сумма");
		ЭлДопРасход.ПолучитьАтрибут("Комментарий");
		
	КонецЦикла;

КонецПроцедуры		//	Дополнительно()

//******************************************************************************
// Показать()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Формирует табличное (визуальное) представление xml-документа перед загрузкой
//  (разумеется только в немодальном режиме)
//
Процедура Показать()
	
	Если Форма.МодальныйРежим() = 1 Тогда Возврат КонецЕсли;
	
	Таблица.Очистить();
	
	Если ПустоеЗначение(ЗагрузитьXML_Документ())	=	1	Тогда	Возврат	КонецЕсли;
	
	ЭлДокумент				=	XML_Документ.ВыбратьУзел("//Документ");
	
	Если ПустоеЗначение(ЭлДокумент) = 1 Тогда
		Для Сч = 1 По 20 Цикл
		    Таблица.ВывестиСекцию("Пусто");
		КонецЦикла;
		Таблица.Показать();
		Возврат;
	КонецЕсли;
	    
	РольФирмы				=	РольФирмы(ЭлДокумент);
	
	Если ПустоеЗначение(РольФирмы) = 1 Тогда Возврат КонецЕсли;
	
	СтрХозОперация			=	ЭлДокумент.ПолучитьАтрибут("ХозОперация");
	СтрВалюта				=	ЭлДокумент.ПолучитьАтрибут("Валюта");
	СтрСумма				=	ЭлДокумент.ПолучитьАтрибут("Сумма");	
	СтрКурс					=	ЭлДокумент.ПолучитьАтрибут("Курс");
	СрокПлатежа				=	ЭлДокумент.ПолучитьАтрибут("СрокПлатежа");
	СтрДатаДокумента		=	ЭлДокумент.ПолучитьАтрибут("Дата");
	НомерДокумента			=	ЭлДокумент.ПолучитьАтрибут("Номер");
	Комментарий				=	ЭлДокумент.ПолучитьАтрибут("Комментарий");

	
	ХозОперация				=	ПолучитьЗначениеКолонки(ТабХозОпераций, "ИндексПоиска", РольФирмы+СтрХозОперация, "Представление");
	ДатаДокумента			=	ДатаИзСтроки(СтрДатаДокумента);
	
	СтрДатаВыполнения		=	"";
	Если ПустоеЗначение(СрокПлатежа) = 0 Тогда
		ДатаВыполнения		=	ДатаИзСтроки(СрокПлатежа);
		Если СтрХозОперация = "Order" Тогда
			Стр	=	"Дата выполнения: ";
		Иначе
			Стр	=	"Дата оплаты: ";
		КонецЕсли;
		СтрДатаВыполнения	=	Стр	+	ДатаВыполнения;
	КонецЕсли;
	             
	Таблица.ВывестиСекцию("Шапка");
	
	Контрагенты				=	ЭлДокумент.ВыбратьУзлы("ПредприятиеВДокументе");
	Для Сч = 0 По Контрагенты.КоличествоУзлов() - 1 Цикл
		ЭлКонтрагент		=	Контрагенты.ПолучитьУзел(Сч);
		
		СтрРоль				=	ЭлКонтрагент.ПолучитьАтрибут("Роль");
		СтрКонтрагент		=	ЭлКонтрагент.ПолучитьАтрибут("Контрагент");
		СтрРасчетныйСчет	=	ЭлКонтрагент.ПолучитьАтрибут("РасчетныйСчет");
		СтрСклад			=	ЭлКонтрагент.ПолучитьАтрибут("Склад");
		ИдКонтакта			=	ЭлКонтрагент.ПолучитьАтрибут("Контакт");
		
        Роль				=	СписокРолейКонтрагента.Получить(СтрРоль);
		НеИдентифицирован	=	"";
		Контрагент			=	СтрКонтрагент(СокрЛП(СтрКонтрагент), НеИдентифицирован);
        
		
		Если СтрХозОперация = "ReportComission" Тогда
			Если		Роль = "Плательщик" Тогда
				Роль	=	"Комиссионер";
			ИначеЕсли	Роль = "Получатель" Тогда
				Роль	=	"Комитент";
			КонецЕсли;
		КонецЕсли;
		
		
		Таблица.ВывестиСекцию("Контрагент");
		    
		Контакт				=	Контакт(ИдКонтакта);
		Если ПустоеЗначение(Контакт) = 0 Тогда
			Таблица.ВывестиСекцию("Контакт");
		КонецЕсли;
	КонецЦикла;
	                   
	Таблица.ВывестиСекцию("Итого|Сумма");
	
	Налоги					=	ЭлДокумент.ВыбратьУзлы("СуммаНалога");
	КолвоНалогов			=	Налоги.КоличествоУзлов();
	Для Сч = 0 По КолвоНалогов - 1 Цикл
		ЭлНалог				=	Налоги.ПолучитьУзел(Сч);
		
		Налог				=	ЭлНалог.ПолучитьАтрибут("Налог");
		СтрСтавка			=	ЭлНалог.ПолучитьАтрибут("Ставка");
		СуммаНалога			=	ЭлНалог.ПолучитьАтрибут("Сумма");
		ВключенВСумму		=	ЭлНалог.ПолучитьАтрибут("ВключенВСумму");
		    
		Включая				=	?(ПустоеЗначение(ВключенВСумму) = 1, "", " в т.ч.");
		СтрНалог			=	?(Налог = "AVT", "НДС", "НП");
		Ставка				=	?(ПустоеЗначение(Число(СтрСтавка)) = 1, "", СокрЛП(СтрСтавка) + "%");
		
		Если	ПустоеЗначение(Число(СуммаНалога)) = 0	Тогда
			Таблица.ПрисоединитьСекцию("Итого|Налог");
		КонецЕсли;
	КонецЦикла;
	
	Если ПустоеЗначение(Комментарий) = 0 Тогда
		Таблица.ВывестиСекцию("Комментарий");
	КонецЕсли;
	
	Товары					=	ЭлДокумент.ВыбратьУзлы("ТоварнаяПозиция");
	КоличествоУзлов			=	Товары.КоличествоУзлов();
	Если КоличествоУзлов > 0 Тогда
		Таблица.ВывестиСекцию("ШапкаТаблицы|Основная");
                
		СписокНалогов		=	СоздатьОбъект("СписокЗначений");
		Для Сч = 0 По КолвоНалогов - 1 Цикл
			ЭлНалог			=	Налоги.ПолучитьУзел(Сч);
			
			Налог			=	ЭлНалог.ПолучитьАтрибут("Налог");
			СуммаНалога		=	ЭлНалог.ПолучитьАтрибут("Сумма");
			ВключенВСумму	=	ЭлНалог.ПолучитьАтрибут("ВключенВСумму");
			    
			Включая			=	?(ПустоеЗначение(ВключенВСумму) = 1, "", " в т.ч.");
			СтрНалог		=	?(Налог = "AVT", "НДС", "НП");
			
			Если	ПустоеЗначение(Число(СуммаНалога)) = 0	Тогда
				Таблица.ПрисоединитьСекцию("ШапкаТаблицы|НалогВСтроке");
				СписокНалогов.ДобавитьЗначение(Налог);
			КонецЕсли;
		КонецЦикла;
		
		//Если СтрХозОперация = "Invoice" Тогда
			Таблица.ПрисоединитьСекцию("ШапкаТаблицы|ГТД");
		//КонецЕсли;
		
		Форма.КнПросмотрКаталога.Видимость(1);
	Иначе
		Форма.КнПросмотрКаталога.Видимость(0);
	КонецЕсли;
	
	Для Сч = 0 По КоличествоУзлов - 1 Цикл
		ЭлТовар				=	Товары.ПолучитьУзел(Сч);
		
		ИдКаталога			=	ЭлТовар.ПолучитьАтрибут("Каталог");
		ИдТовара			=	ЭлТовар.ПолучитьАтрибут("Товар");
		
		Единица				=	ЭлТовар.ПолучитьАтрибут("Единица");
		Количество			=	ЭлТовар.ПолучитьАтрибут("Количество");
		Цена				=	ЭлТовар.ПолучитьАтрибут("Цена");
		Сумма				=	ЭлТовар.ПолучитьАтрибут("Сумма");
		Описание			=	ЭлТовар.ПолучитьАтрибут("Описание");
		СтранаПроисхождения	=	ЭлТовар.ПолучитьАтрибут("СтранаПроисхождения");
		ГТД					=	ЭлТовар.ПолучитьАтрибут("ГТД");
		                           
		НеИдентифицирован	=	"";
		Товар				=	СтрТовар(СокрЛП(ИдКаталога), СокрЛП(ИдТовара), НеИдентифицирован);
		
		Таблица.ВывестиСекцию("Строка|Основная");
		          
		Для СчНалогов = 1 По СписокНалогов.РазмерСписка() Цикл
			Налог			=	СписокНалогов.ПолучитьЗначение(СчНалогов);
			ЭлНалог			=	ЭлТовар.ВыбратьУзел("СуммаНалога[@Налог=""" + Налог + """]");
			
			Ставка			=	"";
			СуммаНалога		=	"";
			Если ПустоеЗначение(ЭлНалог) = 0 Тогда
				СтрСтавка	=	ЭлНалог.ПолучитьАтрибут("Ставка");
				СуммаНалога	=	ЭлНалог.ПолучитьАтрибут("Сумма");
				Ставка		=	?(ПустоеЗначение(СтрСтавка) = 1, "", СокрЛП(СтрСтавка) + "%");
			КонецЕсли;
			
			Таблица.ПрисоединитьСекцию("Строка|НалогВСтроке");
		КонецЦикла;
		                        
		//Если СтрХозОперация = "Invoice" Тогда
		//	Таблица.ПрисоединитьСекцию("Строка|ГТД");
		//КонецЕсли;
		
		Если (ПустоеЗначение(ГТД) = 0) Или (ПустоеЗначение(СтранаПроисхождения) = 0) Тогда
			Таблица.ПрисоединитьСекцию("Строка|ГТД");
		КонецЕсли;
		
		Если ПустоеЗначение(Описание) = 0 Тогда
			Таблица.ПрисоединитьСекцию("Строка|Описание");
		КонецЕсли;

	КонецЦикла;
	
	Таблица.Показать();	
	
КонецПроцедуры		//	Показать()

//******************************************************************************
// ОткрытьПочтовыйЯщик()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Осуществляет запуск обработки "XMLОбработкаЭлектроннойПочты" для выбора
//	загружаемого документа, полученного по эл. почте
//
Процедура ОткрытьПочтовыйЯщик()
               
	Если ПустоеЗначение(Конт) = 1 Тогда
		Параметр	=	"ВыборДокумента";
	Иначе
		Параметр	=	Конт;
	КонецЕсли;
	
	ОткрытьФормуМодально("Обработка.XMLОбработкаЭлектроннойПочты", Параметр);
	                                   
	Если (ПустоеЗначение(Параметр) = 1) Или (Параметр = "ВыборДокумента") Тогда Возврат КонецЕсли;
	
	ФормИмяФайла = Параметр;
	
	Если Форма.МодальныйРежим() = 1 Тогда
		Загрузить();
		Фс.УдалитьФайл(ФормИмяФайла);
	ИначеЕсли	ПустоеЗначение(Конт) = 1 Тогда
		Показать();
	КонецЕсли;
	
КонецПроцедуры		//	ОткрытьПочтовыйЯщик()

//******************************************************************************
// ПриВыбореВидаВыгрузки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//	
// Вызывается из формул элементов диалога:
//	При выборе значения в списке "ФормВидВыгрузки"
//	
// Описание:
//  
//
Процедура ПриВыбореВидаВыгрузки()
    
	Если ФормВидВыгрузки.ПолучитьЗначение(ФормВидВыгрузки.ТекущаяСтрока()) = "ИзПочты" Тогда
		Форма.ФормОткрытьПочтовыйЯщик.Видимость(1);
		//ОткрытьПочтовыйЯщик();
	Иначе
		Форма.ФормОткрытьПочтовыйЯщик.Видимость(0);
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореВидаВыгрузки()

//******************************************************************************
// ДобавитьОперацию(РольФирмы, ХозОперация, ВидДокумента, Представление)
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добаляет описание хоз. операции в таблицу
//
Процедура ДобавитьОперацию(РольФирмы, ХозОперация, ВидДокумента, Представление)
	
	ТабХозОпераций.НоваяСтрока();
	ТабХозОпераций.РольФирмы		=	РольФирмы;
	ТабХозОпераций.ВидДокумента		=	ВидДокумента;
	ТабХозОпераций.ХозОперация		=	ХозОперация;
	ТабХозОпераций.Представление	=	Представление;
	ТабХозОпераций.ИндексПоиска		=	РольФирмы + ХозОперация;
	
КонецПроцедуры		//	ДобавитьОперацию()

//******************************************************************************

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(Ном, ИмяЗакладки)
	
	Если ИмяЗакладки = "Основная" Тогда
		
		Форма.ИспользоватьСлой("Основной, Загрузка", 2);
		
	ИначеЕсли ИмяЗакладки = "Настройки" Тогда
		
		Форма.ИспользоватьСлой("Основной, Настройки", 2);
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()

	Таблица.ТолькоПросмотр(1);
	Таблица.Опции(0, 0, 0, 0, , "ЗагрузкаДокумента");
	Для Сч = 1 По 20 Цикл
	    Таблица.ВывестиСекцию("Пусто");
	КонецЦикла;
	Таблица.Показать();
    
	Конт = Форма.Параметр;
	
	Если ПустоеЗначение(Конт) = 1 Тогда
		 
		Форма.Заголовок("Загрузка документа");
		
	Иначе
		
	    Если		ТипЗначенияСтр(Конт) = "Документ" Тогда
			
	    	Форма.Заголовок("  Загрузка документа:     " + Конт.ПредставлениеВида() + "  № " + Конт.НомерДок);
			
	    ИначеЕсли	ТипЗначенияСтр(Конт) = "СписокЗначений" Тогда
	                          
			Форма.Заголовок("Групповая загрузка документов");
			
		КонецЕсли;
		
	КонецЕсли;
    
	Форма.ИспользоватьСлой("Основной, Загрузка", 2);
	
	Форма.ФормОткрытьПочтовыйЯщик.Видимость(0);
	
	Если Форма.МодальныйРежим() = 1 Тогда
		Форма.КнПоказать.Видимость(0);
	Иначе
		Форма.КнПоказать.Видимость(1);
	КонецЕсли;
	
	Форма.КнПросмотрКаталога.Видимость(0);
	
КонецПроцедуры		//	ПриОткрытии()

//******************************************************************************

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

//******************************************************************************
            
ФормИмяФайла			= КаталогИБ() + "Документ.xml";

ФормФормат.ДобавитьЗначение("CommerceML");
ФормФормат.ДобавитьЗначение("Текстовый");

ФормВидВыгрузки.ДобавитьЗначение("ИзФайла", "Загрузить из файла");
ФормВидВыгрузки.ДобавитьЗначение("ИзПочты", "Выбрать из полученных по эл. почте");
//ФормВидВыгрузки.ДобавитьЗначение("Запросить по HTTP - протоколу");

//******************************************************************************

СписокРолейКонтрагента	=	СоздатьОбъект("СписокЗначений");
СписокРолейКонтрагента.ДобавитьЗначение("Продавец",		"Saler");
СписокРолейКонтрагента.ДобавитьЗначение("Покупатель",	"Buyer");
СписокРолейКонтрагента.ДобавитьЗначение("Плательщик",	"Payer");
СписокРолейКонтрагента.ДобавитьЗначение("Получатель",	"Recipient");


ТабХозОпераций	=	СоздатьОбъект("ТаблицаЗначений");
ТабХозОпераций.НоваяКолонка("РольФирмы",		"Строка");
ТабХозОпераций.НоваяКолонка("ХозОперация",		"Строка");
ТабХозОпераций.НоваяКолонка("ВидДокумента",		"Строка");
ТабХозОпераций.НоваяКолонка("Представление",	"Строка");
ТабХозОпераций.НоваяКолонка("ИндексПоиска",		"Строка");


ДобавитьОперацию("Покупатель",	"Order",			"ЗаказПоставщику",			"Заказ товара");
ДобавитьОперацию("Покупатель",	"PayableBill",		"ПлатежноеПоручение",		"Счет на оплату");

ДобавитьОперацию("Покупатель",	"Sale",				"ПоступлениеТМЦ",			"Поступление товара");
ДобавитьОперацию("Покупатель",	"Comission",		"ПоступлениеТМЦ",			"Прием товара на реализацию");

ДобавитьОперацию("Покупатель",	"BackSale",			"ВозвратОтПокупателя",		"Возврат товара от покупателя");
ДобавитьОперацию("Покупатель",	"BackComission",	"ВозвратОтПокупателя",		"Возврат товара от комиссионера");

ДобавитьОперацию("Покупатель",	"Invoice",			"СчетФактураПолученный",	"Счет-Фактура поставщика");
                                

ДобавитьОперацию("Продавец",	"Order",			"ЗаявкаПокупателя",			"Заказ товара");
ДобавитьОперацию("Продавец",	"PayableBill",		"ЗаявкаПокупателя",			"Счет на оплату");

ДобавитьОперацию("Продавец",	"Sale",				"Реализация",				"Отпуск товара");
ДобавитьОперацию("Продавец",	"Comission",		"Реализация",				"Передача товара на реализацию");

ДобавитьОперацию("Продавец",	"BackSale",			"ВозвратПоставщику",		"Возврат товара поставщику");
ДобавитьОперацию("Продавец",	"BackComission",	"ВозвратПоставщику",		"Возврат товара комитенту");

ДобавитьОперацию("Продавец",	"Invoice",			"СчетФактураВыданный",		"Счет-Фактура");


ДобавитьОперацию("Получатель",	"Cash",				"ПКО",						"Поступление наличных денег от покупателя");
ДобавитьОперацию("Получатель",	"BackCash",			"ПКО",						"Возврат наличных денег от поставщика");

ДобавитьОперацию("Получатель",	"Payment",			"СтрокаВыпискиПриход",		"Поступление  безналичных денег от покупателя");
ДобавитьОперацию("Получатель",	"BackPayment",		"СтрокаВыпискиПриход",		"Возврат безналичных денег от поставщика");


ДобавитьОперацию("Получатель",	"ReportComission",	"ОтчетКомиссионера",		"Отчет комиссионера");
ДобавитьОперацию("Плательщик",	"ReportComission",	"ОтчетКомитенту",			"Отчет комитенту");


ДобавитьОперацию("Плательщик",	"Cash",				"РКО",						"Выплата наличных денег поставщику");
ДобавитьОперацию("Плательщик",	"BackCash",			"РКО",						"Возврат наличных денег покупателю");

ДобавитьОперацию("Плательщик",	"Payment",			"СтрокаВыпискиРасход",		"Выплата безналичных денег поставщику");
ДобавитьОперацию("Плательщик",	"BackPayment",		"СтрокаВыпискиРасход",		"Возврат безналичных денег покупателю");



//******************************************************************************





