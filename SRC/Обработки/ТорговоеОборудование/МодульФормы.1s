////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// Описание последней ошибки
Перем ОшибкаОписание;

// Модели торгового оборудования
Перем Модели;

// Строка содержит названия параметров модели, разделенные запятыми;
// используется для проверки при чтении файла описания модели
Перем ИменаПараметровМодели;

// Полный путь к файлу, в котором храняться настройки
Перем ИмяФайлаНастройки;

// Количество строк в файле для одной настройки
Перем СтрокВнастройке;
Перем ТекСтрокаOffLine, ТекСтрокаOnLine;

Перем ОбновлениеСпискаКассOffLine, ОбновлениеСпискаКассOnLine;

// Для оповещения об успешно подключенном оборудовании
Перем ТаблицаТОДоПодключения, ТаблицаТОПослеПодключения;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПолучитьПервуюМодель()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  0 - список моделей пуст
//  
// Описание:
//  Получет позицию первой модели
//
Функция ПолучитьПервуюМодель()
	Модели.ВыбратьСтроки();
	Возврат Модели.ПолучитьСтроку();
КонецФункции // ПолучитьПервуюМодель()

//******************************************************************************
// ПолучитьСледующуюМодель()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Позиция следующей модели или 0
//  
// Описание:
//  Получет позицию следующей модели. Перед вызовом функции нужно обязательно 
//  вызывать функцию ПолучитьПервуюМодель
//
Функция ПолучитьСледующуюМодель()
	Если Модели.ПолучитьСтроку() = 1 Тогда
		Рез = Модели.НомерСтроки;
	Иначе
		Рез = 0;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСледующуюМодель()

//******************************************************************************
// НайтиМодель(Модель)
//
// Параметры:
//  Модель - идентификатор модели
//
// Возвращаемое значение:
//  Позицию модели или 0, если модель не найдена
//  
// Описание:
//  Ищет модель по ее идентификатору
//
Функция НайтиМодель(Модель)
	
	Поз = 0;
	Модели.НайтиЗначение(Модель, Поз, "Модель");
	Возврат Поз;
	
КонецФункции // НайтиМодель()

//******************************************************************************
// ПолучитьПараметрМодели(Поз, Параметр, Значение)
//
// Параметры:
//  Поз      - позиция модели
//  Параметр - идентификатор параметра
//  Значение - значение параметра
//
// Возвращаемое значение:
//  1 - значения переданных параметров верны и через формальный параметр Значение
//  вернулось значение запрашиваемого параметра, 0 - в случае ошибки.
//  Сейчас всегда возвращается 1.
//  
// Описание:
//  для модели с заданной позицией возвращает значение требуемого параметра
//
Функция ПолучитьПараметрМодели(Поз, Параметр, Значение)
	
	Значение = Модели.ПолучитьЗначение(Поз, Параметр);
	Возврат 1;
	
КонецФункции // ПолучитьПараметрМодели()

//******************************************************************************
// УстановитьПараметрМодели(Поз, Параметр, Значение)
//
// Параметры:
//  Поз - позиция модели
//  Параметр - идентификатор параметра
//  Значение - значение параметра
//
// Возвращаемое значение:
//  0, если неверно задан идентификатор параметра или модели в заданной позиции 
//  не существует
//  
// Описание:
//  Для модели с заданной позицией устанавливает значение требуемого параметра
//
Функция УстановитьПараметрМодели(Поз, Параметр, Значение)
	Модели.УстановитьЗначение(Поз, Параметр, Значение);
	Возврат 1;
КонецФункции // УстановитьПараметрМодели()

//******************************************************************************
// ДобавитьМодель(Вид, Модель, Компонента, ПрогИд, Обработка, ФайлОписаний)
//
// Параметры:
//  Вид - вид торгового оборудования
//  Модель - идентификатор модели
//  Компонента - имя файла внешней компонеты
//  ПрогИд - программный идентификатор внешней компоненты
//  Обработка - имя файла обработки обслуживания
//  ФайлОписаний - имя файла описания модели
//
// Возвращаемое значение:
//  Позиция добавленной модели
//  
// Описание:
//  Добавляет описание модели
//
Функция ДобавитьМодель(Вид, Модель, Компонента, ПрогИд, Обработка, ФайлОписаний)
	
	Модели.НоваяСтрока();
		
	Модели.Вид          = Вид;
	Модели.Модель       = Модель;
	Модели.Компонента   = Компонента;
	Модели.ПрогИд       = ПрогИд;
	Модели.Обработка    = Обработка;
	Модели.ФайлОписаний = ФайлОписаний;
	
	Возврат Модели.КоличествоСтрок();
		
КонецФункции // ДобавитьМодель()

//******************************************************************************
// УдалитьМодель(Поз)
//
// Параметры: 
//  Поз - 
//
// Возвращаемое значение:
//  1 - модель удалена, 0 - ошибка 
//
// Описание:
//  Удаляет модель с заданной позицией
//
Функция УдалитьМодель(Поз)
	
	Если (Поз > 0) И (Поз < Модели.КоличествоСтрок()) Тогда
		Модели.УдалитьСтроку(Поз);
		Рез = 1;
	Иначе
	    Рез = 0;
		ОшибкаОписание = "Модель с заданной позицией отсутствует";
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // УдалитьМодель()

//******************************************************************************
// ЗагрузитьМодельИзФайла(ИмяФайла, Параметры)
//
// Параметры:
//  ИмяФайла - имя файла описания модели
//  Параметры - список значений с параметрами описания модели
//
// Возвращаемое значение:
//  1 - удалось загрузить описание, 0 - нет
//  
// Описание:
//  Загружает описание модели из файла описаний
//
Функция ЗагрузитьМодельИзФайла(ИмяФайла, Параметры)
	Перем Рез;
	
	
	Если ФС.СуществуетФайл(ИмяФайла) = 0 Тогда
		ОшибкаОписание = "Отсутствет файл " + ИмяФайла;
		Рез = 0;
	Иначе
		ФайлОписаний = СоздатьОбъект("Текст");
		ФайлОписаний.Открыть(ИмяФайла);
		
		// заполним список значениями из файла описаний
		Для Счетчик = 1 по ФайлОписаний.КоличествоСтрок() Цикл
			Стр = ФайлОписаний.ПолучитьСтроку(Счетчик);
			Поз = Найти(Стр, "=");
			Если Поз > 0 Тогда
				Ид = СокрЛП(Лев(Стр, Поз - 1));
				Если Найти(ИменаПараметровМодели, ИД) > 0 Тогда
					// правильный идентификатор параметра
					Параметры.Установить(Ид, СокрЛП(Сред(Стр, Поз + 1)));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Рез = 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗагрузитьМодельИзФайла()

//******************************************************************************
// СохранитьМодельВфайл(Поз, ИмяФайла)
//
// Параметры:
//  Поз      - позиция модели
//  ИмяФайла - имя файла описания
//
// Возвращаемое значение:
//  1 - удалось сохранить описание в файл, 0 - нет
//  
// Описание:
//  Сохраняет описание модели в файл
//
Функция СохранитьМодельВфайл(Поз, ИмяФайла)
	Перем Зн, Ид;
	
	ФайлОписаний = СоздатьОбъект("Текст");
	
	ПолучитьПараметрМодели(Поз, "Вид", Зн);
	ФайлОписаний.ДобавитьСтроку("Вид=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Модель", Зн);
	ФайлОписаний.ДобавитьСтроку("Модель=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Компонента", Зн);
	ФайлОписаний.ДобавитьСтроку("Компонента=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "ПрогИд", Зн);
	ФайлОписаний.ДобавитьСтроку("ПрогИд=" + Зн);
	
	ПолучитьПараметрМодели(Поз, "Обработка", Зн);
	ФайлОписаний.ДобавитьСтроку("Обработка=" + Зн);
	
	Если ФС.СуществуетФайл(глКаталогОписаний + ИмяФайла) = 1 Тогда
		Рез = Вопрос("Файл описаний торгового оборудования " + ИмяФайла + " существует. Переписать?", "Да+Нет+Отмена", 60);
		Если Рез = "Отмена" Тогда
		    Возврат 1;
		ИначеЕсли Рез = "Нет" Тогда
			ИмяФайла = "новое описание.efd";
			Если ВвестиСтроку(ИмяФайла, "Введите имя файла описаний", 25, 0, 60) <> 1 Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		ФайлОписаний.Записать(глКаталогОписаний + ИмяФайла);
		Рез = 1;
	Исключение
		ОшибкаОписание = "Не удалось записать описание модели в файл " + ИмяФайла;
		Рез = 0;
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции // СохранитьМодельВфайл()

//******************************************************************************
// ЗагрузитьВсеМодели()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - удалось выполнить загрузку, 0 - нет
//  
// Описание:
//  Загружает модели из всех файлов описаний
//
Функция ЗагрузитьВсеМодели()
	Перем Рез;
	
	// настройки из внешних файлов
	Кат = Лев(глКаталогОписаний, СтрДлина(глКаталогОписаний) - 1);
	
	Если ФС.СуществуетФайл(Кат) = 0 Тогда
		ОшибкаОписание = "Отсутствуют каталог " + глКаталогОписаний + " c описаниями моделей торгового оборудования";
		Рез = 0;
	Иначе
		Параметры = СоздатьОбъект("СписокЗначений");
		
		ТекКат = ФС.ТекКаталог();
		ФС.УстТекКаталог(глКаталогОписаний);
		
		Имяфайла = ФС.НайтиПервыйФайл("*.efd");
		
		Пока ПустоеЗначение(ИмяФайла) = 0 Цикл
			Параметры.УдалитьВсе();
			ЗагрузитьМодельИзФайла(глКаталогОписаний + ИмяФайла, Параметры);
			Модель = Параметры.Получить("Модель");
			
			// проверка дублей. 
			Если НайтиМодель(Модель) = 0 Тогда
				ДобавитьМодель(Параметры.Получить("Вид"),
				               Модель,
							   Параметры.Получить("Компонента"),
							   Параметры.Получить("ПрогИд"),
							   Параметры.Получить("Обработка"),
							   Имяфайла
							   );
			КонецЕсли;
			
			ИмяФайла = ФС.НайтиСледующийФайл();
		КонецЦикла;
		
		ФС.УстТекКаталог(ТекКат);
		
		Если Модели.КоличествоСтрок() = 0 Тогда
			ОшибкаОписание = "Отсутствуют описания торгового оборудования";
			Рез = 0;
		Иначе
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
		
КонецФункции // ЗагрузитьВсеМодели()

//******************************************************************************
// ДоступностьПолейСканера()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками сканера
//
Процедура ДоступностьПолейСканера()
	
	Форма.ТекстСканерМодель.Доступность(СканерВкл);
	Форма.СканерМодель.Доступность(СканерВкл);
	Форма.ТекстСканерИспПрефикс.Доступность(СканерВкл);
	Форма.СканерИспПрефикс.Доступность(СканерВкл);
	Форма.ТекстСканерПрефикс.Доступность(СканерВкл*СканерИспПрефикс);
	Форма.СканерПрефикс.Доступность(СканерВкл*СканерИспПрефикс);
	
	Форма.кнСканерДобавитьМодель.Доступность(СканерВкл); 
	Форма.кнСканерРедактироватьМодель.Доступность(СканерВкл);
	
КонецПроцедуры // ДоступностьПолейСканера()

//******************************************************************************
// ДоступностьПолейФР()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками фискального 
//  регистратора
//
Процедура ДоступностьПолейФР()
	
	Форма.ТекстФРМодель.Доступность(ФРВкл);
	Форма.ФРМодель.Доступность(ФРВкл);
	Форма.ТекстФРПарольАдминистратора.Доступность(ФРВкл);
	Форма.ФРПарольАдминистратора.Доступность(ФРВкл);
	Форма.ТекстФРПарольПользователя.Доступность(ФРВкл);
	Форма.ФРПарольПользователя.Доступность(ФРВкл);
	
	Форма.кнФРДобавитьМодель.Доступность(ФРВкл); 
	Форма.кнФРРедактироватьМодель.Доступность(ФРВкл); 
	
КонецПроцедуры // ДоступностьПолейФР()

//******************************************************************************
// ДоступностьПолейДисплея()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками дисплея 
//  покупателя
//
Процедура ДоступностьПолейДисплея()
	
	Форма.ТекстДисплейМодель.Доступность(ДисплейВкл);
	Форма.ДисплейМодель.Доступность(ДисплейВкл);
	Форма.ТекстДисплейСтрока.Доступность(ДисплейВкл);
	Форма.ДисплейСтрока.Доступность(ДисплейВкл);
	
	Форма.кнДисплейДобавитьМодель.Доступность(ДисплейВкл); 
	Форма.кнДисплейРедактироватьМодель.Доступность(ДисплейВкл);
	
КонецПроцедуры // ДоступностьПолейДисплея()

//******************************************************************************
// ДоступностьПолейТерминала()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками терминала сбора 
//  данных
//
Процедура ДоступностьПолейТерминала()
	
	Форма.ТекстТерминалМодель.Доступность(ТерминалВкл);
	Форма.ТерминалМодель.Доступность(ТерминалВкл);
	
	Форма.кнТерминалДобавитьМодель.Доступность(ТерминалВкл); 
	Форма.кнТерминалРедактироватьМодель.Доступность(ТерминалВкл);
	
КонецПроцедуры // ДоступностьПолейТерминала()

//******************************************************************************
// ДоступностьПолейВесов()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками электронных весов
//
Процедура ДоступностьПолейВесов()
	
	Форма.ТекстВесыМодель.Доступность(ВесыВкл);
	Форма.ВесыМодель.Доступность(ВесыВкл);
	
	Форма.кнВесыДобавитьМодель.Доступность(ВесыВкл); 
	Форма.кнВесыРедактироватьМодель.Доступность(ВесыВкл);
	
КонецПроцедуры // ДоступностьПолейВесов()

//******************************************************************************
// ДоступностьПолейOffline()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками ККМ Offline
//
Процедура ДоступностьПолейOffline()
	Перем Вкл;
	
	ТекСтр = ККМOffline.ТекущаяСтрока();
	Если ТекСтр = 0 Тогда
	    Вкл = 0;
	Иначе
		Вкл = ККМOffline.ПолучитьЗначение(ТекСтр, "Вкл") - 1;
	КонецЕсли;
	
	Форма.OfflineМодель.Доступность(Вкл);
	Форма.кнOfflineДобавитьМодель.Доступность(Вкл);
	Форма.кнOfflineРедактироватьМодель.Доступность(Вкл);
	Форма.OfflineКаталогОбмена.Доступность(Вкл);
	
КонецПроцедуры // ДоступностьПолейOffline()

//******************************************************************************
// ДоступностьПолейOnline()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет доступностью полей в форме, связанных с настроками ККМ Online
//
Процедура ДоступностьПолейOnline()
	Перем Вкл;
	
	ТекСтр = ККМOnline.ТекущаяСтрока();
	Если ТекСтр = 0 Тогда
	    Вкл = 0;
	Иначе
		Вкл = ККМOnline.ПолучитьЗначение(ТекСтр, "Вкл") - 1;
	КонецЕсли;
	
	Форма.OnlineМодель.Доступность(Вкл);
	Форма.кнOnlineДобавитьМодель.Доступность(Вкл);
	Форма.кнOnlineРедактироватьМодель.Доступность(Вкл);
	
КонецПроцедуры // ДоступностьПолейOnline()

//******************************************************************************
// ИнициализацияНастройки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Инициализирует настройки торгового оборудования
//
Функция ИнициализацияНастройки()
	
	// сканер
	
	глСканерВкл        = 0;
	глСканерМодель     = "";
	глСканерОбработка  = "";
	глСканерКомпонента = "";
	глСканерППрогИд    = "";
	
	глСканерПрефикс    = "";
	глСканерЕстьПрефикс= 0;
	
	// фискальный регистратор
	
	глФРВкл        = 0;
	глФРМодель     = "";
	глФРОбработка  = "";
	глФРКомпонента = "";
	глФРПрогИд     = "";
	
	глФРПарольАдминистратора = "";
	глФРПарольПользователя   = "";
	
	// дисплей покупателя
	
	глДПВкл            = 0;
	глДПМодель         = "";
	глДПОбработка      = "";
	глДПКомпонента     = "";
	глДППрогИд         = "";
	глДПБегСтрока      = "";
	глДПРежим          = 0;
	
	// терминал сбора данных
	
	глТерминалВкл        = 0;
	глТерминалМодель     = "";
	глТерминалОбработка  = "";
	глТерминалКомпонента = "";
	глТерминалПрогИд     = "";
	
	// электронные весы
	
	глВесыВкл        = 0;
	глВесыМодель     = "";
	глВесыОбработка  = "";
	глВесыКомпонента = "";
	глВесыПрогИд     = "";
	
	// ККМ OffLine
	глККМOffLine = СоздатьОбъект("ТаблицаЗначений");
	глККМOffLine.НоваяКолонка("Вкл"          , "Число", 1, 0);
	глККМOffLine.НоваяКолонка("Объект"       ,         );
	глККМOffLine.НоваяКолонка("ККМ"          ,         );
	глККМOffLine.НоваяКолонка("Модель"       , "Строка");
	глККМOffLine.НоваяКолонка("Обработка"    , "Строка");
	глККМOffLine.НоваяКолонка("Компонента"   , "Строка");
	глККМOffLine.НоваяКолонка("ПрогИд"       , "Строка");
	глККМOffLine.НоваяКолонка("КаталогОбмена", "Строка");
	
	// ККМ OnLine
	глККМOnLine = СоздатьОбъект("ТаблицаЗначений");
	глККМOnLine.НоваяКолонка("Вкл"          , "Число", 1, 0);
	глККМOnLine.НоваяКолонка("Объект"       ,         );
	глККМOnLine.НоваяКолонка("ККМ"          ,         );
	глККМOnLine.НоваяКолонка("Код"          , "Строка");
	глККМOnLine.НоваяКолонка("Модель"       , "Строка");
	глККМOnLine.НоваяКолонка("Обработка"    , "Строка");
	глККМOnLine.НоваяКолонка("Компонента"   , "Строка");
	глККМOnLine.НоваяКолонка("ПрогИд"       , "Строка");
	
	// ККМ OnLine (чековый буфер)
	глЧековыйБуферККМOnLine = СоздатьОбъект("ТаблицаЗначений");
	глЧековыйБуферККМOnLine.НоваяКолонка("КодККМ"     , "Строка"); // сетевой номер ККМ
	глЧековыйБуферККМOnLine.НоваяКолонка("Штрихкод"   , "Строка");
	глЧековыйБуферККМOnLine.НоваяКолонка("Количество" , "Число");
	глЧековыйБуферККМOnLine.НоваяКолонка("Сумма"      , "Число");
	
КонецФункции // ИнициализацияНастройки()

//******************************************************************************
// ПоискСохрНастройки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Номер строки в файле настроек, или 0, если настройка отсутствует.
//  
// Описание:
//  Ищет в файле настроек торгового оборудования настройки текущей конфигурации
//
Функция ПоискСохрНастройки(Файл)
	Рез        = 0;
	Счетчик    = 1;
	ВсегоСтрок = Файл.КоличествоСтрок();
	 
	Пока Счетчик <= ВсегоСтрок Цикл
		Стр = Файл.ПолучитьСтроку(Счетчик);
		
		Если СокрЛП(Стр) = КаталогИБ() Тогда
			Рез = Счетчик;
		КонецЕсли;
		
		Счетчик = Счетчик + СтрокВнастройке;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // ПоискСохрНастройки()

//******************************************************************************
// ЗагрузитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - загрузка прошла успешно, 0 - нет
//  
// Описание:
//  Загружает из файла настроек торгового оборудования настройки текущей конфигурации
//
Функция ЗагрузитьНастройку()
	
	Перем ВрОбработка;
	Перем ВрКомпонента;
	Перем ВрПрогИд;
	
	Рез = 1;
	
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) <> 0 Тогда
		ТекстНастройки = СоздатьОбъект("Текст");
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
		
		Если НомСтр > 0 Тогда
			Настройка = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 1));
			
			Если ТипЗначенияСтр(Настройка) <> "СписокЗначений" Тогда
				Рез = 0;
				ОшибкаОписание = "Неверный формат файла настроек";
			Иначе
				
				// сканер
				глСканерВкл        = Настройка.Получить("СканерВкл");
				глСканерМодель     = Настройка.Получить("СканерМодель");
				глСканерПрефикс    = Настройка.Получить("СканерПрефикс");
				глСканерЕстьПрефикс= Настройка.Получить("СканерЕстьПрефикс");
				
				Поз = НайтиМодель(глСканерМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глСканерОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глСканерКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глСканерПрогИд);
				КонецЕсли;
				
				// ФР
				глФРВкл    = Настройка.Получить("ФРВкл");
				глФРМодель = Настройка.Получить("ФРМодель");
				глФРПарольАдминистратора = Настройка.Получить("ФРПарольАдминистратора");
				глФРПарольПользователя   = Настройка.Получить("ФРПарольПользователя");
				
				Поз = НайтиМодель(глФРМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глФРОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глФРКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глФРПрогИд);
				КонецЕсли;
				
				// дисплей покупателя
				глДПВкл       = Настройка.Получить("ДПВкл");
				глДПМодель    = Настройка.Получить("ДПМодель");
				глДПБегСтрока = Настройка.Получить("ДПБегСтрока");
				
				Поз = НайтиМодель(глДПМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глДПОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глДПКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глДППрогИд);
				КонецЕсли;
				
				// терминал сбора данных
				глТерминалВкл       = Настройка.Получить("ТерминалВкл");
				глТерминалМодель    = Настройка.Получить("ТерминалМодель");
				
				Поз = НайтиМодель(глТерминалМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глТерминалОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глТерминалКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глТерминалПрогИд);
				КонецЕсли;
				
				// электронные весы
				глВесыВкл       = Настройка.Получить("ВесыВкл");
				глВесыМодель    = Настройка.Получить("ВесыМодель");
				
				Поз = НайтиМодель(глВесыМодель);
				Если Поз > 0 Тогда
					ПолучитьПараметрМодели(Поз, "Обработка" , глВесыОбработка);
					ПолучитьПараметрМодели(Поз, "Компонента", глВесыКомпонента);
					ПолучитьПараметрМодели(Поз, "ПрогИд"    , глВесыПрогИд);
				КонецЕсли;
				
			КонецЕсли;
			
			// ККМ в режиме Off-Line
			НастрOffline = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 2));
			Если ТипЗначенияСтр(НастрOffline) = "ТаблицаЗначений" Тогда
				НастрOffline.ВыбратьСтроки();
				Пока НастрOffline.ПолучитьСтроку() = 1 Цикл
				    глККМOffLine.НоваяСтрока();
					глККМOffLine.Вкл           = НастрOffline.Вкл;
					глККМOffLine.Модель        = НастрOffline.Модель;
					глККМOffLine.ККМ           = НастрOffline.ККМ;
					глККМOffLine.КаталогОбмена = НастрOffline.КаталогОбмена;
					
					Поз = НайтиМодель(глККМOffLine.Модель);
					Если Поз > 0 Тогда
						ПолучитьПараметрМодели(Поз, "Обработка" , ВрОбработка);
						глККМOffLine.Обработка  = ВрОбработка;
						
						ПолучитьПараметрМодели(Поз, "Компонента", ВрКомпонента);
						глККМOffLine.Компонента = ВрКомпонента;
						
						ПолучитьПараметрМодели(Поз, "ПрогИд"    , ВрПрогИд);
						глККМOffLine.ПрогИд     = ВрПрогИд;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
			// ККМ в режиме On-Line
			НастрOnline = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 3));
			Если ТипЗначенияСтр(НастрOnline) = "ТаблицаЗначений" Тогда
				НастрOnline.ВыбратьСтроки();
				Пока НастрOnline.ПолучитьСтроку() = 1 Цикл
				    глККМOnLine.НоваяСтрока();
					глККМOnLine.Вкл           = НастрOnline.Вкл;
					глККМOnLine.Модель        = НастрOnline.Модель;
					глККМOnLine.ККМ           = НастрOnline.ККМ;
					глККМOnLine.Код           = НастрOnline.Код;
					
					Поз = НайтиМодель(глККМOnLine.Модель);
					Если Поз > 0 Тогда
						ПолучитьПараметрМодели(Поз, "Обработка" , ВрОбработка);
						глККМOnLine.Обработка  = ВрОбработка;
						
						ПолучитьПараметрМодели(Поз, "Компонента", ВрКомпонента);
						глККМOnLine.Компонента = ВрКомпонента;
						
						ПолучитьПараметрМодели(Поз, "ПрогИд"    , ВрПрогИд);
						глККМOnLine.ПрогИд     = ВрПрогИд;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗагрузитьНастройку()

//******************************************************************************
// ДобавитьТОвТаблицу(ТаблицаТО, ТОНаименование, ТОВключено, ТОМодель, ТОПоследняяБуква = "")
//
// Параметры:
//  ТаблицаТО        - ТаблицаЗначений - , в которую будет добавлено торговое оборудование
//  ТОНаименование   - Строка          - наименование торгового оборудования
//  ТОВключено       - флаг            - , 1 - торговое оборудование включено, 0 - нет
//  ТОМодель         - Строка          - модель торгового оборудования
//  ТОПоследняяБуква - Строка          - , которая будет добавлена к слову "включен", при выводе сообщения
//                                       "а", "о", "ы" и пр.
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Добавляет строку в переданную таблицу торгового оборудования
//
Процедура ДобавитьТОвТаблицу(ТаблицаТО, ТОНаименование, ТОВключено, ТОМодель, ТОПоследняяБуква = "")
	
	ТаблицаТО.НоваяСтрока();
	ТаблицаТО.ТОНаименование   = ТОНаименование;
	ТаблицаТО.ТОВключено       = ТОВключено;
	ТаблицаТО.ТОМодель         = ТОМодель;
	ТаблицаТО.ТОПоследняяБуква = ТОПоследняяБуква;
	
КонецПроцедуры // ДобавитьТОвТаблицу()

//******************************************************************************
// ПолучитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - настрайки получены, 0 - нет
//  
// Описание:
//  Получает из файла настроек торгового оборудования настройки текущей конфигурации
//
Функция ПолучитьНастройку()
	
	Рез = 1;
	
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) <> 0 Тогда
		ТекстНастройки = СоздатьОбъект("Текст");
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
		
		Если НомСтр > 0 Тогда
			Настройка = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 1));
			
			Если ТипЗначенияСтр(Настройка) <> "СписокЗначений" Тогда
				Рез = 0;
				ОшибкаОписание = "Неверный формат файла настроек";
			Иначе
				ТаблицаТОДоПодключения.УдалитьСтроки();
				
				// Cканер
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Сканер штрих-кода"     , Настройка.Получить("СканерВкл")  , Настройка.Получить("СканерМодель"));
				
				// ФР
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Фискальный регистратор", Настройка.Получить("ФРВкл")      , Настройка.Получить("ФРМодель"));
				
				// Дисплей покупателя
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Дисплей покупателя"    , Настройка.Получить("ДПВкл")      , Настройка.Получить("ДПМодель"));
				                                                                                          
				// Терминал сбора данных
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Терминал сбора данных" , Настройка.Получить("ТерминалВкл"), Настройка.Получить("ТерминалМодель"));
				
				// Электронные весы
				ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "Электронные весы"      , Настройка.Получить("ВесыВкл")    , Настройка.Получить("ВесыМодель"));
			КонецЕсли;
			
			// ККМ в режиме Off-Line
			НастрOffline = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 2));
			Если ТипЗначенияСтр(НастрOffline) = "ТаблицаЗначений" Тогда
				НастрOffline.ВыбратьСтроки();
				Пока НастрOffline.ПолучитьСтроку() = 1 Цикл
					ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "ККМ в режиме Off-Line", НастрOffline.Вкл, НастрOffline.Модель);
				КонецЦикла;
			КонецЕсли;
			
			// ККМ в режиме On-Line
			НастрOnline = ЗначениеИзСтроки(ТекстНастройки.ПолучитьСтроку(НомСтр + 3));
			Если ТипЗначенияСтр(НастрOnline) = "ТаблицаЗначений" Тогда
				НастрOnline.ВыбратьСтроки();
				Пока НастрOnline.ПолучитьСтроку() = 1 Цикл
					ДобавитьТОвТаблицу(ТаблицаТОДоПодключения, "ККМ в режиме On-Line", НастрOnline.Вкл, НастрOnline.Модель);
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПолучитьНастройку()

//******************************************************************************
// СохранитьНастройку()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  1 - сохранение прошло успешно, 0 - нет
//  
// Описание:
//  Сохраняет в файле настроек торгового оборудования настройки текущей конфигурации
//
Функция СохранитьНастройку()
	
	Перем ТекстНастройки;
	
	ТекстНастройки = СоздатьОбъект("Текст");
	Если ФС.СуществуетФайл(ИмяФайлаНастройки) = 0 Тогда
		НомСтр = 0;
	Иначе
		ТекстНастройки.Открыть(ИмяФайлаНастройки);
		НомСтр = ПоискСохрНастройки(ТекстНастройки);
	КонецЕсли;
	
	Настройка = СоздатьОбъект("СписокЗначений");
	
	// параметры сканера
	
	Настройка.Установить("СканерВкл"        , глСканерВкл);
	Настройка.Установить("СканерМодель"     , глСканерМодель);
	Настройка.Установить("СканерПрефикс"    , глСканерПрефикс);
	Настройка.Установить("СканерЕстьПрефикс", глСканерЕстьПрефикс);

	// параметры фискального регистратора
	
	Настройка.Установить("ФРВкл"        , глФРВкл);
	Настройка.Установить("ФРМодель"     , глФРМодель);
	Настройка.Установить("ФРПарольАдминистратора", глФРПарольАдминистратора);
	Настройка.Установить("ФРПарольПользователя"  , глФРПарольПользователя);

	// параметры дисплея покупателя
	
	Настройка.Установить("ДПВкл"      , глДПВкл);
	Настройка.Установить("ДПМодель"   , глДПМодель);
	Настройка.Установить("ДПБегСтрока", глДПБегСтрока);
	
	// параметры терминала сбора данных
	
	Настройка.Установить("ТерминалВкл"   , глТерминалВкл);
	Настройка.Установить("ТерминалМодель", глТерминалМодель);

	// параметры электронных весов
	
	Настройка.Установить("ВесыВкл"   , глВесыВкл);
	Настройка.Установить("ВесыМодель", глВесыМодель);

	СтрНастройки = ЗначениеВстроку(Настройка);
	
	НастрOffline = СоздатьОбъект("ТаблицаЗначений");
	глККМOffLine.Выгрузить(НастрOffline,,,"Вкл,Модель,ККМ,КаталогОбмена");
	СтрOffline = ЗначениеВстроку(глККМOffLine);
	
	НастрOnline = СоздатьОбъект("ТаблицаЗначений");
	глККМOnLine.Выгрузить(НастрOnline,,,"Вкл,Модель,ККМ,Код");
	СтрOnline = ЗначениеВстроку(глККМOnLine);
					
	Если НомСтр = 0 Тогда
		ТекстНастройки.ДобавитьСтроку(КаталогИБ());
		ТекстНастройки.ДобавитьСтроку(СтрНастройки);
		ТекстНастройки.ДобавитьСтроку(СтрOffline); 
		ТекстНастройки.ДобавитьСтроку(СтрOnline);
	Иначе
		ТекстНастройки.ЗаменитьСтроку(НомСтр + 1, СтрНастройки);
		ТекстНастройки.ЗаменитьСтроку(НомСтр + 2, СтрOffline);
		ТекстНастройки.ЗаменитьСтроку(НомСтр + 3, СтрOnline);
	КонецЕсли;
	
	Рез = 1;
	Попытка
		ТекстНастройки.Записать(ИмяФайлаНастройки);
	Исключение
		Рез = 0;
		ОшибкаОписание = "Не удалось сохранить настройки торгового оборудования";
	КонецПопытки;
	
	Возврат Рез;
	
КонецФункции // СохранитьНастройку()

//******************************************************************************
// ПодключитьОборудование()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Подключает торговое оборудование
//
Процедура ПодключитьОборудование()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	ТаблицаТОПослеПодключения.УдалитьСтроки();
	
	// подключаем сканер
	Если глСканерВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента", глСканерКомпонента);
		Параметры.Установить("ПрогИд"    , глСканерПрогИд);
		глОборудованиеКоманда("Сканер"   , глСканерОбработка, Параметры);
		глСканерВкл = Параметры.Получить("Результат");
		Если глСканерВкл = 1 Тогда
			глСканер = Параметры.Получить("Объект");
		Иначе
			Сообщить("Сканер штрих-кода: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Сканер штрих-кода", глСканерВкл, глСканерМодель);
	КонецЕсли;
	Параметры.УдалитьВсе();
	
	// подключаем ФР
	Если глФРВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента", глФРКомпонента);
		Параметры.Установить("ПрогИд"    , глФРПрогИд);
		
		глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		
		глФРВкл = Параметры.Получить("Результат");
		Если глФРВкл = 1 Тогда
			глФР = Параметры.Получить("Объект");
		Иначе
			Сообщить("Фискальный регистратор: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Фискальный регистратор", глФРВкл, глФРМодель);
	КонецЕсли;
	Параметры.УдалитьВсе();
	
	// подключаем дисплей покупателя
	Если глДПВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента"  , глДПКомпонента);
		Параметры.Установить("ПрогИд"      , глДППрогИд);
		глОборудованиеКоманда("Дисплей"    , глДПОбработка, Параметры);
		глДПВкл = Параметры.Получить("Результат");
		Если глДПВкл = 1 Тогда
			// запустим режим бегущей строки
			глДП = Параметры.Получить("Объект");
        	Если глДПВключитьРежимВыводаБегСтроки() = 0 Тогда
				Сообщить("Дисплей покупателя: не удалось включить режим бегущей строки", "!");
				Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
			КонецЕсли;
		Иначе
			Сообщить("Дисплей покупателя: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Дисплей покупателя", глДПВкл, глДПМодель);
	КонецЕсли;
	Параметры.УдалитьВсе();
	
	// подключаем терминал
	Если глТерминалВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента", глТерминалКомпонента);
		Параметры.Установить("ПрогИд"    , глТерминалПрогИд);
		глОборудованиеКоманда("Терминал" , глТерминалОбработка, Параметры);
		глТерминалВкл = Параметры.Получить("Результат");
		Если глТерминалВкл = 1 Тогда
			// запустим режим бегущей строки
			глТерминал = Параметры.Получить("Объект");
		Иначе
			Сообщить("Терминал сбора данных: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Терминал сбора данных", глТерминалВкл, глТерминалМодель);
	КонецЕсли;
	Параметры.УдалитьВсе();
	
	// подключаем весы
	Если глВесыВкл = 1 Тогда
		Параметры.Установить("Процесс", "подключить");
		Параметры.Установить("Компонента", глВесыКомпонента);
		Параметры.Установить("ПрогИд"    , глВесыПрогИд);
		глОборудованиеКоманда("Весы" , глВесыОбработка, Параметры);
		глВесыВкл = Параметры.Получить("Результат");
		Если глВесыВкл = 1 Тогда
			// запустим режим бегущей строки
			глВесы = Параметры.Получить("Объект");
		Иначе
			Сообщить("Электронные весы: ошибка при подключении", "!");
			Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
		КонецЕсли;
		ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "Электронные весы", глВесыВкл, глВесыМодель, "ы");
	КонецЕсли;
	Параметры.УдалитьВсе();
	
	// Подключаем ККМ OffLine
	глККМOffLine.ВыбратьСтроки();
	Пока глККМOffLine.ПолучитьСтроку() = 1 Цикл
	    Если глККМOffLine.Вкл = 1 Тогда
			Параметры.Установить("Процесс", "подключить");
			Параметры.Установить("Компонента", глККМOffLine.Компонента);
			Параметры.Установить("ПрогИд"    , глККМOffLine.ПрогИд);
			
			глОборудованиеКоманда("Offline"  , глККМOffLine.Обработка, Параметры);
			
			глККМOffLine.Вкл = Параметры.Получить("Результат");
			Если глККМOffLine.Вкл = 1 Тогда
				// запустим режим бегущей строки
				глККМOffLine.Объект = Параметры.Получить("Объект");
			Иначе
				Сообщить(глККМOffLine.ККМ.Наименование + ": ошибка при подключении", "!");
				Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
			КонецЕсли;
			ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "ККМ в режиме Off-Line", глККМOffLine.Вкл, глККМOffLine.Модель, "а");
			Параметры.УдалитьВсе();
	    КонецЕсли;
	КонецЦикла;
	
	// Подключаем ККМ OnLine
	глККМOnLine.ВыбратьСтроки();
	Пока глККМOnLine.ПолучитьСтроку() = 1 Цикл
	    Если глККМOnLine.Вкл = 1 Тогда
			Параметры.Установить("Процесс", "подключить");
			Параметры.Установить("Компонента", глККМOnLine.Компонента);
			Параметры.Установить("ПрогИд"    , глККМOnLine.ПрогИд);
			
			глОборудованиеКоманда("Online"  , глККМOnLine.Обработка, Параметры);
			
			глККМOnLine.Вкл = Параметры.Получить("Результат");
			Если глККМOnLine.Вкл = 1 Тогда
				// запустим режим бегущей строки
				глККМOnLine.Объект = Параметры.Получить("Объект");
			Иначе
				Сообщить(глККМOnLine.ККМ.Наименование + ": ошибка при подключении", "!");
				Сообщить("    " + Параметры.Получить("ОписаниеРезультата"));
			КонецЕсли;
			ДобавитьТОвТаблицу(ТаблицаТОПослеПодключения, "ККМ в режиме On-Line", глККМOnLine.Вкл, глККМOnLine.Модель, "а");
			Параметры.УдалитьВсе();
	    КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПодключитьОборудование()

//******************************************************************************
// ОтключитьОборудование()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Отключает торговое оборудование
//
Процедура ОтключитьОборудование()
	
	Параметры = СоздатьОбъект("СписокЗначений");
	Параметры.Установить("Процесс", "отключить");
	
	// отключаем сканер штрихкода
	Если глСканерВкл = 1 Тогда
		Параметры.Установить("Объект", глСканер);
		глОборудованиеКоманда("Сканер", глСканерОбработка, Параметры);
		глСканерВкл = 0;
		глСканер    = 0;
	КонецЕсли;
	
	// отключаем фискальный регистратор
	Если глФРВкл = 1 Тогда
		Параметры.Установить("Объект", глФР);
		глОборудованиеКоманда("ФР", глФРОбработка, Параметры);
		глФРВкл = 0;
		глФР    = 0;
	КонецЕсли;
	
	// отключаем дисплей покупателя
	Если глДПВкл = 1 Тогда
		Параметры.Установить("Объект", глДП);
		глОборудованиеКоманда("Дисплей", глДПОбработка, Параметры);
		глДПВкл   = 0;
		глДП      = 0;
		глДПРежим = 0;
	КонецЕсли;

	// отключаем терминал
	Если глТерминалВкл = 1 Тогда
		Параметры.Установить("Объект", глТерминал);
		глОборудованиеКоманда("Терминал", глТерминалОбработка, Параметры);
		глТерминалВкл   = 0;
		глТерминал      = 0;
	КонецЕсли;

	// отключаем весы
	Если глВесыВкл = 1 Тогда
		Параметры.Установить("Объект", глВесы);
		глОборудованиеКоманда("Весы", глВесыОбработка, Параметры);
		глВесыВкл = 0;
		глВесы    = 0;
	КонецЕсли;
	
    // Отключаем ККМ в режиме Off-Line
	глККМOffLine.ВыбратьСтроки();
	Пока глККМOffLine.ПолучитьСтроку() = 1 Цикл
	    Если глККМOffLine.Вкл = 1 Тогда
			Параметры.Установить("Объект", глККМOffLine.Объект);
			
			глОборудованиеКоманда("Offline"  , глККМOffLine.Обработка, Параметры);
			
			глККМOffLine.Вкл    = 0;
			глККМOffLine.Объект = 0;
	    КонецЕсли;
	КонецЦикла;
	
    // Отключаем ККМ в режиме On-Line
	глККМOnLine.ВыбратьСтроки();
	Пока глККМOnLine.ПолучитьСтроку() = 1 Цикл
	    Если глККМOnLine.Вкл = 1 Тогда
			Параметры.Установить("Объект", глККМOnLine.Объект);
			
			глОборудованиеКоманда("Online"  , глККМOnLine.Обработка, Параметры);
			
			глККМOnLine.Вкл    = 0;
			глККМOnLine.Объект = 0;
	    КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОтключитьОборудование()

//******************************************************************************
// СообщитьОПодключении()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Сообщает об успешно подключенном оборудовании.
//
Процедура СообщитьОПодключении()
	
	ПодключилиНовоеТО = 0;
	ТаблицаТОПослеПодключения.ВыбратьСтроки();
	Пока ТаблицаТОПослеПодключения.ПолучитьСтроку() = 1 Цикл
		
		Если ТаблицаТОПослеПодключения.ТОВключено = 1 Тогда
		    
		    СообщитьОПодключении = 1;
			ТаблицаТОДоПодключения.ВыбратьСтроки();
			Пока ТаблицаТОДоПодключения.ПолучитьСтроку() = 1 Цикл
				Если (ТаблицаТОДоПодключения.ТОНаименование = ТаблицаТОПослеПодключения.ТОНаименование) И
					 (ТаблицаТОДоПодключения.ТОМодель       = ТаблицаТОПослеПодключения.ТОМодель) И
					 (ТаблицаТОДоПодключения.ТОВключено = 1) Тогда
				    СообщитьОПодключении = 0;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СообщитьОПодключении = 1 Тогда
				ПодключилиНовоеТО = 1;
				Сообщить(ТаблицаТОПослеПодключения.ТОНаименование+
					     " (модель: "+ТаблицаТОПослеПодключения.ТОМодель+") успешно подключен"+ТаблицаТОПослеПодключения.ТОПоследняяБуква+".");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПодключилиНовоеТО = 1 Тогда
		Предупреждение("Параметры компонент устанавливаются на
					   |соответствующей закладке (меню Сервис\Параметры).", 60);
	КонецЕсли;
	
КонецПроцедуры // СообщитьОПодключении()

//******************************************************************************
// СохранитьИзменения()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Переносит парметры торгового оборудования из элементов формы в настройки.
//
Процедура СохранитьИзменения()
	
	Перем Компонента, ПрогИд, Обработка;
	
	// отключаем все используемое оборудование
	ОтключитьОборудование();
	
	// сканер штрихкода
	
	ТекСтр = СканерМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = СканерМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
			
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			глСканерВкл    = 0;
			глСканерМодель = "";
		Иначе
			глСканерВкл    = СканерВкл;
			глСканерМодель = Модель;
				
			ПолучитьПараметрМодели(Поз, "Компонента" , глСканерКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"     , глСканерПрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка"  , глСканерОбработка);
		КонецЕсли;
	КонецЕсли;
	
	глСканерПрефикс     = СканерПрефикс;
	глСканерЕстьПрефикс = СканерИспПрефикс;
	
	// фискальный регистратор
	
	ТекСтр = ФРМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = ФРМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
			
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			глФРВкл    = 0;
			глФРМодель = "";
		Иначе
			глФРВкл    = ФРВкл;
			глФРМодель = Модель;
			глФРПарольАдминистратора = СокрЛП(ФРПарольАдминистратора);
			глФРПарольПользователя   = СокрЛП(ФРПарольПользователя);
			
			ПолучитьПараметрМодели(Поз, "Компонента" , глФРКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"     , глФРПрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка"  , глФРОбработка);
		КонецЕсли;
	КонецЕсли;
	
	// дисплей покупателя
	
	ТекСтр = ДисплейМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = ДисплейМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			// модель не найдена в списке оборудования
			глДПМодель = "";
			глДПВкл    = 0;
		Иначе
			глДПВкл    = ДисплейВкл;
			глДПМодель = Модель;
				
			ПолучитьПараметрМодели(Поз, "Компонента", глДПКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"    , глДППрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка" , глДПОбработка);
		КонецЕсли;
	КонецЕсли;
		
    глДПБегСтрока = ДисплейСтрока;
	
	// терминал сбора данных
	
	ТекСтр = ТерминалМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = ТерминалМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			// модель не найдена в списке оборудования
			глТерминалВкл    = 0;
			глТерминалМодель = "";
		Иначе
			глТерминалВкл    = ТерминалВкл;
			глТерминалМодель = Модель;
				
			ПолучитьПараметрМодели(Поз, "Компонента", глТерминалКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"    , глТерминалПрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка" , глТерминалОбработка);
		КонецЕсли;
	КонецЕсли;
		
	// электронные весы
	
	ТекСтр = ВесыМодель.ТекущаяСтрока();
	Модель = "";
	Если ТекСтр > 0 Тогда
		Модель = ВесыМодель.ПолучитьЗначение(ТекСтр);
	КонецЕсли;
			
	Если ПустоеЗначение(Модель) = 0 Тогда
		Поз = НайтиМодель(Модель);
		Если Поз = 0 Тогда
			// модель не найдена в списке оборудования
			глВесыВкл    = 0;
			глВесыМодель = "";
		Иначе
			глВесыВкл    = ВесыВкл;
			глВесыМодель = Модель;
				
			ПолучитьПараметрМодели(Поз, "Компонента", глВесыКомпонента);
			ПолучитьПараметрМодели(Поз, "ПрогИд"    , глВесыПрогИд);
			ПолучитьПараметрМодели(Поз, "Обработка" , глВесыОбработка);
		КонецЕсли;
	КонецЕсли;
		
	// ККМ Offline
	
	глККМOffLine.УдалитьСтроки();
	
	// перенесем в таблицу значений значения из полей формы
	ТекСтр = ККМOffline.ТекущаяСтрока();
	Если ТекСтр > 0 Тогда
		ККМOffline.ПолучитьСтрокуПоНомеру(ТекСтр);
		
		Если OfflineМодель.РазмерСписка() > 0 Тогда
		    ККМOffline.Модель = OfflineМодель.ПолучитьЗначение(OfflineМодель.ТекущаяСтрока(Поз));
		КонецЕсли;
		ККМOffline.КаталогОбмена = OfflineКаталогОбмена;
	КонецЕсли;
	
	ККМOffline.ВыбратьСтроки();
	Пока ККМOffline.ПолучитьСтроку() = 1 Цикл
		глККМOffLine.НоваяСтрока();
		глККМOffLine.ККМ           = ККМOffline.ККМ;
		глККМOffLine.КаталогОбмена = ККМOffline.КаталогОбмена;
		
		глККМOffLine.НоваяКолонка("Обработка"    , "Строка");
		глККМOffLine.НоваяКолонка("Компонента"   , "Строка");
		глККМOffLine.НоваяКолонка("ПрогИд"       , "Строка");

		Если ПустоеЗначение(ККМOffline.Модель) = 0 Тогда
			Поз = НайтиМодель(ККМOffline.Модель);
			
			Если Поз = 0 Тогда
				// модель не найдена в списке оборудования
				глККМOffLine.Вкл    = 0;
				глККМOffLine.Модель = "";
			Иначе
				глККМOffLine.Вкл    = ККМOffline.Вкл - 1;
				глККМOffLine.Модель = ККМOffline.Модель;
					
				ПолучитьПараметрМодели(Поз, "Компонента", Компонента);
				глККМOffLine.Компонента = Компонента;
				
				ПолучитьПараметрМодели(Поз, "ПрогИд"    , ПрогИд);
				глККМOffLine.ПрогИд     = ПрогИд;
				
				ПолучитьПараметрМодели(Поз, "Обработка" , Обработка);
				глККМOffLine.Обработка   = Обработка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// ККМ Online
	
	глККМOnLine.УдалитьСтроки();
	
	// перенесем в таблицу значений значения из полей формы
	ТекСтр = ККМOnline.ТекущаяСтрока();
	Если ТекСтр > 0 Тогда
		ККМOnline.ПолучитьСтрокуПоНомеру(ТекСтр);
		
		Если OnlineМодель.РазмерСписка() > 0 Тогда
		    ККМOnline.Модель = OnlineМодель.ПолучитьЗначение(OnlineМодель.ТекущаяСтрока(Поз));
		КонецЕсли;
	КонецЕсли;
	
	ККМOnline.ВыбратьСтроки();
	Пока ККМOnline.ПолучитьСтроку() = 1 Цикл
		глККМOnLine.НоваяСтрока();
		глККМOnLine.ККМ           = ККМOnline.ККМ;
		глККМOnLine.Код           = ККМOnline.Код;
		
		глККМOnLine.НоваяКолонка("Обработка"    , "Строка");
		глККМOnLine.НоваяКолонка("Компонента"   , "Строка");
		глККМOnLine.НоваяКолонка("ПрогИд"       , "Строка");

		Если ПустоеЗначение(ККМOnline.Модель) = 0 Тогда
			Поз = НайтиМодель(ККМOnline.Модель);
			
			Если Поз = 0 Тогда
				// модель не найдена в списке оборудования
				глККМOnLine.Вкл    = 0;
				глККМOnLine.Модель = "";
			Иначе
				глККМOnLine.Вкл    = ККМOnline.Вкл - 1;
				глККМOnLine.Модель = ККМOnline.Модель;
					
				ПолучитьПараметрМодели(Поз, "Компонента", Компонента);
				глККМOnLine.Компонента = Компонента;
				
				ПолучитьПараметрМодели(Поз, "ПрогИд"    , ПрогИд);
				глККМOnLine.ПрогИд     = ПрогИд;
				
				ПолучитьПараметрМодели(Поз, "Обработка" , Обработка);
				глККМOnLine.Обработка   = Обработка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	// Получаем настройку до подключения
	ПолучитьНастройку();
		
	// Сохраняем настройки
	СохранитьНастройку();
	
	// Подключаем оборудование
	ПодключитьОборудование();
	
	// Сообщаем об успешно подключенном оборудовании
	СообщитьОПодключении();
	
КонецПроцедуры // СохранитьИзменения()

//******************************************************************************
// ЗаполнитьСписокКассOffLine()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет таблицу значений ККМOffline из справочника Кассы.
//
Процедура ЗаполнитьСписокКассOffLine()
	
	РежимOffLine = Перечисление.РежимыККМ.OffLine;
	
	СпрКассы = СоздатьОбъект("Справочник.Кассы");
	СпрКассы.ВыбратьЭлементы();
	Пока СпрКассы.ПолучитьЭлемент() = 1 Цикл
	    Если СпрКассы.РежимККМ = РежимOffLine Тогда
			ТекЭлем = СпрКассы.ТекущийЭлемент();
			
			ККМOffline.НоваяСтрока();
			ККМOffline.ККМ = ТекЭлем;
			
			Поз = 0;
			Если глККМOffLine.НайтиЗначение(ТекЭлем, Поз, "ККМ") = 1 Тогда
				ККМOffline.Вкл           = 1 + глККМOffLine.ПолучитьЗначение(Поз, "Вкл");
				ККМOffline.Модель        = глККМOffLine.ПолучитьЗначение(Поз, "Модель");
				ККМOffline.КаталогОбмена = глККМOffLine.ПолучитьЗначение(Поз, "КаталогОбмена");
			Иначе
				ККМOffline.Вкл = 1;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	
	Форма.Обновить();
	
КонецПроцедуры // ЗаполнитьСписокКассOffLine()

//******************************************************************************
// ЗаполнитьСписокКассOnLine()
//
// Параметры: 
//  Нет 
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет таблицу значений ККМOnline из справочника Кассы.
//
Процедура ЗаполнитьСписокКассOnLine()
	
	РежимOnLine = Перечисление.РежимыККМ.OnLine;
	
	СпрКассы = СоздатьОбъект("Справочник.Кассы");
	СпрКассы.ВыбратьЭлементы();
	Пока СпрКассы.ПолучитьЭлемент() = 1 Цикл
	    Если СпрКассы.РежимККМ = РежимOnLine Тогда
			ТекЭлем = СпрКассы.ТекущийЭлемент();
			
			ККМOnline.НоваяСтрока();
			ККМOnline.ККМ = ТекЭлем;
			ККМOnline.Код = Прав(СокрП(ТекЭлем.ЗаводскойНомерККМ), 4);
			
			Поз = 0;
			Если глККМOnLine.НайтиЗначение(ТекЭлем, Поз, "ККМ") = 1 Тогда
				ККМOnline.Вкл           = 1 + глККМOnLine.ПолучитьЗначение(Поз, "Вкл");
				ККМOnline.Модель        = глККМOnLine.ПолучитьЗначение(Поз, "Модель");
			Иначе
				ККМOnline.Вкл = 1;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	
	Форма.Обновить();
	
КонецПроцедуры // ЗаполнитьСписокКассOnLine()

//******************************************************************************
// ИнициализироватьДиалог()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Инициализирует элементы диалога формы из настроек торгового оборудования
//
Процедура ИнициализироватьДиалог()
	Перем Вид, Модель, Поз;
	
	// заполним списки моделями
	
	Поз = ПолучитьПервуюМодель();
	Пока Поз <> 0 Цикл
		
		ПолучитьПараметрМодели(Поз, "Вид", Вид);
		
		Если НРег(Вид) = "сканер" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			СканерМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "фр" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			ФРМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "дисплей" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			ДисплейМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "терминал" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			ТерминалМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "весы" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			ВесыМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "offline" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			OfflineМодель.ДобавитьЗначение(Модель);
		ИначеЕсли НРег(Вид) = "online" Тогда
			ПолучитьПараметрМодели(Поз, "Модель", Модель);
			OnlineМодель.ДобавитьЗначение(Модель);
		КонецЕсли;
		
		Поз = ПолучитьСледующуюМодель();
	КонецЦикла;

	// сканер 
	Если СканерМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		СканерВкл = 0;
	Иначе
		СканерИспПрефикс = глСканерЕстьПрефикс;
		СканерПрефикс    = глСканерПрефикс;
		СканерВкл        = глСканерВкл;
		
		Поз = СканерМодель.НайтиЗначение(глСканерМодель);
		Если Поз > 0 Тогда
			СканерМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;

	ДоступностьПолейСканера();
	
	// фискальный регистартор
	Если ФРМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		ФРВкл = 0;
	Иначе
		ФРВкл = глФРВкл;
		ФРПарольАдминистратора = глФРПарольАдминистратора;
		ФРПарольПользователя = глФРПарольПользователя;
		
		Поз   = ФРМодель.НайтиЗначение(глФРМодель);
		Если Поз > 0 Тогда
			ФРМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;

	ДоступностьПолейФР();
	
	// дисплей покупателя
	
	Если ДисплейМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		ДисплейВкл = 0;
	Иначе
		ДисплейВкл    = глДПВкл;
		ДисплейСтрока = глДПБегСтрока;
					         
		Поз = ДисплейМодель.НайтиЗначение(глДПМодель);
		Если Поз > 0 Тогда
			ДисплейМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьПолейДисплея();
	
	// терминал сбора данных
	
	Если ТерминалМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		ТерминалВкл = 0;
	Иначе
		ТерминалВкл    = глТерминалВкл;
					         
		Поз = ТерминалМодель.НайтиЗначение(глТерминалМодель);
		Если Поз > 0 Тогда
			ТерминалМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьПолейТерминала();

	// весы
	
	Если ВесыМодель.РазмерСписка() = 0 Тогда
		// нет модели. делаем недоступными элементы управления
		ВесыВкл = 0;
	Иначе
		ВесыВкл    = глВесыВкл;
					         
		Поз = ВесыМодель.НайтиЗначение(глВесыМодель);
		Если Поз > 0 Тогда
			ВесыМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
		
	КонецЕсли;
	
	ДоступностьПолейВесов();
	
	// ККМ Off-Line
	
	ККМOffline.НоваяКолонка("Вкл"          , "Число"           , 1, , "", 3);
	ККМOffline.НоваяКолонка("ККМ"          , "Справочник.Кассы",  , , "Наименование", 15);
	ККМOffline.НоваяКолонка("Модель"       , "Строка");
	ККМOffline.НоваяКолонка("КаталогОбмена", "Строка");
	
	ККМOffline.ВыводитьПиктограммы("Вкл", 1);
	ККМOffline.ВидимостьКолонки("Модель,КаталогОбмена", 0);
	
	ЗаполнитьСписокКассOffLine();
	
	Если ККМOffline.КоличествоСтрок() > 0 Тогда
		ТекСтр = ККМOffline.ТекущаяСТрока();
		
		Если ТекСтр = 0 Тогда
			ТекСтр = 1;
		КонецЕсли;
		
		Поз    = OfflineМодель.НайтиЗначение(ККМOffline.ПолучитьЗначение(ТекСтр, "Модель"));
		Если Поз > 0 Тогда
			OfflineМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;
	
	ДоступностьПолейOffline();
	
	// ККМ On-Line
	
	ККМOnline.НоваяКолонка("Вкл"          , "Число"           , 1, , "", 3);
	ККМOnline.НоваяКолонка("ККМ"          , "Справочник.Кассы",  , , "Наименование", 15);
	ККМOnline.НоваяКолонка("Код"          , "Строка");
	ККМOnline.НоваяКолонка("Модель"       , "Строка");
	
	ККМOnline.ВыводитьПиктограммы("Вкл", 1);
	ККМOnline.ВидимостьКолонки("Модель, Код", 0);
	
	ЗаполнитьСписокКассOnLine();
	
	Если ККМOnline.КоличествоСтрок() > 0 Тогда
		ТекСтр = ККМOnline.ТекущаяСТрока();
		
		Если ТекСтр = 0 Тогда
			ТекСтр = 1;
		КонецЕсли;
		
		Поз    = OnlineМодель.НайтиЗначение(ККМOnline.ПолучитьЗначение(ТекСтр, "Модель"));
		Если Поз > 0 Тогда
			OnlineМодель.ТекущаяСтрока(Поз);
		КонецЕсли;
	КонецЕсли;
	
	ДоступностьПолейOnline();
	
КонецПроцедуры // ИнициализироватьДиалог()

// работа с таблицами настройки ККМ

//******************************************************************************
// ПриКликеНаСпискеККМ(Вид, СписККМ)
//
// Параметры:
//  Вид     - строка. Может принимать значения "OffLine", "OnLine".
//  СписККМ - таблица значений, на которой кликнули
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Устанавливает флаг включения или снимает его
//
Процедура ПриКликеНаСпискеККМ(Вид, СписККМ)
	
	ТекСтр = СписККМ.ТекущаяСтрока();
	Если ТекСтр <> 0 Тогда
	    Вкл = СписККМ.ПолучитьЗначение(ТекСтр, "Вкл");
		Вкл = ?(Вкл = 1, 2, 1);
		СписККМ.УстановитьЗначение(ТекСтр, "Вкл", Вкл);
		
		Если Вид = "OffLine" Тогда
			ДоступностьПолейOffline();
		ИначеЕсли  Вид = "OnLine" Тогда	
			ДоступностьПолейOnline();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриКликеНаСпискеККМ()

//******************************************************************************
// ПриВыбореДругойККМOffLine(СписККМ, СписНастроекККМ, ПредСтр)
//
// Параметры:
//  СписККМ         - таблица значений, содержащая список ККМ
//  СписНастроекККМ - таблица значений с настройкой ККМ, которая отображает
//                    в текущей строке таблицы СписККМ.
//  ПредСтр         - предыдущая текущая строка в таблицы СписККМ.
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Заполняет поля формы, связанных с ККМ Off-Line, при выборе другой кассы в
//  таблице ККМOffline
//
Функция ПриВыбореДругойККМOffLine(СписККМ, ПредСтр, СписМоделей, КаталогОбмена)
	
	Если ОбновлениеСпискаКассOffLine = 0 Тогда
		ТекСтр = СписККМ.ТекущаяСтрока();
		Если ТекСтр <> 0 Тогда
			// есть выбранная строка
			Если ПредСтр <> ТекСтр Тогда
				// выбрана другая
				Если (ПредСтр > 0) И (ПредСтр <= СписККМ.КоличествоСтрок()) Тогда
					// предыдущая строка была и ее номер не больше количества строк 
					// (количество строк может быть меньше после редактирования справочника касс)
					// сохраним настройки предыдущей ККМ
					СписККМ.ПолучитьСтрокуПоНомеру(ПредСтр);
					
					Если СписМоделей.РазмерСписка() > 0 Тогда
					    СписККМ.Модель = СписМоделей.ПолучитьЗначение(OfflineМодель.ТекущаяСтрока());
					КонецЕсли;
					
					СписККМ.КаталогОбмена = КаталогОбмена;
				КонецЕсли;
				
				// заполним таблицу из настройками
				СписККМ.ПолучитьСтрокуПоНомеру(ТекСтр);
				
				Поз = СписМоделей.НайтиЗначение(СписККМ.Модель);
				Если Поз <> 0 Тогда
				    СписМоделей.ТекущаяСтрока(Поз);
				КонецЕсли;
				
				КаталогОбмена = СписККМ.КаталогОбмена;
				ДоступностьПолейOffline();
			КонецЕсли;
		КонецЕсли;
		
		ПредСтр = ТекСтр;
	КонецЕсли;
	
	Возврат "";
КонецФункции // ПриВыбореДругойККМOffLine()

//******************************************************************************
// ПриВыбореДругойККМOnLine(СписККМ, ПредСтр, СписМоделей)
//
// Параметры:
//  СписККМ         - таблица значений, содержащая список ККМ
//  ПредСтр         - предыдущая текущая строка в таблицы СписККМ.
//  СписМоделей     - таблица значений с настройкой ККМ, которая отображает
//                    в текущей строке таблицы СписККМ.
//
// Возвращаемое значение:
//  Нет
//  
// Описание:
//  Заполняет поля формы, связанных с ККМ On-Line, при выборе другой кассы в
//  таблице ККМOnline
//
Функция ПриВыбореДругойККМOnLine(СписККМ, ПредСтр, СписМоделей)
	
	Если ОбновлениеСпискаКассOnLine = 0 Тогда
		ТекСтр = СписККМ.ТекущаяСтрока();
		Если ТекСтр <> 0 Тогда
			// есть выбранная строка
			Если ПредСтр <> ТекСтр Тогда
				// выбрана другая
				Если (ПредСтр > 0) И (ПредСтр <= СписККМ.КоличествоСтрок()) Тогда
					// предыдущая строка была и ее номер не больше количества строк 
					// (количество строк может быть меньше после редактирования справочника касс)
					// сохраним настройки предыдущей ККМ
					СписККМ.ПолучитьСтрокуПоНомеру(ПредСтр);
					
					Если СписМоделей.РазмерСписка() > 0 Тогда
					    СписККМ.Модель = СписМоделей.ПолучитьЗначение(OnLineМодель.ТекущаяСтрока());
					КонецЕсли;
				КонецЕсли;
				
				// заполним таблицу из настройками
				СписККМ.ПолучитьСтрокуПоНомеру(ТекСтр);
				
				Поз = СписМоделей.НайтиЗначение(СписККМ.Модель);
				Если Поз <> 0 Тогда
				    СписМоделей.ТекущаяСтрока(Поз);
				КонецЕсли;
				
				ДоступностьПолейOnLine();
			КонецЕсли;
		КонецЕсли;
		
		ПредСтр = ТекСтр;
	КонецЕсли;
	
	Возврат "";
КонецФункции // ПриВыбореДругойККМOnLine()

//******************************************************************************
// СформироватьСписокОбработок(СписокОбработок)
//
// Параметры: 
//  СписокОбработок
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует список значений, состоящий из названий файлов обработок
//  для работы с торговым оборудованием
//
Функция СформироватьСписокОбработок(СписОбработок)
	
	// уберем слэш 
	Кат = Лев(глКаталогОписаний, СтрДлина(глКаталогОписаний) - 1);
	
	Если ФС.СуществуетФайл(Кат) = 0 Тогда
		ОшибкаОписание = "Отсутствуют каталог " + Кат;
		Рез = 0;
	Иначе
		СписОбработок = СоздатьОбъект("СписокЗначений");
		ТекКат        = ФС.ТекКаталог();
		
		ФС.УстТекКаталог(глКаталогОписаний);
		Имяфайла = ФС.НайтиПервыйФайл("*.ert");
		
		Пока ПустоеЗначение(ИмяФайла) = 0 Цикл
			СписОбработок.ДобавитьЗначение(Имяфайла);
			Имяфайла = ФС.НайтиСледующийФайл();
		КонецЦикла;
		
		Если СписОбработок.РазмерСписка() = 0 Тогда
			ОшибкаОписание = "В каталоге описаний отсутствуют обработки обслуживания";
			Рез = 0;
		Иначе
			Рез = 1;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Рез;
	
КонецФункции // СформироватьСписокОбработок()

//******************************************************************************
// ДобавитьОписаниеМодели(Вид, СписокМоделей)
//
// Параметры: 
//  Вид - вид модели
//  СписокМоделей - поле со списком в форме
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает форму обработки для ввода информации о новой модели
//
Процедура ДобавитьОписаниеМодели(Вид, СписокМоделей)
	Перем Парам, СписОбработок;
	     
	
	Если СформироватьСписокОбработок(СписОбработок) = 0 Тогда
	    Предупреждение(ОшибкаОписание + ". Добавить новое описание модели невозможно!", 60);
	Иначе
		Парам = СоздатьОбъект("СписокЗначений");
		
		Парам.Установить("Вид"       , Вид);
		Парам.Установить("Модель"    , "");
		Парам.Установить("Компонента", "");
		Парам.Установить("ПрогИд"    , "");
		Парам.Установить("Обработка" , "");
		Парам.Установить("СписокОбработок" , СписОбработок);
		
		ОткрытьФормуМодально("Обработка.ТорговоеОборудованиеПараметрыМодели", Парам);
		
		Если Парам.Получить("Изменено") = 1 Тогда
		    Обработка = Парам.Получить("Обработка");
			
			Если ПустоеЗначение(Обработка) = 1 Тогда
				ФайлОписаний = "std_" + Вид + ".efd";
			Иначе
				ФайлОписаний = Лев(Обработка, Найти(Обработка, ".")) + "efd";
			КонецЕсли;
			
			Поз = ДобавитьМодель(Вид, 
			               Парам.Получить("Модель"),
						   Парам.Получить("Компонента"),
						   Парам.Получить("ПрогИд"),
						   Обработка,
						   ФайлОписаний);
						   
			СохранитьМодельВфайл(Поз, ФайлОписаний);
			СписокМоделей.ДобавитьЗначение(Парам.Получить("Модель"));
			СписокМоделей.ТекущаяСтрока(СписокМоделей.РазмерСписка());
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОписаниеМодели()

//******************************************************************************
// РедактироватьОписаниеМодели(СписокМоделей)
//
// Параметры: 
//  СписокМоделей
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает форму обработки для редактирования информации о текущей модели
//  в списке СписокМоделей
//
Функция РедактироватьОписаниеМодели(Вид, СписокМоделей)
	Перем ПарамМодели, СписОбработок;
	
	Если СписокМоделей.РазмерСписка() = 0 Тогда
		Предупреждение("Не выбрана модель", 60);
	Иначе
		Если СформироватьСписокОбработок(СписОбработок) = 0 Тогда
		    Предупреждение(ОшибкаОписание + ". Редактировать описание модели невозможно!", 60);
		Иначе
			ТекСтрока = СписокМоделей.ТекущаяСтрока();
			Модель    = СписокМоделей.ПолучитьЗначение(ТекСтрока);
			
			// найдем модель в списке моделей
			Поз = НайтиМодель(Модель);
			Если Поз > 0 Тогда
				Парам = СоздатьОбъект("СписокЗначений");
				
				Парам.Установить("Вид"       , Вид);
				Парам.Установить("Модель"    , Модель);
				
				ПолучитьПараметрМодели(Поз, "Компонента", ПарамМодели);
				Парам.Установить("Компонента", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "ПрогИд", ПарамМодели);
				Парам.Установить("ПрогИд", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "Обработка", ПарамМодели);
				Парам.Установить("Обработка", ПарамМодели);
				
				ПолучитьПараметрМодели(Поз, "Компонента", ПарамМодели);
				Парам.Установить("СписокОбработок", СписОбработок);
				
				ОткрытьФормуМодально("Обработка.ТорговоеОборудованиеПараметрыМодели", Парам);
				
				Если Парам.Получить("Изменено") = 1 Тогда
				    Обработка    = Парам.Получить("Обработка");
					ФайлОписаний = Лев(Обработка, Найти(Обработка, ".")) + "efd";
					
					// удаляем модель
					УдалитьМодель(Поз);
					// добавляем ее с новыми значениями параметров
					НовПоз = ДобавитьМодель(Вид, 
					               Парам.Получить("Модель"),
								   Парам.Получить("Компонента"),
								   Парам.Получить("ПрогИд"),
								   Обработка,
								   ФайлОписаний);
								   
					СохранитьМодельВфайл(НовПоз, ФайлОписаний);
				КонецЕсли;
				
				СписокМоделей.УстановитьЗначение(ТекСтрока, Парам.Получить("Модель"));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // РедактироватьОписаниеМодели()

//******************************************************************************
// ОбновитьСписокКассOffLine()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  кнопка "Обновить" (слой ККМOffline)
//
// Описание:
//  Перезаполняет списки ККМOffline из справочника Кассы
//
Процедура ОбновитьСписокКассOffLine()
	
	ОбновлениеСпискаКассOffLine = 1;
	ККМOffline.УдалитьСтроки();
	ТекСтрокаOffLine     = 0;
	ЗаполнитьСписокКассOffLine();
	ОбновлениеСпискаКассOffLine = 0;
	
КонецПроцедуры // ОбновитьСписокКассOffLine()

//******************************************************************************
// ОбновитьСписокКассOnLine()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  кнопка "Обновить" (слой ККМOnline)
//
// Описание:
//  Перезаполняет списки ККМOnline из справочника Кассы
//
Процедура ОбновитьСписокКассOnLine()
	
	ОбновлениеСпискаКассOnLine = 1;
	ККМOnLine.УдалитьСтроки();
	ТекСтрокаOnLine     = 0;
	ЗаполнитьСписокКассOnLine();
	ОбновлениеСпискаКассOnLine = 0;
	
КонецПроцедуры // ОбновитьСписокКассOnLine()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии()
	
	Если ПустоеЗначение(Форма.Параметр) = 0 Тогда
		СтатусВозврата(0);
		
		// только если удалось загрузить модели
		Если НРег(Форма.Параметр) = "подключить" Тогда
			// начало работы
			ИнициализацияНастройки();
			
			Если ЗагрузитьВсеМодели() = 1 Тогда
				Если ЗагрузитьНастройку() = 1 Тогда
					ПодключитьОборудование();
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НРег(Форма.Параметр) = "отключить" Тогда
			// завершение работы
			ОтключитьОборудование();
		КонецЕсли;
	Иначе
		Если ЗагрузитьВсеМодели() = 0 Тогда
			Сообщить(ОшибкаОписание, "!");
		Конецесли;
		
		ИнициализироватьДиалог();
			
		Форма.ИспользоватьЗакладки(1);
		Форма.Закладки.ДобавитьЗначение("Сведения"  , "Сведения");
		Форма.Закладки.ДобавитьЗначение("Сканер"    , "Сканер штрих-кода");
		Форма.Закладки.ДобавитьЗначение("ФР"        , "Фискальный регистратор");
		Форма.Закладки.ДобавитьЗначение("Терминал"  , "Терминал сбора данных");
		Форма.Закладки.ДобавитьЗначение("Дисплей"   , "Дисплей покупателя");
		Форма.Закладки.ДобавитьЗначение("Весы"      , "Электронные весы");
		Форма.Закладки.ДобавитьЗначение("ККМOffline", "ККМ Off-Line");
		Форма.Закладки.ДобавитьЗначение("ККМOnline" , "ККМ On-Line");
			
		Форма.ИспользоватьСлой("Заголовок,Кнопки,Сведения", 2);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	Форма.ИспользоватьСлой("Заголовок,Кнопки," + ЗначениеЗакладки, 2);
КонецПроцедуры // ПриВыбреЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем ИмяКаталога;
	
	Если ИдентЭлемДиалога = "OfflineКаталогОбмена" Тогда
	    СтатусВозврата(0);
		Если ФС.ВыбратьКаталог(ИмяКаталога, "Выбор каталога обмена данными", 60) = 1 Тогда
			OfflineКаталогОбмена = ИмяКаталога;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

ОшибкаОписание        = "";
ИменаПараметровМодели = "Вид,Модель,Компонента,ПрогИд,Обработка";

Модели = СоздатьОбъект("ТаблицаЗначений");
Модели.НоваяКолонка("Вид");
Модели.НоваяКолонка("Модель");
Модели.НоваяКолонка("Компонента");
Модели.НоваяКолонка("ПрогИд");
Модели.НоваяКолонка("Обработка");
Модели.НоваяКолонка("ФайлОписаний");

ИмяФайлаНастройки    = ФС.WindowsКаталог() + "\1cRozn.txt";
СтрокВнастройке      = 4;
ТекСтрокаOffLine     = 0;
ТекСтрокаOnLine      = 0;
ОбновлениеСпискаКассOffLine = 0;
ОбновлениеСпискаКассOnLine = 0;

// Для оповещения о успешно подключенном оборудовании
ТаблицаТОДоПодключения = СоздатьОбъект("ТаблицаЗначений");
ТаблицаТОДоПодключения.НоваяКолонка("ТОНаименование");
ТаблицаТОДоПодключения.НоваяКолонка("ТОВключено");
ТаблицаТОДоПодключения.НоваяКолонка("ТОМодель");
ТаблицаТОДоПодключения.НоваяКолонка("ТОПоследняяБуква");
ТаблицаТОПослеПодключения = СоздатьОбъект("ТаблицаЗначений");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОНаименование");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОВключено");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОМодель");
ТаблицаТОПослеПодключения.НоваяКолонка("ТОПоследняяБуква");
