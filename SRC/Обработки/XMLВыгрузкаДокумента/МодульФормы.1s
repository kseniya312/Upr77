////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем	ТабОпераций;			//	Таблица значений с соответствиями хоз.операций видам документов

Перем	Док;					//	Контекст выгружаемого документа
Перем	ВидТекущегоДокумента;	//	Вид выгружаемого документа

Перем	ТекущаяХозОперация;		//	Хоз. операция, соответствующая выгружаемому документу

Перем	Пометка_Выключена;		//	Номер пиктограммы
Перем	Пометка_Включена;		//	Номер пиктограммы


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//
//******************************************************************************
// ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
//
// Параметры:
//  Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата
//
// Возвращаемое значение:
//  Значение колонки найденной строки
//
// Описание:
//  Ищет строку по значению в колонке поиска и возвращает значение другой колонки в найденной строке
//
Функция ПолучитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиВозврата)
                             
	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат "";
	Иначе
		Возврат Таб.ПолучитьЗначение(НомСтр, ИдКолонкиВозврата);
	КонецЕсли;
	
КонецФункции		//	ПолучитьЗначениеКолонки()

//******************************************************************************
// УстановитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки)
//
// Параметры:
//  Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//	Ищет строку по значению в колонке поиска и устанавливает значение другой колонки в найденной строке
//
Процедура УстановитьЗначениеКолонки(Таб, ИдКолонкиПоиска, ЗнПоиска, ИдКолонкиУстановки, ЗнУстановки)
                             
	НомСтр = "";
	Если Таб.НайтиЗначение(ЗнПоиска, НомСтр, ИдКолонкиПоиска) = 0 Тогда
		Возврат;
	Иначе
		Таб.УстановитьЗначение(НомСтр, ИдКолонкиУстановки, ЗнУстановки);
	КонецЕсли;
	
КонецПроцедуры		//	УстановитьЗначениеКолонки()

//******************************************************************************
// ПризнакДокумента()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Строка - " (возврат)", если документ возвратный и " (комиссия)", если документ комиссионный
//
// Описание:
//  Проверяет код операции документа и возвращает признак (см. возвр. значение)
//
Функция ПризнакДокумента()
	
	Если		(ВидТекущегоДокумента = "СтрокаВыпискиРасход") Или (ВидТекущегоДокумента = "РКО") Тогда
		
        Если Док.КодОперации = глКО.ВозвратОплатыПокупателю Тогда
        	Возврат " (возврат)";
		КонецЕсли;
		
	ИначеЕсли	ВидТекущегоДокумента = "Реализация"	Тогда

        Если Док.КодОперации = глКО.ПередачаНаРеализацию Тогда
        	Возврат " (комиссия)";
		КонецЕсли;
		
	ИначеЕсли	ВидТекущегоДокумента = "ВозвратПоставщику"	Тогда
		
        Если Док.КодОперации = глКО.ВозвратКомитенту Тогда
        	Возврат " (комиссия)";
		КонецЕсли;
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции		//	ПризнакДокумента()

//******************************************************************************
// ВыборФайла()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ВыборФайла()
	
	Каталог = "";
	Если ФС.ВыбратьФайл(1, ФормИмяФайла , Каталог, "Выберите файл","*.xml|*.xml",,) = 1 Тогда
	    ФормИмяФайла = Каталог + ФормИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//******************************************************************************
// ОткрытьФайл() 
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ОткрытьФайл() 
	
	Если ФС.СуществуетФайл(ФормИмяФайла)=1 Тогда
		ЗапуститьПриложение(ФормИмяФайла);
	Иначе
		Предупреждение("Указанный файл не существует!", 5);
	КонецЕсли;
	
КонецПроцедуры		//	ОткрытьФайл() 

//********************************************************************************
// ОтправитьПисьмо(Адрес, Заголовок="", Файл="", Текст="")
// Параметры:
//	Адрес		- строка - адрес эл. почты
//					или элемент справочника	у которого есть строковый реквизит "ЭлПочта"
//					или список значений адресов
//	Заголовок	- заголовок письма (тема)
//	Текст		- текст письма
//	Файл		- полное имя прикрепляемого файла или список значений имен файлов
// Возвращаемое значение:
//	1 - в случае удачного отправления,
//	0 - в случае сбоя
// Описание:
//	Отправляет письмо по указанным адресам
//
Функция ОтправитьПисьмо(Адрес, Заголовок="", Файл="", Текст="") Экспорт
	
	Попытка
		Почта = СоздатьОбъект("AddIn.V7Mail");
	Исключение 
		Предупреждение("Не удалось создать объект Addin.V7Mail!");
		Возврат 0;
	КонецПопытки;
	
	Если ТипЗначенияСтр(Адрес) = "Справочник" Тогда
		Адрес = СокрЛП(Адрес.ЭлПочта);
		Если ПустоеЗначение(Адрес) = 1 Тогда
			Предупреждение("Не задан адрес получателя!");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипЗначенияСтр(Файл) <> "СписокЗначений") И (ПустоеЗначение(Файл) = 0) Тогда
		Если Фс.СуществуетФайл(СокрЛП(Файл)) = 0 Тогда
			Предупреждение("Файл не существует - " + СокрЛП(Файл));
			Возврат 0;
		КонецЕсли; 
	КонецЕсли;
	
	Попытка
		Почта.Подключиться();
		Почта.НовоеСообщение();
		        
		ФлАдресЗадан = 0;
		Если ТипЗначенияСтр(Адрес) = "СписокЗначений" Тогда
			Для СчАдресов = 1 По Адрес.РазмерСписка() Цикл
			    СтрАдрес = Адрес.ПолучитьЗначение(СчАдресов);
				СтрАдрес = ?(Лев(СтрАдрес, 5)="SMTP:", СтрАдрес, "SMTP:" + СтрАдрес);
				Почта.ДобавитьАдрес(СтрАдрес);
				ФлАдресЗадан = 1;
			КонецЦикла;
		ИначеЕсли ПустоеЗначение(Адрес) = 0 Тогда
			СтрАдрес = ?(Лев(Адрес, 5)="SMTP:", Адрес, "SMTP:" + Адрес);
			Почта.ДобавитьАдрес(СтрАдрес);
			ФлАдресЗадан = 1;
		КонецЕсли;
		
		Если ФлАдресЗадан = 0 Тогда
			Предупреждение("Не задан адрес получателя!");
			Возврат 0;
		КонецЕсли;
		
		Если ТипЗначенияСтр(Файл) = "СписокЗначений" Тогда
			Для СчФайлов = 1 По Файл.РазмерСписка() Цикл
			    СтрФайл = СокрЛП(Файл.ПолучитьЗначение(СчФайлов));
				Если Фс.СуществуетФайл(СтрФайл) = 0 Тогда
					Предупреждение("Файл не существует - " + СокрЛП(СтрФайл));
					Возврат 0;
				КонецЕсли;
				Почта.ДобавитьФайл(СтрФайл);
			КонецЦикла;
		ИначеЕсли ПустоеЗначение(Файл) = 0 Тогда
				Почта.ДобавитьФайл(СокрЛП(Файл))
		КонецЕсли;
		
		Почта.Заголовок		= Заголовок;
		Почта.Текст			= Текст;
		Почта.Послать();
		Почта.Отключиться();
		
	Исключение
		Предупреждение("Неудачная попытка! Отправка письма по эл. почте не произведена!");
		Возврат 0;
	КонецПопытки;
	
	Возврат 1;
	
КонецФункции		//	глОтправитьПисьмо()

//******************************************************************************
// Выполнить()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполнет выгрузку документа
//
Процедура Выполнить()
	
	Если ФормКаталог.Выбран() = 0 Тогда
		Предупреждение("Не выбран каталог!");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Док.Фирма.Идентификатор) = 1	Тогда Предупреждение("У фирмы не заполнен идентификатор!"); Возврат; КонецЕсли;
	
	Клиент = Док.Контрагент;
	
	Если ПустоеЗначение(Клиент) = 1 									Тогда	Предупреждение("Не выбран контрагент!"); 					Возврат; КонецЕсли;
	Если ПустоеЗначение(Клиент.Идентификатор) = 1						Тогда	Предупреждение("У клиента не заполнен идентификатор!");	Возврат; КонецЕсли;
	Если ПустоеЗначение(ФормКаталог.ВладелецКаталога.Идентификатор) = 1 Тогда 	Предупреждение("У фирмы не заполнен идентификатор!");	Возврат; КонецЕсли;
	                             
	Заголовок		=	ТекущаяХозОперация + "_" + СокрЛП(Док.НомерДок);
	
	ЗаголовокПисьма	=	СокрЛП(Док.Комментарий) + " -/- " + ТекущаяХозОперация + " -/- " + СокрЛП(Док.НомерДок);
	
	Если ПустоеЗначение(ФормИмяФайла) = 1 Тогда
		ФормИмяФайла = КаталогИБ() + Заголовок + ".xml";
	КонецЕсли;

	СписПараметров = СоздатьОбъект("СписокЗначений");
	СписПараметров.ДобавитьЗначение(ФормИмяФайла,			"ПолноеИмяФайла");
	СписПараметров.ДобавитьЗначение(Док.ТекущийДокумент(),	"Документ");
	СписПараметров.ДобавитьЗначение(ФормКаталог, 			"Каталог");
	СписПараметров.ДобавитьЗначение(ФормВыгружатьКаталог,	"ФлВыгружатьКаталог");
	
	ОткрытьФормуМодально("Обработка.XMLВыгрузкаДокументовПоСхеме", СписПараметров);
	                
	Если ФС.СуществуетФайл(ФормИмяФайла) = 0 Тогда Предупреждение("Файл не создан!"); Возврат; КонецЕсли;

	Если ФормВидВыгрузки.ПолучитьЗначение(ФормВидВыгрузки.ТекущаяСтрока()) = "ПоПочте" Тогда
		
		Если ОтправитьПисьмо(Клиент, ЗаголовокПисьма, ФормИмяФайла) = 0 Тогда
			Фс.УдалитьФайл(ФормИмяФайла);
			Возврат;
		КонецЕсли;
		
		Фс.УдалитьФайл(ФормИмяФайла);
		
		Предупреждение("Документ отправлен!");
		Форма.Закрыть();
	Иначе
		Предупреждение("Выгрузка завершена!");
	КонецЕсли;
		
КонецПроцедуры		//	Выполнить()
            
//******************************************************************************
// ДобавитьЗакладки()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  
//
Процедура ДобавитьЗакладки()
	
	Если Найти("РКО, СтрокаВыпискиРасход", ВидТекущегоДокумента) = 0 Тогда
		Форма.ИспользоватьЗакладки(1);
		
		Форма.Закладки.УдалитьВсе();
		Форма.Закладки.ДобавитьЗначение("Основная",		"Выгрузка");
		Форма.Закладки.ДобавитьЗначение("Настройки", 	"Настройки");    
	КонецЕсли;
	
КонецПроцедуры		//	ДобавитьЗакладки()

//******************************************************************************
// ДобавитьОперацию(ХозОперация, ВидДокумента, Представление)
//
// Параметры:
//  ХозОперация, ВидДокумента, Представление
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет описание операции в таблицу
//
Процедура ДобавитьОперацию(ХозОперация, ВидДокумента, Представление)
	
	ТабОпераций.НоваяСтрока();	
	ТабОпераций.Пометка		= Пометка_Выключена;
	ТабОпераций.ВидДокумента	= ВидДокумента;
	ТабОпераций.ХозОперация	= ХозОперация;
	ТабОпераций.Представление	= Представление;	
	
КонецПроцедуры		//	ДобавитьОперацию()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура.
//                                                                                                    
Процедура ПриВыбореЗакладки(Ном, ИмяЗакладки)
	
	Если ИмяЗакладки = "Основная" Тогда
		
		Форма.ИспользоватьСлой("Основной, Выгрузка", 2);
		
	ИначеЕсли ИмяЗакладки = "Настройки" Тогда
		
		Форма.ИспользоватьСлой("Основной, Настройки", 2);
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//                                                                                                    
Процедура ПриОткрытии()

	
	Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "v7plus.dll") <> 1 Тогда
		Если ЗагрузитьВнешнююКомпоненту(КаталогИБ() + "ExtForms\" + "v7plus.dll") <> 1 Тогда		
			Если ЗагрузитьВнешнююКомпоненту(КаталогПрограммы() + "v7plus.dll") <> 1 Тогда
				Предупреждение("Компонента v7plus.dll не найдена!");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;    
	
	Док = Форма.Параметр;	
	
	Если ПустоеЗначение(Док) = 1 Тогда
		Предупреждение("Эта служебная обработка не может использоваться самостоятельно!");
		СтатусВозврата(0);
		Возврат;
	Иначе
	    Если		ТипЗначенияСтр(Док) = "Документ" Тогда
			
	    	Форма.Заголовок("  Выгрузка документа:   " + Док.ПредставлениеВида() + "  № " + СокрЛП(Док.НомерДок));
			
			ВидТекущегоДокумента		= Док.Вид();
			ТекущаяХозОперация	= ПолучитьЗначениеКолонки(ТабОпераций, "ВидДокумента", СокрЛП(ВидТекущегоДокумента) + ПризнакДокумента(), "ХозОперация");
			
			ФормИмяФайла = КаталогИБ() + ТекущаяХозОперация + "_" + СокрЛП(Док.НомерДок) + ".xml";
			
	    ИначеЕсли	ТипЗначенияСтр(Док) = "СписокЗначений" Тогда
	                          
			Форма.Заголовок("Групповая выгрузка документов");
			
	    КонецЕсли;
	КонецЕсли;
    
	ДобавитьЗакладки();
              
	Форма.ИспользоватьСлой("Основной, Выгрузка", 2);
	
	
КонецПроцедуры		//	ПриОткрытии()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

Пометка_Выключена	= 15; 
Пометка_Включена	= 16; 

ТабОпераций = СоздатьОбъект("ТаблицаЗначений");
ТабОпераций.НоваяКолонка("Пометка", 		"Число", 4, 0,			"", 3);
ТабОпераций.НоваяКолонка("Представление", , , ,					"Операция", 20);
ТабОпераций.НоваяКолонка("ВидДокумента", , , ,						"", 4);
ТабОпераций.НоваяКолонка("ХозОперация", , , ,						"", 4);

ТабОпераций.ВыводитьПиктограммы("Пометка");

ДобавитьОперацию("Order",			"ЗаказПоставщику",					"Заказ товара");
ДобавитьОперацию("PayableBill",		"ЗаявкаПокупателя",					"Счет на оплату");

ДобавитьОперацию("Sale",			"Реализация",						"Отпуск товара");
ДобавитьОперацию("Comission",		"Реализация (комиссия)",			"Передача товара на реализацию");

ДобавитьОперацию("ReportComission",	"ОтчетКомитенту",					"Отчет комитенту");
//ДобавитьОперацию("ReportComission",	"ОтчетКомиссионера",				"Передача товара на реализацию");

ДобавитьОперацию("BackSale",		"ВозвратПоставщику",				"Возврат товара поставщику");
ДобавитьОперацию("BackComission",	"ВозвратПоставщику (комиссия)",		"Возврат товара комитенту");

ДобавитьОперацию("Invoice",			"СчетФактураВыданный",				"Счет-Фактура");

ДобавитьОперацию("Cash",			"РКО",								"Выплата наличных денег поставщику");
ДобавитьОперацию("BackCash",		"РКО (возврат)",					"Возврат наличных денег покупателю");

ДобавитьОперацию("Payment",			"СтрокаВыпискиРасход",				"Выплата безналичных денег поставщику");
ДобавитьОперацию("BackPayment",		"СтрокаВыпискиРасход (возврат)",	"Возврат безналичных денег покупателю");

//******************************************************************************
            
ФормИмяФайла			=	"";
ФормВыгружатьКаталог	=	1;

СпрКаталоги = СоздатьОбъект("Справочник.Каталоги");
СпрКаталоги.ПорядокКодов();
СпрКаталоги.ВыбратьЭлементы();
Пока СпрКаталоги.ПолучитьЭлемент() = 1 Цикл
	Если СпрКаталоги.ЭтоГруппа() = 1 Тогда Продолжить КонецЕсли;
	ФормКаталог = СпрКаталоги.ТекущийЭлемент();
	Прервать;
КонецЦикла;

ФормФормат.ДобавитьЗначение("CommerceML");
ФормФормат.ДобавитьЗначение("Текстовый");

ФормВидВыгрузки.ДобавитьЗначение("ВФайл",			"Выгрузить в файл");
ФормВидВыгрузки.ДобавитьЗначение("ПоПочте",			"Отправить клиенту по электронной почте");
//ФормВидВыгрузки.ДобавитьЗначение("ПоПротоколу",	"Отправить клиенту по HTTP - протоколу");

//******************************************************************************

