Перем	гПутьОбъекта_ДаннаяОбработка;
Перем	гПутьОбъекта_ПравилаКонвертации;

//--------------------------------------------------------------------------------------------------

Перем	гСтрПуть;
Перем	гИмяФайла;

Перем	гСчетчикВыгруженныхОбъектов;

Перем	СписокСписковВыгруженныхОбъектов;

Перем	ТабВыгруженныхОбъектов;


Перем	гСписокПараметров;

Перем	гXMLАнализатор;
Перем	гФайлДанных;
Перем	гПравила;

Перем	гПутьОбъекта_ИсполняемыйКод;

Перем	гТабОбъектов;	//	таблица интерактивно заданных объектов выгрузки

Перем	гТабКэшПравил;
Перем	гТабКэшРеквизитов;
Перем	гТабКэшРеквизитовЗначений;
Перем	гТабКэшПараметровЗагрузки;


////////////////////////////////////////////////////////////////////////////////////////////////////
//	Переменные переданные из интерфейсной формы

Перем	ФормКолвоБуферизуемыхОбъектов;

Перем	ФормФлЗапоминатьСсылки;


//**************************************************************************************************
//----	Начало предварительного описания функций	------------------------------------------------
//**************************************************************************************************

Функция	ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")		Далее
Функция	Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")	Далее
Функция	ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")									Далее
Функция	УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")											Далее
Функция	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")									Далее
Функция ПолучитьЗначениеМетодом(Источник, Метод)																Далее
Функция ДобавитьРеквизит(Таб, Источник, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")	Далее

Процедура НачальнаяИнициализация()			Далее

//**************************************************************************************************
//----	Конец предварительного описания функций	----------------------------------------------------
//**************************************************************************************************



//**************************************************************************************************
//----	Начало процедур и функций для выгрузки проводок
//**************************************************************************************************

Процедура ОткрытьФайлДляПросмотра(ИмяФайла)
	
	Если ФС.СуществуетФайл(ИмяФайла) = 1 Тогда 
		ЗапуститьПриложение(ИмяФайла);
	Иначе 
		Предупреждение("Файл с таким именем не существует!");					
	КонецЕсли;    
	
КонецПроцедуры		//	ОткрытьФайлДляПросмотра()

//--------------------------------------------------------------------------------------------------

Процедура ВыборФайла(ИмяФайла, Фильтр="xml")
	
	Каталог = "";
	Стр = "Файл настройки (*." + Фильтр + ")|*." + Фильтр + "";

	Если ФС.ВыбратьФайл(0, ИмяФайла, Каталог, "Выберите файл", Стр, , ) = 1 Тогда
	    ИмяФайла = Каталог + ИмяФайла;
	КонецЕсли;
	
КонецПроцедуры		//	ВыборФайла()

//--------------------------------------------------------------------------------------------------

Процедура ПриНачалеВыбораЗначения(ИдЭлементаДиалога, Фл)
    
	Если	ИдЭлементаДиалога = "ФормИмяФайлаДанных"	Тогда
	         
		ВыборФайла(ФормИмяФайлаДанных, "xml");
		
	КонецЕсли;
	
КонецПроцедуры		//	ПриНачалеВыбораЗначения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция КаталогРодитель(Знач Стр)
	                            
	Если ПустоеЗначение(Стр) = 1 Тогда Возврат("") КонецЕсли;
	
	Стр	=	СокрЛП(Стр);
	
	Если Прав(Стр, 1) = "\" Тогда
		Стр = Лев(Стр, СтрДлина(Стр)-1);
	КонецЕсли;
	
	Если Найти(Стр, "\") > 0 Тогда
		Пока 1=1 Цикл
			Если Прав(Стр, 1) = "\" Тогда Прервать КонецЕсли;
			Стр = Лев(Стр, СтрДлина(Стр)-1);
		КонецЦикла;
	КонецЕсли;

	Возврат(Стр);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция НайтиПервыйСуществующийФайл(СписокВозможныхМест)
	
	Для Сч = 1 По СписокВозможныхМест.РазмерСписка() Цикл
		ПолноеИмя	=	СписокВозможныхМест.ПолучитьЗначение(Сч);
		Если Фс.СуществуетФайл(ПолноеИмя) = 1 Тогда	Возврат(ПолноеИмя)	КонецЕсли;
	КонецЦикла;

	Возврат("");

КонецФункции		//	НайтиПервыйСуществующийФайл()

//--------------------------------------------------------------------------------------------------

Функция ЗагрузитьПравилаКонвертации()
	                                        
	Состояние("Выполняется загрузка правил конвертации...");
	
	гПравила		=	гXMLАнализатор.СоздатьДокумент();
	
	Попытка
		гПравила.Загрузить(гПутьОбъекта_ПравилаКонвертации);
		гПравила.Проверить();
	Исключение
		Предупреждение(ОписаниеОшибки());
		Возврат(0);
	КонецПопытки;
	                                    
	ПравилаОбмена = гПравила.ВыбратьУзел("ПравилаОбмена");
	Форма.ВерсияПравил.Заголовок(СокрЛП(ПравилаОбмена.ПолучитьАтрибут("ДатаВремяОбновления")));
	
	Возврат(1);
	
КонецФункции		//	ЗагрузитьПравилаКонвертации()
    
//--------------------------------------------------------------------------------------------------

//**************************************************************************************************
//----	Конец процедур и функций для выгрузки проводок
//**************************************************************************************************
                            
                                                     
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура УстановитьАтрибут(Элемент, ИдАтрибута, ЗнАтрибута, Проверить=1);
	
	Если	Проверить = 1 Тогда
		Если ПустоеЗначение(ЗнАтрибута) = 0 Тогда
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
			ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
			Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
		КонецЕсли;
	Иначе
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	РазделительСтрок,	"#рс#" );
		ЗнАтрибута	=	СтрЗаменить(ЗнАтрибута,	СимволТабуляции,	"#ст#" );
		Элемент.УстановитьАтрибут(ИдАтрибута, ЗнАтрибута);
	КонецЕсли;
	
КонецПроцедуры		//	УстановитьАтрибут()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция КопироватьУзел(Узел)
	
	Если ПустоеЗначение(Узел) = 1 Тогда Возврат("") КонецЕсли;
	
	XML_DOM		=	гXMLАнализатор.СоздатьДокумент();
	XML_DOM.ЗагрузитьИзСтроки(Узел.ПредставлениеXML);
	КопияУзла	=	XML_DOM.ВыбратьУзел(Узел.ИмяТэга);
	
	Возврат( КопияУзла );
	
КонецФункции		//	КопироватьУзел()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОшибку(Содержание, Маркер="")
                        
	Сообщить(Содержание, Маркер);
	
КонецПроцедуры		//	ЗаписатьОшибку()

//--------------------------------------------------------------------------------------------------

Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0)

	ПраваяЧасть	=	"";
	Разделитель	=	Найти(Стр, Разделитель);
	Если Разделитель > 0 Тогда
		ПраваяЧасть	=	Сред(Стр,		Разделитель + ?(Режим=2, 0, 1));
		Стр			=	СокрЛП(Лев(Стр,	Разделитель - ?(Режим=1, 0, 1)));
	КонецЕсли;

	Возврат(ПраваяЧасть);
	
КонецФункции		//	ОтделитьРазделителем()




//**************************************************************************************************
//----	Начало функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************

Функция ПривестиКТипу(Зн, Тип)
	
    Если		Тип = "Дата"	Тогда
		Возврат	Дата(Зн);                                  
	ИначеЕсли	Тип = "Число"	Тогда
		Возврат	Число(Зн);
	Иначе
		Возврат	НРег(СокрЛП(Зн));
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ПроверитьУсловие(Знач Условие, Знач Объект)
	
	ИдРеквизита			=	Условие.ПолучитьАтрибут("Реквизит");
	ВидУсловия			=	Условие.ПолучитьАтрибут("ВидУсловия");
	РеквизитОперации	=	Условие.ПолучитьАтрибут("ЭтоРеквизитОперации");
	Если Найти(ИдРеквизита, "()") > 0 Тогда
		Значение		=	ПолучитьЗначениеМетодом(Объект, ИдРеквизита);
	Иначе    
		Если		ПустоеЗначение(ИдРеквизита) = 1			Тогда
			Значение	=	Объект;
		//ИначеЕсли	ПустоеЗначение(СокрЛП(Объект)) = 1		Тогда
		//	Возврат(0);	
		ИначеЕсли	ТипЗначенияСтр(Объект) = "Операция"		Тогда
			Если		ИдРеквизита = "СчетДт" Тогда
				Значение	=	Объект.Дебет.Счет;
			ИначеЕсли	ИдРеквизита = "СчетКт" Тогда
				Значение	=	Объект.Кредит.Счет;
			Иначе
				Значение	=	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		ИначеЕсли	ПустоеЗначение(РеквизитОперации) = 1	Тогда
			Значение		=	Объект.ПолучитьАтрибут(ИдРеквизита);
		Иначе
			Значение		=	Объект.Операция.ПолучитьАтрибут(ИдРеквизита);
		КонецЕсли;
	КонецЕсли;
	
	Если		ВидУсловия	=	"УдовлетворяетУсловию" Тогда
		
		Возврат	УсловияВыполняются(Условие.ВыбратьУзел("Условия"), Значение);
		
	Иначе
		ТипЗнач		=	ТипЗначенияСтр(Значение);
		
		Зн			=	ПривестиКТипу(ПолучитьИдОбъектаИсточника(Значение), ТипЗнач);
		
		Знач1		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач1"), 	ТипЗнач);
		Знач2		=	ПривестиКТипу(Условие.ПолучитьАтрибут("Знач2"), 	ТипЗнач);
		
		Если		ВидУсловия	=	"Равно"					Тогда	Возврат ?(	Зн	=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеРавно"				Тогда	Возврат ?(	Зн	<>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 1			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеПустоеЗначение"		Тогда	Возврат ?(	ПустоеЗначение(Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ВключаетПодстроку"		Тогда	Возврат ?(	Найти(Зн, Знач1) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеВключаетПодстроку"	Тогда	Возврат	?(	Найти(Зн, Знач1) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ЯвляетсяПодстрокой"	Тогда	Возврат ?(	Найти(Знач1, Зн) > 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"НеЯвляетсяПодстрокой"	Тогда	Возврат	?(	Найти(Знач1, Зн) = 0			, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Больше"				Тогда	Возврат ?(	Зн	>	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"БольшеИлиРавно"		Тогда	Возврат ?(	Зн	>=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"Меньше"				Тогда	Возврат ?(	Зн	<	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"МеньшеИлиРавно"		Тогда	Возврат	?(	Зн	<=	Знач1					, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалСГраницами"	Тогда	Возврат ?(	(Зн	>=	Знач1) И (Зн <=	Знач2)	, 1, 0);
		ИначеЕсли	ВидУсловия	=	"ИнтервалБезГраниц"		Тогда	Возврат ?(	(Зн	>	Знач1) И (Зн <	Знач2)	, 1, 0);
		Иначе		ЗаписатьОшибку("Не идентифицирован вид условия:   " + ВидУсловия);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции		//	ПроверитьУсловие()

//--------------------------------------------------------------------------------------------------

Функция ПроверитьГруппуУсловий(Знач Условия, Знач Объект, Знач ТипУсловия="И")
	
	Если ПустоеЗначение(Условия)	= 1				Тогда	Возврат(1)								КонецЕсли;
	Если ПустоеЗначение(ТипУсловия) = 1				Тогда	ТипУсловия = "И"						КонецЕсли;
	
	Если ТипЗначенияСтр(Объект)		= "Справочник"	Тогда	Объект.ИспользоватьДату(ФормДатаКон, 1)	КонецЕсли;
	                                                                     
	ВыборкаУсловий	=	Условия.ВыбратьУзлы("Условие");
	Для СчУсловий = 0 По ВыборкаУсловий.КоличествоУзлов() - 1 Цикл
		Условие		=	ВыборкаУсловий.ПолучитьУзел(СчУсловий);
		Результат	=	ПроверитьУсловие(Условие, Объект);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсл			=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Результат		=	ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсл);
		Если		(ТипУсловия = "И")		И	(Результат=0)	Тогда	Возврат(0);
		ИначеЕсли	(ТипУсловия = "Или")	И	(Результат=1)	Тогда	Возврат(1);
		ИначеЕсли	(ТипУсловия = "Не")		И	(1-Результат=1)	Тогда	Возврат(1);
		КонецЕсли;
	КонецЦикла;
	
	Если		ТипУсловия = "И"	Тогда	Возврат(1);
	ИначеЕсли	ТипУсловия = "Или"	Тогда	Возврат(0);
	ИначеЕсли	ТипУсловия = "Не"	Тогда	Возврат(0);
	КонецЕсли;
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Функция УсловияВыполняются(Знач Условия, Знач Объект, ИдПравилаДок="")
	
	Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЕстьПроцедура")) = 0 Тогда
		Возврат ДополнительныеПреобразования("Условие", Условия.ПолучитьАтрибут("Ид"), Объект, , ИдПравилаДок);
	КонецЕсли;
	
	Если ПроверитьГруппуУсловий(Условия, Объект) = 0 Тогда Возврат(0) КонецЕсли;	//	проверка одиночных условий
	
	ВыборкаГрупп	=	Условия.ВыбратьУзлы("ГруппаУсловий");
	Для СчГрупп = 0 По ВыборкаГрупп.КоличествоУзлов() - 1 Цикл
		ГруппаУсловий	=	ВыборкаГрупп.ПолучитьУзел(СчГрупп);
		ТипУсловия		=	ГруппаУсловий.ПолучитьАтрибут("ТипУсловия");
		Если ПроверитьГруппуУсловий(ГруппаУсловий, Объект, ТипУсловия) = 0 Тогда Возврат(0) КонецЕсли;
	КонецЦикла;
	
	Возврат(1);
	
КонецФункции

//**************************************************************************************************
//----	Конец функций	проверки условий	--------------------------------------------------------
//**************************************************************************************************


//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПараметрыЗагрузки(Правило, Ид="")
                                     
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
	КонецЕсли;
	Если	ПустоеЗначение(Ид) = 1		Тогда
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);	//	в первой строке описаны параметры по умолчанию
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПараметровЗагрузки.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда

		ПараметрыЗагрузки	=	гПравила.ВыбратьУзел("//ПараметрыЗагрузки[@Ид=""" + СокрЛП(Ид) + """]");
		
		Если ПустоеЗначение(ПараметрыЗагрузки) = 1 Тогда
			ЗаписатьОшибку("Не найдены параметры загрузки. Ид = " + Ид + "!", "!!");
			гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(1);
			Возврат;
		КонецЕсли;
		
		гТабКэшПараметровЗагрузки.НоваяСтрока();
		гТабКэшПараметровЗагрузки.Ид							=	Ид;
	    
		ДатаУстановки											=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("Дата"));
		гТабКэшПараметровЗагрузки.Дата							=	?(ПустоеЗначение(ДатаУстановки)=1, ФормДатаКон, ДатаУстановки);

		СпособЗагрузки											=	ПараметрыЗагрузки.ПолучитьАтрибут("СпособЗагрузки");
		гТабКэшПараметровЗагрузки.СпособЗагрузки				=	?(ПустоеЗначение(СпособЗагрузки)=1, "ЗамещатьНеПустыми", СпособЗагрузки);
		
		гТабКэшПараметровЗагрузки.ПравилоОпераций				=	ПараметрыЗагрузки.ПолучитьАтрибут("ПравилоОпераций");
		
		гТабКэшПараметровЗагрузки.СтатусУдаления				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусУдаления");
		гТабКэшПараметровЗагрузки.СтатусПроводок				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроводок");
		гТабКэшПараметровЗагрузки.СтатусПроведения				=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусПроведения");
		гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов		=	ПараметрыЗагрузки.ПолучитьАтрибут("СтатусРасчетныхДокументов");
		
		гТабКэшПараметровЗагрузки.ДатаТекущегоПериодаЖР			=	Дата(ПараметрыЗагрузки.ПолучитьАтрибут("ДатаТекущегоПериодаЖР"));
	
		гТабКэшПараметровЗагрузки.ЗамещатьНайденные				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗамещатьНайденные"));
		гТабКэшПараметровЗагрузки.НовыеНеСоздавать				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("НовыеНеСоздавать"));
		
		гТабКэшПараметровЗагрузки.ЗагружатьОперации				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьОперации"));
		гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР				=	Число(ПараметрыЗагрузки.ПолучитьАтрибут("ЗагружатьЗаписиЖР"));
		                            	
	Иначе
		
		гТабКэшПараметровЗагрузки.ПолучитьСтрокуПоНомеру(НомСтр);
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПараметрыЗагрузки()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравилоРеквизитов(Правило, Таб)
                                       
	Таб.НоваяСтрока();
	
	Источник					=	Правило.ВыбратьУзел("Источник");
	Приемник					=	Правило.ВыбратьУзел("Приемник");
	
	Таб.Ид						=	Правило.ПолучитьАтрибут("Ид");
	Таб.Преобразование			=	Правило.ПолучитьАтрибут("Преобразование");
	Таб.Правило					=	Правило.ПолучитьАтрибут("Правило");
	Таб.ЕстьПроцедура			=	Правило.ПолучитьАтрибут("ЕстьПроцедура");
	Таб.ПараметрыПравила		=	Правило.ПолучитьАтрибут("ПараметрыПравила");
	Таб.ПолучитьИзПараметров	=	Правило.ПолучитьАтрибут("ПолучитьИзПараметров");
	Таб.СпособВыгрузки			=	Правило.ПолучитьАтрибут("СпособВыгрузки");
	Таб.СпособЗагрузки			=	Правило.ПолучитьАтрибут("СпособЗагрузки");
	
	Условия						=	Правило.ВыбратьУзел("Условия");
	
	Если ПустоеЗначение(Источник) = 0 Тогда
		Таб.Источник_Ид				=	Источник.ПолучитьАтрибут("Ид");
		Таб.Источник_ТипАтрибута	=	Источник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Источник_Тип			=	Источник.ПолучитьАтрибут("Тип");
		Таб.Источник_Вид			=	Источник.ПолучитьАтрибут("Вид");
		//Таб.Источник_Длина		=	Источник.ПолучитьАтрибут("Длина");
	КонецЕсли;

	Если ПустоеЗначение(Приемник) = 0 Тогда
		Таб.Приемник_Ид				=	Приемник.ПолучитьАтрибут("Ид");
		Таб.Приемник_ТипАтрибута	=	Приемник.ПолучитьАтрибут("ТипАтрибута");
		Таб.Приемник_Тип			=	Приемник.ПолучитьАтрибут("Тип");
		Таб.Приемник_Вид			=	Приемник.ПолучитьАтрибут("Вид");
		Таб.Приемник_Длина			=	Приемник.ПолучитьАтрибут("Длина");
	КонецЕсли;
	
	Если ПустоеЗначение(Условия) = 0 Тогда
		Таб.Условия	=	Условия;
		Если (ПустоеЗначение(Условия.ПолучитьАтрибут("ЗаданыПоРеквизиту")) = 1) И (Таб.Источник_ТипАтрибута <> "К") И (Таб.Источник_ТипАтрибута <> "ПК") Тогда
			Таб.ВидУсловия	=	1;
		Иначе
			Таб.ВидУсловия	=	2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравилоРеквизитов()

//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравилоРеквизитовЗначения(Правило, Ид="")
                                       
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("Ид");
	ИначеЕсли	ПустоеЗначение(Ид) = 1		Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшРеквизитовЗначений.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		                    
		гТабКэшРеквизитовЗначений.НоваяСтрока();
		
		Источник										=	Правило.ВыбратьУзел("Источник");
		Приемник										=	Правило.ВыбратьУзел("Приемник");
		
		гТабКэшРеквизитовЗначений.Ид					=	Ид;
		гТабКэшРеквизитовЗначений.Преобразование		=	Правило.ПолучитьАтрибут("Преобразование");
		гТабКэшРеквизитовЗначений.Правило				=	Правило.ПолучитьАтрибут("Правило");
		гТабКэшРеквизитовЗначений.ЕстьПроцедура			=	Правило.ПолучитьАтрибут("ЕстьПроцедура");
		гТабКэшРеквизитовЗначений.ПараметрыПравила		=	Правило.ПолучитьАтрибут("ПараметрыПравила");
		
		
		Условия											=	Правило.ВыбратьУзел("Условия");
		Если ПустоеЗначение(Условия) = 0 Тогда
			гТабКэшРеквизитовЗначений.Условия		=	Условия;
			гТабКэшРеквизитовЗначений.ВидУсловия	=	1;
			//Если ПустоеЗначение(Условия.ПолучитьАтрибут("ЗаданыПоРеквизиту")) = 1 Тогда
			//	гТабКэшРеквизитовЗначений.ВидУсловия	=	1;
			//Иначе
			//	гТабКэшРеквизитовЗначений.ВидУсловия	=	2;
			//КонецЕсли;
		КонецЕсли;
		
		
		Если ПустоеЗначение(Источник) = 0 Тогда
			гТабКэшРеквизитовЗначений.Источник_Ид		=	Источник.ПолучитьАтрибут("Ид");
			гТабКэшРеквизитовЗначений.Источник_Тип		=	Источник.ПолучитьАтрибут("Тип");
			гТабКэшРеквизитовЗначений.Источник_Вид		=	Источник.ПолучитьАтрибут("Вид");
		КонецЕсли;
	
		Если ПустоеЗначение(Приемник) = 0 Тогда
			гТабКэшРеквизитовЗначений.Приемник_Ид		=	Приемник.ПолучитьАтрибут("Ид");
			гТабКэшРеквизитовЗначений.Приемник_Тип		=	Приемник.ПолучитьАтрибут("Тип");
			гТабКэшРеквизитовЗначений.Приемник_Вид		=	Приемник.ПолучитьАтрибут("Вид");
			гТабКэшРеквизитовЗначений.Приемник_Длина	=	Приемник.ПолучитьАтрибут("Длина");
		КонецЕсли;
		
	Иначе
		
		гТабКэшРеквизитовЗначений.ПолучитьСтрокуПоНомеру(НомСтр);

	КонецЕсли;
										
КонецПроцедуры		//	ЗагрузитьПравилоРеквизитовЗначения()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СистемноеПредставлениеОбъекта(Источник)
    
	//	Необходимо позиционироваться на объекты, т.к.
	//	если Источник - реквизит неопределенного типа,
	//	то ЗначениеВСтрокуВнутр - возвращает НЕСТАНДАРТНОЕ
	//	строковое представление !!!
	
	Тип	=	ТипЗначенияСтр(Источник);
	Стр	=	СокрЛП(Источник);
	
	Если		(Стр = "<Объект не найден>") Или (Стр = "") Тогда
		
		Возврат("");	//	Объект не существует в ИБ
		
	ИначеЕсли	Тип = "Справочник"	Тогда
		
		Об = СоздатьОбъект("Справочник." + Источник.Вид());
		Об.НайтиЭлемент(Источник);
		Возврат	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
		
	ИначеЕсли	Тип = "Документ"	Тогда
		
		Об = СоздатьОбъект("Документ." + Источник.Вид());
		Об.НайтиДокумент(Источник);
		Возврат	ЗначениеВСтрокуВнутр(Об.ТекущийДокумент());
		
	Иначе
		
		Об	=	Источник;
		Возврат	ЗначениеВСтрокуВнутр(Об);
		
	КонецЕсли;
	
КонецФункции		//	СистемноеПредставлениеОбъекта()

//--------------------------------------------------------------------------------------------------

Функция СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила)
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() = 0 Тогда
		Возврат(1);
	КонецЕсли;
    
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	УзелСсылки				=	XML_DOM.СоздатьУзел(1, "Ссылка");
	     
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	
    Если (ТипИсточника = "Справочник") Или (ТипИсточника = "Счет") Тогда
		ЭтоГруппа	=	Источник.ЭтоГруппа();
		УстановитьАтрибут(УзелСсылки,	"ЭтоГруппа",	ЭтоГруппа);
    КонецЕсли;
	
	Если ТабРеквизитовПоиска.КоличествоСтрок() > 0 Тогда
		ТабРеквизитовПоиска.ВыбратьСтроки();
		Пока ТабРеквизитовПоиска.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитовПоиска, Источник, УзелСсылки, "#Получить", "Поиск", ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЦикла;
	Иначе
		УстановитьАтрибут(УзелСсылки, "СистемныйИд", УзелСсылки.ПреобразоватьВ_ИД(СистемноеПредставлениеОбъекта(Источник)));
	КонецЕсли;
	
	Возврат(УзелСсылки);
	
КонецФункции	//	СоздатьУзелСсылки()
                        
//--------------------------------------------------------------------------------------------------

Функция ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, Режим=0, ПараметрыПравила="", НовыеНеСоздавать=0, НеСинхронизироватьПоДопПараметрам=0)
	
	Перем	НомСтр;
	
	
	Если (ФормФлЗапоминатьСсылки = 0) И (Режим <> "Проведение") Тогда
		УзелСсылки	=	СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
		Если НовыеНеСоздавать = 1 Тогда Возврат(1) КонецЕсли;	//	в данном случае нам нужна только ссылка
	КонецЕсли;
	
	
	//СписокВыгруженныхОбъектов = СписокСписковВыгруженныхОбъектов.Получить(ИдПравила);

	Если ТабВыгруженныхОбъектов.НайтиЗначение(ИдПравила, НомСтр, "ИдПравила") = 0 Тогда
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		ТабВыгруженныхОбъектов.НоваяСтрока();
		ТабВыгруженныхОбъектов.ИдПравила	=	ИдПравила;
		ТабВыгруженныхОбъектов.ТабОбъектов	=	СоздатьОбъект("ТаблицаЗначений");
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ТабОбъектов;
		ТабОбъектов.НоваяКолонка("Объект");
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			ТабОбъектов.НоваяКолонка("Ссылка",	"Строка");
		КонецЕсли;
	Иначе
		ТабОбъектов							=	ТабВыгруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
	КонецЕсли;
	
	//Если ТипЗначенияСтр(СписокВыгруженныхОбъектов) <> "СписокЗначений" Тогда
	//	Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
	//	СписокВыгруженныхОбъектов = СоздатьОбъект("СписокЗначений");
	//	СписокСписковВыгруженныхОбъектов.Установить(ИдПравила, СписокВыгруженныхОбъектов);
	//КонецЕсли;
                                                       
	
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда
		СистПредставление = ИдПравила + ?(ПустоеЗначение(ПараметрыПравила)=0, ЗначениеВСтрокуВнутр(ПараметрыПравила), "");
	Иначе
		Если (ПустоеЗначение(ПараметрыПравила)=0) И (НеСинхронизироватьПоДопПараметрам=0) Тогда
			
			//Тип	=	ТипЗначенияСтр(Источник);
			//Если		СокрЛП(Источник) = "<Объект не найден>" Тогда
			//	//	Объект не существует в ИБ
			//	Об					=	Источник;
			//	СистПредставление	=	"";
			//ИначеЕсли	Тип = "Справочник"	Тогда
			//	Об = СоздатьОбъект("Справочник." + Источник.Вид());
			//	Об.НайтиЭлемент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийЭлемент());
			//ИначеЕсли	Тип = "Документ"	Тогда
			//	Об = СоздатьОбъект("Документ");
			//	Об.НайтиДокумент(Источник);
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об.ТекущийДокумент());
			//Иначе
			//	Об					=	Источник;
			//	СистПредставление	=	ЗначениеВСтрокуВнутр(Об);
			//КонецЕсли;
			//СистПредставление		=	СистПредставление + ЗначениеВСтрокуВнутр(ПараметрыПравила);
			                                                                                       
			СистПредставление		=	СистемноеПредставлениеОбъекта(Источник) + ЗначениеВСтрокуВнутр(ПараметрыПравила);
			
		Иначе
			СистПредставление	=	Источник;
		КонецЕсли;
	КонецЕсли;

	
	НомСтр = "";
	Если ТабОбъектов.НайтиЗначение(СистПредставление, НомСтр, "Объект") = 0 Тогда
		
		Если Режим = "Проведение" Тогда Возврат(0) КонецЕсли;
		
		Если ФормФлЗапоминатьСсылки = 1 Тогда
			УзелСсылки				=	СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
			
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект	=	СистПредставление;
			
			Если УзелСсылки <> 1 Тогда
				ТабОбъектов.Ссылка	=	УзелСсылки.ПредставлениеXML;
				//ТабОбъектов.УстановитьЗначение(НомерНовойСтроки, "Ссылка", УзелСсылки.ПредставлениеXML);
			КонецЕсли;
		Иначе
			ТабОбъектов.НоваяСтрока();
			ТабОбъектов.Объект = СистПредставление;
		КонецЕсли;
		
		Если НовыеНеСоздавать = 1 Тогда Возврат(1) КонецЕсли;	//	в данном случае нам нужна только ссылка
		
		Возврат(0);
		
	ИначеЕсли	ФормФлЗапоминатьСсылки = 1	Тогда
		                            
		СтрСсылка	=	ТабОбъектов.ПолучитьЗначение(НомСтр, "Ссылка");
		Если ПустоеЗначение(СтрСсылка) = 0 Тогда
			XML_DOM		=	гXMLАнализатор.СоздатьДокумент();
			XML_DOM.ЗагрузитьИзСтроки(СтрСсылка);
			УзелСсылки	=	XML_DOM.ВыбратьУзел("Ссылка");
		КонецЕсли;
		
	Иначе
	    
		Если Режим = "Проведение" Тогда
			УзелСсылки = СоздатьУзелСсылки(Источник, ТабРеквизитовПоиска, ПараметрыПравила);
		КонецЕсли;
		
	КонецЕсли;
	    
	Возврат(1);
	
КонецФункции		//	ОбъектУжеВыгружен()

//--------------------------------------------------------------------------------------------------

Процедура ЗаписатьОбъектВФайл(XML_DOM);
    
	гСчетчикВыгруженныхОбъектов	=	гСчетчикВыгруженныхОбъектов + 1;
	
	XML_DOM.УстановитьАтрибут("Нпп", гСчетчикВыгруженныхОбъектов);
	
    гФайлДанных.ВключитьЭлемент(XML_DOM);
	                                   
	
	Если гСчетчикВыгруженныхОбъектов % ФормКолвоБуферизуемыхОбъектов = 0 Тогда
		гФайлДанных.Сбросить();
	КонецЕсли;
	
	Если гСчетчикВыгруженныхОбъектов % 10 = 0 Тогда	Состояние("Выгружено объектов:    " + гСчетчикВыгруженныхОбъектов) КонецЕсли;
	
КонецПроцедуры

//--------------------------------------------------------------------------------------------------

Функция ПометкаУдаления(Источник, СтатусУдаления)
                                
	Если ПустоеЗначение(Источник) = 1 Тогда Возврат(0) КонецЕсли;
	
	Если		СтатусУдаления	= "Авто"			Тогда
		
		Возврат(Источник.ПометкаУдаления());
		
	//ИначеЕсли СтатусУдаления	= "Пометить"		Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусУдаления	= "СнятьПометку"	Тогда
	
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ПометкаУдаления()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыключитьПроводки(Источник, СтатусПроводок)
	
	Если		СтатусПроводок	= "Авто"			Тогда	//	на бух. учет и СуществуетОперация() проверили раньше
		 
		Возврат(1 - Источник.Операция.ВключитьПроводки());
		
	//ИначеЕсли СтатусУдаления	= "Включить "		Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусУдаления	= "Выключить "		Тогда
	
	КонецЕсли;
	
	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

Функция ОтменитьПроведение(Источник, СтатусПроведения);
	
	Если		СтатусПроведения	= "Авто"				Тогда
		
		Если Источник.ПометкаУдаления() = 1 Тогда Возврат(0) КонецЕсли;
		
		Если Метаданные.Документ(Источник.Вид()).РазрешитьПроведение = 0 Тогда
			Возврат(0);
		КонецЕсли;
		 
		Возврат( 1 - Источник.Проведен() );
		
	//ИначеЕсли СтатусПроведения	= "Провести"			Тогда	// это можно прочитать из правил...
	//ИначеЕсли СтатусПроведения	= "ОтменитьПроведение"	Тогда
	
	КонецЕсли;
	
	Возврат(0);
	
КонецФункции		//	ОтменитьПроведение()

//--------------------------------------------------------------------------------------------------

Функция НужноПровести(Источник, СтатусПроведения)
	                                             
	//Если Источник.ПометкаУдаления() = 1 Тогда Возврат(0) КонецЕсли;
	
	Если		СтатусПроведения	= "Авто"			Тогда
		     
		ВидДокумента	=	Источник.Вид();
		
		Если		ВидДокумента = "Операция" Тогда
			Возврат(1);
		ИначеЕсли	Метаданные.Документ(ВидДокумента).РазрешитьПроведение = 0 Тогда
			Возврат(0);
		КонецЕсли;
		 
		Возврат( Источник.Проведен() );
		
	ИначеЕсли СтатусПроведения	= "Провести"			Тогда
		
		Возврат(1);
		
	ИначеЕсли СтатусПроведения	= "ОтменитьПроведение"	Тогда
	
	КонецЕсли;
	
	Возврат(0);

КонецФункции		//	НужноПровести()
                      
//--------------------------------------------------------------------------------------------------

Процедура ЗагрузитьПравило(Правило, Ид="")
                                       
	Если		(ПустоеЗначение(Ид) = 1)	И (ПустоеЗначение(Правило) = 0)	Тогда
		Ид		=	Правило.ПолучитьАтрибут("Ид");
	ИначеЕсли	ПустоеЗначение(Ид) = 1		Тогда
		Возврат;
	КонецЕсли;
	
	НомСтр	=	"";
	
	Если  гТабКэшПравил.НайтиЗначение(Ид, НомСтр, "Ид") = 0 Тогда
		
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гПравила.ВыбратьУзел("//Правило[@Ид=""" + Ид + """]");
		КонецЕсли;
		
		Источник									=	Правило.ВыбратьУзел("ОбъектИсточник");
		Приемник									=	Правило.ВыбратьУзел("ОбъектПриемник");
		
		гТабКэшПравил.НоваяСтрока();
		гТабКэшПравил.Ид							=	Ид;
		гТабКэшПравил.Правило						=	Правило;
		гТабКэшПравил.ПоСсылкам						=	Число(Правило.ПолучитьАтрибут("ПоСсылкам"));
		гТабКэшПравил.Преобразование				=	Правило.ПолучитьАтрибут("Преобразование");
		гТабКэшПравил.ПравилоПереадресации			=	Правило.ПолучитьАтрибут("Правило");
		гТабКэшПравил.ПараметрыЗагрузки				=	Правило.ПолучитьАтрибут("ПараметрыЗагрузки");
		гТабКэшПравил.ИдСинхронизирующегоРеквизита	=	Правило.ПолучитьАтрибут("ИдСинхронизирующегоРеквизита");
		
		Условия										=	Правило.ВыбратьУзел("Условия");
		Если ПустоеЗначение(Условия) = 0 Тогда
			гТабКэшПравил.Условия		=	Условия;
			гТабКэшПравил.ВидУсловия	=	1;
		КонецЕсли;
		                            	
		Если ПустоеЗначение(Источник) = 0 Тогда
			гТабКэшПравил.Источник_Тип				=	Источник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Источник_Вид				=	Источник.ПолучитьАтрибут("Вид");
		КонецЕсли;
	
		Если ПустоеЗначение(Приемник) = 0 Тогда
			гТабКэшПравил.Приемник_Тип				=	Приемник.ПолучитьАтрибут("Тип");
			гТабКэшПравил.Приемник_Вид				=	Приемник.ПолучитьАтрибут("Вид");
			Если гТабКэшПравил.Приемник_Тип = "ЖурналРасчетов" Тогда
				гТабКэшПравил.Уникальность			=	Приемник.ПолучитьАтрибут("Уникальность");
				гТабКэшПравил.ДатаОтсчета			=	Приемник.ПолучитьАтрибут("ДатаОтсчета");
			КонецЕсли;
		КонецЕсли;
		
		Приемник_Тип								=	гТабКэшПравил.Приемник_Тип;
		Источник_Тип								=	гТабКэшПравил.Источник_Тип;
		//Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат КонецЕсли;
		
		//-------------------------------------------
		
		гТабКэшПравил.ТабРеквизитовПоиска			=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитов					=	СоздатьОбъект("ТаблицаЗначений");
		гТабКэшПравил.ТабРеквизитовСтрок			=	СоздатьОбъект("ТаблицаЗначений");
		
		Реквизиты = Правило.ВыбратьУзлы("Реквизит[@СпособЗагрузки=""Поиск""]");
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитовПоиска.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовПоиска);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Справочник"	Тогда
        	Запрос	=	"Реквизит[(@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки))]";
		ИначеЕсли	Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута != ""РТД"") or (not(Приемник)) ) and ( (@СпособВыгрузки != ""ПеребратьСтрокиДокумента"") or (not(СпособВыгрузки)) )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута = ""АО"") or (Приемник/@ТипАтрибута = ""РО"") ]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки != ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"Реквизит";
		КонецЕсли;
		
		Реквизиты = Правило.ВыбратьУзлы(Запрос);
		Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
			гТабКэшПравил.ТабРеквизитов.Загрузить(гТабКэшРеквизитов);
			Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
				ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитов);
			КонецЦикла;
		КонецЕсли;
		
		Если		Приемник_Тип = "Документ"	Тогда
			Запрос	=	"Реквизит[( (@СпособЗагрузки != ""Поиск"") or (not(@СпособЗагрузки)) ) and ( (Приемник/@ТипАтрибута = ""РТД"") or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"") )]";
		ИначеЕсли	Приемник_Тип = "Операция"	Тогда
			//Запрос	=	"Реквизит[ (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ]";
			Запрос	=	"Реквизит[( (Приемник/@ТипАтрибута != ""АО"") and (Приемник/@ТипАтрибута != ""РО"") ) or (@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		ИначеЕсли	(ПустоеЗначение(Приемник_Тип) = 1) И (Источник_Тип = "Документ")	Тогда
			Запрос	=	"Реквизит[(@СпособВыгрузки = ""ПеребратьСтрокиДокумента"")]";
		Иначе
			Запрос	=	"";
		КонецЕсли;
		
		Если Запрос <> "" Тогда
			Реквизиты	=	Правило.ВыбратьУзлы(Запрос);
			Если ПустоеЗначение(Реквизиты.КоличествоУзлов()) = 0 Тогда
				гТабКэшПравил.ТабРеквизитовСтрок.Загрузить(гТабКэшРеквизитов);
				Для СчРеквизитов = 0 По Реквизиты.КоличествоУзлов() - 1 Цикл
					ЗагрузитьПравилоРеквизитов(Реквизиты.ПолучитьУзел(СчРеквизитов), гТабКэшПравил.ТабРеквизитовСтрок);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		гТабКэшПравил.ПолучитьСтрокуПоНомеру(НомСтр);
		Если		ПустоеЗначение(Правило) = 1	Тогда
			Правило	=	гТабКэшПравил.Правило;			//  нужно для поиска значений и др.
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры		//	ЗагрузитьПравило()

//--------------------------------------------------------------------------------------------------

Функция НайтиПравило(Источник, Правило="", ИдПравила="", ТипПриемника="", ВидПриемника="", ИдПравилаДок="")
	          
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Вид				=	"";
	Запрос			=	"";
	
	Тип				=	ТипЗначенияСтр(Источник);
	
	
	Если	ПустоеЗначение(Тип) = 1									Тогда Возврат(0) КонецЕсли;
	Если	(Тип = "Строка") И (ТипПриемника = "Неопределенный")	Тогда Возврат(0) КонецЕсли;
	
	
	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Тип + """)";
	
	Если (Найти("Строка,Число,Дата,Операция,Календарь,ВидСубконто,ВидРасчета", Тип) = 0) И (Тип <> "ПланСчетов") Тогда
		Вид			=	Источник.Вид();
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Вид + """)";
	КонецЕсли;
	
	Если (ПустоеЗначение(ТипПриемника) = 0) И (ТипПриемника <> "Неопределенный") Тогда
		Запрос		=	Запрос + "and(ОбъектПриемник/@Тип = """ + ТипПриемника + """)";
		Если ПустоеЗначение(ВидПриемника) = 0 Тогда
			Запрос	=	Запрос + "and(ОбъектПриемник/@Вид = """ + ВидПриемника + """)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник, ИдПравилаДок) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		       
	
	Если Тип <> "ЖурналРасчетов" Тогда
		ЗаписатьОшибку("Не найдено правило конвертации объекта: " + Тип + "." + Вид + " - " + Источник, "!!");
	КонецЕсли;
	
	
	Возврат(0);
	
КонецФункции		//	НайтиПравило()
            
//--------------------------------------------------------------------------------------------------

Функция НайтиПравилоДляАтрибутаЗначения(Знач Источник, Правило="", ИдПравила="", ПравилоАтрибутаЗначения="")
	              
	Если (ПустоеЗначение(ИдПравила) = 1) И (ПустоеЗначение(ПравилоАтрибутаЗначения) = 0) Тогда
		ИдПравила	=	ПравилоАтрибутаЗначения.ПолучитьАтрибут("Правило");
	КонецЕсли;
	
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;
	
	Если ПустоеЗначение(ПравилоАтрибутаЗначения) = 1 Тогда Возврат(0) КонецЕсли;
	
	Запрос				=	"";
	Источник_Тип		=	"";
	Источник_Вид		=	"";
	Приемник_Тип		=	"";
	Приемник_Вид		=	"";
	
	УзелИсточник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Источник");
	УзелПриемник		=	ПравилоАтрибутаЗначения.ВыбратьУзел("Приемник");
	
	Если ПустоеЗначение(УзелИсточник) = 0 Тогда
		Источник_Тип	=	УзелИсточник.ПолучитьАтрибут("Тип");
		Источник_Вид	=	УзелИсточник.ПолучитьАтрибут("Вид");
	КонецЕсли;

	Если ПустоеЗначение(УзелПриемник) = 0 Тогда
		Приемник_Тип	=	УзелПриемник.ПолучитьАтрибут("Тип");
		Приемник_Вид	=	УзелПриемник.ПолучитьАтрибут("Вид");
	КонецЕсли;
	            
	Если ПустоеЗначение(Приемник_Тип) = 1 Тогда Возврат(0)								КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Источник_Тип = ТипЗначенияСтр(Источник)	КонецЕсли;
	Если ПустоеЗначение(Источник_Тип) = 1 Тогда Возврат(0) 								КонецЕсли;

	Запрос			=	Запрос + "//Правило[(ОбъектИсточник/@Тип = """ + Источник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Источник_Тип) = 0 Тогда
		Если ПустоеЗначение(Источник_Вид) = 1 Тогда Источник_Вид = Источник.Вид() КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + Источник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "and(ОбъектПриемник/@Тип = """ + Приемник_Тип + """)";
	
	Если Найти("Строка,Число,Дата,Операция", Приемник_Тип) = 0 Тогда
		Если ПустоеЗначение(Приемник_Вид) = 1 Тогда Приемник_Вид = Источник_Вид КонецЕсли;
		Запрос		=	Запрос + "and(ОбъектПриемник/@Вид = """ + Приемник_Вид + """)";
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		
	ЗаписатьОшибку("Не найдено правило конвертации атрибута значения: " + ПравилоАтрибутаЗначения.ПолучитьАтрибут("Имя") + " - " + Источник_Тип + "." + Источник_Вид + " - " + Источник, "!!");
	Возврат(0);
	
КонецФункции		//	НайтиПравилоДляАтрибутаЗначения()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьЗначениеМетодом(Источник, Метод)
                                        
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	    
	Если		Метод = "Значение()"				Тогда
		Возврат		Источник;
	ИначеЕсли	Метод = "Вид()"						Тогда
		Возврат		Источник.Вид();
	ИначеЕсли	Метод = "ПометкаУдаления()"			Тогда
		Возврат		Источник.ПометкаУдаления();
	ИначеЕсли	Метод = "СистемноеПредставление()"	Тогда
		Возврат		ЗначениеВСтрокуВнутр(Источник);
	ИначеЕсли	Метод = "Код()"						Тогда
		Возврат		Источник.Код;
	КонецЕсли;
	
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	
	
    Если		ТипИсточника = "Справочник"			Тогда
		      
		Если		Метод = "ТекущийЭлемент()"		Тогда
			Зн	=	Источник.ТекущийЭлемент();
		ИначеЕсли	Метод = "ЭтоГруппа()"			Тогда
			Зн	=	Источник.ЭтоГруппа();
		КонецЕсли;
		                                     
	ИначеЕсли	ТипИсточника = "Документ"			Тогда

		Если		Метод = "ТекущийДокумент()"		Тогда
			//Зн	=	Источник.ТекущийДокумент();
			Возврат(Источник);
		ИначеЕсли	Метод = "Проведен()"			Тогда
			Зн	=	Источник.Проведен();
		ИначеЕсли	Метод = "ПроводкиВключены()"	Тогда
			Зн	=	Источник.Операция.ВключитьПроводки();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Перечисление"		Тогда
		
		Если			Метод = "ТекущееЗначение()"	Тогда
			Зн	=	Источник;
		ИначеЕсли		Метод = "Представление()"	Тогда
			Зн	=	Строка(Источник);
		ИначеЕсли		Метод = "Идентификатор()"	Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли		Метод = "ПорядковыйНомер()"	Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Счет"				Тогда
		
		Если		Метод = "ТекущийСчет()"			Тогда
			Зн	=	Источник.ТекущийСчет();
		ИначеЕсли	Метод = "Родитель()"			Тогда
			Зн	=	Источник.Родитель();
		ИначеЕсли	Найти(Метод, "ВидСубконто") > 0	Тогда
			НомерСубконто	=	Число(Сред(Метод, 12, 1));
			Если НомерСубконто > МаксимальноеКоличествоСубконто() Тогда
				Возврат("");
			КонецЕсли;
			Зн	=	Источник.ВидСубконто(НомерСубконто);
		КонецЕсли;
	
	ИначеЕсли	ТипИсточника = "ВидСубконто"		Тогда
		
		Если		Метод = "Идентификатор()"		Тогда
			Зн	=	Источник.Идентификатор();
		ИначеЕсли	Метод = "Представление()"		Тогда
			Зн	=	Метаданные.ВидСубконто(Источник.Идентификатор()).Представление();
		ИначеЕсли	Метод = "ТипСубконто()"			Тогда
			Зн	=	Источник.ТипСубконто();
		ИначеЕсли	Метод = "ПорядковыйНомер()"		Тогда
			Зн	=	Источник.ПорядковыйНомер();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Операция"			Тогда

		Если		Метод = "ПланСчетов()"			Тогда
			Если Источник.ПроводкаВыбрана() = 1 Тогда
				Зн	=	Источник.ПланСчетов().Идентификатор();
			Иначе
				ЗаписатьОшибку("Не выбрана проводка для получения плана счетов!", "!");
			КонецЕсли;
		ИначеЕсли	Метод = "ВидДокумента()"		Тогда
			Зн	=	Источник.Документ.Вид();
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат(Зн);
	
КонецФункции		//	ПолучитьЗначениеМетодом()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПодобратьЗначениеПоТипу(Объект, ТипЗнач, ВидЗнач, НомерСубконтоИсточника="")
	
	Если  		ТипЗначенияСтр(Объект) = "СписокЗначений" Тогда
		
		Для Сч = 1 По Объект.РазмерСписка() Цикл
			Значение = Объект.ПолучитьЗначение(Сч);
			Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
				Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
				    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли  	ТипЗначенияСтр(Объект) = "Справочник" Тогда
	                                                       
		ОбъектМД	=	Метаданные.Справочник(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если ОбъектМД.Реквизит(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.Реквизит() Цикл
		    РеквМД	=	ОбъектМД.Реквизит(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли	ТипЗначенияСтр(Объект) = "Документ" Тогда
		
		ОбъектМД	=	Метаданные.Документ(Объект.Вид());
		
		Если ПустоеЗначение(НомерСубконтоИсточника) = 0 Тогда
			ИдРеквизита	=	"Субконто" + СокрЛП(НомерСубконтоИсточника);
			Если		ОбъектМД.РеквизитШапки(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			ИначеЕсли	ОбъектМД.РеквизитТабличнойЧасти(ИдРеквизита).Выбран() = 1 Тогда
				Возврат	Объект.ПолучитьАтрибут(ИдРеквизита);
			КонецЕсли;
		КонецЕсли;
		
		Для Сч = 1 По ОбъектМД.РеквизитШапки() Цикл
		    РеквМД	=	ОбъектМД.РеквизитШапки(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Сч = 1 По ОбъектМД.РеквизитТабличнойЧасти() Цикл
		    РеквМД	=	ОбъектМД.РеквизитТабличнойЧасти(Сч);
			Если РеквМД.Тип = "Неопределенный" Тогда
				Значение = Объект.ПолучитьАтрибут(РеквМД.Идентификатор);
				Если ТипЗначенияСтр(Значение) = ТипЗнач	Тогда
					Если Найти("Строка,Число,Дата", ТипЗнач) = 0 Тогда
					    Если Значение.Вид() = ВидЗнач Тогда	Возврат(Значение)	КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат("");

КонецФункции		//	ПодобратьЗначениеПоТипу()

//-------------------------------------------------------------------------------------------------- 
             
Функция ВыделитьПрефикс(Знач Стр, ЧисловаяЧасть="", Режим="")
    
	Стр		=	СокрЛП(Стр);
	Префикс	=	Стр;
	Длина	=	СтрДлина(Стр);
	
	Для Сч = 1 По Длина Цикл
		ЧисловаяЧасть	=	Число(Стр);
		
	    Если (ЧисловаяЧасть > 0) И (СтрДлина(ЧисловаяЧасть) = Длина - Сч + 1) Тогда 
			Префикс	=	Лев(Префикс, Сч - 1);
			
			Пока Прав(Префикс, 1) = "0" Цикл
			    Префикс = Лев(Префикс, СтрДлина(Префикс)-1);
			КонецЦикла;
			
			Прервать;		    				
	    Иначе
			Стр = Прав(Стр, Длина - Сч);
		КонецЕсли;
		
		Если ЧисловаяЧасть < 0 Тогда	ЧисловаяЧасть = - ЧисловаяЧасть		КонецЕсли;
			
	КонецЦикла;
	              
	Если Режим = "Число" Тогда
	    Возврат(ЧисловаяЧасть);
	Иначе
		Возврат(Префикс);
	КонецЕсли;

КонецФункции		//	ВыделитьПрефикс()

//--------------------------------------------------------------------------------------------------

Функция ДополнитьНулями(Стр, Длина)
                            
	Стр			=	СокрЛП(Стр);
	//Добавить	=	Длина - СтрДлина(Стр);
	
	//Если	Добавить > 0	Тогда
		
		ЧисловаяЧасть	=	"";
		Результат		=	ВыделитьПрефикс(Стр, ЧисловаяЧасть);
		Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
		    Результат	=	Результат + "0";
		КонецЦикла;
		Результат	=	Результат + Строка(ЧисловаяЧасть);
		
		Возврат(Результат);
		
	//Иначе
	//	Возврат	Стр;
	//КонецЕсли;
	
КонецФункции		//	ДополнитьСтроку()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ДобавитьКПрефиксу(Стр, Добавок="", Длина, Режим="Слева")
	                     
	ЧисловаяЧасть		=	"";
	Префикс			=	ВыделитьПрефикс(Стр, ЧисловаяЧасть);
	Если Режим="Слева" Тогда
		Результат	=	СокрЛП(Добавок) + Префикс;
	Иначе
		Результат	=	Префикс + СокрЛП(Добавок);
	КонецЕсли;

	Пока Длина - СтрДлина(Результат) - СтрДлина(ЧисловаяЧасть) > 0 Цикл
	    Результат	=	Результат + "0";
	КонецЦикла;
	Результат	=	Результат + Строка(ЧисловаяЧасть);
	
	Возврат(Результат);
	
	//Возврат ДополнитьНулями(НовыйПрефикс + ЧисловаяЧасть, Длина);

КонецФункции

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыполнитьПреобразование(СписокСтрокой, Знач Объект, Знач Реквизит="", ИдПравила="", Приемник_Длина=0)
	
	Если ПустоеЗначение(СписокСтрокой) = 1 Тогда Возврат("") КонецЕсли;
	
	Список	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(Список) <> "СписокЗначений" Тогда Возврат(СписокСтрокой) КонецЕсли;	//	Для простых строковых значений...

	Если Список.Получить("ОбъектИлиРеквизит") = "Реквизит" Тогда	Объект = Реквизит	КонецЕсли;

	Значение	=	Список.Получить("Значение");
	
	Если		Значение = "<Пустое значение>" Тогда
		Возврат("");
	ИначеЕсли	ПустоеЗначение(Значение) = 0 Тогда
		Значение	=	СтрЗаменить(Значение,	Симв(10),			"#рс#" );
		//Значение	=	СтрЗаменить(Значение,	СимволТабуляции,	"#ст#" );
		Возврат(Значение);
	КонецЕсли;
	
	СтрокаСумма	=	"";
	
	Для Сч = 1 По Список.РазмерСписка() Цикл
		
		Пред	=	"";
	    Зн		=	Список.ПолучитьЗначение(Сч, Пред);
		
		Если		Пред = "Атрибут"								Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				Если ТипЗначенияСтр(Объект) = "Справочник" Тогда
					Объект.ИспользоватьДату(ФормДатаКон, 1);
				КонецЕсли;
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
		ИначеЕсли	Пред = "ИтогПоКолонке"							Тогда
			
			Объект	=	Объект.Итог(Зн);
			                     
		ИначеЕсли	Пред = "Конкатенация"							Тогда
			
			Если Найти(Зн, "()") = 0 Тогда
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(Объект.ПолучитьАтрибут(Зн)));
			Иначе
				СтрокаСумма	=	СтрокаСумма	+	СокрЛ(ПолучитьИдОбъектаИсточника(ПолучитьЗначениеМетодом(Объект, Зн)));
			КонецЕсли;
			
		ИначеЕсли	Пред = "ДополнитьНулями"						Тогда

			Если Найти(Зн, "()") = 0 Тогда
				Объект	=	Объект.ПолучитьАтрибут(Зн);
			Иначе
				Объект	=	ПолучитьЗначениеМетодом(Объект, Зн);
			КонецЕсли;
			
			Объект	=	ДополнитьНулями(Объект, Приемник_Длина);
			                      
		ИначеЕсли	Пред = "ПолучитьИзПараметров"					Тогда
			
			Возврат("#ПолучитьИзПараметров");
			
		ИначеЕсли	Найти(Пред, "ИспользоватьСубконтоСчета") > 0	Тогда
			
			Правило	=	"";
			Счет	=	Объект.ПолучитьАтрибут(Зн);
			Если ПустоеЗначение(Счет)					= 1	Тогда	Возврат("")	КонецЕсли;
			Если НайтиПравило(Счет, Правило, ИдПравила)	= 0	Тогда	Возврат("")	КонецЕсли;
			    
			ИдПравила			=	"";
			УзелЗначения		=	Правило.ВыбратьУзел("Значение[@Источник=""" + Счет.Код + """]");
			Если ПустоеЗначение(УзелЗначения) = 1 Тогда	ЗаписатьОшибку("Не найдено правило конвертации значения " + Счет, "!"); Возврат("");	КонецЕсли;
			
			НомерСубконто		=	СокрЛП(СтрЗаменить(Пред, "ИспользоватьСубконтоСчета_", ""));
			
			Запрос				=	"Реквизит[(Приемник/@НомерСубконто = """ + НомерСубконто + """)]";
			АтрибутыЗначения	=	УзелЗначения.ВыбратьУзлы(Запрос);
			КоличествоУзлов		=	АтрибутыЗначения.КоличествоУзлов();
			Если ПустоеЗначение(КоличествоУзлов) = 1 Тогда Возврат("") КонецЕсли;
			     
			СписокВозможныхЗначений	=	Реквизит;
			
			Для СчАтрибутов = 0 По КоличествоУзлов - 1 Цикл
				АтрибутЗначения	=	АтрибутыЗначения.ПолучитьУзел(СчАтрибутов);
				                                                            
				Если (ПустоеЗначение(Реквизит) = 1) Или (Реквизит = "#Получить") Или (ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений") Тогда
					РеквИсточник	=	АтрибутЗначения.ВыбратьУзел("Источник");
					Если ПустоеЗначение(РеквИсточник) = 0 Тогда
						ТипРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Тип");
						ВидРеквИсточника		=	РеквИсточник.ПолучитьАтрибут("Вид");
						НомерСубконтоИсточника	=	РеквИсточник.ПолучитьАтрибут("НомерСубконто");
						Если ТипЗначенияСтр(СписокВозможныхЗначений) = "СписокЗначений" Тогда
							Реквизит		=	ПодобратьЗначениеПоТипу(СписокВозможныхЗначений, ТипРеквИсточника, ВидРеквИсточника);
						Иначе
							Реквизит		=	ПодобратьЗначениеПоТипу(Объект, ТипРеквИсточника, ВидРеквИсточника, НомерСубконтоИсточника);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				                        
				Усл	=	АтрибутЗначения.ВыбратьУзел("Условия");
				Если ПустоеЗначение(Усл) = 0 Тогда
					Если УсловияВыполняются(Усл, Реквизит) = 0 Тогда Продолжить	КонецЕсли;
				КонецЕсли;
				
				ИдПравила	=	"";
				НайтиПравилоДляАтрибутаЗначения(Реквизит, , ИдПравила, АтрибутЗначения);
				Возврат(Реквизит);
			КонецЦикла;
			
		ИначеЕсли	Найти("ОбъектИлиРеквизит,Значение", Пред) > 0	Тогда
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустоеЗначение(СтрокаСумма) = 1 Тогда
		Возврат(Объект);
	Иначе
		Возврат(СтрокаСумма);
	КонецЕсли;
	
КонецФункции		//	ВыполнитьПреобразование()

//--------------------------------------------------------------------------------------------------
                                                                                           
Функция ПолучитьПараметрыПравила(СписокСтрокой, Знач Объект, Знач Реквизит="", СписокПараметровПравила="")

	СписокИсточник	=	ЗначениеИзСтроки(СписокСтрокой);
	Если ТипЗначенияСтр(СписокИсточник) <> "СписокЗначений" Тогда Возврат("") КонецЕсли;
	
	СписокПриемник	=	СоздатьОбъект("СписокЗначений");
    
	Для Сч = 1 По СписокИсточник.РазмерСписка() Цикл
		Атрибут		=	"";
		Значение	=	ВыполнитьПреобразование(СписокИсточник.ПолучитьЗначение(Сч, Атрибут), Объект, Реквизит);
		Если Значение = "#ПолучитьИзПараметров" Тогда
			Если ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
				ЗначениеАтрибутаИзСписка = СписокПараметровПравила.Получить(Атрибут);
				Если ПустоеЗначение(ЗначениеАтрибутаИзСписка) = 0 Тогда
					СписокПриемник.ДобавитьЗначение(ЗначениеАтрибутаИзСписка, Атрибут);
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустоеЗначение(Значение) = 0 Тогда
				СписокПриемник.ДобавитьЗначение(Значение, Атрибут);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат(СписокПриемник);
	
КонецФункции		//	ПолучитьПараметрыПравила()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ДобавитьРеквизит(Таб, Источник, Приемник="", Знач Зн="#Получить", Знач СпособЗагрузкиПоУмолчанию="", СписокДопПараметровПравила="")
	                                                       
	ИдПравилаРеквизитов		=	Таб.Ид;
	ВидУсловия				=	Таб.ВидУсловия;
	
	Если		ВидУсловия = 1 Тогда		//	условие задано по объекту
		Условия				=	Таб.Условия;
		Если УсловияВыполняются(Условия, Источник) = 0 Тогда Возврат("") КонецЕсли;
	ИначеЕсли	ВидУсловия = 2 Тогда			//	условие задано по значению реквизита
		Условия				=	Таб.Условия;
	КонецЕсли;
	
	
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	
	Источник_Ид				=	Таб.Источник_Ид;
	Источник_Тип			=	Таб.Источник_Тип;
	Источник_ТипАтрибута	=	Таб.Источник_ТипАтрибута;
	
	Приемник_Ид				=	Таб.Приемник_Ид;
	Приемник_ТипАтрибута	=	Таб.Приемник_ТипАтрибута;
	Приемник_Тип			=	Таб.Приемник_Тип;
	Приемник_Вид			=	Таб.Приемник_Вид;
	Приемник_Длина			=	Таб.Приемник_Длина;
	
	Преобразование			=	Таб.Преобразование;
	ПравилоВыгрузки			=	Таб.Правило;
	
	ЕстьПроцедура			=	Таб.ЕстьПроцедура;
	ПараметрыПравила		=	Таб.ПараметрыПравила;
	ПолучитьИзПараметров	=	Таб.ПолучитьИзПараметров;
	
	СпособЗагрузки			=	Таб.СпособЗагрузки;
	                         
	
	//-------------------------------------------
	
	
    Если		(ТипИсточника = "Справочник") Или (ТипИсточника = "Счет")	Тогда
		
		ЭтоГруппа		=	Источник.ЭтоГруппа();
		Если (Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		Если (Найти(Приемник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда	Возврат("")	КонецЕсли;
		
		
		Если	(	(Найти(Источник_ТипАтрибута, "Г") > 0)		Или
					(Найти(Приемник_ТипАтрибута, "Г") > 0)	)	И	(ЭтоГруппа = 0) Тогда
			//	Проверим: не указано ли уже в xml-объекте что это все-таки группа
			Если ПустоеЗначение(Приемник.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
				УзелДляПроверки	=	Приемник.ВыбратьУзел("Ссылка");
				Если ПустоеЗначение(УзелДляПроверки) = 0 Тогда
					Если ПустоеЗначение(УзелДляПроверки.ПолучитьАтрибут("ЭтоГруппа")) = 1 Тогда
						Возврат("");
					КонецЕсли;
				Иначе
					Возврат("");	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "Документ"		Тогда
		
		Если Источник_Ид = "ВремяДок" Тогда
			Зн	=	Источник.ПолучитьВремя();
		КонецЕсли;
		
	ИначеЕсли	ТипИсточника = "ЖурналРасчетов"	Тогда
		    
		ПервичнаяЗапись	=	Источник.ПервичнаяЗапись;	//	через две точки не работает!
		Если		Источник_Ид = "ДокументПервичнойЗаписи"		Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			Зн	=	ПервичнаяЗапись.РодительскийДокумент;
			Если ПустоеЗначение(Зн) = 1 Тогда 	Возврат("") КонецЕсли;
		ИначеЕсли	Источник_Ид = "РегистрацияПервичнойЗаписи"	Тогда
			Если ПустоеЗначение(ПервичнаяЗапись) = 1 Тогда Возврат("") КонецЕсли;
			ПериодРегистрации	=	ПервичнаяЗапись.ПериодРегистрации;
			Зн					=	ПериодРегистрации.ДатаНачала;
		КонецЕсли;
		
	КонецЕсли;
    
	
	//-------------------------------------------
	           
	
	ПрерватьПослеОбработки	=	0;
	Если	ПустоеЗначение(ЕстьПроцедура) = 0 Тогда
		Зн	=	ДополнительныеПреобразования("ПравилоРеквизита", ИдПравилаРеквизитов, Источник, Приемник, СписокДопПараметровПравила);
		Если		Зн = 0 Тогда
			
			Возврат(0);
			
		ИначеЕсли	Зн = "#Прервать" Тогда
			
			Возврат("#Прервать");
			
		ИначеЕсли	Зн = "#ПрерватьПослеОбработки"	Тогда
			
			ЕстьПроцедура			=	0;
			ПрерватьПослеОбработки	=	1;
			
		ИначеЕсли	Зн = "#ПрерватьПереборСтрок"	Тогда
			
			Возврат("#ПрерватьПереборСтрок");
			
		КонецЕсли;
	КонецЕсли;
	                                             
	
	//-------------------------------------------
	
	
	ЗначениеИстории		=	"";
        
	Если	ПустоеЗначение(ЕстьПроцедура) = 1 Тогда
		
		Если		Источник_ТипАтрибута = "М"								Тогда
			Зн	=	ПолучитьЗначениеМетодом(Источник, Источник_Ид);
		ИначеЕсли	(Зн = "#Получить") И (ПустоеЗначение(Источник_Ид) = 0)	Тогда
			Если		(Найти("АО,РО", Источник_ТипАтрибута) > 0) И (ТипИсточника <> "Операция")	Тогда
				Зн		=	Источник.Операция.ПолучитьАтрибут(Источник_Ид);
			ИначеЕсли	Источник_ТипАтрибута = "ПК"	Тогда
				Врем	=	СоздатьОбъект("Периодический");
				Врем.ИспользоватьОбъект(Источник_Ид);
				Зн		=	Врем.ЗначениеНаДату( ?(ПустоеЗначение(ФормДатаКон)=1, РабочаяДата(), ФормДатаКон) );
			ИначеЕсли	Источник_ТипАтрибута = "К"	Тогда
				Зн		=	Константа.ПолучитьАтрибут(Источник_Ид);
			Иначе
				//Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
				
				//	Это помогает при отладке
				Попытка
					Зн		=	Источник.ПолучитьАтрибут(Источник_Ид);
				Исключение
				    Сообщить("Неверное имя реквизита! Объект:  " + Источник + ";   Реквизит:  " + Источник_Ид + ";   Правило реквизита:  " + ИдПравилаРеквизитов);
				КонецПопытки;
			КонецЕсли;
		ИначеЕсли	ТипЗначенияСтр(Зн) = "Периодический" Тогда
			ЗначениеИстории	=	Зн;
			Зн				=	ЗначениеИстории.Значение;
			ДатаЗначения	=	ЗначениеИстории.ДатаЗнач;
		ИначеЕсли	ПустоеЗначение(ПолучитьИзПараметров) = 0	Тогда
			Если ТипЗначенияСтр(СписокДопПараметровПравила) = "СписокЗначений" Тогда
				Зн			=	СписокДопПараметровПравила.Получить(Приемник_Ид);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	
	
	Если ВидУсловия = 2 Тогда	//	т.е. условие задано по значению реквизита
		Если УсловияВыполняются(Условия, Зн) = 0 Тогда Возврат("") КонецЕсли;
	КонецЕсли;
	
	
	
	Если		ПустоеЗначение(Преобразование) = 0	Тогда
		Зн	=	ВыполнитьПреобразование(Преобразование, Источник, Зн, ПравилоВыгрузки, Приемник_Длина);
	КонецЕсли;
	
	
	Если	Зн = "#Получить" Тогда	// значит это виртуальный объект (которого нет в базе источнике)
		Зн				=	"";
	//ИначеЕсли	Найти("Строка,Дата,Число", Приемник_Тип) > 0 Тогда
		// Хорошо бы здесь в таком случае сразу ПолучитьИдОбъектаИсточника()
	ИначеЕсли	(СпособЗагрузки				=	"ЗамещатьНеПустыми")	Или 
				((СпособЗагрузкиПоУмолчанию	=	"ЗамещатьНеПустыми")	И	(ПустоеЗначение(СпособЗагрузки) = 1))	Тогда
		Если ПустоеЗначение(Зн) = 1 Тогда	Возврат("")	КонецЕсли;
	КонецЕсли;

	
	Если	ПустоеЗначение(ПараметрыПравила) = 0	Тогда
		ПараметрыПравила = ПолучитьПараметрыПравила(ПараметрыПравила, Источник, Зн, СписокДопПараметровПравила);
	КонецЕсли;
	
	
	
	УзелСсылки				=	1;		// означает что нам нужна ссылка
	Значение				=	Выгрузить(Зн, ПравилоВыгрузки, УзелСсылки, ПараметрыПравила, Приемник_Тип, Приемник_Вид);
	
	
	
	Если		Приемник_ТипАтрибута = "М"			Тогда
		
		Если		Приемник_Ид = "ЭтоГруппа()"			Тогда
			УстановитьАтрибут(Приемник, "ЭтоГруппа", Значение);
			Возврат("");
		ИначеЕсли	Приемник_Ид = "СистемноеПредставление()"	Тогда
			
		Иначе
			Возврат(Значение);
		КонецЕсли;
		
	КонецЕсли;
	
    
	
	Если ПустоеЗначение(Приемник_Ид)	= 1	Тогда	Возврат(Значение)	КонецЕсли;
	Если ПустоеЗначение(Приемник)		= 1	Тогда	Возврат(Значение)	КонецЕсли;
	
	
	
	//-------------- xml --------------
	
	Если ПустоеЗначение(ЗначениеИстории) = 1 Тогда
		Если (Приемник_ТипАтрибута = "К") Или (Приемник_ТипАтрибута = "ПК") Тогда
		    Реквизит	=	Приемник;
		Иначе
			Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
		КонецЕсли;
		УстановитьАтрибут(Реквизит,	"Идентификатор",	Приемник_Ид);
		УстановитьАтрибут(Реквизит,	"Значение", 		Значение);
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Реквизит,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
	Иначе
		Если СпособЗагрузки <> "Поиск" Тогда
			УстановитьАтрибут(Приемник,	"СпособЗагрузки",	СпособЗагрузки);
		КонецЕсли;
		Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("История");
		УстановитьАтрибут(Реквизит,	"Дата",			Выгрузить(ДатаЗначения));
		УстановитьАтрибут(Реквизит,	"Значение",		Значение);
	КонецЕсли;
	
	
	Если 		Найти("АО,РО", Приемник_ТипАтрибута) = 0	Тогда
	ИначеЕсли	ТипИсточника <> "Операция"					Тогда
		УстановитьАтрибут(Реквизит,	"ЭтоРеквизитОперации", "1");
	КонецЕсли;
	
        
	Если УзелСсылки <> 1 Тогда	// значит узел ссылки создан
		Реквизит.ДобавитьПодчиненный(УзелСсылки);
	КонецЕсли;
	
	
	Если	(Приемник_Тип	=	"Неопределенный")	Или
			((ПустоеЗначение(Приемник_Вид) = 1)		И	(Найти("Справочник,Документ,Перечисление,Счет", Приемник_Тип) > 0)) Тогда
				
		Если  ПустоеЗначение(ПравилоВыгрузки) = 1 Тогда
			Т	=	ТипЗначенияСтр(Зн);
			Если (ПустоеЗначение(Зн) = 1) И (Т = "Строка") Тогда
				Приемник.УдалитьПодчиненный(Реквизит);
			Иначе
				УстановитьАтрибут(Реквизит,	"ТипЗначения", 	Т);
			КонецЕсли;
		ИначеЕсли ПустоеЗначение(НайтиПравило(Зн, , ПравилоВыгрузки)) = 0 Тогда
			УстановитьАтрибут(Реквизит,	"ТипЗначения", 	гТабКэшПравил.Приемник_Тип);
			УстановитьАтрибут(Реквизит,	"ВидЗначения", 	гТабКэшПравил.Приемник_Вид);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ПрерватьПослеОбработки = 1 Тогда
		Возврат("#Прервать");
	Иначе
		Возврат("");
	КонецЕсли;
	
КонецФункции		//	ДобавитьРеквизит()

//--------------------------------------------------------------------------------------------------
                                                                                 
Процедура ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила)
	    
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	                                                                  
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
	    ФлНеВыгружатьИсторию		=	1;
		СпособВыгрузки				=	ТабРеквизитов.СпособВыгрузки;
		
		Если ТипИсточника = "Справочник" Тогда
			ЭтоГруппа				=	Источник.ЭтоГруппа();
			
			Источник_ТипАтрибута	=	ТабРеквизитов.Источник_ТипАтрибута;
			Приемник_ТипАтрибута 	=	ТабРеквизитов.Приемник_ТипАтрибута;
		      
			Если 	(Найти(Источник_ТипАтрибута, "Э") > 0) И (ЭтоГруппа = 1)	Тогда Продолжить КонецЕсли;
			Если	(Найти(Источник_ТипАтрибута, "Г") > 0) И (ЭтоГруппа = 0)	Тогда Продолжить КонецЕсли;
			
			Если (СпособВыгрузки = "ВсюИсторию") Или (СпособВыгрузки = "ВсюИсториюРучную") Тогда
				Если (Лев(Источник_ТипАтрибута, 1)="П") И (Лев(Приемник_ТипАтрибута, 1)="П") Тогда
					ФлНеВыгружатьИсторию	=	0;
					Источник_Ид				=	ТабРеквизитов.Источник_Ид;
					Приемник_Ид				=	ТабРеквизитов.Приемник_Ид;
					История					=	СоздатьОбъект("Периодический");
					История.ИспользоватьОбъект(Источник_Ид, Источник);
					
					ДатаНачалаВыборки		=	ФормДатаНач;
					Если ПустоеЗначение(ФормДатаНач) = 0 Тогда
						История.ОбратныйПорядок(1);
						История.ВыбратьЗначения(, ФормДатаНач);
						Если История.ПолучитьЗначение() = 1 Тогда
							ДатаНачалаВыборки	=	История.ДатаЗнач;
						КонецЕсли;
					КонецЕсли;
					        
					
					История.ОбратныйПорядок(0);
					Если История.ВыбратьЗначения(ДатаНачалаВыборки, ФормДатаКон) = 0 Тогда Продолжить; КонецЕсли;
					РеквизитСИсторией	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
					УстановитьАтрибут(РеквизитСИсторией,	"Идентификатор", 	Приемник_Ид);
					Пока История.ПолучитьЗначение() = 1 Цикл
						Если СпособВыгрузки = "ВсюИсториюРучную" Тогда
							Если ПустоеЗначение(История.ТекущийДокумент()) = 0 Тогда Продолжить КонецЕсли;
						КонецЕсли;
						Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, РеквизитСИсторией, История, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;		//	если способ выгрузки "Выгружать историю"
		КонецЕсли;
		
		Если ФлНеВыгружатьИсторию = 1 Тогда
			Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
			Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
		КонецЕсли;
	КонецЦикла;		//	по правилам реквизитов
	
	ЗаписатьОбъектВФайл(Приемник);
	
КонецПроцедуры		//	ВыгрузитьОбъектСправочника()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ВыгрузитьКонстанты(ТабРеквизитов, ИдПравила)
                  
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
		                  
		Источник_ТипАтрибута	=	ТабРеквизитов.Источник_ТипАтрибута;
		Приемник_ТипАтрибута 	=	ТабРеквизитов.Приемник_ТипАтрибута;
		      
		Источник_Ид				=	ТабРеквизитов.Источник_Ид;
		Приемник_Ид				=	ТабРеквизитов.Приемник_Ид;
		СпособВыгрузки			=	ТабРеквизитов.СпособВыгрузки;
		
		Если	ПустоеЗначение(Приемник_Ид) = 1		Тогда	Продолжить	КонецЕсли;
		
		XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
		Приемник				=	XML_DOM.СоздатьУзел(1, "Константа");
		                   
		ИсточникПериодический	=	?(Лев(Источник_ТипАтрибута, 1)="П", 1, 0);
		ПриемникПериодический	=	?(Лев(Приемник_ТипАтрибута, 1)="П", 1, 0);
		
		Если	(ИсточникПериодический = 1) И (ПриемникПериодический = 1) И ( Найти(СпособВыгрузки, "ВсюИсторию")>0 ) Тогда
			История	=	СоздатьОбъект("Периодический");
			История.ИспользоватьОбъект(Источник_Ид);
			
			ДатаНачалаВыборки		=	ФормДатаНач;
			Если ПустоеЗначение(ФормДатаНач) = 0 Тогда
				История.ОбратныйПорядок(1);
				История.ВыбратьЗначения(, ФормДатаНач);
				Если История.ПолучитьЗначение() = 1 Тогда
					ДатаНачалаВыборки	=	История.ДатаЗнач;
				КонецЕсли;
			КонецЕсли;
			
			Если История.ВыбратьЗначения(ДатаНачалаВыборки, ФормДатаКон) = 0 Тогда Продолжить КонецЕсли;
			УстановитьАтрибут(Приемник,	"Идентификатор", 	Приемник_Ид);
			Пока История.ПолучитьЗначение() = 1 Цикл
				Если СпособВыгрузки = "ВсюИсториюРучную" Тогда
					Если ПустоеЗначение(История.ТекущийДокумент()) = 0 Тогда Продолжить КонецЕсли;
				КонецЕсли;
				Результат = ДобавитьРеквизит(ТабРеквизитов, Константа, Приемник, История);
			КонецЦикла;
		Иначе
			Результат = ДобавитьРеквизит(ТабРеквизитов, Константа, Приемник, "#Получить");
		КонецЕсли;
		Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
	
		ЗаписатьОбъектВФайл(Приемник);
		
	КонецЦикла;
	
КонецПроцедуры		//	ВыгрузитьКонстанты()

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьКалендари(Правило, ИдПравила)

	Если (ПустоеЗначение(ФормДатаНач)=1) Или (ПустоеЗначение(ФормДатаКон) = 1) Тогда
		ЗаписатьОшибку("Для выгрузки календарей необходимо выбрать конкретный период!", "!");
		Возврат;
	КонецЕсли;
	
	Если ПустоеЗначение(Правило.ВыбратьУзел("Значение[@Источник = ""Праздники""]")) = 0 Тогда
		Праздники	=	СоздатьОбъект("Праздники");
		Если Праздники.ВыбратьДаты(ФормДатаНач, ФормДатаКон) = 1 Тогда
			XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
			Приемник				=	XML_DOM.СоздатьУзел(1, "Календарь");
			УстановитьАтрибут(Приемник,	"Вид", 	"Праздники");
			Пока Праздники.СледующаяДата() = 1 Цикл
				День	=	Приемник.СоздатьПодчиненныйЭлемент("День");
				УстановитьАтрибут(День,	"Дата", 	Формат(Праздники.Дата, "ДДДММГГГГ") );
				УстановитьАтрибут(День,	"Значение",	Праздники.Значение);
			КонецЦикла;
			ЗаписатьОбъектВФайл(Приемник);
		КонецЕсли;
	КонецЕсли;    
	
	ВидыКалендарей	=	Правило.ВыбратьУзлы("Значение[@Источник != ""Праздники""]");
	Для Сч = 0 По ВидыКалендарей.КоличествоУзлов() - 1 Цикл
		ЭлКалендарь		=	ВидыКалендарей.ПолучитьУзел(Сч);
		ВидИсточника	=	ЭлКалендарь.ПолучитьАтрибут("Источник");
		ВидПриемника	=	ЭлКалендарь.ПолучитьАтрибут("Приемник");
		
		Календарь		=	СоздатьОбъект("Календарь." + ВидИсточника);
		Если Календарь.ВыбратьДаты(ФормДатаНач, ФормДатаКон) = 1 Тогда
			XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
			Приемник				=	XML_DOM.СоздатьУзел(1, "Календарь");
			УстановитьАтрибут(Приемник,	"Вид", 					ВидПриемника);
			УстановитьАтрибут(Приемник,	"ДатаНачала",			Формат(ФормДатаНач, "ДДДММГГГГ") );
			УстановитьАтрибут(Приемник,	"ДатаОкончания",		Формат(ФормДатаКон, "ДДДММГГГГ") );
			УстановитьАтрибут(Приемник,	"УчитыватьПраздники",	1);
			Пока Календарь.СледующаяДата() = 1 Цикл
				День	=	Приемник.СоздатьПодчиненныйЭлемент("День");
				УстановитьАтрибут(День,	"Дата", 	Формат(Календарь.Дата, "ДДДММГГГГ") );
				УстановитьАтрибут(День,	"Значение",	Календарь.Значение);
			КонецЦикла;
			ЗаписатьОбъектВФайл(Приемник);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры		//	ВыгрузитьКалендари()

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила)
	
	//-----------------		Реквизиты	----------------------
	
	ТабРеквизитов.ВыбратьСтроки();
	Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
		Результат = ДобавитьРеквизит(ТабРеквизитов, Источник, Приемник, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
	КонецЦикла;
	
	//-----------------		Строки	----------------------
	
	Если ТабРеквизитовСтрок.КоличествоСтрок() > 0 Тогда
		    
		СтрокиЕсть		=	0;
		Если ТипЗначенияСтр(Источник) = "Документ" Тогда
			СтрокиЕсть	=	Источник.ВыбратьСтроки();
		КонецЕсли;
		
		Если СтрокиЕсть = 1 Тогда
			Пока Источник.ПолучитьСтроку() = 1 Цикл
				Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
				ТабРеквизитовСтрок.ВыбратьСтроки();
				Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
					Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					Если (Результат = "#Прервать") Или (Результат = "#ПрерватьПереборСтрок") Тогда Прервать КонецЕсли;
				КонецЦикла;
				Если Результат = "#ПрерватьПереборСтрок" Тогда Прервать КонецЕсли;
			КонецЦикла;
		Иначе
			ФлагСтрокиОписаныВПараметрах	=	0;
			Если ТипЗначенияСтр(ПараметрыПравила) = "СписокЗначений" Тогда
				Если ПустоеЗначение(ПараметрыПравила.Получить("#Строка")) = 0 Тогда
					ФлагСтрокиОписаныВПараметрах	=	1;
					НовыйСписок						=	СоздатьОбъект("СписокЗначений");
					Для СчПараметров = 1 По ПараметрыПравила.РазмерСписка() Цикл
						СтрРеквизит		=	"";
						ЗначРеквизита	=	ПараметрыПравила.ПолучитьЗначение(СчПараметров, СтрРеквизит);
						Если СтрРеквизит = "#Строка" Тогда Продолжить КонецЕсли;
						НовыйСписок.ДобавитьЗначение(ЗначРеквизита, СтрРеквизит);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ФлагСтрокиОписаныВПараметрах = 1 Тогда
				Для СчПараметров = 1 По ПараметрыПравила.РазмерСписка() Цикл
					СтрРеквизит		=	"";
					ЗначРеквизита	=	ПараметрыПравила.ПолучитьЗначение(СчПараметров, СтрРеквизит);
					Если СтрРеквизит <> "#Строка" Тогда Продолжить КонецЕсли;
					ОкончательныйСписокПараметров	=	СоздатьОбъект("СписокЗначений");
					НовыйСписок.Выгрузить(ОкончательныйСписокПараметров);
					Для Ссс = 1 По ЗначРеквизита.РазмерСписка() Цикл
						СссСтр	=	"";
						СссЗн	=	ЗначРеквизита.ПолучитьЗначение(Ссс, СссСтр);
						ОкончательныйСписокПараметров.ДобавитьЗначение(СссЗн, СссСтр);
					КонецЦикла;
					Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
					ТабРеквизитовСтрок.ВыбратьСтроки();
					Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
						Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ОкончательныйСписокПараметров);
						Если (Результат = "#Прервать") Или (Результат = "#ПрерватьПереборСтрок") Тогда Прервать КонецЕсли;
					КонецЦикла;
					Если Результат = "#ПрерватьПереборСтрок" Тогда Прервать КонецЕсли;
				КонецЦикла;
			Иначе
				//	для правил вида: "РШД -> РТД" (когда в источнике нет табличной части) - сливаем все в одну строку
				Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
				ТабРеквизитовСтрок.ВыбратьСтроки();
				Пока ТабРеквизитовСтрок.ПолучитьСтроку() = 1 Цикл
					Если ТабРеквизитовСтрок.Источник_ТипАтрибута = "РТД" Тогда Продолжить КонецЕсли; // м.б. в документе просто нет строк
					Результат = ДобавитьРеквизит(ТабРеквизитовСтрок, Источник, Эл_Строка, "#Получить", СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
					Если Результат = "#Прервать" Тогда Прервать КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	              
	ЗаписатьОбъектВФайл(Приемник);
	
КонецПроцедуры		//	ВыгрузитьДокумент()

//--------------------------------------------------------------------------------------------------

Функция ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита="")
    
	Если ПустоеЗначение(СокрЛП(Источник)) = 1 Тогда Возврат("") КонецЕсли;
	
	СтрИсточник		=	"";
	ТипИсточника	=	ТипЗначенияСтр(Источник);

	Если		ТипИсточника	= "Число" 			Тогда	СтрИсточник	=	Строка(Источник);
	ИначеЕсли	ТипИсточника	= "Строка" 			Тогда	СтрИсточник	=	СокрП(Источник);
	ИначеЕсли 	ТипИсточника	= "Дата" 			Тогда	СтрИсточник	=	Формат(Источник, "ДДДММГГГГ");
	
	ИначеЕсли 	ТипИсточника	= "Перечисление"	Тогда	СтрИсточник	=	Источник.Идентификатор();
		
	ИначеЕсли 	ТипИсточника	= "ПланСчетов" 		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "ВидСубконто"		Тогда	СтрИсточник	=	Источник.Идентификатор();
	ИначеЕсли 	ТипИсточника	= "Календарь" 		Тогда	СтрИсточник	=	Источник.Вид();
	ИначеЕсли 	ТипИсточника	= "ВидРасчета" 		Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Счет" 			Тогда	СтрИсточник	=	Источник.Код;
		
	ИначеЕсли 	ТипИсточника	= "Справочник"		Тогда
		
		Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "Наименование"	КонецЕсли;
		СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
	ИначеЕсли 	ТипИсточника	= "Документ"		Тогда

		//Если ПустоеЗначение(ИдСинхронизирующегоРеквизита) = 1 Тогда ИдСинхронизирующегоРеквизита = "НомерДок"		КонецЕсли;
		//СтрИсточник	=	СокрЛП(Источник.ПолучитьАтрибут(ИдСинхронизирующегоРеквизита));
		
		СтрИсточник	=	СокрЛП(Источник);
	
	Иначе
		
		ЗаписатьОшибку("Неизвестный тип объекта:   " + ТипИсточника);
		
	КонецЕсли;
	          
	Возврат(СтрИсточник);
	
КонецФункции		//	ПолучитьИдОбъектаИсточника()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ВыгрузитьПоПравилу(Знач Источник="", Правило="", ИдПравила="", УзелСсылки=1, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="", НеСинхронизироватьПоДопПараметрам=0)
	  
	Перем	ТабРеквизитов;
	Перем	ТабРеквизитовПоиска;
	Перем	ТабРеквизитовСтрок;
	
	Если НайтиПравило(Источник, Правило, ИдПравила, ТипПриемника, ВидПриемника) = 0	Тогда	Возврат("")	КонецЕсли;

	
	ТипИсточника			=	ТипЗначенияСтр(Источник);
	Если (ТипПриемника = "") Или (ТипПриемника = "Неопределенный") Тогда
		ТипПриемника		=	гТабКэшПравил.Приемник_Тип;
	КонецЕсли;
	
	
	Преобразование			=	гТабКэшПравил.Преобразование;
	ПравилоПереадресации	=	гТабКэшПравил.ПравилоПереадресации;
	
	Если ПустоеЗначение(Преобразование)			= 0	Тогда	Источник =	ВыполнитьПреобразование(Преобразование, Источник)		КонецЕсли;
	Если ПустоеЗначение(ПравилоПереадресации)	= 0	Тогда	Возврат		Выгрузить(Источник, ПравилоПереадресации, УзелСсылки)	КонецЕсли;
	
	
	Если 		ТипПриемника	=	"Справочник"	Тогда	Тег	=	"ОбъектСправочника";
	ИначеЕсли 	ТипПриемника	=	"Документ"		Тогда	Тег	=	"Документ";
	ИначеЕсли 	ТипПриемника	=	"Константа"		Тогда
		гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
		ВыгрузитьКонстанты(ТабРеквизитов, ИдПравила);
		Возврат("");
	ИначеЕсли 	ПустоеЗначение(ТипПриемника) = 1	Тогда	//	???
		//Тег			=	ТипИсточника;
		Тег				=	"ОбъектСправочника";
		ТипПриемника	=	ТипИсточника;
	Иначе
	    //-------	Найдем идентифицирующее значение объекта ----------------
		
		ИдСинхронизирующегоРеквизита	=	гТабКэшПравил.ИдСинхронизирующегоРеквизита;
		ИдОбъектаИсточника				=	ПолучитьИдОбъектаИсточника(Источник, ИдСинхронизирующегоРеквизита);	// на пустое не проверяем специально
		//УзелЗначения					=	Правило.ВыбратьУзел("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		//Если ПустоеЗначение(УзелЗначения) = 0 Тогда Возврат(УзелЗначения.ПолучитьАтрибут("Приемник")) КонецЕсли;

		ВыборкаУзловЗначений			=	Правило.ВыбратьУзлы("Значение[@Источник=""" + ИдОбъектаИсточника + """]");
		КолвоУзлов						=	ВыборкаУзловЗначений.КоличествоУзлов();
		УзелНайден						=	0;
		Если		КолвоУзлов = 1 Тогда
			УзелНайден		=	1;
			УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(0);
			//Возврат ВыборкаУзловЗначений.ПолучитьУзел(0).ПолучитьАтрибут("Приемник");
		ИначеЕсли	КолвоУзлов > 1 Тогда	//	в таком случае считаем что условия заданы обязательно
			Для Сч = 0 По КолвоУзлов - 1 Цикл
				УзелЗначения	=	ВыборкаУзловЗначений.ПолучитьУзел(Сч);
				Если УсловияВыполняются(УзелЗначения.ВыбратьУзел("Условия"), Источник) = 1 Тогда
					УзелНайден	=	1;
					Прервать;
					//Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если УзелНайден = 1 Тогда
			Если ПустоеЗначение(УзелЗначения.ПолучитьАтрибут("ЕстьПроцедура")) = 1 Тогда
				Возврат УзелЗначения.ПолучитьАтрибут("Приемник");
			Иначе
				ИдПравилаЗначения	=	УзелЗначения.ПолучитьАтрибут("Ид");
				Зн					=	ДополнительныеПреобразования("ПравилоЗначения", ИдПравилаЗначения, Источник, УзелЗначения.ПолучитьАтрибут("Приемник"));	// на всякий случай передадим туда значение приемника
				Возврат(Зн);
			КонецЕсли;
		КонецЕсли;
		   
		//	В значениях не нашли, тогда попробуем правила реквизитов посмотреть
		
		гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
		
        ТабРеквизитов.ВыбратьСтроки();
        Пока ТабРеквизитов.ПолучитьСтроку() = 1 Цикл
			Результат	=	ДобавитьРеквизит(ТабРеквизитов, Источник, , , , ПараметрыПравила);		//	обработка методов со стороны приемника
			Если ПустоеЗначение(Результат) = 0 Тогда	Возврат(Результат)	КонецЕсли;
        КонецЦикла;
		                                         
		Если		ПустоеЗначение(Преобразование) = 0		Тогда
			Возврат(Источник);
		ИначеЕсли	ПустоеЗначение(ИдОбъектаИсточника) = 0	Тогда
			ЗаписатьОшибку("Не найдено соответствие для значения источника:  " + ТипИсточника + "." + гТабКэшПравил.Источник_Вид + "." + ИдОбъектаИсточника,  "!");
		КонецЕсли;
		
		Возврат("");
	КонецЕсли;
    
	
	// если объект не виртуальный и источник пустой
	Если	(ПустоеЗначение(гТабКэшПравил.Источник_Тип) = 0)	И
			(ПустоеЗначение(СокрЛП(Источник)) = 1)				И
			(ПустоеЗначение(ПараметрыПравила) = 1)				Тогда	Возврат("") КонецЕсли;
	
	                                                         
	гТабКэшПравил.ТабРеквизитов.Выгрузить(ТабРеквизитов);
	гТабКэшПравил.ТабРеквизитовПоиска.Выгрузить(ТабРеквизитовПоиска);
	гТабКэшПравил.ТабРеквизитовСтрок.Выгрузить(ТабРеквизитовСтрок);
	
	ПараметрыЗагрузки			=	гТабКэшПравил.ПараметрыЗагрузки;
	
	ЗагрузитьПараметрыЗагрузки("", ПараметрыЗагрузки);
	СтатусУдаления				=	гТабКэшПараметровЗагрузки.СтатусУдаления;
	СпособЗагрузкиПоУмолчанию	=	гТабКэшПараметровЗагрузки.СпособЗагрузки;
	НовыеНеСоздавать			=	гТабКэшПараметровЗагрузки.НовыеНеСоздавать;
	СтатусПроведения			=	гТабКэшПараметровЗагрузки.СтатусПроведения;
	
	
	Если ОбъектУжеВыгружен(Источник, ТабРеквизитовПоиска, ИдПравила, УзелСсылки, , ПараметрыПравила, НовыеНеСоздавать, НеСинхронизироватьПоДопПараметрам) = 1 Тогда Возврат("") КонецЕсли;
	
	
	Если ПустоеЗначение(Источник) = 0 Тогда
	    Если		ТипИсточника = "Справочник"	Тогда
			Источник.ИспользоватьДату(ФормДатаКон, 1);
		ИначеЕсли	ТипИсточника = "Счет"		Тогда
			Источник.ИспользоватьДату(ФормДатаКон);
		КонецЕсли;
	КонецЕсли;
	
	
	XML_DOM					=	гXMLАнализатор.СоздатьДокумент();
	Приемник				=	XML_DOM.СоздатьУзел(1, Тег);
	        
	Если (ПустоеЗначение(УзелСсылки) = 0) И (УзелСсылки <> 1) Тогда
		Приемник.ДобавитьПодчиненный(УзелСсылки);
		УзелСсылки	=	Приемник.ВыбратьУзел("Ссылка");
	КонецЕсли;
	
	
	УстановитьАтрибут(Приемник,	"Правило", ИдПравила);
	Если	(Найти("Справочник,Документ", ТипПриемника) > 0) И
			(Найти("Справочник,Документ", ТипИсточника) > 0) Тогда
		УстановитьАтрибут(Приемник,	"ПометитьНаУдаление",	ПометкаУдаления(Источник, СтатусУдаления));
	КонецЕсли;
	
	
	Если 		ТипПриемника	= "Справочник"		Тогда
		
	    Если		ТипИсточника = "Справочник"	Тогда
			УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
		ИначеЕсли	ТипИсточника = "Счет"		Тогда
			УстановитьАтрибут(Приемник,	"ЭтоГруппа", Источник.ЭтоГруппа());
		КонецЕсли;
		ВыгрузитьОбъектСправочника(Источник, Приемник, ТабРеквизитов, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
	ИначеЕсли 	ТипПриемника	= "Документ"		Тогда
		
		Если ТипИсточника = "Документ"	Тогда
			УстановитьАтрибут(Приемник,	"ОтменитьПроведение",	ОтменитьПроведение(Источник, СтатусПроведения));
		КонецЕсли;
		ВыгрузитьДокумент(Источник, Приемник, ТабРеквизитов, ТабРеквизитовСтрок, ИдПравила, СпособЗагрузкиПоУмолчанию, ПараметрыПравила);
		
	КонецЕсли;
    
	
	Возврат("");
	
КонецФункции		//	ВыгрузитьПоПравилу()
            
//--------------------------------------------------------------------------------------------------

Функция Выгрузить(Источник, ИдПравила="", УзелСсылки=0, ПараметрыПравила="", Знач ТипПриемника="", Знач ВидПриемника="")
	
	Если ПустоеЗначение(ИдПравила) = 0 Тогда
		Возврат	ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
	КонецЕсли;
	
	
	Если (ПустоеЗначение(СокрЛП(Источник)) = 1) И (ТипПриемника <> "Неопределенный") Тогда
		Возврат("");
	КонецЕсли;
	
	
	ТипИсточника	=	ТипЗначенияСтр(Источник);
	
	Если		ПустоеЗначение(ТипПриемника) = 0	Тогда
		
		Если		Найти("Справочник,Документ,Неопределенный", ТипПриемника) = 0 Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		ИначеЕсли	(ТипПриемника = "Неопределенный") И (Найти("Справочник,Документ,Перечисление,Счет", ТипИсточника) = 0) Тогда
			Возврат	ПолучитьИдОбъектаИсточника(Источник);
		Иначе
			Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		КонецЕсли;
		
	ИначеЕсли	Найти("Справочник,Документ", ТипИсточника) = 0 Тогда
		
		Возврат	ПолучитьИдОбъектаИсточника(Источник);
		
	Иначе
		
		Возврат ВыгрузитьПоПравилу(Источник, , ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		
	КонецЕсли;
	
КонецФункции		//	Выгрузить()

//--------------------------------------------------------------------------------------------------
                                                                                                     
Функция ВыгрузитьДанныеПоПравилу(Эл_Правило)
    
	ИдПравила				=	Эл_Правило.ПолучитьАтрибут("Ид");
	ИмяПравила				=	Эл_Правило.ПолучитьАтрибут("Имя");
	ПоСсылкам				=	Эл_Правило.ПолучитьАтрибут("ПоСсылкам");
	ЕстьПроцедураВыборки	=	Эл_Правило.ПолучитьАтрибут("ЕстьПроцедураВыборки");
	ИспользоватьВладельцев	=	Эл_Правило.ПолучитьАтрибут("ИспользоватьВладельцев");
    
	
	Если ПустоеЗначение(Число(ПоСсылкам))								=	0	Тогда	Возврат(1)	КонецЕсли;	//	продолжаем перебор правил...
        
	
	Если ПустоеЗначение(ЕстьПроцедураВыборки) = 0 Тогда
	    Результат	=	ДополнительныеПреобразования("ПравилоВыборкиОбъектов", ИдПравила );
		Если Результат = "#Прервать" Тогда
			Предупреждение("Выгрузка данных прекращена согласно инструкции правила: '" + ИмяПравила + "' !");
			Возврат("Возврат");
		КонецЕсли;
	КонецЕсли;
                                                                           
	
	
	ЗагрузитьПравило(Эл_Правило, ИдПравила);
	
	Источник_Тип		=	гТабКэшПравил.Источник_Тип;
	Источник_Вид		=	гТабКэшПравил.Источник_Вид;
	
	Приемник_Тип		=	гТабКэшПравил.Приемник_Тип;
	Приемник_Вид		=	гТабКэшПравил.Приемник_Вид;
	
	
	
	Если ПустоеЗначение(ЕстьПроцедураВыборки) = 1 Тогда
		Если ПустоеЗначение(Источник_Тип) = 1 Тогда	//	возможно это виртуальный объект...
			ВыгрузитьПоПравилу(, Эл_Правило, ИдПравила);
			Возврат(1);
		КонецЕсли;
	КонецЕсли;
	
	
	//----	Выборки	-------------
	
	Если 			ПустоеЗначение(ЕстьПроцедураВыборки) = 0		Тогда
		
	ИначеЕсли		Источник_Тип	=	"Справочник"				Тогда
		    
		ОбъектВыгрузки = СоздатьОбъект("Справочник." + Источник_Вид);
		Если ПустоеЗначение(ИспользоватьВладельцев) = 1 Тогда
			ОбъектВыгрузки.ВыбратьЭлементы(0);
			Пока ОбъектВыгрузки.ПолучитьЭлемент() = 1 Цикл
				ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийЭлемент(), Эл_Правило, ИдПравила);
			КонецЦикла;
		Иначе
			ИдВладельца			=	Метаданные.Справочник(Источник_Вид).Владелец.Идентификатор;
			Запрос				=	"//Правило[(ОбъектИсточник/@Тип = ""Справочник"")and(ОбъектИсточник/@Вид = """ + ИдВладельца + """)]";
			ПравилаВладельца	=	гПравила.ВыбратьУзлы(Запрос);
			Для Сч = 0 По ПравилаВладельца.КоличествоУзлов() - 1 Цикл
				ПравилоВладельца			=	ПравилаВладельца.ПолучитьУзел(Сч);
				ИдПравилаВладельца			=	ПравилоВладельца.ПолучитьАтрибут("Ид");
				//СписокВыгруженныхВладельцев	=	СписокСписковВыгруженныхОбъектов.Получить(ИдПравилаВладельца);
				НомСтр						=	"";
				Если ТабВыгруженныхОбъектов.НайтиЗначение(ИдПравилаВладельца, НомСтр, "ИдПравила") = 0 Тогда Продолжить КонецЕсли;
				ТабОбъектов	=	ТабВыгруженныхОбъектов.ПолучитьЗначение(НомСтр, "ТабОбъектов");
				//Если ТипЗначенияСтр(СписокВыгруженныхВладельцев) <> "СписокЗначений" Тогда Продолжить КонецЕсли;
				//Для СчВладельцев = 1 По СписокВыгруженныхВладельцев.РазмерСписка() Цикл
				ТабОбъектов.ВыбратьСтроки();
				Пока ТабОбъектов.ПолучитьСтроку() = 1 Цикл
					//СистПредставлениеВладельца	=	"";
					//СписокВыгруженныхВладельцев.ПолучитьЗначение(СчВладельцев, СистПредставлениеВладельца);
					СистПредставлениеВладельца	=	ТабОбъектов.Объект;
					Если Найти(СистПредставлениеВладельца, "}") > 0 Тогда
						ОтделитьРазделителем(СистПредставлениеВладельца, "}", 1);
					    ЭлементВладелец	=	ЗначениеИзСтрокиВнутр(СистПредставлениеВладельца);
					Иначе
						ЭлементВладелец	=	СистПредставлениеВладельца;
					КонецЕсли;
					ОбъектВыгрузки.ИспользоватьВладельца(ЭлементВладелец);
					ОбъектВыгрузки.ВыбратьЭлементы(1);
					Пока ОбъектВыгрузки.ПолучитьЭлемент() = 1 Цикл
						ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийЭлемент(), Эл_Правило, ИдПравила);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли		Источник_Тип	=	"Документ"					Тогда
		
		ОбъектВыгрузки	=	СоздатьОбъект("Документ." + Источник_Вид);
		ОбъектВыгрузки.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока ОбъектВыгрузки.ПолучитьДокумент() = 1 Цикл
			ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийДокумент(), Эл_Правило, ИдПравила);
		КонецЦикла;
	
	ИначеЕсли		Источник_Тип	=	"Регистр"					Тогда
		                           
		
	ИначеЕсли		Источник_Тип	=	"Счет"						Тогда

		ОбъектВыгрузки = СоздатьОбъект("Счет." + Источник_Вид);
		ОбъектВыгрузки.ВыбратьСчета();
		Пока ОбъектВыгрузки.ПолучитьСчет() = 1 Цикл
			ВыгрузитьПоПравилу(ОбъектВыгрузки.ТекущийСчет(), Эл_Правило, ИдПравила);
		КонецЦикла;

	ИначеЕсли		Источник_Тип	=	"Константа"					Тогда
		
		ВыгрузитьПоПравилу(, Эл_Правило, ИдПравила);
		
	ИначеЕсли		Источник_Тип	=	"Календарь"					Тогда
		
		ВыгрузитьКалендари(Эл_Правило, ИдПравила);
		
	ИначеЕсли		Источник_Тип	=	"Операция"					Тогда
	ИначеЕсли		Источник_Тип	=	"ВидСубконто"				Тогда
		
		Для СчВидовСубконто = 1 По ВидыСубконто.КоличествоЗначений() Цикл
			ВыгрузитьПоПравилу(ВидыСубконто.ЗначениеПоНомеру(СчВидовСубконто), Эл_Правило, ИдПравила);
		КонецЦикла;
		
	ИначеЕсли		Источник_Тип	=	"Перечисление"				Тогда
		                                  
		ВидПеречисления	=	Перечисление.ПолучитьАтрибут(Источник_Вид);
		Для СчЗначенийПеречисления = 1 По ВидПеречисления.КоличествоЗначений() Цикл
			ВыгрузитьПоПравилу(ВидПеречисления.ЗначениеПоНомеру(СчЗначенийПеречисления), Эл_Правило, ИдПравила);
		КонецЦикла;
		
	ИначеЕсли		Источник_Тип	=	"ПланСчетов"				Тогда	
	ИначеЕсли		Источник_Тип	=	"ВидРасчета"				Тогда
	ИначеЕсли		Источник_Тип	=	"ЖурналРасчетов"			Тогда
	КонецЕсли;

	
	//	над этим еще нужно поработать...
	
	//гСписокОбработанныхПравил.ДобавитьЗначение(ИдПравила);
	//Поз	=	гСписокНеобработанныхПравил.НайтиЗначение(ИдПравила);
	//Если ПустоеЗначение(Поз) = 0 Тогда
	//	гСписокНеобработанныхПравил.УдалитьЗначение(Поз);
	//КонецЕсли;
	
	//Если ФормФлЗапоминатьСсылки = 0 Тогда
	//	СписокВыгруженныхОбъектов	=	СписокСписковВыгруженныхОбъектов.Получить(ИдПравила);
	//	Поз							=	СписокСписковВыгруженныхОбъектов.НайтиЗначение(СписокВыгруженныхОбъектов);
	//	Если ПустоеЗначение(Поз) = 0 Тогда
	//		СписокСписковВыгруженныхОбъектов.УдалитьЗначение(Поз);
	//	КонецЕсли;
	//КонецЕсли;
	
	
	Возврат(1);
	
КонецФункции		//	ВыгрузитьДанныеПоПравилу()

//--------------------------------------------------------------------------------------------------

Процедура УстановитьПараметрыПоУмолчанию()

	гТабКэшПараметровЗагрузки.НоваяСтрока();
	гТабКэшПараметровЗагрузки.Ид						=	"ПараметрыПоУмолчанию";
	гТабКэшПараметровЗагрузки.Дата						=	РабочаяДата();
	гТабКэшПараметровЗагрузки.ЗамещатьНайденные			=	1;
	гТабКэшПараметровЗагрузки.СпособЗагрузки			=	"ЗамещатьНеПустыми";
	гТабКэшПараметровЗагрузки.НовыеНеСоздавать			=	0;
	гТабКэшПараметровЗагрузки.СтатусУдаления			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроводок			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусПроведения			=	"Авто";
	гТабКэшПараметровЗагрузки.СтатусРасчетныхДокументов	=	"Авто";
	гТабКэшПараметровЗагрузки.ЗагружатьОперации			=	1;
	гТабКэшПараметровЗагрузки.ПравилоОпераций			=	"";
	гТабКэшПараметровЗагрузки.ЗагружатьЗаписиЖР			=	1;
	
КонецПроцедуры		//	УстановитьПараметрыПоУмолчанию()
               

//**************************************************************************************************
//----	Начало вспомогательных функций для написания скриптов	------------------------------------
//**************************************************************************************************

Функция ПравилоПоИмени(Имя)

	Возврат гПравила.ВыбратьУзел("//Правило[@Имя = """ + Имя + """]");
	
КонецФункции

//--------------------------------------------------------------------------------------------------

Процедура ВыгрузитьРеквизит(Приемник, ИдРеквизита, Значение="", Объект="", ТипПриемника="", ВидПриемника="", ПравилоИлиИмя="", ПараметрыПравила="")
    
	Если		ПустоеЗначение(Значение) = 0 Тогда
		
		Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
		Реквизит.УстановитьАтрибут("Идентификатор",	ИдРеквизита);
		Реквизит.УстановитьАтрибут("Значение",		СокрЛП(Значение));
		УстановитьАтрибут(Реквизит, "ТипЗначения", ТипПриемника);
		УстановитьАтрибут(Реквизит, "ВидЗначения", ВидПриемника);
	
	ИначеЕсли	(ПустоеЗначение(Объект) = 0) Или (ПустоеЗначение(ПравилоИлиИмя) = 0) Тогда
		                           
		УзелСсылки			=	1;
		Правило				=	"";
		ИдПравила			=	"";
		Если ПустоеЗначение(ПравилоИлиИмя) = 0 Тогда
			Правило			=	ПравилоИлиИмя;
			Если ТипЗначенияСтр(ПравилоИлиИмя) = "Строка" Тогда
				Правило		=	ПравилоПоИмени(ПравилоИлиИмя);
			КонецЕсли;
		КонецЕсли;
		ВыгрузитьПоПравилу(Объект, Правило, ИдПравила, УзелСсылки, ПараметрыПравила, ТипПриемника, ВидПриемника);
		Если УзелСсылки <> 1 Тогда
			Реквизит	=	Приемник.СоздатьПодчиненныйЭлемент("Реквизит");
			Реквизит.УстановитьАтрибут("Идентификатор",	ИдРеквизита);
			УстановитьАтрибут(Реквизит, "ТипЗначения", ТипПриемника);
			УстановитьАтрибут(Реквизит, "ВидЗначения", ВидПриемника);
			Реквизит.ДобавитьПодчиненный(УзелСсылки);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//**************************************************************************************************
//----	Конец вспомогательных функций для написания скриптов	------------------------------------
//**************************************************************************************************






//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//-----------------  Выгрузка проводок	------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------




Процедура ПриОткрытии()
        
	НачальнаяИнициализация();
	
КонецПроцедуры		//	ПриОткрытии()
         
//--------------------------------------------------------------------------------------------------

Функция ПодобратьПравилоПоТипамИЗначению(Знач Источник="", Правило="", ИдПравила="", Знач ТипИсточника="", Знач ВидИсточника="", Знач ТипПриемника="", Знач ВидПриемника="")
	          
	ЗагрузитьПравило(Правило, ИдПравила);
	
	Если ПустоеЗначение(Правило) = 0 Тогда
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 0 Тогда Возврат(0) КонецЕсли;
		КонецЕсли;
		Возврат(1);
	КонецЕсли;

	
	Если (ПустоеЗначение(ТипИсточника) = 1) И (ПустоеЗначение(Источник) = 0) Тогда
		ТипИсточника	=	ТипЗначенияСтр(Источник);
		Попытка ВидИсточника = Источник.Вид() Исключение КонецПопытки;
	КонецЕсли;
		
	
	Запрос				=	"//Правило[";
	
	
	Если ПустоеЗначение(ТипИсточника) = 0 Тогда
		Запрос			=	Запрос +	"(ОбъектИсточник/@Тип = """ + ТипИсточника + """)";
		Если ПустоеЗначение(ВидИсточника) = 0 Тогда
			Запрос		=	Запрос + "and(ОбъектИсточник/@Вид = """ + ВидИсточника + """)";
		КонецЕсли;
		Если ПустоеЗначение(ТипПриемника) = 0 Тогда
			Запрос		=	Запрос + "and";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ТипПриемника) = 0 Тогда
		Запрос			=	Запрос +	"(ОбъектПриемник/@Тип = """ + ТипПриемника + """)";
		Если ПустоеЗначение(ВидПриемника) = 0 Тогда
			Запрос		=	Запрос + "and(ОбъектПриемник/@Вид = """ + ВидПриемника + """)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос			=	Запрос + "]";
	                     
	ВыборкаПравил	=	гПравила.ВыбратьУзлы(Запрос);
	Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
		ВыбПравило	=	ВыборкаПравил.ПолучитьУзел(Сч);
		ИдПравила	=	"";
		ЗагрузитьПравило(ВыбПравило, ИдПравила);
		Если гТабКэшПравил.ВидУсловия = 1 Тогда	//	т.е. условие задано
			Если УсловияВыполняются(гТабКэшПравил.Условия, Источник) = 1 Тогда
				Правило	=	ВыбПравило;
				Возврат(1);
			КонецЕсли;
		Иначе
			Правило	=	ВыбПравило;
			Возврат(1);
		КонецЕсли;
	КонецЦикла;
		       
	
	ЗаписатьОшибку("Не найдено правило конвертации объекта:
					|		Объект: "		+	Источник		+ "
					|		ТипИсточника: " +	ТипИсточника	+ "
					|		ВидИсточника: " +	ВидИсточника	+ "
					|		ТипПриемника: " +	ТипПриемника	+ "
					|		ВидПриемника: " + 	ВидПриемника	);
	
	
	Возврат(0);
	
КонецФункции		//	ПодобратьПравилоПоТипамИЗначению()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция СоздатьПроводку(УзелОперации, СчетДт="", СчетКт="", Сумма="", Колво="", Валюта="", ВалСумма="", СодержаниеПроводки="")

	УзелПроводки = УзелОперации.СоздатьПодчиненныйЭлемент("Проводка");
	
	Если ПустоеЗначение(СчетДт) = 0 Тогда
		УзелПроводки.УстановитьАтрибут("СчетДт", СчетДт);
	КонецЕсли;
	
	Если ПустоеЗначение(СчетКт) = 0 Тогда
		УзелПроводки.УстановитьАтрибут("СчетКт", СчетКт);
	КонецЕсли;
	                                                             
	Если ПустоеЗначение(Сумма) = 0 Тогда
		РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
		РеквизитПроводки.УстановитьАтрибут("Идентификатор", "Сумма");
		РеквизитПроводки.УстановитьАтрибут("Значение",		 Сумма);
	КонецЕсли;
	
	Если ПустоеЗначение(ВалСумма) = 0 Тогда
		РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
		РеквизитПроводки.УстановитьАтрибут("Идентификатор", "ВалСумма");
		РеквизитПроводки.УстановитьАтрибут("Значение",		 ВалСумма);
	КонецЕсли;
	
	Если ПустоеЗначение(Колво) = 0 Тогда
		РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
		РеквизитПроводки.УстановитьАтрибут("Идентификатор", "Количество");
		РеквизитПроводки.УстановитьАтрибут("Значение",		 Колво);
	КонецЕсли;
	
	Если ПустоеЗначение(СодержаниеПроводки) = 0 Тогда
		РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
		РеквизитПроводки.УстановитьАтрибут("Идентификатор", "СодержаниеПроводки");
		РеквизитПроводки.УстановитьАтрибут("Значение",		 СодержаниеПроводки);
	КонецЕсли;
	
	Если ПустоеЗначение(ФормНомерЖурнала) = 0 Тогда
		РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
		РеквизитПроводки.УстановитьАтрибут("Идентификатор", "НомерЖурнала");
		РеквизитПроводки.УстановитьАтрибут("Значение",		 ФормНомерЖурнала);
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) = 0 Тогда
		УзелСсылки			=	1;
		Значение			=	Выгрузить(Валюта, , УзелСсылки);
		Если УзелСсылки <> 1 Тогда
			РеквизитПроводки	=	УзелПроводки.СоздатьПодчиненныйЭлемент("Реквизит");
			РеквизитПроводки.УстановитьАтрибут("Идентификатор", "Валюта");
			РеквизитПроводки.ДобавитьПодчиненный(УзелСсылки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат(УзелПроводки);
	
КонецФункции		//	СоздатьПроводку()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Функция ПолучитьВидСубконто(Счет, НомерСубконто)
	
	Спр	=	СоздатьОбъект("Справочник.ПланСчетов");
	Спр.НайтиЭлемент(Счет);
	Возврат Спр.ПолучитьАтрибут("ВидСубконто" + НомерСубконто);

КонецФункции		//	ПолучитьВидСубконто()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ВыгрузитьСубконто(УзелПроводки, Таб, ДилиК, НомерСубконто)
	                                             
	НомерСтроки				=	Таб.НомерСтроки;
	ЗначениеСубконто		=	Таб.ПолучитьЗначение(НомерСтроки, "Субконто" + ДилиК + НомерСубконто);
	ПередаваемыйПараметр	=	СокрЛП(Таб.СчетД) + "," + СокрЛП(Таб.СчетК) + "," + СокрЛП(Таб.ВидСтатус);
	
	
	УзелСсылки			=	1;
	ВидСубконто			=	ПолучитьВидСубконто(Таб.ПолучитьЗначение(НомерСтроки, "Счет" + ДилиК), НомерСубконто);
	ИдВидаСубконто		=	СокрЛП(ВидСубконто.Идентификатор);
	
	Если ПустоеЗначение(ИдВидаСубконто) = 1 Тогда Возврат КонецЕсли;
    
	
	Если ПустоеЗначение(ЗначениеСубконто) = 1 Тогда
		//Если ИдВидаСубконто <> "МестаХранения" Тогда
		//	Возврат;
		//КонецЕсли;
		Возврат;
	КонецЕсли;
	
	
	//	Первый способ поиска нужного правила
	
	//Правило			=	"";
	//ИдПравила			=	"";
	//ТипБух			=	СокрЛП(ВидСубконто.ТипЗначенияБух);
	//ВидБух			=	ОтделитьРазделителем(ТипБух, ".");
	//Если ПодобратьПравилоПоТипамИЗначению(ЗначениеСубконто, Правило, ИдПравила, , , ТипБух, ВидБух) = 0 Тогда Возврат КонецЕсли;
	
	
	//	Второй способ поиска нужного правила
	
	Правило				=	гПравила.ВыбратьУзел("//Правило[@Имя = """ + ИдВидаСубконто + """]");
	
	
	СтрЗначение			=	ВыгрузитьПоПравилу(ЗначениеСубконто, Правило, , УзелСсылки, ПередаваемыйПараметр);
	
	Если (УзелСсылки = 1) И (ПустоеЗначение(СтрЗначение) = 1) Тогда Возврат КонецЕсли;
	
	УзелСубконто		=	УзелПроводки.СоздатьПодчиненныйЭлемент("Субконто" + ДилиК + "т");
	УзелСубконто.УстановитьАтрибут("Идентификатор", ИдВидаСубконто);
	
	Если ИдВидаСубконто = "СчетаФактурыПолученные" Тогда
		УзелСубконто.УстановитьАтрибут("ВидЗначения", "СчетФактураПолученный");
	КонецЕсли;
	
	Если		УзелСсылки <> 1 Тогда
		УзелСубконто.ДобавитьПодчиненный(УзелСсылки);
	ИначеЕсли	ПустоеЗначение(СтрЗначение) = 0 Тогда
		УзелСубконто.УстановитьАтрибут("Значение", СтрЗначение);
	КонецЕсли;

КонецПроцедуры		//	ВыгрузитьСубконто()

//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ВыгрузитьТаблицуПроводок(ДатаНач, ДатаКон, Комментарий, Режим="")
	
	Таб	=	глПолучитьТаблицуПроводок(ДатаНач, ДатаКон, ФормЮрЛицо, ВыгружатьКнигуПокупок);

	
	Если ПустоеЗначение(Таб) = 1 Тогда Возврат КонецЕсли;
	Если СтрДлина(СокрЛП(Комментарий)) > 50 Тогда
		Сообщить("Длина содержания операции превысила 50 символов: " + Комментарий);
		Возврат;
	КонецЕсли;
	
	Правило				=	"";
	ИдПравила			=	"";
	УзелСсылки			=	1;
	ЕстьПроводки		=	0;                                 
	
	//----	Создаем документ операции	----------------------------
	    
	//	Вычислим сумму операции
	СуммаОперации = 0;
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		Если Таб.ВклСуммаОперации = 0 Тогда Продолжить КонецЕсли;
		СуммаОперации = СуммаОперации + Таб.Сумма;
	КонецЦикла;
	
	ПараметрыПравила	=	СоздатьОбъект("СписокЗначений");
	//ПараметрыПравила.Установить("НомерДок",		"1");
	//ПараметрыПравила.Установить("Комментарий",	Комментарий);
	ПараметрыПравила.Установить("ДатаДок",			ДатаКон);
	ПараметрыПравила.Установить("Содержание",		Комментарий);
	ПараметрыПравила.Установить("СуммаОперации",	СуммаОперации);
	
	
	Если ПодобратьПравилоПоТипамИЗначению(, Правило, ИдПравила, , , "Документ", "Операция") = 0 Тогда Возврат КонецЕсли;
	
	//ВыгрузитьПоПравилу( , Правило, ИдПравила, УзелСсылки, ПараметрыПравила);
	     
	
	//----	Создаем узел проведения документа и бухгалтерскую операцию	--------
	
	XML_DOM						=	гXMLАнализатор.СоздатьДокумент();
	Приемник					=	XML_DOM.СоздатьУзел(1, "ПровестиДокумент");
	//Приемник.ДобавитьПодчиненный(УзелСсылки);
	
    УстановитьАтрибут(Приемник,	"Правило", ИдПравила);
	
	УзелОперации	=	Приемник.СоздатьПодчиненныйЭлемент("Операция");
	         
	
	//----	Создаем проводки операции	----------------------------------------
	
	Таб.ВыбратьСтроки();
	Пока Таб.ПолучитьСтроку() = 1 Цикл
		         
		СчетДт	=	СокрЛП(Таб.СчетД);
		СчетКт	=	СокрЛП(Таб.СчетК);              
		
		              
		//	Будем пропускать проводки, которые создадутся
		//	автоматически при переносе записей книг покупок / продаж
		
		Если ВыгружатьКнигуПокупок = 1 Тогда  
			
			СуммоваяРазница = 0;
			Если Таб.КодОперации = глКО.СуммоваяРазница Тогда
				СуммоваяРазница = 1;
			КонецЕсли;
	
			ВозвратПоставщику = 0;
			Если Таб.КодОперации = глКО.ВозвратПоставщику Тогда
				ВозвратПоставщику = 1;
			КонецЕсли;
			
			Если Найти(СчетДт + "," + СчетКт, "19") > 0 Тогда
				Если (Режим <> "ЗакрытиеМесяца") и (СуммоваяРазница = 0) и (ВозвратПоставщику = 0) Тогда Продолжить КонецЕсли;
			ИначеЕсли	Режим = "ЗакрытиеМесяца" Тогда
				Если	Найти(СчетДт + "," + СчетКт, "68.2") = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		
		Если ВыгружатьКнигуПродаж = 1 Тогда
			Если Найти(СчетДт + "," + СчетКт, "76.АВ") > 0	Тогда Продолжить КонецЕсли;
			Если	Режим <> "Возврат" Тогда
				Если Найти(СчетКт, "76.Н.1") > 0 				Тогда Продолжить КонецЕсли;
				Если Найти(СчетКт, "68.2") > 0					Тогда Продолжить КонецЕсли;
			Иначе		//	Режим = "Возврат"
				Если Не(Найти(СчетКт, "76.Н.1") > 0)	Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		                             
		ЕстьПроводки	=	1;
		
		УзелПроводки	=	СоздатьПроводку(УзелОперации, СчетДт, СчетКт, Таб.Сумма, Таб.Количество, Таб.Валюта, Таб.ВалСумма, Таб.Содержание);
		
		Для Сч = 1 По 3 Цикл ВыгрузитьСубконто(УзелПроводки, Таб, "Д", Сч) КонецЦикла;
		Для Сч = 1 По 3 Цикл ВыгрузитьСубконто(УзелПроводки, Таб, "К", Сч) КонецЦикла;
		
	КонецЦикла;
	                         
	
	Если ЕстьПроводки = 1 Тогда
		
		ВыгрузитьПоПравилу( , Правило, ИдПравила, УзелСсылки, ПараметрыПравила);
		Приемник.ДобавитьПодчиненный(УзелСсылки);
		ЗаписатьОбъектВФайл(Приемник);
	
	КонецЕсли;
	
	
КонецПроцедуры		//	ВыгрузитьТаблицуПроводок()

//******************************************************************************
// СписокПараметровКассовыхДокументов(Документ)
//
// Параметры: 
//  Документ - документ вида ПКО, РКО, "Отчет ККМ"
//
// Возвращаемое значение:
//  Список значений содержащий корр. счет и субконто.
//
// Описание:
//  Возвращает счет для выгрузки документа в 1С:Бухгалтерию.
//
Функция СписокПараметровКассовыхДокументов(Документ) Экспорт
	
	СпрПлан = СоздатьОбъект("Справочник.ПланСчетов");
	Субконто1 = "";
	Субконто2 = "";
	Субконто3 = "";           
	
	// Для кассовых ордеров определим надо ли использовать авансовые счета
	// Для этого просмотрим движения документа и определим все ли они имеют вид долга "Аванс" или "Аванс(вал.)"
	Если (Документ.Вид() = "ПКО") или (Документ.Вид() = "РКО") Тогда
		Рег = СоздатьОбъект("Регистр.Покупатели");
		Рег.ВыбратьДвиженияДокумента(Документ);
		Аванс = 1;               
		Пока Рег.ПолучитьДвижение() = 1 Цикл
			Если (Рег.ВидДолга <> глВД.Аванс) и (Рег.ВидДолга <> глВД.АвансВал) Тогда
				Аванс = 0;
				Прервать;
			КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	Если Документ.Вид() = "ПКО" Тогда                                   
		Если Документ.КодОперации = глКО.ВозвратПодотчетныхСумм Тогда          
			Если Документ.Валюта = глРубли Тогда
				СпрПлан.НайтиПоКоду("71.1");   
			Иначе
				СпрПлан.НайтиПоКоду("71.11");   
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();  
			Субконто1 = Документ.ФизЛицо;
		ИначеЕсли Документ.КодОперации = глКО.ВозвратОплатыОтПоставщика Тогда
			Если Документ.Валюта = глРубли Тогда
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("60.2");   
				Иначе
					СпрПлан.НайтиПоКоду("60.1");   
				КонецЕсли;
			Иначе         
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("60.22");   
				Иначе
					СпрПлан.НайтиПоКоду("60.11");   
				КонецЕсли;
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();
			Субконто1 = Документ.Контрагент;
			Субконто2 = Документ.Договор;
		ИначеЕсли Документ.КодОперации = глКО.ОплатаОтПокупателя Тогда  
			Если Документ.Валюта = глРубли Тогда
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("62.2");   
				Иначе
					СпрПлан.НайтиПоКоду("62.1");   
				КонецЕсли;
			Иначе
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("62.22");   
				Иначе
					СпрПлан.НайтиПоКоду("62.11");   
				КонецЕсли;
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();
			Субконто1 = Документ.Контрагент;
			Субконто2 = Документ.Договор;
		ИначеЕсли Документ.КодОперации = глКО.РозничнаяВыручка Тогда
			СпрПлан.НайтиПоКоду("90.1.1");   
		    Счет = СпрПлан.ТекущийЭлемент();
			Субконто2 = Документ.СтавкаНДС;
			Субконто3 = Документ.СтавкаНП;
		ИначеЕсли Документ.КодОперации = глКО.РозничнаяВыручкаЕНВД Тогда
			СпрПлан.НайтиПоКоду("90.1.2");         
			Счет = СпрПлан.ТекущийЭлемент();
		КонецЕсли;  
		
	ИначеЕсли  Документ.Вид() = "РКО" Тогда
		
		Если Документ.КодОперации = глКО.ВыдачаПодОтчет Тогда          
			Если Документ.Валюта = глРубли Тогда
				СпрПлан.НайтиПоКоду("71.1");   
			Иначе
				СпрПлан.НайтиПоКоду("71.11");   
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();  
			Субконто1 = Документ.ФизЛицо;
		ИначеЕсли Документ.КодОперации = глКО.ОплатаПоставщику Тогда
			Если Документ.Валюта = глРубли Тогда
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("60.2");   
				Иначе                     
					СпрПлан.НайтиПоКоду("60.1");   
				КонецЕсли;
			Иначе
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("60.22");   
				Иначе
					СпрПлан.НайтиПоКоду("60.11");   
				КонецЕсли;
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();
			Субконто1 = Документ.Контрагент;
			Субконто2 = Документ.Договор;
		ИначеЕсли Документ.КодОперации = глКО.ВозвратОплатыПокупателю Тогда
			Если Документ.Валюта = глРубли Тогда
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("62.2");   
				Иначе
					СпрПлан.НайтиПоКоду("62.1");   
				КонецЕсли;
			Иначе
				Если Аванс = 1 Тогда
					СпрПлан.НайтиПоКоду("62.22");   
				Иначе
					СпрПлан.НайтиПоКоду("62.11");   
				КонецЕсли;
			КонецЕсли;
		    Счет = СпрПлан.ТекущийЭлемент();
			Субконто1 = Документ.Контрагент;
			Субконто2 = Документ.Договор;
		КонецЕсли;
		
	ИначеЕсли Документ.Вид() = "ОтчетККМ" Тогда
		
		Если Документ.ОблагаетсяЕНВД = 1 Тогда
		    СпрПлан.НайтиПоКоду("90.1.2");
		Иначе
			СпрПлан.НайтиПоКоду("90.1.1");
		КонецЕсли;
	    Счет = СпрПлан.ТекущийЭлемент();
		
	КонецЕсли;

	Рез = СоздатьОбъект("СписокЗначений");
	Рез.ДобавитьЗначение(Счет,		"КоррСчет");
	Рез.ДобавитьЗначение(Субконто1,	"Субконто1");
	Рез.ДобавитьЗначение(Субконто2,	"Субконто2");
	Рез.ДобавитьЗначение(Субконто3,	"Субконто3");
	
	Возврат Рез;
	
КонецФункции		//	СписокПараметровКассовыхДокументов()            

//******************************************************************************
// ПолучитьКурсВзаиморасчетов(Документ)
//
// Параметры: 
//  Документ - документ отгрузки или оплаты
//
// Возвращаемое значение:
//  Курс взаиморасчетов по данному документу.
//
// Описание:
//  Возвращает счет для выгрузки документа в 1С:Бухгалтерию.
//
Функция ПолучитьКурсВзаиморасчетов(Документ) Экспорт
	Курс = 1;                            
	Если Документ.Выбран() = 1 Тогда
        Рег = СоздатьОбъект("Регистр.Покупатели");
		Рег.ВыбратьДвиженияДокумента(Документ);
		Пока Рег.ПолучитьДвижение() = 1 Цикл
	   		Если Рег.СуммаВал <> 0 Тогда
				Курс = Рег.СуммаРуб/Рег.СуммаВал;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;       
	Возврат(Курс);       
КонецФункции // ПолучитьКурсВзаиморасчетов()


//--------------------------------------------------------------------------------------------------
                                                                                                    
Процедура ВыгрузитьНаборДанных()

	//	Для книги покупок и книги продаж                                         
	Если ФормЮрЛицо.Выбран()=0 Тогда
		Предупреждение("Не выбрано юридическое лицо!", 60);
		Возврат;
	КонецЕсли;
	
	ДатаНачалаЗ	=	НачМесяца(ФормДатаНач);
	ДатаКонцаЗ	=	Мин(КонМесяца(ФормДатаКон), ПолучитьДатуТА());
	
	Если глПроверкаДаты(ДатаНачалаЗ, ФормДатаКон)=0 Тогда Возврат КонецЕсли;
	Если глПроверкаАктуальностиОтчета(ДатаНачалаЗ, ДатаКонцаЗ, Последовательность.КнигаПокупок) = 0 Тогда Возврат КонецЕсли;
	
	//-------------------------------------------
	
	
	
	
	//-------------------------------------------
	
	гСчетчикВыгруженныхОбъектов				=	0;
	//СписокСписковВыгруженныхОбъектов		=	СоздатьОбъект("СписокЗначений"); 

	
	ТабВыгруженныхОбъектов					=	СоздатьОбъект("ТаблицаЗначений");
	ТабВыгруженныхОбъектов.НоваяКолонка("ИдПравила",	"Строка");
	ТабВыгруженныхОбъектов.НоваяКолонка("ТабОбъектов",	"ТаблицаЗначений");
	
	
	//гСписокОбработанныхПравил				=	СоздатьОбъект("СписокЗначений");
	//гСписокНеобработанныхПравил			=	СоздатьОбъект("СписокЗначений");
	
	гТабКэшРеквизитовЗначений.УдалитьСтроки();
	гТабКэшРеквизитов.УдалитьСтроки();
	гТабКэшПравил.УдалитьСтроки();
	гТабКэшПараметровЗагрузки.УдалитьСтроки();
	УстановитьПараметрыПоУмолчанию();
	

	ПравилаОбмена							=	гПравила.ВыбратьУзел("ПравилаОбмена");
	                                                                                  
	
	гФайлДанных								=	гXMLАнализатор.СоздатьПоследовательноЗаписываемыйДокумент();
	гФайлДанных.ИмяФайла					=	ФормИмяФайлаДанных;
	
	АтрибутыЭлемента						=	гФайлДанных.АтрибутыЭлемента;
	АтрибутыЭлемента.УстановитьАтрибут("ВерсияФормата",				"1.0");
	АтрибутыЭлемента.УстановитьАтрибут("ИдКонфигурацииПриемника",	ПравилаОбмена.ПолучитьАтрибут("ИдКонфигурацииПриемника"),	0);
	АтрибутыЭлемента.УстановитьАтрибут("ИдПравилКонвертации",		ПравилаОбмена.ПолучитьАтрибут("Ид"), 						0);
	АтрибутыЭлемента.УстановитьАтрибут("ДатаНачала",				ПолучитьИдОбъектаИсточника(ФормДатаНач)  );
	АтрибутыЭлемента.УстановитьАтрибут("ДатаОкончания",				ПолучитьИдОбъектаИсточника(ФормДатаКон)  );
	//АтрибутыЭлемента.УстановитьАтрибут("Комментарий",				,	0);
	
	гФайлДанных.ОткрытьЭлемент("ФайлОбмена");
	                    
	
	
	// Удалим ненужные правила очистки
	
	Выборка = ПравилаОбмена.ВыбратьУзлы("УдалитьВсеПоУсловиям");
	Для Сч = 0 По Выборка.КоличествоУзлов() - 1 Цикл
		ПравилоОчистки	=	Выборка.ПолучитьУзел(Сч);
		ВидДокументов	=	ПравилоОчистки.ПолучитьАтрибут("Вид");
		Если Найти("ОперацииВыбытияИмущества,ОперацииПриобретенияИмущества,
					|ПоступленияДенежныхСредств,РасходДенежныхСредств,
					|СписаниеМатериаловТоваровПродукции,ЗачетЗадолженности", ВидДокументов) > 0 Тогда
			ПравилаОбмена.УдалитьПодчиненный(ПравилоОчистки);
		КонецЕсли;
		Если ФормЧиститьБазуПриЗагрузке = 0 Тогда
			Если Найти("ЗаписьКнигиПокупок,ЗаписьКнигиПродаж,
						|ПриходныйОрдер,РасходныйОрдер,
						|Операция,СчетФактура,СчетФактураПолученный", ВидДокументов) > 0 Тогда
				ПравилаОбмена.УдалитьПодчиненный(ПравилоОчистки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	                
	
	
	гФайлДанных.ВключитьЭлемент(ПравилаОбмена);
	гФайлДанных.Сбросить();

	
	//-----		Выгружаем проводки		-----------------------------------
	
	Если ФормВыгружатьПроводки = 1 Тогда
		
		ВыбПериодичность	=	СокрЛП(Периодичность.ПолучитьЗначение(Периодичность.ТекущаяСтрока()));
		
		Если		ВыбПериодичность = "Документ"	Тогда
			
			Док = СоздатьОбъект("Документ");
			Док.УстановитьФильтр(1, 0, 0, 2, 1, 1);
			Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
			Пока Док.ПолучитьДокумент() = 1 Цикл
				Если Док.ЮрЛицо <> ФормЮрЛицо Тогда Продолжить КонецЕсли;
				ВыгрузитьТаблицуПроводок(Док.ТекущийДокумент(), Док.ДатаДок, Док.ПредставлениеВида() + " " + СокрЛП(Док.НомерДок) );
			КонецЦикла;
			
		ИначеЕсли	ВыбПериодичность = "День"		Тогда
			
			ТекДата	=	ФормДатаНач;
			Пока 1=1 Цикл
				ВыгрузитьТаблицуПроводок(ТекДата, ТекДата, "Проводки за день: " + Формат(ТекДата, "ДДДММГГ"));
				Если ТекДата = ФормДатаКон Тогда Прервать КонецЕсли;
				ТекДата = ТекДата + 1;
			КонецЦикла;

		ИначеЕсли	ВыбПериодичность = "Неделя"		Тогда
			
			Если (НачНедели(ФормДатаНач) <> ФормДатаНач) Или (КонНедели(ФормДатаКон) <> ФормДатаКон) Или (ФормДатаНач = ФормДатаКон) Тогда
				Предупреждение("Необходимо выбрать период с целым количеством недель!");
				Возврат;
			КонецЕсли;
			ТекДата	=	ФормДатаНач;
			Пока 1=1 Цикл
				ВыгрузитьТаблицуПроводок(ТекДата, ТекДата+6, "Проводки за неделю: с " + Формат(ТекДата, "ДДДММГГ") + " по " + Формат((ТекДата+6), "ДДДММГГ")	);
				Если ТекДата + 6 = ФормДатаКон Тогда Прервать КонецЕсли;
				ТекДата = ТекДата + 7;
			КонецЦикла;

		ИначеЕсли	ВыбПериодичность = "Месяц"		Тогда
			
			Если (НачМесяца(ФормДатаНач) <> ФормДатаНач) Или (КонМесяца(ФормДатаКон) <> ФормДатаКон) Или (ФормДатаНач = ФормДатаКон) Тогда
				Предупреждение("Необходимо выбрать период с целым количеством месяцев!");
				Возврат;
			КонецЕсли;
			ТекДата	=	ФормДатаНач;
			Пока 1=1 Цикл
				ВыгрузитьТаблицуПроводок(ТекДата, ДобавитьМесяц(ТекДата, 1)-1, "Проводки за " + ПериодСтр(ТекДата, ДобавитьМесяц(ТекДата, 1)-1));
				Если ДобавитьМесяц(ТекДата, 1)-1 = ФормДатаКон Тогда Прервать КонецЕсли;
				ТекДата = ДобавитьМесяц(ТекДата, 1);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;		//	Если ФормВыгружатьПроводки = 1
	
	                 
	//Если (ВыгружатьКнигуПродаж = 1) Или (ВыгружатьКнигуПокупок = 1)  Тогда
	//	Док	=	СоздатьОбъект("Документ.ЗакрытиеМесяца");
	//	Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
	//	Пока Док.ПолучитьДокумент() = 1 Цикл
	//		Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
	//		Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
	//		ВыгрузитьТаблицуПроводок(Док.ТекущийДокумент(), Док.ДатаДок, Док.ПредставлениеВида() + " " + СокрЛП(Док.НомерДок) + " (НДС)", "ЗакрытиеМесяца");
	//	КонецЦикла;
	//КонецЕсли;
	
	
	
	Если ВыгружатьКнигуПродаж = 1 Тогда
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "СчетФактураВыданный");
		Док	=	СоздатьОбъект("Документ.СчетФактураВыданный");
		Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
			Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
			//Если Док.АвтоКнигаПродаж = 0	Тогда	Продолжить КонецЕсли;
			ВыгрузитьПоПравилу(Док.ТекущийДокумент(), Эл_Правило, ИдПравила);
		КонецЦикла;
		
		Эл_Правило	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, , , , "Документ", "ЗаписьКнигиПродаж");
		Эл_Правило.УстановитьАтрибут("ПоСсылкам", 0);
		Если ВыгрузитьДанныеПоПравилу(Эл_Правило) = "Возврат" Тогда Возврат КонецЕсли;
	КонецЕсли;
	
	
	
	Если ВыгружатьКнигуПокупок = 1 Тогда
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "СчетФактураПолученный");
		Док	=	СоздатьОбъект("Документ.СчетФактураПолученный");
		Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
			Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
			ВыгрузитьПоПравилу(Док.ТекущийДокумент(), Эл_Правило, ИдПравила);
		КонецЦикла;
		
		Эл_Правило	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, , , , "Документ", "ЗаписьКнигиПокупок");
		Эл_Правило.УстановитьАтрибут("ПоСсылкам", 0);
		Если ВыгрузитьДанныеПоПравилу(Эл_Правило) = "Возврат" Тогда Возврат КонецЕсли;
	КонецЕсли;
	                 
	
	
	Если ВыгружатьКассовыеОрдера = 1 Тогда
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "ПКО");
		Док	=	СоздатьОбъект("Документ.ПКО");
		Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
			Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
			ВыгрузитьПоПравилу(Док.ТекущийДокумент(), Эл_Правило, ИдПравила, , СписокПараметровКассовыхДокументов(Док));
		КонецЦикла;
		
		
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, ИдПравила, "Документ", "ОтчетККМ");
		Док	=	СоздатьОбъект("Документ.ОтчетККМ");
		Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
			Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
			ВыгрузитьПоПравилу(Док.ТекущийДокумент(), Эл_Правило, ИдПравила, , СписокПараметровКассовыхДокументов(Док));
		КонецЦикла;
		
		
		Эл_Правило	=	"";
		ИдПравила	=	"";
		ПодобратьПравилоПоТипамИЗначению( , Эл_Правило, , "Документ", "РКО");
		Док	=	СоздатьОбъект("Документ.РКО");
		Док.ВыбратьДокументы(ФормДатаНач, ФормДатаКон);
		Пока Док.ПолучитьДокумент() = 1 Цикл
			Если Док.Проведен() = 0			Тогда	Продолжить КонецЕсли;
			Если Док.ЮрЛицо <> ФормЮрЛицо	Тогда	Продолжить КонецЕсли;
			ВыгрузитьПоПравилу(Док.ТекущийДокумент(), Эл_Правило, ИдПравила, , СписокПараметровКассовыхДокументов(Док));
		КонецЦикла;
	КонецЕсли;
	
	//-----		Последовательно обрабатываем правила конвертации	-------
	
	//ВыборкаПравил = гПравила.ВыбратьУзлы("//Правило");
	//Для Сч = 0 По ВыборкаПравил.КоличествоУзлов() - 1 Цикл
	//	Эл_Правило	=	ВыборкаПравил.ПолучитьУзел(Сч);
	//	Если ВыгрузитьДанныеПоПравилу(Эл_Правило) = "Возврат" Тогда Возврат КонецЕсли;
	//КонецЦикла;
	
	//гТабКэшРеквизитов.УдалитьСтроки();
	                                                                       
	//---------------------------------------------------------------------
	
	
	гФайлДанных.ЗакрытьЭлемент();
	гФайлДанных.Сбросить();
	гФайлДанных.Завершить();
           
	
	//гФлагВыгрузкаПроизведена	=	1;
	
	Состояние("Выгрузка данных завершена!");
	Предупреждение("Выгрузка данных завершена!");
	
	
КонецПроцедуры		//	ВыгрузитьНаборДанных()

//--------------------------------------------------------------------------------------------------

                                                                                                    
Процедура ИнициализацияВыгрузкиПроводок()
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск правил выгрузки данных (проводок, документов и др.)
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"ExtForms\RTr9_Ac4.xml"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"RTr9_Ac4.xml"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"RTr9_Ac4.xml"	);
	
	гПутьОбъекта_ПравилаКонвертации			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	                               
	
	Если ПустоеЗначение(гПутьОбъекта_ПравилаКонвертации) = 1 Тогда
		Предупреждение("Не найден файл правил конвертации: RTr9_Ac4.xml
		                |
						|Следует разместить данный файл в каталоге
						|ExtForms информационной базы!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Поиск внешней компоненты V7Plus.dll
	
	СписокВозможныхМест	=	СоздатьОбъект("СписокЗначений");
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()					+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогПрограммы()			+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	КаталогИБ()	+	"ExtForms\"	+	"v7plus.dll"	);
	СписокВозможныхМест.ДобавитьЗначение(	гСтрПуть					+	"v7plus.dll"	);
	
	гПутьОбъекта_КомпонентаV7plus			=	НайтиПервыйСуществующийФайл(СписокВозможныхМест);
	
	
	Если ЗагрузитьВнешнююКомпоненту(гПутьОбъекта_КомпонентаV7plus) <> 1	Тогда
		Предупреждение("Компонента v7plus.dll не найдена!");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;
	
	гXMLАнализатор		=	СоздатьОбъект("AddIn.XMLParser");
	ВерсияАнализатора	=	гXMLАнализатор.ВерсияАнализатора;
	Если ВерсияАнализатора <> "2.0" Тогда
		Предупреждение("Для работы с программой необходимо обновить внешнюю компоненту v7plus.dll !");
		СтатусВозврата(0);	Возврат;
	КонецЕсли;

	
	ЗагрузитьПравилаКонвертации();
	

	//ФормДатаНач								=	РабочаяДата();
	//ФормДатаКон								=	РабочаяДата();
	
	ФормЮрЛицо								=	глПользователь.ОсновнаяФирма.ЮрЛицо;
	
	ФормИмяФайлаДанных						=	КаталогПользователя()	+	"DTr9_Ac4.xml";
	
	
	ФормКолвоБуферизуемыхОбъектов			=	50;
	ФормФлЗапоминатьСсылки					=	1;
	
	
	гСписокПараметров						=	СоздатьОбъект("СписокЗначений");
	гТабОбъектов							=	СоздатьОбъект("ТаблицаЗначений");
	гТабОбъектов.НоваяКолонка("ИдПравила");
	гТабОбъектов.НоваяКолонка("СписокОбъектов");
	             
	
	Периодичность.УдалитьВсе();
	Периодичность.ДобавитьЗначение("Документ");
	Периодичность.ДобавитьЗначение("День");
	Периодичность.ДобавитьЗначение("Неделя");
	Периодичность.ДобавитьЗначение("Месяц");
	
	
КонецПроцедуры		//	ИнициализацияВыгрузкиПроводок()

//--------------------------------------------------------------------------------------------------

Процедура НачальнаяИнициализация()
	
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	

	РасположениеФайла(гСтрПуть, гИмяФайла);
	
	гПутьОбъекта_ИсполняемыйКод			=	КаталогИБ() + "CDExpVar.txt";
	
	гПутьОбъекта_ДаннаяОбработка		=	гСтрПуть + гИмяФайла;
	                                
	
	ИнициализацияВыгрузкиПроводок();
	
	
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//	Инициализация кэш-таблиц
	
	гТабКэшРеквизитов	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитов.НоваяКолонка("Ид",								"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Источник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Источник_Вид",						"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Ид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_ТипАтрибута",				"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Тип",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Вид",						"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Приемник_Длина",					"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("Преобразование",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("Правило",							"Строка");
	
	//гТабКэшРеквизитов.НоваяКолонка("ЕстьПроцедура",					"Число", 1, 0);
	//гТабКэшРеквизитов.НоваяКолонка("ПолучитьИзПараметров",			"Число", 1, 0);
	
	гТабКэшРеквизитов.НоваяКолонка("ЕстьПроцедура",						"Число");	//	так работает быстрее
	гТабКэшРеквизитов.НоваяКолонка("ПолучитьИзПараметров",				"Число");
	
	гТабКэшРеквизитов.НоваяКолонка("ПараметрыПравила",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("СпособВыгрузки",					"Строка");
	гТабКэшРеквизитов.НоваяКолонка("СпособЗагрузки",					"Строка");
	
	гТабКэшРеквизитов.НоваяКолонка("Условия");
	гТабКэшРеквизитов.НоваяКолонка("ВидУсловия", 						"Число");	// 0 - не задано, 1 - по объекту, 2 - по реквизиту
	
	//--------------------
	
	гТабКэшРеквизитовЗначений	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Ид",						"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Источник_Вид",				"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Ид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Тип",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Вид",				"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Приемник_Длина",			"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Преобразование",			"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("Правило",					"Строка");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ЕстьПроцедура",				"Число");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("ПараметрыПравила",			"Строка");
	
	гТабКэшРеквизитовЗначений.НоваяКолонка("Условия");
	гТабКэшРеквизитовЗначений.НоваяКолонка("ВидУсловия", 				"Число");	// 1 - условие задано
	
	//--------------------
	
	гТабКэшПравил	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("Ид",									"Строка");
	
	гТабКэшПравил.НоваяКолонка("Правило");
	гТабКэшПравил.НоваяКолонка("Условия");
	гТабКэшПравил.НоваяКолонка("ВидУсловия", 							"Число");	// 1 - условие задано
	
	гТабКэшПравил.НоваяКолонка("ПоСсылкам",								"Число");
	
	гТабКэшПравил.НоваяКолонка("Источник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Источник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("Приемник_Тип",							"Строка");
	гТабКэшПравил.НоваяКолонка("Приемник_Вид",							"Строка");
	
	гТабКэшПравил.НоваяКолонка("ИдСинхронизирующегоРеквизита",			"Строка");
	
	гТабКэшПравил.НоваяКолонка("Преобразование",						"Строка");
	гТабКэшПравил.НоваяКолонка("ПравилоПереадресации",					"Строка");
	гТабКэшПравил.НоваяКолонка("ПараметрыЗагрузки",						"Строка");
	
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовПоиска",					"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитов",							"ТаблицаЗначений");
	гТабКэшПравил.НоваяКолонка("ТабРеквизитовСтрок",					"ТаблицаЗначений");
	
	//--------------------
	
	гТабКэшПараметровЗагрузки	=	СоздатьОбъект("ТаблицаЗначений");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Ид",						"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("Дата",						"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗамещатьНайденные",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("НовыеНеСоздавать",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("СпособЗагрузки",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусУдаления",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроводок",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусПроведения",			"Строка");
	гТабКэшПараметровЗагрузки.НоваяКолонка("СтатусРасчетныхДокументов",	"Строка");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ДатаТекущегоПериодаЖР",		"Дата");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьОперации",			"Число");
	гТабКэшПараметровЗагрузки.НоваяКолонка("ЗагружатьЗаписиЖР",			"Число");
	
	гТабКэшПараметровЗагрузки.НоваяКолонка("ПравилоОпераций");
	
КонецПроцедуры		//	НачальнаяИнициализация()

//--------------------------------------------------------------------------------------------------

//Функция ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="")
//	
//	Возврат(0);
//	
//КонецФункции

//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------



//--------------------------------------------------------------------------------------------------


//	Есть табличная часть
Функция Условие_ID1С_0000552(Объект, ИдПравила)

	Если Объект.КоличествоСтрок() > 0 Тогда Возврат(1) КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ЗаписьКнигиПокупок (Документ)
Функция ПравилоВыборкиОбъектов_ЗаписьКнигиПокупок_1С_0001025(ИдПравила)

	ПНДС					=	Перечисление.СтавкиНДС;
	ПустаяСтавка			=	ПолучитьПустоеЗначение("Перечисление.СтавкиНДС");
	ДокПодч					=	СоздатьОбъект("Документ");
	                              
	ДатаНачалаЗ				=	НачМесяца(ФормДатаНач);
	ДатаКонцаЗ				=	Мин(КонМесяца(ФормДатаКон), ПолучитьДатуТА());
	
	Запрос					=	СоздатьОбъект("Запрос");
	
	ТекстЗапроса			=	"
	
	|Период с ДатаНачалаЗ по ДатаКонцаЗ;
	
	|ЮрЛицо					=	Регистр.КнигаПокупок.КредДокумент.Фирма.ЮрЛицо;
	|ТекДокумент			=	Регистр.КнигаПокупок.ТекущийДокумент;
	|КредДокумент			=	Регистр.КнигаПокупок.КредДокумент;
	|СтавкаНДС				=	Регистр.КнигаПокупок.СтавкаНДС;
	|СуммаРуб				=	Регистр.КнигаПокупок.СуммаРуб;
	|СуммаНДС				=	Регистр.КнигаПокупок.СуммаНДС;
	|СуммаНП				=	Регистр.КнигаПокупок.СуммаНП;
	|ВидДолга				=	Регистр.КнигаПокупок.ВидДолга;
	
	|ДокументОплаты			=	Регистр.КнигаПокупок.ДокументОплаты;
	
	|Функция СуммаРуб20		=	Приход(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНДС20		=	Приход(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67));
	|Функция СуммаНП20		=	Приход(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС20) или (СтавкаНДС = ПНДС.НДС16_67) или (СтавкаНДС = ПНДС.НДС20_120));
	
	|Функция СуммаРуб10		=	Приход(СуммаРуб) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНДС10		=	Приход(СуммаНДС) Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09));
	|Функция СуммаНП10		=	Приход(СуммаНП)  Когда ((СтавкаНДС = ПНДС.НДС10) или (СтавкаНДС = ПНДС.НДС9_09) или (СтавкаНДС = ПНДС.НДС10_110));

	|Функция СуммаРуб20_120 = Приход(СуммаРуб) Когда (СтавкаНДС = ПНДС.НДС20_120);
	|Функция СуммаНДС20_120 = Приход(СуммаНДС) Когда (СтавкаНДС = ПНДС.НДС20_120);
	|Функция СуммаРуб10_110 = Приход(СуммаРуб) Когда (СтавкаНДС = ПНДС.НДС10_110);
	|Функция СуммаНДС10_110 = Приход(СуммаНДС) Когда (СтавкаНДС = ПНДС.НДС10_110);
	
	|Функция СуммаРуб0		=	Приход(СуммаРуб) Когда ((СтавкаНДС = ПНДС.БезНДС) или (СтавкаНДС = ПустаяСтавка));
	|Функция СуммаНДС0		=	Приход(СуммаНДС) Когда ((СтавкаНДС = ПНДС.БезНДС) или (СтавкаНДС = ПустаяСтавка));
	|Функция СуммаНП0		=	Приход(СуммаНП)  Когда ((СтавкаНДС = ПНДС.БезНДС) или (СтавкаНДС = ПустаяСтавка));
	
	|Функция СуммаРасход	=	Расход(СуммаРуб);
	                                       
	|Условие (ЮрЛицо в ФормЮрЛицо);
	
	|Группировка	КредДокумент;
	|Группировка	ДокументОплаты;
	|Группировка	ВидДолга;
	
	|";                     
	
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда Возврат(0) КонецЕсли;
	                              
	Пока Запрос.Группировка("КредДокумент") = 1 Цикл
		Пока Запрос.Группировка("ДокументОплаты") = 1 Цикл
			Пока Запрос.Группировка("ВидДолга") = 1 Цикл
				    
				СФ				=	"";
				КредДокумент	=	Запрос.КредДокумент;
				ДокументОплаты	=	Запрос.ДокументОплаты;
				ВидДолга		=	Запрос.ВидДолга;
				
				ДокПоставки		=	КредДокумент;
				ДатаЗаписи		=	Макс(КредДокумент.ДатаДок,ДокументОплаты.ДатаДок);
				
				Если (ДатаЗаписи < ФормДатаНач) или (ДатаЗаписи > ФормДатаКон) Тогда Продолжить КонецЕсли;	// запись не входит в период выгрузки

				ТекДок = Запрос.ТекДокумент;
				Если ТекДок.Вид() = "ЗакрытиеМесяца" Тогда
					ВыгрузитьТаблицуПроводок(ТекДок, ТекДок.ДатаДок, ТекДок.ПредставлениеВида() + " " + СокрЛП(ТекДок.НомерДок) + " (НДС)", "ЗакрытиеМесяца");
					Если ПустоеЗначение(Запрос.СуммаРасход) = 0 Тогда Продолжить КонецЕсли;
				КонецЕсли;
				
				Если (КредДокумент.Вид() = "СчетФактураПолученный") или (КредДокумент.Вид() = "ВозвратПоставщику") Тогда
					СФ 	= КредДокумент;
				Иначе
					ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокПоставки);
					Пока ДокПодч.ПолучитьДокумент()=1 Цикл
						Если ((ДокПодч.Вид()="СчетФактураПолученный") или (ДокПодч.Вид()="СчетФактураВыданный")) и (ДокПодч.Проведен()=1) Тогда
							СФ	=	ДокПодч.ТекущийДокумент();
							Прервать;
						КонецЕсли;
					КонецЦикла;   
				КонецЕсли;
				
				
				Если ПустоеЗначение(СФ) = 1 Тогда
					Сообщить("На документ "+ДокПоставки+" не зарегистрирована счет - фактура!","i");
					Продолжить;
				КонецЕсли;
				
				ПечДополнительнаяИнформация	=	"";
				
				// Дата оплаты - в записи книги покупок указана пользователем.
				Если СФ.Вид() = "СчетФактураВыданный" Тогда
					ДатаОплаты  = Формат(ДокПоставки.ДатаДок,"ДДДММГГГГ");
					ДатаПрихода = Формат(ДокументОплаты.ДатаДок,"ДДДММГГГГ");
					ПечДополнительнаяИнформация	=	"зачет НДС с аванса";
					НомерДата = Формат(СФ.ДатаДок, "Д ДДММГГГГ")  + " № " + СокрЛП(СФ.НомерДок);
				Иначе    
					Если ДокументОплаты.Вид() = "ЗаписьКнигиПокупок" Тогда
						ПечДополнительнаяИнформация	=	ДокументОплаты.ДополнительнаяИнформация;
						ДатаОплаты  = ДокументОплаты.ДатаОплаты;
					Иначе
						ДатаОплаты  = Формат(ДокументОплаты.ДатаДок,"ДДДММГГГГ");
					КонецЕсли;
				    Если СФ.Вид() = "ВозвратПоставщику" Тогда                         
						ДатаПрихода = Формат(СФ.ДатаДок,"ДДДММГГГГ");
						НомерДата = Формат(СФ.ДатаДок, "Д ДДММГГГГ")  + " № " + СокрЛП(СФ.НомерДок);
					Иначе		
						ДатаПрихода = Формат(ДокПоставки.ДатаДок,"ДДДММГГГГ");
						НомерДата = Формат(СФ.ДатаДокВходящий, "Д ДДММГГГГ")  + " № " + СокрЛП(СФ.НомерДокВходящий);
					КонецЕсли;
				КонецЕсли;
				
				
				
				ПечСуммаВсего    = (Запрос.СуммаРуб20 + Запрос.СуммаРуб10+ Запрос.СуммаРуб20_120+ Запрос.СуммаРуб10_110  + Запрос.СуммаРуб0) - 
								   (Запрос.СуммаНП20  + Запрос.СуммаНП10  + Запрос.СуммаНП0);
				ПечСуммаБезНДС20 = 	Запрос.СуммаРуб20 + Запрос.СуммаРуб20_120 - Запрос.СуммаНДС20 - Запрос.СуммаНП20;
				ПечНДС20	     =	Запрос.СуммаНДС20 + Запрос.СуммаНДС20_120;
				ПечСуммаБезНДС10 =	Запрос.СуммаРуб10 + Запрос.СуммаРуб10_110 - Запрос.СуммаНДС10 - Запрос.СуммаНП10;
				ПечНДС10	     =  Запрос.СуммаНДС10 + Запрос.СуммаНДС10_110;
				ПечСуммаНДС0	 =  0;
				ПечСуммаСовсемБезНДС = Запрос.СуммаРуб0  - Запрос.СуммаНП0;
				                                 
				
				Если ПустоеЗначение(ПечСуммаВсего) = 1 Тогда Продолжить КонецЕсли;
				        
				//	Формируем список параметров
				
				СписокПараметров		=	СоздатьОбъект("СписокЗначений");
				
				СписокПараметров.Установить("ДатаДок",					ДатаЗаписи);
				
				СписокПараметров.Установить("Всего",					ПечСуммаВсего);
				СписокПараметров.Установить("СуммаБезНДС20",			ПечСуммаБезНДС20);
				СписокПараметров.Установить("НДС20",					ПечНДС20);
				СписокПараметров.Установить("СуммаБезНДС10",			ПечСуммаБезНДС10);
				СписокПараметров.Установить("НДС10",					ПечНДС10);
				СписокПараметров.Установить("СуммаСовсемБезНДС",		ПечСуммаСовсемБезНДС);
				СписокПараметров.Установить("ДополнительнаяИнформация",	ПечДополнительнаяИнформация);
				
				Если СФ.Вид() = "СчетФактураВыданный" Тогда
					СписокПараметров.Установить("Аванс", 1);
				КонецЕсли;
				
				Если СФ.Вид() <> "ВозвратПоставщику" Тогда
					СписокПараметров.Установить("ДокументОснование",		СФ);
				КонецЕсли;
				
				СписокПараметров.Установить("Контрагент",				СФ.Контрагент);
				
				СписокПараметров.Установить("НДСпоСтавкеНольПроцентов",	0);
				
				СписокПараметров.Установить("ДатаОплаты",				ДатаОплаты);
				СписокПараметров.Установить("ДатаНомерСчетаФактуры",	НомерДата);
				СписокПараметров.Установить("Договор",					СФ.Договор);
	
				
				СписокПараметров.Установить("ДатаОприходования",		ДатаПрихода);
				                                    
				Если		ВидДолга = Перечисление.ВидыДолга.ДолгЗаОС Тогда
					СписокПараметров.Установить("Субсчет19",			19.1);
				ИначеЕсли	ВидДолга = Перечисление.ВидыДолга.ДолгЗаНМА Тогда
					СписокПараметров.Установить("Субсчет19",			19.2);
				Иначе
					Если КредДокумент.Вид() = "ПоступлениеТМЦИмпорт" Тогда
						СписокПараметров.Установить("Субсчет19",			19.4);
					Иначе
						СписокПараметров.Установить("Субсчет19",			19.3);
					КонецЕсли;
				КонецЕсли;
				                    
				
				//	Выгружаем объект
				УзелСсылки	=	1;
				ВыгрузитьПоПравилу( , , ИдПравила, УзелСсылки, СписокПараметров);
				
			КонецЦикла;				//	Группировка	ВидДолга
		КонецЦикла;				//	Группировка	ДокументОплаты
	КонецЦикла;				//	Группировка	КредДокумент

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ЗаписьКнигиПродаж (Документ)
Функция ПравилоВыборкиОбъектов_ЗаписьКнигиПродаж_1С_0001479(ИдПравила)
	
		ПНДС					=	Перечисление.СтавкиНДС;
		ДокПодч					=	СоздатьОбъект("Документ");
		                              
		ДатаНачалаЗ				=	НачМесяца(ФормДатаНач);
		ДатаКонцаЗ				=	Мин(КонМесяца(ФормДатаКон), ПолучитьДатуТА());
		
		Запрос					=	СоздатьОбъект("Запрос");
		
		ТекстЗапроса			=	"
		
		|Период с ДатаНачалаЗ по ДатаКонцаЗ;
			
		|ЮрЛицо 				=	Регистр.КнигаПродаж.КредДокумент.Фирма.ЮрЛицо;
		|КредДокумент			=	Регистр.КнигаПродаж.КредДокумент;
		|ТекДокумент			=	Регистр.КнигаПродаж.ТекущийДокумент;
		|СтавкаНДС 				=	Регистр.КнигаПродаж.СтавкаНДС;
		|КодОперации			=	Регистр.КнигаПродаж.КодОперации;
		                                                          
		|ВидДолга 				=	Регистр.КнигаПродаж.ВидДолга;
		
		|СуммаРуб  				=	Регистр.КнигаПродаж.СуммаРуб;
		|СуммаНДС  				=	Регистр.КнигаПродаж.СуммаНДС;
		|СуммаНП   				=	Регистр.КнигаПродаж.СуммаНП;
		
		|ДокументОплаты			=	Регистр.КнигаПродаж.ДокументОплаты;
		
		|Функция ИтогСуммаРуб	=	Расход(СуммаРуб);
		|Функция ИтогСуммаНДС	=	Расход(СуммаНДС);
		|Функция ИтогСуммаНП	=	Расход(СуммаНП);

		|Функция РВСуммаРуб		=	КонОст(СуммаРуб)Когда(ВидДолга = глВД.РозничнаяВыручка);
		|Функция РВСуммаНДС		=	КонОст(СуммаНДС)Когда(ВидДолга = глВД.РозничнаяВыручка);
		|Функция РВСуммаНП		=	КонОст(СуммаНП)Когда(ВидДолга = глВД.РозничнаяВыручка);

		|Функция РВРасходРуб	=	Расход(СуммаРуб)Когда(ВидДолга = глВД.РозничнаяВыручка);
		|Функция РВРасходНДС	=	Расход(СуммаНДС)Когда(ВидДолга = глВД.РозничнаяВыручка);
		|Функция РВРасходНП		=	Расход(СуммаНП)Когда(ВидДолга = глВД.РозничнаяВыручка);

		|Функция ВозвратСуммаРуб=	Приход(СуммаРуб)Когда(КодОперации = глКО.ВозвратОтПокупателя);
		|Функция ВозвратСуммаНДС=	Приход(СуммаНДС)Когда(КодОперации = глКО.ВозвратОтПокупателя);
		|Функция ВозвратСуммаНП	=	Приход(СуммаНП)Когда(КодОперации = глКО.ВозвратОтПокупателя);
		                                  
		|Функция СРСуммаРуб		=	Приход(СуммаРуб)Когда(КодОперации = глКО.СуммоваяРазница);
		|Функция СРСуммаНДС		=	Приход(СуммаНДС)Когда(КодОперации = глКО.СуммоваяРазница);
		|Функция СРСуммаНП		=	Приход(СуммаНП)Когда(КодОперации = глКО.СуммоваяРазница);

		|Условие (ЮрЛицо в ФормЮрЛицо);
		
		|Группировка	КредДокумент;
		|Группировка	ДокументОплаты;
		|Группировка	СтавкаНДС;
		|Группировка	ВидДолга;
		
		|";                     
		
		                
		МетодОпределенияВыручки = ФормЮрЛицо.МетодОпределенияВыручки.Получить(ДатаКонцаЗ);
		
	    СписокВидовДолга		=	СоздатьОбъект("СписокЗначений");
		СписокВидовДолга.ДобавитьЗначение(Перечисление.ВидыДолга.Аванс);
		СписокВидовДолга.ДобавитьЗначение(Перечисление.ВидыДолга.АвансВал);
		
		СписокКредДокументов	=	СоздатьОбъект("СписокЗначений");
		СписокКредДокументов.ДобавитьЗначение("СчетФактураВыданный");
		СписокКредДокументов.ДобавитьЗначение("ОтчетККМ");
		
		СписокТекДокументов	=	СоздатьОбъект("СписокЗначений");
		СписокТекДокументов.ДобавитьЗначение("ВозвратПоставщику");
		СписокТекДокументов.ДобавитьЗначение("ВозвратОтПокупателя");
		СписокТекДокументов.ДобавитьЗначение("ЗаписьКнигиПродаж");
		
		
		Если МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке Тогда
			
			ТекстЗапроса = ТекстЗапроса + "Условие	(	
											|		((ВидДолга в СписокВидовДолга) И (СуммаРуб < 0))	Или
											|		(ВидДолга = глВД.РозничнаяВыручка)					Или
											|		(КредДокумент.Вид() в СписокКредДокументов) 		Или
											|	    ((КредДокумент.Вид() = ""РеализацияРозница"") 
											|		И (КредДокумент.ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам)) Или
											|		(ТекДокумент.Вид() в СписокТекДокументов)			Или
											|		(КодОперации = глКО.СуммоваяРазница)
											|		);";
											
		ИначеЕсли МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОплате Тогда
	
			ТекстЗапроса = ТекстЗапроса + "Условие	(   (Не(ВидДолга в СписокВидовДолга)) Или (СуммаРуб < 0) Или (ТекДокумент.Вид() в СписокТекДокументов)  );";
			
		КонецЕсли;          
		
		Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда Возврат(0) КонецЕсли;  
		
		Пока Запрос.Группировка("КредДокумент") = 1 Цикл  
			РВСуммаРуб = Запрос.РВСуммаРуб;
			РВСуммаНДС = Запрос.РВСуммаНДС;
			РВСуммаНП  = Запрос.РВСуммаНП;
			Пока Запрос.Группировка("ДокументОплаты") = 1 Цикл 
				НеВыгружать = 0;
				Если (Запрос.ИтогСуммаРуб = 0) и (Запрос.РВРасходРуб <= 0) 
				и ((Запрос.СРСуммаРуб = 0)  или (МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОплате)) Тогда
					Если Запрос.ВозвратСуммаРуб <> 0 Тогда   
						ТекДок = Запрос.ТекДокумент;
						ВыгрузитьТаблицуПроводок(ТекДок, ТекДок.ДатаДок, ТекДок.ПредставлениеВида() + " " + СокрЛП(ТекДок.НомерДок) + " (НДС)", "Возврат");
					КонецЕсли;
					Продолжить;
				КонецЕсли;                                      
				
				Если Запрос.РВРасходРуб > 0 Тогда
					РозничнаяВыручка = 1;
				Иначе
					РозничнаяВыручка = 0;
				КонецЕсли;        
				
				СФ				=	"";
				КредДокумент	=	Запрос.КредДокумент;
				ДокументОплаты	=	Запрос.ДокументОплаты;
				ДокПоставки		=	КредДокумент;
				
				Если ПустоеЗначение(ДокументОплаты) = 1 Тогда
					ДатаЗаписи = КредДокумент.ДатаДок;
				Иначе
					ДатаЗаписи = Макс(КредДокумент.ДатаДок,ДокументОплаты.ДатаДок);
				КонецЕсли;                                                       
				
				Если Запрос.СРСуммаРуб > 0 Тогда     
					Если ПустоеЗначение(Запрос.ТекДокумент) = 0 Тогда
						ДатаЗаписи = Запрос.ТекДокумент.ДатаДок;
					КонецЕсли;
				КонецЕсли; 
				
				Если (ДатаЗаписи < ФормДатаНач) Или (ДатаЗаписи > ФормДатаКон) Тогда Продолжить КонецЕсли;	// запись не входит в период выгрузки
				
				ИскатьВПодчиненных = 0;
				Если КредДокумент.Вид() = "СчетФактураВыданный" Тогда
					СФ 	= КредДокумент;
				Иначе     
					Если (ДокПоставки.Вид() = "ОтчетККМ")
					Или  (ДокПоставки.Вид() = "ВозвратПоставщику")
					Или  (ДокПоставки.Вид() = "ВозвратОтПокупателя")	
					Или  (Запрос.ТекДокумент.Вид() = "ВозвратОтПокупателя")	Тогда
						СФ	=	ДокПоставки;     
					ИначеЕсли (ДокПоставки.Вид() = "РеализацияРозница") Тогда 
						Если ДокПоставки.ВидОперации = Перечисление.ВидыОперацийРеализацияРозница.ОтчетПоПродажам Тогда
							СФ = ДокПоставки;
						Иначе
							ИскатьВПодчиненных = 1;
						КонецЕсли;
					ИначеЕсли (ДокПоставки.Вид() = "ПКО") Тогда 
						Если ДокПоставки.КодОперации = Перечисление.КодыОпераций.РозничнаяВыручка Тогда
							СФ = ДокПоставки;
						Иначе
							ИскатьВПодчиненных = 1;
						КонецЕсли;
					Иначе
						ИскатьВПодчиненных = 1;
					КонецЕсли;                       
					
					Если ИскатьВПодчиненных = 1 Тогда
						ДокПодч.ВыбратьПодчиненныеДокументы(,,ДокПоставки);
						Пока ДокПодч.ПолучитьДокумент()=1 Цикл
							Если (ДокПодч.Вид()="СчетФактураВыданный") и (ДокПодч.Проведен()=1) Тогда
								СФ	=	ДокПодч.ТекущийДокумент();
							КонецЕсли;
						КонецЦикла;   
					КонецЕсли;
				КонецЕсли;
				
				
				Если ПустоеЗначение(СФ) = 1 Тогда
					Сообщить("На документ "+ДокПоставки+" не зарегистрирована счет - фактура!","i");
					Продолжить;
				КонецЕсли;
				
				Если ПустоеЗначение(Константа.ПрефиксИБ) = 0 Тогда
					НомерДата = Формат(СФ.ДатаДок, "Д ДДММГГГГ") + " № " + ДополнитьНулями(СокрЛП(Константа.ПрефиксИБ) + глНомерНаПечать(СФ), 8);
				Иначе
					НомерДата = Формат(СФ.ДатаДок, "Д ДДММГГГГ") + " № " + глНомерНаПечать(СФ);
				КонецЕсли;
		
				//	Выгрузим счет-фактуру
				Если СФ.Вид() = "СчетФактураВыданный" Тогда
					ВыгрузитьПоПравилу(СФ);
				КонецЕсли;
				
				Если ДокументОплаты.Вид() = "ЗаписьКнигиПродаж" Тогда
					НомерДата = НомерДата + " " + ДокументОплаты.ДополнительнаяИнформация;
				КонецЕсли;
				                                        
				// Дата оплаты - в записи книги покупок указана пользователем.
				ДатаОплаты = ?(ДокументОплаты.Вид() = "ЗаписьКнигиПродаж", ДокументОплаты.ДатаОплаты, Формат(ДокументОплаты.ДатаДок,"ДДДММГГГГ"));
				                          
							   
				//	Формируем список параметров
				
				СписокПараметров		=	СоздатьОбъект("СписокЗначений");
				
				СписокПараметров.Установить("ДатаДок",					Макс(СФ.ДатаДок, ДатаЗаписи));
				СписокПараметров.Установить("ДатаОплаты",				ДатаОплаты);
				СписокПараметров.Установить("ДокОплаты",				ДокументОплаты);
				СписокПараметров.Установить("ДатаНомерСчетаФактуры",	НомерДата);
				СписокПараметров.Установить("НДСпоСтавкеНольПроцентов",	0);
				
				Если СФ.Вид() = "ОтчетККМ" Тогда
					СписокПараметров.Установить("Контрагент",			СФ.Касса);		//	"Кассы -> Контрагенты"
					СписокПараметров.Установить("Договор",				СФ.Касса);		//	"Кассы -> Договоры"
				Иначе             
					СписокПараметров.Установить("Контрагент",			СФ.Контрагент);
					СписокПараметров.Установить("Договор",				СФ.Договор);
				КонецЕсли;
				          
				
				Если СФ.Вид() = "СчетФактураВыданный" Тогда
					СписокПараметров.Установить("Аванс",				СФ.СФНаАванс);
					СписокПараметров.Установить("ДокументОснование",	СФ);
				КонецЕсли;
			    
				Курс = ПолучитьКурсВзаиморасчетов(ДокументОплаты);
				СписокПараметров.Установить("Курс", Курс);
						
						
				Пока Запрос.Группировка("СтавкаНДС") = 1 Цикл
					Пока Запрос.Группировка("ВидДолга") = 1 Цикл   
						Если (Запрос.ИтогСуммаРуб <> 0) и (РозничнаяВыручка = 0) Тогда
							ПараметрыСтроки	=	СоздатьОбъект("СписокЗначений");
							
							СписокПараметров.ДобавитьЗначение(ПараметрыСтроки,	"#Строка");
							                                                             
							ПараметрыСтроки.Установить("Всего",			Запрос.ИтогСуммаРуб - Запрос.ИтогСуммаНП);
							
							Если Найти(СокрЛП(Запрос.ВидДолга), "Аванс") > 0 Тогда
								ПараметрыСтроки.Установить("Сумма",		Запрос.ИтогСуммаРуб - Запрос.ИтогСуммаНП);
							ИначеЕсли  Запрос.ИтогСуммаРуб <> 0 Тогда
								ПараметрыСтроки.Установить("Сумма",		Запрос.ИтогСуммаРуб - Запрос.ИтогСуммаНДС - Запрос.ИтогСуммаНП);
							Иначе
								ПараметрыСтроки.Установить("Сумма",		Запрос.ВозвратСуммаРуб - Запрос.ВозвратСуммаНДС - Запрос.ВозвратСуммаНП);
							КонецЕсли;                     
							                                                           
							ИдВидаДолга = Запрос.ВидДолга.Идентификатор();
							Если ДокПоставки.Вид() = "ВозвратПоставщику" Тогда
								ПараметрыСтроки.Установить("Счет",			"60.1");
								ПараметрыСтроки.Установить("Субконто1",		СФ.Контрагент);
								ПараметрыСтроки.Установить("Субконто2",		СФ.Договор);
							Иначе
								ПараметрыСтроки.Установить("Счет",			"90.3");
								Если Найти(ИдВидаДолга, "ДолгЗаТовары") > 0 Тогда
									ПараметрыСтроки.Установить("Субконто1",		"Товар");
										
								ИначеЕсли Найти(ИдВидаДолга, "ДолгЗаУслуги") > 0 Тогда
									ПараметрыСтроки.Установить("Субконто1",		"Услуга");
									
								ИначеЕсли Найти(ИдВидаДолга, "ДолгЗаПродукцию") > 0 Тогда
									ПараметрыСтроки.Установить("Субконто1",		"Продукция");
									
								Иначе
									ПараметрыСтроки.Установить("Счет",			"91.2");
									ПараметрыСтроки.Установить("Субконто1",		"Поступления и расходы от выбытия иных активов");
								КонецЕсли;	 
								Если ПараметрыСтроки.Получить("Счет") <> "91.2" Тогда
									ПараметрыСтроки.Установить("Субконто2",		Запрос.СтавкаНДС);
								КонецЕсли;
							КонецЕсли;
							
							                                               
							ПараметрыСтроки.Установить("СтавкаНДС",		Запрос.СтавкаНДС);
							ПараметрыСтроки.Установить("НДС",			Запрос.ИтогСуммаНДС);
							
							Если (Запрос.СтавкаНДС = ПНДС.НДС20_120) Или (Запрос.СтавкаНДС = ПНДС.НДС10_110) Тогда
							     ПараметрыСтроки.Установить("СуммаНДСопределяетсяРасчетнымМетодом",	1);
							КонецЕсли; 
					  	КонецЕсли;

						Если (РВСуммаРуб <> 0) и (ПустоеЗначение(Запрос.СтавкаНДС) = 0) 
							и (Запрос.РВРасходРуб > 0) Тогда
							ПараметрыСтроки	=	СоздатьОбъект("СписокЗначений");
							
							СписокПараметров.ДобавитьЗначение(ПараметрыСтроки,	"#Строка");
							                                                             
							ПараметрыСтроки.Установить("Всего",			-(РВСуммаРуб - РВСуммаНП));
							
							ПараметрыСтроки.Установить("Сумма",		-(РВСуммаРуб - РВСуммаНДС - РВСуммаНП));
							                                                           
							ИдВидаДолга = Запрос.ВидДолга.Идентификатор();

							ПараметрыСтроки.Установить("Счет",			"90.3");

							ПараметрыСтроки.Установить("Субконто1",		"Товар");
							                                               
							ПараметрыСтроки.Установить("СтавкаНДС",		Запрос.СтавкаНДС);
							ПараметрыСтроки.Установить("НДС",			-РВСуммаНДС);
							
						ИначеЕсли ПустоеЗначение(Запрос.СтавкаНДС) = 1 Тогда
							НеВыгружать = 1;
					  	КонецЕсли;

					  	Если (Запрос.СРСуммаРуб <> 0) и (МетодОпределенияВыручки = Перечисление.МетодыОпределенияВыручки.ПоОтгрузке) Тогда
				
					  		Курс = ПолучитьКурсВзаиморасчетов(Запрос.ТекДокумент);
							СписокПараметров.Установить("Курс", Курс);
		
							ПараметрыСтроки	=	СоздатьОбъект("СписокЗначений");
							
							СписокПараметров.ДобавитьЗначение(ПараметрыСтроки,	"#Строка");
							
							ПараметрыСтроки.Установить("Всего",			Запрос.СРСуммаРуб - Запрос.СРСуммаНП);
							                                            
							
							Если Найти(СокрЛП(Запрос.ВидДолга), "Аванс") > 0 Тогда
								ПараметрыСтроки.Установить("Сумма",		Запрос.СРСуммаРуб - Запрос.СРСуммаНП);
							Иначе
								ПараметрыСтроки.Установить("Сумма",		Запрос.СРСуммаРуб - Запрос.СРСуммаНДС - Запрос.СРСуммаНП);
							КонецЕсли;  
							             
							
							ПараметрыСтроки.Установить("Счет",			"90.3");
							ИдВидаДолга = Запрос.ВидДолга.Идентификатор();
							Если Найти(ИдВидаДолга, "ДолгЗаТовары") > 0 Тогда
								ПараметрыСтроки.Установить("Субконто1",		"Товар");
								
							ИначеЕсли Найти(ИдВидаДолга, "ДолгЗаУслуги") > 0 Тогда
								ПараметрыСтроки.Установить("Субконто1",		"Услуга");
								
							ИначеЕсли Найти(ИдВидаДолга, "ДолгЗаПродукцию") > 0 Тогда
								ПараметрыСтроки.Установить("Субконто1",		"Продукция");
								
							Иначе
								ПараметрыСтроки.Установить("Субконто1",		"Товар");
								
							КонецЕсли;
							
							                                               
							ПараметрыСтроки.Установить("Субконто2",		Запрос.СтавкаНДС);
							ПараметрыСтроки.Установить("СтавкаНДС",		Запрос.СтавкаНДС);
							ПараметрыСтроки.Установить("НДС",			Запрос.СРСуммаНДС);
							
							Если (Запрос.СтавкаНДС = ПНДС.НДС20_120) Или (Запрос.СтавкаНДС = ПНДС.НДС10_110) Тогда
							     ПараметрыСтроки.Установить("СуммаНДСопределяетсяРасчетнымМетодом",	1);
							КонецЕсли; 
					  	КонецЕсли;
						
					КонецЦикла;			//	Группировка	ВидДолга
				КонецЦикла;			//	Группировка	СтавкаНДС
				
					
				//	Выгружаем объект            
				Если НеВыгружать = 0 Тогда
					УзелСсылки	=	1;
					ВыгрузитьПоПравилу( , , ИдПравила, УзелСсылки, СписокПараметров);
				КонецЕсли;
				
				
			КонецЦикла;			//	Группировка	ДокументОплаты
		КонецЦикла;			//	Группировка	КредДокумент

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Конвертируем табл. часть счета фактуры
Функция ПравилоРеквизита_ID1С_0007616(Источник, Приемник, СписокПараметровПравила) 
	
	КурсВзаиморасчетов = ПолучитьКурсВзаиморасчетов(Источник);

	Док =	Источник;
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			
			Эл_Строка				=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
			
			Товар					=	Док.Наименование;
			Количество				=	Док.Количество;
			Цена					=	Док.Цена;
			НДС						=	Док.СуммаНДС;
			СтавкаНДС				=	Док.СтавкаНДС;
			ГТД						=	Док.ГТД;
			СтранаПроисхождения		=	СокрЛП(Док.СтранаПроисхождения);
			                    
			
			Если		(Док.СФНаАванс = 1)		Тогда
				Сумма				=	Док.Сумма;
				Всего				=	Док.Сумма;
			ИначеЕсли	(Док.СуммаВклНДС = 1)	Тогда
				Сумма				=	Док.Сумма - НДС;	//	это сумма без НДС
				Всего				=	Док.Сумма;
			Иначе
				Сумма				=	Док.Сумма;
				Всего				=	Док.Сумма + НДС;
			КонецЕсли;
			
			
			Если Док.СуммаВклНП = 1 Тогда
				Сумма				=	Сумма - Док.СуммаНП;
				Всего				=	Всего - Док.СуммаНП;
			КонецЕсли;
			     
			
			Если	(СтавкаНДС = Перечисление.СтавкиНДС.НДС20_120) Или 
					(СтавкаНДС = Перечисление.СтавкиНДС.НДС10_110) Тогда
				ВыгрузитьРеквизит(Приемник, "СуммаНДСопределяетсяРасчетнымМетодом", 1);
			КонецЕсли;
			
			
			ВыгрузитьРеквизит(Эл_Строка, "Товар", Товар, 	, "Строка");
			
			ВыгрузитьРеквизит(Эл_Строка, "ГТД", , 				ГТД);
			ВыгрузитьРеквизит(Эл_Строка, "СтранаПроисхождения",	СтранаПроисхождения);
			
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,			СтавкаНДС);
			
			ВыгрузитьРеквизит(Эл_Строка, "Количество", 			Количество);
			ВыгрузитьРеквизит(Эл_Строка, "Цена", 				глПересчет(Цена,  Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, КурсВзаиморасчетов));
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 				глПересчет(НДС,   Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, КурсВзаиморасчетов));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 				глПересчет(Сумма, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, КурсВзаиморасчетов));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 				глПересчет(Всего, Док.Валюта, Док.Курс, Док.Договор.ВалютаВзаиморасчетов, КурсВзаиморасчетов));
			
			ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"91.2");
			ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,	"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
			
		КонецЦикла;		//	по строкам документа
		
		Возврат("#Прервать");

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005550(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005551(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0005944(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0005946(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Валютный
Функция ПравилоРеквизита_ID1С_0007495(Источник, Приемник, СписокПараметровПравила)

	Если Источник.Валюта = Константа.ВалютаБухУчета Тогда
	     Возврат(  1  );
	Иначе
	     Возврат(  2  );
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидКонтрагента
Функция ПравилоРеквизита_ID1С_0005507(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ЮрФизЛицо.Вид() = "ФизЛица" Тогда
		Возврат	"ЧастноеЛицо";
	Иначе
		Возврат	"Организация";
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ВидНоменклатуры
Функция ПравилоРеквизита_ID1С_0005528(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		ТипНоменклатуры	 = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ТипНоменклатуры = "Продукция" Тогда
			Возврат(0);
		КонецЕсли;
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат(0);
	КонецЕсли;
	
	Возврат(111111111111);   // генерить объект по этому правилу

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ДатаНомерСчетаФактуры
Функция ПравилоРеквизита_ID1С_0007594(Источник, Приемник, СписокПараметровПравила)

	Возврат СокрЛП(Источник.ДатаДокВходящий) + " № " + СокрЛП(Источник.НомерДокВходящий);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ДатаОприходования  ( !! задано условие !! )
Функция ПравилоРеквизита_ID1С_0007596(Источник, Приемник, СписокПараметровПравила)

	Возврат Источник.ДокОснование.ДатаДок;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Договор
Функция ПравилоРеквизита_ID1С_0005591(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Договор");
	Если Зн. Вид() = "Договоры" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Договор
Функция ПравилоРеквизита_ID1С_0005592(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Договор");
	Если Зн. Вид() <> "Договоры" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ИНН
Функция ПравилоРеквизита_ID1С_0005505(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ИНН;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Контрагент
Функция ПравилоРеквизита_ID1С_0005589(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Контрагент");
	Если Зн. Вид() = "Контрагенты" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Контрагент
Функция ПравилоРеквизита_ID1С_0005590(Источник, Приемник, СписокПараметровПравила)

	Зн = СписокПараметровПравила.Получить("Контрагент");
	Если Зн. Вид() <> "Контрагенты" Тогда
	       Возврат(Зн);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  МПЗ
Функция ПравилоРеквизита_ID1С_0007789(Источник, Приемник, СписокПараметровПравила)

	СтатусПартии	=	СписокПараметровПравила.Получить("СтатусПартии");
	Если Лев(СтатусПартии.Идентификатор(), 1) = "М" Тогда
		Возврат	СписокПараметровПравила.Получить("МПЗ");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  МПЗ
Функция ПравилоРеквизита_ID1С_0007788(Источник, Приемник, СписокПараметровПравила)

	СтатусПартии	=	СписокПараметровПравила.Получить("СтатусПартии");
	Если Найти("ТП", Лев(СтатусПартии.Идентификатор(), 1)) > 0 Тогда
		Возврат	СписокПараметровПравила.Получить("МПЗ");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Основание
Функция ПравилоРеквизита_ID1С_0007621(Источник, Приемник, СписокПараметровПравила)

	Возврат "Лента ККМ № " + Источник.НомерЛентыККМ;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПолнНаименование
Функция ПравилоРеквизита_ID1С_0005502(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ПолнНаименование;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПочтовыйАдрес
Функция ПравилоРеквизита_ID1С_0005504(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ФактАдрес;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ПринятоОт
Функция ПравилоРеквизита_ID1С_0007502(Источник, Приемник, СписокПараметровПравила)

	Возврат "Прием выручки ККМ";

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  СубСчет10
Функция ПравилоРеквизита_ID1С_0005531(Источник, Приемник, СписокПараметровПравила)

	СчетДт	=	СписокПараметровПравила;
	СчетКт	=	ОтделитьРазделителем(СчетДт, ",");
	Если Найти(СчетДт, "10.") > 0 Тогда
		Возврат(СчетДт);
	Иначе
		Возврат(СчетКт);
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Телефоны
Функция ПравилоРеквизита_ID1С_0005506(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.Телефоны;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ТипНоменклатуры
Функция ПравилоРеквизита_ID1С_0005523(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		ТипНоменклатуры = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ПустоеЗначение(ТипНоменклатуры) = 1 Тогда
			Возврат("Товар");
		КонецЕсли;
		
		Возврат ТипНоменклатуры;
		
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат("Продукция");
	Иначе
		Возврат("Товар");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ТипТовара
Функция ПравилоРеквизита_ID1С_0005522(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		ТипТовара = СписокПараметровПравила.Получить("ТипТовара");
		Если ПустоеЗначение(ТипТовара) = 1 Тогда
			Возврат("Собственный");
		КонецЕсли;
		
		Возврат ТипТовара;
	
	ИначеЕсли	Найти(СписокПараметровПравила, "41.1") > 0	Тогда
		Возврат("Собственный");
	ИначеЕсли	Найти(СписокПараметровПравила, "41.3") > 0	Тогда
		Возврат("Тара");
	ИначеЕсли	Найти(СписокПараметровПравила, "004") > 0	Тогда
		Возврат("НаКомиссии");
	ИначеЕсли	Найти(СписокПараметровПравила, "принятый") > 0  Тогда
		Возврат("НаКомиссии");
	Иначе
		Возврат("Собственный");
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  ЮридическийАдрес
Функция ПравилоРеквизита_ID1С_0005503(Источник, Приемник, СписокПараметровПравила)

	Возврат  Источник.ЮрФизЛицо.ЮрАдрес;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	ВалютаВзаиморасчетов  -->  ВалютаДоговора
Функция ПравилоРеквизита_ID1С_0005500(Источник, Приемник, СписокПараметровПравила)

	Если Источник.ВалютаВзаиморасчетов <> Константа.ВалютаБухУчета Тогда
	     Возврат(  Источник.ВалютаВзаиморасчетов  );
	КонецЕсли;  // иначе не заполняем...

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	ВидНоменклатуры  -->  ВидНоменклатуры
Функция ПравилоРеквизита_ID1С_0005524(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		ТипНоменклатуры	 = СписокПараметровПравила.Получить("ТипНоменклатуры");
		Если ТипНоменклатуры = "Продукция" Тогда
			Возврат(1111111111);   // генерить объект по этому правилу
		КонецЕсли;
	ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
		Возврат(1111111111); 
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Вычислим и добавим значения сумм
Функция ПравилоРеквизита_ID1С_0007614(Источник, Приемник, СписокПараметровПравила)

		ВалютаДоговора	=	Источник.Договор.ВалютаВзаиморасчетов;
		ВалютаДокумента	=	Источник.Валюта;
		КурсДокумента	=	Источник.Курс;
		Если ВалютаДокумента <> ВалютаДоговора Тогда
			КурсВалютыДоговора	=	глКурсДляВалюты(ВалютаДоговора, Источник.ДатаДок);
		Иначе
			КурсВалютыДоговора	=	КурсДокумента;
		КонецЕсли;
		
		
		Если ПустоеЗначение(Источник.ДокОснование) = 1 Тогда
			Источник.ВыбратьСтроки();
			Пока Источник.ПолучитьСтроку() = 1 Цикл
				Если		(Источник.СтавкаНДС = Перечисление.СтавкиНДС.НДС20) Или (Источник.СтавкаНДС = Перечисление.СтавкиНДС.НДС16_67) Тогда
					СуммаБезНДС20		=	Источник.Сумма - Источник.СуммаНДС	+ СуммаБезНДС20;
					НДС20				=	Источник.СуммаНДС + НДС20;
				ИначеЕсли	(Источник.СтавкаНДС = Перечисление.СтавкиНДС.НДС10) Или (Источник.СтавкаНДС = Перечисление.СтавкиНДС.НДС9_09) Тогда
					СуммаБезНДС10		=	Источник.Сумма - Источник.СуммаНДС	+ СуммаБезНДС10;
					НДС10				=	Источник.СуммаНДС	+ НДС10;
				Иначе
					СуммаСовсемБезНДС	=	Источник.Сумма - Источник.СуммаНДС + СуммаСовсемБезНДС;
				КонецЕсли;
			КонецЦикла;
			Всего = Источник.Итог("Сумма");
			                                                                       
			СуммаСовсемБезНДС	=	глПересчет(СуммаСовсемБезНДС,	ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			СуммаБезНДС10		=	глПересчет(СуммаБезНДС10,		ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			СуммаБезНДС20		=	глПересчет(СуммаБезНДС20,		ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			НДС10				=	глПересчет(НДС10,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			НДС20				=	глПересчет(НДС20,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			Всего				=	глПересчет(Всего,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
			
			ВыгрузитьРеквизит(Приемник, "СуммаСовсемБезНДС",	СуммаСовсемБезНДС);
			ВыгрузитьРеквизит(Приемник, "СуммаБезНДС10", 		СуммаБезНДС10);
			ВыгрузитьРеквизит(Приемник, "СуммаБезНДС20", 		СуммаБезНДС20);
			ВыгрузитьРеквизит(Приемник, "НДС10", 				НДС10);
			ВыгрузитьРеквизит(Приемник, "НДС20", 				НДС20);
			ВыгрузитьРеквизит(Приемник, "Всего", 				Всего);
			ВыгрузитьРеквизит(Приемник, "Курс", 				КурсВалютыДоговора);
		
			Возврат(0);
		КонецЕсли;
			
		
		//---------------------------------------
		
		
		ДокОснование	=	СоздатьОбъект("Документ");
		ДокОснование.НайтиДокумент(Источник.ДокОснование);
		ВидОсн			=	ДокОснование.Вид();
		
		ДокОснование.ВыбратьСтроки();
		Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			
			Если ВидОсн = "ВводОстатковПоставщика" Тогда
				ПечСумма 			= ДокОснование.СуммаРуб - ДокОснование.СуммаНДС - ДокОснование.СуммаНП;
				ПечСуммаСналогом	= ДокОснование.СуммаРуб - ДокОснование.СуммаНП;
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
				
				ВыгрузитьРеквизит(Приемник, "Счет",	"00");
				УзелСубконто1 = Приемник.ВыбратьУзел("Реквизит[@Идентификатор=""Субконто1""]");
				Если ПустоеЗначение(УзелСубконто1) = 0 Тогда
					Приемник.УдалитьПодчиненный(УзелСубконто1);
				КонецЕсли;
				УзелСубконто2 = Приемник.ВыбратьУзел("Реквизит[@Идентификатор=""Субконто2""]");
				Если ПустоеЗначение(УзелСубконто2) = 0 Тогда
					Приемник.УдалитьПодчиненный(УзелСубконто2);
				КонецЕсли;
				
			ИначеЕсли ВидОсн = "ПоступлениеДопРасходы" Тогда
				ПечСумма 			= ДокОснование.Сумма - 
									?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаСналогом	= ДокОснование.Сумма + 
									?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
			ИначеЕсли ВидОсн = "ПоступлениеПрочее" Тогда
				ПечСумма 			= ДокОснование.Сумма - 
									?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаСналогом	= ДокОснование.Сумма + 
									?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
			ИначеЕсли (ВидОсн = "ПоступлениеТМЦ") Или (ВидОсн = "ПоступлениеТМЦРозница") Тогда
				ПечСумма 			= ДокОснование.Сумма - 
									?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаСналогом	= ДокОснование.Сумма + 
									?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
			ИначеЕсли ВидОсн = "ПоступлениеТМЦИмпорт" Тогда
				ПечСумма 			= ДокОснование.ТаможеннаяСтоимость + ДокОснование.СуммаПошлиныРуб;
				ПечСуммаСналогом	= ПечСумма + ДокОснование.СуммаНДСРуб;
				ПечСуммаНДС         = ДокОснование.СуммаНДСРуб;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДСРуб) = 1, "", ДокОснование.СтавкаНДС);
				Если ДокОснование.НДСВВалюте = 1 Тогда
					ВыгрузитьРеквизит(Приемник, "Счет",	"76.55");
				Иначе
					ВыгрузитьРеквизит(Приемник, "Счет",	"76.5");
				КонецЕсли;
				ВалютаДокумента		=	глРубли;
				КурсДокумента		=	1;
			ИначеЕсли ВидОсн = "СтрокаАвансОтчетаПрочее" Тогда
				ПечСумма 			= ДокОснование.Сумма - 
									?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаСналогом	= ДокОснование.Сумма + 
									?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
				
				ВыгрузитьРеквизит(Приемник, "Субконто1", , ДокОснование.ФизЛицо, "Справочник", "Сотрудники");
				УзелСубконто2 = Приемник.ВыбратьУзел("Реквизит[@Идентификатор=""Субконто2""]");
				Если ПустоеЗначение(УзелСубконто2) = 0 Тогда
					Приемник.УдалитьПодчиненный(УзелСубконто2);
				КонецЕсли;
			ИначеЕсли ВидОсн = "СтрокаАвансОтчетаТМЦ" Тогда
				ПечСумма 			= ДокОснование.Сумма - 
									?(ДокОснование.СуммаВклНДС=0,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаСналогом	= ДокОснование.Сумма + 
									?(ДокОснование.СуммаВклНДС=1,0,ДокОснование.СуммаНДС) -
									?(ДокОснование.СуммаВклНП=1,ДокОснование.СуммаНП,0);
				ПечСуммаНДС         = ДокОснование.СуммаНДС;
				ПечСтавкаНДС		= ?(ПустоеЗначение(ДокОснование.СуммаНДС) = 1, "", ДокОснование.СтавкаНДС);
				
				ВыгрузитьРеквизит(Приемник, "Субконто1", , ДокОснование.ФизЛицо, "Справочник", "Сотрудники");
				УзелСубконто2 = Приемник.ВыбратьУзел("Реквизит[@Идентификатор=""Субконто2""]");
				Если ПустоеЗначение(УзелСубконто2) = 0 Тогда
					Приемник.УдалитьПодчиненный(УзелСубконто2);
				КонецЕсли;
			КонецЕсли;
			                         
			Всего	=	ПечСуммаСналогом + Всего;
			
			Если		(ПечСтавкаНДС = Перечисление.СтавкиНДС.НДС20) Или (ПечСтавкаНДС = Перечисление.СтавкиНДС.НДС16_67) Тогда
				СуммаБезНДС20		=	ПечСумма	+ СуммаБезНДС20;
				НДС20				=	ПечСуммаНДС + НДС20;
			ИначеЕсли	(ПечСтавкаНДС = Перечисление.СтавкиНДС.НДС10) Или (ПечСтавкаНДС = Перечисление.СтавкиНДС.НДС9_09) Тогда
				СуммаБезНДС10		=	ПечСумма	+ СуммаБезНДС10;
				НДС10				=	ПечСуммаНДС	+ НДС10;
			Иначе
				СуммаСовсемБезНДС	=	ПечСумма + СуммаСовсемБезНДС;
			КонецЕсли;
			
		КонецЦикла;		//	по строкам документа основания
	
		
		СуммаСовсемБезНДС	=	глПересчет(СуммаСовсемБезНДС,	ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		СуммаБезНДС10		=	глПересчет(СуммаБезНДС10,		ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		СуммаБезНДС20		=	глПересчет(СуммаБезНДС20,		ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		НДС10				=	глПересчет(НДС10,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		НДС20				=	глПересчет(НДС20,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		Всего				=	глПересчет(Всего,				ВалютаДокумента, КурсДокумента, ВалютаДоговора, КурсВалютыДоговора);
		
		
		ВыгрузитьРеквизит(Приемник, "СуммаСовсемБезНДС",	СуммаСовсемБезНДС);
		ВыгрузитьРеквизит(Приемник, "СуммаБезНДС10", 		СуммаБезНДС10);
		ВыгрузитьРеквизит(Приемник, "СуммаБезНДС20", 		СуммаБезНДС20);
		ВыгрузитьРеквизит(Приемник, "НДС10", 				НДС10);
		ВыгрузитьРеквизит(Приемник, "НДС20", 				НДС20);
		ВыгрузитьРеквизит(Приемник, "Всего", 				Всего);
		ВыгрузитьРеквизит(Приемник, "Курс", 				КурсВалютыДоговора);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Заполним таблицу импортных товаров
Функция ПравилоРеквизита_ID1С_0007615(Источник, Приемник, СписокПараметровПравила)

	Док	=	СоздатьОбъект("Документ");
	Док.НайтиДокумент(Источник.ДокОснование);
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		
		ГТД			=	Док.Партия.ГТД;
		
		Если ПустоеЗначение(ГТД) = 1 Тогда Продолжить КонецЕсли;
		
		Параметры	=	СоздатьОбъект("СписокЗначений");
		Параметры.Установить("СтранаПроисхождения", СокрЛП(Док.Партия.СтранаПроисхождения));
		
		
		Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
		                                           
		ВыгрузитьРеквизит(Эл_Строка, "Товар", , 		Док.Номенклатура, 		"Справочник", "Номенклатура", , Параметры);
		ВыгрузитьРеквизит(Эл_Строка, "ГТД", , 			ГТД);
		ВыгрузитьРеквизит(Эл_Строка, "Количество", 		Док.Количество);
		
	КонецЦикла;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Заполняем табл. часть из документа основания
Функция ПравилоРеквизита_ID1С_0007619(Источник, Приемник, СписокПараметровПравила)
	Док	=	СоздатьОбъект("Документ");
	Док.НайтиДокумент(Источник.ДокОснование);
	ВидДокОснования	=	Док.Вид(); 
	Если (глЕстьРеквизитШапки("Валюта", ВидДокОснования) = 1) и (глЕстьРеквизитШапки("Курс", ВидДокОснования) = 1) и
		(глЕстьРеквизитШапки("Договор", ВидДокОснования) = 1) Тогда
		ВалютаНач = Док.Валюта;
		ВалютаКон = Док.Договор.ВалютаВзаиморасчетов;
		КурсНач   = Док.Курс;
		КурсКон   = ПолучитьКурсВзаиморасчетов(Док.ТекущийДокумент());  
	Иначе
		ВалютаНач = глРубли;
		ВалютаКон = глРубли;
		КурсНач   = 1;
		КурсКон   = 1;
	КонецЕсли;
		
	
	
	Если		(ВидДокОснования = "ПКО")					Или
				(ВидДокОснования = "СтрокаВыпискиПриход")	Тогда
			
					
		//	Ошибка пользователя
		Сообщить("Незаполнена табличная часть.
				 |Вид документа основания:	 " + ВидДокОснования);
				 
		Возврат(0);
		                 
		
	ИначеЕсли	(ВидДокОснования = "ЗакрытиеМесяца")		Или
				(ВидДокОснования = "ОтчетКомитенту")		Тогда
					
		Если		ВидДокОснования = "ЗакрытиеМесяца" Тогда
			ЗначениеСтроки	=	"Корректировка начисленного НДС";
		Иначе
			ЗначениеСтроки	=	"Комиссионное вознаграждение";
		КонецЕсли;
		
		Таб = СоздатьОбъект("ТаблицаЗначений");
		Таб.НоваяКолонка("Сумма",);
		Таб.НоваяКолонка("СтавкаНДС");
		Таб.НоваяКолонка("СуммаНДС",);
		Таб.НоваяКолонка("ВсегоСНДС",);
		
		РегКнигаПродаж = СоздатьОбъект("Регистр.КнигаПродаж");
		РегКнигаПродаж.ВыбратьДвиженияДокумента(Док);
		Пока РегКнигаПродаж.ПолучитьДвижение() = 1 Цикл
			Если РегКнигаПродаж.Приход = 1 Тогда
			    
				Поз = 0;
				ВремИтогСумма = РегКнигаПродаж.СуммаРуб - РегКнигаПродаж.СуммаНДС - РегКнигаПродаж.СуммаНП;
				
				Если Таб.НайтиЗначение(РегКнигаПродаж.СтавкаНДС, Поз, "СтавкаНДС") = 0 Тогда
				    Таб.НоваяСтрока();
					Таб.СтавкаНДС    = РегКнигаПродаж.СтавкаНДС;
					Таб.СуммаНДС     = РегКнигаПродаж.СуммаНДС;
					Таб.Сумма        = ВремИтогСумма;
					Таб.ВсегоСНДС    = РегКнигаПродаж.СуммаРуб;
				Иначе
					Таб.ПолучитьСтрокуПоНомеру(Поз);
					Таб.СуммаНДС     = Таб.СуммаНДС  + РегКнигаПродаж.СуммаНДС;
					Таб.Сумма        = Таб.Сумма     + ВремИтогСумма;
					Таб.ВсегоСНДС    = Таб.ВсегоСНДС + РегКнигаПродаж.СуммаРуб;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		    
		Таб.ВыбратьСтроки();
		Пока Таб.ПолучитьСтроку() = 1 Цикл
			Эл_Строка	=	Приемник.СоздатьПодчиненныйЭлемент("Строка");   
			ВыгрузитьРеквизит(Эл_Строка, "Товар", 			ЗначениеСтроки, , "Строка");
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,		Таб.СтавкаНДС);
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 			глПересчет(Таб.СуммаНДС, глРубли, 1, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 			глПересчет(Таб.Сумма, глРубли, 1, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 			глПересчет(Таб.ВсегоСНДС, глРубли, 1, ВалютаКон, КурсКон));
			Если		ВидДокОснования = "ЗакрытиеМесяца" Тогда
				ВыгрузитьРеквизит(Эл_Строка, "Счет", 			"90.2.2");
				ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 	,"Справочник","ВидыНоменклатуры", "ВидНоменклатуры_Товар");
			Иначе //Отчет комитенту
				ВыгрузитьРеквизит(Эл_Строка, "Счет", 			"90.3");
				ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,			"Справочник", "ВидыНоменклатуры", "ВидНоменклатуры_Услуга");
				ВыгрузитьРеквизит(Эл_Строка, "Субконто2", ,		Таб.СтавкаНДС,	"Справочник", "СтавкиНДС");
			КонецЕсли;
		КонецЦикла;
		           
		Возврат(0);
		           
		
	ИначеЕсли	(ВидДокОснования = "ВводОстатковПокупателя")		Тогда
	    
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Эл_Строка		=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
			ВыгрузитьРеквизит(Эл_Строка, "Товар", 			СокрЛП(Док.ВидДолга), , "Строка");
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,		Док.СтавкаНДС);
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 			глПересчет(Док.СуммаНДС, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 			глПересчет(Док.СуммаРуб - Док.СуммаНП, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 			глПересчет(Док.СуммаРуб - Док.СуммаНП + Док.СуммаНДС, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Счет", 			"91.2");
			ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 	,"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
		КонецЦикла;
		
		Возврат(0);
		
		
	КонецЕсли;		//	обработка главных исключений
	                                                           
	
	
	//---------------------------------------------------------------------------------
	
	//	Если документ основание:  "Реализация", "РеализацияПрочее", "ОтчетКоммисионера"
	                                
	Если ВидДокОснования <> "ОтчетКомиссионера" Тогда
		Рег	=	СоздатьОбъект("Регистр.ПартииНаличие");
	Иначе
		Рег	=	СоздатьОбъект("Регистр.ПартииОтданные");
	КонецЕсли;
	
	Рег.УстановитьЗначениеФильтра("Фирма", Док.Фирма, 1);
	
	Док.ВыбратьСтроки();
	Пока Док.ПолучитьСтроку() = 1 Цикл
		 
		НомерСтроки				=	Док.НомерСтроки;
		
		Если ВидДокОснования <> "РеализацияПрочее" Тогда
			Количество			=	Док.Количество * Док.Единица.Коэффициент;	//	пересчет в базовую единицу	
		Иначе
			Количество			=	Док.Количество;
		КонецЕсли;
		
		//Цена					=	Док.Цена;
		НДС						=	Док.СуммаНДС;
		
		Если Док.УчитыватьНДС = 1 Тогда
			СтавкаНДС			=	Док.СтавкаНДС;
		Иначе
			СтавкаНДС			=	Перечисление.СтавкиНДС.БезНДС;
		КонецЕсли;
		
		
		Если Док.СуммаВклНДС = 1 Тогда
			Сумма				=	Док.Сумма - НДС;	//	это сумма без НДС
			Всего				=	Док.Сумма;
		Иначе
			Сумма				=	Док.Сумма;
			Всего				=	Док.Сумма + НДС;
		КонецЕсли;
		
		Цена					=	Окр(Сумма / Количество, 4, 1);
		
		
		Если глЕстьРеквизитШапки("СуммаВклНП", ВидДокОснования) = 1 Тогда
			Если Док.СуммаВклНП = 1 Тогда
				Сумма				=	Сумма - Док.СуммаНП;
				Всего				=	Всего - Док.СуммаНП;
			КонецЕсли;
		КонецЕсли;
		
		
		//	Если "РеализацияПрочее"
		
		Если ВидДокОснования = "РеализацияПрочее" Тогда
			Эл_Строка				=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
			ВыгрузитьРеквизит(Эл_Строка, "Товар", Док.Содержание, , "Строка");
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,			СтавкаНДС);
			ВыгрузитьРеквизит(Эл_Строка, "Количество", 			Количество);
			ВыгрузитьРеквизит(Эл_Строка, "Цена", 				глПересчет(Цена,  ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 				глПересчет(НДС,   ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 				глПересчет(Сумма, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 				глПересчет(Всего, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"91.2");
			ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
			Продолжить;
		КонецЕсли;
	
		
		Товар				=	Док.Номенклатура;
		
		
		Если Товар.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
			Эл_Строка				=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
			
			ВыгрузитьРеквизит(Эл_Строка, "Товар", , 			Товар, "Справочник", "Номенклатура");
			
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,			СтавкаНДС);
			
			ВыгрузитьРеквизит(Эл_Строка, "Количество", 			Количество);
			ВыгрузитьРеквизит(Эл_Строка, "Цена", 				глПересчет(Цена,  ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 				глПересчет(НДС,   ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 				глПересчет(Сумма, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 				глПересчет(Всего, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			
			
			ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"90.3");
			ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,			"Справочник", "ВидыНоменклатуры", "ВидНоменклатуры_Услуга");
			ВыгрузитьРеквизит(Эл_Строка, "Субконто2", ,			СтавкаНДС,	"Справочник", "СтавкиНДС");
			
			Продолжить;
		КонецЕсли;	//	если услуга
		        
		
		Рег.УстановитьЗначениеФильтра("Номенклатура", Товар, 1);
		Рег.ВыбратьДвиженияДокумента(Док);
		Пока Рег.ПолучитьДвижение() = 1 Цикл
			Если Рег.НомерСтроки() <> НомерСтроки Тогда Продолжить КонецЕсли;
			
			КолвоПоДвижению	=	Рег.Количество;
			СтатусПартии	=	СокрЛП(Рег.СтатусПартии);
			Коэффициент		=	КолвоПоДвижению / Количество;
			
	
			Если ВидДокОснования = "РеализацияРозница" Тогда
				Если (Рег.КодОперации <> глКО.РозничнаяПродажа) И (Рег.КодОперации <> глКО.РозничнаяПродажаЕНВД) Тогда
					Продолжить;
				КонецЕсли;
				
				//Если Рег.СтатусПартии <> Перечисление.СтатусыПартии.Т_ВРознице Тогда
				//	Продолжить;
				//ИначеЕсли Рег.Расход = 0 Тогда
				//	Продолжить;
				//КонецЕсли;
			КонецЕсли;
			
			
			Если		Найти(СтатусПартии, "Товар") > 0 Тогда
				ВидНом	=	"Товар";
			ИначеЕсли	Найти(СтатусПартии, "Материал") > 0 Тогда
				ВидНом	=	"Материал";
			ИначеЕсли	Найти(СтатусПартии, "Продукция") > 0 Тогда
				ВидНом	=	"Продукция";
			Иначе
				Сообщить("Неизвестный статус партии:  " + СтатусПартии);
			КонецЕсли;
			
			
			//Параметры	=	?(Рег.СтатусПартии = Перечисление.СтатусыПартии.Т_Принятый, "принятый", "");
			Параметры	=	СоздатьОбъект("СписокЗначений");
			Если Рег.СтатусПартии = Перечисление.СтатусыПартии.Т_Принятый Тогда
				Параметры.Установить("ТипТовара", "НаКомиссии");
			КонецЕсли;                                         
			Если ПустоеЗначение(Рег.Партия) = 0 Тогда
				Параметры.Установить("СтранаПроисхождения", СокрЛП(Рег.Партия.СтранаПроисхождения));
			КонецЕсли;
			
			
			
			Эл_Строка				=	Приемник.СоздатьПодчиненныйЭлемент("Строка");
			
			Если ВидНом = "Продукция" Тогда
		    	Параметры.Установить("ТипНоменклатуры", "Продукция");
			КонецЕсли;
			
			Если ВидНом = "Материал" Тогда
				ВыгрузитьРеквизит(Эл_Строка, "Товар", , 			Товар,		"Справочник", "Материалы");
				ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"91.2");
				ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,			"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
			Иначе
				ВыгрузитьРеквизит(Эл_Строка, "Товар", , 			Товар, 		"Справочник", "Номенклатура", , Параметры);
				ВыгрузитьРеквизит(Эл_Строка, "Счет", 				"90.3");
				ВыгрузитьРеквизит(Эл_Строка, "Субконто1", , 		,			"Справочник", "ВидыНоменклатуры", "ВидНоменклатуры_" + ВидНом);
				ВыгрузитьРеквизит(Эл_Строка, "Субконто2", ,			СтавкаНДС,	"Справочник", "СтавкиНДС");
			КонецЕсли;
			    
			
			Попытка
				ГТД					=	Рег.Партия.ГТД;
				СтранаПроисхождения	=	СокрЛП(Рег.Партия.СтранаПроисхождения);
			Исключение
				ГТД					=	"";
				СтранаПроисхождения	=	"";
			КонецПопытки;
			
			
			ВыгрузитьРеквизит(Эл_Строка, "ГТД", , 				ГТД);
			ВыгрузитьРеквизит(Эл_Строка, "СтранаПроисхождения",	СтранаПроисхождения);
			
			ВыгрузитьРеквизит(Эл_Строка, "СтавкаНДС", ,			СтавкаНДС);
			
			ВыгрузитьРеквизит(Эл_Строка, "Количество", 			КолвоПоДвижению);
			ВыгрузитьРеквизит(Эл_Строка, "Цена", 				глПересчет(Цена,				   ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "НДС", 				глПересчет(НДС		* Коэффициент, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Сумма", 				глПересчет(Сумма	* Коэффициент, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
			ВыгрузитьРеквизит(Эл_Строка, "Всего", 				глПересчет(Всего	* Коэффициент, ВалютаНач, КурсНач, ВалютаКон, КурсКон));
		КонецЦикла;		//	по движениям регистра
		
	КонецЦикла;		//	по строкам документа	Возврат(0);
	
КонецФункции

//--------------------------------------------------------------------------------------------------

//	Код  -->  Код
Функция ПравилоРеквизита_ID1С_0004564(Источник, Приемник, СписокПараметровПравила)

	Если		ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		ТипНоменклатуры =	СписокПараметровПравила.Получить("ТипНоменклатуры");
		                      
		ТипТовара		=	СписокПараметровПравила.Получить("ТипТовара");
		                                                
		
		Если		ТипНоменклатуры = "Продукция" Тогда
			Возврат	"П" + Источник.Код;  // продукция
		ИначеЕсли	ТипТовара = "НаКомиссии" Тогда
			Возврат	"К" + Источник.Код;  // комиссионный
		Иначе
			Возврат	"С" + Источник.Код;  // собственный
		КонецЕсли;
		
	Иначе
	
		Если		Найти(СписокПараметровПравила, "41.1") > 0	Тогда
			Возврат	"С" + Источник.Код;  // собственный
		ИначеЕсли	Найти(СписокПараметровПравила, "41.3") > 0	Тогда
			Возврат	"Т" + Источник.Код;  // тара
		ИначеЕсли	Найти(СписокПараметровПравила, "004") > 0	Тогда
			Возврат	"К" + Источник.Код;  // комиссионный
		ИначеЕсли	Найти(СписокПараметровПравила, "43") > 0	Тогда
			Возврат	"П" + Источник.Код;  // продукция
		ИначеЕсли	Найти(СписокПараметровПравила, "принятый") > 0	Тогда
			Возврат	"К" + Источник.Код;  // комиссионный
		Иначе
			Возврат	"С" + Источник.Код;  // собственный
		КонецЕсли;
	
	КонецЕсли;

	Возврат(0);

КонецФункции   


//--------------------------------------------------------------------------------------------------

//	Комиссионное вознаграждение
Функция ПравилоРеквизита_ID1С_0007805(Источник, Приемник, СписокПараметровПравила)

	Если СокрЛП(СписокПараметровПравила.Получить("Объект")) = "Комиссионное вознаграждение" Тогда
		Возврат	"111111";
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0005532(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0005541(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0007485(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0004541(Источник, Приемник, СписокПараметровПравила)

	Стр = СокрЛП(Константа.ПрефиксИБ) + глНомерНаПечать(Источник);
		
	Возврат ДополнитьНулями(Стр, 8);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	НомерДок  -->  НомерДок
Функция ПравилоРеквизита_ID1С_0009495(Источник, Приемник, СписокПараметровПравила)

	Возврат ДобавитьКПрефиксу(Источник.НомерДок, "", 6);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004560(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004567(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0005529(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	Родитель  -->  Родитель
Функция ПравилоРеквизита_ID1С_0004570(Источник, Приемник, СписокПараметровПравила)

	Родитель = Источник.Родитель;
	Если ПустоеЗначение(Родитель) = 1 Тогда Возврат(0) КонецЕсли;
	Пока Родитель.Уровень() > 2 Цикл
		Родитель = Родитель.Родитель;
	КонецЦикла;
	Возврат(Родитель);

	Возврат(0);

КонецФункции


//--------------------------------------------------------------------------------------------------

//	-->  СтранаПроисхождения
Функция ПравилоРеквизита_ID1С_0014838(Источник, Приемник, СписокПараметровПравила)

	Если ТипЗначенияСтр(СписокПараметровПравила) = "СписокЗначений" Тогда
		        
		СтранаПроисхождения = СписокПараметровПравила.Получить("СтранаПроисхождения");
		
		Если ПустоеЗначение(СтранаПроисхождения) = 0 Тогда
			Возврат(СтранаПроисхождения);
		КонецЕсли;
		
	КонецЕсли;

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	-->  Субконто1
Функция ПравилоРеквизита_ID1С_0005602(Источник, Приемник, СписокПараметровПравила)

	Счет		=	СписокПараметровПравила.Получить("Счет");
	Субконто1	=	СписокПараметровПравила.Получить("Субконто1");
	                                                
	Если		Счет = "90.3" Тогда
	
		ВыгрузитьРеквизит(Приемник, "Субконто1", ,	,"Справочник", "ВидыНоменклатуры", "ВидНоменклатуры_" + Субконто1);
		
	ИначеЕсли		Счет = "91.2" Тогда
	
		ВыгрузитьРеквизит(Приемник, "Субконто1", ,	,"Справочник", "ПрочиеДоходыИРасходы", "ПрочиеДоходыИРасходы_ВыбытиеАктивов");
		
	ИначеЕсли	Счет = "60.1" Тогда
		
		Возврат(Субконто1);
	
	КонецЕсли;     
	
	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------

//	ДатаПлатРасчДок  -->  ДатаОплаты
Функция ПравилоРеквизита_ID1С_0007573(Источник, Приемник, СписокПараметровПравила)

	Возврат Источник.ДокОснование.ДатаДок;

	Возврат(0);

КонецФункции        

//--------------------------------------------------------------------------------------------------

//	-->  Субсчет19
Функция ПравилоРеквизита_ID1С_0014839(Источник, Приемник, СписокПараметровПравила)

	ДокОснование = Источник.ДокОснование;
	
	Если ПустоеЗначение(ДокОснование) = 0 Тогда
		ВидДок	=	ДокОснование.Вид();
		Если  ВидДок = "ПоступлениеТМЦИмпорт" Тогда
			Возврат("19.4");	
		ИначеЕсли ВидДок = "ПоступлениеПрочее" Тогда
			ДокОснование.ВыбратьСтроки();
			Если ДокОснование.ПолучитьСтроку() = 1 Тогда
				Счет = СокрЛП(ДокОснование.Счет);
				Если (Счет = "08.5") Или (Лев(Счет, 2) = "04") Тогда
					Возврат("19.2");
				ИначеЕсли (Лев(Счет, 2) = "08") Или (Лев(Счет, 2) = "01") Тогда
					Возврат("19.1");
				Иначе
					Возврат("19.3");
				КонецЕсли;
			Иначе
				Возврат("19.3");	
			КонецЕсли;
		Иначе
			Возврат("19.3");
		КонецЕсли;
	Иначе
		Возврат("19.3");
	КонецЕсли;

	Возврат(0);

КонецФункции            

//--------------------------------------------------------------------------------------------------

//	Курс  -->  Курс
Функция ПравилоРеквизита_ID1С_0007560(Источник, Приемник, СписокПараметровПравила)

	ДокОснование = Источник.ДокОснование; 
	Курс = ПолучитьКурсВзаиморасчетов(ДокОснование);
	Возврат(Курс);            

	Возврат(0);

КонецФункции

//--------------------------------------------------------------------------------------------------   

Функция ДополнительныеПреобразования(Вид="", Ид="", Источник="", Приемник="", СписокПараметровПравила="")

	Если Вид = "" Тогда

		Возврат(1);

	ИначеЕсли Вид = "Условие" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		ИначеЕсли Ид = "ID1С_0000552" Тогда
			Возврат Условие_ID1С_0000552(Источник, СписокПараметровПравила);	//	Есть табличная часть
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоВыборкиОбъектов" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		ИначеЕсли Ид = "ЗаписьКнигиПокупок_1С_0001025" Тогда
			Возврат ПравилоВыборкиОбъектов_ЗаписьКнигиПокупок_1С_0001025(Ид);	//	-->  ЗаписьКнигиПокупок (Документ)
		ИначеЕсли Ид = "ЗаписьКнигиПродаж_1С_0001479" Тогда
			Возврат ПравилоВыборкиОбъектов_ЗаписьКнигиПродаж_1С_0001479(Ид);	//	-->  ЗаписьКнигиПродаж (Документ)
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизита" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		ИначеЕсли Ид = "ID1С_0007616" Тогда
			Возврат ПравилоРеквизита_ID1С_0007616(Источник, Приемник, СписокПараметровПравила);	//	Конвертируем табл. часть счета фактуры
		ИначеЕсли Ид = "ID1С_0005550" Тогда
			Возврат ПравилоРеквизита_ID1С_0005550(Источник, Приемник, СписокПараметровПравила);	//	-->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005551" Тогда
			Возврат ПравилоРеквизита_ID1С_0005551(Источник, Приемник, СписокПараметровПравила);	//	-->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005944" Тогда
			Возврат ПравилоРеквизита_ID1С_0005944(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0005946" Тогда
			Возврат ПравилоРеквизита_ID1С_0005946(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0007495" Тогда
			Возврат ПравилоРеквизита_ID1С_0007495(Источник, Приемник, СписокПараметровПравила);	//	-->  Валютный
		ИначеЕсли Ид = "ID1С_0005507" Тогда
			Возврат ПравилоРеквизита_ID1С_0005507(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидКонтрагента
		ИначеЕсли Ид = "ID1С_0005528" Тогда
			Возврат ПравилоРеквизита_ID1С_0005528(Источник, Приемник, СписокПараметровПравила);	//	-->  ВидНоменклатуры
		ИначеЕсли Ид = "ID1С_0007594" Тогда
			Возврат ПравилоРеквизита_ID1С_0007594(Источник, Приемник, СписокПараметровПравила);	//	-->  ДатаНомерСчетаФактуры
		ИначеЕсли Ид = "ID1С_0007596" Тогда
			Возврат ПравилоРеквизита_ID1С_0007596(Источник, Приемник, СписокПараметровПравила);	//	-->  ДатаОприходования  ( !! задано условие !! )
		ИначеЕсли Ид = "ID1С_0005591" Тогда
			Возврат ПравилоРеквизита_ID1С_0005591(Источник, Приемник, СписокПараметровПравила);	//	-->  Договор
		ИначеЕсли Ид = "ID1С_0005592" Тогда
			Возврат ПравилоРеквизита_ID1С_0005592(Источник, Приемник, СписокПараметровПравила);	//	-->  Договор
		ИначеЕсли Ид = "ID1С_0005505" Тогда
			Возврат ПравилоРеквизита_ID1С_0005505(Источник, Приемник, СписокПараметровПравила);	//	-->  ИНН
		ИначеЕсли Ид = "ID1С_0005589" Тогда
			Возврат ПравилоРеквизита_ID1С_0005589(Источник, Приемник, СписокПараметровПравила);	//	-->  Контрагент
		ИначеЕсли Ид = "ID1С_0005590" Тогда
			Возврат ПравилоРеквизита_ID1С_0005590(Источник, Приемник, СписокПараметровПравила);	//	-->  Контрагент
		ИначеЕсли Ид = "ID1С_0007789" Тогда
			Возврат ПравилоРеквизита_ID1С_0007789(Источник, Приемник, СписокПараметровПравила);	//	-->  МПЗ
		ИначеЕсли Ид = "ID1С_0007788" Тогда
			Возврат ПравилоРеквизита_ID1С_0007788(Источник, Приемник, СписокПараметровПравила);	//	-->  МПЗ
		ИначеЕсли Ид = "ID1С_0007621" Тогда
			Возврат ПравилоРеквизита_ID1С_0007621(Источник, Приемник, СписокПараметровПравила);	//	-->  Основание
		ИначеЕсли Ид = "ID1С_0005502" Тогда
			Возврат ПравилоРеквизита_ID1С_0005502(Источник, Приемник, СписокПараметровПравила);	//	-->  ПолнНаименование
		ИначеЕсли Ид = "ID1С_0005504" Тогда
			Возврат ПравилоРеквизита_ID1С_0005504(Источник, Приемник, СписокПараметровПравила);	//	-->  ПочтовыйАдрес
		ИначеЕсли Ид = "ID1С_0007502" Тогда
			Возврат ПравилоРеквизита_ID1С_0007502(Источник, Приемник, СписокПараметровПравила);	//	-->  ПринятоОт
		ИначеЕсли Ид = "ID1С_0005531" Тогда
			Возврат ПравилоРеквизита_ID1С_0005531(Источник, Приемник, СписокПараметровПравила);	//	-->  СубСчет10
		ИначеЕсли Ид = "ID1С_0014839" Тогда
			Возврат ПравилоРеквизита_ID1С_0014839(Источник, Приемник, СписокПараметровПравила);	//	-->  Субсчет19
		ИначеЕсли Ид = "ID1С_0005506" Тогда
			Возврат ПравилоРеквизита_ID1С_0005506(Источник, Приемник, СписокПараметровПравила);	//	-->  Телефоны
		ИначеЕсли Ид = "ID1С_0005523" Тогда
			Возврат ПравилоРеквизита_ID1С_0005523(Источник, Приемник, СписокПараметровПравила);	//	-->  ТипНоменклатуры
		ИначеЕсли Ид = "ID1С_0005522" Тогда
			Возврат ПравилоРеквизита_ID1С_0005522(Источник, Приемник, СписокПараметровПравила);	//	-->  ТипТовара
		ИначеЕсли Ид = "ID1С_0005503" Тогда
			Возврат ПравилоРеквизита_ID1С_0005503(Источник, Приемник, СписокПараметровПравила);	//	-->  ЮридическийАдрес
		ИначеЕсли Ид = "ID1С_0014838" Тогда
			Возврат ПравилоРеквизита_ID1С_0014838(Источник, Приемник, СписокПараметровПравила);	//	-->  СтранаПроисхождения
		ИначеЕсли Ид = "ID1С_0005602" Тогда
			Возврат ПравилоРеквизита_ID1С_0005602(Источник, Приемник, СписокПараметровПравила);	//	-->  Субконто1
		ИначеЕсли Ид = "ID1С_0007573" Тогда
			Возврат ПравилоРеквизита_ID1С_0007573(Источник, Приемник, СписокПараметровПравила);	//	ДатаПлатРасчДок  -->  ДатаОплаты
		ИначеЕсли Ид = "ID1С_0005500" Тогда
			Возврат ПравилоРеквизита_ID1С_0005500(Источник, Приемник, СписокПараметровПравила);	//	ВалютаВзаиморасчетов  -->  ВалютаДоговора
		ИначеЕсли Ид = "ID1С_0005524" Тогда
			Возврат ПравилоРеквизита_ID1С_0005524(Источник, Приемник, СписокПараметровПравила);	//	ВидНоменклатуры  -->  ВидНоменклатуры
		ИначеЕсли Ид = "ID1С_0007614" Тогда
			Возврат ПравилоРеквизита_ID1С_0007614(Источник, Приемник, СписокПараметровПравила);	//	Вычислим и добавим значения сумм
		ИначеЕсли Ид = "ID1С_0007615" Тогда
			Возврат ПравилоРеквизита_ID1С_0007615(Источник, Приемник, СписокПараметровПравила);	//	Заполним таблицу импортных товаров
		ИначеЕсли Ид = "ID1С_0007619" Тогда
			Возврат ПравилоРеквизита_ID1С_0007619(Источник, Приемник, СписокПараметровПравила);	//	Заполняем табл. часть из документа основания
		ИначеЕсли Ид = "ID1С_0004564" Тогда
			Возврат ПравилоРеквизита_ID1С_0004564(Источник, Приемник, СписокПараметровПравила);	//	Код  -->  Код
		ИначеЕсли Ид = "ID1С_0007805" Тогда
			Возврат ПравилоРеквизита_ID1С_0007805(Источник, Приемник, СписокПараметровПравила);	//	Комиссионное вознаграждение
		ИначеЕсли Ид = "ID1С_0005532" Тогда
			Возврат ПравилоРеквизита_ID1С_0005532(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0007560" Тогда
			Возврат ПравилоРеквизита_ID1С_0007560(Источник, Приемник, СписокПараметровПравила);	//	Курс  -->  Курс
		ИначеЕсли Ид = "ID1С_0005541" Тогда
			Возврат ПравилоРеквизита_ID1С_0005541(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0007485" Тогда
			Возврат ПравилоРеквизита_ID1С_0007485(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0004541" Тогда
			Возврат ПравилоРеквизита_ID1С_0004541(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0009495" Тогда
			Возврат ПравилоРеквизита_ID1С_0009495(Источник, Приемник, СписокПараметровПравила);	//	НомерДок  -->  НомерДок
		ИначеЕсли Ид = "ID1С_0004560" Тогда
			Возврат ПравилоРеквизита_ID1С_0004560(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0004567" Тогда
			Возврат ПравилоРеквизита_ID1С_0004567(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0005529" Тогда
			Возврат ПравилоРеквизита_ID1С_0005529(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		ИначеЕсли Ид = "ID1С_0004570" Тогда
			Возврат ПравилоРеквизита_ID1С_0004570(Источник, Приемник, СписокПараметровПравила);	//	Родитель  -->  Родитель
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	ИначеЕсли Вид = "ПравилоРеквизитаЗначения" Тогда

		Если Ид = "" Тогда
			Возврат(1);
		КонецЕсли;

	КонецЕсли;

	Возврат(0);

КонецФункции		//	ДополнительныеПреобразования()

//--------------------------------------------------------------------------------------------------



ФормДатаНач								=	РабочаяДата();
ФормДатаКон								=	РабочаяДата();
ФормЧиститьБазуПриЗагрузке				=	1;

