////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// таблица значений, содержащая информацию о видах выписываемых документов
Перем ВидыОпераций;
Перем СтараяОперация;
Перем Направление;

// номер первой колонки с контрагентом
Перем НомПервойКолоноки;

// Ид. дополнительного слоя на второй закладке
Перем ДопТаблЧасть;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ОткрытьКарточкуРеквизита(СтароеЗначение)
//
// Параметры:
//  СтароеЗначение - реквизит диалога
//
// ВозвращаемоеЗначение:
//	0 - элемент не модифицирован
//  1 - элемент модифицирован
//
// Описание:
//  Если реквизит заполнен - открывает модально форму элемента справочника для 
//  редактирования.
//
Функция ОткрытьКарточкуРеквизита(СтароеЗначение)
	
	Если ПустоеЗначение(СтароеЗначение) = 0 Тогда
		ОткрытьФормуМодально(СтароеЗначение, , 0);
	Иначе
		Возврат 0;
	КонецЕсли;
	
	Спр	= СоздатьОбъект("Справочник." + СтароеЗначение.Вид());
	Спр.НайтиЭлемент(СтароеЗначение);
	
	НовоеЗначение  = Спр.ТекущийЭлемент();
	
	// если элемент изменился (его отредактировали), Контекст об этом не знает
	МодифицировалиЭлемент = глСравнитьЭлементыСправочника(НовоеЗначение, СтароеЗначение);
	
	Если МодифицировалиЭлемент=1 Тогда
		// обновляем реквизит в форме
		СтароеЗначение	= НовоеЗначение;
	КонецЕсли;
	
	Возврат МодифицировалиЭлемент;
	
КонецФункции // глОткрытьКарточкуРеквизита()

//******************************************************************************
// ТекущаяОперация()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текущая оперция
//
// Описание:
//  Возвращает текущую операцию
//
Функция ТекущаяОперация()
	
	Возврат СписокВидовДок.ПолучитьЗначение(СписокВидовДок.ТекущаяСтрока());
	
КонецФункции // ТекущаяОперация()

//******************************************************************************
// НайтиОперацию(ВидОперации)
//
// Параметры: 
//  Операция	- операция, которую нужно найти. Возможные операции содержаться в
//                списоке значений СписокВидовДок.
//
// Возвращаемое значение:
//  Число - позиция операции.
//
// Описание:
//  Ищет оперцию и возвращает ее позицию, которая потом используется для 
//  получения ее параметров.
//
Функция НайтиОперацию(Операция)
	
	Поз	= 0;
	ВидыОпераций.НайтиЗначение(Операция, Поз, "Операция");
	
	Возврат Поз;
	
КонецФункции // НайтиОперацию()

//******************************************************************************
// ПолучитьПараметрОперации(Позиция, ИмяПараметра)
//
// Параметры: 
//  Позиция			- позиция операции
//  ИмяПараметра	- имя параметра, значение которого нужно получить
//
// Возвращаемое значение:
//  Значение параметра операции
//
// Описание:
//  Получает значение параметра операции. Параметры операции могут быть 
//  следующими: ВидОперации, ДопВидОперации, ЕстьСклад, Направление, 
//  ВыписываетсяСФ.
//
Функция ПолучитьПараметрОперации(Позиция, ИмяПараметра)
	
	Возврат ВидыОпераций.ПолучитьЗначение(Позиция, ИмяПараметра);
	
КонецФункции // ПолучитьПараметрОперации()

//******************************************************************************
// ПриИзмененииФиксацииКолонок()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Фиксирует колонки и столбцы таблицы значений Состав.
//
Процедура ПриИзмененииФиксацииКолонок()
	
	Если ФлагФиксации = 1 Тогда
	    Состав.Фиксировать(2, НомПервойКолоноки - 1);
	Иначе
		Состав.Фиксировать(2, 0);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФиксацииКолонок()

//******************************************************************************
// СформироватьИнфСтроку()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  строка
//
// Описание:
//  Формирует и возвращает информационную строку, которая выводится под таблицей
//  значений Состав.
//
Функция СформироватьИнфСтроку()

	ТекСтрока = Состав.ТекущаяСтрока();
	Если ТекСтрока < 2 Тогда
	    Рез	= "";
	Иначе
		Рез	= "ТМЦ: "		+ СокрЛП(Состав.Номенклатура.Наименование) +
		      ", Всего: "	+ Состав.Всего 		+ " " + СокрЛП(Состав.Единица) +
			  ", Остаток: "	+ Состав.Остаток 	+ " " + СокрЛП(Состав.Единица) +
			  ", Цена: "	+ Состав.Цена		+ " " + СокрЛП(Валюта);
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // СформироватьИнфСтроку()

//******************************************************************************
// ИтогПоСтроке(НомСтроки)
//
// Параметры: 
//  НомСтроки	- номер строки в таблице значений Состав
//
// Возвращаемое значение:
//  число, суммарное значение по колонкам контрагентов
//
// Описание:
//  Вычисляет итоговое количество по всем контрагентам в строке состава.
//
Функция ИтогПоСтроке(НомСтроки)
	
	ОбщееКолво = 0;
	
	// вычислим общее количество по строке
	Для Сч = НомПервойКолоноки По Состав.КоличествоКолонок() Цикл
		ОбщееКолво = ОбщееКолво + Число(Состав.ПолучитьЗначение(НомСтроки, Сч));
	КонецЦикла;
	
	Возврат ОбщееКолво;
	
КонецФункции // ИтогПоСтроке()

//******************************************************************************
// РасчетОстаткаПоСтроке(НомСтроки)
//
// Параметры: 
//  НомСтроки	- номер строки в таблице значений Состав
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Рассчитывает значение в колонке Остаток в таблице значений Состав. Всего минус 
//  суммарное количество по колонкам контрагентов.
//
Процедура РасчетОстаткаПоСтроке(НомСтроки)
	
	Остаток = Число(Состав.ПолучитьЗначение(НомСтроки, "Всего")) - 
	          ИтогПоСтроке(НомСтроки);
			  
	Состав.УстановитьЗначение(НомСтроки, "Остаток"	, глФРМКоличество(Остаток,,""));
	
	Если Остаток < 0 Тогда
	    Флаг = 2;
	Иначе
		Флаг = 3;
	КонецЕсли;
	Состав.УстановитьЗначение(НомСтроки, "Флаг", Флаг);
	
КонецПроцедуры // РасчетОстаткаПоСтроке()

//******************************************************************************
// ОбновитьКолонкуОстаток()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет колонку Остаток в таблице значений Состав.
//
Процедура ОбновитьКолонкуОстаток()
	
	ТекСтрока = 1;
	Состав.ВыбратьСтроки();
	Пока Состав.ПолучитьСтроку() = 1 Цикл
		РасчетОстаткаПоСтроке(ТекСтрока);
		ТекСтрока = ТекСтрока + 1;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКолонкуОстаток()

//******************************************************************************
// ИзменениеНалоговЦены(Цена, УчетНДС, ВклНДС, ЦенаВклНДС, УчетНП, ВклНП, ЦенаВклНП)
//
// Параметры: 
//  Цена		- значение цены, которую нужно пересчитать
//	УчетНДС		- флаг учета НДС в цене
//  ВклНДС		- флаг включения НДС в цену
//  ЦенаВклНДС	- флаг включения НДС в цену из типа цены
//	УчетНП		- флаг учета НДС в цене
//  ВклНДС		- флаг включения НДС в цену
//  ЦенаВклНДС	- флаг включения НДС в цену из типа цены
//
// Возвращаемое значение:
//  Новое значение цены
//
// Описание:
//  Пересчитывает цену из варианта учета налогов в типе цен в установленный в
//  форме вариант учета налогов.
//
Функция ИзменениеНалоговЦены(Цена, СтавкаНДС, ВклНДС, ЦенаВклНДС, СтавкаНП, ВклНП, ЦенаВклНП)
	ВремЦена = Цена;
	
	НадоВключитьНП   = 0;
	НадоИсключитьНП  = 0;
	НадоВключитьНДС  = 0;
	НадоИсключитьНДС = 0;
	
	Если ВклНП <> ЦенаВклНП Тогда
	    Если ВклНП = 1 Тогда
	        НадоВключитьНП	= 1;
		Иначе
			НадоИсключитьНП	= 1;
	    КонецЕсли;
	КонецЕсли;
	
	Если ВклНДС <> ЦенаВклНДС Тогда
	    Если ВклНДС = 1 Тогда
	        НадоВключитьНДС	= 1;
		Иначе
			НадоИсключитьНДС= 1;
	    КонецЕсли;
	КонецЕсли;
	
	Если НадоИсключитьНП = 1 Тогда
		ВремЦена = (ВремЦена*100)/(100+ СтавкаНП);
	КонецЕсли;
	
	Если НадоИсключитьНДС = 1 Тогда
		ВремЦена = ВремЦена - ВремЦена*глВыделяемыйНДС(СтавкаНДС);
	КонецЕсли;
	
	Если НадоВключитьНДС = 1 Тогда
		ВремЦена = ВремЦена + ВремЦена*глНачисляемыйНДС(СтавкаНДС);
	КонецЕсли;     
	
	Если НадоВключитьНП = 1 Тогда
		ВремЦена = (ВремЦена*(100+ СтавкаНП))/100;
	КонецЕсли;
	
	Возврат ВремЦена;
	
КонецФункции // ИзменениеНалоговЦены()

//******************************************************************************
// ПоКнопке1()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается по кнопке 1. Инициирует механизм подбора
//  по справочнику Контрагенты или по справочнику фирмы, в зависимости
//  от вида операции.
//
Процедура ПоКнопке1()
	
	Поз	= НайтиОперацию(ТекущаяОперация());
	ОбъектыРаспределения	= ПолучитьПараметрОперации(Поз, "ОбъектыРаспределения");
	
	Если ОбъектыРаспределения = "Контрагенты" Тогда
	    ОткрытьПодбор("Справочник.Контрагенты",,, 1);
	ИначеЕсли ОбъектыРаспределения = "Фирмы" Тогда
		ОткрытьПодбор("Справочник.Фирмы",,, 1);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеПодборКонтарегентов()

//******************************************************************************
// НайтиКонтрагента(Договор, ИдКолонки)
//
// Параметры: 
//  Договор	- договор контрагента
//  ИдКолонки	- идентификатор колонки в таблице состав, соответствующий 
//                контрагенту.
//
// Возвращаемое значение:
//  1 - договор контрагента найден, 0 - нет
//
// Описание:
//  Устанавливает идентификатор колонки таблицы значений состав, соответствующий
//  переданному договору контрагента.
//
Функция НайтиКонтрагента(Договор, ИдКолонки)
	
	Поз = 0;
	Рез	= СписокКонтрагентов.НайтиЗначение(Договор, Поз, "Договор");
	Если Рез = 1 Тогда
		ИдКолонки	= СписокКонтрагентов.ПолучитьЗначение(Поз, "ИдКолонки");
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // НайтиКонтрагента()

//******************************************************************************
// ДобавитьКолонкуВсостав(Договор)
//
// Параметры: 
//  Договор	- элемент справочника Договоры
//
// Возвращаемое значение:
//  Строку, идентификатор колонки.
//
// Описание:
//  Вызывается из процедуры ОбработкаПодбора. Добавляет в таблицу значений Состав
//  новую колонку для ввода количеств для переданного договора контрагента.
//
Функция ДобавитьКолонкуВсостав(Параметр)
	// добавим новую колонку в состав
	
	ИдКолонки	= "Кол_" + Состав.КоличествоКолонок() + 1;
	СписокКонтрагентов.НоваяСтрока();
	СписокКонтрагентов.ИдКолонки	= ИдКолонки;

	Если Параметр.Вид() = "Договоры" Тогда
	    // передали договор
		Состав.НоваяКолонка(ИдКолонки, "Строка", , , СокрЛП(Параметр.Владелец.Наименование), 20, , 2);
		Состав.УстановитьЗначение(2, ИдКолонки, СокрЛП(Параметр));
		СписокКонтрагентов.Договор		= Параметр;
	ИначеЕсли Параметр.Вид() = "Фирмы" Тогда
		Состав.НоваяКолонка(ИдКолонки, "Строка", , , СокрЛП(Параметр), 20, , 2);
		СписокКонтрагентов.Фирма		= Параметр;
	КонецЕсли;
		
	ПриИзмененииФиксацииКолонок();
	
	Возврат ИдКолонки;
	
КонецФункции // ДобавитьКолонкуВсостав()

//******************************************************************************
// ПоКнопкеУдалить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Удаляет текущую колонку в таблице значений состав, если эта колонка 
//  соответствует контрагенту или фирме в зависимости от вида операции
//
Процедура ПоКнопкеУдалить()
	Перем ВыбКонтр;
	Перем ТекКолонка;
	
	Состав.ТекущаяКолонка(, ТекКолонка);
	
	Если ТекКолонка < НомПервойКолоноки Тогда
		Предупреждение("Не выбрана колонка контрагента!", 60);
		Возврат;
	КонецЕсли;
	
	НомСтроки	= ТекКолонка - НомПервойКолоноки + 1;
	
	Договор		= СписокКонтрагентов.ПолучитьЗначение(НомСтроки, "Договор");
	
	Если Вопрос("Удалить контрагента " + Договор.Владелец + " с договором " + Договор + "?", "Да+Нет", 60) <> "Да" Тогда
	    Возврат;
	КонецЕсли;
	
	СписокКонтрагентов.УдалитьСтроку(НомСтроки);

	// удалим колонку
	Состав.УдалитьКолонку(ТекКолонка);
	
	// пересчитаем колонку остаток
	ОбновитьКолонкуОстаток();
	
КонецПроцедуры // ПоКнопкеУдалить()

//******************************************************************************
// ВыборКонтрагента(Контрагент, ОписаниеОш)
//
// Параметры: 
//  Контрагент	- выходной параметр, выбранный контрагент
//  ОписаниеОш	- выходной параметр, описание ошибки
//
// Возвращаемое значение:
//  1 - если контрагент выбран, 0 - нет, -1 - отказ от выбора
//
// Описание:
//  Открывает диалог выбора контрагента. В списке для выбора присутствуют только
//  контаргенты, у которых значение реквизита ЮрФизЛицо совпадает со значением
//  реквизита ЮрЛицо Фирмы.
//
Функция ВыборКонтрагента(Контрагент, ИспФирма, ОписаниеОш)
	Перем ВыбКонтр;
	
	Если ПустоеЗначение(ИспФирма) = 1 Тогда
	    ОписаниеОш	= "Не выбрана фирма";
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(ИспФирма.ЮрЛицо) = 1 Тогда
	    ОписаниеОш	= "У выбранной фирма не указано юр. лицо";
		Возврат 0;
	КонецЕсли;
	
	ЮрЛицоФирмы			= ИспФирма.ЮрЛицо;
	СпрКонтрагенты		= СоздатьОбъект("Справочник.Контрагенты");
	СписКонтрагентов	= СоздатьОбъект("СписокЗначений");
	
	СпрКонтрагенты.ВыбратьЭлементы(0);
	Пока СпрКонтрагенты.ПолучитьЭлемент() = 1 Цикл
	    Если СпрКонтрагенты.ЭтоГруппа() = 0 Тогда
			ТекКонтр	= СпрКонтрагенты.ТекущийЭлемент();
			
			Если ТекКонтр.ЮрФизЛицо.Выбран() = 1 Тогда
				// ЮрФизЛицо установлено
				Если ТекКонтр.ЮрФизЛицо.Вид() = "СвоиЮрЛица" Тогда
					// реквизит ЮрФизЛицо должно быть вида СвоиЮрЛица
					Если ТекКонтр.ЮрФизЛицо = ЮрЛицоФирмы Тогда
						// и совпадать с юр. лицом выбранной фирмы
					    СписКонтрагентов.ДобавитьЗначение(ТекКонтр);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
	        
	    КонецЕсли;
	КонецЦикла;
	
	Если СписКонтрагентов.РазмерСписка() = 0 Тогда
	    ОписаниеОш	= "Отсутствуют контрагенты с юр./физ. лицом """ + ЮрЛицоФирмы + """";
		Рез			= 0;
	Иначе
		// откроем список значений для выбора контрагента
		Если СписКонтрагентов.ВыбратьЗначение(ВыбКонтр, "Выбор контрагента", , 60, 0) = 1 Тогда
			Рез			= 1;
			Контрагент	= ВыбКонтр;
		Иначе
			Рез			= -1; // отказ от выбора или вышел таймаут.
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ВыборКонтрагента()

//******************************************************************************
// УстановитьКонтрагента()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура УстановитьКонтрагента()
	Перем ТекКолонка, ВыбКонтрагент, ОписаниеОш;
	
	Состав.ТекущаяКолонка(, ТекКолонка);
	
	Если ТекКолонка < НомПервойКолоноки Тогда
	    Предупреждение("Выберите колонку с фирмой!", 60);;
		Возврат;
	КонецЕсли;
	
	НомСтроки		= ТекКолонка - НомПервойКолоноки + 1;
    ТекДоговор		= СписокКонтрагентов.ПолучитьЗначение(НомСтроки, "Договор");
	ТекКонтрагент	= ТекДоговор.Владелец;
	ТекФирма		= СписокКонтрагентов.ПолучитьЗначение(НомСтроки, "Фирма");
	
	Рез	= ВыборКонтрагента(ВыбКонтрагент, ТекФирма, ОписаниеОш);
	Если Рез = 0 Тогда
		Предупреждение(ОписаниеОш, 60);
	ИначеЕсли Рез = 1 Тогда
		Если ВыбКонтрагент <> ТекКонтрагент Тогда
			ВыбДоговор	= ВыбКонтрагент.ОсновнойДоговор;
			Состав.УстановитьЗначение(1, ТекКолонка, СокрЛП(ВыбКонтрагент));
			Состав.УстановитьЗначение(2, ТекКолонка, СокрЛП(ВыбДоговор));
			СписокКонтрагентов.УстановитьЗначение(НомСтроки, "Договор", ВыбДоговор);
			ПриИзмененииФиксацииКолонок();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьКонтрагента()

//******************************************************************************
// УстановитьДоговор(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура УстановитьДоговор()
	Перем ТекКолонка;
	
	Состав.ТекущаяКолонка(, ТекКолонка);
	
	Если ТекКолонка < НомПервойКолоноки Тогда
	    Предупреждение("Выберите колонку с контрагентом!", 60);;
		Возврат;
	КонецЕсли;
	
	НомСтроки		= ТекКолонка - НомПервойКолоноки + 1;
    ТекДоговор		= СписокКонтрагентов.ПолучитьЗначение(НомСтроки, "Договор");
	ТекКонтрагент	= ТекДоговор.Владелец;
	
	СпрДоговор	= СоздатьОбъект("Справочник.Договоры");
	СпрДоговор.ИспользоватьВладельца(ТекКонтрагент);
	
	Если СпрДоговор.Выбрать("Выбор договора", ) = 1 Тогда
	    ВыбДоговор = СпрДоговор.ТекущийЭлемент();
		
		Если ВыбДоговор <> ТекДоговор Тогда
		    
			// проверим, есть ли уже такой договор
			Поз	= 0;
			Если СписокКонтрагентов.НайтиЗначение(ВыбДоговор, Поз, "Договор") = 1 Тогда
			    Предупреждение("Контрагент """ + ВыбДоговор.Владелец + """ с договором """ + ВыбДоговор + """ уже выбран!", 60);
			Иначе
				Состав.УстановитьЗначение(2, ТекКолонка, СокрЛП(ВыбДоговор));
				СписокКонтрагентов.УстановитьЗначение(НомСтроки, "Договор", ВыбДоговор);
				ПриИзмененииФиксацииКолонок();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоговор()

//******************************************************************************
// ПоКнопке2()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Открывает справочник контрагентов или договоров для выбора в зависимости от
//  вида операции.
//
Процедура ПоКнопке2()

	Поз	= НайтиОперацию(ТекущаяОперация());
	ОбъектыРаспределения	= ПолучитьПараметрОперации(Поз, "ОбъектыРаспределения");
	
	Если ОбъектыРаспределения = "Контрагенты" Тогда
		УстановитьДоговор();
	ИначеЕсли ОбъектыРаспределения = "Фирмы" Тогда
		УстановитьКонтрагента();
	КонецЕсли;

КонецПроцедуры // ПоКнопке2()

//******************************************************************************
// ПоКнопке3()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ПоКнопке3()
	УстановитьДоговор();
КонецПроцедуры // ПоКнопке3()

// процедуры формирования таблиц значений с остатками регистров

//******************************************************************************
// ПолучитьОстаткиЗаявок(ОстаткиПоЗаявкам, ФильтрПоНоменклатуре, СписНоменклатуры)
//
// Параметры: 
//  ОстаткиПоЗаявкам		- выходной параметр. Таблица значений, содержащая
//                            остатками по заявкам.
//  ФильтрПоНоменклатуре	- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по номенклатуре
//                                  0 - не устанавливать
//  СписНоменклатуры		- входной параметр. Список значений с номенклатурой
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу значений, содержащую остатки по заявкам
//
Процедура ПолучитьОстаткиЗаявок(ИспФирма,
	                            ФильтрПоНоменклатуре, СписНоменклатуры,
								ФильтрПоДоговорам, СписДоговоров,
								ОстаткиПоЗаявкам)
	
	РегЗаявки = СоздатьОбъект("Регистр.Заявки");
	
	Если ПустоеЗначение(ИспФирма) = 0 Тогда
		Если ТипЗначенияСтр(ИспФирма) = "Справочник" Тогда
			РегЗаявки.УстановитьЗначениеФильтра("Фирма", ИспФирма, 1);
		ИначеЕсли ТипЗначенияСтр(ИспФирма) = "СписокЗначений" Тогда
			РегЗаявки.УстановитьЗначениеФильтра("Фирма", ИспФирма, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоНоменклатуре = 1 Тогда
		РегЗаявки.УстановитьЗначениеФильтра("Номенклатура", СписНоменклатуры, 2);
	КонецЕсли;
	
	Если ФильтрПоДоговорам = 1 Тогда
		РегЗаявки.УстановитьЗначениеФильтра("ДоговорПокупателя", СписДоговоров, 2);
	КонецЕсли;
	
	РегЗаявки.ВыгрузитьИтоги(ОстаткиПоЗаявкам, 1, 1);
	ОстаткиПоЗаявкам.Свернуть("Номенклатура, ДоговорПокупателя", "КоличествоРасход");
	ОстаткиПоЗаявкам.Сортировать("Номенклатура, ДоговорПокупателя");
	
КонецПроцедуры // ПолучитьОстаткиЗаявок()

//******************************************************************************
// ПолучитьОстатки(ОстаткиНоменклатуры, ФильтрПоНоменклатуре, СписНоменклатуры)
//
// Параметры: 
//  ОстаткиПоЗаявкам		- выходной параметр. Таблица значений, содержащая
//                            остатками по заявкам.
//  ФильтрПоНоменклатуре	- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по номенклатуре
//                                  0 - не устанавливать
//  СписНоменклатуры		- входной параметр. Список значений с номенклатурой
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу значений, содержащую остатки номенклатуры.
//
Процедура ПолучитьОстатки(ИспФирма, ИспСклад, ФильтрПоНоменклатуре, СписНоменклатуры, ОстаткиНоменклатуры)
	
	РегОстатки	= СоздатьОбъект("Регистр.ОстаткиТМЦ");
	
	Если ПустоеЗначение(ИспФирма) = 0 Тогда
		Если ТипЗначенияСтр(ИспФирма) = "Справочник" Тогда
			РегОстатки.УстановитьЗначениеФильтра("Фирма", ИспФирма, 1);
		ИначеЕсли ТипЗначенияСтр(ИспФирма) = "СписокЗначений" Тогда
			РегОстатки.УстановитьЗначениеФильтра("Фирма", ИспФирма, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоНоменклатуре = 1 Тогда
		РегОстатки.УстановитьЗначениеФильтра("Номенклатура", СписНоменклатуры, 2);
	КонецЕсли;
	
	Если ПустоеЗначение(ИспСклад) = 0 Тогда
		РегОстатки.УстановитьЗначениеФильтра("Склад", ИспСклад, 1);
	КонецЕсли;
	
	РегОстатки.ВыгрузитьИтоги(ОстаткиНоменклатуры, 1, 1);
	ОстаткиНоменклатуры.Свернуть("Номенклатура", "Количество");
	ОстаткиНоменклатуры.Сортировать("Номенклатура");
	
КонецПроцедуры // ПолучитьОстатки()

//******************************************************************************
// ПолучитьРезервы(РезервыНоменклатуры,
//	               ФильтрПоНоменклатуре, СписНоменклатуры,
//                 ФильтрПоДоговорам, СписДоговоров)
//
// Параметры: 
//  ОстаткиПоЗаявкам		- выходной параметр. Таблица значений, содержащая
//                            остатками по заявкам.
//  ФильтрПоНоменклатуре	- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по номенклатуре
//                                  0 - не устанавливать
//  СписНоменклатуры		- входной параметр. Список значений с номенклатурой
//  ФильтрПоДоговорам		- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по договорам
//                                  0 - не устанавливать
//  СписДоговоров			- входной параметр. Список значений с договорами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу значений, содержащую резервы номенклатуры.
//
Процедура ПолучитьРезервы(ИспФирма, ИспСклад,
					      ФильтрПоНоменклатуре, СписНоменклатуры,
						  ФильтрПоДоговорам, СписДоговоров,
						  РезервыНоменклатуры)
	
	РегРезервы = СоздатьОбъект("Регистр.РезервыТМЦ");
	
	Если ПустоеЗначение(ИспФирма) = 0 Тогда
		Если ТипЗначенияСтр(ИспФирма) = "Справочник" Тогда
			РегРезервы.УстановитьЗначениеФильтра("Фирма", ИспФирма, 1);
		ИначеЕсли ТипЗначенияСтр(ИспФирма) = "СписокЗначений" Тогда
			РегРезервы.УстановитьЗначениеФильтра("Фирма", ИспФирма, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(ИспСклад) = 0 Тогда
		РегРезервы.УстановитьЗначениеФильтра("Склад", ИспСклад, 1);
	КонецЕсли;
	
	Если ФильтрПоНоменклатуре = 1 Тогда
		РегРезервы.УстановитьЗначениеФильтра("Номенклатура", СписНоменклатуры, 2);
	КонецЕсли;
	
	Если ФильтрПоДоговорам = 1 Тогда
		РегРезервы.УстановитьЗначениеФильтра("ДоговорПокупателя", СписДоговоров, 2);
	КонецЕсли;
	
	РегРезервы.ВыгрузитьИтоги(РезервыНоменклатуры, 1, 1);
	РезервыНоменклатуры.Свернуть("Номенклатура", "Количество");
	РезервыНоменклатуры.Сортировать("Номенклатура");
	
КонецПроцедуры // ПолучитьРезервы()

//******************************************************************************
// ПолучитьЗаказы(ФильтрПоНоменклатуре, СписНоменклатуры,
//                ФильтрПоДоговорам, СписДоговоров,
//                ЗаказыНоменклатуры)
//
// Параметры: 
//  ОстаткиПоЗаявкам		- выходной параметр. Таблица значений, содержащая
//                            остатками по заявкам.
//  ФильтрПоНоменклатуре	- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по номенклатуре
//                                  0 - не устанавливать
//  СписНоменклатуры		- входной параметр. Список значений с номенклатурой
//  ФильтрПоДоговорам		- входной параметр. Возможные значения:
//                                  1 - устанавливать фильтр по договорам
//                                  0 - не устанавливать
//  СписДоговоров			- входной параметр. Список значений с договорами
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу значений, содержащую заказы номенклатуры.
//
Процедура ПолучитьЗаказы(ИспФирма, ФильтрПоНоменклатуре, СписНоменклатуры,
						 ФильтрПоДоговорам, СписДоговоров,
						 ЗаказыНоменклатуры)
	
	РегЗаказы = СоздатьОбъект("Регистр.Заказы");
	
	Если ПустоеЗначение(ИспФирма) = 0 Тогда
		Если ТипЗначенияСтр(ИспФирма) = "Справочник" Тогда
			РегЗаказы.УстановитьЗначениеФильтра("Фирма", ИспФирма, 1);
		ИначеЕсли ТипЗначенияСтр(ИспФирма) = "СписокЗначений" Тогда
			РегЗаказы.УстановитьЗначениеФильтра("Фирма", ИспФирма, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если ФильтрПоНоменклатуре = 1 Тогда
		РегЗаказы.УстановитьЗначениеФильтра("Номенклатура", СписНоменклатуры, 2);
	КонецЕсли;
	
	Если ФильтрПоДоговорам = 1 Тогда
		РегЗаказы.УстановитьЗначениеФильтра("ДоговорПоставщика", СписДоговоров, 2);
	КонецЕсли;
	
	РегЗаказы.ВыгрузитьИтоги(ЗаказыНоменклатуры, 1, 1);
	ЗаказыНоменклатуры.Свернуть("Номенклатура", "КоличествоПриход");
	ЗаказыНоменклатуры.Сортировать("Номенклатура");
	
КонецПроцедуры // ПолучитьЗаказы()

//******************************************************************************
// ПодготовитьТаблицуОстаткиПартий(ОстаткиПартий)
//
// Параметры: 
//  ОстаткиПартий             - таблица значений, которую надо подготовить
//  МетодРасчетаСебестоимости - Перечисление.МетодыРасчетаСебестоимости (ПоСреднему, FIFO, LIFO),
//                              используется для сортировки таблицы остатков партий.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Сворачивает и сортирует, согласно метода расчета себестоимости, таблицу остатков партий.
//
Процедура ПодготовитьТаблицуОстаткиПартий(ОстаткиПартий, МетодРасчетаСебестоимости)
	
	ОстаткиПартий.Свернуть("Фирма, Номенклатура, Партия, ДатаПартии", "Количество");
	
	ОстаткиПартий.НоваяКолонка("ДокПартии", "Документ");
	ОстаткиПартий.ВыбратьСтроки();
	Пока ОстаткиПартий.ПолучитьСтроку() = 1  Цикл
	    ОстаткиПартий.ДокПартии = ОстаткиПартий.Партия.ПриходныйДокумент;
	КонецЦикла;
	
	Если МетодРасчетаСебестоимости = Перечисление.МетодыРасчетаСебестоимости.LIFO Тогда
		ЗнакСортировки="-";
	Иначе     
		ЗнакСортировки="+";
	КонецЕсли;
	
	ОстаткиПартий.Сортировать("Номенклатура, -Фирма,"+ЗнакСортировки+"ДатаПартии,"+ЗнакСортировки+"ДокПартии",1);

КонецПроцедуры // ПодготовитьТаблицуОстаткиПартий()

//******************************************************************************
// ПолучитьОстаткиПартий(ИспФирма, СписНоменклатуры, ОстаткиПартий)
//
// Параметры: 
//  ИспФирма                  - список значений, содержащий элементы справочника Фирмы, или
//                              один элемент справочника Фирмы
//  СписНоменклатуры          - список значений с номенклатурой
//  ОстаткиПартий             - выходной параметр. Таблица значений, заполненная
//                              остатками по партиям.
//  МетодРасчетаСебестоимости - Перечисление.МетодыРасчетаСебестоимости (ПоСреднему, FIFO, LIFO).
//                              "Сквозной" параметр т.е. получен для передачи
//                              в процедуру ПодготовитьТаблицуОстаткиПартий(...).
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Формирует таблицу значений, содержащую остатки партий номенклатуры.
//
Процедура ПолучитьОстаткиПартий(ИспФирма, СписНоменклатуры, ОстаткиПартий, МетодРасчетаСебестоимости)
	
	РегОстаткиПартий = СоздатьОбъект("Регистр.ПартииНаличие");
	
	СписокСтатусов	= СоздатьОбъект("СписокЗначений"); 
	СписокСтатусов.ДобавитьЗначение(глСП.Т_Купленный);
	СписокСтатусов.ДобавитьЗначение(глСП.Т_Принятый);
	СписокСтатусов.ДобавитьЗначение(глСП.Т_Тара);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Запчасть);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Инвентарь);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Полуфабрикат);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Прочее);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Стройматериал);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Сырье);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Тара);
	СписокСтатусов.ДобавитьЗначение(глСП.М_Топливо);
	СписокСтатусов.ДобавитьЗначение(глСП.Продукция);
	
	Если ПустоеЗначение(ИспФирма) = 0 Тогда
		РегОстаткиПартий.УстановитьЗначениеФильтра("Фирма", ИспФирма, 2);
	КонецЕсли;
	РегОстаткиПартий.УстановитьЗначениеФильтра("Номенклатура", СписНоменклатуры, 2);
	РегОстаткиПартий.УстановитьЗначениеФильтра("СтатусПартии", СписокСтатусов, 2);
	
	РегОстаткиПартий.ВыгрузитьИтоги(ОстаткиПартий, 1, 1);
	
	ОстаткиПартий.ВыбратьСтроки();
	Пока ОстаткиПартий.ПолучитьСтроку() = 1 Цикл
		ОстаткиПартий.Количество = - ОстаткиПартий.Количество; // нехватка - это минусовой остаток
	КонецЦикла;	
	
	ПодготовитьТаблицуОстаткиПартий(ОстаткиПартий, МетодРасчетаСебестоимости);
	
КонецПроцедуры // ПолучитьОстаткиПартий()

//******************************************************************************
// ПроверкаУстановкиРеквизитов()
//
// Параметры: 
//  Описание	- выходной параметр. Описание ошибки
//
// Возвращаемое значение:
//  1 - все необходимые реквизиты заполнены. 0 - не все
//
// Описание:
//  Проверяет, все ли необходимые реквизиты для получения осотков регистров 
//  заполнены.
//
Функция ПроверкаУстановкиРеквизитов(Описание)
	
	Если ПустоеЗначение(Фирма) = 1 Тогда
	    Описание	= "Не выбрана фирма!";
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
	    Описание	= "Не выбрана валюта!";
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Курс) = 1 Тогда
	    Описание	= "Не установлен курс!";
		Возврат 0;
	КонецЕсли;

	Если ПустоеЗначение(ТипЦен) = 1 Тогда
	    Описание	= "Не выбран тип цен!";
		Возврат 0;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ПроверкаУстановкиРеквизитов()

//******************************************************************************
// ПоКнопкеПобдорНоменклатуры()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается по кнопке "Номенкалтура". Инициирует механизм подбора
//  по справочнику Номенклатура.
//
Процедура ПоКнопкеПобдорНоменклатуры()
	
	ОткрытьПодбор("Справочник.Номенклатура",,, 1);
	
КонецПроцедуры // ПоКнопкеПобдорНоменклатуры()

//******************************************************************************
// УдалитьНоменклатуру()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Удаляет текущую строку в таблице значений Состав.
//
Процедура УдалитьПозициюНоменклатуры()
	
	ТекСтрока = Состав.ТекущаяСтрока();
	
	Если ТекСтрока > 0 Тогда
		ТекНоменклатура = Состав.ПолучитьЗначение(ТекСтрока, "Номенклатура");
		Если Вопрос("Удалить позицию номенклатуры """ + СокрЛП(ТекНоменклатура) + """?", "Да+Нет", 60) = "Да" Тогда
		    Состав.УдалитьСтроку(ТекСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдалитьНоменклатуру()

//******************************************************************************
// УдалитьВсюНоменклатуру()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Удаляет всю номенклатуру из таблицы Состав
//
Процедура УдалитьВсюНоменклатуру()
	
	Пока Состав.КоличествоСтрок() > 2 Цикл
	    Состав.УдалитьСтроку(3);
	КонецЦикла;
	
КонецПроцедуры // УдалитьВсюНоменклатуру()

//******************************************************************************
// УдалитьВсехКонтрагентов()
//
// Параметры: 
//  
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура УдалитьВсехКонтрагентов()
	
	// удаляем колонки в Составе
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
	    Состав.УдалитьКолонку(СписокКонтрагентов.ИдКолонки);
	КонецЦикла;
	
	СписокКонтрагентов.УдалитьСтроки();
КонецПроцедуры // УдалитьВсехКонтрагентов()

//******************************************************************************
// ПоКнопкеОчистить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Удаляет колонки таблицы значений Состав, соответствующие всем контрагентам,
//  и удаляет всю номенклатуру.
//
Процедура ПоКнопкеОчистить()
	
	Если Вопрос("Очистить состав?", "Да+Нет", 60) <> "Да" Тогда
	    Возврат;
	КонецЕсли;
	
	УдалитьВсехКонтрагентов();
	УдалитьВсюНоменклатуру();
	
КонецПроцедуры // ПоКнопкеОчистить()

//******************************************************************************
// ВидимостьСлоев(НомерЗакладки)
//
// Параметры: 
//  НомерЗакладки - номер выбранной закладки
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызыватся из процедуры ПриВыбореЗакладки. Управляет видимостью слоев формы.
//
Процедура ВидимостьСлоев(НомерЗакладки)
	
	Форма.ИспользоватьСлой("Шапка,Подвал", 2);
	Если НомерЗакладки = 1 Тогда
		Форма.ИспользоватьСлой("Основной", 1);
	ИначеЕсли НомерЗакладки = 2 Тогда
		Форма.ИспользоватьСлой("ТаблЧасть"+ДопТаблЧасть, 1);
	КонецЕсли;
	
КонецПроцедуры // ВидимостьСлоев()

//******************************************************************************
// ИнициализацияСостава()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицы значений "Состав", "СписокКонтрагентов" основные колонки.
//
Процедура ИнициализацияСостава()
	
	Если Состав.КоличествоКолонок() = 0 Тогда
		// Таблица значений (невидимый, сохраняемый при сохранении настройки реквизит формы),
		// в которой содержиться информация о том, какая колонка
		// таблицы значений "Состав" какому контрагенту соответсвует
		СписокКонтрагентов.НоваяКолонка("ИдКолонки"	, "Строка");
		СписокКонтрагентов.НоваяКолонка("Договор"	, "Справочник.Договоры");
		СписокКонтрагентов.НоваяКолонка("Фирма"		, "Справочник.Фирмы");
		
		Состав.НоваяКолонка("Флаг"	,,,,"  !",4,,);
		Состав.НоваяКолонка("Номенклатура"	, "Справочник.Номенклатура",,, "Номенклатура"	, 25,,);
		Состав.НоваяКолонка("Единица"		, "Справочник.Единицы"     ,,, "Ед."         	, 6 ,,);
		Состав.НоваяКолонка("Всего"			, "Строка"                 ,,, ""				, 10,,2);
		Состав.НоваяКолонка("Остаток"		, "Строка"                 ,,, "Не распределено", 10,,2);
		Состав.НоваяКолонка("Цена"			, "Строка"                 ,,, "Цена"			, 10,,2);
		
		// добавляем 2 служебные строки
		Состав.НоваяСтрока();
		Состав.НоваяСтрока();
	КонецЕсли;
	
	Состав.ВыводитьПиктограммы("Флаг");
	
КонецПроцедуры // ИнициализацияСостава()

//******************************************************************************
// ПриВыбореЯчейкиСостава()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается при выборе ячейки в таблице значений состав. Открывает диалог
//  ввода количества если выбрана колонка с контрагентом или ввода цены, если 
//  выбрана колонка цены.
//
Процедура ПриВыбореЯчейкиСостава()
	Перем ТекСтрока, ТекКолонка;
	
	ТекСтрока	= Состав.ТекущаяСтрока();
	
	Если ТекСтрока < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Состав.ТекущаяКолонка(, ТекКолонка);
	
	Если ТекКолонка >= НомПервойКолоноки Тогда
	    ТекЗнач = Число(Состав.ПолучитьЗначение(ТекСтрока, ТекКолонка));
		Если ВвестиЧисло(ТекЗнач, "Введите количество", 14, 3, 60) = 1 Тогда
			
			Если ТекЗнач < 0 Тогда
			    Предупреждение("Нельзя вводить отрицательное количество", 60);
			Иначе
				Состав.УстановитьЗначение(ТекСтрока, ТекКолонка, глФРМКоличество(ТекЗнач,,""));
				РасчетОстаткаПоСтроке(ТекСтрока);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекКолонка = 6 Тогда // Цена
	    ТекЗнач = Число(Состав.ПолучитьЗначение(ТекСтрока, ТекКолонка));
		Если ВвестиЧисло(ТекЗнач, "Введите цену", 15, 2, 60) = 1 Тогда
			Если ТекЗнач < 0 Тогда
			    Предупреждение("Нельзя вводить отрицательную цену", 60);
			Иначе
				Состав.УстановитьЗначение(ТекСтрока, ТекКолонка, глФРМ(ТекЗнач,,,""));
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТекКолонка = 2 Тогда // Номенклатура
	    ТекТовар	= Состав.ПолучитьЗначение(ТекСтрока, ТекКолонка);
		ОткрытьФорму(ТекТовар, );
	КонецЕсли;
	
КонецПроцедуры // ПриВыбореЯчейкиСостава()

// ДЕЙСТВИЯ ПРИ ИЗМЕНЕНИИ ФЛАЖКОВ В ФОРМЕ

//******************************************************************************
// ПриИзмененииУчетаНП(ФлагЧтенияНастройки = 0)
//
// Параметры:
//  ФлагЧтенияНастройки - флаг - 1 - не изменяем значение флага "СуммаВклНП"
//                               0 - заполняем флаг "СуммаВклНП" значением по умолчанию
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Флаг "Учитывать НП".
//
// Описание:
//  Производит все необходимые проверки при изменении флага
//	"Учитывать НП".
//
Процедура ПриИзмененииУчетаНП(ФлагЧтенияНастройки = 0)
	
	Если УчитыватьНП = 1 Тогда
		Форма.СуммаВклНП.Доступность(1);
		
		Если ФлагЧтенияНастройки = 0 Тогда
			Если ТипЦен.Выбран() = 1 Тогда
				СуммаВклНП	= ТипЦен.ЦенаВклНП;
			Иначе
				СуммаВклНП	= 0;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.СуммаВклНП.Доступность(0);
		СуммаВклНП	= 0;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииУчетаНП()

//******************************************************************************
// ПриИзмененииУчетаНДС(ФлагЧтенияНастройки = 0)
//
// Параметры:
//  ФлагЧтенияНастройки - флаг - 1 - не изменяем значение флага "СуммаВклНДС"
//                               0 - заполняем флаг "СуммаВклНДС" значением по умолчанию
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Флаг "Учитывать НДС".
//
// Описание:
//  Производит все необходимые проверки при изменении флага
//	"Учитывать НДС".
//
Процедура ПриИзмененииУчетаНДС(ФлагЧтенияНастройки = 0)
	
	Если УчитыватьНДС = 1 Тогда
		Форма.СуммаВклНДС.Доступность(1);
		
		Если ФлагЧтенияНастройки = 0 Тогда
			Если ТипЦен.Выбран() = 1 Тогда
				СуммаВклНДС	= ТипЦен.ЦенаВклНДС;
			Иначе
				СуммаВклНДС	= 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Форма.СуммаВклНДС.Доступность(0);
		СуммаВклНДС	= 0;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииУчетаНДС()

//******************************************************************************
// ПриСменеВалюты()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Валюта.
//
// Описание:
//  При смене валюты производим все необходимые действия.
//
Процедура ПриСменеВалюты()
	
	Если ПустоеЗначение(Валюта) = 0 Тогда
		// При смене валюты зачитываем текущий курс на дату
		Курс = глКурсДляВалюты(Валюта, ДатаДок);
	КонецЕсли;
    
	Если Валюта = глРубли Тогда
	    Форма.Курс.Доступность(0);
	Иначе
	    Форма.Курс.Доступность(1);
	КонецЕсли;
	
КонецПроцедуры // ПриСменеВалюты()

//******************************************************************************
// ПриСменеТипаЦен()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  "Тип цен".
//
// Описание:
//	Установим флаги учета налогов в соответствии с реквизитами типа цен.
//
Процедура ПриСменеТипаЦен()
	
	Если ПустоеЗначение(ТипЦен) = 0 Тогда 
		ПриИзмененииУчетаНДС();
		ПриИзмененииУчетаНП();
	КонецЕсли;
	
КонецПроцедуры // ПриСменеТипаЦен()

//******************************************************************************
// ПриИзмененииФлагаНапечататьСФ()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из флага ФлагНапечататьСФ. Управляет доступностью реквизита формы
//  КолвоЭкзСФ, задающего количество печатных копий счета-фактуры
//
Процедура ПриИзмененииФлагаНапечататьСФ()
	
    Форма.КолвоЭкзСФ.Доступность(ФлагНапечататьСФ);
    Форма.ТекстЭкземпляровСФ.Доступность(ФлагНапечататьСФ);
	
	Если ФлагНапечататьСФ = 0 Тогда
		// обнулим количество экземпляров, если оно недоступно
		КолвоЭкзСФ	= 0;
	Иначе
		Если КолвоЭкзСФ = 0 Тогда
			КолвоЭкзСФ = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФлагаНапечататьСФ()

//******************************************************************************
// ПриИзмененииФлагаНапечатать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из флага ФлагНапечатать. Управляет доступностью реквизита формы
//  КолвоЭкз, задающего количество печатных копий документов
//
Процедура ПриИзмененииФлагаНапечатать()
	
    Форма.КолвоЭкз.Доступность(ФлагНапечатать);
    Форма.ТекстЭкземпляров.Доступность(ФлагНапечатать);
	
	Если ФлагНапечатать = 0 Тогда
		// обнулим количество экземпляров, если оно недоступно
		КолвоЭкз	= 0;
	Иначе
		Если КолвоЭкз = 0 Тогда
		    КолвоЭкз = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииФлагаНапечатать()

//******************************************************************************
// ПриИзмененииФлагаВыписатьСФ()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из флага ФлагВыписатьСФ. Управляет доступностью реквизитов формы
//  связанных со счетом-фактурой.
//
Процедура ПриИзмененииФлагаВыписатьСФ()
	
	Форма.ФлагПоказатьСФ.Доступность(ФлагВыписатьСФ);
	Форма.ФлагПровестиСФ.Доступность(ФлагВыписатьСФ);
	Форма.ФлагНапечататьСФ.Доступность(ФлагВыписатьСФ);
	
	Если ФлагВыписатьСФ = 0 Тогда
		// обнулим флаги, если они недоступны
		ФлагПоказатьСФ		= 0;
		ФлагПровестиСФ		= 0;
		ФлагНапечататьСФ	= 0;
	КонецЕсли;
	
	ПриИзмененииФлагаНапечататьСФ();
	
КонецПроцедуры // ПриИзмененииФлагаВыписатьСФ()

//******************************************************************************
// ПриИзмененииФлагаПровести()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается из формулы флага ФлагПровести.
//
Процедура ПриИзмененииФлагаПровести()
	
	Если ФлагПровести = 0 Тогда
	    ФлагВыписатьСФ	= 0;
		Форма.ФлагВыписатьСФ.Доступность(0);
	Иначе
		ПозОперации	= НайтиОперацию(ТекущаяОперация());
		ЕстьСФ		= ПолучитьПараметрОперации(ПозОперации, "ЕстьСФ");
	    Форма.ФлагВыписатьСФ.Доступность(ЕстьСФ);
		Если ЕстьСФ = 0 Тогда
		    ФлагВыписатьСФ	= 0;
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииФлагаВыписатьСФ();
	
КонецПроцедуры // ПриИзмененииФлагаПровести()

//******************************************************************************
// ЗаполнитьСписокВидовДок()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет список СписокВидовДок
//
Процедура ЗаполнитьСписокВидовДок()
	
	ВидыОпераций.ВыбратьСтроки();
	Пока ВидыОпераций.ПолучитьСтроку() = 1 Цикл
		Если СписокВидовДок.НайтиЗначение(ВидыОпераций.Операция) = 0 Тогда
			СписокВидовДок.ДобавитьЗначение(ВидыОпераций.Операция);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокВидовДок()

//******************************************************************************
// УправлениеДиалогом(ФлагЧтенияНастройки = 0)
//
// Параметры:
//  ФлагЧтенияНастройки - флаг - 1 - не изменяем значения реквизитов диалога
//                               0 - заполняем реквизиты диалога значениями по умолчанию
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Управляет доступностью элементов диалога.
//
Процедура УправлениеДиалогом(ФлагЧтенияНастройки = 0)
	
	ТекОперация = ТекущаяОперация();

	ПозОперации	= НайтиОперацию(ТекОперация);
		
	ЕстьСклад	= ПолучитьПараметрОперации(ПозОперации, "ЕстьСклад");
	Форма.Склад.Доступность(ЕстьСклад);
	Форма.текстСклад.Доступность(ЕстьСклад);
		
	Если ЕстьСклад = 0 Тогда
	    Склад = "";
	КонецЕсли;
		
	ЕстьСкидка	= ПолучитьПараметрОперации(ПозОперации, "ЕстьСкидка");
	Форма.Скидка.Доступность(ЕстьСкидка);
	Форма.текстСкидка.Доступность(ЕстьСкидка);
	Форма.кнХСкидка.Доступность(ЕстьСкидка);
	Если ЕстьСкидка = 0 Тогда
	    Скидка = "";
	КонецЕсли;
	
	Если ФлагПровести = 0 Тогда
	    ФлагВыписатьСФ = 0;
		Форма.ФлагВыписатьСФ.Доступность(0);
	Иначе
		ЕстьСФ = ПолучитьПараметрОперации(ПозОперации, "ЕстьСФ");
	    Форма.ФлагВыписатьСФ.Доступность(ЕстьСФ);
		Если ЕстьСФ = 0 Тогда
		    ФлагВыписатьСФ	= 0;
		КонецЕсли;
	КонецЕсли;
	ПриИзмененииФлагаВыписатьСФ();
		
	Направление	= ПолучитьПараметрОперации(ПозОперации, "Направление");
	Если Направление = "-" Тогда
		// отгрузка
		Если ФлагЧтенияНастройки = 0 Тогда
			ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПродажи");
		КонецЕсли;
		Состав.УстановитьПараметрыКолонки("Всего", , , , "Остаток");
		Форма.РамкаФирмы.Заголовок("Поставщик");
	ИначеЕсли Направление = "+" Тогда
		// поступление
		Если ФлагЧтенияНастройки = 0 Тогда
			ТипЦен = глЗначениеПоУмолчанию("ОсновнойТипЦенПокупки");
		КонецЕсли;
		Состав.УстановитьПараметрыКолонки("Всего", , , , "Нехватка");
		Форма.РамкаФирмы.Заголовок("Покупатель");
	КонецЕсли;
		
	УчетРезерваПоДоговрам	= ПолучитьПараметрОперации(ПозОперации, "УчетРезерваПоДоговрам");
	Если УчетРезерваПоДоговрам = 0 Тогда
		ФлагУчетаРезервовПоДоговорам	= 0;
	    Форма.ФлагУчетаРезервовПоДоговорам.Доступность(0);
	Иначе
		Форма.ФлагУчетаРезервовПоДоговорам.Доступность(1);
	КонецЕсли;
			
	УчетЗаказов	= 	ПолучитьПараметрОперации(ПозОперации, "УчетЗаказов");
	Если УчетЗаказов = 0 Тогда
		ФлагУчетаЗаказов = 0;
		Форма.ФлагУчетаЗаказов.Доступность(0);
	Иначе
		Форма.ФлагУчетаЗаказов.Доступность(1);
	КонецЕсли;
	
	Если (ТекОперация = "Покупка у собственной фирмы") 
	 ИЛИ (ТекОперация = "Продажа собственной фирме") 
	Тогда
		Форма.ТекстКонтрагентФирмы.Доступность(1);
		Форма.КонтрагентФирмы.Доступность(1);
		Форма.ОКонтрагентФирмы.Доступность(1);
		
		Форма.ТекстДоговорФирмы.Доступность(1);
		Форма.ДоговорФирмы.Доступность(1);
		Форма.ОДоговорФирмы.Доступность(1);
		
		Форма.кнКнопка1.Заголовок("Фирмы");
		Форма.кнКнопка2.Заголовок("Контрагент");
		
		ДопТаблЧасть	= ",ДопТаблЧасть";
	Иначе
		Форма.ТекстКонтрагентФирмы.Доступность(0);
		Форма.КонтрагентФирмы.Доступность(0);
		Форма.ОКонтрагентФирмы.Доступность(0);
		
		Форма.ТекстДоговорФирмы.Доступность(0);
		Форма.ДоговорФирмы.Доступность(0);
		Форма.ОДоговорФирмы.Доступность(0);

		Форма.кнКнопка1.Заголовок("Контрагенты");
		Форма.кнКнопка2.Заголовок("Договор");
		
		ДопТаблЧасть	= "";
	КонецЕсли;
	
	ПриИзмененииУчетаНДС(ФлагЧтенияНастройки);
	ПриИзмененииУчетаНП(ФлагЧтенияНастройки);

КонецПроцедуры // УправлениеДиалогом()

//******************************************************************************
// ПриВыбореВидаОперации()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выполняется при выборе вида документа в списке СписокВидовДок. В зависимости
//  от выбранного вида устанавливает доступность реквизита формы Склад и 
//  модульную переменную ВидОперации.
//
Процедура ПриВыбореВидаОперации()
	
	Перем Описание;
	
	ТекОперация = ТекущаяОперация();
	
	Если СтараяОперация = ТекОперация Тогда
	    // выбрали тот же вид документа
		Возврат;
	КонецЕсли;
	
	ПозСтарОп	= НайтиОперацию(СтараяОперация);
	Если ПозСтарОп = 0 Тогда
		ВидСтарОп	= "";
	Иначе
	    ВидСтарОп	= ПолучитьПараметрОперации(ПозСтарОп, "ВидОперации");
	КонецЕсли;
	
	ПозНовОп	= НайтиОперацию(ТекОперация);
	ВидНовОп	= ПолучитьПараметрОперации(ПозНовОп, "ВидОперации");

	Если ВидНовОп <> ВидСтарОп Тогда
		// изменен вид оперции
		
		СписУслуг		= СоздатьОбъект("СписокЗначений");
		УдалятьУслуги	= 0;
		
		// если выбранный вид операции ПоступлениеТМЦ, ПокупкаУфирмы или ПродажаФирме,
		// то проверяем, чтобы в составе не было услуг
		Если (ВидНовОп = "ПоступлениеТМЦ") 
		 ИЛИ (ВидНовОп = "ПокупкаУфирмы") 
		 ИЛИ (ВидНовОп = "ПродажаФирме")
		Тогда
			
			Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
				ТекТов	= Состав.ПолучитьЗначение(СчетчикЦикла, "Номенклатура");
				Если ТекТов.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
					СписУслуг.ДобавитьЗначение(ТекТов);
				КонецЕсли;
			КонецЦикла;
			
			Если СписУслуг.РазмерСписка() > 0 Тогда
				// есть услуги
				Если Вопрос("Для операции """ + ТекОперация + """ работа с услугами не предусмотрена.
				            |Удалить услуги из состава?", "Да+Нет", 60) = "Да" Тогда
					УдалятьУслуги	= 1;
				Иначе
				    СписокВидовДок.ТекущаяСтрока(СписокВидовДок.НайтиЗначение(СтараяОперация));
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокКонтрагентов.КоличествоСтрок() > 0 Тогда
			Если Вопрос("При изменении вида операции колонки контрагентов (фирм) будут удалены. Продолжить?", "ОК+Отмена", 60) <> "ОК" Тогда
				СписокВидовДок.ТекущаяСтрока(СписокВидовДок.НайтиЗначение(СтараяОперация));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если УдалятьУслуги = 1 Тогда
		    Для СчетчикЦикла = 1 По СписУслуг.РазмерСписка() Цикл
		    	Услуга	= СписУслуг.ПолучитьЗначение(СчетчикЦикла);
				Поз		= 0;
				Если Состав.НайтиЗначение(Услуга, Поз, "Номенклатура") = 1 Тогда
				    Состав.УдалитьСтроку(Поз);
				КонецЕсли;
		    КонецЦикла;
		КонецЕсли;

		УдалитьВсехКонтрагентов();
		ОбновитьКолонкуОстаток();
	КонецЕсли;
	
	УправлениеДиалогом();
		
	СтараяОперация = ТекОперация;
	
КонецПроцедуры // ПриВыбореВидаОперации()

// ЗАПОЛНЕНИЕ СОСТАВА

//******************************************************************************
// УстановитьЦену(Номенклатура, Единица)
//
// Параметры: 
//  Номенклатура	- номенклатура, для которой нужно получить цену
//  ВремЕдиница		- единица измерения, за которую должна быть цена
//  ВремВалюта		- валюта, за которую должна измеряться цена
//
// Возвращаемое значение:
//  Число, полученную цену
//
// Описание:
//  Получает цену из справочника, пересчитывает ее в заданную валюту и
//  рассчитывает ее за заданную единицу измерения
//
Функция УстановитьЦену(Номенклатура, ВремЕдиница, ВремВалюта)
	Перем ВремЦена;
	
	// получим цену товара
	Если глВернутьЦену(Номенклатура, ТипЦен, ДатаДок, ВремЦена, ВремЕдиница, ВремВалюта) = 0 Тогда
		// цена не найдена
		ВремЦена	= 0;
		ВремЕдиница	= Номенклатура.ОсновнаяЕдиница;
		ВремВалюта	= ТипЦен.Валюта;
	Иначе
		ВремЦена	= ИзменениеНалоговЦены(ВремЦена, 
		                                   Номенклатура.СтавкаНДС, СуммаВклНДС, ТипЦен.ЦенаВклНДС,
		                                   Номенклатура.СтавкаНП, СуммаВклНП, ТипЦен.ЦенаВклНП);
		ВремЦена	= глПересчет(ВремЦена, ВремВалюта, ДатаДок, Валюта, Курс);
	КонецЕсли;
	
	Возврат ВремЦена;
	
КонецФункции // УстановитьЦену()

//******************************************************************************
// ЗаполнитьСоставРеализация(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Реализация". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если
//  свободные остатки по этой номенклатуре нулевые.
//
Функция ЗаполнитьСоставРеализация(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	Перем ВыборкаОстатков, ВыборкаРезервов, ВыборкаЗаявок, ВыборкаРезервовПоДоговорам;
	Перем Врем, ВремЦена, ВремЕдиница, ВремВалюта;
	Перем ИдКолонки;
	
	// проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад!";
		Возврат 0;
	КонецЕсли;
	
	ЗаполнятьПоСписку	= 0;
	Если ТипЗначенияСтр(СписНоменклатуры) = "СписокЗначений" Тогда
	    Если СписНоменклатуры.РазмерСписка() > 0 Тогда
	        ЗаполнятьПоСписку	= 1;
	    КонецЕсли;
	КонецЕсли;
	
	СписДоговоров = СоздатьОбъект("СписокЗначений");
	
	Если СписокКонтрагентов.КоличествоСтрок() > 0 Тогда
	    СписДоговоров	= СоздатьОбъект("СписокЗначений");
		СписокКонтрагентов.Выгрузить(СписДоговоров,,, "Договор");
		ПолучитьОстаткиЗаявок(глФирмаДляОстатковТМЦ(Фирма), ЗаполнятьПоСписку, СписНоменклатуры, 1, СписДоговоров, ВыборкаЗаявок);
		
		УчетРезерваПоДоговорам	= ФлагУчетаРезервовПоДоговорам;
	Иначе
		ПолучитьОстаткиЗаявок(глФирмаДляОстатковТМЦ(Фирма), ЗаполнятьПоСписку, СписНоменклатуры, 0, , ВыборкаЗаявок);
		ВыборкаЗаявок.Выгрузить(СписДоговоров,,, "ДоговорПокупателя");
		
		Если ЗаполнятьПоСписку = 1 Тогда
		    // при добавлении конткретных товаров контрагенты (с договорами) не добавляются
			УчетРезерваПоДоговорам	= 0;
		Иначе
			УчетРезерваПоДоговорам	= ФлагУчетаРезервовПоДоговорам;
		КонецЕсли;
		
	КонецЕсли;
	
	ПолучитьОстатки(глФирмаДляОстатковТМЦ(Фирма), Склад, ЗаполнятьПоСписку, СписНоменклатуры, ВыборкаОстатков);
	ПолучитьРезервы(глФирмаДляОстатковТМЦ(Фирма), Склад, ЗаполнятьПоСписку, СписНоменклатуры, 0, , ВыборкаРезервов);
	
	Если УчетРезерваПоДоговорам = 1 Тогда
	    ПолучитьРезервы(глФирмаДляОстатковТМЦ(Фирма), Склад, ЗаполнятьПоСписку, СписНоменклатуры, 1, СписДоговоров, ВыборкаРезервовПоДоговорам);
	КонецЕсли;
						  
	Если ЗаполнятьПоСписку = 1 Тогда
	    ИспСписок	= СписНоменклатуры;
	Иначе
		
		УдалитьВсюНоменклатуру();
		
		ИспСписок	= СоздатьОбъект("СписокЗначений");
		ВыборкаЗаявок.Выгрузить(Врем,,,"Номенклатура");
		Врем.Свернуть("Номенклатура", "");
		Врем.Выгрузить(ИспСписок,,, "Номенклатура");
	КонецЕсли;
	
	Для СчетчикЦикла = 1 По ИспСписок.РазмерСписка() Цикл
		
		Номенклатура	= ИспСписок.ПолучитьЗначение(СчетчикЦикла);
			
		// получим остаток товара
		ОстатокТов	= 0;
			
		Поз	= 0;
		Если ВыборкаОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1  Тогда
		    ОстатокТов	= ВыборкаОстатков.ПолучитьЗначение(Поз, "Количество");
		КонецЕсли;
			
		// получим резерв по товару
		РезервТов	= 0;
			
		Поз	= 0;
		Если ВыборкаРезервов.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1  Тогда
		    РезервТов	= ВыборкаРезервов.ПолучитьЗначение(Поз, "Количество");
		КонецЕсли;
			
		// рассчитаем свободный остаток
		ОстатокТов	= ОстатокТов - РезервТов;
		
		Если (УчетРезерваПоДоговорам = 1) Тогда
			// добавим к остатку резерв до договорам
			Поз	= 0;
			Если ВыборкаРезервовПоДоговорам.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1  Тогда
			    ОстатокТов	= ОстатокТов + ВыборкаРезервовПоДоговорам.ПолучитьЗначение(Поз, "Количество");
			КонецЕсли;
		КонецЕсли;
		
		Если (ЗаполнятьПоСписку	= 0) И (ОстатокТов <=0) Тогда
			// если не передали список номенклатуры, то не добавляем с нулевым и
			// отрицательным количеством
			Продолжить;
		КонецЕсли;
			
		Состав.НоваяСтрока();
		Состав.Номенклатура	= Номенклатура;
		
		ТекСтрока	= Состав.КоличествоСтрок();
		Состав.Цена	= глФРМ(УстановитьЦену(Номенклатура, ВремЕдиница, ВремВалюта),,,"");
		
		// пересчитаем остаток в единицу цены
		КоэффЕдЦены	= ВремЕдиница.Коэффициент;
		Если (1 <> КоэффЕдЦены) Тогда
			// не базовая
			Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
			    ОстатокТов	= ОстатокТов / КоэффЕдЦены;
			КонецЕсли;
		КонецЕсли;
			
		Состав.Всего	= глФРМКоличество(ОстатокТов,,"");
		Состав.Единица	= ВремЕдиница;
		
		// распределим остатки заявок по договорам контрагентов
		Поз	= 0;
		Пока ВыборкаЗаявок.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Цикл
		    ДоговорПокупателя	= ВыборкаЗаявок.ПолучитьЗначение(Поз, "ДоговорПокупателя");
			КолвоПоДоговору		= ВыборкаЗаявок.ПолучитьЗначение(Поз, "КоличествоРасход") / КоэффЕдЦены;
			
			Если ЗаполнятьПоСписку = 1 Тогда
			    // только ищем договор
				Если НайтиКонтрагента(ДоговорПокупателя, ИдКолонки) = 1 Тогда
				    Состав.УстановитьЗначение(ТекСтрока, ИдКолонки,  глФРМКоличество(КолвоПоДоговору,,""));
				КонецЕсли; 
			Иначе
				Если НайтиКонтрагента(ДоговорПокупателя, ИдКолонки) = 0 Тогда
					ИдКолонки	= ДобавитьКолонкуВсостав(ДоговорПокупателя);
				КонецЕсли; 
				Состав.УстановитьЗначение(ТекСтрока, ИдКолонки, глФРМКоличество(КолвоПоДоговору,,""));
			КонецЕсли;
			
			ВыборкаЗаявок.УдалитьСтроку(Поз);
			Поз	= 0;
		КонецЦикла;
		
		РасчетОстаткаПоСтроке(ТекСтрока);
	КонецЦикла;
	
	Если Состав.КоличествоСтрок() = 1 Тогда
	    ОписаниеОш	= "Отсутствует заказанная покупателем Номенклатура. Состав не заполнен!";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗаполнитьСоставРеализация()

//******************************************************************************
// ЗаполнитьСоставЗаявкаПокупателя(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Заявка покупателя". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если
//  свободные остатки по этой номенклатуре нулевые.
//
Функция ЗаполнитьСоставЗаявкаПокупателя(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	
	Перем ВыборкаОстатков, ВыборкаРезервов;
	Перем ВремЦена, ВремЕдиница, ВремВалюта;
	
	// Проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если (ПустоеЗначение(Склад) = 1) И (ДопВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда
	    ОписаниеОш	= "Не выбран склад!";
		Возврат 0;
	КонецЕсли;
	
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	ЗаполнятьПоСписку	= 0;
	Если ТипЗначенияСтр(СписНоменклатуры) = "СписокЗначений" Тогда
	    Если СписНоменклатуры.РазмерСписка() > 0 Тогда
	        ЗаполнятьПоСписку	= 1;
	    КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьПоСписку = 1 Тогда
	    ПолучитьОстатки(ФирмаДляОстатковТМЦ, Склад, 1, СписНоменклатуры, ВыборкаОстатков);
	Иначе
		УдалитьВсюНоменклатуру();
		
		ПолучитьОстатки(ФирмаДляОстатковТМЦ, Склад, 0,                 , ВыборкаОстатков);
		СписНоменклатуры	= СоздатьОбъект("СписокЗначений");
		ВыборкаОстатков.Выгрузить(СписНоменклатуры,,,"Номенклатура");
	КонецЕсли;
	
	ПолучитьРезервы(ФирмаДляОстатковТМЦ, Склад, 1, СписНоменклатуры, 0, , ВыборкаРезервов);
  
	Для СчетчикЦикла = 1 По СписНоменклатуры.РазмерСписка() Цикл
		
		Номенклатура	= СписНоменклатуры.ПолучитьЗначение(СчетчикЦикла);
		Колво			= 0;
		
		Поз	= 0;
		Если ВыборкаОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
		    Колво	= Колво + ВыборкаОстатков.ПолучитьЗначение(Поз, "Количество");
		КонецЕсли;
		
		Поз	= 0;
		Если ВыборкаРезервов.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
		    Колво	= Колво - ВыборкаРезервов.ПолучитьЗначение(Поз, "Количество");
		КонецЕсли;
		
		Если (ЗаполнятьПоСписку = 0) И (Колво <= 0) Тогда
			// если не передали список номенклатуры, то не добавляем с нулевым и
			// отрицательным количеством
			Продолжить;
		КонецЕсли;
		
		Состав.НоваяСтрока();
		Состав.Номенклатура	= Номенклатура;
		Состав.Цена			= глФРМ(УстановитьЦену(Номенклатура, ВремЕдиница, ВремВалюта),,,"");
		
		// пересчитаем остаток в единицу цены
		КоэффЕдЦены	= ВремЕдиница.Коэффициент;
		Если (1 <> КоэффЕдЦены) Тогда
			// не базовая
			Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
				Колво	= Колво / КоэффЕдЦены;
			КонецЕсли;
		КонецЕсли;
		
		Состав.Всего	= глФРМКоличество(Колво,,"");
		Состав.Остаток	= глФРМКоличество(Колво,,"");
		Состав.Единица	= ВремЕдиница;
	КонецЦикла;
	
	Если Состав.КоличествоСтрок() < 3 Тогда
	    ОписаниеОш	= "На складе отсутствует номенклатура. Состав не заполнен!";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗаполнитьСоставЗаявкаПокупателя()

//******************************************************************************
// ДобавитьТоварВсостав(Товар, Остаток)
//
// Параметры: 
//  Товар	- элемент справочника номенклатура
//  Остаток	- значение для колонок Всего и Остаток
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет товар в состав.
//
Процедура ДобавитьТоварВсостав(Номенклатура, Знач Остаток)
	Перем ВремЕдиница, ВремВалюта;
	
	Состав.НоваяСтрока();
	Состав.Номенклатура	= Номенклатура;
	Состав.Цена			= глФРМ(УстановитьЦену(Номенклатура, ВремЕдиница, ВремВалюта),,,"");
					
	// пересчитаем остаток в единицу цены
	КоэффЕдЦены	= ВремЕдиница.Коэффициент;
	Если (1 <> КоэффЕдЦены) Тогда
		// не базовая
		Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
			Остаток	= Остаток / КоэффЕдЦены;
		КонецЕсли;
	КонецЕсли;
					
	Состав.Всего	= глФРМКоличество(Остаток, , "");
	Состав.Остаток	= глФРМКоличество(Остаток, , "");
	Состав.Единица	= ВремЕдиница;
	
КонецПроцедуры // ДобавитьТоварВсостав()

//******************************************************************************
// ЗаполнитьСоставЗаказПоставщику(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Заказ поставщику". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если заказывать
//  ничего не нужно.
//
Функция ЗаполнитьСоставЗаказПоставщику(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	Перем ОстЗаявки, ОстЗаказыЗаявки, ОстРезервы;
	
	// проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
    
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);
	
	ОбщРег			= СоздатьОбъект("Регистры");
	РегЗаявки		= ОбщРег.Заявки;
	РегЗаказыЗаявки	= ОбщРег.ЗаказыЗаявки;
	РегРезервы		= ОбщРег.РезервыТМЦ;
	
	ПозицияПо		= "";
	
	// установим фильтры на измерения
	РегЗаявки.УстановитьЗначениеФильтра("Фирма" , ФирмаДляОстатковТМЦ , 2);
	Если ТипЗначенияСтр(СписНоменклатуры) = "СписокЗначений" Тогда
	    РегЗаявки.УстановитьЗначениеФильтра("Номенклатура" , СписНоменклатуры , 2);
	КонецЕсли;
	
	РегРезервы.УстановитьЗначениеФильтра("Фирма", ФирмаДляОстатковТМЦ , 2);
	
	Таб	= СоздатьОбъект("ТаблицаЗначений");
	Таб.НоваяКолонка("Номенклатура"	, "Справочник.Номенклатура");
	Таб.НоваяКолонка("Количество"	, "Число", 14, 3);
	
	// получаем остатки заявок
	РегЗаявки.ВыгрузитьИтоги(ОстЗаявки, 1);
	
	// нужно заказать = Заявлено(Заказано покупателем) + Нехватка мин. остатка - 
	//                  Заказано(Поставщику) - Получено по закзам (От поставщика)
	

	ОстЗаявки.ВыбратьСтроки();
	Пока ОстЗаявки.ПолучитьСтроку() = 1 Цикл
		          
		// Не подтвержденные заявки пропускаем (не будем по ним заказывать)
		Если ОстЗаявки.ЗаявкаПокупателя.ВидОперации  = Перечисление.ВидыОперацийЗаявок.Неподтвержденная Тогда
			Продолжить;
		КонецЕсли;
		
		// услуги пропускаем
		Если ОстЗаявки.Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		    Продолжить;
		КонецЕсли;
		
		// Заявки с датой предполагаемой отгрузки меньше чем дата потупления по заказу пропускаем
		//(эти заявки должны быть обеспечены чем-то еще)
		Если ОстЗаявки.ЗаявкаПокупателя.ДатаОтгрузки < ДатаДок Тогда
			Продолжить;
		КонецЕсли;
		
		ОстКолво = ОстЗаявки.КоличествоРасход;
		
		// получим заказанных товаров
		РегЗаказыЗаявки.УстановитьЗначениеФильтра("Номенклатура", ОстЗаявки.Номенклатура, 1);
		РегЗаказыЗаявки.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ОстЗаявки.ЗаявкаПокупателя, 1);
		РегЗаказыЗаявки.ВыгрузитьИтоги(ОстЗаказыЗаявки);
		
		// вычитаем уже заказанные товары
		ОстЗаказыЗаявки.ВыбратьСтроки();
		Пока (ОстЗаказыЗаявки.ПолучитьСтроку() = 1)
		   и (ОстКолво > 0)
		Цикл
			ОстКолво = ОстКолво - Мин(ОстКолво, ОстЗаказыЗаявки.Количество);
		КонецЦикла;
		
		Если ОстКолво <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// вычитаем уже полученные товары
		
		// получим зарезервированных товаров
		РегРезервы.УстановитьЗначениеФильтра("Номенклатура", ОстЗаявки.Номенклатура, 1);
		РегРезервы.УстановитьЗначениеФильтра("ЗаявкаПокупателя", ОстЗаявки.ЗаявкаПокупателя, 1);
		РегРезервы.ВыгрузитьИтоги(ОстРезервы);
		
		ОстРезервы.ВыбратьСтроки();
		Пока (ОстРезервы.ПолучитьСтроку() = 1)
		   и (ОстКолво > 0)
		Цикл
			ОстКолво = ОстКолво - Мин(ОстКолво, ОстРезервы.Количество);
		КонецЦикла;
		
		Если ОстКолво <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Таб.НоваяСтрока();
		Таб.Номенклатура = ОстЗаявки.Номенклатура;          
		Таб.Количество   = ОстКолво;
		
	КонецЦикла;
	
	ТекстЗапроса	=
	"//{{ЗАПРОС(НахваткаМинОстатка)
	|
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура, Справочник.Номенклатура.ТекущийЭлемент;
	|МинОст			= Справочник.Номенклатура.МинОстаток, Регистр.ОстаткиТМЦ.Номенклатура.МинОстаток;
	|Колво			= Регистр.ОстаткиТМЦ.Количество;
	|
	|Функция МинОстаток	= Сумма(МинОст);
	|Функция Количество	= КонОст(Колво);
	|
	|Группировка Номенклатура упорядочить по Номенклатура.Наименование без групп;
	|
	|Условие(МинОст	> 0);
	|" + ?(ТипЗначенияСтр(СписНоменклатуры) = "СписокЗначений", "Условие(Номенклатура в СписНоменклатуры);", "") + "
	|"//}}ЗАПРОС
	;

	Запрос	= СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	    ОписаниеОш	= "Ошибка выполнения запроса!";
		Возврат 0;
	КонецЕсли;
	
	Пока Запрос.Группировка(1) = 1 Цикл
		Товар			= Запрос.Номенклатура;
		НехваткаМиност	= Товар.МинОстаток - Запрос.Количество;
		
		Если НехваткаМиност > 0 Тогда
			// скорректируем остаток в таблице значений Таб, с учем полученной
			// нехватки минимального остатка
			
			Поз		= 0;
			Если Таб.НайтиЗначение(Товар, Поз, "Номенклатура") = 1 Тогда
			    Таб.ПолучитьСтрокуПоНомеру(Поз);
				Таб.Количество	= Таб.Количество + НехваткаМиност;
			Иначе
				// номенклатура не проходила по заявкам
				Таб.НоваяСтрока();
				Таб.Номенклатура	= Запрос.Номенклатура;
				Таб.Количество		= НехваткаМиност;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Таб.Свернуть("Номенклатура", "Количество");
	Таб.Сортировать("Номенклатура");
	
	Если ТипЗначенияСтр(СписНоменклатуры) <> "СписокЗначений" Тогда
		СписНоменклатуры	= СоздатьОбъект("СписокЗначений");
        Таб.Выгрузить(СписНоменклатуры, , ,"Номенклатура");
	КонецЕсли;
	
	Для СчетчикЦикла = 1 По СписНоменклатуры.РазмерСписка() Цикл
		Номенклатура	= СписНоменклатуры.ПолучитьЗначение(СчетчикЦикла);
		Поз				= 0;
		Если Таб.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 0 Тогда
		    ДобавитьТоварВсостав(Номенклатура, 0);
		Иначе
			ДобавитьТоварВсостав(Номенклатура, Таб.ПолучитьЗначение(Поз, "Количество"));
		КонецЕсли;
	КонецЦикла;
	
	Если Состав.КоличествоСтрок() < 3 Тогда
	    ОписаниеОш	 = "На складе достаточное количество номенклатуры. Состав не заполнен";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;

КонецФункции // ЗаполнитьСоставЗаказПоставщику()

//******************************************************************************
// ЗаполнитьСоставПоступлениеТМЦ(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Реализация". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если
//  нет нехватки по этой номенклатуре.
//
Функция ЗаполнитьСоставПоступлениеТМЦ(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	
	Перем ВыборкаОстатков;
	Перем ВремЦена, ВремЕдиница, ВремВалюта;
	
	// проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад!";
		Возврат 0;
	КонецЕсли;
	
	ФирмаДляОстатковТМЦ = глФирмаДляОстатковТМЦ(Фирма);

	ЗаполнятьПоСписку	= 0;
	Если ТипЗначенияСтр(СписНоменклатуры) = "СписокЗначений" Тогда
	    Если СписНоменклатуры.РазмерСписка() > 0 Тогда
	        ЗаполнятьПоСписку	= 1;
	    КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнятьПоСписку = 1 Тогда
	    ПолучитьОстатки(ФирмаДляОстатковТМЦ, Склад, 1, СписНоменклатуры, ВыборкаОстатков);
	Иначе
		УдалитьВсюНоменклатуру();
		
		ПолучитьОстатки(ФирмаДляОстатковТМЦ, Склад, 0,                 , ВыборкаОстатков);
		СписНоменклатуры	= СоздатьОбъект("СписокЗначений");
		ВыборкаОстатков.Выгрузить(СписНоменклатуры,,,"Номенклатура");
	КонецЕсли;
	
	Для СчетчикЦикла = 1 По СписНоменклатуры.РазмерСписка() Цикл
		
		Номенклатура	= СписНоменклатуры.ПолучитьЗначение(СчетчикЦикла);
		Колво			= 0;
		
		Поз	= 0;
		Если ВыборкаОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
		    Колво	= Колво + ВыборкаОстатков.ПолучитьЗначение(Поз, "Количество");
		КонецЕсли;
		
		// нехватка - это минусовой остаток
		Колво	= -Колво;
		
		Если (ЗаполнятьПоСписку = 0) И (Колво <= 0) Тогда
			// если не передали список номенклатуры, то не добавляем с нулевым и
			// отрицательным количеством
			Продолжить;
		КонецЕсли;
		
		Состав.НоваяСтрока();
		Состав.Номенклатура	= Номенклатура;
		Состав.Цена			= глФРМ(УстановитьЦену(Номенклатура, ВремЕдиница, ВремВалюта),,,"");
		
		// пересчитаем остаток в единицу цены
		КоэффЕдЦены	= ВремЕдиница.Коэффициент;
		Если (1 <> КоэффЕдЦены) Тогда
			// не базовая
			Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
				Колво	= Колво / КоэффЕдЦены;
			КонецЕсли;
		КонецЕсли;
		
		Состав.Всего	= глФРМКоличество(Колво,,"");
		Состав.Остаток	= глФРМКоличество(Колво,,"");
		Состав.Единица	= ВремЕдиница;
	КонецЦикла;
	
	Если Состав.КоличествоСтрок() < 3 Тогда
	    ОписаниеОш	 = "На складе достаточное количество номенклатуры. Состав не заполнен";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗаполнитьСоставПоступлениеТМЦ()

//******************************************************************************
// ПолучитьСписокФирм(СписФирм)
//
// Параметры: 
//  СписФирм - выходной параметр, список значений, содержащий фирмы, выбранные
//             в таблице значений Состав.
//
// Возвращаемое значение:
//  1 - СписФирм содержит элементы, 0 - нет
//
// Описание:
//  ТекстОписания
//
Функция ПолучитьСписокФирм(СписФирм)
	
	Если СписокКонтрагентов.КоличествоСтрок() > 0 Тогда
		ЕстьФирмы		= 1;
		СписФирм		= СоздатьОбъект("СписокЗначений");
		
		СписокКонтрагентов.ВыбратьСтроки();
		Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
			СписФирм.ДобавитьЗначение(СписокКонтрагентов.Фирма);
		КонецЦикла;
	Иначе
		ЕстьФирмы		= 0;
	КонецЕсли;	
	
	Возврат ЕстьФирмы;
	
КонецФункции // ПолучитьСписокФирм()

//******************************************************************************
// ОстаткиУфирм(ВидФильтраФирм, ЗначФильтраФирм, ГруппироватьПоФирмам, ИспНоменклатура, РезТабл)
//
// Параметры:
//  ВидФильтраФирм		- число, вид фильтра по фирме, может принимать след. значения:
//                        1 - получать остатки только по переданной фирме
//                        2 - получать остатки по фирмам, отличным от переданной
//                        3 - получать остатки по фирмам, переданным списком значений
//  ЗначФильтраФирм		- значение фильтра фирм. Для ВидФильтраФирм = 1 или 2 - 
//                        элемент справочника Фирмы, для ВидФильтраФирм = 3 - список значений
//  ГруппироватьПоФирмам- число, 1 - в результирующей таблице будут присутствовать фирмы, 0 - нет
//  ИспНоменклатура		- элемент справочника Номенклатура, по которому нужно получить остатки.
//  РезТабл				- таблица значений, выходной параметр
//
// Возвращаемое значение:
//  1 - фукнция отработала успешно, 0 - нет
//
// Описание:
//  ТекстОписания
//
Функция ОстаткиУфирм(ВидФильтраФирм, ЗначФильтраФирм, ГруппироватьПоФирмам, СписНоменклатуры, РезТабл)
	
	ТекстЗапроса	= "//{{ЗАПРОС(ОстаткиУПокупателей)
	|ВыбФирма		= Регистр.ОстаткиТМЦ.Фирма, Регистр.РезервыТМЦ.Фирма;
	|ВыбСклад		= Регистр.ОстаткиТМЦ.Склад, Регистр.РезервыТМЦ.Склад;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура, Регистр.РезервыТМЦ.Номенклатура;
	|Ост			= Регистр.ОстаткиТМЦ.Количество;
	|Рез			= Регистр.РезервыТМЦ.Количество;
	|
	|Функция Остаток	= КонОст(Ост);
	|Функция Резерв		= КонОст(Рез);
	|
	|Группировка Номенклатура без групп " + ?(ПустоеЗначение(СписНоменклатуры)=1, ";", "Все;") + "
	|"//}}ЗАПРОС
	;
	
	Если ГруппироватьПоФирмам = 1 Тогда
	    ТекстЗапроса	= ТекстЗапроса	+ "Группировка ВыбФирма без групп;";
	КонецЕсли;
	
	// фильтр по фирмам
	Если ВидФильтраФирм = 1 Тогда
	    ТекстЗапроса	= ТекстЗапроса	+ "Условие(ВыбФирма = ЗначФильтраФирм);";
	ИначеЕсли ВидФильтраФирм = 2 Тогда
		ТекстЗапроса	= ТекстЗапроса	+ "Условие(ВыбФирма <> ЗначФильтраФирм);";
	ИначеЕсли ВидФильтраФирм = 3 Тогда
		ТекстЗапроса	= ТекстЗапроса	+ "Условие(ВыбФирма в ЗначФильтраФирм);";
	КонецЕсли;
	
	Если ПустоеЗначение(СписНоменклатуры) = 0 Тогда
		ТекстЗапроса	= ТекстЗапроса	+ "Условие(Номенклатура в СписНоменклатуры);";
	КонецЕсли;
	
	ТекстЗапроса	= ТекстЗапроса	+ "Условие(ВыбСклад = Склад);";
	
	Запрос	= СоздатьОбъект("Запрос");
	Рез		= Запрос.Выполнить(ТекстЗапроса);
	
	Если Рез = 1 Тогда
		Запрос.Выгрузить(РезТабл, 0, 0);
	КонецЕсли;
	
	Возврат Рез;

КонецФункции // ОстаткиУфирм()

//******************************************************************************
// РаспредОстаткиСобствФирм(ОстаткиВыбФирмы, ОстаткиОстФирм, ВидОперации, ДобавлятьВсе)
//
// Параметры: 
//  ОстаткиВыбФирмы	- таблица значений, содержащая текущие остатки на собственной
//                    фирме.
//  ОстаткиОстФирм	- таблица значений, содержащая текущие остатки на других 
//                    собственных фирмах
//  ВидОперации		- что распределяем.
//                     1 - остатки на собственной фирме.
//                    -1 - нехватку на собственной фирме.
//  ДобавлятьВсе	- 1 - добавлять, даже если нет остатков
//
// Возвращаемое значение:
//  1 - фукнция отработала успешно, 0 - нет
//
// Описание:
//  ТекстОписания
//
Функция РаспредОстаткиСобствФирм(ОстаткиВыбФирмы, ОстаткиОстФирм, ВидОперации, ДобавлятьВсе)
	Перем ВремЕдиница, ВремВалюта;
	
    РаспредПоПокупателям	= СоздатьОбъект("ТаблицаЗначений");
	РаспредПоПокупателям.НоваяКолонка("Фирма", "Справочник.Фирмы");
	РаспредПоПокупателям.НоваяКолонка("Колво", "Число", 14, 3);
	
	ОстаткиВыбФирмы.ВыбратьСтроки();
	
	Пока ОстаткиВыбФирмы.ПолучитьСтроку() = 1 Цикл
		
		Если ФлагУчетаРезервовПоДоговорам = 1 Тогда
			Колво = (ОстаткиВыбФирмы.Остаток - ОстаткиВыбФирмы.Резерв) * ВидОперации;
		Иначе		    
			Колво = (ОстаткиВыбФирмы.Остаток) * ВидОперации;
		КонецЕсли;
		
		Номенклатура	= ОстаткиВыбФирмы.Номенклатура;
		
		Если (ДобавлятьВсе = 1) Тогда
			// номенклатуру нужно добавлять, даже если нет остатков
			ДобавитьТоварВсостав(Номенклатура, Колво);
		КонецЕсли;
		
		Если (Колво <= 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОстаткиОстФирм.КоличествоСтрок() > 0 Тогда
			Поз = 0;
			Если ОстаткиОстФирм.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
				
				Для СчетчикЦикла = Поз По ОстаткиОстФирм.КоличествоСтрок() Цикл
					ОстаткиОстФирм.ПолучитьСтрокуПоНомеру(СчетчикЦикла);
					
					Если ОстаткиОстФирм.Номенклатура <> Номенклатура Тогда
					    Прервать;
					КонецЕсли;
					
					Если ФлагУчетаРезервовПоДоговорам = 1 Тогда
						КолвоРаспред = (ОстаткиОстФирм.Резерв - ОстаткиОстФирм.Остаток) * ВидОперации;
					Иначе		    
						КолвоРаспред = (- ОстаткиОстФирм.Остаток) * ВидОперации;
					КонецЕсли;
						
					Если КолвоРаспред > 0 Тогда
						РаспредПоПокупателям.НоваяСтрока();
						РаспредПоПокупателям.Фирма	= ОстаткиОстФирм.ВыбФирма;
						РаспредПоПокупателям.Колво	= КолвоРаспред;
					КонецЕсли;
				КонецЦикла;
				
				Если РаспредПоПокупателям.КоличествоСтрок() > 0 Тогда
					// Есть отрицательные остатки по фирмам
					
					// если ДобавлятьВсе = 1, то строка уже добавлена
					Если (ДобавлятьВсе = 0) Тогда
						ДобавитьТоварВсостав(Номенклатура, 0);
					КонецЕсли;
					
					ТекСтрока	= Состав.КоличествоСтрок();
					
					// пересчитаем остаток в единицу цены
					КоэффЕдЦены	= Состав.Единица.Коэффициент;
					Если (1 <> КоэффЕдЦены) Тогда
						// не базовая
						Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
							Колво	= Колво / КоэффЕдЦены;
						КонецЕсли;
					КонецЕсли;
					
					Состав.Всего		= глФРМКоличество(Колво,,"");
							
					РаспредПоПокупателям.ВыбратьСтроки();
					Пока РаспредПоПокупателям.ПолучитьСтроку() = 1 Цикл
						КолвоРаспред	= РаспредПоПокупателям.Колво;
						Если (1 <> КоэффЕдЦены) Тогда
							// не базовая
							Если (0 <> КоэффЕдЦены) Тогда // проверка на 0
								КолвоРаспред	= КолвоРаспред / КоэффЕдЦены;
							КонецЕсли;
						КонецЕсли;
						
						Поз	= 0;
						Если СписокКонтрагентов.НайтиЗначение(РаспредПоПокупателям.Фирма, Поз, "Фирма") = 1 Тогда
							// есть колонка с фирмой покупателем
							ИдКолонки	= СписокКонтрагентов.ПолучитьЗначение(Поз, "ИдКолонки");
							
							Состав.УстановитьЗначение(ТекСтрока, ИдКолонки, глФРМКоличество(КолвоРаспред,,""));
						Иначе
							// добавит колонку с фирмой покупателем
							ИдКолонки	= ДобавитьКолонкуВсостав(РаспредПоПокупателям.Фирма);
							Состав.УстановитьЗначение(ТекСтрока, ИдКолонки, глФРМКоличество(КолвоРаспред,,""));
						КонецЕсли;
					КонецЦикла;
					
					РасчетОстаткаПоСтроке(ТекСтрока);
				
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РаспредПоПокупателям.УдалитьСтроки();
	    
	КонецЦикла;
	
КонецФункции // РаспредОстаткиСобствФирм()

//******************************************************************************
// ЗаполнитьСоставПокупкаУфирмы(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Реализация". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если
//  нет свободных остатков у собственных фирм.
//
Функция ЗаполнитьСоставПокупкаУфирмы(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	Перем СписФирм;
	Перем ОстаткиНаВыбранной, ОстаткиНаДругих;
	Перем Рез;
	
	// проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	// получим остатки на выбранной фирме
	ОстаткиУфирм(1, Фирма, 0, СписНоменклатуры, ОстаткиНаВыбранной);
	
	Если ПолучитьСписокФирм(СписФирм) = 1 Тогда
	    // фирмы уже добавлены
		ОстаткиУфирм(3, СписФирм, 1, СписНоменклатуры, ОстаткиНаДругих);
	Иначе
		Если ПустоеЗначение(СписНоменклатуры) = 1 Тогда
			// по всем собственным, кроме выбранной
			ОстаткиУфирм(2, Фирма, 1, СписНоменклатуры, ОстаткиНаДругих);
		Иначе
			// если передан список номенклатуры, то остатки на других
			// фирмах считать не нужно
			ОстаткиНаДругих = СоздатьОбъект("ТаблицаЗначений");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(СписНоменклатуры) = 1 Тогда
	    ДобавлятьВсе = 0;
	Иначе
		ДобавлятьВсе = 1;
	КонецЕсли;
	
	РаспредОстаткиСобствФирм(ОстаткиНаВыбранной, ОстаткиНаДругих, -1, ДобавлятьВсе);
	
	Если (Состав.КоличествоСТрок() = 2) И (ДобавлятьВсе = 0) Тогда
		ОписаниеОш	= "Нехватка номенклатуры на выбранной фирме отсутствует";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ЗаполнитьСоставПокупкаУфирмы()

//******************************************************************************
// ЗаполнитьСоставПродажаФирме(ДопВидОперации, СписНоменклатуры, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  СписНоменклатуры- список значений, содержащий элементы справочника номенклатура
//  ОписаниеОш		- текст, описание ошибки.
//
// Возвращаемое значение:
//  1 - состав заполнен, 0 - возникла ошибка или состав заполнять нечем
//
// Описание:
//  Заполняет состав по операции "Реализация". Если СписНоменклатуры не
//  пустое значение, то состав нужно заполнять этим списком, даже если
//  нет свободных остатков у собственной фирмы.
//
Функция ЗаполнитьСоставПродажаФирме(ДопВидОперации, СписНоменклатуры, ОписаниеОш="")
	Перем СписФирм;
	Перем ОстаткиНаВыбранной, ОстаткиНаДругих;
	
	// проверка заполнения общих реквизитов
	Если ПроверкаУстановкиРеквизитов(ОписаниеОш) = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	// получим остатки на выбранной фирме
	ОстаткиУфирм(1, Фирма, 0, СписНоменклатуры, ОстаткиНаВыбранной);
	
	Если ПолучитьСписокФирм(СписФирм) = 1 Тогда
	    // фирмы уже добавлены
		ОстаткиУфирм(3, СписФирм, 1, СписНоменклатуры, ОстаткиНаДругих);
	Иначе
		Если ПустоеЗначение(СписНоменклатуры) = 1 Тогда
			// по всем собственным, кроме выбранной
			ОстаткиУфирм(2, Фирма, 1, СписНоменклатуры, ОстаткиНаДругих);
		Иначе
			// если передан список номенклатуры, то остатки на других
			// фирмах считать не нужно
			ОстаткиНаДругих = СоздатьОбъект("ТаблицаЗначений");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустоеЗначение(СписНоменклатуры) = 1 Тогда
	    ДобавлятьВсе = 0;
	Иначе
		ДобавлятьВсе = 1;
	КонецЕсли;
	
	РаспредОстаткиСобствФирм(ОстаткиНаВыбранной, ОстаткиНаДругих, 1, ДобавлятьВсе);
	
	Если (Состав.КоличествоСТрок() = 2) И (ДобавлятьВсе = 0) Тогда
		ОписаниеОш	= "Нехватка номенклатуры на собственных фирмах отсутствует";
		Рез	= 0;
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаполнитьСоставПродажаФирме()

//******************************************************************************
// ПоКнопкеЗаполнить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Получает параметры текущей операции. В соответствии с полученными параметрами
//  вызывает процедуру требуемую заполнения состава.
//
Процедура ПоКнопкеЗаполнить()
	Перем ОписаниеОш;
	
	Если Состав.КоличествоСтрок() > 2 Тогда
	    Если Вопрос("При заполнении состав будет очищен. Продолжить?", "Да+Нет", 60) <> "Да" Тогда
			Возврат;
		Иначе
			Пока Состав.КоличествоСтрок() > 2 Цикл
			    Состав.УдалитьСтроку(3);
			КонецЦикла;
	    КонецЕсли;
	КонецЕсли;
		
	// найдем операцию
	Поз	= НайтиОперацию(СписокВидовДок.ПолучитьЗначение(СписокВидовДок.ТекущаяСтрока()));
	
	// получим параметры операции
	ВидОперации		= ПолучитьПараметрОперации(Поз, "ВидОперации");
	ДопВидОперации	= ПолучитьПараметрОперации(Поз, "ДопВидОперации");
	
	// вызов процедуры заполнения
	Если ВидОперации = "Реализация" Тогда
	    Рез	= ЗаполнитьСоставРеализация(ДопВидОперации, , ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаявкаПокупателя" Тогда
	    Рез	= ЗаполнитьСоставЗаявкаПокупателя(ДопВидОперации, , ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаказПоставщику" Тогда
	    Рез	= ЗаполнитьСоставЗаказПоставщику(ДопВидОперации, , ОписаниеОш);
	ИначеЕсли ВидОперации = "ПоступлениеТМЦ" Тогда
	    Рез	= ЗаполнитьСоставПоступлениеТМЦ(ДопВидОперации, , ОписаниеОш);
	ИначеЕсли ВидОперации = "ПокупкаУфирмы" Тогда
	    Рез	= ЗаполнитьСоставПокупкаУфирмы(ДопВидОперации, , ОписаниеОш);
	ИначеЕсли ВидОперации = "ПродажаФирме" Тогда
	    Рез	= ЗаполнитьСоставПродажаФирме(ДопВидОперации, , ОписаниеОш);
	Иначе
		Рез	= 0;
		ОписаниеОш	= "Выбран неизвестный вид операции!";
	КонецЕсли;
	
	Если Рез = 0 Тогда
	    Предупреждение(ОписаниеОш, 60);
	КонецЕсли;
	
КонецПроцедуры // ПоКнопкеЗаполнить()

// ОБНОВЛЕНИЕ СОСТАВА

//******************************************************************************
// ОбновитьРапределяемыйОстаток(ИспФирма, ИспСклад, УчитыватьРезерв, 
//                              УчитыватьРезервПоДоговорам, УчитыватьЗаказ, 
//							    УчитыватьМинОстаток)
//
// Параметры:
//  ИспФирма					- фирма для фильтра
//  ИспСклад					- склад для фильтра
//  УчитыватьРезерв				- 1 - вычитать резерв из остатка, 0 - нет
//  УчитыватьРезервПоДоговорам	- 1 - вычитать из резерва резерв, сделанный 
//                                по договорам выбранных контрагетов, 0 - нет
//  СписДоговоров				- список договоров, по которым учитываем резерв
//  УчитыватьЗаказ				- 1 - добавлять к остатку заказы, 0 - нет
//  УчитыватьМинОстаток			- 1 - вичитать из остатка минимальный остаток, 0 - нет
//  Вид							- 1 - обновляем остаток, -1 - обновляем нехватку
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет в таблице Состав колонки Всего и Остаток
//
Процедура ОбновитьРапределяемыйОстаток(ИспФирма,
	                                   ИспСклад, 
	                                   УчитыватьРезерв, 
	                                   УчитыватьРезервПоДоговорам,
									   СписДоговоров,
									   УчитыватьЗаказ,
									   УчитыватьМинОстаток, Вид)
									   
	Перем ВыборкаОстатков, ВыборкаРезервов, ВыборкаРезервовПоДоговорам, ВыборкаЗаказов;

	СписокНоменклатуры	= СоздатьОбъект("СписокЗначений");
	Состав.Выгрузить(СписокНоменклатуры, 3,, "Номенклатура");
	
    ПолучитьОстатки(ИспФирма, ИспСклад, 1, СписокНоменклатуры, ВыборкаОстатков);
	
	Если УчитыватьРезерв = 1 Тогда
		ПолучитьРезервы(ИспФирма, ИспСклад, 1, СписокНоменклатуры, 0,              , ВыборкаРезервов);
	КонецЕсли;
	
	Если УчитыватьРезервПоДоговорам = 1 Тогда
	    ПолучитьРезервы(ИспФирма, ИспСклад, 1, СписокНоменклатуры, 1, СписДоговоров, ВыборкаРезервовПоДоговорам);
	КонецЕсли;
	
	Если УчитыватьЗаказ = 1 Тогда
		ПолучитьЗаказы(ИспФирма, 1, СписокНоменклатуры, 0, , ВыборкаЗаказов);
	КонецЕсли;
	
	Для СчетчикЦикла = 1 По СписокНоменклатуры.РазмерСписка() Цикл
		Номенклатура	= СписокНоменклатуры.ПолучитьЗначение(СчетчикЦикла);
		
		ПозСостав	= 0;
		Если Состав.НайтиЗначение(Номенклатура, ПозСостав, "Номенклатура") = 1 Тогда
			// только если нашли товар в составе
			Колво	= 0;
			
			// получим остаток номенклатуры
			Поз		= 0;
			Если ВыборкаОстатков.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
				Колво	= Колво + ВыборкаОстатков.ПолучитьЗначение(Поз, "Количество");
			КонецЕсли;
			
			// вычитаем из остатка резерв
			Если УчитыватьРезерв = 1 Тогда
				Поз	= 0;
				Если ВыборкаРезервов.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
					Колво	= Колво - ВыборкаРезервов.ПолучитьЗначение(Поз, "Количество");
				КонецЕсли;
			КонецЕсли;
			
			Если УчитыватьРезервПоДоговорам	= 1 Тогда
				// добавляем к остатку резерв по договорам выбранных контрагентов
				Поз	= 0;
				Если ВыборкаРезервовПоДоговорам.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
					Колво	= Колво + ВыборкаРезервовПоДоговорам.ПолучитьЗначение(Поз, "Количество");
				КонецЕсли;
			КонецЕсли;
			
			Если УчитыватьЗаказ = 1 Тогда
				// добавляем к остатку заказы
				Поз	= 0;
				Если ВыборкаЗаказов.НайтиЗначение(Номенклатура, Поз, "Номенклатура") = 1 Тогда
					Колво	= Колво + ВыборкаЗаказов.ПолучитьЗначение(Поз, "КоличествоПриход");
				КонецЕсли;
			КонецЕсли;
				
			Если УчитыватьМинОстаток = 1 Тогда
			    // Вычитаем минимальный остаток
				Колво	= Колво - Номенклатура.МинОстаток;
			КонецЕсли;
			
			КоэфЕд	= Состав.ПолучитьЗначение(ПозСостав, "Единица").Коэффициент;
			//КоэфЕд	= ВремЕд.Коэффициент;
			
			Колво	= ?(КоэфЕд <> 0, Колво / КоэфЕд, Колво) * Вид;
			
			// установим новое значение
			Состав.УстановитьЗначение(ПозСостав, "Всего", глФРМКоличество(Колво,,""));
			
			// пересчитаем колонку остаток
			РасчетОстаткаПоСтроке(ПозСостав);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьРапределяемыйОстаток()

//******************************************************************************
// ОбновитьСоставРеализация(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид оперции
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет состав при операции "Реализация".
//
Процедура ОбновитьСоставРеализация(ДопВидОперации)
	Если ПустоеЗначение(Склад) = 1 Тогда
	    Предупреждение("Не выбран склад!", 60);
		Возврат;
	КонецЕсли;

	Если (СписокКонтрагентов.КоличествоСтрок() > 0) И (ФлагУчетаРезервовПоДоговорам = 1) Тогда
		СписДоговоров			= СоздатьОбъект("СписокЗначений");
		СписокКонтрагентов.Выгрузить(СписДоговоров,,, "Договор");
		
		ОбновитьРапределяемыйОстаток(глФирмаДляОстатковТМЦ(Фирма), Склад, 1, 1, СписДоговоров, 0, 0, 1);
	Иначе
		ОбновитьРапределяемыйОстаток(глФирмаДляОстатковТМЦ(Фирма), Склад, 1, 0,              , 0, 0, 1);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСоставРеализация()

//******************************************************************************
// ОбновитьСоставЗаявкаПокупателя(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид оперции
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет состав при операции "Заявка покупателя".
//
Процедура ОбновитьСоставЗаявкаПокупателя(ДопВидОперации)

	Если (ПустоеЗначение(Склад) = 1) И (ДопВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда
	    Предупреждение("Не выбран склад!", 60);
		Возврат;
	КонецЕсли;

	ОбновитьРапределяемыйОстаток(глФирмаДляОстатковТМЦ(Фирма), Склад, 1, 0, , 0, 0, 1);
	
КонецПроцедуры // ОбновитьСоставЗаявкаПокупателя()

//******************************************************************************
// ОбновитьСоставЗаказПоставщику(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид оперции
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Обновляет состав при операции "Заказ поставщику"
//
Процедура ОбновитьСоставЗаказПоставщику(ДопВидОперации)
	
	ОбновитьРапределяемыйОстаток(глФирмаДляОстатковТМЦ(Фирма), , 1, 0, , ФлагУчетаЗаказов, 1, -1);
	
КонецПроцедуры // ОбновитьСоставЗаказПоставщику()

//******************************************************************************
// ОбновитьСоставПоступлениеТМЦ(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ОбновитьСоставПоступлениеТМЦ(ДопВидОперации)
	
	Если (ПустоеЗначение(Склад) = 1) Тогда
	    Предупреждение("Не выбран склад!", 60);
		Возврат;
	КонецЕсли;
	
	ОбновитьРапределяемыйОстаток(глФирмаДляОстатковТМЦ(Фирма), Склад, 0, 0, , 0, 0, -1);
	
КонецПроцедуры // ОбновитьСоставПоступлениеТМЦ()

//******************************************************************************
// ОбновитьСоставПокупкаУфирмы(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ОбновитьСоставПокупкаУфирмы(ДопВидОперации)
	
	Если (СписокКонтрагентов.КоличествоСтрок() > 0) И (ФлагУчетаРезервовПоДоговорам = 1) Тогда
		ОбновитьРапределяемыйОстаток(Фирма, , 1, 0, , 0, 0, -1);
	Иначе
		ОбновитьРапределяемыйОстаток(Фирма, , 0, 0, , 0, 0, -1);
	КонецЕсли;

КонецПроцедуры // ОбновитьСоставПокупкаУфирмы()

//******************************************************************************
// ОбновитьСоставПродажаФирме(ДопВидОперации)
//
// Параметры: 
//  ДопВидОперации
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//
Процедура ОбновитьСоставПродажаФирме(ДопВидОперации)
	
	Если (СписокКонтрагентов.КоличествоСтрок() > 0) И (ФлагУчетаРезервовПоДоговорам = 1) Тогда
		ОбновитьРапределяемыйОстаток(Фирма, , 1, 0, , 0, 0, 1);
	Иначе
		ОбновитьРапределяемыйОстаток(Фирма, , 0, 0, , 0, 0, 1);
	КонецЕсли;

КонецПроцедуры // ОбновитьСоставПродажаФирме()

//******************************************************************************
// ОбновитьСостав()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Получает параметры текущей операции. В соответствии с полученными параметрами
//  вызывает требуемую процедуру обновления состава.
//
Процедура ОбновитьСостав()
	Перем Описание;
	
	// найдем операцию
	Поз	= НайтиОперацию(СписокВидовДок.ПолучитьЗначение(СписокВидовДок.ТекущаяСтрока()));
	
	// получим параметры операции
	ВидОперации		= ПолучитьПараметрОперации(Поз, "ВидОперации");
	ДопВидОперации	= ПолучитьПараметрОперации(Поз, "ДопВидОперации");
	
	// вызов процедуры заполнения
	Если ВидОперации = "Реализация" Тогда
	    ОбновитьСоставРеализация(ДопВидОперации);
	ИначеЕсли ВидОперации = "ЗаявкаПокупателя" Тогда
	    ОбновитьСоставЗаявкаПокупателя(ДопВидОперации);
	ИначеЕсли ВидОперации = "ЗаказПоставщику" Тогда
	    ОбновитьСоставЗаказПоставщику(ДопВидОперации);
	ИначеЕсли ВидОперации = "ПоступлениеТМЦ" Тогда
	    ОбновитьСоставПоступлениеТМЦ(ДопВидОперации);
	ИначеЕсли ВидОперации = "ПокупкаУфирмы" Тогда
	    ОбновитьСоставПокупкаУфирмы(ДопВидОперации);
	ИначеЕсли ВидОперации = "ПродажаФирме" Тогда
	    ОбновитьСоставПродажаФирме(ДопВидОперации);
	Иначе
		Предупреждение("Выбран неизвестный вид операции!", 60);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСостав()

//******************************************************************************
// ПоКнопкеОбновить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается по кнопке Обновить. Проверяет установку необходимых реквизитов
//  и вызыватет процедуру обновления.
//
Процедура ПоКнопкеОбновить()
	Перем Описание;
	
	Если ПроверкаУстановкиРеквизитов(Описание) = 0 Тогда
		Предупреждение(Описание, 60);
		Возврат;
	КонецЕсли;
	
	Если Состав.КоличествоСтрок() < 3 Тогда
	    Предупреждение("Состав не заполнен.", 60);
		Возврат;
	КонецЕсли;
	
	ОбновитьСостав();
	
КонецПроцедуры // ПоКнопкеОбновить()

// ПОДБОР НОМЕНКЛАТУРЫ

//******************************************************************************
// ДобавитьНоменклатуру(Номенклатура)
//
// Параметры: 
//  Номенклатура - элемент справочника Номенклатура.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в состав номенклатуру. 
//
Процедура ДобавитьНоменклатуру(Номенклатура)
	Перем ОписаниеОш;
	
	// попытаемся найти товар в Составе
	Поз	= 0;
	Если Состав.НайтиЗначение(Номенклатура, Поз, "") = 1 Тогда
	    Сообщить("Позиция номенклатуры """ + Номенклатура + """ в составе уже имеется.");
		Возврат;
	КонецЕсли;
	
	Поз	= НайтиОперацию(СписокВидовДок.ПолучитьЗначение(СписокВидовДок.ТекущаяСтрока()));
	
	// получим параметры операции
	ВидОперации		= ПолучитьПараметрОперации(Поз, "ВидОперации");
	ДопВидОперации	= ПолучитьПараметрОперации(Поз, "ДопВидОперации");
	
	СписНоменклатуры	= СоздатьОбъект("СписокЗначений");
	СписНоменклатуры.ДобавитьЗначение(Номенклатура);
	
	// вызов процедуры заполнения
	Если ВидОперации = "Реализация" Тогда
	    Рез	= ЗаполнитьСоставРеализация(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаявкаПокупателя" Тогда
	    Рез	= ЗаполнитьСоставЗаявкаПокупателя(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаказПоставщику" Тогда
	    Рез	= ЗаполнитьСоставЗаказПоставщику(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
	ИначеЕсли ВидОперации = "ПоступлениеТМЦ" Тогда
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		    Рез	= 0;
			ОписаниеОш	= "Покупка услуг не предусмотрена!";
		Иначе
		    Рез	= ЗаполнитьСоставПоступлениеТМЦ(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
		КонецЕсли;
	ИначеЕсли ВидОперации = "ПокупкаУфирмы" Тогда
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		    Рез	= 0;
			ОписаниеОш	= "Покупка услуг у собственных фирм не предусмотрена!";
		Иначе
			Рез	= ЗаполнитьСоставПокупкаУфирмы(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
		КонецЕсли;
	ИначеЕсли ВидОперации = "ПродажаФирме" Тогда
		Если Номенклатура.ВидНоменклатуры = Перечисление.ВидыНоменклатуры.Услуга Тогда
		    Рез	= 0;
			ОписаниеОш	= "Продажа услуг собственным фирмам не предусмотрена!";
		Иначе
		    Рез	= ЗаполнитьСоставПродажаФирме(ДопВидОперации, СписНоменклатуры, ОписаниеОш);
		КонецЕсли;
	Иначе
		Рез	= 0;
		ОписаниеОш	= "Выбран неизвестный вид операции!";
	КонецЕсли;
	
	Если Рез = 0 Тогда
	    Предупреждение(ОписаниеОш, 60);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьНоменклатуру()

// ФОРМИРОВАНИЕ (ВЫПИСКА) ДОКУМЕНТОВ

//******************************************************************************
// ВыписатьВыданныйСФ(ДокСФ, ДокОсн)
//
// Параметры: 
//  ДокСФ	- возвращаемы параметр, сформированный документ счет-фактура
//  ДокОсн	- документ, на основании которого вводится счет-фактура
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Создает документ СчетФактураВыданный
//
Процедура ВыписатьВыданныйСФ(ДокСФ, ДокОсн)
	
	ДокСФ	= СоздатьОбъект("Документ.СчетФактураВыданный");
	ДокСФ.Новый();
	
	глЗаполнитьШапкуНаОсн(ДокСФ, ДокОсн);

	ДокСФ.ДатаДок			= ДатаДок;
	ДокСФ.АвтоКнигаПродаж	= 1;
	ДокСФ.УчитыватьНДС		= 1;
	ДокСФ.СуммаВклНДС		= 1;
	ДокСФ.УчитыватьНП		= 1;
	ДокСФ.СуммаВклНП   	= 1;
	ДокСФ.Валюта		= ДокОсн.Валюта;
	ДокСФ.Фирма			= ДокОсн.Фирма;
	ДокСФ.ЮрЛицо		= ДокОсн.Фирма.ЮрЛицо;
	ДокСФ.Контрагент 	= ДокОсн.Контрагент;
	ДокСФ.Договор		= ДокОсн.Договор;
	
КонецПроцедуры // ВыписатьВыданныйСФ()

//******************************************************************************
// ВыписатьПолученныйСФ(ДокСФ, ДокОсн)
//
// Параметры: 
//  ДокСФ	- возвращаемы параметр, сформированный документ счет-фактура
//  ДокОсн	- документ, на основании которого вводится счет-фактура
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Создает документ СчетФактураПолученный
//
Процедура ВыписатьПолученныйСФ(ДокСФ, ДокОсн)
	
	ДокСФ	= СоздатьОбъект("Документ.СчетФактураПолученный");
	ДокСФ.Новый();
	
	глЗаполнитьШапкуНаОсн(ДокСФ, ДокОсн);

	ДокСФ.ДатаДок			= ДатаДок;
	ДокСФ.ДатаДокВходящий 	= ДатаДок;
	ДокСФ.АвтоКнигаПокупок 	= 1;
	
	ДокСФ.Валюта		= ДокОсн.Валюта;
	ДокСФ.Фирма			= ДокОсн.Фирма;
	ДокСФ.ЮрЛицо		= ДокОсн.Фирма.ЮрЛицо;
	ДокСФ.Контрагент 	= ДокОсн.Контрагент;
	ДокСФ.Договор		= ДокОсн.Договор;
	
КонецПроцедуры // ВыписатьПолученныйСФ()

//******************************************************************************
// ЗаполнитьШапкуДокумента(Док)
//
// Параметры: 
//  Док
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет общие для всех документов реквиизты шапки.
//
Процедура ЗаполнитьШапкуДокумента(Док)
	
	Док.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
	Док.ДатаДок			= ДатаДок;
	Док.Фирма			= Фирма;
	Док.ЮрЛицо			= Фирма.ЮрЛицо;
	Док.Валюта			= Валюта;
	Док.Курс			= Курс;
	Док.УчитыватьНДС	= УчитыватьНДС;
	Док.СуммаВклНДС		= СуммаВклНДС;
	Док.УчитыватьНП		= УчитыватьНП;
	Док.СуммаВклНП		= СуммаВклНП;
	Док.ТипЦен			= ТипЦен;
	Док.Автор			= глПользователь;
	Док.Проект			= Проект;
	
КонецПроцедуры // ЗаполнитьШапкуДокумента()

//******************************************************************************
// ДобавитьСтрокуВсостав(Док, НомСтроки, НомКолонки)
//
// Параметры: 
//  Док			- документ
//  НомСтроки	- номер строки в таблице Состав
//  НомКолонки	- номер колонки, из которой нужно брать количество.
//
// Возвращаемое значение:
//  1 - строка в документ добавлена, 0 - нет
//
// Описание:
//  Заполняет общие реквизиты табличной части документа
//
Функция ДобавитьСтрокуВсостав(Док, НомСтроки, НомКолонки)
	
	Колво	= Число(Состав.ПолучитьЗначение(НомСтроки, НомКолонки));
	Если Колво > 0 Тогда
		Док.НоваяСтрока();
		
		Номенклатура		= Состав.ПолучитьЗначение(НомСтроки, "Номенклатура");
		Единица				= Состав.ПолучитьЗначение(НомСтроки, "Единица");
		
		Док.Номенклатура	= Номенклатура;
		Док.Единица			= Единица;
		Док.Коэффициент		= Единица.Коэффициент;
		Док.Цена			= Число(Состав.ПолучитьЗначение(НомСтроки, "Цена"));
		Док.Количество		= Колво;
		
		Док.СтавкаНДС		= Номенклатура.СтавкаНДС;
		Док.СтавкаНП		= Номенклатура.СтавкаНП;
		
		глПересчетТаблЧасти(Док,"Цена");
		Возврат 1;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ДобавитьСтрокуВсостав()

//******************************************************************************
// ДобавитьСтрокуВСоставСКоличеством(Док, НомСтроки, Колво)
//
// Параметры: 
//  Док			- документ
//  НомСтроки	- номер строки в таблице Состав
//  Колво		- количество.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Заполняет общие реквизиты табличной части документа
//
Процедура ДобавитьСтрокуВСоставСКоличеством(Док, НомСтроки, Колво)
	
	Если Колво > 0 Тогда
		Док.НоваяСтрока();
		
		Номенклатура		= Состав.ПолучитьЗначение(НомСтроки, "Номенклатура");
		Единица				= Состав.ПолучитьЗначение(НомСтроки, "Единица");
		
		Док.Номенклатура	= Номенклатура;
		Док.Единица			= Единица;
		Док.Коэффициент		= Единица.Коэффициент;
		Док.Цена			= Число(Состав.ПолучитьЗначение(НомСтроки, "Цена"));
		Док.Количество		= Колво;
		
		Док.СтавкаНДС		= Номенклатура.СтавкаНДС;
		Док.СтавкаНП		= Номенклатура.СтавкаНП;
		
		глПересчетТаблЧасти(Док,"Цена");
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВСоставСКоличеством()

//******************************************************************************
// УстановитьСуммуВзаиморасчетов(Док)
//
// Параметры: 
//  Док	- документ
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Устанавливает в документе сумму взаиморасчетов
//
Процедура УстановитьСуммуВзаиморасчетов(Док)
	
	ВалютаВзаиморасчетов = Док.Договор.ВалютаВзаиморасчетов;
	
	Если ПустоеЗначение(ВалютаВзаиморасчетов) = 0 Тогда
		СуммаВзаиморасчетовДок	= Док.Итог("Сумма");
		
		Если Док.СуммаВклНДС = 0 Тогда
			СуммаВзаиморасчетовДок = СуммаВзаиморасчетовДок + Док.Итог("СуммаНДС");
		КонецЕсли;
		
		Если СуммаВклНП = 0 Тогда
			СуммаВзаиморасчетовДок = СуммаВзаиморасчетовДок + Док.Итог("СуммаНП");
		КонецЕсли;
		
		Док.СуммаВзаиморасчетов = глПересчет(СуммаВзаиморасчетовДок, Валюта, Курс, ВалютаВзаиморасчетов, ДатаДок);
	КонецЕсли;
	
КонецПроцедуры // УстановитьСуммуВзаиморасчетов()

//******************************************************************************
// ВыполнитьДействия(ВыполнитьДействия)
//
// Параметры: 
//  ВыполнитьДействия
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  ТекстОписания
//
Процедура ВыполнитьДействия(Док, Показать, Провести, Напечатать, КолЭкз)
	
	Док.Записать();
	
	Если Провести = 1 Тогда
		Док.Провести();
	КонецЕсли;
	
	Если (Напечатать = 1)  И (КолвоЭкз <> 0) Тогда
		Парам	= СоздатьОбъект("СписокЗначений");
		Парам.Установить("Команда"	, "ПечатьНаПринтер");
		Парам.Установить("КолЭкз"	, КолвоЭкз);
		ОткрытьФорму(Док.ТекущийДокумент(), Парам, 0);
	КонецЕсли;
	
	Если Показать = 1 Тогда
		ОткрытьФорму(Док.ТекущийДокумент(),, 0);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействия()

//******************************************************************************
// ПроверкаЗаполненияРеквизитовШапки()
//
// Параметры: 
//  ОписаниеОш - через параметр возвращается текст, в котором написано, какой
//               необходимый реквизит не заполнен
//
// Возвращаемое значение:
//  1 - необходимы реквизиты заполнены, 0 - нет
//
// Описание:
//  Используется при выписке документов. Проверяет заполнение необходимых
//  реквизитов, которые являются общими для всех документов.
//
Функция ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш)
	
	Если ПустоеЗначение(Валюта) = 1 Тогда
	    Рез	= 0;
		ОписаниеОш	= "Не выбрана валюта.";
	ИначеЕсли ПустоеЗначение(Курс) = 1 Тогда
	    Рез	= 0;
		ОписаниеОш	= "Не выбран курс валюты.";
	ИначеЕсли ПустоеЗначение(ТипЦен) = 1 Тогда
	    Рез	= 0;
		ОписаниеОш	= "Не выбран тип цен.";
	ИначеЕсли ПустоеЗначение(Фирма) = 1 Тогда
	    Рез	= 0;
		ОписаниеОш	= "Не выбрана фирма.";
	Иначе
		Рез	= 1;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ПроверкаЗаполненияРеквизитовШапки()

//******************************************************************************
// ВыписатьРеализацию(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает документ Реализация.
//
Функция ВыписатьРеализацию(ДопВидОперации, ОписаниеОш)
	Перем ДокСФ;
	
	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
		Возврат -1;
	ИначеЕсли ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад.";
		Возврат -1;
	КонецЕсли;
	
	Док			= СоздатьОбъект("Документ.Реализация");
	КолвоДок	= 0;	// количество выписанных документов
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
		Док.Новый();
		Док.Склад		= Склад;
		Док.Скидка		= Скидка;
		Док.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		Док.Договор		= СписокКонтрагентов.Договор;
		Док.КодОперации	= ДопВидОперации;
		Док.ДатаОплаты	= ДатаДок;
		
		// заполним общие реквизиты шапки
		ЗаполнитьШапкуДокумента(Док);
		
		// заполнить состав
		Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
			ДобавитьСтрокуВсостав(Док, СчетчикЦикла, СписокКонтрагентов.ИдКолонки);
		КонецЦикла;
		
		Если Док.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(Док);
		
		// выполнить действия над документом
		ВыполнитьДействия(Док, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		
		// счет-фактура
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьВыданныйСФ(ДокСФ, Док.ТекущийДокумент());
			ВыполнитьДействия(ДокСФ, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолвоДок;
	
КонецФункции // ВыписатьРеализацию()

//******************************************************************************
// ВыписатьЗаявкуПокупателя(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает документ ЗаявкаПокупателя
//
Функция ВыписатьЗаявкуПокупателя(ДопВидОперации, ОписаниеОш)
	
	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
		Возврат -1;
	ИначеЕсли (ПустоеЗначение(Склад) = 1) И (ДопВидОперации = Перечисление.ВидыОперацийЗаявок.НаСклад) Тогда
	    ОписаниеОш	= "Не выбран склад.";
		Возврат -1;
	КонецЕсли;
	
	Док			= СоздатьОбъект("Документ.ЗаявкаПокупателя");
	КолвоДок	= 0;	// количество выписанных документов
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
		Док.Новый();
		Док.Склад		= Склад;
		Док.Скидка		= Скидка;
		Док.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		Док.Договор		= СписокКонтрагентов.Договор;
		Док.ВидОперации	= ДопВидОперации;
		Док.ДатаОплаты	= ДатаДок;
		Док.ДатаОтгрузки= ДатаДок;
		
		// заполним общие реквизиты шапки
		ЗаполнитьШапкуДокумента(Док);
		
		// заполнить состав
		Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
			ДобавитьСтрокуВсостав(Док, СчетчикЦикла, СписокКонтрагентов.ИдКолонки);
		КонецЦикла;
		
		Если Док.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(Док);
		
		// выполнить действия над документом
		ВыполнитьДействия(Док, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
	КонецЦикла;
	
	Возврат КолвоДок;
	
КонецФункции // ВыписатьЗаявкуПокупателя()

//******************************************************************************
// ВыписатьЗаказПоставщику(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает документы ЗаказПоставщику
//
Функция ВыписатьЗаказПоставщику(ДопВидОперации, ОписаниеОш)

	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	Док			= СоздатьОбъект("Документ.ЗаказПоставщику");
	КолвоДок	= 0;	// количество выписанных документов
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
		Док.Новый();
		Док.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		Док.Договор		= СписокКонтрагентов.Договор;
		Док.ДатаОплаты	= ДатаДок;
		Док.ДатаОтгрузки= ДатаДок;
		
		// заполним общие реквизиты шапки
		ЗаполнитьШапкуДокумента(Док);
		
		// заполнить состав
		Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
			ДобавитьСтрокуВсостав(Док, СчетчикЦикла, СписокКонтрагентов.ИдКолонки);
		КонецЦикла;
		
		Если Док.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(Док);
		
		// выполнить действия над документом
		ВыполнитьДействия(Док, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
	КонецЦикла;
	
	Возврат КолвоДок;
	
КонецФункции // ВыписатьЗаказПоставщику()

//******************************************************************************
// ВыписатьПоступление(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает документы ПоступлениеТМЦ
//
Функция ВыписатьПоступлениеТМЦ(ДопВидОперации, ОписаниеОш)
	
	Перем ДокСФ;
	Перем ТаблОстаткиПартий, МетодРасчетаСебестоимости;
	
	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
		Возврат -1;
	ИначеЕсли ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад.";
		Возврат -1;
	КонецЕсли;
	
	МетодРасчетаСебестоимости = Фирма.ЮрЛицо.МетодРасчетаСебестоимости.Получить(ДатаДок);
	Если ПустоеЗначение(МетодРасчетаСебестоимости)=1 Тогда
		ОписаниеОш = "Не определен метод расчета себестоимости для юр. лица """+Фирма.ЮрЛицо.Наименование+"""";
		Возврат -1;
	КонецЕсли;
	
	Док			= СоздатьОбъект("Документ.ПоступлениеТМЦ");
	КолвоДок	= 0;	// количество выписанных документов
	
	СпрПартии	= СоздатьОбъект("Справочник.Партии");
	
	ТаблРаспредПартий = СоздатьОбъект("ТаблицаЗначений");
	ТаблРаспредПартий.НоваяКолонка("ГТД");
	ТаблРаспредПартий.НоваяКолонка("СтранаПроисхождения");
	ТаблРаспредПартий.НоваяКолонка("Свойство");
	ТаблРаспредПартий.НоваяКолонка("Количество");
	
	СписокНоменклатуры	= СоздатьОбъект("СписокЗначений");
	Состав.Выгрузить(СписокНоменклатуры, 3,, "Номенклатура");
	ПолучитьОстаткиПартий(глФирмаДляОстатковТМЦ(Фирма), СписокНоменклатуры, ТаблОстаткиПартий, МетодРасчетаСебестоимости);
	// ТаблОстаткиПартий - таблица значений;
	// колонки - Фирма, Номенклатура, Партия, ДатаПартии, Количество.
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
		Док.Новый();
		Док.Склад		= Склад;
		Док.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		Док.Договор		= СписокКонтрагентов.Договор;
		Док.КодОперации	= ДопВидОперации;
		Док.ДатаОплаты	= ДатаДок;
		
		// заполним общие реквизиты шапки
		ЗаполнитьШапкуДокумента(Док);
		
		Для СчетчикЦиклаСостав = 3 По Состав.КоличествоСтрок() Цикл
			
			НоменклатураСостав = Состав.ПолучитьЗначение(СчетчикЦиклаСостав, "Номенклатура");
			ОстПогКоличество = Число(Состав.ПолучитьЗначение(СчетчикЦиклаСостав, СписокКонтрагентов.ИдКолонки));
			
	        ТаблРаспредПартий.УдалитьСтроки();
		    НачНомерСтроки = 0;
		    Если ТаблОстаткиПартий.НайтиЗначение(НоменклатураСостав, НачНомерСтроки, "Номенклатура") = 1 Тогда
				
				// Заполним таблицу распределения партий
				КоличествоСтрокТаблОстаткиПартий = ТаблОстаткиПартий.КоличествоСтрок();
				Для СчетчикЦиклаПартии = НачНомерСтроки По КоличествоСтрокТаблОстаткиПартий Цикл
					
					ТаблОстаткиПартий.ПолучитьСтрокуПоНомеру(СчетчикЦиклаПартии);
					
					Если (ОстПогКоличество<=0) или (НоменклатураСостав <> ТаблОстаткиПартий.Номенклатура)  Тогда
						Прервать;    
					КонецЕсли;
					
					Если ТаблОстаткиПартий.Количество<=0 Тогда
						Продолжить;
					КонецЕсли;
					
					ПогКоличество = Мин(ТаблОстаткиПартий.Количество, ОстПогКоличество);
					
					ТекПартия = ТаблОстаткиПартий.Партия;
					ТаблРаспредПартий.НоваяСтрока();
					ТаблРаспредПартий.ГТД                 = ТекПартия.ГТД;
					ТаблРаспредПартий.СтранаПроисхождения = ТекПартия.СтранаПроисхождения;
					ТаблРаспредПартий.Свойство            = ТекПартия.Свойство;
					ТаблРаспредПартий.Количество          = ПогКоличество;
					
					// "Спишем" из таблицы остатков партий распределенное количество
					ТаблОстаткиПартий.НоваяСтрока();
					ТаблОстаткиПартий.Фирма        = ТаблОстаткиПартий.ПолучитьЗначение(СчетчикЦиклаПартии, "Фирма");
					ТаблОстаткиПартий.Номенклатура = ТаблОстаткиПартий.ПолучитьЗначение(СчетчикЦиклаПартии, "Номенклатура");
					ТаблОстаткиПартий.Партия       = ТаблОстаткиПартий.ПолучитьЗначение(СчетчикЦиклаПартии, "Партия");
					ТаблОстаткиПартий.ДатаПартии   = ТаблОстаткиПартий.ПолучитьЗначение(СчетчикЦиклаПартии, "ДатаПартии");
					ТаблОстаткиПартий.Количество   = -ПогКоличество;
					
					ОстПогКоличество = ОстПогКоличество - ПогКоличество;
					
				КонецЦикла;
				
		    КонецЕсли;
				
			// Добавим нераспределившееся по партиям количество
			Если ОстПогКоличество > 0 Тогда
				ТаблРаспредПартий.НоваяСтрока();
				ТаблРаспредПартий.ГТД                 = ПолучитьПустоеЗначение("Справочник.ГТД");
				ТаблРаспредПартий.СтранаПроисхождения = ПолучитьПустоеЗначение("Справочник.ОКСМ");
				ТаблРаспредПартий.Свойство            = ПолучитьПустоеЗначение("Справочник.ЗначенияСвойств");
				ТаблРаспредПартий.Количество = ОстПогКоличество;
			КонецЕсли;
			
			ТаблРаспредПартий.Свернуть("ГТД, СтранаПроисхождения, Свойство", "Количество");
			
			// Добавим строки в документ
			ТаблРаспредПартий.ВыбратьСтроки();
			Пока ТаблРаспредПартий.Получитьстроку()  = 1 Цикл
				
				ДобавитьСтрокуВСоставСКоличеством(Док, СчетчикЦиклаСостав, ТаблРаспредПартий.Количество);
				Док.ВидТМЦ	= Перечисление.ВидыТМЦ.Товар;
				
				// Создаем партию
				СпрПартии.ИспользоватьВладельца(Док.Номенклатура);
				СпрПартии.Новый();
				СпрПартии.ГТД                 = ТаблРаспредПартий.ГТД;
				СпрПартии.СтранаПроисхождения = ТаблРаспредПартий.СтранаПроисхождения;
				СпрПартии.Свойство            = ТаблРаспредПартий.Свойство;
				СпрПартии.Записать();
				Док.Партия = СпрПартии.ТекущийЭлемент();
				
			КонецЦикла;
		
		КонецЦикла; // Цикл по номенклатуре
		
		ПодготовитьТаблицуОстаткиПартий(ТаблОстаткиПартий, МетодРасчетаСебестоимости);
		
		Если Док.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(Док);
		
		// выполнить действия над документом
		ВыполнитьДействия(Док, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		
		// счет-фактура
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьПолученныйСФ(ДокСФ, Док.ТекущийДокумент());
			ВыполнитьДействия(ДокСФ, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолвоДок;
	
КонецФункции // ВыписатьПоступление()

//******************************************************************************
// ПроверкаЗаполненияКонтрагентовВсоставе(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш - через параметр возвращается строка, в которой написано, для какой
//               фирмы не укзан договор (контрагент)
//
// Возвращаемое значение:
//  1 - для всех фирм в составе указаны договора (контрагенты), 0 - нет
//
// Описание:
//  Проверят, чтобы для всех фирм в составе были указаны контрагенты и договоры
//
Функция ПроверкаЗаполненияКонтрагентовВсоставе(ОписаниеОш)
	Рез = 1;
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
	    Если ПустоеЗначение(СписокКонтрагентов.Договор) = 1 Тогда
	        Рез = 0;
			ОписаниеОш	= "Для фирмы """ + СписокКонтрагентов.Фирма +
			              """ не выбран контрагент";
			Прервать;
	    КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции // ПроверкаЗаполненияКонтрагентовВсоставе()

//******************************************************************************
// ЗаполнитьСоставПоступленияПоОтгрузке(ДокПоступление, ДокОтгрузка)
//
// Параметры: 
//  ДокПоступление	- документ поступления
//  ДокОтгрузка		- документ отгрузки
//
// Возвращаемое значение:
//  1 - операция выполнена успешно, 0 - произошла ошибка
//
// Описание:
//  Заполняет состав документа поступления на основании движения документа
//  отгрузки с учетом ГТД, страны происхождения и свойства
//
Функция ЗаполнитьСоставПоступленияПоОтгрузке(ДокПоступление, ДокОтгрузка)
	
	ТабПартий	= СоздатьОбъект("ТаблицаЗначений");
	ДокПоступление.ВыгрузитьТабличнуюЧасть(ТабПартий);   
	
	ТабПартий.НоваяКолонка("ГТД", "Справочник.ГТД");
	ТабПартий.НоваяКолонка("СтранаПроисхождения", "Справочник.ОКСМ");
	ТабПартий.НоваяКолонка("Свойство", "Справочник.ЗначенияСвойств");
	
	ДокОтгрузка.ВыбратьСтроки();
	
	ТабДвижений = СоздатьОбъект("ТаблицаЗначений");
	ТабДвижений.НоваяКолонка("НомСтроки", "Число", 19, 3);
	ТабДвижений.НоваяКолонка("Количество", "Число", 19, 3);
	ТабДвижений.НоваяКолонка("ГТД", "Справочник.ГТД");
	ТабДвижений.НоваяКолонка("СтранаПроисхождения", "Справочник.ОКСМ");
	ТабДвижений.НоваяКолонка("Свойство", "Справочник.ЗначенияСвойств");
	
	РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");
	РегПартии.ВыбратьДвиженияДокумента(ДокОтгрузка.ТекущийДокумент());
	Пока РегПартии.ПолучитьДвижение()=1 Цикл   
		ТабДвижений.НоваяСтрока();  
		ТабДвижений.НомСтроки			= РегПартии.НомерСтроки();
		ТабДвижений.Количество			= РегПартии.Количество;
		ТабДвижений.ГТД					= РегПартии.Партия.ГТД;
		ТабДвижений.СтранаПроисхождения	= РегПартии.Партия.СтранаПроисхождения;
		ТабДвижений.Свойство			= РегПартии.Партия.Свойство;
	КонецЦикла;
	ТабДвижений.Свернуть("НомСтроки, ГТД, СтранаПроисхождения, Свойство", "Количество");

	Пока ДокОтгрузка.ПолучитьСтроку() = 1 Цикл                           
		// Посчитаем количество строк по данной строке документа в таблице движений
		КолСтрок = 0;                                                              
		ТабДвижений.ВыбратьСтроки();
		Пока ТабДвижений.ПолучитьСтроку() = 1 Цикл
			Если ТабДвижений.НомСтроки = ДокОтгрузка.НомерСтроки Тогда
				КолСтрок = КолСтрок + 1;
			КонецЕсли;
		КонецЦикла;
		
		// Если в таблице движений больше одной строки, то придется разбивать
		// по ГТД и стране происхождения
		Если КолСтрок > 1 Тогда       
			ОстСумма = ДокОтгрузка.Сумма;
			ОстНДС 	 = ДокОтгрузка.СуммаНДС;
			ОстНП 	 = ДокОтгрузка.СуммаНП;
			Для Счетчик = 1 по ТабДвижений.КоличествоСтрок() Цикл   
				ТабДвижений.ПолучитьСтрокуПоНомеру(Счетчик);
				Если ТабДвижений.НомСтроки <> ДокОтгрузка.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				ТабПартий.НоваяСтрока();
				ТабПартий.Номенклатура	= ДокОтгрузка.Номенклатура;
				ТабПартий.Количество	= ТабДвижений.Количество;                 
				ТабПартий.Единица		= ДокОтгрузка.Единица;
				ТабПартий.Коэффициент	= ДокОтгрузка.Коэффициент;
				ТабПартий.Цена			= ДокОтгрузка.Цена;
				ТабПартий.Сумма			= ?(Счетчик = ТабДвижений.КоличествоСтрок(), ОстСумма, ДокОтгрузка.Сумма * ТабДвижений.Количество/(ДокОтгрузка.Количество*ДокОтгрузка.Коэффициент));
				ТабПартий.СуммаНДС		= ?(Счетчик = ТабДвижений.КоличествоСтрок(), ОстНДС, ДокОтгрузка.СуммаНДС * ТабДвижений.Количество/(ДокОтгрузка.Количество*ДокОтгрузка.Коэффициент));
				ТабПартий.СуммаНП		= ?(Счетчик = ТабДвижений.КоличествоСтрок(), ОстНП, ДокОтгрузка.СуммаНП * ТабДвижений.Количество/(ДокОтгрузка.Количество*ДокОтгрузка.Коэффициент));
				ТабПартий.СтавкаНДС		= ДокОтгрузка.СтавкаНДС;
				ТабПартий.СтавкаНП		= ДокОтгрузка.СтавкаНП;  
				ТабПартий.ГТД			= ТабДвижений.ГТД;
				ТабПартий.СтранаПроисхождения = ТабДвижений.СтранаПроисхождения;
				ТабПартий.Свойство		= ТабДвижений.Свойство;
				
				ОстСумма	= ОстСумма - ТабПартий.Сумма;
				ОстНДС		= ОстНДС - ТабПартий.СуммаНДС;
				ОстНП		= ОстНП - ТабПартий.СуммаНП;
			КонецЦикла;
		Иначе                           
			// Если в таблице движений только одна сторока или меньше можно
			// копировать строку документа реализации без изменений
			ТабПартий.НоваяСтрока();
			ТабПартий.Номенклатура	= ДокОтгрузка.Номенклатура;
			ТабПартий.Количество	= ДокОтгрузка.Количество;                 
			ТабПартий.Единица		= ДокОтгрузка.Единица;
			ТабПартий.Коэффициент	= ДокОтгрузка.Коэффициент;
			ТабПартий.Цена			= ДокОтгрузка.Цена;
			ТабПартий.СтавкаНДС		= ДокОтгрузка.СтавкаНДС;
			ТабПартий.СтавкаНП		= ДокОтгрузка.СтавкаНП;  
			ТабПартий.Сумма			= ДокОтгрузка.Сумма;
			ТабПартий.СуммаНДС		= ДокОтгрузка.СуммаНДС;
			ТабПартий.СуммаНП		= ДокОтгрузка.СуммаНП;             
			
			// Если строка в таблице движений есть, надо запомнимть ГТД и 
			// страну происхождения для формирования партии
			ТабДвижений.ВыбратьСтроки();
			Пока ТабДвижений.ПолучитьСтроку() = 1 Цикл
				Если ТабДвижений.НомСтроки <> ДокОтгрузка.НомерСтроки Тогда
					Продолжить;
				КонецЕсли;
				ТабПартий.ГТД					= ТабДвижений.ГТД;
				ТабПартий.СтранаПроисхождения	= ТабДвижений.СтранаПроисхождения;
				ТабПартий.Свойство				= ТабДвижений.Свойство;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;   

	ТабПартий.Свернуть("Номенклатура, Количество, Цена, Единица, Коэффициент, СтавкаНДС, СтавкаНП, ГТД, СтранаПроисхождения, Свойство",
						"Сумма, СуммаНДС, СуммаНП, Партия");
    
	СпрПартий = СоздатьОбъект("Справочник.Партии");
	
	ТабПартий.ВыбратьСтроки();
	Пока ТабПартий.ПолучитьСтроку() = 1 Цикл
		Попытка  
			СпрПартий.ИспользоватьВладельца(ТабПартий.Номенклатура);
			СпрПартий.Новый();
			СпрПартий.ГТД					= ТабПартий.ГТД;
			СпрПартий.СтранаПроисхождения	= ТабПартий.СтранаПроисхождения;
			СпрПартий.Свойство				= ТабПартий.Свойство;
			
			СпрПартий.Записать();
			
			ТабПартий.Партия				= СпрПартий.ТекущийЭлемент();
		Исключение
			ОписаниеОш	= ОписаниеОшибки();
			Возврат 0;
		КонецПопытки;
	КонецЦикла;
	
	ДокПоступление.ЗагрузитьТабличнуюЧасть(ТабПартий);
	
	// Установим вид ТМЦ
	ДокПоступление.ВыбратьСтроки();
	Пока ДокПоступление.ПолучитьСтроку() = 1 Цикл
	    ДокПоступление.ВидТМЦ	= Перечисление.ВидыТМЦ.Товар;
	КонецЦикла;
	
КонецФункции // ЗаполнитьСоставПоступленияПоОтгрузке()

//******************************************************************************
// ВыписатьПокупкуУфирмы(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает парные документы Реализация и ПоступлениеТМЦ по операции
//  "Покупка у собственной фирмы"
//
Функция ВыписатьПокупкуУфирмы(ДопВидОперации, ОписаниеОш)
	Перем ДокСФВыдан, ДокСФПолуч;
	
	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
	    Предупреждение(ОписаниеОш, 60);
		Возврат -1;
	ИначеЕсли ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад.";
		Возврат -1;
	ИначеЕсли ПустоеЗначение(КонтрагентФирмы) = 1 Тогда
	    ОписаниеОш	= "Не выбран контрагент.";
		Возврат -1;
	ИначеЕсли ПустоеЗначение(ДоговорФирмы) = 1 Тогда
	    ОписаниеОш	= "Не выбран договор контрагента.";
		Возврат -1;
	ИначеЕсли ПроверкаЗаполненияКонтрагентовВсоставе(ОписаниеОш) = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	КолвоДок		= 0;	// количество выписанных документов
	
	ДокПоступление	= СоздатьОбъект("Документ.ПоступлениеТМЦ");
	ДокОтгрузка		= СоздатьОбъект("Документ.Реализация");
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл

		ДокОтгрузка.Новый();
		ДокОтгрузка.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(СписокКонтрагентов.Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
		ДокОтгрузка.ДатаДок		= ДатаДок;
		
		ДокОтгрузка.Фирма		= СписокКонтрагентов.Фирма;
		ДокОтгрузка.ЮрЛицо		= СписокКонтрагентов.Фирма.ЮрЛицо;
		ДокОтгрузка.Склад		= Склад;
		ДокОтгрузка.Проект		= Проект;
		
		ДокОтгрузка.Контрагент	= КонтрагентФирмы;
		ДокОтгрузка.Договор		= ДоговорФирмы;
		ДокОтгрузка.КодОперации	= глКО.Продажа;
		ДокОтгрузка.ДатаОплаты	= ДатаДок;
		
		ДокОтгрузка.Валюта		= Валюта;
		ДокОтгрузка.Курс		= Курс;
		ДокОтгрузка.УчитыватьНДС= УчитыватьНДС;
		ДокОтгрузка.СуммаВклНДС	= СуммаВклНДС;
		ДокОтгрузка.УчитыватьНП	= УчитыватьНП;
		ДокОтгрузка.СуммаВклНП	= СуммаВклНП;
		ДокОтгрузка.ТипЦен		= ТипЦен;
		
		ДокПоступление.Новый();
		ДокПоступление.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
		ДокПоступление.ДатаДок		= ДатаДок;
		
		ДокПоступление.НомерДокВходящий	= ДокОтгрузка.НомерДок;
		ДокПоступление.ДатаДокВходящий	= ДокОтгрузка.ДатаДок;
		
		ДокПоступление.Фирма		= Фирма;
		ДокПоступление.ЮрЛицо		= Фирма.ЮрЛицо;
		ДокПоступление.Склад		= Склад;
		ДокПоступление.Проект		= Проект;
		
		ДокПоступление.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		ДокПоступление.Договор		= СписокКонтрагентов.Договор;
		ДокПоступление.КодОперации	= глКО.Закупка;
		ДокПоступление.ДатаОплаты	= ДатаДок;
		
		ДокПоступление.Валюта		= Валюта;
		ДокПоступление.Курс			= Курс;
		ДокПоступление.УчитыватьНДС	= УчитыватьНДС;
		ДокПоступление.СуммаВклНДС	= СуммаВклНДС;
		ДокПоступление.УчитыватьНП	= УчитыватьНП;
		ДокПоступление.СуммаВклНП	= СуммаВклНП;
		ДокПоступление.ТипЦен		= ТипЦен;
		
		// заполнить состав
		Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
			Если ФлагПровести = 0 Тогда
				// заполняем состав поступления, только если не установлен флаг проведения
				Если ДобавитьСтрокуВсостав(ДокПоступление, СчетчикЦикла, СписокКонтрагентов.ИдКолонки) = 1 Тогда
					// строка добавлена
					ДокПоступление.ВидТМЦ	= Перечисление.ВидыТМЦ.Товар;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьСтрокуВсостав(ДокОтгрузка, СчетчикЦикла, СписокКонтрагентов.ИдКолонки) = 1 Тогда
			КонецЕсли;
		КонецЦикла;
		
		Если ДокОтгрузка.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		
		УстановитьСуммуВзаиморасчетов(ДокОтгрузка);
		
		ВыполнитьДействия(ДокОтгрузка, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьВыданныйСФ(ДокСФВыдан, ДокОтгрузка.ТекущийДокумент());
			ВыполнитьДействия(ДокСФВыдан, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
		
		Если ФлагПровести = 1 Тогда
			ЗаполнитьСоставПоступленияПоОтгрузке(ДокПоступление, ДокОтгрузка);
		КонецЕсли;
			
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(ДокПоступление);
		ВыполнитьДействия(ДокПоступление, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьПолученныйСФ(ДокСФПолуч, ДокПоступление.ТекущийДокумент());
			ДокСФПолуч.НомерДокВходящий	= ДокСФВыдан.НомерДок;
			ВыполнитьДействия(ДокСФПолуч, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолвоДок;
	
КонецФункции // ВыписатьПокупкуУфирмы()

//******************************************************************************
// ВыписатьПродажуФирме(ДопВидОперации, ОписаниеОш)
//
// Параметры: 
//  ДопВидОперации	- дополнительный вид операции
//  ОписаниеОш		- описание ошибки
//
// Возвращаемое значение:
//  -1, если не заполнены нужные реквизиты или количество выписанных документов
//
// Описание:
//  Выписывает парные документы Реализация и ПоступлениеТМЦ по операции
//  "Продажа собственной фирме"
//
Функция ВыписатьПродажуФирме(ДопВидОперации, ОписаниеОш)
	Перем ДокСФВыдан, ДокСФПолуч;
	
	Если ПроверкаЗаполненияРеквизитовШапки(ОписаниеОш) = 0 Тогда
		Возврат -1;
	ИначеЕсли ПустоеЗначение(Склад) = 1 Тогда
	    ОписаниеОш	= "Не выбран склад.";
		Возврат -1;
	ИначеЕсли ПустоеЗначение(КонтрагентФирмы) = 1 Тогда
	    ОписаниеОш	= "Не выбран контрагент.";
		Возврат -1;
	ИначеЕсли ПустоеЗначение(ДоговорФирмы) = 1 Тогда
	    ОписаниеОш	= "Не выбран договор контрагента.";
		Возврат -1;
	ИначеЕсли ПроверкаЗаполненияКонтрагентовВсоставе(ОписаниеОш) = 0 Тогда
		Возврат -1;
	КонецЕсли;
	
	КолвоДок		= 0;	// количество выписанных документов
	
	ДокПоступление	= СоздатьОбъект("Документ.ПоступлениеТМЦ");
	ДокОтгрузка		= СоздатьОбъект("Документ.Реализация");
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл

		// заполнение шапки документа отгрузки
		ДокОтгрузка.Новый();
		ДокОтгрузка.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
		ДокОтгрузка.ДатаДок		= ДатаДок;
		
		ДокОтгрузка.Фирма		= Фирма;
		ДокОтгрузка.ЮрЛицо		= Фирма.ЮрЛицо;
		ДокОтгрузка.Склад		= Склад;
		ДокОтгрузка.Проект		= Проект;
		
		ДокОтгрузка.Контрагент	= СписокКонтрагентов.Договор.Владелец;
		ДокОтгрузка.Договор		= СписокКонтрагентов.Договор;
		ДокОтгрузка.КодОперации	= глКО.Продажа;
		ДокОтгрузка.ДатаОплаты	= ДатаДок;
		
		ДокОтгрузка.Валюта		= Валюта;
		ДокОтгрузка.Курс		= Курс;
		ДокОтгрузка.УчитыватьНДС= УчитыватьНДС;
		ДокОтгрузка.СуммаВклНДС	= СуммаВклНДС;
		ДокОтгрузка.УчитыватьНП	= УчитыватьНП;
		ДокОтгрузка.СуммаВклНП	= СуммаВклНП;
		ДокОтгрузка.ТипЦен		= ТипЦен;
		
		ДокПоступление.Новый();
		ДокПоступление.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + СокрЛП(СписокКонтрагентов.Фирма.ЮрЛицо.ПрефиксНомеровДокументов));
		ДокПоступление.ДатаДок		= ДатаДок;

		ДокПоступление.НомерДокВходящий	= ДокОтгрузка.НомерДок;
		ДокПоступление.ДатаДокВходящий	= ДокОтгрузка.ДатаДок;
		
		ДокПоступление.Фирма		= СписокКонтрагентов.Фирма;
		ДокПоступление.ЮрЛицо		= СписокКонтрагентов.Фирма.ЮрЛицо;
		ДокПоступление.Склад		= Склад;
		ДокПоступление.Проект		= Проект;
		
		ДокПоступление.Контрагент	= КонтрагентФирмы;
		ДокПоступление.Договор		= ДоговорФирмы;
		ДокПоступление.КодОперации	= глКО.Закупка;
		ДокПоступление.ДатаОплаты	= ДатаДок;
		
		ДокПоступление.Валюта		= Валюта;
		ДокПоступление.Курс			= Курс;
		ДокПоступление.УчитыватьНДС	= УчитыватьНДС;
		ДокПоступление.СуммаВклНДС	= СуммаВклНДС;
		ДокПоступление.УчитыватьНП	= УчитыватьНП;
		ДокПоступление.СуммаВклНП	= СуммаВклНП;
		ДокПоступление.ТипЦен		= ТипЦен;
		
		// заполнить состав
		Для СчетчикЦикла = 3 По Состав.КоличествоСтрок() Цикл
			Если ФлагПровести = 0 Тогда
				// заполняем состав поступления, только если не установлен флаг проведения
				Если ДобавитьСтрокуВсостав(ДокПоступление, СчетчикЦикла, СписокКонтрагентов.ИдКолонки) = 1 Тогда
					// строка добавлена
					ДокПоступление.ВидТМЦ	= Перечисление.ВидыТМЦ.Товар;
				КонецЕсли;
			КонецЕсли;
			
			Если ДобавитьСтрокуВсостав(ДокОтгрузка, СчетчикЦикла, СписокКонтрагентов.ИдКолонки) = 1 Тогда
			КонецЕсли;
		КонецЦикла;
		
		// заполняем состав поступления на основе движений отгрузки
		Если ДокОтгрузка.КоличествоСтрок() = 0 Тогда
		    // если количество строк = 0, то не сохраняем документ
			Продолжить;
		КонецЕсли;
		
		УстановитьСуммуВзаиморасчетов(ДокОтгрузка);
		
		ВыполнитьДействия(ДокОтгрузка, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьВыданныйСФ(ДокСФВыдан, ДокОтгрузка.ТекущийДокумент());
			ВыполнитьДействия(ДокСФВыдан, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
		
		Если ФлагПровести = 1 Тогда
			ЗаполнитьСоставПоступленияПоОтгрузке(ДокПоступление, ДокОтгрузка);
		КонецЕсли;
			
		КолвоДок	= КолвоДок + 1;
		
		УстановитьСуммуВзаиморасчетов(ДокПоступление);
		ВыполнитьДействия(ДокПоступление, ФлагПоказать, ФлагПровести, ФлагНапечатать, КолвоЭкз);
		
		Если ФлагВыписатьСФ = 1 Тогда
			ВыписатьПолученныйСФ(ДокСФПолуч, ДокПоступление.ТекущийДокумент());
			ДокСФПолуч.НомерДокВходящий	= ДокСФВыдан.НомерДок;
			ВыполнитьДействия(ДокСФПолуч, ФлагПоказатьСФ, ФлагПровестиСФ, ФлагНапечататьСФ, КолвоЭкзСФ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КолвоДок;

КонецФункции // ВыписатьПродажуФирме()

//******************************************************************************
// ПоКнопкеВыполнить()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается по кнопки выполнить
//
Процедура ПоКнопкеВыполнить()
	Перем ОписаниеОш;
	
	Если Состав.КоличествоСтрок() < 3 Тогда
	    Предупреждение("Состав не заполнен!", 60);
		Возврат;
	КонецЕсли;
	
	Если СписокКонтрагентов.КоличествоСтрок() = 0 Тогда
	    Предупреждение("Не выбраны контрагенты!", 60);
		Возврат;
	КонецЕсли;
	
	Поз	= НайтиОперацию(СписокВидовДок.ПолучитьЗначение(СписокВидовДок.ТекущаяСтрока()));
	
	// получим параметры операции
	ВидОперации		= ПолучитьПараметрОперации(Поз, "ВидОперации");
	ДопВидОперации	= ПолучитьПараметрОперации(Поз, "ДопВидОперации");
	
	// проверим заполнение общих обязательных реквизитов
	
	// вызов процедуры заполнения
	Если ВидОперации = "Реализация" Тогда
	    Рез	= ВыписатьРеализацию(ДопВидОперации, ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаявкаПокупателя" Тогда
	    Рез	= ВыписатьЗаявкуПокупателя(ДопВидОперации, ОписаниеОш);
	ИначеЕсли ВидОперации = "ЗаказПоставщику" Тогда
	    Рез	= ВыписатьЗаказпоставщику(ДопВидОперации, ОписаниеОш);
	ИначеЕсли ВидОперации = "ПоступлениеТМЦ" Тогда
	    Рез	= ВыписатьПоступлениеТМЦ(ДопВидОперации, ОписаниеОш);
	ИначеЕсли ВидОперации = "ПокупкаУфирмы" Тогда
	    Рез	= ВыписатьПокупкуУфирмы(ДопВидОперации, ОписаниеОш);
	ИначеЕсли ВидОперации = "ПродажаФирме" Тогда
	    Рез	= ВыписатьПродажуФирме(ДопВидОперации, ОписаниеОш);
	КонецЕсли;
	
	Если Рез = -1 Тогда
		// Произошла ошибка. Видимо не заполнен какой-то реквизит
		Предупреждение(ОписаниеОш, 60);
	ИначеЕсли  Рез = 0 Тогда
		// номенклатура не распределана между контрагентами
		Предупреждение("Распределение номенклатуры не заполнено!" , 60);
	Иначе
		Предупреждение("Формирование документов завершено!", 60);
	КонецЕсли;

КонецПроцедуры // ПоКнопкеВыполнить()

//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Выводит на печать таблицу значений состав
//
Процедура ПоКнопкеПечать()
	
	Табл = СоздатьОбъект("Таблица");
	Табл.ИсходнаяТаблица("Таблица");
	
	КолвоФиксСтрок	= 0;
	
	// Выводим заголовок
	ТекОперация	= ТекущаяОперация();
	Поз			= НайтиОперацию(ТекОперация);
	Направление	= ПолучитьПараметрОперации(Поз, "Направление");
	ВидОперации	= ПолучитьПараметрОперации(Поз, "ВидОперации");
	
	ЗаголовокПечФормы	= "Распределение " + ?(Направление = "+", "нехватки", "остатков") + " по операции " + ТекОперация;
	Табл.ВывестиСекцию("Заголовок|Основа");
	КолвоФиксСтрок	= КолвоФиксСтрок + Табл.ВысотаСекции("Заголовок|Основа");
	
	// формируем шапку
	
	Табл.ВывестиСекцию("Шапка|Основа");
	КолвоФиксСтрок	= КолвоФиксСтрок + Табл.ВысотаСекции("Шапка|Основа");
	
	СписокКонтрагентов.ВыбратьСтроки();
	Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
		Если (ВидОперации = "ПродажаФирме")
		 ИЛИ (ВидОперации = "ПокупкаУфирмы")
		Тогда
			ИмяОбъекта	= СокрЛП(СписокКонтрагентов.Фирма);
		Иначе
			ИмяОбъекта	= СокрЛП(СписокКонтрагентов.Договор.Владелец.Наименование) + 
			              " (" + СокрЛП(СписокКонтрагентов.Договор.Наименование) + ")";
		КонецЕсли;
		
		Табл.ПрисоединитьСекцию("Шапка|Контрагент");
	КонецЦикла;
	
	// формируем состав
	Для ТекСтрока = 3 По Состав.КоличествоСтрок() Цикл
	    Состав.ПолучитьСтрокуПоНомеру(ТекСтрока);
		Табл.ВывестиСекцию("Строка|Основа");
		
		СписокКонтрагентов.ВыбратьСтроки();
		Пока СписокКонтрагентов.ПолучитьСтроку() = 1 Цикл
			ИдКолонки	= СписокКонтрагентов.ИдКолонки;
			КолвоКонтр 	= глФРМКоличество(Состав.ПолучитьЗначение(ТекСтрока, ИдКолонки),,"");
			Табл.ПрисоединитьСекцию("Строка|Контрагент");
		КонецЦикла;
	КонецЦикла;
	
	Табл.ТолькоПросмотр(1);
	Табл.Опции(0, 0, КолвоФиксСтрок, НомПервойКолоноки - 2, "Опции_ПакетныйВвод","Опции_ПакетныйВвод" , , );
	Табл.Показать("Распределение товаров по контрагентам");
	
КонецПроцедуры // ПоКнопкеПечать()

//******************************************************************************
// ПриИзмененииКонтрагента()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Вызывается после выбора значения в реквизите формы КонтрагентФирмы. Если 
//  контрагент не выбран, то очищается реквизит формы ДоговорФирмы.
//  Если 
//
Процедура ПриИзмененииКонтрагента()
	
	Если ПустоеЗначение(КонтрагентФирмы) = 1 Тогда
	    ДоговорФирмы	= "";
	Иначе
		Если ПустоеЗначение(ДоговорФирмы) = 1 Тогда
		    ДоговорФирмы	= КонтрагентФирмы.ОсновнойДоговор;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
//
//******************************************************************************
// Предопределенная процедура.
//
Процедура ВводНового()
	
	ДатаДок	= РабочаяДата();
	
	// Заполним список видов документов
	ЗаполнитьСписокВидовДок();
	
	Если ПустоеЗначение(СписокВидовДок.ТекущаяСтрока()) = 1 Тогда
		СписокВидовДок.ТекущаяСтрока(1);    
	КонецЕсли;
	
	ИнициализацияСостава();
	
	// Обновим колонки Всего и Остаток, если есть строки в таблице "Состав"
	Если Состав.КоличествоСтрок() > 2 Тогда
		ПоКнопкеОбновить();
	КонецЕсли;
	
	УправлениеДиалогом(1); // только управляем доступностью
	
	ПриСменеВалюты();
	ПриИзмененииФиксацииКолонок();
	ПриИзмененииФлагаНапечатать();
	ПриИзмененииФлагаПровести();
	
	СтараяОперация = ТекущаяОперация();
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии(ФлагЧтенияНастройки)
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ДобавитьЗначение("Параметры");
	Форма.Закладки.ДобавитьЗначение("Табличная часть");
	
	Форма.ИспользоватьСлой("Шапка,Подвал", 2);
	
	Если ФлагЧтенияНастройки = 0 Тогда
		
		Фирма	= глЗначениеПоУмолчанию("ОсновнаяФирма");
		Проект	= глЗначениеПоУмолчанию("ОсновнойПроект");
		
		Поз	= НайтиОперацию(ТекущаяОперация());
		Если ПолучитьПараметрОперации(Поз, "ЕстьСклад") = 1 Тогда
			
			Склад = глЗначениеПоУмолчанию("ОсновнойСклад");
			Если (Склад.Выбран()=1) И (Склад.РозничныйСклад = 1) Тогда
				Склад = "";
			КонецЕсли;
			
		КонецЕсли;
		
		Валюта	= глРубли;
		ПриСменеВалюты();
		
		ПриВыбореВидаОперации();
	КонецЕсли;
	
	ВидимостьСлоев(1);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаПодбора(Элемент, КонтФормы)
	
	Если Элемент.Вид() = "Номенклатура" Тогда
		ДобавитьНоменклатуру(Элемент);
	ИначеЕсли Элемент.Вид() = "Контрагенты" Тогда
	    ДобавитьКолонкуВсостав(Элемент.ОсновнойДоговор);
	ИначеЕсли Элемент.Вид() = "Фирмы" Тогда
	    ДобавитьКолонкуВсостав(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриВыбореЗакладки(НомерЗакладки)
	ВидимостьСлоев(НомерЗакладки);
КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	Перем ОписаниеОш, Контрагент;
	
	Если ИдентЭлемДиалога = "КонтрагентФирмы" Тогда
		
		ФлагСтандОбр = 0;
		Рез = ВыборКонтрагента(Контрагент, Фирма, ОписаниеОш);
		Если Рез = 1 Тогда
			КонтрагентФирмы	= Контрагент;
			ПриИзмененииКонтрагента();
		ИначеЕсли Рез = 0 Тогда
		    // не удалось выбрать конрагента
			Предупреждение(ОписаниеОш, 60);
			
		КонецЕсли;
		
	ИначеЕсли ИдентЭлемДиалога = "ДоговорФирмы" Тогда
	    
		Если ПустоеЗначение(КонтрагентФирмы) = 1 Тогда
	        // нужно сначала выбрать контрагета
			Рез	= ВыборКонтрагента(Контрагент, Фирма, ОписаниеОш);
			
			Если Рез = 1 Тогда
				КонтрагентФирмы	= Контрагент;
				
			ИначеЕсли Рез = 0 Тогда
			    // не удалось выбрать конрагента
				ФлагСтандОбр = 0;
				Предупреждение(ОписаниеОш, 60);
				
			ИначеЕсли Рез = -1 Тогда
				// отказ от выбора
				ФлагСтандОбр = 0;
				Предупреждение("Не выбран контрагент");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаВыбораЗначения(ВыбЗнач, ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "Склад" Тогда
	    Если ВыбЗнач.РозничныйСклад = 1 Тогда
            Предупреждение("Можно выбрать только оптовый склад!", 60);
			ФлагСтандОбр = 0;
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораЗначения()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаЯчейкиТаблицы(Значение, ФлагСтандОбраб, Таблица, Адрес)
	ФлагСтандОбраб	= 0;
	
	ТекОбласть	= Таблица.Область(Адрес);
	
	ТекЗнач		= Число(ТекОбласть.Текст);
	ПозРаздел	= Найти(Значение, "_");
	ТипКолонки	= Лев(Значение, ПозРаздел - 1);
	Значение	= Сред(Значение, ПозРаздел + 1);
	
	ПозРаздел	= Найти(Значение, "-");
	НомСтроки	= Число(Лев(Значение, ПозРаздел - 1));
	ИдКолонки	= Сред(Значение, ПозРаздел + 1);
	
	Если Состав.КоличествоСтрок() < Число(НомСтроки) Тогда
	    Предупреждение("Количество строк в отчете больше, чем количество строк в таблице.");
		Возврат;
	КонецЕсли;
	
	Если ТипКолонки = "цена" Тогда
		
		Если ВвестиЧисло(ТекЗнач, "Введите цену", 15, 2, 60) = 1 Тогда
			// пропишем цену в ячейке таблицы отчета
		    ТекОбласть.Текст	= глФРМ(ТекЗнач,,,"");
			
			// внесем изменения в состав
			Состав.УстановитьЗначение(НомСтроки, "Цена", глФРМ(ТекЗнач,,,""));
			
			Таблица.Показать("Распределение товаров по контрагентам");
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "конт" Тогда
		
		Если ВвестиЧисло(ТекЗнач, "Введите количество", 14, 3, 60) = 1 Тогда
			ТекОбласть.Текст	= глФРМКоличество(ТекЗнач,,"");
			
			// внесем изменения в состав
			Состав.УстановитьЗначение(НомСтроки, ИдКолонки, глФРМКоличество(ТекЗнач,,""));
			РасчетОстаткаПоСтроке(НомСтроки);
			
			// пропишем остаток в ячейке таблицы отчета
			ОстОбласть	= Таблица.Область("R" + Сред(Адрес, 2, Найти(Адрес, "C") - 2) + "C4");
			ОстОбласть.Текст	= Состав.ПолучитьЗначение(НомСтроки, "Остаток");
			
			Таблица.Показать("Распределение товаров по контрагентам");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЯчейкиТаблицы()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
// номер колонки. с которой начинаются контрагенты
НомПервойКолоноки = 7;

ВидыОпераций = СоздатьОбъект("ТаблицаЗначений");
ВидыОпераций.НоваяКолонка("Операция");				// Представление операции в поле со списком
ВидыОпераций.НоваяКолонка("ВидОперации");			// вид операции
ВидыОпераций.НоваяКолонка("ДопВидОперации");		// доплнительный вид операции
ВидыОпераций.НоваяКолонка("ЕстьСклад"				, "Число"	, 1);   // 1 - в документе есть реквизит Склад, 0 - нет
ВидыОпераций.НоваяКолонка("Направление"				, "Строка"	, 1);	// поступление или отгрузка ("+" или "-")
ВидыОпераций.НоваяКолонка("ЕстьСФ"					, "Число"	, 1);   // 1 - выписывается СФ, 0 - нет
ВидыОпераций.НоваяКолонка("УчетРезерваПоДоговрам"	, "Число"	, 1);	// 1 - флаг Рерервы доступен, 0 - нет
ВидыОпераций.НоваяКолонка("УчетЗаказов"				, "Число"	, 1);	// 1 - флаг Заказы доступен, 0 - нет
ВидыОпераций.НоваяКолонка("ЕстьСкидка"				, "Число"	, 1);	// 1 - поле Скидка достуано, 0 - нет
ВидыОпераций.НоваяКолонка("ОбъектыРаспределения"	, "Строка"	   );	// "Фирмы", "Контаргенты"

// Реализауия (купля-продажа)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= глКО.Продажа;
ВидыОпераций.ВидОперации			= "Реализация";
ВидыОпераций.ДопВидОперации			= глКО.Продажа;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 1;
ВидыОпераций.УчетРезерваПоДоговрам	= 1;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 1;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Реализауия (комиссия)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= глКО.ПередачаНаРеализацию;
ВидыОпераций.ВидОперации			= "Реализация";
ВидыОпераций.ДопВидОперации			= глКО.ПередачаНаРеализацию;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 0;
ВидыОпераций.УчетРезерваПоДоговрам	= 1;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 1;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Заявка (неподтвержденная)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
ВидыОпераций.ВидОперации			= "ЗаявкаПокупателя";
ВидыОпераций.ДопВидОперации			= Перечисление.ВидыОперацийЗаявок.Неподтвержденная;
ВидыОпераций.ЕстьСклад				= 0;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 0;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 1;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Заявка (на поставку)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= Перечисление.ВидыОперацийЗаявок.НаПоставку;
ВидыОпераций.ВидОперации			= "ЗаявкаПокупателя";
ВидыОпераций.ДопВидОперации			= Перечисление.ВидыОперацийЗаявок.НаПоставку;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 0;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 1;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Заявка (на склад)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= Перечисление.ВидыОперацийЗаявок.НаСклад;
ВидыОпераций.ВидОперации			= "ЗаявкаПокупателя";
ВидыОпераций.ДопВидОперации			= Перечисление.ВидыОперацийЗаявок.НаСклад;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 0;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 1;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Заказ поставщику
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= "Заказ поставщику";
ВидыОпераций.ВидОперации			= "ЗаказПоставщику";
ВидыОпераций.ДопВидОперации			= "";
ВидыОпераций.ЕстьСклад				= 0;
ВидыОпераций.Направление			= "+";
ВидыОпераций.ЕстьСФ					= 0;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 1;
ВидыОпераций.ЕстьСкидка				= 0;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Поступление ТМЦ (купля продажа)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= глКО.Закупка;
ВидыОпераций.ВидОперации			= "ПоступлениеТМЦ";
ВидыОпераций.ДопВидОперации			= глКО.Закупка;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "+";
ВидыОпераций.ЕстьСФ					= 1;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 0;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Поступление ТМЦ (комиссия)
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= глКО.ПриемНаРеализацию;
ВидыОпераций.ВидОперации			= "ПоступлениеТМЦ";
ВидыОпераций.ДопВидОперации			= глКО.ПриемНаРеализацию;
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "+";
ВидыОпераций.ЕстьСФ					= 1;
ВидыОпераций.УчетРезерваПоДоговрам	= 0;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 0;
ВидыОпераций.ОбъектыРаспределения	= "Контрагенты";

// Покупка у собственной фирмы
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= "Покупка у собственной фирмы";
ВидыОпераций.ВидОперации			= "ПокупкаУфирмы";
ВидыОпераций.ДопВидОперации			= "";
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "+";
ВидыОпераций.ЕстьСФ					= 1;
ВидыОпераций.УчетРезерваПоДоговрам	= 1;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 0;
ВидыОпераций.ОбъектыРаспределения	= "Фирмы";

// продажа собственной фирме
ВидыОпераций.НоваяСтрока();
ВидыОпераций.Операция				= "Продажа собственной фирме";
ВидыОпераций.ВидОперации			= "ПродажаФирме";
ВидыОпераций.ДопВидОперации			= "";
ВидыОпераций.ЕстьСклад				= 1;
ВидыОпераций.Направление			= "-";
ВидыОпераций.ЕстьСФ					= 1;
ВидыОпераций.УчетРезерваПоДоговрам	= 1;
ВидыОпераций.УчетЗаказов			= 0;
ВидыОпераций.ЕстьСкидка				= 0;
ВидыОпераций.ОбъектыРаспределения	= "Фирмы";