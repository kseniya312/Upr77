////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем ТаблицаДокументов, ОбязательныеАтрибуты, АтрибутыДокументов, ВидыОпераций;
Перем НачДатаВыгрузки, КонДатаВыгрузки;
Перем ЗагрРасчетныеСчета, ЗагрВидыДокументов, ЗагрДокументы;
Перем НачДатаЗагрузки, КонДатаЗагрузки;
Перем ЗагруженаТаблица; 
Перем КолонкаПоследнейСортировки;  
Перем СтрокаПоследнегоОтображения; 
Перем СписокРасчетныхСчетовФирмы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//    
Функция ИзменитьАтрибут(Объект, Имя, Значение) Далее

Процедура ЗаписатьДокумент(Объект) Далее

//******************************************************************************
// ПолучитьИНН(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение ИНН юр лица.
//  
// Описание:
//  Функция возращает ИНН из переданной строки 
//  ИНН - первые 10 цифр для Юр Лиц
//        первые 12 цифр для Физ Лиц
// 
Функция ПолучитьИНН(ИННКПП)
	
	Стр = СокрЛП(ИННКПП);
	
	Если СтрДлина(Стр) = 10 Тогда // только ИНН Юр Лица
		Возврат Стр;
		
	ИначеЕсли СтрДлина(Стр) = 12 Тогда // только ИНН ФизЛица 
		Возврат Стр;
		
	Иначе
		
		РазделительИННКПП = Сред(Стр,11,1);
		
		Если Найти(РазделительИННКПП, "1234567890") = 0 Тогда
			Возврат Лев(Стр, 10);

		Иначе
			Возврат Лев(ИННКПП, 12);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьИНН()

//******************************************************************************
// ПолучитьКПП(ИННКПП)
//
// Параметры:
//  ИННКПП  - строка, написанные вместе ИНН и КПП юр лица.
//
// Возвращаемое значение:
//  значение КПП юр лица.
//  
// Описание:
//  Функция возращает КПП из переданной строки 
//  КПП - это последние цифры, начиная с 12 в строке
// 
Функция ПолучитьКПП(ИННКПП)

	РазделительИННКПП = Сред(СокрЛП(ИННКПП),11,1);
	
	Если (Найти(РазделительИННКПП, "1234567890") = 0) 
	   И (ПустаяСтрока(РазделительИННКПП) = 0) Тогда
		Возврат Сред(СокрЛП(ИННКПП), 12);
		
	Иначе
	    Возврат 0;

	КонецЕсли;
	
КонецФункции // ПолучитьКПП()

//******************************************************************************
// ПриИзмененииСтрокиВТаблице()
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из функции ДоступностьКнопок()
//
// Описание:
//  выполняфет действия при изменении текущей строки в таблице
//
Процедура ПриИзмененииСтрокиВТаблице()
    
    ТаблицаРеквизитов.Очистить(); 
    ТаблицаРеквизитов.НоваяКолонка("Реквизит", "Строка");
    ТаблицаРеквизитов.НоваяКолонка("Значение", "Строка");
    ТаблицаРеквизитов.НоваяКолонка("Элемент");
	
	ТаблицаРеквизитов.НоваяКолонка("ТипВид", "Строка");
	ТаблицаРеквизитов.ВидимостьКолонки("ТипВид", 0);
	
	Если ПустоеЗначение(ТаблицаРаспределения.Документ) = 1 Тогда
		Возврат;
	КонецЕсли;

	// таблица всех реквизитов документа
	Реквизиты=СоздатьОбъект("СписокЗначений");

	Реквизиты.ИзСтрокиСРазделителями(ТаблицаРаспределения.Документ.КлиентРеквизиты);

	Для Сч = 1 По Реквизиты.РазмерСписка() Цикл
		ТаблицаРеквизитов.НоваяСтрока(); 
		ТаблицаРеквизитов.Значение = Реквизиты.ПолучитьЗначение(Сч);
		Сч = Сч + 1;  
		
		Если Сч <= Реквизиты.РазмерСписка() Тогда
			ТаблицаРеквизитов.Реквизит = Реквизиты.ПолучитьЗначение(Сч);
		КонецЕсли;	                                         
				
	КонецЦикла;	
	
КонецПроцедуры // ПриИзмененииСтрокиВТаблице()

//******************************************************************************
// глПредставлениеСтавки(Ставка)
//
// Возвращаемое значение:
//  строковое представление ставки
//
// Вызывается из функции ФормирСуммаНДС()
//
// Описание:
//  по числовому значению ставки возвращает её строковое представление
//
Функция глПредставлениеСтавки(Ставка) Экспорт
    
	Перем Стр;

	Если Ставка.Выбран() = 1 Тогда
	    Стр = "" + Ставка.Ставка + "%";
	Иначе
		Стр = "<???>";
	КонецЕсли;

	Возврат Стр;              
	
КонецФункции // глПредставлениеСтавки()

//******************************************************************************
// ФормирСуммаНДС(Подст,Сумма,НДС,СтавкаНДС)
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из функции ВыгрузитьПлатежныйДокумент(), ЗагрузитьПлатежныйДокумент()
//
// Описание:
//  по числовому значению ставки возвращает её строковое представление
//
Функция ФормирСуммаНДС(Подст,Сумма,НДС,СтавкаНДС) Экспорт
	СтрПодст = "";
    СтрСумма = "";
	СтрНДС = "";

	Если Подст = Перечисление.ПодстановкаСуммыНДС.БезСуммыБезНДС Тогда
		Возврат СтрПодст;
	КонецЕсли;

	Если (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаНДС)
		или (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаБезНДС) Тогда
	   	СтрСумма = " Cумма "+СокрЛ(Формат(Сумма,"Ч15.2-"));
	КонецЕсли;

	Если (Подст = Перечисление.ПодстановкаСуммыНДС.СуммаНДС)
		или (Подст = Перечисление.ПодстановкаСуммыНДС.БезСуммыНДС) Тогда
		Если СтавкаНДС.Ставка=0 Тогда
			СтрНДС=","+ РазделительСтрок+"без налога (НДС)";
		Иначе
			СтрНДС=","+ РазделительСтрок+"в т.ч. НДС("+глПредставлениеСтавки(СтавкаНДС)+") - "+СокрЛ(Формат(НДС,"Ч15.2-"));
		КонецЕсли;
	КонецЕсли;

	СтрПодст = СтрСумма+СтрНДС;
	Если ПустаяСтрока(СтрПодст)=0 Тогда
		СтрПодст = СтрПодст+"."
	КонецЕсли;

	Возврат СтрПодст;
	
КонецФункции // ФормирСуммаНДС()

//******************************************************************************
// ПолучитьДанные(Параметр, Документ)
//
// Параметры:
//  Параметр - строка, вид вычисляемого значения.
//  Документ - документ – документ на основании которго вычисляется значение.  
//
// Возвращаемое значение:
//  значение данного параметра.
//  
// Описание:
//  Функция вычисляет значение по переданному параметру.
// Например: 1. Реквизиты собственной организации в конфигурации "Бухгалтерский учет" 
//           определяются на основании констант, а в Комплексной конфигурации
//           на основании общего реквизита документов "Фирма".
//           2. Номер документа в конфигурации "Бухгалтерский учет" имеет тип "Числовой",
//           а в Комплексной конфигурации "Текстовый" и формируется при этом с префиксом
//           по фирме, в связи с этим в комплексной конфигурации существует специальная
//           функция "глНомерНаПечать()" которая возвращает Номер документа без префикса. 
//
Функция ПолучитьДанные(Параметр, Документ)
	
    Результат = "";
	
	Если Параметр = "НазваниеОрганизации" Тогда
		Результат = Документ.Фирма.Наименование;

    ИначеЕсли Параметр = "Организация" Тогда
		Результат = Документ.Фирма;
	
	ИначеЕсли Параметр = "ИННОрганизации" Тогда
		Результат = Документ.Фирма.ЮрЛицо.ИНН;
			
	ИначеЕсли Параметр = "НазваниеКонтрагента" Тогда
		Результат = Документ.Контрагент.ЮрФизЛицо.ПолнНаименование;
		
	ИначеЕсли Параметр = "ИННКонтрагента" Тогда
		Результат = Документ.Контрагент.ЮрФизЛицо.ИНН;
	
	ИначеЕсли Параметр = "БанковскийСчетОрганизации" Тогда
		Результат = Документ.БанковскийСчет;
	
	ИначеЕсли Параметр = "Контрагент" Тогда
		Результат = Документ.Контрагент;
	
	ИначеЕсли Параметр = "БанковскийСчетКонтрагента" Тогда
		Результат = Документ.СчетКонтрагента;
		
	ИначеЕсли Параметр = "НомерДокумента" Тогда
		
		Результат = Строка(Число(Прав(Документ.НомерДок,3)));
		
		Если Число(Результат) = 0 Тогда
			Сообщить("У документа с номером """ + Документ.НомерДок + """ номер должен оканчиваться на три цифры и не на ""000""", "!");
		КонецЕсли;
		
	КонецЕсли;
	
    Возврат Результат;
	
КонецФункции // ПолучитьДанные()

//******************************************************************************
// ПровестиДокументПоСчету(Документ, Счет, ДатаОперации='00.00.0000', Контрагент)
//
// Параметры:
//  Документ     - Документ, документ на основании которого формируется строка выписки.
//  Счет         - Справочник.БанковскиеСчета, по которому формируется строка выписки.
//  ДатаОперации - Дата, дата на которую формируется строка выписки.
//  Контрагент   - Контрагент, с которым произведены расчеты
//
// Описание:
//  В данной процедуре, на основании загруженного платежного документа
//  формируется либо документ "СтрокаВыпискиПриход", либо "СтрокаВыпискиРасход"
//  
Процедура ПровестиДокументПоСчету(Документ, Счет, ДатаОперации='00.00.0000', Контрагент)
	
	Если ПустоеЗначение(Счет) = 1 Тогда Возврат; КонецЕсли;

	Объект = СоздатьОбъект("Документ");
	
	Если (Документ.Вид() = "Аккредитив")
		ИЛИ (Документ.Вид() = "ПлатежноеПоручение") Тогда
		ВидОбъекта = "СтрокаВыпискиРасход";               
		КодОперации = Перечисление.КодыОпераций.ОплатаПоставщику;
	Иначе
		ВидОбъекта = "СтрокаВыпискиПриход";   
		КодОперации = Перечисление.КодыОпераций.ОплатаОтПокупателя;
	КонецЕсли;		

	Объект.ВыбратьПодчиненныеДокументы(, , Документ);
	Сумма = Документ.Сумма;
	
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Если Объект.Вид() <> ВидОбъекта Тогда 
			Продолжить; 
		ИначеЕсли Объект.БанковскийСчет <> Счет Тогда 
			Продолжить; 
		КонецЕсли;

		// тут обрабатываются строки выписки по этому платёжному документу
        Если Объект.ПометкаУдаления() = 1 Тогда 
			Продолжить;
		КонецЕсли;
			
		// проверяем реквизиты 
		Замены = 0;

		Замены=Замены+ИзменитьАтрибут(Объект, "Фирма", 		Документ.Фирма);
		Замены=Замены+ИзменитьАтрибут(Объект, "Контрагент", Документ.Контрагент);
		Замены=Замены+ИзменитьАтрибут(Объект, "Договор", 	Документ.Договор);
		
		Замены=Замены+ИзменитьАтрибут(Объект, "КодОперации",КодОперации);
		
		Замены=Замены+ИзменитьАтрибут(Объект, "Валюта", 	Константа.ВалютаБухУчета);
		Замены=Замены+ИзменитьАтрибут(Объект, "Курс", 		1);

		// синхронизируем сумму
		Если Сумма < Объект.Сумма Тогда 
			Замены=Замены+ИзменитьАтрибут(Объект, "Сумма", 		Сумма);
		КонецЕсли;
		
		Сумма = Сумма - Объект.Сумма;
		
		Если Сумма < 0 Тогда 
			Сумма = 0;
		КонецЕсли;            
		
		// таблица всех реквизитов документа
		Реквизиты=СоздатьОбъект("СписокЗначений");
		
		// отбор всех непустых реквизитов
		Для Кол = 1 по Метаданные.Документ(Документ.Вид()).РеквизитШапки() Цикл
			Значение = Документ.ПолучитьАтрибут(Метаданные.Документ(Документ.Вид()).РеквизитШапки(Кол).Идентификатор);
	        Если ПустоеЗначение(Значение)=1 Тогда 
				Продолжить; 
			КонецЕсли;
			Имя = Метаданные.Документ(Документ.Вид()).РеквизитШапки(Кол).Синоним;
			Реквизиты.ДобавитьЗначение(Строка(Значение)); 
			Реквизиты.ДобавитьЗначение(Имя); 
		КонецЦикла;
		
		Объект.КлиентРеквизиты = Реквизиты.ВСтрокуСРазделителями();
		
		Если 0<Замены Тогда
			ЗаписатьДокумент(Объект);
			Объект.Провести();
		КонецЕсли;

	КонецЦикла;
	     
	// распределяем остаток суммы 
	Если Сумма > 0 Тогда
		
		Объект = СоздатьОбъект("Документ." + ВидОбъекта);
		
		Объект.Новый();
		
		глУстановитьТипВидРеквизита(Объект, "Счет", "Счет");
		Объект.ДатаДок 		= ДатаОперации;
		Объект.Фирма 		= Документ.Фирма;
		Объект.ЮрЛицо 		= Документ.ЮрЛицо;
		
		Объект.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + Фирма.ЮрЛицо.ПрефиксНомеровДокументов);
		
		Объект.Автор 		= глПользователь;
		Объект.Комментарий 	= "Создано при обработке файла, поступившего из клиента банка";
        Объект.ДокОснование = Документ;
		
		Объект.БанковскийСчет = Счет;
        Объект.Контрагент 	= Контрагент;
        Объект.Договор 		= Документ.Договор;
        Объект.КодОперации 	= КодОперации;
		
		Объект.Сумма 		= Сумма;
        Объект.Валюта 		= Константа.ВалютаБухУчета;
        Объект.Курс 		= 1;		
	
		// таблица всех реквизитов документа
		Реквизиты=СоздатьОбъект("СписокЗначений");
		
		// отбор всех непустых реквизитов
		Для Кол = 1 по Метаданные.Документ(Документ.Вид()).РеквизитШапки() Цикл
			Значение = Документ.ПолучитьАтрибут(Метаданные.Документ(Документ.Вид()).РеквизитШапки(Кол).Идентификатор);
	        Если ПустоеЗначение(Значение)=1 Тогда 
				Продолжить; 
			КонецЕсли;
			Имя = Метаданные.Документ(Документ.Вид()).РеквизитШапки(Кол).Синоним;
			Реквизиты.ДобавитьЗначение(Строка(Значение));
			Реквизиты.ДобавитьЗначение(Имя);
		КонецЦикла;
		
		Объект.КлиентРеквизиты = Реквизиты.ВСтрокуСРазделителями();
		
		Сообщить("Создан документ: "+Объект.Вид()+" "+Объект.НомерДок+" ("+Объект.ДатаДок+")", " ");

		ЗаписатьДокумент(Объект);
		Объект.Провести();
		
	КонецЕсли;
		
КонецПроцедуры // ПровестиДокументПоСчету()

//******************************************************************************
// СинхронизироватьДокументыПоСчетам()
//
// Параметры:
//  нет
//
// Описание:
//  Процедура осуществляет синхронизацию документов "Выписка" с загруженными 
// платежными документами 
//
Процедура СинхронизироватьДокументыПоСчетам()
	
	Объект=СоздатьОбъект("Документ.СтрокаВыпискиПриход");
	Объект.ВыбратьДокументы(НачДатаЗагрузки, КонДатаЗагрузки);

	Пока Объект.ПолучитьДокумент()=1 Цикл

		Если Объект.БанковскийСчет.Выбран()=0 Тогда 
			Продолжить;
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Объект.БанковскийСчет.НомерСчета)=0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЗагрДокументы.Принадлежит(Объект.ДокОснование)=0 Тогда 
			Объект.Удалить(0);
			Сообщить("Документ ""Строка выписки приход"" №" + Объект.НомерДок + " помечен на удаление при синхронизации с клиентом банка!", "!");
		КонецЕсли;

	КонецЦикла;
	
	Объект=СоздатьОбъект("Документ.СтрокаВыпискиРасход");
	Объект.ВыбратьДокументы(НачДатаЗагрузки, КонДатаЗагрузки);

	Пока Объект.ПолучитьДокумент()=1 Цикл

		Если Объект.БанковскийСчет.Выбран()=0 Тогда 
			Продолжить;
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Объект.БанковскийСчет.НомерСчета)=0 Тогда
			Продолжить;
		КонецЕсли;

		Если ЗагрДокументы.Принадлежит(Объект.ДокОснование)=0 Тогда 
			Объект.Удалить(0);
			Сообщить("Документ ""Строка выписки расход"" №" + Объект.НомерДок + " помечен на удаление при синхронизации с клиентом банка!", "!");
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументыПоСчетам()

//******************************************************************************
// ИзменитьАтрибут(Объект, Имя, Значение)
//
// Параметры:
//  Объект   - справочник, документ, операция
//  Имя      - строка, идентификатор атрибута справочника, документа, операции.
//  Значение - неопределенный – новое значение атрибута.
//
// Возвращаемое значение:
//  1 - атрибут изменен,
//  0 - атрибут не изменялся
//
// Описание:
//  Функция устанавливает новое значение атрибута объекта, если изменяется атрибут
// существующего объекта выдается сообщение.
//
Функция ИзменитьАтрибут(Объект, Имя, Значение)

	Атрибут=Объект.ПолучитьАтрибут(Имя);
	
	Если ТипЗначенияСтр(Значение)="Строка" Тогда
		Атрибут=СокрП(Атрибут); Значение=СокрП(Значение);
	КонецЕсли;

	Если Атрибут=Значение Тогда
		Возврат(0);
	КонецЕсли;

	Объект.УстановитьАтрибут(Имя, Значение);
	
	Если Объект.ТекущийДокумент().Выбран()=1 Тогда
		Стр=?(0<Объект.НомерСтроки, ", строка "+Объект.НомерСтроки, "");
		Сообщить("Изменен атрибут документа: "+Объект+Стр+": "+Имя+" = "+Значение, "!");
	КонецЕсли;

	Возврат(1);
	
КонецФункции // ИзменитьАтрибут()

//******************************************************************************
// УдалитьДокумент(Объект)
//
// Параметры:
//  Объект - документ
//
// Описание:
//  Пытается пометить документ на удаление.
//
Процедура УдалитьДокумент(Объект)
	
	Попытка
		Если Объект.ПометкаУдаления()=0 Тогда
			Объект.Удалить(0);
			Сообщить("Помечен на удаление документ: "+Объект, " ");
		КонецЕсли;
	
	Исключение
		Сообщить("Неудачная попытка удаления документа: "+Объект+": "+ОписаниеОшибки(), "!!!");
	КонецПопытки;
	
КонецПроцедуры // УдалитьДокумент()

//******************************************************************************
// СнятьПометкуУдаления(Объект)
//
// Параметры:
//  Объект - документ
//
// Описание:
//  Пытается снять пометку удаления документа.
//
Процедура СнятьПометкуУдаления(Объект)
	
	Попытка
		Если Объект.ПометкаУдаления()=1 Тогда
			Объект.СнятьПометкуУдаления();
			Сообщить("Отменено удаление документа: "+Объект, " ");
		КонецЕсли;
	
	Исключение
		Сообщить("Неудачная попытка отмены удаления: "+Объект+": "+ОписаниеОшибки(), "!!!");
	КонецПопытки;
	
КонецПроцедуры // СнятьПометкуУдаления()

//******************************************************************************
// ЗаписатьДокумент(Объект)
//
// Параметры:
//  Объект - документ
//
// Возвращаемое значение:
//  1 - в случае успешной попытки записи, 
//  0 - иначе
//
// Описание:
//  Пытается записать документ.
//
Процедура ЗаписатьДокумент(Объект)
	
	Если (Метаданные.Документ(Объект.Вид()).РеквизитШапки("Валюта").Выбран() = 1)
	   И (Метаданные.Документ(Объект.Вид()).РеквизитШапки("Курс").Выбран() = 1) Тогда
		Объект.Валюта = Константа.ВалютаБухУчета;
		Объект.Курс = 1;
	КонецЕсли;
	
	Попытка
		Объект.Записать(); 
		Сообщить("Записан документ: "+Объект, " ");
		
		Если      Объект.ПометкаУдаления()=1 Тогда
			Объект.СнятьПометкуУдаления();
		ИначеЕсли Объект.Проведен()=1 Тогда
			Объект.СделатьНеПроведенным();
		КонецЕсли;
		
	Исключение
		Сообщить("Неудачная попытка записи документа: "+Объект+": "+ОписаниеОшибки(), "!!!");
	КонецПопытки;
		
КонецПроцедуры // ЗаписатьДокумент() 

//******************************************************************************
// ЗаполнитьРасчетныеСчета()
//
// Параметры:
//  нет 
//
// Описание:
//  Процедура формирует список банковских счетов, по которым выгружаются документы.
// 
Процедура ЗаполнитьРасчетныеСчета()
	
	Список=СоздатьОбъект("СписокЗначений");
	
	БанкСчет=СоздатьОбъект("Справочник.БанковскиеСчета");
	БанкСчет.ВыбратьЭлементыПоРеквизиту("ЮрФизЛицо",Фирма.ЮрЛицо ,0,0); К=0;
	Пока БанкСчет.ПолучитьЭлемент() = 1 Цикл
		Если Метаданные.Справочник("БанковскиеСчета").Владелец.Выбран() = 1 Тогда
			Список.ДобавитьЗначение(БанкСчет.ТекущийЭлемент(), СокрЛП(БанкСчет) + " (" + СокрЛП(БанкСчет.Владелец) + ")");
		Иначе
			Список.ДобавитьЗначение(БанкСчет.ТекущийЭлемент(), СокрЛП(БанкСчет));
		КонецЕсли;
        
		К=К+1;
		Н=ВыгрРасчетныеСчета.НайтиЗначение(БанкСчет.ТекущийЭлемент());
		
		Если 0<Н Тогда 
			Список.Пометка(К, ВыгрРасчетныеСчета.Пометка(Н)); 
		КонецЕсли;
	КонецЦикла;
	
	Список.Выгрузить(ВыгрРасчетныеСчета);
	
КонецПроцедуры // ЗаполнитьРасчетныеСчета()

//******************************************************************************
// ЗаполнитьВыгрВидыДок()
//
// Параметры:
//  нет 
//
// Описание:
//  Процедура формирует список видов выгружаемых платежных документов.
//
Процедура ЗаполнитьВыгрВидыДок()
	
	Список=СоздатьОбъект("СписокЗначений");
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если Метаданные.Документ(СокрЛП(Таб.Область(Индекс, 1).Текст)).Выбран() = 1 Тогда 
			Список.ДобавитьЗначение(СокрЛП(Таб.Область(Индекс, 1).Текст), СокрЛП(Таб.Область(Индекс, 2).Текст));
		КонецЕсли;
	КонецЦикла;
	
	Для К=1 По Список.РазмерСписка() Цикл
		Н=ВыгрВидыДокументов.НайтиЗначение(Список.ПолучитьЗначение(К));
		Если 0<Н Тогда Список.Пометка(К, ВыгрВидыДокументов.Пометка(Н)); КонецЕсли;
	КонецЦикла;
	
	Список.Выгрузить(ВыгрВидыДокументов);
	
КонецПроцедуры // ЗаполнитьВыгрВидыДок()

//******************************************************************************
// КаталогИмяФайла(ПолноеИмяФайла, Каталог, Файл)
//
// Параметры:
//  ПолноеИмяФайла - строка: каталог и имя файла.
//  Каталог        - если передан, в него будет возвращено имя каталога.
//  Файл           - если передан, в него будет возвращено имя файла.
//
// Возвращаемое значение:
//  0 - если указанного каталога не существует
//  1 - если указанный каталог существует
//
// Описание:
//  Если каталог не существует, то пользователю предлагается его создать.
//
Функция КаталогИмяФайла(ПолноеИмяФайла, Каталог, Файл)
	
	Каталог=""; Файл=ПолноеИмяФайла; Разд=Найти(Файл, "\");
	
	Пока 0<Разд Цикл 
		Каталог=Каталог+Лев(Файл, Разд); Файл=Сред(Файл, Разд+1); Разд=Найти(Файл, "\");
	КонецЦикла;
	Каталог=Каталог+".";

	Если СтрДлина(Каталог)<4 Тогда
	ИначеЕсли ФС.СуществуетФайл(Каталог)=1 Тогда
	ИначеЕсли "Да"=Вопрос(Каталог+"
	                      |Указанный каталог не существует! Создать?","Да+Нет") Тогда 
		ФС.СоздатьКаталог(Каталог);
	Иначе 
		Каталог=""; Возврат(0);
	КонецЕсли;
	
	Возврат(1);
	
КонецФункции // КаталогИмяФайла()

//******************************************************************************
// РазбитьСтрокуНаСтроки(ОднаСтрока)
//
// Параметры:
//  ОднаСтрока - строка, строка разбиваемая на многострочную.
//
// Возвращаемое значение:
//  строка - многострочная строка.
//  
// Описание:
//  Функция разбивает строку на несколько строк максимальной длиной 50 знаков.
//
Функция РазбитьСтрокуНаСтроки(ОднаСтрока)
	
	МинДлина=40; МаксДлина=50;
	МногоСтрок=""; ДлинаСтроки=0;
	
	Пока 0<СтрДлина(ОднаСтрока) Цикл
		ДлинаСлова=Найти(ОднаСтрока, " "); 
		Если ДлинаСлова=0 Тогда 
			ДлинаСлова=СтрДлина(ОднаСтрока); 
		КонецЕсли;
		
		Если ДлинаСтроки+ДлинаСлова<=МаксДлина Тогда
			МногоСтрок=МногоСтрок+Лев(ОднаСтрока, ДлинаСлова);
			ОднаСтрока=Сред(ОднаСтрока, ДлинаСлова+1);
		
			ДлинаСтроки=ДлинаСтроки+ДлинаСлова;
			Продолжить;
			
		ИначеЕсли ДлинаСтроки<МинДлина Тогда
			МногоСтрок=МногоСтрок+Лев(ОднаСтрока, МаксДлина-ДлинаСтроки);
			ОднаСтрока=Сред(ОднаСтрока, МаксДлина-ДлинаСтроки+1);
		КонецЕсли;
		
		Если 0<СтрДлина(ОднаСтрока) Тогда
			МногоСтрок=МногоСтрок+РазделительСтрок;
		КонецЕсли;
		
		ДлинаСтроки=0;
	КонецЦикла;
			
	Возврат(МногоСтрок);
	
КонецФункции // РазбитьСтрокуНаСтроки()

//******************************************************************************
// ДоступностьКнопок()
//
// Возвращаемое значение:
//  Нет.
//
// Вызывается из формул элементов диалога:
//  Невидимый статик "ДоступностьКнопок()" на слое "Основной".
//
// Описание:
//  Определяет доступность кнопок "кнЗагрузить", "кнПросмотрЗагрузки" и "кнПросмотрВыгрузки".
//
Функция ДоступностьКнопок()
	
	ЕстьФайл=ФС.СуществуетФайл(ИмяФайлаВыгрузки);
	Форма.кнПросмотрВыгрузки.Доступность(ЕстьФайл);
	Форма.кнПросмотрВыгрузкиДоп.Доступность(ЕстьФайл);

	ЕстьФайл=ФС.СуществуетФайл(ИмяФайлаЗагрузки);
	Форма.кнЗагрузить.Доступность(ЕстьФайл);
	Форма.кнПросмотрЗагрузки.Доступность(ЕстьФайл);
	Форма.кнПросмотрЗагрузкиДоп.Доступность(ЕстьФайл);
	
	Если ТаблицаРаспределения.ТекущаяСтрока() <> СтрокаПоследнегоОтображения Тогда
		ПриИзмененииСтрокиВТаблице();                                             
		СтрокаПоследнегоОтображения = ТаблицаРаспределения.ТекущаяСтрока();
	КонецЕсли;
	
КонецФункции // ДоступностьКнопок()

//******************************************************************************
// ТекстФайла(ИмяФайла, Заголовок = "")
//
// Параметры:
//  ИмяФайла  - строка, имя текстового файла. 
//  Заголовок - строка, заголовок окна редактирования текста.
//
// Возвращаемое значение:
//  текст - объект вида "Текст", файла обмена данными.
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнПросмотрВыгрузки", "кнПросмотрЗагрузки".
//
// Описание:
//  Процедура открывает текстовый файл обмена данными, в случае если задан заголовок 
// (по кнопкам "Просмотр") файл открывается в окне редактирования.
//
Функция ТекстФайла(ИмяФайла, Заголовок = "")
	
	ЗагрРасчетныеСчета.УдалитьВсе(); ЗагрВидыДокументов.УдалитьВсе();

	Если ФС.СуществуетФайл(ИмяФайла)=0 Тогда
		Предупреждение("Указанный файл не существует!", 5);
		Возврат(ПолучитьПустоеЗначение());
	КонецЕсли;
		
	Текст=СоздатьОбъект("Текст");
	Текст.КодоваяСтраница(Кодировка.ПолучитьЗначение(Кодировка.ТекущаяСтрока()));
	Текст.Открыть(ИмяФайла);

	Если Текст.КоличествоСтрок()<1 Тогда
		Предупреждение("Указанный файл не является файлом обмена!", 5);
		Возврат(ПолучитьПустоеЗначение());

	ИначеЕсли СокрЛП(Текст.ПолучитьСтроку(1))<>"1CClientBankExchange" Тогда
		Предупреждение("Указанный файл не является файлом обмена!", 5);
		Возврат(ПолучитьПустоеЗначение());
	КонецЕсли;
	
	Если ПустаяСтрока(Заголовок) = 0 Тогда 
		Текст.Показать(Заголовок + ":", ИмяФайла);
	КонецЕсли;
	
	Возврат(Текст);
	
КонецФункции // ТекстФайла()

//******************************************************************************
// Печать()
//
// Описание:
//  Процедура осуществляет вывод печатной формы отчета о загрузке данных из 
// системы "Клиент банка".
//
Процедура Печать()
	
	Отчет=СоздатьОбъект("Таблица");
	Отчет.ИсходнаяТаблица("Отчет");
	Отчет.ВывестиСекцию("Шапка");
	
	Для Индекс=1 По ЗагрДокументы.РазмерСписка() Цикл
        Документ=ЗагрДокументы.ПолучитьЗначение(Индекс);
		
		Если ПустоеЗначение(Документ)=0 Тогда
	
			Если (Документ.Вид()="СтрокаВыпискиПриход") Тогда
				Плательщик=Документ.Контрагент;
				ПлательщикСчет="";
				Получатель=Документ.Фирма;
				ПолучательСчет=Документ.БанковскийСчет.НомерСчета;
				
			ИначеЕсли (Документ.Вид()="СтрокаВыпискиРасход") Тогда
				Плательщик=Документ.Фирма;
				ПлательщикСчет=Документ.БанковскийСчет.НомерСчета;
				Получатель=Документ.Контрагент;
				ПолучательСчет="";
				
			Иначе
				Таб = СоздатьОбъект("Таблица");
				Таб.ИсходнаяТаблица("ВидыДокументов");
				Таб.Вывести();
				
				Для Номер = 1 По Таб.ВысотаТаблицы() Цикл
					Если Врег(СокрЛП(Таб.Область(Номер, 1).Текст)) = Врег(Документ.Вид()) Тогда
						Корреспондент = СокрЛП(Таб.Область(Номер, 3).Текст);
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Корреспондент  = "Получатель" Тогда
					Плательщик     = ПолучитьДанные("Организация", Документ);
					ПлательщикСчет = ПолучитьДанные("БанковскийСчетОрганизации", Документ);
					Получатель     = ПолучитьДанные("Контрагент", Документ);
					ПолучательСчет = ПолучитьДанные("БанковскийСчетКонтрагента", Документ);
					
				ИначеЕсли Корреспондент  = "Плательщик" Тогда
					Получатель     = ПолучитьДанные("Организация", Документ);
					ПолучательСчет = ПолучитьДанные("БанковскийСчетОрганизации", Документ);
					Плательщик     = ПолучитьДанные("Контрагент", Документ);
					ПлательщикСчет = ПолучитьДанные("БанковскийСчетКонтрагента", Документ);
					
				КонецЕсли;
			
			КонецЕсли;
			
			Сумма=Документ.Сумма;
			Отчет.ВывестиСекцию("Строка");
			
		КонецЕсли;
	КонецЦикла;
	
	Отчет.ВывестиСекцию("Подвал");
	Отчет.ТолькоПросмотр(1);
	Отчет.Показать("Отчет","");

КонецПроцедуры // Печать()

//******************************************************************************
// ВыгрузитьПлатежныеРеквизиты(Счет, Слово)
//
// Параметры:
//  Счет  - справочник, элемент справочника "Банковские счета" или "Расчетные счета".
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//
// Описание:
//	Процедура выгружает поля документов, представляющие платежные реквизиты
// собственной организации или контрагента, в таблицу передаваемых документов.
//
Процедура ВыгрузитьПлатежныеРеквизиты(Счет, Слово)
	
	Стр=ТаблицаДокументов.НомерСтроки;
	ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Счет", Счет.НомерСчета);

	Если Счет.БанкДляРасчетов.Выбран()=1 Тогда
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"2",		Счет.НомерСчета);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"3", 		Счет.Банк.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"4", 		Счет.Банк.Местонахождение);

		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"РасчСчет",	Счет.Банк.КоррСчет);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк1", 	Счет.БанкДляРасчетов.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк2",	Счет.БанкДляРасчетов.Местонахождение);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"БИК",		Счет.БанкДляРасчетов.Код);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Корсчет",	Счет.БанкДляРасчетов.КоррСчет);

	Иначе
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"РасчСчет",	Счет.НомерСчета);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк1", 	Счет.Банк.Наименование);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Банк2",	Счет.Банк.Местонахождение);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"БИК",		Счет.Банк.Код);
		ТаблицаДокументов.УстановитьЗначение(Стр, Слово+"Корсчет",	Счет.Банк.КоррСчет);
		
	КонецЕсли;

	Текст = "";
	глПлатежныеРеквизиты(Счет, Текст);
	Текст=СтрЗаменить(Текст, РазделительСтрок, " ");
	ТаблицаДокументов.УстановитьЗначение(Стр, Слово, Текст);
	
КонецПроцедуры // ВыгрузитьПлатежныеРеквизиты()

//******************************************************************************
// ВыгрузитьПлатежныйДокумент(Документ)
//
// Параметры:
//  Документ - документ – выгружаемый документ.
//
// Описание:
//  Процедура осуществляет выгрузку значений атрибутов переданного документа в 
// таблицу выгружаемых документов.
//
Процедура ВыгрузитьПлатежныйДокумент(Документ)
	
	Перем ВидДокумента, Корреспондент;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если Врег(СокрЛП(Таб.Область(Индекс, 1).Текст)) = Врег(Документ.Вид()) Тогда
			ВидДокумента  = СокрЛП(Таб.Область(Индекс, 2).Текст);
			Корреспондент = СокрЛП(Таб.Область(Индекс, 3).Текст);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Корреспондент  = "Получатель" Тогда
		Организация="Плательщик";
		
	ИначеЕсли Корреспондент  = "Плательщик" Тогда
		Организация="Получатель";
		
	Иначе
		Сообщить("ВыгрузитьДокументы(): выгрузка не описана");
		Возврат; 
		
	КонецЕсли;

	Поз=ВыгрРасчетныеСчета.НайтиЗначение(ПолучитьДанные("БанковскийСчетОрганизации", Документ));
	Если Поз=0 Тогда
		Сообщить("Не выбран расчетный счет: "+Документ+" - документ не выгружен", "!!"); 
		Возврат;

	ИначеЕсли ВыгрРасчетныеСчета.Пометка(Поз)=0 Тогда
		Возврат;

	ИначеЕсли ПолучитьДанные("Контрагент", Документ).Выбран()=0 Тогда
		Сообщить("Не выбран контрагент: "+Документ+" - документ не выгружен", "!!"); 
		Возврат;

	ИначеЕсли ПолучитьДанные("БанковскийСчетКонтрагента", Документ).Выбран()=0 Тогда
		Сообщить("Не выбран счет контрагента: "+Документ+" - документ не выгружен", "!!"); 
		Возврат; 
		
	КонецЕсли;

	ТаблицаДокументов.НоваяСтрока(); Стр=ТаблицаДокументов.НомерСтроки;

	// шапка платежного документа
	ТаблицаДокументов.СекцияДокумент = ВидДокумента;
	ТаблицаДокументов.Номер          = ПолучитьДанные("НомерДокумента", Документ.ТекущийДокумент());
	ТаблицаДокументов.Дата           = Документ.ДатаДок;
	ТаблицаДокументов.Сумма          = Документ.Сумма;

	// реквизиты организации      
	ТаблицаДокументов.УстановитьЗначение(Стр, Организация + "ИНН", ПолучитьИНН(ПолучитьДанные("ИННОрганизации", Документ)));
	ТаблицаДокументов.УстановитьЗначение(Стр, Организация + "КПП", ПолучитьКПП(ПолучитьДанные("ИННОрганизации", Документ)));
	
	ТаблицаДокументов.УстановитьЗначение(Стр, Организация + "1",   ПолучитьДанные("НазваниеОрганизации", Документ));
	ВыгрузитьПлатежныеРеквизиты(ПолучитьДанные("БанковскийСчетОрганизации", Документ), Организация);

	// реквизиты контрагента 
	ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "ИНН", ПолучитьИНН(ПолучитьДанные("ИННКонтрагента", Документ)));
	ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "КПП", ПолучитьКПП(ПолучитьДанные("ИННКонтрагента", Документ)));
	
	ТаблицаДокументов.УстановитьЗначение(Стр, Корреспондент + "1",   ПолучитьДанные("НазваниеКонтрагента", Документ));
	ВыгрузитьПлатежныеРеквизиты(ПолучитьДанные("БанковскийСчетКонтрагента", Документ), Корреспондент);
	
	// реквизиты платежа
	ТаблицаДокументов.ВидПлатежа=Строка(Документ.ВидПлатежа);
	ТаблицаДокументов.ВидОплаты="01";
	ТаблицаДокументов.СрокДействия=ПустоеЗначение("Дата");
	
	// реквизиты налогового платежа
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда

		ТаблицаДокументов.СтатусСоставителя   = Строка(Документ.СтатусСоставителяПлДок);
		ТаблицаДокументов.ПоказательКБК 	  = Строка(Документ.КодБК);
		ТаблицаДокументов.ОКАТО 			  = Строка(Документ.КодОКАТО);
		ТаблицаДокументов.ПоказательОснования = Строка(Документ.ПоказательОснования);
		ТаблицаДокументов.ПоказательПериода	  = Строка(Документ.ПоказательПериода);
		ТаблицаДокументов.ПоказательНомера	  = Строка(Документ.ПоказательНомера);
		ТаблицаДокументов.ПоказательДаты	  = Документ.ПоказательДаты;
		ТаблицаДокументов.ПоказательТипа	  = Строка(Документ.ПоказательТипа);

	КонецЕсли;

	// вид аккредитива
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ВидАккредитива").Выбран() = 1 Тогда
		ТаблицаДокументов.ВидАккредитива=Строка(Документ.ВидАккредитива);
	КонецЕсли;
	
	// платеж по представлению
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ВидДокумента").Выбран() = 1 Тогда
		ТаблицаДокументов.ПлатежПоПредст=Документ.ВидДокумента;
	КонецЕсли;
	
	// дополнительные условия
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ДопУсловия").Выбран() = 1 Тогда
		ТаблицаДокументов.ДопУсловия=Документ.ДопУсловия;
	КонецЕсли;
	
	// номер счета поставщика
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("НомерСчета40901").Выбран() = 1 Тогда
		ТаблицаДокументов.НомерСчетаПоставщика=Документ.НомерСчета40901;	
	КонецЕсли;
	
	НДС="";
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("АвтоПодстСуммыНДС").Выбран() = 1 Тогда
		НДС=ФормирСуммаНДС(Документ.АвтоПодстСуммыНДС, Документ.Сумма, Документ.НДС, Документ.СтавкаНДС);
	КонецЕсли;
	
	// очередность платежа
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("Очередность").Выбран() = 1 Тогда
		ТаблицаДокументов.Очередность=Строка(Документ.Очередность); 
	КонецЕсли;

	Назначение=РазбитьСтрокуНаСтроки(СокрП(Документ.Назначение)+НДС);
	// назначение платежа
	ТаблицаДокументов.НазначениеПлатежа=СтрЗаменить(СокрП(Документ.Назначение)+НДС, РазделительСтрок, " ");
	ТаблицаДокументов.НазначениеПлатежа1=СтрПолучитьСтроку(Назначение, 1);
	ТаблицаДокументов.НазначениеПлатежа2=СтрПолучитьСтроку(Назначение, 2);
	ТаблицаДокументов.НазначениеПлатежа3=СтрПолучитьСтроку(Назначение, 3);
	ТаблицаДокументов.НазначениеПлатежа4=СтрПолучитьСтроку(Назначение, 4);
	ТаблицаДокументов.НазначениеПлатежа5=СтрПолучитьСтроку(Назначение, 5);
	ТаблицаДокументов.НазначениеПлатежа6=СтрПолучитьСтроку(Назначение, 6);

	// условия оплаты
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("УсловиеОплаты").Выбран() = 1 Тогда
		УсловиеОплаты=РазбитьСтрокуНаСтроки(СокрП(Документ.УсловиеОплаты));
		ТаблицаДокументов.УсловиеОплаты1=Документ.УсловиеОплаты;		
		ТаблицаДокументов.УсловиеОплаты2=СтрПолучитьСтроку(УсловиеОплаты, 1);
		ТаблицаДокументов.УсловиеОплаты3=СтрПолучитьСтроку(УсловиеОплаты, 2); 
	КонецЕсли;
	
	// срок акцепта
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("СрокАкцепта").Выбран() = 1 Тогда
		ТаблицаДокументов.СрокАкцепта = Строка(Документ.СрокАкцепта);
	КонецЕсли;
	
	// дата отсылки документов
	Если Метаданные.Документ(Документ.Вид()).РеквизитШапки("ДатаОтсылки").Выбран() = 1 Тогда
		ТаблицаДокументов.ДатаОтсылкиДок = Документ.ДатаОтсылки;
	КонецЕсли;
	
	Сообщить("Выгружен документ: "+Документ, " ");

КонецПроцедуры // ВыгрузитьПлатежныйДокумент()

//******************************************************************************
// ВыгрузитьТекст()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнВыгрузить".
//
// Описание:
//  Процедура формирует файл обмена данными, для экспорта платежных документов 
// в систему типа "Клиент банка".
//
Процедура ВыгрузитьТекст()
	
	Перем Вид, Часы, Минуты, Секунды, Кодир, Тип, Заголовок;
	
	Если КаталогИмяФайла(ИмяФайлаВыгрузки, "", "") = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Текст=СоздатьОбъект("Текст");
	Текст.КодоваяСтраница(Кодировка.ПолучитьЗначение(Кодировка.ТекущаяСтрока(), Кодир));

	ТекущееВремя(Часы, Минуты, Секунды);
    Время=Шаблон("[Часы#Ч(0)2]:[Минуты#Ч(0)2]:[Секунды#Ч(0)2]");

	Текст.ДобавитьСтроку("1CClientBankExchange");
	Текст.ДобавитьСтроку("ВерсияФормата=1");
	Текст.ДобавитьСтроку("Кодировка="+Кодир);
	Текст.ДобавитьСтроку("Отправитель="+Метаданные.Представление());
	Текст.ДобавитьСтроку("Получатель="+КлиентБанка);
	Текст.ДобавитьСтроку("ДатаСоздания="+Формат(ТекущаяДата(), "ДДДММГГГГ"));
	Текст.ДобавитьСтроку("ВремяСоздания="+Время);
	Текст.ДобавитьСтроку("ДатаНачала="+Формат(НачДатаВыгрузки, "ДДДММГГГГ"));
	Текст.ДобавитьСтроку("ДатаКонца="+Формат(КонДатаВыгрузки, "ДДДММГГГГ"));
	
	Для К=1 по ВыгрРасчетныеСчета.РазмерСписка() Цикл
		Если ВыгрРасчетныеСчета.Пометка(К)=1 Тогда
			Счет=ВыгрРасчетныеСчета.ПолучитьЗначение(К);
			Текст.ДобавитьСтроку("РасчСчет="+Счет.НомерСчета);
		КонецЕсли;
	КонецЦикла;
	
	Для К=1 по ВыгрВидыДокументов.РазмерСписка() Цикл
		Если ВыгрВидыДокументов.Пометка(К)=1 Тогда
			ВыгрВидыДокументов.ПолучитьЗначение(К, Вид);
			Текст.ДобавитьСтроку("Документ="+Вид);
		КонецЕсли;
	КонецЦикла;

	ТаблицаДокументов.УдалитьСтроки();
	
	Для К=1 по ВыгрВидыДокументов.РазмерСписка() Цикл
		Если ВыгрВидыДокументов.Пометка(К)=0 Тогда Продолжить; КонецЕсли;

		Объект=СоздатьОбъект("Документ."+ВыгрВидыДокументов.ПолучитьЗначение(К, Вид)); 
		Состояние("Обработка: "+Вид);

		Объект.ВыбратьДокументы(НачДатаВыгрузки, КонДатаВыгрузки);
		Пока Объект.ПолучитьДокумент()=1 Цикл
			Если Объект.ПометкаУдаления()=1 Тогда Продолжить; КонецЕсли;
			Если Объект.ЮрЛицо <> Фирма.ЮрЛицо Тогда Продолжить; КонецЕсли;
			ВыгрузитьПлатежныйДокумент(Объект);
		КонецЦикла;
	КонецЦикла;

	Для Стр=1 по ТаблицаДокументов.КоличествоСтрок() Цикл

		Для Кол=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
			Значение=ТаблицаДокументов.ПолучитьЗначение(Стр, Кол);
			Имя=ТаблицаДокументов.ПолучитьПараметрыКолонки(Кол, Тип, , , Заголовок);
			
			Если ПустоеЗначение(Значение)=1 Тогда
				Если ОбязательныеАтрибуты.Принадлежит(Имя)=1 Тогда
					ТаблицаДокументов.ПолучитьСтрокуПоНомеру(Стр);
					
					Сообщить(ТаблицаДокументов.ПолучитьЗначение(Стр, "СекцияДокумент")+
					         " № "+ТаблицаДокументов.ПолучитьЗначение(Стр, "Номер")+
					         " от "+ТаблицаДокументов.ПолучитьЗначение(Стр, "Дата")+
							 ": не заполнено поле """+Заголовок+""".", "!");
							 
				КонецЕсли;
				Продолжить; 
			КонецЕсли;

			Если Тип="Число" Тогда		Значение=Формат(Значение, "Ч.2");
			ИначеЕсли Тип="Дата" Тогда	Значение=Формат(Значение, "ДДДММГГГГ");
			КонецЕсли;
			
			Текст.ДобавитьСтроку(Имя+"="+Значение);
		КонецЦикла;

		Текст.ДобавитьСтроку("КонецДокумента");
	КонецЦикла;

	Текст.ДобавитьСтроку("КонецФайла");
	Текст.Записать(ИмяФайлаВыгрузки);
	
КонецПроцедуры // ВыгрузитьТекст()

//******************************************************************************
// НайтиОрганизацию(Слово, Вид)
//
// Параметры:
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//  Вид   - строка – вид справочника.
//
// Возвращаемое значение:
//  0 - если владельца такого вида не существует в конфигурации (Например: в Комплексной 
//      конфигурации владелец справочника "Банковские счета" справочник "Фирмы", в
//      конфигурации "Бухгалтерский учет" у данного справочника владельца нет, возвращается 0).
//  справочник - найденный элемент справочника.
//  
// Описание:
//  Функция осуществляет поиск в справочнике организацию по ИНН
// из текущей строки таблицы загружаемых документов.
//
Функция НайтиОрганизацию(Слово)
	
	Объект=СоздатьОбъект("Справочник.СвоиЮрЛица");
	
	ИННКраткий = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"ИНН"));

	ИНН = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"ИНН")) + "\" 
		+ СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"КПП"));

	Если ПустаяСтрока(ИНН)=0 Тогда 
		Объект.НайтиПоРеквизиту("ИНН", СокрЛП(ИНН), 1);
		
		// Возможно просто укзали только ИНН - например для ПБОЮЛ
		Если Объект.Выбран() = 0 Тогда
			Объект.НайтиПоРеквизиту("ИНН", ИННКраткий, 1); 
		КонецЕсли;
		
		Если Объект.Выбран() = 1 Тогда
			Спр=СоздатьОбъект("Справочник.Фирмы");
			НастоящаяФирма = ПолучитьПустоеЗначение("Справочник.Фирмы");
			ВременнаяФирма = ПолучитьПустоеЗначение("Справочник.Фирмы");
			Спр.ВыбратьЭлементы();

			Пока Спр.ПолучитьЭлемент() = 1 Цикл
				Если Спр.ЮрЛицо = Объект.ТекущийЭлемент() Тогда
					ВременнаяФирма = Спр.ТекущийЭлемент();
					Если (СокрЛП(Спр.Наименование) = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово)))
					 ИЛИ (СокрЛП(Спр.Наименование) = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово + "1"))) Тогда
						НастоящаяФирма = Спр.ТекущийЭлемент();
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;      

			Если ПустоеЗначение(НастоящаяФирма) = 0 Тогда
				Возврат НастоящаяФирма;
			КонецЕсли;                 
			Если ПустоеЗначение(ВременнаяФирма) = 0 Тогда
				Возврат ВременнаяФирма;
			КонецЕсли;                 

		КонецЕсли;
	КонецЕсли;

	Если Объект.Выбран() = 0 Тогда
		// Если не нашли среди своих юридических лиц и фирм - попробуем найти среди юридических лиц
		Объект=СоздатьОбъект("Справочник.ЮрЛица");
		
		Если ПустаяСтрока(ИНН)=0 Тогда 
			Объект.НайтиПоРеквизиту("ИНН", СокрЛП(ИНН), 1); 
		КонецЕсли; 

		// Возможно просто укзали только ИНН - например для ПБОЮЛ
		Если Объект.Выбран() = 0 Тогда
			Объект.НайтиПоРеквизиту("ИНН", ИННКраткий, 1); 
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.Выбран() = 0  Тогда
		// Если не нашли среди юридических лиц - попробуем найти среди физических
		Объект=СоздатьОбъект("Справочник.ФизЛица");
		
		Если ПустаяСтрока(ИНН)=0 Тогда 
			Объект.НайтиПоРеквизиту("ИНН", СокрЛП(ИНН), 1); 
		КонецЕсли;
		
		// Возможно просто укзали только ИНН - например для ПБОЮЛ
		Если Объект.Выбран() = 0 Тогда
			Объект.НайтиПоРеквизиту("ИНН", ИННКраткий, 1); 
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // НайтиОрганизацию()

//******************************************************************************
// НайтиРасчетныйСчет(Слово, Вид)
//
// Параметры:
//  Слово - строка, "Плательщик" или "Получатель" часть идентификатора колонки таблицы.
//  Вид   - строка – вид справочника.
//
// Возвращаемое значение:
//  справочник - найденный элемент справочника.
//  
// Описание:
//  Функция осуществляет поиск в справочнике "Банковские счета" или "Расчетные счета"
// расчетный счет по номеру из текущей строки таблицы загружаемых документов.
//
Функция НайтиРасчетныйСчет(Слово, Вид, Владелец)
	
	Объект  = СоздатьОбъект("Справочник.БанковскиеСчета");
	
	Если Владелец.Вид() = "Фирмы" Тогда
		Значение = Владелец.ЮрЛицо; 
	
	ИначеЕсли Владелец.Вид() = "Контрагенты" Тогда
		Значение = Владелец.ЮрФизЛицо; 
	
	Иначе
		Значение = Владелец; 		
	КонецЕсли;
	
	НомерСчета = СокрЛП(ТаблицаДокументов.ПолучитьЗначение(ТаблицаДокументов.НомерСтроки, Слово+"Счет"));
	
	Если ПустоеЗначение(НомерСчета)=0 Тогда
		Объект.ВыбратьЭлементыПоРеквизиту("НомерСчета",СокрЛП(НомерСчета),0,0);
		Пока Объект.ПолучитьЭлемент() = 1 Цикл
			Если Объект.ЮрФизЛицо = Значение Тогда
				Прервать;
			КонецЕсли
	    КонецЦикла;
	КонецЕсли;

	Возврат Объект.ТекущийЭлемент();
	
КонецФункции // НайтиРасчетныйСчет()
 
//******************************************************************************
// НайтиЗначПеречисления(Вид, Стр)
//
// Параметры:
//  Вид - строка – вид перечисления.
//  Стр - строка, представление значения перечисления.
//
// Возвращаемое значение:
//  значение перечисления
//
// Описание:
//  Определяет значение перечисления по идентификатору перечисления и представлению 
// его значения.
//
Функция НайтиЗначПеречисления(Вид, Стр)
	
	Если Метаданные.Перечисление(Вид).Выбран() = 0 Тогда
		Если (Метаданные.Перечисление("ВидыПлатежей").Выбран() = 1) и (Вид = "ВидыПлатежа") Тогда
			Вид = "ВидыПлатежей";
		Иначе
			Возврат "";
		КонецЕсли;
	КонецЕсли;
	
	Перечисл=Перечисление.ПолучитьАтрибут(Вид);
	Для К=1 по Перечисл.КоличествоЗначений() Цикл
		Значение=Перечисл.ЗначениеПоНомеру(К);

		Если Строка(Значение)=СокрЛП(Стр) Тогда Возврат(Значение); КонецЕсли;
	КонецЦикла;
	
	Возврат(ПолучитьПустоеЗначение("Перечисление."+Вид));
	
КонецФункции // НайтиЗначПеречисления()

//******************************************************************************
// ЗагрузитьПлатежныйДокумент()
//
// Возвращаемое значение:
//  Документ - найденный платежный документ.
//
// Описание:
//  Осуществляет поиск в информационной базе платежного документа, если такой документ
// существует вызывается процедура ПровестиДокументПоСчету(), осуществляющая формирование 
// движений в учете.
//
Функция ЗагрузитьПлатежныйДокумент()
	
	Перем ВидДокумента, Корреспондент, Контрагент;
	
	Таб = СоздатьОбъект("Таблица");
	Таб.ИсходнаяТаблица("ВидыДокументов");
	Таб.Вывести();
	
	Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
		Если (Врег(СокрЛП(Таб.Область(Индекс, 2).Текст)) = Врег(СокрЛП(ТаблицаДокументов.СекцияДокумент))) и 
		     (Метаданные.Документ(СокрЛП(Таб.Область(Индекс, 1).Текст)).Выбран() = 1) Тогда
			ВидДокумента  = СокрЛП(Таб.Область(Индекс, 1).Текст);
			Корреспондент = СокрЛП(Таб.Область(Индекс, 3).Текст);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Плательщик     = НайтиОрганизацию("Плательщик");
	ПлательщикСчет = НайтиРасчетныйСчет("Плательщик", "БанковскиеСчета", Плательщик);
	Получатель     = НайтиОрганизацию("Получатель");
	ПолучательСчет = НайтиРасчетныйСчет("Получатель", "БанковскиеСчета", Получатель);
	
	Если Корреспондент  = "Получатель" Тогда

		Организация     = Плательщик;
		СчетОрганизации = ПлательщикСчет;
		ДатаОперации    = ТаблицаДокументов.ДатаСписано;
		
	ИначеЕсли Корреспондент  = "Плательщик" Тогда

		Организация     = Получатель;
		СчетОрганизации = ПолучательСчет;
		ДатаОперации    = ТаблицаДокументов.ДатаПоступило;
		
	Иначе
		Возврат(ПолучитьПустоеЗначение("Документ"));
	КонецЕсли;

	Если СчетОрганизации.Выбран() = 0 Тогда
		Возврат ПолучитьПустоеЗначение("Документ");
	КонецЕсли;
	
	Объект=СоздатьОбъект("Документ."+ВидДокумента);
	
	Объект.ВыбратьДокументы(ТаблицаДокументов.Дата, ТаблицаДокументов.Дата);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		
		Номер = ПолучитьДанные("НомерДокумента", Объект.ТекущийДокумент());
		Если Номер <> ТаблицаДокументов.Номер Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗначенияСтр(Организация) = "Справочник" Тогда
			Если ПолучитьДанные("Организация", Объект.ТекущийДокумент()) = Организация Тогда
				Прервать;
			КонецЕсли;
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Выбран()=0 Тогда
		Возврат ПолучитьПустоеЗначение("Документ");
	КонецЕсли;
	
	СнятьПометкуУдаления(Объект);
	
	Замены=0;
	// дата документа
	Замены=Замены+ИзменитьАтрибут(Объект, "ДатаДок", ТаблицаДокументов.Дата);
	// сумма документа
	Замены=Замены+ИзменитьАтрибут(Объект, "Сумма", ТаблицаДокументов.Сумма);
	// банковский счет
	Замены=Замены+ИзменитьАтрибут(Объект, "БанковскийСчет", СчетОрганизации);

	// контрагент и его расчетный счет 
	СпрКонтрагентов = СоздатьОбъект("Справочник.Контрагенты");
	
	СпрКонтрагентов.НайтиПоРеквизиту("ЮрФизЛицо", НайтиОрганизацию(Корреспондент), 1);
	Контрагент    = СпрКонтрагентов.ТекущийЭлемент();
	РасчетныйСчет = НайтиРасчетныйСчет(Корреспондент, "БанковскиеСчета", Контрагент);
	Замены = Замены + ИзменитьАтрибут(Объект, "Контрагент", Контрагент);
	Замены = Замены + ИзменитьАтрибут(Объект, "СчетКонтрагента", РасчетныйСчет);
	
	// вид платежа
	ВидПлатежа=НайтиЗначПеречисления("ВидыПлатежа", ТаблицаДокументов.ВидПлатежа);
	Замены=Замены+ИзменитьАтрибут(Объект, "ВидПлатежа", ВидПлатежа);

	// срок платежа
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("СрокДействия").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "СрокДействия", ТаблицаДокументов.СрокДействия);
	КонецЕсли;

	// реквизиты налогового платежа
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ПеречислениеНалога").Выбран() = 1 Тогда

		Замены=Замены+ИзменитьАтрибут(Объект, "СтатусСоставителяПлДок",ТаблицаДокументов.СтатусСоставителя);
		Замены=Замены+ИзменитьАтрибут(Объект, "КодБК", 			  	   ТаблицаДокументов.ПоказательКБК);
		Замены=Замены+ИзменитьАтрибут(Объект, "КодОКАТО", 			   ТаблицаДокументов.ОКАТО);
		Замены=Замены+ИзменитьАтрибут(Объект, "ПоказательОснования",   ТаблицаДокументов.ПоказательОснования);
		Замены=Замены+ИзменитьАтрибут(Объект, "ПоказательПериода",     ТаблицаДокументов.ПоказательПериода);
		Замены=Замены+ИзменитьАтрибут(Объект, "ПоказательНомера", 	   ТаблицаДокументов.ПоказательНомера);
		Замены=Замены+ИзменитьАтрибут(Объект, "ПоказательДаты", 	   ТаблицаДокументов.ПоказательДаты);
		Замены=Замены+ИзменитьАтрибут(Объект, "ПоказательТипа", 	   ТаблицаДокументов.ПоказательТипа);
		
	КонецЕсли;

	// вид аккредитива
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ВидАккредитива").Выбран() = 1 Тогда
		ВидАккредитива=НайтиЗначПеречисления("ВидыАккредитива", ТаблицаДокументов.ВидАккредитива);
		Замены=Замены+ИзменитьАтрибут(Объект, "ВидАккредитива", ВидАккредитива);
	КонецЕсли;

	// платеж по представлению
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ВидДокумента").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ВидДокумента", ТаблицаДокументов.ПлатежПоПредст);
    КонецЕсли;
		
	// дополнительные условия
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ДопУсловия").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ДопУсловия", ТаблицаДокументов.ДопУсловия);
    КонецЕсли;
		
	// номер счета поставщика
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("НомерСчета40901").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "НомерСчета40901", ТаблицаДокументов.НомерСчетаПоставщика);
    КонецЕсли;
		
	// очередность платежа
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("Очередность").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "Очередность", Число(ТаблицаДокументов.Очередность));
    КонецЕсли;
		
	// строка содержания
	Если ПустаяСтрока(ТаблицаДокументов.НазначениеПлатежа)=0 Тогда
		Назначение=ТаблицаДокументов.НазначениеПлатежа;
	Иначе
		Назначение=ТаблицаДокументов.НазначениеПлатежа1+ТаблицаДокументов.НазначениеПлатежа2+
		           ТаблицаДокументов.НазначениеПлатежа3+ТаблицаДокументов.НазначениеПлатежа4+
				   ТаблицаДокументов.НазначениеПлатежа5+ТаблицаДокументов.НазначениеПлатежа6;
	КонецЕсли;

	// исключение строки НДС из содержания
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("АвтоПодстСуммыНДС").Выбран() = 1 Тогда
		НДС=СтрЗаменить(ФормирСуммаНДС(Объект.АвтоПодстСуммыНДС, Объект.Сумма, Объект.НДС, Объект.СтавкаНДС), РазделительСтрок, " ");
		Если ПустаяСтрока(НДС) = 0 Тогда
			НДС=Найти(Назначение, НДС); 
			Если 0<НДС Тогда Назначение=Лев(Назначение, НДС-1); КонецЕсли;
		КонецЕсли;
    КонецЕсли;
		
	// Назначение платежа
	Замены=Замены+ИзменитьАтрибут(Объект, "Назначение", Назначение);
	
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("УсловиеОплаты").Выбран() = 1 Тогда
		
		УсловиеОплаты=ТаблицаДокументов.УсловиеОплаты1+ТаблицаДокументов.УсловиеОплаты2+
		              ТаблицаДокументов.УсловиеОплаты3;
		// условия оплаты
		Замены=Замены+ИзменитьАтрибут(Объект, "УсловиеОплаты", УсловиеОплаты);
    КонецЕсли;

	// срок акцепта
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("СрокАкцепта").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "СрокАкцепта", Число(ТаблицаДокументов.СрокАкцепта));
	КонецЕсли;
	
	// дата отсылки документов
	Если Метаданные.Документ(Объект.Вид()).РеквизитШапки("ДатаОтсылки").Выбран() = 1 Тогда
		Замены=Замены+ИзменитьАтрибут(Объект, "ДатаОтсылки", ТаблицаДокументов.ДатаОтсылкиДок);
	КонецЕсли;
	
	// запись при необходимости
	Если 0<Замены Тогда
		ЗаписатьДокумент(Объект);
	Иначе	
		Сообщить("Обработан документ: "+Объект, " ");
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаОперации) = 0 Тогда
		// включение документа в банковские выписки
		ПровестиДокументПоСчету(Объект.ТекущийДокумент(), РасчетныйСчет, ДатаОперации, Контрагент);
	КонецЕсли;
	
	Возврат(Объект.ТекущийДокумент());
	
КонецФункции // ЗагрузитьПлатежныйДокумент()


//******************************************************************************
// ОбработатьДокумент(Объект, ДатаОперации, Идентификатор, Синоним, Направление)
//
// Возвращаемое значение:
//  Документ - найденный (созданный) документ "СтрокаВыпискиПриход", ("СтрокаВыпискиРасход")
//
// Описание:
//  Заполняет существующий документ, либо создает новый и его заполняет 
//  информацией из текущей строки таблицы
//
Функция ОбработатьДокумент(Объект, ДатаОперации, Идентификатор, Синоним, Направление)  
	
	Объект.ВыбратьДокументы(ТаблицаДокументов.Дата, ТаблицаДокументов.Дата);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Если Объект.КлиентИдентификатор=Идентификатор Тогда 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	                     
	Если ПустоеЗначение(ДатаОперации) = 1 Тогда                
		Сообщить("Не указана дата операции для суммы " + Формат(ТаблицаДокументов.Сумма, "Ч15.2"), "I");
		Возврат ПустоеЗначение("Документ.СтрокаВыпискиПриход");
	КонецЕсли;
	
	// обработка найденного или создание нового документа
	Если Объект.Выбран()=1 Тогда
		СнятьПометкуУдаления(Объект);
 	Иначе
		Объект.Новый();  
		глУстановитьТипВидРеквизита(Объект, "Счет", "Счет");
		Объект.ДатаДок = ДатаОперации;
		Объект.УстановитьНовыйНомер(СокрЛП(Константа.ПрефиксИБ) + Фирма.ЮрЛицо.ПрефиксНомеровДокументов);
		
		Объект.КлиентИдентификатор=Идентификатор;
		Сообщить("Создан документ: "+Объект.Вид()+" "+Объект.НомерДок+" ("+Объект.ДатаДок+")", " ");
	КонецЕсли;

	Замены=0;
	// дата документа
	Замены=Замены+ИзменитьАтрибут(Объект, "ДатаДок", ТаблицаДокументов.Дата);
	// сумма документа
	Замены=Замены+ИзменитьАтрибут(Объект, "Сумма", ТаблицаДокументов.Сумма);

	// док основание документа
	Замены=Замены+ИзменитьАтрибут(Объект, "ДокОснование", ТаблицаДокументов.ДокументОснование);
	
	Если Направление = 2 Тогда
		// плательщик и его расчетный счет - элементы справочников
		Плательщик     = НайтиОрганизацию("Плательщик");

		КПлательшик = СоздатьОбъект("Справочник.Контрагенты");
		КПлательшик.НайтиПоРеквизиту("ЮрФизЛицо", Плательщик, 1);
		КодОперации = Перечисление.КодыОпераций.ОплатаОтПокупателя;
		
		// плательщик
		Замены=Замены+ИзменитьАтрибут(Объект, "Контрагент", КПлательшик.ТекущийЭлемент());

		// получатель	
		Получатель     = НайтиОрганизацию("Получатель");
		Если ПустоеЗначение(ТаблицаДокументов.ДокументОснование.Фирма) = 1 Тогда
			Замены=Замены+ИзменитьАтрибут(Объект, "Фирма", Получатель);
		Иначе
			Замены=Замены+ИзменитьАтрибут(Объект, "Фирма", ТаблицаДокументов.ДокументОснование.Фирма);
		КонецЕсли;
		
		ПолучательСчет = НайтиРасчетныйСчет("Получатель", "БанковскиеСчета", Получатель);
		Если ЗагрРасчетныеСчета.НайтиЗначение(ТаблицаДокументов.ПолучательСчет) = 0 Тогда
			Сообщить("Операция на сумму " + ТаблицаДокументов.Сумма + "руб. от " + ДатаОперации + " не может быть записана в базу - расчетный счет отсутствует в списке расчетных счетов к приему!", "!");
			Возврат ПустоеЗначение("Документ");
		КонецЕсли;
		
		Замены=Замены+ИзменитьАтрибут(Объект, "БанковскийСчет", ПолучательСчет);
		
	ИначеЕсли Направление = 1 Тогда                           
		// получатель и его расчетный счет - элементы справочников
		Получатель     = НайтиОрганизацию("Получатель");
		
		КПолучатель = СоздатьОбъект("Справочник.Контрагенты");
		КПолучатель.НайтиПоРеквизиту("ЮрФизЛицо", Получатель, 1);
  		КодОперации = Перечисление.КодыОпераций.ОплатаПоставщику;

		// получатель
		Замены=Замены+ИзменитьАтрибут(Объект, "Контрагент", КПолучатель.ТекущийЭлемент());

		// плательщик	
		Плательщик     = НайтиОрганизацию("Плательщик");
		Если ПустоеЗначение(ТаблицаДокументов.ДокументОснование.Фирма) = 1 Тогда
			Замены=Замены+ИзменитьАтрибут(Объект, "Фирма", Плательщик);
		Иначе
			Замены=Замены+ИзменитьАтрибут(Объект, "Фирма", ТаблицаДокументов.ДокументОснование.Фирма);
		КонецЕсли;
		ПлательщикСчет = НайтиРасчетныйСчет("Плательщик", "БанковскиеСчета", Плательщик);
		Если ЗагрРасчетныеСчета.НайтиЗначение(ТаблицаДокументов.ПлательщикСчет) = 0 Тогда
			Сообщить("Операция на сумму " + ТаблицаДокументов.Сумма + "руб. от " + ДатаОперации + " не может быть записана в базу - расчетный счет отсутствует в списке расчетных счетов к приему!", "!");
			Возврат ПустоеЗначение("Документ");
		КонецЕсли;
		Замены=Замены+ИзменитьАтрибут(Объект, "БанковскийСчет", ПлательщикСчет);

	КонецЕсли;

	Замены=Замены+ИзменитьАтрибут(Объект, "КодОперации",КодОперации);

	// таблица всех реквизитов документа
	Реквизиты=СоздатьОбъект("СписокЗначений");

	// отбор всех непустых реквизитов
	Стр=ТаблицаДокументов.НомерСтроки;
	Для Кол=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
		Значение=ТаблицаДокументов.ПолучитьЗначение(Стр, Кол);
        Если ПустоеЗначение(Значение)=1 Тогда Продолжить; КонецЕсли;
		Имя=ТаблицаДокументов.ПолучитьПараметрыКолонки(Кол, "", 0, 0, Синоним);
		Реквизиты.ДобавитьЗначение(Строка(Значение)); 
		Реквизиты.ДобавитьЗначение(Синоним); 
	КонецЦикла;
    
	Объект.КлиентРеквизиты = Реквизиты.ВСтрокуСРазделителями();
	
	// запись документа при необходимости
	Если Замены > 0 Тогда
		ЗаписатьДокумент(Объект);
	Иначе	
		Сообщить("Обработан документ: "+Объект, " ");
	КонецЕсли;

КонецФункции // ОбработатьДокумент()

//******************************************************************************
// ЗагрузитьОперациюПоРасчетномуСчету()
//
// Возвращаемое значение:
//  Документ - найденный (созданный) документ "ОперацияПоРасчСчету".
//
// Описание:
//  Осуществляет поиск в информационной базе документа "ОперацияПоРасчСчету", если 
// такой документ несуществует добавляется новый. Затем вызывается процедура  
// ПровестиДокументПоСчету(), осуществляющая формирование движений в учете.
//
Функция ЗагрузитьОперациюПоРасчетномуСчету()
	
	Перем Синоним;
	
	// строка, идентифицирующая документ
	Идентификатор=СокрЛП(ТаблицаДокументов.СекцияДокумент)+ 
				  СокрЛП(ТаблицаДокументов.Номер)+
	              " с "+СокрЛП(ТаблицаДокументов.ПлательщикСчет)+
	              " на "+СокрЛП(ТаблицаДокументов.ПолучательСчет);
				  
	// определяем направление перемещения средств
	//Если ПустоеЗначение(ТаблицаДокументов.ДатаСписано) = 0 Тогда
	//	Направление = 1; // расходование средств 
	//ИначеЕсли ПустоеЗначение(ТаблицаДокументов.ДатаПоступило) = 0 Тогда
	//	Направление = 2; // приход средств 
	//Иначе
	//    Сообщить("Не указаны ни дата списания, ни дата поступления средств на сумму " + ТаблицаДокументов.Сумма + " руб. от " + ТаблицаДокументов.Дата, "!");
	//	Возврат 0;
	//КонецЕсли;  

	Если (ПустоеЗначение(ТаблицаДокументов.ДатаСписано) = 1) И (ПустоеЗначение(ТаблицаДокументов.ДатаПоступило) = 1) Тогда
	    Сообщить("Не указаны ни дата списания, ни дата поступления средств на сумму " + ТаблицаДокументов.Сумма + " руб. от " + ТаблицаДокументов.Дата, "!");
		Возврат 0;
	КонецЕсли;
	
	Если (ЗагрРасчетныеСчета.НайтиЗначение(ТаблицаДокументов.ПлательщикСчет) = 0 ) И (ЗагрРасчетныеСчета.НайтиЗначение(ТаблицаДокументов.ПолучательСчет) = 0) Тогда
	    Сообщить("Не найдено счетов перечисленных в заголовке файла для суммы " + ТаблицаДокументов.Сумма + " руб. от " + ТаблицаДокументов.Дата, "!");
		Возврат 0;
	КонецЕсли;
	
	Если СписокРасчетныхСчетовФирмы.НайтиЗначение(ТаблицаДокументов.ПлательщикСчет) > 0 Тогда
		Направление = 1; // расходование средств 
	ИначеЕсли СписокРасчетныхСчетовФирмы.НайтиЗначение(ТаблицаДокументов.ПолучательСчет) > 0 Тогда
		Направление = 2; // приход средств 
	Иначе
		Направление = 0;
	КонецЕсли;
	
	// поиск ранее загруженного документа 
	Если Направление = 1 Тогда
		// среди документов строка выписки расход
		Объект=СоздатьОбъект("Документ.СтрокаВыпискиРасход");   
		ДатаОперации = ТаблицаДокументов.ДатаСписано;
		
	ИначеЕсли Направление = 2 Тогда
		// среди документов строка выписки приход
		Объект=СоздатьОбъект("Документ.СтрокаВыпискиПриход");   
		ДатаОперации = ТаблицаДокументов.ДатаПоступило;

	Иначе
		Сообщить("В документе не найден расчетный счет организации!", "!");
		Сообщить("Дата : " + ТаблицаДокументов.Дата, "I");
		Сообщить("Сумма : " + ТаблицаДокументов.Сумма, "I");
		Сообщить("Р/С плательщика: " + ТаблицаДокументов.ПлательщикСчет, "I");
		Сообщить("Р/С получателя: " + ТаблицаДокументов.ПолучательСчет, "I");
		Возврат ПустоеЗначение("Документ.СтрокаВыпискиПриход");
	КонецЕсли;
	
	ОбработатьДокумент(Объект, ДатаОперации, Идентификатор, Синоним, Направление);  
	
	Если (Направление = 1) И (СписокРасчетныхСчетовФирмы.НайтиЗначение(ТаблицаДокументов.ПолучательСчет) > 0) Тогда
		ДополнительныйДокумент = СоздатьОбъект("Документ.СтрокаВыпискиПриход");
		ОбработатьДокумент(ДополнительныйДокумент , ДатаОперации, Идентификатор, Синоним, 2);  
	КонецЕсли;
		
	Возврат(Объект.ТекущийДокумент());
	
КонецФункции // ЗагрузитьОперациюПоРасчетномуСчету()

//******************************************************************************
// ЗагрузитьТаблицуДокументов()
//
// Описание:
//  Процедура осуществляет последовательный вызов процедур поиска (создания) 
// платежных документов на основании сформированной таблицы загружаемых 
// документов, при этом формируется список загруженных документов.
//
Процедура ЗагрузитьТаблицуДокументов()

	ЗагрДокументы.УдалитьВсе();
	
	ТаблицаДокументов.ВыбратьСтроки();
	Пока ТаблицаДокументов.ПолучитьСтроку()=1 Цикл

        Документ=ЗагрузитьПлатежныйДокумент();
		ТаблицаДокументов.УстановитьЗначение(ТаблицаДокументов.НомерСтроки, "ДокументОснование", Документ);
		Если ПустоеЗначение(Документ)=1 Тогда
			Документ=ЗагрузитьОперациюПоРасчетномуСчету();

			Если ПустоеЗначение(Документ)=1 Тогда
				Продолжить;
			КонецЕсли;                                                      

		КонецЕсли;
		
		Если 0=ЗагрДокументы.НайтиЗначение(Документ) Тогда
			ЗагрДокументы.ДобавитьЗначение(Документ);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗагрузитьТаблицуДокументов()

//******************************************************************************
// СинхронизироватьДокументы(Вид, Атрибут1, Атрибут2)
//
// Параметры:
//  Вид      - строка, вид (идентификатор) документа.
//  Атрибут1 - строка, вид (идентификатор) атрибута 1 документа (банковский счет).
//  Атрибут2 - строка, вид (идентификатор) атрибута 2 документа (банковский счет).
//
// Описание:
//  Процедура синхронизирует документ определенного вид за загружаемый период.
// При этом документ, не вошедший в список загруженных, помечается на удаление,
// при условии что документы данного вида загружались.
//
Процедура СинхронизироватьДокументы(Вид, Атрибут1, Атрибут2)
	
	Если ПустоеЗначение(Вид) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Объект=СоздатьОбъект("Документ."+Вид);
	Объект.ВыбратьДокументы(НачДатаЗагрузки, КонДатаЗагрузки);
	Пока Объект.ПолучитьДокумент()=1 Цикл
		Счет1=Объект.ПолучитьАтрибут(Атрибут1); 
		Счет2=Объект.ПолучитьАтрибут(Атрибут2);
		
		Если ЗагрДокументы.Принадлежит(Объект.ТекущийДокумент())=1 Тогда
			
		ИначеЕсли Счет1.Выбран()=0 Тогда
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Счет1.НомерСчета)=1 Тогда
			УдалитьДокумент(Объект);

		ИначеЕсли Счет2.Выбран()=0 Тогда
		ИначеЕсли ЗагрРасчетныеСчета.Принадлежит(Счет2.НомерСчета)=1 Тогда
			УдалитьДокумент(Объект);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СинхронизироватьДокументы()

//******************************************************************************
// СинхронизироватьСчета()
//
// Описание:
//  Процедура осуществляет синхронизацию платежных документов и документов 
// формирующих движения в учете по расчетным счетам.
//
Процедура СинхронизироватьСчета()
	
	СинхронизироватьДокументыПоСчетам();
	
	Для Н=1 По ЗагрВидыДокументов.РазмерСписка() Цикл
		ВидДокумента=ЗагрВидыДокументов.ПолучитьЗначение(Н);
		СинхронизироватьДокументы(ВидДокумента, "РасчетныйСчет", "СчетКонтрагента");
	КонецЦикла;
	СинхронизироватьДокументы("СтрокаВыпискиПриход", "БанковскийСчет", "БанковскийСчет");
	СинхронизироватьДокументы("СтрокаВыпискиРасход", "БанковскийСчет", "БанковскийСчет");
	
КонецПроцедуры // СинхронизироватьСчета()

//******************************************************************************
// ОшибкаЗагрузкиТекста(Ном, СтрТекста, СтрОшибки)
//
//  Ном       - число, номер текущей строки файла обмена данными.
//  СтрТекста - строка, строка файла обмена данными.
//  СтрОшибки - строка, строка описания ошибки.
//
// Описание:
//  Процедура сообщает об ошибки загрузки данных из файла обмена даннами.
//
Процедура ОшибкаЗагрузкиТекста(Ном, СтрТекста, СтрОшибки)
	
	Стр="Ошибка: ";
	Если 0<Ном Тогда Стр=Стр+"строка "+Ном+", "; КонецЕсли;
	Если ПустаяСтрока(СтрТекста)=0 Тогда Стр=Стр+""""+СтрТекста+""", "; КонецЕсли;
	
	Сообщить(Стр+СтрОшибки, "!!");
	
КонецПроцедуры // ОшибкаЗагрузкиТекста()

//******************************************************************************
// ЗагрузитьСтрокуЗаголовка(Стр, Ном)
//
// Параметры:
//  Стр - строка, строка файла обмена данными.
//  Ном - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет загрузку строки заголовка файла обмена даннами.
//
Процедура ЗагрузитьСтрокуЗаголовка(Стр, Ном)
	
	Равно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, Равно-1))); Значение=Сред(Стр, Равно+1);

	Если Равно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");

	ИначеЕсли Имя="ВЕРСИЯФОРМАТА" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Версия формата файла:");
	ИначеЕсли Имя="КОДИРОВКА" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Кодировка файла:");
	ИначеЕсли Имя="ОТПРАВИТЕЛЬ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Программа-экспортер:");
	ИначеЕсли Имя="ПОЛУЧАТЕЛЬ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Программа-импортер:");
	ИначеЕсли Имя="ДАТАСОЗДАНИЯ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Дата создания файла:");
	ИначеЕсли Имя="ВРЕМЯСОЗДАНИЯ" Тогда
// 	ДобавитьПараметрЗагрузки(Значение, "Время создания файла:");

	ИначеЕсли Имя="ДАТАНАЧАЛА" Тогда
		НачДатаЗагрузки=Дата(СокрЛП(Значение));
// 	ДобавитьПараметрЗагрузки(Значение, "Начало интервала:");
			
	ИначеЕсли Имя="ДАТАКОНЦА" Тогда
		КонДатаЗагрузки=Дата(СокрЛП(Значение));
// 	ДобавитьПараметрЗагрузки(Значение, "Конец интервала:");

	ИначеЕсли Имя="РАСЧСЧЕТ" Тогда
		Значение=СокрЛП(Значение);
		ЗагрРасчетныеСчета.Установить(Значение, Значение);
		// 	ТекстРасчСчетаЗагрузки=ТекстРасчСчетаЗагрузки+Значение+РазделительСтрок;
		
	ИначеЕсли Имя="ДОКУМЕНТ" Тогда
		Значение = Врег(СокрЛП(Значение)); 
		Если Значение = "ЗАЯВЛЕНИЕ НА АККРЕДИТИВ" Тогда
			Значение = "АККРЕДИТИВ";
		КонецЕсли;
		ВидДокумента = ВыгрВидыДокументов.Получить(Значение);
		
		Если ПустаяСтрока(ВидДокумента) = 0 Тогда
			ЗагрВидыДокументов.Установить(ВидДокумента, ВидДокумента);
			
		Иначе
			Таб = СоздатьОбъект("Таблица");
			Таб.ИсходнаяТаблица("ВидыДокументов");
			Таб.Вывести();
			Для Индекс = 1 По Таб.ВысотаТаблицы() Цикл
				Если  Врег(СокрЛП(Таб.Область(Индекс, 2).Текст)) = Значение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Индекс > Таб.ВысотаТаблицы() Тогда
				ОшибкаЗагрузкиТекста(Ном, Стр, "неверный вид документа: """+Значение+""""); 
			Иначе
				ЗагрВидыДокументов.Установить(ВидДокумента, ВидДокумента);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОшибкаЗагрузкиТекста(Ном, Стр, "неверный идентификатор: """+Имя+"""");
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСтрокуЗаголовка()

//******************************************************************************
// ЗагрузитьСтрокуДокумента(Стр, Ном)
//
//  Стр - строка, строка файла обмена данными.
//  Ном - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет запись строки секции "Секция платежного документа"
//  файла обмена даннами, в таблицу значений загружаемых документов.
//
Процедура ЗагрузитьСтрокуДокумента(Стр, Ном)
	
	Перем Тип, Длина;
	
	Равно=Найти(Стр, "=");
	Имя=Врег(СокрЛП(Лев(Стр, Равно-1))); Значение=Сред(Стр, Равно+1);
	
	Если Имя = "ДОПОЛНУСЛОВИЯ" Тогда
		Имя = "ДОПУСЛОВИЯ";
	КонецЕсли;

	Если Имя = "СРОКПЛАТЕЖА" Тогда
		Имя = "СРОКДЕЙСТВИЯ";
	КонецЕсли;

	Колонка=АтрибутыДокументов.Получить(Имя);

	Если Равно=0 Тогда
		ОшибкаЗагрузкиТекста(Ном, Стр, "не найден символ ""=""");

	ИначеЕсли ПустоеЗначение(Колонка)=0 Тогда
		ТаблицаДокументов.ПолучитьПараметрыКолонки(Колонка, Тип, Длина);
		Если      Тип="Число" Тогда	Значение=Число(СокрЛП(Значение));
		ИначеЕсли Тип="Дата"  Тогда Значение=Дата(СокрЛП(Значение));
		ИначеЕсли Длина<>0    Тогда Значение=СокрЛП(Значение);
		КонецЕсли;
                                                 
		Если ((Имя = "ПЛАТЕЛЬЩИКИНН") ИЛИ (Имя = "ПОЛУЧАТЕЛЬИНН")) И (СтрДлина(Значение) < 10) Тогда
			Сообщить("Значение поля """ + Имя + """  """ + Значение + """ имеет недопустимо малую длину!", "!");
		КонецЕсли;
		
		НомерСтроки=ТаблицаДокументов.НомерСтроки;
		ТаблицаДокументов.УстановитьЗначение(НомерСтроки, Колонка, Значение);
	
	Иначе
		ОшибкаЗагрузкиТекста(Ном, Стр, "неверный идентификатор: """+Имя+"""");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСтрокуДокумента()

//******************************************************************************
// ЗагрузитьСекциюДокумента(Текст, К)
//
// Параметры:
//  Текст - текст, текст файла обмена данными.
//  К     - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет обход секции "Секция платежного документа"
//  файла обмена даннами.
//
Процедура ЗагрузитьСекциюДокумента(Текст, К)
	
	ТаблицаДокументов.НоваяСтрока();
	
	Для К=К по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустоеЗначение(Стр)=1 Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;

		ЗагрузитьСтрокуДокумента(Стр, К);
	КонецЦикла;

	ВидДокумента=ВидыОпераций.Получить(ТаблицаДокументов.ВидОплаты);
	Если ПустоеЗначение(ВидДокумента)=0 Тогда
		ТаблицаДокументов.СекцияДокумент=ВидДокумента;
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьСекциюДокумента()

//******************************************************************************
// ЗагрузитьСекциюРасчСчета(Текст, К)
//
// Параметры:
//  Текст - текст, текст файла обмена данными.
//  К     - число, номер текущей строки файла обмена данными.
//
// Описание:
//  Процедура осуществляет обход секции "Секция передачи остатков по расчетному счету"
//  файла обмена даннами.
//
Процедура ЗагрузитьСекциюРасчСчета(Текст, К)
	
	Для К=К+1 по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустоеЗначение(Стр)=1 Тогда 
			Продолжить;
		ИначеЕсли Врег(Лев(СокрЛП(Стр), 5))="КОНЕЦ" Тогда 
			Прервать; 
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьСекциюРасчСчета()

//******************************************************************************
// ЗагрузитьТекст()
//
// Вызывается из формул элементов диалога:
//  Кнопка "кнЗагрузить".
//
// Описание:
//  Осуществляется загрузка файла обмена данными из системы "Клиент банка",
// в соответствии с принятым форматом.
//
Процедура ЗагрузитьТекст()
	
	Перем Запрос, ТекстЗапроса;

	Если КаталогИмяФайла(ИмяФайлаЗагрузки, "", "") = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТаблицаДокументов.УдалитьСтроки();

	Текст=ТекстФайла(ИмяФайлаЗагрузки);
	Если ПустоеЗначение(Текст)=1 Тогда Возврат; КонецЕсли;
	
	Для К=2 по Текст.КоличествоСтрок() Цикл
		Состояние("Обработка: строка "+К);
		Стр=Текст.ПолучитьСтроку(К);
		
		Если ПустаяСтрока(Стр)=1 Тогда
			Продолжить;
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 10)="КОНЕЦФАЙЛА" Тогда 
			Прервать; 
		
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯДОКУМЕНТ" Тогда 
            ЗагрузитьСекциюДокумента(Текст, К);
			
		ИначеЕсли Лев(Врег(СокрЛП(Стр)), 14)="СЕКЦИЯРАСЧСЧЕТ" Тогда 
			ЗагрузитьСекциюРасчСчета(Текст, К);
			
		Иначе
			ЗагрузитьСтрокуЗаголовка(Стр, К);
			
		КонецЕсли;
		
	КонецЦикла;
                              
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");

	ТекстЗапроса = 
	"//{{ЗАПРОС(ПолучитьСчета)
	|ТекущийЭлемент = Справочник.БанковскиеСчета.ТекущийЭлемент;
	|НомерСчета = Справочник.БанковскиеСчета.НомерСчета;
	|ЮрФизЛицо = Справочник.БанковскиеСчета.ЮрФизЛицо;
	|Группировка ТекущийЭлемент;
	|Условие(ЮрФизЛицо = Фирма.ЮрЛицо);
	|"//}}ЗАПРОС
	;
	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	// Подготовка к заполнению выходных форм данными запроса

	// Заполнение полей "Заголовок"

	СписокРасчетныхСчетовФирмы = СоздатьОбъект("СписокЗначений");	

	Пока Запрос.Группировка(1) = 1 Цикл
		СписокРасчетныхСчетовФирмы.ДобавитьЗначение(Запрос.НомерСчета);
	КонецЦикла;
	
	ЗагрузитьТаблицуДокументов();
	СинхронизироватьСчета();
	
	Если ВыводитьОтчет=1 Тогда 
		Печать();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьТекст()

//******************************************************************************
// ПриСменеЮрЛица()
//
// Вызывается из формул элементов диалога:
//  Поле "ЮрЛицо".
//
// Описание:
//  Осуществляется действия при смене юрлица
//
Процедура ПриСменеЮрЛица()
	
	ЗаполнитьРасчетныеСчета();
	
КонецПроцедуры // ПриСменеЮрЛица()

//******************************************************************************
// Обновить()
//
// Вызывается из формул элементов диалога:
//  Кнопка "обновить".
//
// Описание:
//  Осуществляется действия по перезаполеннию списка документов к распределению
//
Процедура Обновить()
	
	Перем Запрос, ТекстЗапроса, Таб;

	ТаблицаРаспределения.Очистить();
	
	ТаблицаРаспределения.НоваяКолонка("Вид",			"Число",	1,	0,	"Вид", 		3);
	ТаблицаРаспределения.НоваяКолонка("Номер",			"Строка",	,	,	"Номер", 	6);
	ТаблицаРаспределения.НоваяКолонка("Счет",			"Справочник.БанковскиеСчета",	, ,	"Счет",	12);	
	ТаблицаРаспределения.НоваяКолонка("Дата",			"Дата",		,	,	"Дата",		4); 	
	ТаблицаРаспределения.НоваяКолонка("Сумма",			"Число",	15, 2,	"Сумма",	5);
	ТаблицаРаспределения.НоваяКолонка("Контрагент",		"Справочник.Контрагенты",	15, 2,	"Контрагент",	12);
	ТаблицаРаспределения.НоваяКолонка("Документ",		"Документ",	, ,	"");
	ТаблицаРаспределения.ВидимостьКолонки("Документ",0); 

	ТаблицаРаспределения.ВыводитьПиктограммы("Вид");
	  
	//Создание объекта типа Запрос
	Запрос = СоздатьОбъект("Запрос");
                                 
	ДатаНач = НачГода(РабочаяДата() - 365);
	ДатаКон = КонГода(РабочаяДата());
	
	ТекстЗапроса = 
	"//{{ЗАПРОС(ПолучитьВыписки)
	|Период С ДатаНач По ДатаКон;
	|ОбрабатыватьДокументы все;
	|ТекущийДокумент = Документ.СтрокаВыпискиПриход.ТекущийДокумент, Документ.СтрокаВыпискиРасход.ТекущийДокумент;
	|БанковскийСчет = Документ.СтрокаВыпискиПриход.БанковскийСчет, Документ.СтрокаВыпискиРасход.БанковскийСчет;
	|Контрагент = Документ.СтрокаВыпискиПриход.Контрагент, Документ.СтрокаВыпискиРасход.Контрагент;
	|Группировка ТекущийДокумент;
	|Условие((БанковскийСчет.Выбран() + Контрагент.Выбран()) < 2); 
	|Условие(ТекущийДокумент.КодОперации <> Перечисление.КодыОпераций.Прочее); 	
	|Условие(ПустоеЗначение(ТекущийДокумент.КлиентРеквизиты) = 0); 		
	|"//}}ЗАПРОС
	;

	// Если ошибка в запросе, то выход из процедуры
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;

	Пока Запрос.Группировка(1) = 1 Цикл    
		
		ТаблицаРаспределения.НоваяСтрока();
		Если Запрос.ТекущийДокумент.Вид() = "СтрокаВыпискиПриход" Тогда
			ТаблицаРаспределения.Вид = 1;
		Иначе 
			ТаблицаРаспределения.Вид = 2;
		КонецЕсли;
		
		ТаблицаРаспределения.Номер 		= Запрос.ТекущийДокумент.НомерДок;
		ТаблицаРаспределения.Дата 		= Запрос.ТекущийДокумент.ДатаДок;
		ТаблицаРаспределения.Сумма 		= Запрос.ТекущийДокумент.Сумма;
		ТаблицаРаспределения.Счет		= Запрос.ТекущийДокумент.БанковскийСчет; 
		ТаблицаРаспределения.Контрагент = Запрос.Контрагент; 
		ТаблицаРаспределения.Документ	= Запрос.ТекущийДокумент; 		
		
	КонецЦикла;

	КолонкаПоследнейСортировки = "";    
	ПриИзмененииСтрокиВТаблице();
	
КонецПроцедуры // Обновить()

//******************************************************************************
// Добавить()
//
// Вызывается из формул элементов диалога:
//  Кнопка "обновить".
//
// Описание:
//  Осуществляется добавление нового контагента в базу без записи
//
Процедура Добавить()
     
	Если ПустоеЗначение(ТаблицаРаспределения.Документ) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРаспределения.Документ.Вид() = "СтрокаВыпискиПриход" Тогда
		Направление = 1;
	Иначе 
		Направление = 2;
	КонецЕсли;		
	
	НомерСтроки = 0;
	Если ТаблицаРеквизитов.НайтиЗначение(?(Направление = 1 ,"Наименование плательщика","Наименование получателя"),НомерСтроки,1) = 1 Тогда
		Наименование = СокрЛП(ТаблицаРеквизитов.ПолучитьЗначение(НомерСтроки,"Значение"));
		НомерСтроки = 0;
	Иначе
		Если Вопрос("В пришедшем документе отсутсвует наименование контрагента, вы хотите ввести новый?", "Да+Нет", 60) = "Да" Тогда
				ОткрытьФормуМодально("Справочник.Контрагенты");
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// создаем юр лицо с нужными реквизитами
	СпрЮЛ = СоздатьОбъект("Справочник.ЮрЛица");
	НужноВвестиНовое = 1;

	Если СпрЮЛ.НайтиПоНаименованию(Наименование,0,1) = 1 Тогда
		Если Вопрос("В информационной базе уже существует юридическое лицо с таким наименованием. Добавить новое?", "Да+Нет", 60) <> "Да" Тогда
			НужноВвестиНовое = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноВвестиНовое = 1 Тогда
		
		СпрЮЛ.Новый();
		
		СпрЮЛ.Наименование = Наименование;
		СпрЮЛ.ПолнНаименование = Наименование;
		
		Если ТаблицаРеквизитов.НайтиЗначение(?(Направление = 1 ,"ИНН плательщика","ИНН получателя"),НомерСтроки,1) = 1 Тогда
			СпрЮЛ.ИНН = ТаблицаРеквизитов.ПолучитьЗначение(НомерСтроки,"Значение");
			НомерСтроки = 0;
		КонецЕсли;
		
		СпрЮЛ.Комментарий = "Создано обработкой обмена данными с клиентом банковской системы.";
		СпрЮЛ.Записать();
		
	КонецЕсли;
		
	//создаём контрагента с юр лицом
	Спр = СоздатьОбъект("Справочник.Контрагенты");
	НужноВвестиНовое = 1;
	
	Если Спр.НайтиПоРеквизиту("ЮрФизЛицо", СпрЮЛ.ТекущийЭлемент(), 1) = 1 Тогда
		Если Вопрос("В информационной базе уже существует контрагент, отражающий такое юридическое лицо. Добавить новый?", "Да+Нет", 60) <> "Да" Тогда
			НужноВвестиНовое = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НужноВвестиНовое = 1 Тогда
		Спр.Новый();
		Спр.ЮрФизЛицо = СпрЮЛ.ТекущийЭлемент();
		Спр.Наименование = СпрЮЛ.Наименование; 
		
		Спр.Комментарий = "Создано обработкой обмена данными с клиентом банковской системы.";
		Спр.Записать();

		// Объект для записи основного счета.
		СпрДог = СоздатьОбъект("Справочник.Договоры");
		СпрДог.Новый();
		СпрДог.Владелец = Спр.ТекущийЭлемент();
		
		// Заполнение реквизитов слоя "ОсновнойДоговор".
		СпрДог.Наименование           = "Основной договор";
		СпрДог.ВалютаВзаиморасчетов   = Константа.ВалютаБухУчета;
		
		СпрДог.Записать();
		
		// Установка основного договора.
		Спр.ОсновнойДоговор = СпрДог.ТекущийЭлемент();
		
		Спр.Записать();

	КонецЕсли;
	
	ОткрытьФормуМодально(Спр.ТекущийЭлемент());
	
	Док = СоздатьОбъект("Документ." + ТаблицаРаспределения.Документ.Вид());
	Док.НайтиДокумент(ТаблицаРаспределения.Документ);
	Док.Контрагент = Спр.ТекущийЭлемент();
	Док.Записать();
	
	Если Вопрос("Провести документ?", "Да+Нет", 60) = "Да" Тогда
		Док.Провести();
	КонецЕсли;
	Обновить();	

КонецПроцедуры // Добавить()

//******************************************************************************
// ОбработкаКликаПоТаблице()
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога:
//  Вызывается при двойном щелчке мыши и нажатии Enter на таблице значений "СписокПлательщиков".
//
// Описание:
//  Если текущая колонка:
//	"История"      - инвертируем сожержимое 1-0, 0-1
//	другая колонка - сртируем по колонке
//
Процедура ОбработкаКликаПоТаблице()
	               

	Если ТаблицаРаспределения.ТекущаяСтрока()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРаспределения.ТекущаяКолонка()="Вид" Тогда
		ОткрытьФорму(ТаблицаРаспределения.Документ);
	Иначе
  		Если КолонкаПоследнейСортировки = ТаблицаРаспределения.ТекущаяКолонка() Тогда    
          	ТаблицаРаспределения.Сортировать(ТаблицаРаспределения.ТекущаяКолонка() + "-",);
			КолонкаПоследнейСортировки = "";    
		Иначе
          	ТаблицаРаспределения.Сортировать(ТаблицаРаспределения.ТекущаяКолонка() + "+",);
		  	КолонкаПоследнейСортировки = ТаблицаРаспределения.ТекущаяКолонка();    
		КонецЕсли;  	
	КонецЕсли;
	
КонецПроцедуры	// ОбработкаКликаПоТаблице()

//******************************************************************************
// ОткрытьДокумент()
//
// Вызывается из процедры модуля:
//  ВыбратьЗначение().
//
// Описание:
//  Открывает форму документа, из текущей строки таблицы
//
Процедура ОткрытьДокумент()

	Если ТаблицаРаспределения.КоличествоСтрок() = 0 Тогда
		Возврат;
	КонецЕсли;	  
	
	Если ПустоеЗначение(ТаблицаРаспределения.Документ.Вид()) = 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ТаблицаРаспределения.Документ);
	
КонецПроцедуры // ОткрытьДокумент()

//******************************************************************************
// ВыбратьЗначение()
//
// Параметры:
//  нет
//
// Описание:
//  вводит значение в таблицу реквитов
//
Процедура ВыбратьЗначение()
            
	ОткрытьДокумент();

КонецПроцедуры // ВыбратьЗначение

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ПриОткрытии(Настройка) 
	
	Если Настройка=0 Тогда
		ИмяФайлаВыгрузки=КаталогПользователя()+"1c_to_kl.txt";
		ИмяФайлаЗагрузки=КаталогПользователя()+"kl_to_1c.txt";
		Фирма = глЗначениеПоУмолчанию("ОсновнаяФирма");
	КонецЕсли;

	ЗаполнитьРасчетныеСчета(); ЗаполнитьВыгрВидыДок();
	НачДатаВыгрузки=РабочаяДата(); КонДатаВыгрузки=РабочаяДата();
	КлиентБанка = ВосстановитьЗначение("ПрограммаКлиентБанка");

	Форма.ИспользоватьСлой(Форма.Закладки.ПолучитьЗначение(1), 2);
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриЗакрытии()

	СохранитьЗначение("ПрограммаКлиентБанка",КлиентБанка);

КонецПроцедуры // ПриЗакрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(НомерЗакладки, ЗначениеЗакладки)
	
	Форма.ИспользоватьСлой(ЗначениеЗакладки, 2);

КонецПроцедуры // ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриНачалеВыбораЗначения(ЭлементДиалога, ФлагОбработки)
	
	Перем Каталог, Файл; 
	
	Если ЭлементДиалога="ИмяФайлаВыгрузки" Тогда
		КаталогИмяФайла(ИмяФайлаВыгрузки, Каталог, Файл);
		Если ФС.ВыбратьФайл(0, Файл, Каталог, "Файл выгрузки", 
		                    "Текстовые (*.txt)|*.txt", "txt")=1 Тогда
			ИмяФайлаВыгрузки=Каталог+Файл; 
		КонецЕсли;

	ИначеЕсли ЭлементДиалога="ИмяФайлаЗагрузки" Тогда
		КаталогИмяФайла(ИмяФайлаЗагрузки, Каталог, Файл);
		Если ФС.ВыбратьФайл(0, Файл, Каталог, "Файл загрузки", 
		                    "Текстовые (*.txt)|*.txt", "txt")=1 Тогда
			ИмяФайлаЗагрузки=Каталог+Файл; 
		КонецЕсли;

	ИначеЕсли ЭлементДиалога="КлиентБанка" Тогда
		Список=СоздатьОбъект("СписокЗначений");
		Список.ДобавитьЗначение("DiasoftCLIENT 4x4 for Windows Диасофт");
		Список.ДобавитьЗначение("Клиент-Банк РФК");
		Список.ДобавитьЗначение("LanVisit DOS 4.90 Ланит");
		Список.ДобавитьЗначение("ДБО BS-Client v.3 BSS");
		Список.ДобавитьЗначение("Система клиент-банк TIVAL");
		Список.ДобавитьЗначение("Клиент банка InterBank v.5.1 R-Style Software Lab");
		Список.ДобавитьЗначение("""Электронный клиент"" АКБ Автобанк");
		Список.ДобавитьЗначение("""Клиент-ТЕЛЕБАНК"" АОЗТ Степ Ап");
		Список.ДобавитьЗначение("ИНИСТ Банк-Клиент ЗАО ИНИСТ");
		Список.ДобавитьЗначение("Клиент-банк МИБ");
		Список.ДобавитьЗначение("Система Клиент-Банк ""BClient""");
		Список.ДобавитьЗначение("Система электронных расчетов QuickPay ЗАО АО Кворум");
		Список.ДобавитьЗначение("Комплекс обмена платежными документами Курьер. АОЗТ АстраСофт");
		Список.ДобавитьЗначение("WinClient фирмы МПИ-Банк");
		Список.ДобавитьЗначение("Система ""Клиент-Банк Плюс"" ОАО ""Уралвнешторгбанка""");
		Список.ДобавитьЗначение("Система ""MailBank"" фирмы ""Системные технологии"" Минск");
		Список.ДобавитьЗначение("On-Soft Клиент-Банк КБ ""ЛОКО-Банк""");

		Список.ВыбратьЗначение(КлиентБанка, "", , , 2);
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеВыбораЗначения()    

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение("Постоянный, Основной", 	 "Экспорт и импорт");
Форма.Закладки.ДобавитьЗначение("Настройка", 				 "Настройка обмена");
Форма.Закладки.ДобавитьЗначение("Постоянный, Распределение", "Синхронизация");

Кодировка.ДобавитьЗначение(0, "Windows");
Кодировка.ДобавитьЗначение(1, "DOS");

ТаблицаДокументов=СоздатьОбъект("ТаблицаЗначений");

// шапка платежного документа
ТаблицаДокументов.НоваяКолонка("Документ",				"Строка",	,	,	"Вид документа");
ТаблицаДокументов.НоваяКолонка("СекцияДокумент",		"Строка",	,	,	"Вид документа");
ТаблицаДокументов.НоваяКолонка("Номер",					"Строка",	,	,	"Номер документа");
ТаблицаДокументов.НоваяКолонка("Дата",					"Дата",		,	,	"Дата документа");
ТаблицаДокументов.НоваяКолонка("Сумма",					"Число",	15, 2,	"Сумма платежа");

// Квитанция по платежному документу
ТаблицаДокументов.НоваяКолонка("КвитанцияДата",			"Дата",		,	,	"Дата формирования квитанции");
ТаблицаДокументов.НоваяКолонка("КвитанцияВремя",		"Строка",	8,	,	"Время формирования квитанции");
ТаблицаДокументов.НоваяКолонка("КвитанцияСодержание",	"Строка",	,	,	"Содержание квитанции");

ТаблицаДокументов.НоваяКолонка("ПлательщикСчет",		,			,	,	"Номер р/с плательщика в его банке");	// Номер р/с плательщика в его банке
ТаблицаДокументов.НоваяКолонка("ДатаСписано",			"Дата",		,	,	"Дата списания средств с р/с");
// реквизиты плательщика																							   в случае непрямых расчетов:
ТаблицаДокументов.НоваяКолонка("ПлательщикИНН", 		"Строка",	12,	,	"ИНН плательщика");						// ИНН плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикКПП", 		"Строка",	9,	,	"КПП плательщика");						// КПП плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик",			"Строка",	,	,	"Плательщик");							// Плательщик
ТаблицаДокументов.НоваяКолонка("Плательщик1",			"Строка",	,	,	"Наименование плательщика");			// Наименование плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик2",			"Строка",	,	,	"Наименование плательщика, стр. 2");	// Расчетный счет плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик3",			"Строка",	,	,	"Наименование плательщика, стр. 3");	// Банк плательщика
ТаблицаДокументов.НоваяКолонка("Плательщик4",			"Строка",	,	,	"Наименование плательщика, стр. 4");	// Город банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикРасчСчет",	"Строка",	20,	,	"Расчетный счет плательщика");			// Корсчет банка плательщика
// реквизиты банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБанк1",		"Строка",	,	,	"Банк плательщика");					// РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБанк2",		"Строка",	,	,	"Город банка плательщика");				// Город РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикБИК",			"Строка",	9,	,	"БИК банка плательщика");				// БИК РЦ банка плательщика
ТаблицаДокументов.НоваяКолонка("ПлательщикКорсчет",		"Строка",	20,	,	"Корсчет банка плательщика");			// Корсчет РЦ банка плательщика

ТаблицаДокументов.НоваяКолонка("ПолучательСчет",		,			,	,	"Номер р/с получателя в его банке");	// Номер р/с получателя в его банке
ТаблицаДокументов.НоваяКолонка("ДатаПоступило",			"Дата",		,	,	"Дата поступления средств на р/с");
// реквизиты получателя (поставщика)
ТаблицаДокументов.НоваяКолонка("ПолучательИНН", 		"Строка",	12,	,	"ИНН получателя");						// ИНН получателя
ТаблицаДокументов.НоваяКолонка("ПолучательКПП", 		"Строка",	12,	,	"КПП получателя");						// ИНН получателя
ТаблицаДокументов.НоваяКолонка("Получатель",			"Строка",	,	,	"Получатель");							// Получатель
ТаблицаДокументов.НоваяКолонка("Получатель1",			"Строка",	,	,	"Наименование получателя");				// Наименование получателя
ТаблицаДокументов.НоваяКолонка("Получатель2",			"Строка",	,	,	"Наименование получателя, стр. 2");		// Расчетный счет получателя
ТаблицаДокументов.НоваяКолонка("Получатель3",			"Строка",	,	,	"Наименование получателя, стр. 3");		// Банк получателя
ТаблицаДокументов.НоваяКолонка("Получатель4",			"Строка",	,	,	"Наименование получателя, стр. 4");		// Город банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательРасчСчет", 	"Строка",	20,	,	"Расчетный счет получателя");			// Корсчет банка получателя

// реквизиты банка получателя (поставщика)																		   в случае непрямых расчетов:
ТаблицаДокументов.НоваяКолонка("ПолучательБанк1",		"Строка",	,	,	"Банк получателя");						// РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательБанк2",		"Строка",	,	,	"Город банка получателя");				// Город РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательБИК",			"Строка",	9,	,	"БИК банка получателя");				// БИК РЦ банка получателя
ТаблицаДокументов.НоваяКолонка("ПолучательКорсчет", 	"Строка",	20,	,	"Корсчет банка получателя");			// Корсчет РЦ банка получателя

// реквизиты платежа
ТаблицаДокументов.НоваяКолонка("ВидПлатежа",			"Строка",	,	,	"Вид платежа");                         // "Почтой". "Телеграфом", "Электронно"
ТаблицаДокументов.НоваяКолонка("ВидОплаты", 			"Строка",	2,	,	"Вид операции");
ТаблицаДокументов.НоваяКолонка("СрокДействия",			"Дата",		,	,	"Срок платежа (аккредитива)");
ТаблицаДокументов.НоваяКолонка("Очередность", 			"Строка",	1,	,	"Очередность платежа");

// реквизиты налогового платежа
ТаблицаДокументов.НоваяКолонка("СтатусСоставителя",		"Строка",	2,	,	"Статус составителя платежного документа");
ТаблицаДокументов.НоваяКолонка("ПоказательКБК",			"Строка",	7,	,	"Показатель кода бюджетной классификации");
ТаблицаДокументов.НоваяКолонка("ОКАТО",					"Строка",	11,	,	"ОКАТО");
ТаблицаДокументов.НоваяКолонка("ПоказательОснования",	"Строка",	2,	,	"Показатель основания налогового платежа");
ТаблицаДокументов.НоваяКолонка("ПоказательПериода",		"Строка",	10,	,	"Показатель налогового периода");
ТаблицаДокументов.НоваяКолонка("ПоказательНомера",		"Строка",	20,	,	"Показатель номера налогового документа");
ТаблицаДокументов.НоваяКолонка("ПоказательДаты",		"Дата",		,	,	"Показатель даты налогового документа");
ТаблицаДокументов.НоваяКолонка("ПоказательТипа",		"Строка",	2,	,	"Показатель типа налогового платежа");

// назначение платежа и пр.																						   
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа",		"Строка",	,	,	"Назначение платежа");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа1",	"Строка",	,	,	"Назначение платежа, стр. 1");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа2",	"Строка",	,	,	"Назначение платежа, стр. 2");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа3",	"Строка",	,	,	"Назначение платежа, стр. 3");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа4",	"Строка",	,	,	"Назначение платежа, стр. 4");
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа5",	"Строка",	,	,	"Назначение платежа, стр. 5");			
ТаблицаДокументов.НоваяКолонка("НазначениеПлатежа6",	"Строка",	,	,	"Назначение платежа, стр. 6");			

// прочее
ТаблицаДокументов.НоваяКолонка("СрокАкцепта",			"Строка",	,	,	"Срок акцепта");
ТаблицаДокументов.НоваяКолонка("ВидАккредитива",		"Строка",	,	,	"Вид аккредитива");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты1",		"Строка",	,	,	"Условие оплаты, стр. 1");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты2",		"Строка",	,	,	"Условие оплаты, стр. 2");
ТаблицаДокументов.НоваяКолонка("УсловиеОплаты3",		"Строка",	,	,	"Условие оплаты, стр. 3");
ТаблицаДокументов.НоваяКолонка("ПлатежПоПредст",		"Строка",	,	,	"Платеж по представлению");
ТаблицаДокументов.НоваяКолонка("ДопУсловия"	,			"Строка",	,	,	"Дополнительные условия");
ТаблицаДокументов.НоваяКолонка("НомерСчетаПоставщика",	"Строка",	,	,	"№ счета поставщика");
ТаблицаДокументов.НоваяКолонка("ДатаОтсылкиДок",		"Дата",		,	,	"Дата отсылки документов");
ТаблицаДокументов.НоваяКолонка("ДокументОснование",		"Документ",	,	,	"Первичный документ");

ОбязательныеАтрибуты=СоздатьОбъект("СписокЗначений");
ОбязательныеАтрибуты.ДобавитьЗначение("СекцияДокумент");
ОбязательныеАтрибуты.ДобавитьЗначение("НомерСчета");
ОбязательныеАтрибуты.ДобавитьЗначение("Дата");
ОбязательныеАтрибуты.ДобавитьЗначение("Сумма");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикИНН");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикКПП");
ОбязательныеАтрибуты.ДобавитьЗначение("Плательщик");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикРасчСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБанк1");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБанк2");
ОбязательныеАтрибуты.ДобавитьЗначение("ПлательщикБИК");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательИНН");
ОбязательныеАтрибуты.ДобавитьЗначение("Получатель");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательРасчСчет");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБанк1");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБанк2");
ОбязательныеАтрибуты.ДобавитьЗначение("ПолучательБИК");
ОбязательныеАтрибуты.ДобавитьЗначение("НазначениеПлатежа");

АтрибутыДокументов=СоздатьОбъект("СписокЗначений");
Для К=1 по ТаблицаДокументов.КоличествоКолонок() Цикл
	Колонка=ТаблицаДокументов.ПолучитьПараметрыКолонки(К);
	АтрибутыДокументов.ДобавитьЗначение(Колонка, Врег(Колонка));
КонецЦикла;

ВидыОпераций=СоздатьОбъект("СписокЗначений");
ВидыОпераций.Установить("Платежное поручение",				"01"); // 01 - Списано, зачислено по платежному поручению
ВидыОпераций.Установить("Платежное требование",				"02"); // 02 - Оплачено, зачислено по платежному требованию
ВидыОпераций.Установить("Денежный чек",						"03"); // 03 - Оплачен наличными денежный чек
ВидыОпераций.Установить("Объявление на взнос наличными",	"04"); // 04 - Поступило наличными по объявлению на взнос наличными
ВидыОпераций.Установить("Платежное требование-поручение",	"05"); // 05 - Оплачено, зачислено по требованию-поручению
ВидыОпераций.Установить("Инкассовое поручение",				"06"); // 06 - Оплачено, зачислено по инкассовому поручению
ВидыОпераций.Установить("Расчетный чек",					"07"); // 07 - Оплачено, поступило по расчетному чеку
ВидыОпераций.Установить("Аккредитив",						"08"); // 08 - Открытие аккредитива, зачисление сумм
                                                  			       //      неиспользованного, аннулированного аккредитива
ВидыОпераций.Установить("Мемориальный ордер",				"09"); // 09 - Списано, зачислено по мемориальному
                                             				       //      (расходному, приходному кассовому) ордеру
ВидыОпераций.Установить("Погашение кредита",				"10"); // 10 - Документы по погашению кредита, кроме поименованных выше
ВидыОпераций.Установить("Выдача кредита",					"11"); // 11 - Документы по выдаче кредита, зачислению
                                         					       //      кредита на счет, кроме поименованных выше
ВидыОпераций.Установить("Авизо",							"12"); // 12 - Зачислено на основании авизо
ВидыОпераций.Установить("Банковская карта",					"13"); // 13 - Расчеты с применением банковских карт

ЗагрРасчетныеСчета=СоздатьОбъект("СписокЗначений");
ЗагрВидыДокументов=СоздатьОбъект("СписокЗначений");
ЗагрДокументы=СоздатьОбъект("СписокЗначений");

ТаблицаРаспределения.Очистить();

ТаблицаРаспределения.НоваяКолонка("Вид",					"Число",	1,	0,	"Вид", 				3);
ТаблицаРаспределения.НоваяКолонка("Номер",					"Строка",	,	,	"Номер", 	6);
ТаблицаРаспределения.НоваяКолонка("Счет",			"Справочник.БанковскиеСчета",	, ,	"Счет",	12);	
ТаблицаРаспределения.НоваяКолонка("Дата",					"Дата",		,	,	"Дата",	4); 	
ТаблицаРаспределения.НоваяКолонка("Сумма",					"Число",	15, 2,	"Сумма",	5);
ТаблицаРаспределения.НоваяКолонка("Контрагент",			"Справочник.Контрагенты",	15, 2,	"Контрагент",	12);
ТаблицаРаспределения.НоваяКолонка("Документ",			"Документ",	, ,	"");
ТаблицаРаспределения.ВидимостьКолонки("Документ",0); 

ТаблицаРаспределения.ВыводитьПиктограммы("Вид");

ЗагруженаТаблица = 0;
