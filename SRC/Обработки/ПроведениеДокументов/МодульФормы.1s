Перем ч, м, с;
Перем пПрервать;
Перем пПоследовательность;
Перем пВремяОкончания;
Перем пАвтомат;
Перем пСНачала;
Перем ИмяФайлаПараметров;

//******************************************************************************
// глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента)
//
// Параметры:
//  ИмяРеквизита - имя реквизита (строка)
//  ВидДокумента - вид документа (строка)
//
// Возвращаемое значение: 
//  0 - нет реквизита,
//  1 - есть реквизит
//
// Описание: 
//  Проверяет, есть ли в структуре метаданных документа указанного вида
// 	реквизит шапки с указанным названием
//
Функция глЕстьРеквизитШапки(ИмяРеквизита, ВидДокумента) Экспорт     
	
	
	Если ПустоеЗначение(ИмяРеквизита) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.ОбщийРеквизитДокумента(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	ИначеЕсли ПустоеЗначение(ВидДокумента) = 1 Тогда
		Возврат 0;
		
	ИначеЕсли Метаданные.Документ(ВидДокумента).РеквизитШапки(ИмяРеквизита).Выбран() = 1 Тогда
		Возврат 1;
		
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции //глЕстьРеквизитШапки()

//******************************************************************************
// глПредставлениеДокумента(Документ)
//
// Параметры:
//	Документ - любой документ
//
// Возвращаемое значение:
//	Строка - представление документа
//
// Описание:
//	Возвращает представление документа: <Представление> №<НомерДок> от <ДатаДок>
//
Функция глПредставлениеДокумента(Документ) Экспорт
	
	Если (ТипЗначения(Документ)=12)
	и    (ПустоеЗначение(Документ)=0)
	Тогда   
		Представление = Документ.ПредставлениеВида();
		Если глЕстьРеквизитШапки("НомерДокВходящий", Документ.Вид()) = 1 тогда
			
			Если ПустоеЗначение(Документ.НомерДокВходящий) = 0 Тогда
				Представление = Представление + " вх. № " + СокрЛП(Документ.НомерДокВходящий) +
				" от " + Документ.ДатаДокВходящий;
			Иначе
				Представление = Представление + " № " + СокрЛП(Документ.НомерДок) +
				" от " + Документ.ДатаДок;
			КонецЕсли;
		Иначе
			Представление = Представление + " № " + СокрЛП(Документ.НомерДок) 
			+ " от " + Документ.ДатаДок; 
		КонецЕсли;
		Возврат Представление;
	КонецЕсли;
	Возврат ""
	
КонецФункции	// глПредставлениеДокумента()

Процедура ПриВыбореПоследовательности()
	
	пПоследовательность = Последовательность.ПолучитьАтрибут(фСоставДокументов.ПолучитьЗначение(фСоставДокументов.ТекущаяСтрока()));
	
	Форма.ТекПосл.Заголовок("Последовательность: " + пПоследовательность.Получить() 
	+ " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + ")");
	
КонецПроцедуры

Процедура Установить()
	
	СписокПараметров = СоздатьОбъект("СписокЗначений");
	
	СписокПараметров.ДобавитьЗначение(фСоставДокументов.ТекущаяСтрока(), "фСоставДокументов"); 
	СписокПараметров.ДобавитьЗначение(фПрервать.ТекущаяСтрока(),	"фПрервать"); 
	СписокПараметров.ДобавитьЗначение(фВсеДокументы, 				"фВсеДокументы"); 
	СписокПараметров.ДобавитьЗначение(фСначала, 					"фСначала"); 
	СписокПараметров.ДобавитьЗначение(фСледРаз, 					"фСледРаз"); 
	СписокПараметров.ДобавитьЗначение(фНеДвигатьТА, 				"фНеДвигатьТА"); 
	СписокПараметров.ДобавитьЗначение(фВремяОкончания, 				"фВремяОкончания"); 
	СписокПараметров.ДобавитьЗначение(ФИмяПользователя, 			"фИмяПользователя"); 
	
	СписокПараметров.ДобавитьЗначение(ДеньНедели1,	"ДеньНедели1"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели2,	"ДеньНедели2"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели3,	"ДеньНедели3"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели4,	"ДеньНедели4"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели5,	"ДеньНедели5"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели6,	"ДеньНедели6"); 
	СписокПараметров.ДобавитьЗначение(ДеньНедели7,	"ДеньНедели7"); 

	ЗначениеВФайл(ИмяФайлаПараметров, СписокПараметров);
	
КонецПроцедуры
//*******************************************
Процедура Выполнить()
	
	ВремяНачала = _GetPerformanceCounter();
	
	пПрервать = фПрервать.ПолучитьЗначение(фПрервать.ТекущаяСтрока());
	пПоследовательность = Последовательность.ПолучитьАтрибут(фСоставДокументов.ПолучитьЗначение(фСоставДокументов.ТекущаяСтрока()));
	пВремяОкончания = фВремяОкончания - Цел(фВремяОкончания / 24) * 24;
	пДеньНедели = Строка(ДеньНедели1) + ДеньНедели2 + ДеньНедели3 + ДеньНедели4 + ДеньНедели5 + ДеньНедели6 + ДеньНедели7;

	ТекущаяТА = ПолучитьПозициюТА();
		
	глРежимТрассировки = 1;
	Док = СоздатьОбъект("Документ");
	ДокНач = пПоследовательность.ПолучитьДокумент(); 
	сНачала = 1;
	
	ДатаНач = пПоследовательность.ПолучитьПозицию();
	Если (фСначала = 0) и (фСледРаз = 0)  Тогда
		ДокНач = ВосстановитьЗначение("ПоследнийДокумент"); 
		Если ПустоеЗначение(ДокНач) = 0 Тогда
			Если пПоследовательность.Сравнить(ДокНач) = -1 Тогда
				Если Док.НайтиДокумент(пПоследовательность.ПолучитьДокумент()) = 1 Тогда
					Попытка
						Док.Провести();
					Исключение
					КонецПопытки;
				КонецЕсли;
				ДатаНач = ДокНач;
				сНачала = 0;
			Иначе
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗначенияСтр(глСообщенияТрассировки) <> "СписокЗначений" Тогда
		глСообщенияТрассировки = глСоздатьТрассировку("Проведение документов");
	КонецЕсли;
	глСообщениеТрассировки(глСообщенияТрассировки, "Проведение начато в " + ТекущееВремя() + " " + ТекущаяДата(), -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Прервать = " + пПрервать, -1, 1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Состав документов = "+фСоставДокументов.ПолучитьЗначение(фСоставДокументов.ТекущаяСтрока()), -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Все документы = "+фВсеДокументы, -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "ГП: " + пПоследовательность.Получить() + " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + ")", -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Начало: " + ДатаНач + " (" + глПредставлениеДокумента(ДокНач) + ")", -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Пользователь: " + ИмяПользователя(), -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "", -1, -1);
	ОткрытьФорму("Обработка.Трассировка", глСообщенияТрассировки);
		
	ЗаписьЖурналаРегистрации("Запуск обработки 'Проведение документов', Прервать = " + пПрервать + 
	", Состав документов = "+фСоставДокументов.ПолучитьЗначение(фСоставДокументов.ТекущаяСтрока()) + 
	", Все документы = "+фВсеДокументы + ", ГП:" + пПоследовательность.Получить() 
			+ " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + "), Начало " + глПредставлениеДокумента(ДокНач), "Обработки", "Запуск",, 3);
	
	Док.УстановитьФильтр(1, 0, 0);
	Если фВсеДокументы = 1 Тогда
		Док.ВыбратьДокументы(ДатаНач, );
	Иначе
		Док.ВыбратьПоПоследовательности(ДатаНач,, фСоставДокументов.ПолучитьЗначение(фСоставДокументов.ТекущаяСтрока()));
	КонецЕсли;
	
	КоличествоПроведенных = 0;
	КоличествоНеПроведенных = 0;
	КоличествоОшибок = 0;
	
	Пока Док.ПолучитьДокумент() = 1 Цикл
		
		Если Док.ТекущийДокумент() = пПоследовательность.ПолучитьДокумент().ТекущийДокумент() Тогда
			Продолжить;
		КонецЕсли;
		
		Если пАвтомат = 1 Тогда
			ТекущееВремя(ч, м, с);
			Если (ч = пВремяОкончания) и (Сред(пДеньНедели, НомерДняНедели(ТекущаяДата()), 1) = "1") Тогда
				ЗаписьЖурналаРегистрации("Закончилось время обработки 'Проведение документов'", "Обработки", "Завершение",, 3);
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекДок.Заголовок(глПредставлениеДокумента(Док.ТекущийДокумент()));
		
		Если ИмяПользователя() = "BackUp"  Тогда
			Сообщить(пПоследовательность.Получить() 
			+ " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + ") " + глПредставлениеДокумента(Док.ТекущийДокумент()));
		Иначе
			Форма.ТекПосл.Заголовок("Последовательность: " + пПоследовательность.Получить() 
			+ " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + ")");
		КонецЕсли;
		
		Если (МонопольныйРежим() = 1) и (фНеДвигатьТА = 0) Тогда
			УстановитьТАна(Док.ТекущийДокумент());
		КонецЕсли;
		
		Попытка
			Если Док.Провести() = 0 Тогда
				КоличествоНеПроведенных = КоличествоНеПроведенных + 1;
				ЗаписьЖурналаРегистрации("Документ не проведен", "Документы", "Документ не проведен", Док.ТекущийДокумент(), 3);
				глСообщениеПроведения("Документ не проведен", Док.ТекущийДокумент());
				ОткрытьФорму("Обработка.Трассировка", глСообщенияТрассировки);
				Если (пПрервать = 1) или (пАвтомат = 0) Тогда
					Прервать;
				КонецЕсли;
			Иначе
				КоличествоПроведенных = КоличествоПроведенных + 1;
				ЗаписьЖурналаРегистрации("Документ проведен", "Документы", "Документ проведен", Док.ТекущийДокумент(), 3);
			КонецЕсли;
		Исключение
			КоличествоОшибок = КоличествоОшибок + 1;
			ЗаписьЖурналаРегистрации("Ошибка времени выполнения: " + ОписаниеОшибки(), "Документы", "Ошибка", Док.ТекущийДокумент(), 3);
			глСообщениеПроведения("Ошибка времени выполнения: " + ОписаниеОшибки(), Док.ТекущийДокумент(), 1);
			ОткрытьФорму("Обработка.Трассировка", глСообщенияТрассировки);
			Если (пПрервать = 1) или (пАвтомат = 0) Тогда
				Прервать;
			КонецЕсли;
		КонецПопытки;
		СохранитьЗначение("ПоследнийДокумент", Док.ТекущийДокумент());
	КонецЦикла;

	Если (МонопольныйРежим() = 1) и (фНеДвигатьТА = 0) Тогда
		УстановитьТАпо(ТекущаяТА);
	КонецЕсли;	
	
	глСообщенияТрассировки = глСоздатьТрассировку("Проведение документов");
	глСообщениеТрассировки(глСообщенияТрассировки, "Проведение завершено в " + ТекущееВремя() + " " + ТекущаяДата(), -1);
	глСообщениеТрассировки(глСообщенияТрассировки, "ГП: " + пПоследовательность.Получить() + " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + ")", -1,,,,,,,,,, пПоследовательность.ПолучитьДокумент().ТекущийДокумент());
	глСообщениеТрассировки(глСообщенияТрассировки, "Окончание: " + ВосстановитьЗначение("ПоследнийДокумент").ПолучитьПозицию() + " (" + глПредставлениеДокумента(ВосстановитьЗначение("ПоследнийДокумент")) + ")", -1,,,,,,,,,, ВосстановитьЗначение("ПоследнийДокумент"));
	глСообщениеТрассировки(глСообщенияТрассировки, "Проведено документов: " + КоличествоПроведенных, -1, 1);
	глСообщениеТрассировки(глСообщенияТрассировки, "Непроведено документов: " + КоличествоНеПроведенных, -1);
	Если КоличествоОшибок > 0 Тогда
		глСообщениеТрассировки(глСообщенияТрассировки, "Количество ошибок: " + КоличествоОшибок, 1);
	КонецЕсли;
	глСообщениеТрассировки(глСообщенияТрассировки, "Время выполнения: " + 
		Сокрл(Формат((_GetPerformanceCounter() - ВремяНачала)/1000/60, "Ч12.1")) + " мин. рабочего времени.", -1);
	Если (КоличествоПроведенных + КоличествоНеПроведенных) > 0 Тогда
		глСообщениеТрассировки(глСообщенияТрассировки, "Среднее время проведения документа: " + 
			Сокрл(Формат((_GetPerformanceCounter() - ВремяНачала)/1000/(КоличествоПроведенных + КоличествоНеПроведенных), "Ч12.1")) + " сек.", -1);
	КонецЕсли;
	ОткрытьФорму("Обработка.Трассировка", глСообщенияТрассировки);
	
	Если Док.Выбран() = 0 Тогда
		СохранитьЗначение("ПоследнийДокумент", ПолучитьПустоеЗначение("Документ"));
	КонецЕсли;
	
	Если пАвтомат = 1 Тогда
		
		Если ПустоеЗначение(глСообщенияТрассировки) = 0 Тогда
			Если сНачала = 1 Тогда
				глСообщенияТрассировки.Таблица.Записать(КаталогИБ() + "errors0.mxl");
			Иначе
				глСообщенияТрассировки.Таблица.Записать(КаталогИБ() + "errors.mxl");
			КонецЕсли;
		КонецЕсли;
		
		Если ФСледРаз = 1 Тогда
			СписокПараметров = СоздатьОбъект("СписокЗначений");
			ЗначениеИзФайла(ИмяФайлаПараметров, СписокПараметров);
			СписокПараметров.Установить("фСледРаз", 0); 
			ЗначениеВФайл(ИмяФайлаПараметров, СписокПараметров);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации("Завершение обработки 'Проведение документов', ГП:" + пПоследовательность.Получить() 
			+ " (" + глПредставлениеДокумента(пПоследовательность.ПолучитьДокумент()) + "), Окончание " + глПредставлениеДокумента(Док.ТекущийДокумент()), "Обработки", "Завершение",, 3);
	
КонецПроцедуры

Процедура ПриНачалеВыбораЗначения(ИдентЭлемДиалога, ФлагСтандОбр)
	
	Если ИдентЭлемДиалога = "фИмяПользователя" Тогда
		
		Если Метаданные.Справочник("Пользователи").Выбран() = 1 Тогда
			
			Спр = СоздатьОбъект("Справочник.Пользователи");
			Если Спр.Выбрать("Выберите пользователя", ) = 1 Тогда
				фИмяПользователя = Спр.Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	фСоставДокументов.ТекущаяСтрока(1);
	фПрервать.ТекущаяСтрока(2);
	фВсеДокументы = 0;
	фСначала = 0;
	фСледРаз = 0;
	фНеДвигатьТА = 1;
	фВремяОкончания = 8;
	фИмяПользователя = "BackUp";
	
	ДеньНедели1 = 1;
	ДеньНедели2 = 1;
	ДеньНедели3 = 1;
	ДеньНедели4 = 1;
	ДеньНедели5 = 1;
	ДеньНедели6 = 0;
	ДеньНедели7 = 0;
	
	Если ФС.СуществуетФайл(КаталогИБ() + "\recalc.ini") = 1 Тогда
		
		СписокПараметров = СоздатьОбъект("СписокЗначений");
		
		ЗначениеИзФайла(ИмяФайлаПараметров, СписокПараметров);
		
		Если ТипЗначенияСтр(СписокПараметров) = "СписокЗначений" Тогда
			
			фСоставДокументов.ТекущаяСтрока(СписокПараметров.Получить("фСоставДокументов"));
			фПрервать.ТекущаяСтрока(СписокПараметров.Получить("фПрервать"));
			
			фВсеДокументы 	= СписокПараметров.Получить("фВсеДокументы");
			фСначала 		= СписокПараметров.Получить("фСначала");
			фСледРаз 		= СписокПараметров.Получить("фСледРаз");
			фНеДвигатьТА	= СписокПараметров.Получить("фНеДвигатьТА");
			фВремяОкончания	= СписокПараметров.Получить("фВремяОкончания");
			фИмяПользователя = СписокПараметров.Получить("фИмяПользователя");
			
			ДеньНедели1 = СписокПараметров.Получить("ДеньНедели1");
			ДеньНедели2 = СписокПараметров.Получить("ДеньНедели2");
			ДеньНедели3 = СписокПараметров.Получить("ДеньНедели3");
			ДеньНедели4 = СписокПараметров.Получить("ДеньНедели4");
			ДеньНедели5 = СписокПараметров.Получить("ДеньНедели5");
			ДеньНедели6 = СписокПараметров.Получить("ДеньНедели6");
			ДеньНедели7 = СписокПараметров.Получить("ДеньНедели7");
			
		КонецЕсли;
	КонецЕсли;
	
	Если фСоставДокументов.ТекущаяСтрока() = 0 Тогда
		фСоставДокументов.ТекущаяСтрока(1);
	КонецЕсли;
	ПриВыбореПоследовательности();
	
	Если (фПрервать.ТекущаяСтрока() < 1) или (фПрервать.ТекущаяСтрока() > 2) Тогда
		фПрервать.ТекущаяСтрока(2);
	КонецЕсли;
	
	фВремяОкончания = ?(ТипЗначения(фВремяОкончания) <> 1, 8, фВремяОкончания);
	фВремяОкончания = ?((фВремяОкончания > 24) или (фВремяОкончания < 0), 8, фВремяОкончания);
	
	пАвтомат = 0;
	Если ИмяПользователя() = СокрЛП(фИмяПользователя) Тогда
		пАвтомат = 1;
	КонецЕсли;

	Если Метаданные.Последовательность() = 0 Тогда
		Если пАвтомат = 1 Тогда
			глПринудительно = 1;
			ЗавершитьРаботуСистемы(0);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если пАвтомат = 1  Тогда
		Форма.Обновить(0);
		Выполнить();
		глПринудительно = 1;
		ЗавершитьРаботуСистемы(0);
		СтатусВозврата(0);
		Форма.Закрыть();
	Иначе
		Если Форма.Параметр = "Старт" Тогда
			Если НазваниеНабораПрав() = "Администратор"  Тогда
				
				Если ФС.СуществуетФайл(КаталогИБ() + "errors.mxl") = 1 Тогда
					Таб = СоздатьОбъект("Таблица");
					Таб.Открыть(КаталогИБ() + "errors.mxl");
					Таб.ТолькоПросмотр(1);
					Таб.Опции(0,0,0,0,);
					Таб.Показать("Комментарий выполняемых действий", "");
				КонецЕсли;     
				
				Если ФС.СуществуетФайл(КаталогИБ() + "errors0.mxl") = 1 Тогда
					Таб = СоздатьОбъект("Таблица");
					Таб.Открыть(КаталогИБ() + "errors0.mxl");
					Таб.ТолькоПросмотр(1);
					Таб.Опции(0,0,0,0,);
					Таб.Показать("Комментарий выполняемых действий с начала", "");
				КонецЕсли;     
				
			КонецЕсли;
			
			СтатусВозврата(0);
			Форма.Закрыть();
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриЗакрытии()
КонецПроцедуры	

Для ии = 1 По Метаданные.Последовательность() Цикл
	фСоставДокументов.ДобавитьЗначение(Метаданные.Последовательность(ии).Идентификатор, Метаданные.Последовательность(ии).Синоним);
КонецЦикла;

фПрервать.ДобавитьЗначение(1, "Да");
фПрервать.ДобавитьЗначение(0, "Нет");
	
ИмяФайлаПараметров = КаталогИБ() + "\recalc.ini";