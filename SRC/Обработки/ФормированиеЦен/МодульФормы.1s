////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
Перем СписокТиповДляОбработки;
Перем НаценкаИзСправочника, ДатаСебестоимости;
Перем ТекСтрокаВТаблице;                         // текущая строка в таблице значений  МФ
Перем МеткаЕсть, МеткиНет;                      // Номера иконок пометки строки таблицы
Перем ШиринаЦены, ШиринаЕдиницы, ШиринаНаценки; // Ширины соответствующих колонок
Перем ШиринаВалюты;
Перем Табл, СтрокЗаголовка;                     
Перем Желтый, Белый;                            // Цвета фона ячейки таблицы списка цен

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
//                
//******************************************************************************
// ВыбратьПоФильтру()
//
// Параметры:
//  Нет
//
// Описание:
//  Открывает обработку отбора элементов по произвольному фильтру
//
Процедура ВыбратьПоФильтру()
	
	Перем  ВидЗначенияПодбора;
	
	ВидЗначенияПодбора=СокрЛП(ТаблицаМФ.Вид);
	
	Если ПустоеЗначение(ВидЗначенияПодбора)=1 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПараметров=СоздатьОбъект("СписокЗначений");
	СписокПараметров.ДобавитьЗначение("",                "ИмяВызвавшейФормы");
	СписокПараметров.ДобавитьЗначение(ТаблицаМФ.Тип,     "Тип");
	СписокПараметров.ДобавитьЗначение(ВидЗначенияПодбора,"Вид");
	СписокПараметров.ДобавитьЗначение(СписокЭлементовМФ, "Объекты");
	ТаблицаМФ.ФлВкл=2;
	ОткрытьФорму("Обработка.ПодборОбъектов#",СписокПараметров);
	
КонецПроцедуры	// ВыбратьПоФильтру

//******************************************************************************
// ПерерисовкаНазванийЗакладок
//
// Параметры:
// 	Нет
//
// Описание:
//  Добавляет "(!)" в заголовок закладки с множественным фильтром, когда этот фильтр задан
//
Функция ПерерисовкаНазванийЗакладок()      
	
	Форма.Закладки.УстановитьЗначение(2,?(глМножественныйФильтрЗадан(ТаблицаМФ)=1,"(!) ","")+"Множественный фильтр");
	
КонецФункции // ПерерисовкаНазванийЗакладок	

//******************************************************************************
// УправлениеДиалогом()
//
// Параметры: 
//	Нет
//
// Возвращаемое значение: 
//	Нет
//
// Описание: 
//	Управление доступностью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если Форма.ИспользоватьЗакладки() = 1 Тогда
		Если Форма.Закладки.ТекущаяСтрока() = 1 Тогда           
			Форма.ИспользоватьСлой("Подбор, КнопкиПодбора");
		Иначе     
			Форма.ИспользоватьСлой("МФ, КнопкиПодбора");
		КонецЕсли;
	Иначе

		// пометка на удаление
		Если ВариантДействия = 2 Тогда
			Форма.ПометкаУдаления.Доступность(1);
		Иначе
			Форма.ПометкаУдаления.Доступность(0);
		КонецЕсли;
		
		// установка единицы
		Если ВариантДействия = 3 Тогда
			Форма.ОКЕИ.Доступность(1);
		Иначе
			Форма.ОКЕИ.Доступность(0);
		КонецЕсли;
		
		// установка цены
		Если ВариантДействия = 4 Тогда
			Форма.ИзменяемаяЦена.Доступность(1);
			Форма.КопируемаяЦена.Доступность(1);
			Форма.Знак.Доступность(1);
			Форма.ВеличинаИзменения.Доступность(1);
			Форма.ПрибавляемаяЕдиница.Доступность(1);
		Иначе
			Форма.ИзменяемаяЦена.Доступность(0);
			Форма.КопируемаяЦена.Доступность(0);
			Форма.Знак.Доступность(0);
			Форма.ВеличинаИзменения.Доступность(0);
			Форма.ПрибавляемаяЕдиница.Доступность(0);
		КонецЕсли;
		
		// округление цены
		Если ВариантДействия = 5 Тогда
			Форма.ОкругляемаяЦена.Доступность(1);
			Форма.ПорядокОкругления.Доступность(1);
		Иначе
			Форма.ОкругляемаяЦена.Доступность(0);
			Форма.ПорядокОкругления.Доступность(0);
		КонецЕсли;

		// установка валюты
		Если ВариантДействия = 7 Тогда
			Форма.ВидВалюты.Доступность(1);
			ВидВал	= ВидВалюты.ПолучитьЗначение(ВидВалюты.ТекущаяСтрока());
			Если ВидВал = "значение" Тогда
			    Форма.ЗначВалюты.Доступность(1);
			Иначе
				Форма.ЗначВалюты.Доступность(0);
			КонецЕсли;
		Иначе
			Форма.ВидВалюты.Доступность(0);
			Форма.ЗначВалюты.Доступность(0);
		КонецЕсли;
		
		// установка наценки
		Если ВариантДействия = 8 Тогда
			Форма.ВидНаценки.Доступность(1);
			ВидВал	= ВидНаценки.ПолучитьЗначение(ВидНаценки.ТекущаяСтрока());
			Если ВидВал = "значение" Тогда
			    Форма.ЗначНаценки.Доступность(1);
			Иначе
				Форма.ЗначНаценки.Доступность(0);
			КонецЕсли;
		Иначе
			Форма.ВидНаценки.Доступность(0);
			Форма.ЗначНаценки.Доступность(0);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //УправлениеДиалогом()   

//******************************************************************************
// ПриВключенииФильтраСравненияНаценок()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  Элементы диалога, отвечающие за фильтр сравнения
// 
// Описание:
//  управляет доступностью элементов диалога, отвечающих за фильтр сравнения
//
Процедура ПриВключенииФильтраСравненияНаценок() 
	Перем ТекСтрока,Знак;
	
	Форма.ЗнакСравнения.Доступность(ВклФильтрСравненияНаценок);
	
	ТекСтрока=ЗнакСравнения.ТекущаяСтрока();
	Если ТекСтрока>0 Тогда
		Знак = ЗнакСравнения.ПолучитьЗначение(ТекСтрока);	
	
		Если (Знак="=")ИЛИ(Знак=">=")ИЛИ(Знак="<=") Тогда 
			НаценкаИзСправочника = "наценке из справочника";
		Иначе
			НаценкаИзСправочника = "наценки из справочника";
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // ПриВключенииФильтраСравненияНаценок()

//******************************************************************************
// ЕстьОстатокТМЦ(ТМЦ, Остаток, Резерв)
//
// Параметры: 
//  ТМЦ     - элемент Номенклатура, по которому надо проанализипровать остаток,
//  Остаток - Фактический остаток
//  Резерв  - фактический резерв
// Возвращаемое значение:
//  1 - Есть остаток, 
//  0 - нет остатка
//
// Описание:
//  Определяет есть ли остаток данной ТМЦ 
//
Функция ЕстьОстатокТМЦ(ТМЦ, Остаток, Резерв)
	            
	Рез = 0;
	
	// Если нужно учитывать еще и резервы
	Если Показатель.ТекущаяСтрока() = 2 Тогда
		Остаток = Остаток - Резерв; 
	КонецЕсли;         
	     
	ТекСтр  = ЗначениеПоказателя.ТекущаяСтрока();
	ТекЗнач = ЗначениеПоказателя.ПолучитьЗначение(ТекСтр, ""); 
	Если ТекЗнач = "все" Тогда Рез = 1;
		
	ИначеЕсли ТекЗнач = "положительные" Тогда
		
		Если Остаток > 0 Тогда Рез = 1; КонецЕсли;
		
	ИначеЕсли ТекЗнач =  "отрицательные" Тогда
		
		Если Остаток < 0 Тогда Рез = 1;	КонецЕсли;
		
	ИначеЕсли ТекЗнач =  "меньше мин. остатка" Тогда
		
		Если Остаток < ТМЦ.МинОстаток Тогда   Рез = 1;	КонецЕсли;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЕстьОстатокТМЦ()

//******************************************************************************
// ГрупповаяПометка(Режим)
//
// Параметры: 
//  Режим:
//   1 - пометить все
//   2 - снять пометку
//   3 - инвертировать пометку
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
// кнопки групповой пометки
//
// Описание:
//  Производит групповые действия с пометкой строк таблицы формы
//
Процедура ГрупповаяПометка(Режим)
	
	ТаблицаЦен.ВыбратьСтроки();
	
	Пока ТаблицаЦен.ПолучитьСтроку() = 1 Цикл
		
		// Первые две строки пропускаем (служебные)
		Если ТаблицаЦен.НомерСтроки < 3 Тогда
		    Продолжить;
		КонецЕсли;
		
		Если Режим=1 Тогда              
			
			ТаблицаЦен.Пометка = МеткаЕсть;
			
		ИначеЕсли Режим=2 Тогда
			
			ТаблицаЦен.Пометка = МеткиНет;
			
		ИначеЕсли Режим=3 Тогда
			
			Если ТаблицаЦен.Пометка=МеткиНет Тогда
				ТаблицаЦен.Пометка = МеткаЕсть;
			Иначе
				ТаблицаЦен.Пометка = МеткиНет;
			КонецЕсли;                           
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры // ГрупповаяПометка()   

//******************************************************************************
// ПересчетНалогов(СтараяЦена, ТекЦена, ТипЦенБаза)
//
// Параметры: 
//  СтараяЦена - число, величина пересчитываемой цены 
//  ТекЦена    - элемент справочника Цены, определяет ТМЦ и устанавливаемые флаги включения налогов 
//  ТипЦенБаза - элемент справочника ТипЦен, определяет текущие флаги включения налогов
//
// Возвращаемое значение:
//  Новое значение цены
//
// Описание:
//  Пересчитывает цены при изменении флагов включения налогов
//
Функция ПересчетНалогов(СтараяЦена, ТекЦена, ТипЦенБаза)
	
	Цена           = СтараяЦена;
	ТекТМЦ         = ТекЦена.Владелец;
	СтавкаНП       = ТекТМЦ.СтавкаНП.Ставка;
	СтавкаНДС      = ТекТМЦ.СтавкаНДС;
	ТипЦенЦены     = ТекЦена.ТипЦен;
	
	ЦенаВклНПБаза  = ТипЦенБаза.ЦенаВклНП;
	ЦенаВклНДСБаза = ТипЦенБаза.ЦенаВклНДС;
	ЦенаВклНПЦена  = ТипЦенЦены.ЦенаВклНП;
	ЦенаВклНДСЦена = ТипЦенЦены.ЦенаВклНДС;
	
	Если   (ЦенаВклНПБаза  <> ЦенаВклНПЦена )
	ИЛИ (ЦенаВклНДСБаза <> ЦенаВклНДСЦена) Тогда
		
		Если ЦенаВклНПБаза = 1 Тогда
			Цена = Цена*100/(100 +СтавкаНП);
		КонецЕсли;
		
		Если ЦенаВклНДСБаза <> ЦенаВклНДСЦена Тогда
			Если ЦенаВклНДСБаза = 1 Тогда
				Цена = Цена - Цена*глВыделяемыйНДС(СтавкаНДС);
			Иначе
				Цена = Цена + Цена*глНачисляемыйНДС(СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		
		Если ЦенаВклНПЦена = 1 Тогда
			Цена = (Цена)*(100 +СтавкаНП)/100;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции // ПересчетНалогов()
 
//******************************************************************************
// РассчитатьНаценку(ТекСтрока, ТекЦена, ТипЦенБаза)
//
// Параметры: 
//  ТекСтрока  - номер строки в таблице цен (определяет номенклатуру и единицу цены), 
//  ТекЦена    - элемент справочника цены, для которого рассчитывается наценка,
//  ТипЦенБаза - элемент справочника ТипыЦен, определяет базовую цену, от которой рассчитывается наценка
//
// Возвращаемое значение:
//  0 - если не удалось рассчитать наценку,
//  значение реальной торговой наценки по отношению к базовой цене
//
// Описание:
//  Определяет реальную торговую наценку по отношению к базовой цене
//
Функция РассчитатьНаценку(ТекСтрока, ТекЦена, ТипЦенБаза) 
	
	ТипЦенЦены     = ТекЦена.ТипЦен;
	ЦенаЦены       = ТекЦена.Цена.Получить(ДатаЦен);
	КоэффЦены      = ТекЦена.Единица.Получить(ДатаЦен).Коэффициент;
	ВалЦены        = ТекЦена.Валюта; 
	
	Если ПустоеЗначение(ТипЦенБаза) = 0 Тогда 
					
        // Проверим, наличие цены базового типа в таблице (чтобы лишний раз не искать)
		ЦенаБаза    = 0; 
		ЕдБаза      = 0;
		КоэффБаза   = 1;
		ЦенаСпрБаза = 0;
		ВалБаза		= 0;
			    
		// Надо искать цену самим
		ТекТМЦ = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Номенклатура");
		Если  глВернутьЦену(ТекТМЦ, ТипЦенБаза, ДатаЦен, ЦенаБаза, ЕдБаза, ВалБаза, , ЦенаСпрБаза) = 1 Тогда
			КоэффБаза = ЕдБаза.Коэффициент;
		КонецЕсли;  
	Иначе
		Возврат 0;
	КонецЕсли;

	Если ЦенаБаза = 0 Тогда
	    Возврат 0;
	КонецЕсли;
	
	
	// Приведем к одному коэффициенту
	Если ПустоеЗначение(КоэффЦены) = 0 Тогда
		ЦенаБаза = ЦенаБаза * КоэффЦены / КоэффБаза;
	Иначе
		Возврат 0;
	КонецЕсли;
	
	// и валюте
	ЦенаБаза = глПересчет(ЦенаБаза, ВалБаза, ДатаЦен, ВалЦены, ДатаЦен);
	
	// и налогам                       
	ЦенаБаза = ПересчетНалогов(ЦенаБаза, ТекЦена, ТипЦенБаза);
	
	// Посчитаем реальную наценку
	Возврат (ЦенаЦены - ЦенаБаза)/ЦенаБаза * 100;
	
КонецФункции // РассчитатьНаценку()

//******************************************************************************
// ЗаполнитьЦеныВТаблице()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет (считывает) в таблицу формы значения в колонки цен из справочника
//
Процедура ЗаполнитьЦеныВТаблице()
	
	СпрЦены	= СоздатьОбъект("Справочник.Цены");
	
	КолКол = ТаблицаЦен.КоличествоКолонок(); 
	
	КолТиповЦен = СписокТиповДляОбработки.РазмерСписка();
	Если КолТиповЦен= 0 Тогда
		
		// Не заданы типы цен, заполнять нечего
		Возврат;
	КонецЕсли;
	
	// В цикле по строкам табличной части заполним значения цен
	Для ТекСтрока = 3 по ТаблицаЦен.КоличествоСтрок() Цикл
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		ТекТМЦ = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Номенклатура");
		
		// Цикл по типам цен
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По КолТиповЦен Цикл
			ТекТипЦен   = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла);
			
			ИДколонки  = Строка(СчетчикЦикла); 
			ТекЦенаСпр = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки);
			
			// Инициализация переменных
			ЦенаЦены	= "";
			ЕдЦены		= "";
			НаценкаЦены = "";
			Наценка		= "";
			БазТипЦен	= "";
			ВалЦены		= "";
			
			Если ПустоеЗначение(ТекЦенаСпр) = 0  Тогда
				
				Если СпрЦены.НайтиЭлемент(ТекЦенаСпр) = 1 Тогда
					ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки, СпрЦены.ТекущийЭлемент());
					ТекЦенаСпр = СпрЦены.ТекущийЭлемент();
				КонецЕсли;
				
				ЦенаЦены	= ТекЦенаСпр.Цена.Получить(ДатаЦен);
				ЕдЦены		= ТекЦенаСпр.Единица.Получить(ДатаЦен); 
				ВалЦены		= ТекЦенаСпр.Валюта;
				
				БазТипЦен	= ТекТипЦен.БазовыйТипЦен;
				
				НаценкаЦены = ТекЦенаСпр.Процент;                                                           
				Наценка		= РассчитатьНаценку(ТекСтрока, ТекЦенаСпр, БазТипЦен); 
				Наценка		= Формат(Наценка,"Ч6.2")+ "%";									
				ЦенаЦены	= Формат(ЦенаЦены,"Ч15.2");
				
			КонецЕсли;
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Цена_"	+ ИДколонки, ЦенаЦены);
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Ед_"		+ ИДколонки, ЕдЦены);
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Вал_"		+ ИДколонки, ВалЦены);
			
			Если ПустоеЗначение(БазТипЦен) = 0  Тогда
				ТаблицаЦен.УстановитьЗначение(ТекСтрока, "СпрНац_"  + ИДколонки, Формат(НаценкаЦены,"Ч6.2")+ "%");
				ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Наценка_" + ИДколонки, Наценка);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЦеныВТаблице()

//******************************************************************************
// ПриДвойномЩелчкеНаТаблице()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  Таблица значений ТаблицаЦен
//
// Описание:
//  Обрабатывает двойной щелчок (нажатие клавиши "Enter") на таблице формы
//
Процедура ПриДвойномЩелчкеНаТаблице()
	Перем ТекКол, ТекСтр;
	
	ТаблицаЦен.ТекущаяКолонка(,ТекКол);
	ТекСтр = ТаблицаЦен.ТекущаяСтрока();
	КодТекКол = ТаблицаЦен.ПолучитьПараметрыКолонки(ТекКол);
	
	Если ТекСтр > 0 Тогда
		
		Если КодТекКол = "Пометка" Тогда
			
			Если ТаблицаЦен.Пометка = МеткаЕсть Тогда
				ТаблицаЦен.Пометка = МеткиНет;
			Иначе
				ТаблицаЦен.Пометка = МеткаЕсть;
			КонецЕсли;
			
		ИначеЕсли КодТекКол = "Номенклатура" Тогда
			
			ОткрытьФормуМодально(ТаблицаЦен.Номенклатура);
			
			// Могли отредактировать ценовые характеристики
			ЗаполнитьЦеныВтаблице();
			
		Иначе
			ПозРазделителя	= Найти(КодТекКол, "_");
			Если ПозРазделителя > 0 Тогда
				
				Ид	= Лев(КодТекКол, ПозРазделителя - 1);
				
				Если (Ид = "Цена")
				 или (Ид = "Вал")
				 или (Ид = "Ед")
				 или (Ид = "СпрНац")
				 или (Ид = "Наценка")
				 Тогда
				 	
				 	//Надо открыть форму элемента цен		
				 	ИдКолонки = Сред(КодТекКол, ПозРазделителя + 1);
				 	ТипЦен  = СписокТиповДляОбработки.ПолучитьЗначение(Число(ИдКолонки),"");   
				 	
				 	Если ТипЦен.Рассчитывается = 0 Тогда
				 		СпрЦена = ТаблицаЦен.ПолучитьЗначение(ТекСтр,"ЦенаСпр" + ИдКолонки);
				 		Если ПустоеЗначение(СпрЦена) = 0 Тогда;
				 			// Существующая цена
				 			ОткрытьФормуМодально(СпрЦена, ДатаЦен); 
				 		Иначе
				 			// форма нового элемента подчиненного справочника (ТипЦен - параметр формы)
				 			ОткрытьФормуМодально("Элемент.Цены ",ТипЦен,,,ТаблицаЦен.Номенклатура); 
				 			
				 			//Надо записать цену в таблицу, если она появилась
				 			Если глВернутьЦену(ТаблицаЦен.Номенклатура, ТипЦен, ДатаЦен,,,,,СпрЦена) = 1 Тогда;
				 				ТаблицаЦен.УстановитьЗначение(ТекСтр,"ЦенаСпр" + ИдКолонки,СпрЦена)
				 			КонецЕсли;
				 		КонецЕсли;
				 		
				 		// Могли отредактировать ценовые характеристики
				 		ЗаполнитьЦеныВтаблице();
				 	Иначе 
				 		Предупреждение("Цена рассчитывается на основании """ + СокрЛП(ТипЦен.БазовыйТипЦен) +"""",60);
				 	КонецЕсли;
				 КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриДвойномЩелчкеНаТаблице()

//******************************************************************************
// СоздатьЦену(ТМЦ, ТипЦен, ДатаЦен)
//
// Параметры: 
//  ТМЦ			- элемент справочника Номенклатура
//  ТипЦен		- элемент справочника ТипыЦен
//  НовЦена		- выходной параметр, созданный элемент справочника цены
//  ОписаниеОш	- выходной параметр, описание ошибки
//
// Возвращаемое значение:
//  1 - удалось создать элемент справочника, 0 - нет
//
// Описание:
//  Создает новый элемент справочника Цены
//
Функция СоздатьЦену(ТМЦ, ТипЦен, НовЦена, ОписаниеОш)
	
	СпрЦены	= СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьВладельца(ТМЦ);
	// при создании элемента периодические реквизиты устанавливаютя
	СпрЦены.ИспользоватьДату('01.01.1980', 1); 
	
	СпрЦены.Новый();
	СпрЦены.Валюта	= ТипЦен.Валюта;
	СпрЦены.Единица	= ТМЦ.ОсновнаяЕдиница;
	СпрЦены.Процент	= ТипЦен.Процент;
	СпрЦены.ТипЦен	= ТипЦен;
	СпрЦены.Цена	= 0;
	
	Попытка
		СпрЦены.Записать();
	Исключение
		ОписаниеОш	= ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	НовЦена	= СпрЦены.ТекущийЭлемент();
	Возврат 1;
	
КонецФункции // СоздатьЦену()

//******************************************************************************
// РассчитатьЦеныПоНаценкам(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Рассчитывает все цены по наценкам
//
Функция РассчитатьЦеныПоНаценкам(ОписаниеОш)
	
	СпрЦен = СоздатьОбъект("Справочник.Цены");
	СпрЦен.ИспользоватьДату(ДатаЦен, 1);
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			
			ТекТипЦен	= СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
			БазТипЦен	= ТекТипЦен.БазовыйТипЦен;
			
			// Цены, назначаемые вручную, не рассчитываем
			Если ПустоеЗначение(БазТипЦен) = 1 Тогда
				Продолжить;
			КонецЕсли;
			
			ИДколонки	= Строка(СчетчикЦикла); 
			ТекЦена		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИдКолонки);
			
			// Получим базовую цену. Если ее нет, то ничего не делаем
			БазЦена = 0; БазЕдЦены = ""; БазВалЦены = ""; //Инициализация переменных
			Если глВернутьЦену(ТМЦ, БазТипЦен, ДатаЦен, БазЦена, БазЕдЦены, БазВалЦены) = 1 Тогда
				
    			Если ПустоеЗначение(ТекЦена) = 1 Тогда // Базовая цена есть, а рассчитываемой нет, надо создать
					
					Если СоздатьЦену(ТМЦ, ТекТипЦен, ТекЦена, ОписаниеОш) = 0 Тогда
					    Возврат 0;
					КонецЕсли;
					
					// Надо ее прописать в таблицу
					ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки,ТекЦена);
					
				КонецЕсли;                     
				
				СпрЦен.НайтиЭлемент(ТекЦена); 
				
				// Пересчитаем базовую цену в нужную единицу
				ЕдЦены = СпрЦен.Единица;
				Если БазЕдЦены <> ЕдЦены Тогда
					Если ПустоеЗначение(БазЕдЦены.Коэффициент) = 0 Тогда
						БазЦена	= БазЦена * ЕдЦены.Коэффициент / БазЕдЦены.Коэффициент;
					Иначе
						БазЦена = 0;
					КонецЕсли;
				КонецЕсли;
				
				// Пересчитаем базовую цену в нужную валюту
				ВалЦены = СпрЦен.Валюта;
				Если ПустоеЗначение(ВалЦены) = 0 Тогда
					БазЦена	= глПересчет(БазЦена, БазВалЦены, ДатаЦен, ВалЦены, ДатаЦен);
				КонецЕсли;
				
				// Пересчитаем налоги цены
				БазЦена = ПересчетНалогов(БазЦена, ТекЦена, БазТипЦен);
				
				// Наценим (наценку берем из справочника цен)
				БазЦена	= БазЦена * ( 100 + ТекЦена.Процент) / 100;
				
				// Округлим
				СпрЦен.Цена	= глОкруглить(БазЦена, ТекТипЦен.ПорядокОкругления);
				    
				// Запишем 
				Попытка
					СпрЦен.Записать();
				Исключение
					ОписаниеОш	= ОписаниеОшибки();
					Возврат 0;
				КонецПопытки;
				
			КонецЕсли; // Есть базовая цена (глВернутьЦену(ТМЦ, БазТипЦен...) = 1 )
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // РассчитатьЦеныПоНаценкам()

//******************************************************************************
// ПометитьНаУдаление(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Устанавливает или снимает пометку на удаление
//
Функция ПометитьНаУдаление(ОписаниеОш)
	
	Если ПометкаУдаления.ТекущаяСтрока() = 0 Тогда
		ОписаниеОш	= "Не выбрано действие с пометкой на удаление.";
		Активизировать("ПометкаУдаления");
		Возврат 0;
	КонецЕсли;
	
	СпрЦен = СоздатьОбъект("Справочник.Цены");
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		СпрЦен.ИспользоватьВладельца(ТМЦ);
		
		СчетчикЦикла = 0;
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			ТекТипЦен	= СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
			ИДколонки	= Строка(СчетчикЦикла);
			
			Если СпрЦен.НайтиПоРеквизиту("ТипЦен", ТекТипЦен, 0) = 1 Тогда
				Попытка
					Если ПометкаУдаления.ТекущаяСтрока() = 1 Тогда
						СпрЦен.Удалить(0); //Поставить
						ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки, "");
					Иначе	
						СпрЦен.СнятьПометкуУдаления();
						ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки, СпрЦен.ТекущийЭлемент());
					КонецЕсли;
				Исключение
					ОписаниеОш	= ОписаниеОшибки();
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ПометитьНаУдаление()

//******************************************************************************
// УстановитьЕдиницу(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Устанавливает единицу измерения
//
Функция УстановитьЕдиницу(ОписаниеОш)
	
	Если ОКЕИ.Выбран() = 0 Тогда
		ОписаниеОш	= "Не выбрана единица измерения.";
		Активизировать("ОКЕИ");
		Возврат 0;
	КонецЕсли;
	
	СпрЦен		= СоздатьОбъект("Справочник.Цены");
	СпрЦен.ИспользоватьДату(ДатаЦен, 1);
	
	СпрЕдиница	= СоздатьОбъект("Справочник.Единицы");
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		СпрЕдиница.ИспользоватьВладельца(ТМЦ);
		
		// Проверим, есть ли у данного ТМЦ такая единица
		Если СпрЕдиница.НайтиПоРеквизиту("ОКЕИ", ОКЕИ, 0) = 0 Тогда
			Сообщить("У ТМЦ """ + СокрЛП(ТМЦ) + """ отсутствует единица с кодом """ + СокрЛП(ОКЕИ), "!");
			Продолжить;
		КонецЕсли;
		
		СпрЦен.ИспользоватьВладельца(ТМЦ);
		
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			ТекЦена = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + Строка(СчетчикЦикла));
			
			// Новые цены не создаем
			Если ПустоеЗначение(ТекЦена) = 0 Тогда
				
				СпрЦен.НайтиЭлемент(ТекЦена); 
				
				НайденнаяЕдиница	= СпрЕдиница.ТекущийЭлемент();
				
				Если НайденнаяЕдиница.Владелец = СпрЦен.Владелец Тогда
					Если СпрЦен.Единица.Коэффициент <> 0 Тогда
						СпрЦен.Цена		= СпрЦен.Цена * НайденнаяЕдиница.Коэффициент / СпрЦен.Единица.Коэффициент;
					КонецЕсли;
					СпрЦен.Единица	= НайденнаяЕдиница;
					
					Попытка
						СпрЦен.Записать();
					Исключение
						ОписаниеОш	= ОписаниеОшибки();
						Возврат 0;
					КонецПопытки;
				Иначе
					Сообщить("Не совпадают владельцы цены и единицы. Новая единица не установлена","!");
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // УстановитьЕдиницу()

//******************************************************************************
// УстановитьЦену(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Устанавливает цену
//
Функция УстановитьЦену(ОписаниеОш)
	
	// проверка
	Если ИзменяемаяЦена.ТекущаяСтрока() = 0 Тогда
		ОписаниеОш	= "Не выбрана изменяемая цена.";
		Активизировать("ИзменяемаяЦена");
		Возврат 0;
	КонецЕсли;
	
	Если КопируемаяЦена.ТекущаяСтрока() = 0 Тогда
		ОписаниеОш	= "Не выбрана цена - основание для изменения.";
		Активизировать("КопируемаяЦена");
		Возврат 0;
	КонецЕсли;
	
	// определим идентификаторы колонок с изменяемой ценой и исходной ценой
	ТипИзмЦены		= ИзменяемаяЦена.ПолучитьЗначение(ИзменяемаяЦена.ТекущаяСтрока(),"");
	ИДКолонкиИзм	= Строка(СписокТиповДляОбработки.НайтиЗначение(ТипИзмЦены));
	
	СпрЦеныИзм		= СоздатьОбъект("Справочник.Цены");
	СпрЦеныИзм.ИспользоватьДату(ДатаЦен, 1);
	
	ТипИсхЦен		= КопируемаяЦена.ПолучитьЗначение(КопируемаяЦена.ТекущаяСтрока(),"");
	ИДКолонкиИсх	= Строка(СписокТиповДляОбработки.НайтиЗначение(ТипИсхЦен));
	ВидИсхЦены		= ?(КопируемаяЦена.ТекущаяСтрока() = 1, "Число", "Элемент");
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Если ВидИсхЦены = "Число" Тогда // исходная цена - себестоимость              
			
			ЭлИсхЦена 		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Себестоимость");
			ИсхЦена			= Число(ЭлИсхЦена);
			ВалИсхЦены		= глДоллары;
			КоэффЕдИсхЦены	= 1;
			
		Иначе // Исходнная цена из справочника
			
			ЭлИсхЦена 		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонкиИсх);
			
			// если исходной цены нет, то сообщаем обю этом и ничего не делаем.
			Если ПустоеЗначение(ЭлИсхЦена) = 1 Тогда
				Сообщить("Для позиции """ + СокрЛП(ТМЦ) + """ не задана цена типа """ + СокрЛП(ТипИсхЦен) + """.", "!");
				Сообщить("Цена типа """ + СокрЛП(ТипИзмЦены) + """ рассчитана не будет.", " ");
				Продолжить;
			КонецЕсли;
			
			ИсхЦена			= ЭлИсхЦена.Цена.Получить(ДатаЦен);
			ВалИсхЦены		= ЭлИсхЦена.Валюта;
			КоэффЕдИсхЦены	= ЭлИсхЦена.Единица.Получить(ДатаЦен).Коэффициент;
		КонецЕсли;
		
		Сообщить("Выполняется обработка позиции " + СокрЛП(ТМЦ),".");
		
		// получим элемент справочника изменияемой цены
		ЭлИзмЦена = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонкиИзм);
		
		Если ПустоеЗначение(ЭлИзмЦена) = 1 Тогда
		    
			Если СоздатьЦену(ТМЦ, ТипИзмЦены, ЭлИзмЦена, ОписаниеОш) = 0 Тогда
			    Возврат 0;
			КонецЕсли;
			
			// Надо ее прописать в таблицу
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонкиИзм, ЭлИзмЦена);
		КонецЕсли;

		
		СпрЦеныИзм.НайтиЭлемент(ЭлИзмЦена);
		
		ВалИзмЦены		= СпрЦеныИзм.Валюта;
		КоэффЕдИзмЦены	= СпрЦеныИзм.Единица.Коэффициент;
		
		// вычислим дельту изменения цены
		Если ПрибавляемаяЕдиница.ПолучитьЗначение(ПрибавляемаяЕдиница.ТекущаяСтрока()) = "Ед. валюты" Тогда 
			ДельтаЦены = ВеличинаИзменения;
		ИначеЕсли ПрибавляемаяЕдиница.ПолучитьЗначение(ПрибавляемаяЕдиница.ТекущаяСтрока()) = "%" Тогда
			ДельтаЦены = ИсхЦена * ВеличинаИзменения/100;
		КонецЕсли;

		// изменим значение исходной (копируемой) цены на дельту
		Если Знак.ТекущаяСтрока() = 1 Тогда		// +
			ИсхЦена = ИсхЦена + ДельтаЦены;
		ИначеЕсли Знак.ТекущаяСтрока() = 2 Тогда // - 
			ИсхЦена = ИсхЦена - ДельтаЦены;
		КонецЕсли;
		
		// пересчитаем значение исходной цены из валюты исходной цены в валюту изменяемой цены
		ИсхЦена	= глПересчет(ИсхЦена, ВалИсхЦены, ДатаЦен, ВалИзмЦены, ДатаЦен);
		
		// пересчитаем значение исходной цены из единицы исходной цены в единицу изменяемой цены
		Если КоэффЕдИзмЦены <> КоэффЕдИсхЦены Тогда
		    ИсхЦена	= ИсхЦена * КоэффЕдИзмЦены / КоэффЕдИсхЦены;
		КонецЕсли;
		
		// округлим
		СпрЦеныИзм.Цена	= глОкруглить(ИсхЦена, ТипИзмЦены.ПорядокОкругления);
		
		Попытка
			СпрЦеныИзм.Записать();
		Исключение
			ОписаниеОш	= ОписаниеОшибки();
			Возврат 0;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // УстановитьЦену()

//******************************************************************************
// ОкруглитьЦену(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Округляет цену
//
Функция ОкруглитьЦену(ОписаниеОш)
	
	Если ОкругляемаяЦена.ТекущаяСтрока() = 0 Тогда
		ОписаниеОш	= "Не выбрана округляемая цена.";
		Активизировать("ОкругляемаяЦена");
		Возврат 0;
	КонецЕсли;
	
	Если ПустоеЗначение(ПорядокОкругления) = 1 Тогда
		ОписаниеОш	= "Не выбран порядок округления";
		Активизировать("ПорядокОкругления");
		Возврат 0;
	КонецЕсли;
	
	// определим идентификаторы колонок с изменяемой ценой и исходной ценой
	ТипИзмЦены		= ОкругляемаяЦена.ПолучитьЗначение(ОкругляемаяЦена.ТекущаяСтрока(),"");
	ИДКолонкиИзм	= Строка(СписокТиповДляОбработки.НайтиЗначение(ТипИзмЦены));
	
	СпрЦены			= СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьДату(ДатаЦен, 1);
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		// получим элемент справочника изменияемой цены
		ЭлИзмЦена = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонкиИзм);
		
		Если ПустоеЗначение(ЭлИзмЦена) = 0 Тогда
			СпрЦены.НайтиЭлемент(ЭлИзмЦена);
			СпрЦены.Цена	= глОкруглить(СпрЦены.Цена, ПорядокОкругления);
			
			Попытка
				СпрЦены.Записать();
			Исключение
				ОписаниеОш	= ОписаниеОшибки();
				Возврат 0;
			КонецПопытки;
			
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонкиИзм, СпрЦены.ТекущийЭлемент());
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // ОкруглитьЦену()

//******************************************************************************
// РассчитатьЦеныКомплектов(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Рассчитывает цены комплектов
//
Функция РассчитатьЦеныКомплектов(ОписаниеОш)
	СпрКомпл	= СоздатьОбъект("Справочник.Комплектация");
	СпрЦены		= СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьДату(ДатаЦен, 1);
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		СпрКомпл.ИспользоватьВладельца(ТМЦ);
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			
			Если СпрКомпл.ВыбратьЭлементы() = 1 Тогда
				ТекТипЦены	= СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла);
				ИдКолонки	= Строка(СчетчикЦикла);
				ТекЦена		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИдКолонки);
				
				ОбщЦена		= 0;
				Если ПустоеЗначение(ТекЦена) = 1 Тогда
					Если СоздатьЦену(ТМЦ, ТекТипЦены, ТекЦена, ОписаниеОш) = 0 Тогда
					    Возврат 0;
					КонецЕсли;
				КонецЕсли;
				
				СпрЦены.НайтиЭлемент(ТекЦена);
				
				ЕдЦены			= СпрЦены.Единица;
				ВалЦены			= СпрЦены.Валюта;
				
				СпрКомпл.ВыбратьЭлементы();
				Пока СпрКомпл.ПолучитьЭлемент() = 1 Цикл
					ТекЭлем	= СпрКомпл.ТекущийЭлемент();
					ОбщЦена	= ОбщЦена + глПолучитьЦену(ТекЭлем.Номенклатура, ТекТипЦены, ДатаЦен, ЕдЦены, ВалЦены) * ТекЭлем.Количество;
				КонецЦикла;
				
				СпрЦены.Цена	= ОбщЦена;
				
				Попытка
					СпрЦены.Записать();
				Исключение
					ОписаниеОш	= ОписаниеОшибки();
					Возврат 0;
				КонецПопытки;
				
				ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонки, СпрЦены.ТекущийЭлемент());
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // РассчитатьЦеныКомплектов()

//******************************************************************************
// УстановитьВалюту(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Устанавливает валюту
//
Функция УстановитьВалюту(ОписаниеОш)
	
	ВидВал	= ВидВалюты.ПолучитьЗначение(ВидВалюты.ТекущаяСтрока());
	Если ВидВал = "значение" Тогда
		Если ЗначВалюты.Выбран() = 0 Тогда
			ОписаниеОш	= "Не выбрана валюта.";
			Активизировать("ЗначВалюты");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	СпрЦены		= СоздатьОбъект("Справочник.Цены");
	СпрЦены.ИспользоватьДату(ДатаЦен, 1);
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			ТекТипЦены	= СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла);
			ИдКолонки	= Строка(СчетчикЦикла);
			ТекЦена		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИдКолонки);
			
			Если ПустоеЗначение(ТекЦена) = 0 Тогда
			    // новые цены не создаем.
				СпрЦены.НайтиЭлемент(ТекЦена);
				
				Если ВидВал = "значение" Тогда
				    ИспВалюта	= ЗначВалюты;
				Иначе
					ИспВалюта	= ТекТипЦены.Валюта;
				КонецЕсли;
				
				СпрЦены.Цена	= глПересчет(СпрЦены.Цена, СпрЦены.Валюта, ДатаЦен, ИспВалюта, ДатаЦен);
				СпрЦены.Валюта	= ИспВалюта;
				    
				Попытка
					СпрЦены.Записать();
				Исключение
					ОписаниеОш	= ОписаниеОшибки();
					Возврат 0;
				КонецПопытки;
				
				ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонки, СпрЦены.ТекущийЭлемент());
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // УстановитьВалюту()
    
//******************************************************************************
// УстановитьНаценку(ОписаниеОш)
//
// Параметры: 
//  ОписаниеОш	- строка, описание ошибки
//
// Возвращаемое значение:
//  1 - функция отработала успешно, 0 - произошла ошибка
//
// Описание:
//  Устанавливает наценку 
//
Функция УстановитьНаценку(ОписаниеОш)
	
	ВидНац	= ВидНаценки.ПолучитьЗначение(ВидНаценки.ТекущаяСтрока());
	Если ВидНац = "значение" Тогда
		Если ПустоеЗначение(ЗначНаценки) = 1 Тогда
			ОписаниеОш	= "Не задано значение наценки.";
			Активизировать("ЗначНаценки");
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
	СпрЦены		= СоздатьОбъект("Справочник.Цены");
	
	Для ТекСтрока = 3 По ТаблицаЦен.КоличествоСтрок() Цикл
		ТаблицаЦен.ПолучитьСтрокуПоНомеру(ТекСтрока);
		
		// Не помечен к обработке
		Если ТаблицаЦен.Пометка = МеткиНет Тогда
			Продолжить;
		КонецЕсли;	
		
		ТМЦ = ТаблицаЦен.Номенклатура;
		
		// не оказалось товара
		Если ТМЦ.Выбран() = 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		Сообщить("Выполняется обработка позиции "+СокрЛП(ТМЦ),".");
		
		Для СчетчикЦикла = 1 По СписокТиповДляОбработки.РазмерСписка() Цикл
			ТекТипЦены	= СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла);
			ИдКолонки	= Строка(СчетчикЦикла);
			ТекЦена		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр" + ИдКолонки);
			
			 // создем цену
			Если ПустоеЗначение(ТекЦена) = 1 Тогда
				Если СоздатьЦену(ТМЦ, ТекТипЦены, ТекЦена, ОписаниеОш) = 0 Тогда
				    Возврат 0;
				КонецЕсли;
			КонецЕсли;                     
			
			СпрЦены.НайтиЭлемент(ТекЦена);
			
			Если ВидНац = "значение" Тогда
			    СпрЦены.Процент	= ЗначНаценки;
			Иначе
				СпрЦены.Процент	= ТекТипЦены.Процент;
			КонецЕсли;
			    
			Попытка
				СпрЦены.Записать();
			Исключение
				ОписаниеОш	= ОписаниеОшибки();
				Возврат 0;
			КонецПопытки;
			
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДКолонки, СпрЦены.ТекущийЭлемент());
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат 1;
	
КонецФункции // УстановитьНаценку()

//******************************************************************************
// ПоКнопкеВыполнить()
//
// Параметры: 
//  нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке выполнить
//
// Описание:
//  Производит выбранное действия с выбранными ценами
//
Процедура ПоКнопкеВыполнить()
	Перем ОписаниеОш;

	НачатьТранзакцию();
	
	Если ВариантДействия = 1 Тогда // Рассчитать все цены по наценкам
		Рез	= РассчитатьЦеныПоНаценкам(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 2 Тогда // Пометка на удаление
		Рез	= ПометитьНаУдаление(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 3 Тогда // Установить единицу 
		Рез	= УстановитьЕдиницу(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 4 Тогда // Установить цену
		Рез	= УстановитьЦену(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 5 Тогда // Округлить цену
		Рез	= ОкруглитьЦену(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 6 Тогда // расчет цен комплектов
		Рез	= РассчитатьЦеныКомплектов(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 7 Тогда // установка валюты
		Рез	= УстановитьВалюту(ОписаниеОш);
		
	ИначеЕсли ВариантДействия = 8 Тогда // установка наценки
		Рез	= УстановитьНаценку(ОписаниеОш);
		
	Иначе
		Рез	= 0;
		ОписаниеОш	= "Неизвестный вид действий!"
	КонецЕсли;

	Если Рез = 0 Тогда
	    ОтменитьТранзакцию();
		Предупреждение(ОписаниеОш, 60);
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	ЗаполнитьЦеныВтаблице();
	
КонецПроцедуры // ПоКнопкеВыполнить()

//******************************************************************************
// ПроходитПоНаценке(НаценкаСпр, РеальнаяНаценка)
//
// Параметры: 
//  НаценкаСпр      - процент наценки в справочнике
//  РеальнаяНаценка - процент реальной наценки
//
// Возвращаемое значение:
//  1 - цена удовлетворяет фильтру
//  0 - нет
//
// Описание:
//  Проверяет проходит ли данная цена по наложенным условиям по наценке
//
Функция ПроходитПоНаценке(НаценкаСпр, РеальнаяНаценка)
	
	// Сравниваем
	ТекСтрока=ЗнакСравнения.ТекущаяСтрока();
	Если ТекСтрока > 0 Тогда
		ТекЗнак = ЗнакСравнения.ПолучитьЗначение(ТекСтрока);	
		
		Если      ТекЗнак = ">" Тогда
			Если РеальнаяНаценка <= НаценкаСпр Тогда Возврат 0; КонецЕсли;	
			
		ИначеЕсли ТекЗнак = ">=" Тогда
			Если РеальнаяНаценка < НаценкаСпр  Тогда Возврат 0;	КонецЕсли;	
			
		ИначеЕсли ТекЗнак = "<" Тогда
			Если РеальнаяНаценка >= НаценкаСпр Тогда Возврат 0;	КонецЕсли;	
			
		ИначеЕсли ТекЗнак = "<=" Тогда
			Если РеальнаяНаценка > НаценкаСпр  Тогда Возврат 0;	КонецЕсли;	
						
		ИначеЕсли ТекЗнак = "=" Тогда        
			Если РеальнаяНаценка <> НаценкаСпр Тогда Возврат 0;	КонецЕсли;	
			
		ИначеЕсли ТекЗнак = "<>" Тогда
			Если РеальнаяНаценка = НаценкаСпр  Тогда Возврат 0; КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ПроходитПоНаценке()
 
//******************************************************************************
// ПоКнопкеСформировать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул элементов диалога
//  По кнопке "Сформировать"
// 
// Описание:
//  Отбирает необходимые ТМЦ и их цены и открывает слой обработки "Формирование цен"
//
Процедура ПоКнопкеСформировать()
	
	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
                          
	// Должен быть отмечен хотя бы один тип цен
	СписокТиповДляОбработки     = СоздатьОбъект("СписокЗначений");
	КолТиповЦен     = СписокТиповЦен.РазмерСписка();
	СчетчикЦикла    = 0;
	КолБазовыхТипов = 0;
	Для СчетчикЦикла = 1 По КолТиповЦен Цикл
		Если СписокТиповЦен.Пометка(СчетчикЦикла) = 1 Тогда
			ДобТип = СписокТиповЦен.ПолучитьЗначение(СчетчикЦикла,"");
			
			// Базовые типы хочется видеть вначале
			ДобСтр = ?(ПустоеЗначение(ДобТип.БазовыйТипЦен) = 1, 0,СчетчикЦикла);
			СписокТиповДляОбработки.ДобавитьЗначение(ДобТип, ДобСтр);
		КонецЕсли; 
	КонецЦикла; 
	
	СписокТиповДляОбработки.СортироватьПоПредставлению();
	КолТипов = СписокТиповДляОбработки.РазмерСписка(); 
    Если КолТипов = 0 Тогда
        Предупреждение("Не выбран ни один тип цен для обработки",60); 
		Активизировать("СписокТиповЦен");
		Возврат;
	КонецЕсли;  
	
	// Формируем таблицу значений цен
	ДатаСебестоимости = ДатаЦен;
	ТаблицаЦен.Очистить();
	ТаблицаЦен.НоваяКолонка("Пометка"      , "Число" ,1,,               , 4              );
	ТаблицаЦен.НоваяКолонка("Номенклатура" ,         , ,,               ,30              );
	ТаблицаЦен.НоваяКолонка("Себестоимость", "Строка", ,,"Себестоимость",ШиринаЦены   ,,2);
	ТаблицаЦен.НоваяКолонка("Валюта"       ,         , ,," "            ,ШиринаВалюты ,,2);
	ТаблицаЦен.НоваяКолонка("Единица"      ,         , ,," "            ,ШиринаЕдиницы,,2);

    // Добавляем служебные (две) строки
	ТаблицаЦен.НоваяСтрока(1);
	ТаблицаЦен.УстановитьЗначение(1, "Себестоимость", "На " + СокрЛП(ДатаСебестоимости)); 
	ТаблицаЦен.УстановитьЗначение(1, "Пометка", 0); 
	
	ТаблицаЦен.НоваяСтрока(2);
	ТаблицаЦен.УстановитьЗначение(2, "Себестоимость", СокрЛП(глДоллары)); 
	ТаблицаЦен.УстановитьЗначение(2, "Пометка", 0); 

	ТаблицаЦен.ВыводитьПиктограммы("Пометка",1);
	
	// Вставляем колонки по типам цен
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По КолТипов Цикл
		
		ТекТипЦен    = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
		НазваниеЦены = СокрЛП(ТекТипЦен.Наименование);
		ИДколонки    = Строка(СчетчикЦикла); 

		ТаблицаЦен.НоваяКолонка(    "ЦенаСпр"+ ИДколонки);   
		ТаблицаЦен.ВидимостьКолонки("ЦенаСпр"+ ИДколонки,0);
		
		ТаблицаЦен.НоваяКолонка("Цена_"	  + ИДколонки ,,,, НазваниеЦены, ШиринаЦены   ,, 2);
		ТаблицаЦен.НоваяКолонка("Вал_"	  + ИДколонки ,,,, " "         , ШиринаВалюты ,, 2);
		ТаблицаЦен.НоваяКолонка("Ед_"	  + ИДколонки ,,,, " "         , ШиринаЕдиницы,, 2);
		
		// Для небазовых цен полезно выводить реальную наценку
		Если ПустоеЗначение(ТекТипЦен.БазовыйТипЦен) = 0 Тогда
			ТаблицаЦен.НоваяКолонка("СпрНац_" + ИДколонки ,,,, "   ", ШиринаНаценки,, 2); // наценка из справочника цены
			ТаблицаЦен.НоваяКолонка("Наценка_"+ ИДколонки ,,,, "   ", ШиринаНаценки,, 2); // реальная наценка
		КонецЕсли;
		
		// Заполним служебные строки
		ПерваяСтр = ?(ПустоеЗначение(ТекТипЦен.БазовыйТипЦен) = 1,
					  "Базовая, ",
					  СокрЛП(ТекТипЦен.Процент) + "% на " + СокрЛП(ТекТипЦен.БазовыйТипЦен));
		ВтораяСтр = СокрЛП(ТекТипЦен.Валюта);
		
		ТаблицаЦен.УстановитьЗначение(1, "Цена_"+ ИДколонки, ПерваяСтр);
		ТаблицаЦен.УстановитьЗначение(2, "Цена_"+ ИДколонки, ВтораяСтр);
	КонецЦикла;  
	
 	// сначала запускаем запрос по одним только позициям номенклатуры	
	ТекстЗапроса = 
	"//{{ЗАПРОС(Сформировать)
	|Период с ДатаЦен по ДатаЦен;
	|Номенклатура	= Регистр.ОстаткиТМЦ.Номенклатура,      
	|                 Регистр.РезервыТМЦ.Номенклатура,
	|                 Регистр.ПартииНаличие.Номенклатура;
	|Остаток        = Регистр.ОстаткиТМЦ.Количество;
	|Резерв         = Регистр.РезервыТМЦ.Количество;
	|Количество     = Регистр.ПартииНаличие.Количество;
	|Стоимость      = Регистр.ПартииНаличие.СуммаУпр;
	|Функция ОстатокКонОст    = КонОст(Остаток);
	|Функция РезервКонОст     = КонОст(Резерв);
	|Функция КоличествоКонОст = КонОст(Количество);
	|Функция СтоимостьКонОст  = КонОст(Стоимость);
	|Группировка Номенклатура Без Групп Все;";
	               
	// Добавим отбор по флагу включения в прайс	
	Если ВариантВключенияВпрайс > 1 Тогда  
		Если ВариантВключенияВпрайс = 2 Тогда
			ТекстЗапроса = ТекстЗапроса + "Условие ( Номенклатура.НеВключатьВпрайс = 0);";
		Иначе
			ТекстЗапроса = ТекстЗапроса + "Условие ( Номенклатура.НеВключатьВпрайс = 1);";
		КонецЕсли;
    КонецЕсли;

	Загол="";
	НетОш = 1; // нет ошибок при наложении фильтров
 	НетОш = НетОш * глФильтрПоПеременнойЗапроса(ТаблицаМФ, "Номенклатура",ВыбТМЦ,"ВыбТМЦ",ТекстЗапроса,Загол,"СвойстваНоменклатуры");
	
	// Если ошибка в запросе, то выход из процедуры
	Если НетОш = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = СоздатьОбъект("Запрос");
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
		Возврат;
	КонецЕсли;     
	
	Счетчик = 0;
	ТекСтр  = 2;
 	Пока Запрос.Группировка("Номенклатура") = 1 Цикл
		
		Счетчик = Счетчик + 1;
		Если Запрос.Номенклатура.ПометкаУдаления()=1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим наличие
		Номенклатура = Запрос.Номенклатура; 
		Если ЕстьОстатокТМЦ(Номенклатура, Запрос.ОстатокКонОст, Запрос.РезервКонОст) = 1 Тогда
			ТаблицаЦен.НоваяСтрока();
			ТекСтр						= ТекСтр + 1;
        	ТаблицаЦен.Номенклатура		= Номенклатура;
        	ТаблицаЦен.Пометка			= МеткаЕсть; //Все строки помечены по умолчанию
        	ТаблицаЦен.Себестоимость	= ?(Запрос.КоличествоКонОст = 0, 0, Формат(Запрос.СтоимостьКонОст / Запрос.КоличествоКонОст,"Ч15.2"));
        	ТаблицаЦен.Единица			= Номенклатура.БазоваяЕдиница;
			ТаблицаЦен.Валюта			= глДоллары;
			
			// Отберем цены перебором
            СчетчикЦикла = 0;
            Для СчетчикЦикла = 1 По КолТипов Цикл
            	
				ТекТипЦен = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
				ИДКолонки = Строка(СчетчикЦикла);
			                    

        	    ЦенаЦены = 0; ЕдЦены = 0; ВалЦены = 0; НаценкаЦены = 0; ЦенаСпр = 0;
            	Если глВернутьЦену(Номенклатура,ТекТипЦен,ДатаЦен, ЦенаЦены, ЕдЦены, ВалЦены, НаценкаЦены, ЦенаСпр ) = 1 Тогда
					ТаблицаЦен.УстановитьЗначение(ТекСтр, "Цена_" + ИДколонки,Формат(ЦенаЦены,"Ч15.2"));
				Иначе
					ТаблицаЦен.УстановитьЗначение(ТекСтр, "Цена_" + ИДколонки, "");
            	КонецЕсли;

				ТаблицаЦен.УстановитьЗначение(ТекСтр, "ЦенаСпр" + ИДколонки, ЦенаСпр);
				ТаблицаЦен.УстановитьЗначение(ТекСтр, "Вал_"     + ИДколонки, ВалЦены);
				ТаблицаЦен.УстановитьЗначение(ТекСтр, "Ед_"      + ИДколонки, ЕдЦены);
			
				// Расчитаем наценку
				// Базовые типы не анализируем
				БазТипЦен = ТекТипЦен.БазовыйТипЦен;
				Если ПустоеЗначение(БазТипЦен) = 1 Тогда
					Продолжить;
				КонецЕсли;

				ТаблицаЦен.УстановитьЗначение(ТекСтр, "СпрНац_"  + ИДколонки, Формат(НаценкаЦены,"Ч6.2")+ "%");
				
				Наценка   =  РассчитатьНаценку(ТекСтр, ЦенаСпр, БазТипЦен);
				ТаблицаЦен.УстановитьЗначение(ТекСтр, "Наценка_" + ИДколонки, Формат(Наценка,    "Ч6.2")+ "%");
										   
				// Проверим, проходит ли по условиям на наценку
				Если ВклФильтрСравненияНаценок = 1 Тогда 
					Если ПроходитПоНаценке(ТекТипЦен.Процент, Наценка) = 0 Тогда
					
						//Не проходит, зря добавляли
						ТаблицаЦен.УдалитьСтроку(ТекСтр);   
						ТекСтр = ТекСтр - 1;
					
						Прервать;
					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		Состояние("Обработано товаров: " + Строка(Счетчик));
 	КонецЦикла;
	
	// Таблица сформирована, если есть что обрабатывать, то запускаем обработку формирования
	Если ТаблицаЦен.КоличествоСтрок() < 3 Тогда
		Предупреждение("Ни одна позиция номенклатуры не удовлетворяет наложенным условиям.",60);
		Возврат;
	КонецЕсли;
	
	// копирование списков            
	ИзменяемаяЦена.УдалитьВсе();
	ОкругляемаяЦена.УдалитьВсе();
	КопируемаяЦена.УдалитьВсе();
	
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По КолТипов Цикл
		
		ТекТипЦен    = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
		ИзменяемаяЦена.ДобавитьЗначение(ТекТипЦен);
		ОкругляемаяЦена.ДобавитьЗначение(ТекТипЦен);
		КопируемаяЦена.ДобавитьЗначение(ТекТипЦен);
	КонецЦикла;
	
    ИзменяемаяЦена.ТекущаяСтрока(1);
	ОкругляемаяЦена.ТекущаяСтрока(1);
	КопируемаяЦена.ВставитьЗначение(1, "Себестоимость"); // Эта строка д.б. первой!
	КопируемаяЦена.ТекущаяСтрока(1);
    
	Форма.ИспользоватьЗакладки(0);
	Форма.ИспользоватьСлой("Формирование, КнопкиФормирования");
	
	ТаблицаЦен.Фиксировать(2);
	
	УправлениеДиалогом();
	Форма.КнопкаПоУмолчанию("кнВыполнить");
	
КонецПроцедуры // ПоКнопкеСформировать()

//******************************************************************************
// ПоКнопкеНастройка()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  по кнопке "Настройка"
//
// Описание:
//  Переключает форму на закладку поддбора цен
//
Процедура ПоКнопкеНастройка()
	
	Форма.ИспользоватьЗакладки(1);
	Форма.Закладки.ТекущаяСтрока(1);
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();
	Форма.КнопкаПоУмолчанию("кнСформировать");
	
КонецПроцедуры // ПоКнопкеНастройка()


//******************************************************************************
// ПоКнопкеПечать()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Нет
//
// Вызывается из формул диалога
//  По кнопке "печать"
//
// Описание:
//  Распечатывается текущий список цен
//
Процедура ПоКнопкеПечать()
	
	// Заголовок отчета
	Табл = СоздатьОбъект("Таблица"); 
	Табл.ИсходнаяТаблица( "Таблица" );
	Табл.ВывестиСекцию("Заголовок|Наименование");   
	
	Табл.ВывестиСекцию("ШапкаТаблицы|Наименование");
	Табл.ПрисоединитьСекцию("ШапкаТаблицы|Себестоимость");
	
	СтрокЗаголовка = Табл.ВысотаТаблицы();
	
	// Шапка таблицы по всем типам цен
	КолТипов = СписокТиповДляОбработки.РазмерСписка();
	СчетчикЦикла = 0;
	Для СчетчикЦикла = 1 По КолТипов Цикл
		ТекТипЦен = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
		Если ПустоеЗначение(ТекТипЦен.БазовыйТипЦен) = 0 Тогда
			Табл.ПрисоединитьСекцию("ШапкаТаблицы|Цена");
		Иначе
			Табл.ПрисоединитьСекцию("ШапкаТаблицы|ЦенаБазовая");
		КонецЕсли;
	КонецЦикла;
	
	Табл.ПрисоединитьСекцию("ШапкаТаблицы|ПраваяГраница");
	
	// Цикл по всем товарам
	Счетчик = 0;
	ТаблицаЦен.ВыбратьСтроки(); 
	Пока ТаблицаЦен.ПолучитьСтроку() = 1 Цикл
	    ТекСтрока      = ТаблицаЦен.НомерСтроки;
		ТекТМЦ         = ТаблицаЦен.Номенклатура;
		ТекРасшифровка = ТекТМЦ;
		
		// Первые две пропускаем (служебные)
		Если ТекСтрока < 3 Тогда
		    Продолжить;
		КонецЕсли;                            
		
		Счетчик = Счетчик + 1;
		Если (Счетчик) % 10 = 0 Тогда
			Состояние("Обработано товаров: " + (Счетчик) );
		КонецЕсли;
		
		Табл.ВывестиСекцию("Товар|Наименование");
		
		Себестоимость = ТаблицаЦен.Себестоимость;
		ЕдиницаСеб    = ТаблицаЦен.Единица;
		Табл.ПрисоединитьСекцию("Товар|Себестоимость");
		
		// Цикл по всем типам цен
		Для СчетчикЦикла = 1 По КолТипов Цикл
			ТекТипЦен      = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
			ИДколонки      = Строка(СчетчикЦикла); 
			ТекРасшифровка = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "ЦенаСпр"	+ ИДколонки);
			Цена           = глФРМ(ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Цена_"		+ ИДколонки), ТекРасшифровка.Валюта);
			Единица        = ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Ед_"		+ ИДколонки);
			
			Если ПустоеЗначение(ТекРасшифровка) = 1 Тогда
				ТекРасшифровка =  СоздатьОбъект("СписокЗначений");
				ТекРасшифровка.ДобавитьЗначение(ТекТМЦ, "Номенклатура");
				ТекРасшифровка.ДобавитьЗначение(ТекТипЦен, "ТипЦен");
			КонецЕсли;
			
			Если ПустоеЗначение(ТекТипЦен.БазовыйТипЦен) = 0 Тогда
				НаценкаСпр	= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "СпрНац_"	+ ИДколонки);
				Наценка		= ТаблицаЦен.ПолучитьЗначение(ТекСтрока, "Наценка_" + ИДколонки);
				Если Число(Наценка) <  ТекТипЦен.Процент Тогда
					Табл.ПрисоединитьСекцию("Товар|ЦенаМеньшаяНаценка");
				Иначе
					Табл.ПрисоединитьСекцию("Товар|Цена");
				КонецЕсли;
			Иначе
				Табл.ПрисоединитьСекцию("Товар|ЦенаБазовая");
			КонецЕсли;
		КонецЦикла;
		Табл.ПрисоединитьСекцию("Товар|ПраваяГраница");
	КонецЦикла;
	
	
	// Выводим подвал
	Табл.ВывестиСекцию("Подвал|Наименование");
	Табл.ПрисоединитьСекцию("Подвал|Себестоимость");
	
	Для СчетчикЦикла = 1 По КолТипов Цикл
		ТекТипЦен = СписокТиповДляОбработки.ПолучитьЗначение(СчетчикЦикла, "");
		Если ПустоеЗначение(ТекТипЦен.БазовыйТипЦен) = 0 Тогда
			Табл.ПрисоединитьСекцию("Подвал|Цена");
		Иначе
			Табл.ПрисоединитьСекцию("Подвал|ЦенаБазовая");
		КонецЕсли;
	КонецЦикла;
	
	Табл.ТолькоПросмотр(1);
	Табл.Опции(0,0,СтрокЗаголовка,1, "ФормированиеЦен", "ФормированиеЦен");
	Табл.Показать("Список цен");   
	
КонецПроцедуры // ПоКнопкеПечать()

////////////////////////////////////////////////////////////////////////////////
// ПРЕДОПРЕДЕЛЕННЫЕ ПРОЦЕДУРЫ
// 
//******************************************************************************
// Предопределенная процедура
//
Процедура ВводНового()
	
	// эта предопределенная процедура выполняется при восстановлении настройки
	ПерерисовкаНазванийЗакладок();
	УправлениеДиалогом();       
	ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
    ПриВключенииФильтраСравненияНаценок();
	
КонецПроцедуры // ВводНового()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ПриОткрытии(ФлагВосстановленияНастройки)
	
	
	// Инициализация переменных
	Если ФлагВосстановленияНастройки = 0 Тогда
		
		ВариантВключенияВпрайс = 1;
		ВариантДействия = 1;
		
	КонецЕсли;
	
	// Считаем типы цен
	СпрТипыЦен = СоздатьОбъект("Справочник.ТипыЦен");
	СпрТипыЦен.ВыбратьЭлементы();
	Пока СпрТипыЦен.ПолучитьЭлемент() = 1 Цикл
		
		// Показываем только не рассчетные цены
		Если СпрТипыЦен.Рассчитывается = 0 Тогда
			СписокТиповЦен.ДобавитьЗначение(СпрТипыЦен.ТекущийЭлемент());
		КонецЕсли;
	КонецЦикла;
	
	ПерерисовкаНазванийЗакладок();
	
	ТаблицаМФ.ВидимостьКолонки("Тип",0);
	ТаблицаМФ.ВидимостьКолонки("Вид",0);
	ТаблицаМФ.ВидимостьКолонки("СписокЭлементов",0);          
	ТаблицаМФ.ВидимостьКолонки("ТипМФ",0);
	ТаблицаМФ.ВидимостьКолонки("ИмяПеременной",0);
	
	УправлениеДиалогом();
    ПриВключенииФильтраСравненияНаценок();
	
	Форма.КнопкаПоУмолчанию("кнСформировать");
	
КонецПроцедуры // ПриОткрытии()

//******************************************************************************
// Предопределенная процедура
//
Процедура ПриВыбореЗакладки(Номер,Значение)	
	
	// закладки
    Если Номер=1 Тогда
    	глПриСменеСтрокиТаблицыМФ(1,ТекСтрокаВТаблице,Контекст); // записываем изменения если они были
	КонецЕсли;      
	УправлениеДиалогом();
	ПерерисовкаНазванийЗакладок();
	
КонецПроцедуры	// ПриВыбореЗакладки()

//******************************************************************************
// Предопределенная процедура
//
Процедура ОбработкаПодбора(Значение)  
	
	Если (СписокЭлементовМФ.НайтиЗначение(Значение)=0) Тогда
		Представление=""+Значение;
		Если ТипЗначенияСтр(Значение)="Справочник" Тогда
			Если СокрЛП(Метаданные.Справочник(Значение.Вид()).Владелец) <> "Метаданные" Тогда
				Представление=Представление+" ("+Значение.Владелец+")";
			КонецЕсли;
		КонецЕсли;	
		СписокЭлементовМФ.ДобавитьЗначение(Значение,Представление);
		ТаблицаМФ.ФлВкл=2;
	КонецЕсли;
	
КонецПроцедуры  // ОбработкаПодбора()

//******************************************************************************
// Предопределенная процедура.
//
Процедура ОбработкаЯчейкиТаблицы(Значение, ФлагСтандОбраб, Таблица, Адрес)
	
	ФлагСтандОбраб      = 0;
	
	ОбластьЦены         = Таблица.Область(Адрес); // Ячейка с числовым значением цены
	НомерСимволаСтолбца = Найти(Адрес, "C");
	НомерСтроки         = Число(Сред(Адрес,2,НомерСимволаСтолбца - 2));
	НомерСтолбца        = Число(Сред(Адрес,НомерСимволаСтолбца + 1));
	
	СпрЦены             = СоздатьОбъект("Справочник.Цены");
	
	Если ТипЗначенияСтр(Значение) = "Справочник" Тогда  // Существующий элемент справочника "Цены"
		                                       
		ТекТМЦ    = Значение.Владелец; 
		ТекТипЦен = Значение.ТипЦен;
		Если Значение.Выбран() = 1 Тогда   
			
			// Открываем форму существующего элемента справочника цены
			ОткрытьФормуМодально(Значение,ДатаЦен);                           
			
		КонецЕсли;
		
		СпрЦены.НайтиЭлемент(Значение);
		
	ИначеЕсли ТипЗначенияСтр(Значение) = "СписокЗначений" Тогда //Новая цена
		
		ТекТМЦ    = Значение.Получить("Номенклатура");
		ТекТипЦен = Значение.Получить("ТипЦен");
		
		// Открываем форму нового элемента подчиненного справочника (ТекТМЦ - владелец)
		// В качестве параметра передаем тип цены (ТекТипЦен - параметр формы)
		ОткрытьФормуМодально("Элемент.Цены", ТекТипЦен,,,ТекТМЦ);
		
		СпрЦены.ИспользоватьВладельца(ТекТМЦ);
		СпрЦены.НайтиПоРеквизиту("ТипЦен", ТекТипЦен, 0);
		
	КонецЕсли;
	
	// Нашли такую цену (могли и не записать)
	Если СпрЦены.Выбран() = 1 Тогда
		
		// Возможно измененные значения
		ТекРасшифровка = СпрЦены.ТекущийЭлемент(); 
		Цена           = Формат(СпрЦены.Цена.Получить(ДатаЦен),"Ч15.2");
		Единица        = СпрЦены.Единица.Получить(ДатаЦен);
		
	    // Поменяем соответствующие ячейки таблицы
		ОбластьЦены.Расшифровка(ТекРасшифровка);
		ОбластьЦены.Текст = глФРМ(Цена, СпрЦены.Валюта);
		
		
		// Нужно изменить таблицу цен
		// НомерСтроки - в печатной форме, поэтому для получения 
		// номера строки в ТаблицаЦен надо отнять количество строк заголовка печатной формы
		// и прибавить 2 ( 2 первые строки ТаблицаЦен - служебные)  
		ТекСтрока = НомерСтроки - СтрокЗаголовка + 2;
		ИДКолонки = Строка(СписокТиповДляОбработки.НайтиЗначение(ТекТипЦен));
		ТаблицаЦен.УстановитьЗначение(ТекСтрока, "ЦенаСпр" + ИДколонки, ТекРасшифровка);
		ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Цена_"    + ИДколонки, Цена);
		ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Ед_"      + ИДколонки, Единица);
		
		
		// Могли поменять единицу (следующая колонка)
		ОбластьЕдиницы = Таблица.Область("R" + Строка(НомерСтроки) + "C" + Строка(НомерСтолбца + 1));
		ОбластьЕдиницы.Текст = Единица;
		
		// Для не базовой цены могла измениться Наценка
		БазТипЦен = ТекТипЦен.БазовыйТипЦен;
		Если ПустоеЗначение(БазТипЦен) = 0  Тогда                   
			
			Процент = РассчитатьНаценку(ТекСтрока, ТекРасшифровка, БазТипЦен) ; 
			Наценка = Формат(Процент,"Ч6.2")+ "%";
			ОбластьНаценки = Таблица.Область("R" + Строка(НомерСтроки) + "C" + Строка(НомерСтолбца + 2));
			ОбластьНаценки.Текст = Наценка; 
			
			ТаблицаЦен.УстановитьЗначение(ТекСтрока, "Наценка_" + ИДколонки, Наценка);
			
			Если Процент < ТекТипЦен.Процент Тогда
				Цвет = Желтый;
			Иначе                                  
				Цвет = Белый;
			КонецЕсли; 
			
			ОбластьНаценки.ЦветФона(Цвет);
			ОбластьЦены.   ЦветФона(Цвет);
			ОбластьЕдиницы.ЦветФона(Цвет); 
			
		КонецЕсли;
		
		//Показываем измененные значения
		Таблица.Показать("Список цен");
		
	КонецЕсли; 
КонецПроцедуры // ОбработкаЯчейкиТаблицы()

 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
МеткаЕсть = 2;  МеткиНет = 1; // Номера иконок пометки
ШиринаЦены = 20; ШиринаЕдиницы = 5; ШиринаНаценки = 8; ШиринаВалюты = 8;// Ширины соответствующих колонок

// инициализация списков
ПометкаУдаления.УдалитьВсе();
ПометкаУдаления.ДобавитьЗначение("Поставить");
ПометкаУдаления.ДобавитьЗначение("Снять");
ПометкаУдаления.ТекущаяСтрока(1);

Знак.УдалитьВсе();
Знак.ДобавитьЗначение("+");
Знак.ДобавитьЗначение("-");
Знак.ТекущаяСтрока(1);

ПрибавляемаяЕдиница.УдалитьВсе();
ПрибавляемаяЕдиница.ДобавитьЗначение("%");
ПрибавляемаяЕдиница.ДобавитьЗначение("Ед. валюты");
ПрибавляемаяЕдиница.ТекущаяСтрока(1);

// Заполнение списков формы
ЗнакСравнения.УдалитьВсе();
ЗнакСравнения.ДобавитьЗначение(">");
ЗнакСравнения.ДобавитьЗначение(">=");
ЗнакСравнения.ДобавитьЗначение("<");
ЗнакСравнения.ДобавитьЗначение("<=");
ЗнакСравнения.ДобавитьЗначение("=");
ЗнакСравнения.ДобавитьЗначение("<>");
ЗнакСравнения.ТекущаяСтрока(1);

ЗначениеПоказателя.УдалитьВсе();
ЗначениеПоказателя.ДобавитьЗначение("все");
ЗначениеПоказателя.ДобавитьЗначение("положительные");
ЗначениеПоказателя.ДобавитьЗначение("отрицательные");
ЗначениеПоказателя.ДобавитьЗначение("меньше мин. остатка");
ЗначениеПоказателя.ТекущаяСтрока(1);

Показатель.УдалитьВсе();                             
Показатель.ДобавитьЗначение("остатки");
Показатель.ДобавитьЗначение("остатки за минусом резервов");
Показатель.ТекущаяСтрока(1);

ВидВалюты.ДобавитьЗначение("значение");
ВидВалюты.ДобавитьЗначение("из типа цен");

ВидНаценки.ДобавитьЗначение("значение");
ВидНаценки.ДобавитьЗначение("из типа цен");

// инициализация переменных множественного фильтра
ТипМФ.УдалитьВсе();
ТипМФ.ДобавитьЗначение("одно из");
ТипМФ.ДобавитьЗначение("все кроме");

ТаблицаМФ.УдалитьСтроки();
Пока ТаблицаМФ.КоличествоКолонок()>0 Цикл
    ТаблицаМФ.УдалитьКолонку(1);
КонецЦикла;  

ТаблицаМФ.НоваяКолонка("Тип");
ТаблицаМФ.НоваяКолонка("Вид");
ТаблицаМФ.НоваяКолонка("ИмяПеременной");
ТаблицаМФ.НоваяКолонка("СписокЭлементов");                 // список элементов, по которым производим фильтрацию
ТаблицаМФ.НоваяКолонка("ТипМФ");                           // текущая строка списка ТипМФ
ТаблицаМФ.НоваяКолонка("ФлВкл","Число",1,,"Вкл",5,,);      // фильтр включен ("1" или "0")
ТаблицаМФ.НоваяКолонка("Представление",,,,"Вид фильтра:");
ТаблицаМФ.ВыводитьПиктограммы("ФлВкл");
                                                                                
//                                 тип          вид                переменная          название
глДобавитьВТаблицуМФ(ТаблицаМФ, "Справочник", "Номенклатура",    "Номенклатура",  "По номенклатуре");
глДобавитьВТаблицуМФ(ТаблицаМФ, "Справочник", "ЗначенияСвойств", "Номенклатура",  "По свойствам номенклатуры");

ТекСтрокаВТаблице="";

// Инициализируем закладки
Форма.ИспользоватьЗакладки(1);
Форма.Закладки.ДобавитьЗначение(1,"Основная");
Форма.Закладки.ДобавитьЗначение(2,"Множественный фильтр");
Форма.Закладки.ТекущаяСтрока(1);

ДатаЦен = ПолучитьДатуТА(); 

// Цвета фона ячейки таблицы списка цен
Желтый = 12648447;  // такой же в шаблоне "Таблица" обработки в секции ЦенаМеньшаяНаценка
Белый  = 16777215;                            