// ПЕРЕМЕННЫЕ МОДУЛЯ
// 
// склад, с которым работаю в текущей сессии.
Перем Склад;
Перем ТипСклада; // 1 - оптовый, 2 - розничный
Перем Пользователь;
Перем Сообщение;

Перем НетДокумента; // тест сообщения, когда документ не востановлен
                    // по идентификатору

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МОДУЛЯ
// 
//******************************************************************************
// ПолучитьДокументПоИд(ДокИД, Док)
//
// Параметры: 
//  ДокИД	- идентификатор документа
//  Док		- ссылка на документ
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  По идентификатору получает документ.
//
Функция ПолучитьДокументПоИд(ДокИД, Док)
	Перем Рез;
	
	Док = ЗначениеИзСтрокиВнутр(ДокИд);
	Если ТипЗначенияСтр(Док) <> "Документ" Тогда
		Рез = 0;
	Иначе
		Рез = 1;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьДокументПоИд()

//******************************************************************************
// ПолучитьЭлемПоИд(ЭлементИд, Элемент)
//
// Параметры: 
//  ЭлементИд	- идентификатор элемента справочника
//  Элемент		- ссылка на элемент справочника
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  По идентификатору получает элемент справочника
//
Функция ПолучитьЭлемПоИд(ЭлементИд, Элемент)
	Перем Рез;
	
	Элемент = ЗначениеИзСтрокиВнутр(ЭлементИд);
	Если ТипЗначенияСтр(Элемент) <> "Справочник" Тогда
		Рез = 0;
	Иначе
		Рез = 1;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьЭлемПоИд()

//******************************************************************************
// Аутентификация(Логин, Пароль)
//
// Параметры: 
//  Логин  - имя пользователя
//  Пароль - пароль пользователя
//
// Возвращаемое значение:
//  1 - успешном завершении, 0 - пароль и/или логин неправильный
//
// Описание:
//  Проверяет логин и пароль пользователя.
//
Функция Аутентификация(Логин, Пароль)
	Рез = 0;
	
	СпрПользователи = СоздатьОбъект("Справочник.Пользователи");
	Если СпрПользователи.НайтиПоКоду(Логин, 0) = 1 Тогда
		Если СокрЛП(СпрПользователи.Пароль) = СокрЛП(Пароль) Тогда
			Пользователь = СпрПользователи.ТекущийЭлемент();
			Склад        = СпрПользователи.ОсновнойСклад;
			ТипСклада    = Склад.РозничныйСклад;
			Рез = 1;
		КонецЕсли;
	КонецЕсли;      
	
	Возврат Рез;
КонецФункции // Аутентификация()

//******************************************************************************
// ОпределитьТипСклада(СкладИд, Тип)
//
// Параметры: 
//  СкладИд - идентификатор  склада
//  Тип		- тип склада (1 - розничный, 0 - оптовый)
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  по иденификатору склада определяет его тип
//
Функция ОпределитьТипСклада(СкладИд, Тип)
	Перем ВремСклад;
	
	Рез = ПолучитьЭлемПоИд(СкладИд, ВремСклад);
	Если Рез = 1 Тогда
	    Тип = ВремСклад.РозничныйСклад;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции // ОпределитьТипСклада()

//******************************************************************************
// ПолучитьСписокСкладов()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  СписокСкладов - таблица значений, содержащая информацию о всех складах
//
// Описание:
//  формирует таблицу значений с ииформацией (идентификатор, название и тип)
//  о всех складах. 
//
Функция ПолучитьСписокСкладов()
	
	СписокСкладов = СоздатьОбъект("ТаблицаЗначений");
	СписокСкладов.НоваяКолонка("СкладИд");
	СписокСкладов.НоваяКолонка("Склад");
	СписокСкладов.НоваяКолонка("Тип"); // 1 - розничный, 0 - оптовый
	
	СпрСклады = СоздатьОбъект("Справочник.Склады");
	СпрСклады.ВыбратьЭлементы();
	Пока СпрСклады.ПолучитьЭлемент() = 1 Цикл
	    Если СпрСклады.ПометкаУдаления() = 0 Тогда
	        СписокСкладов.НоваяСтрока();
			СписокСкладов.СкладИд	= ЗначениеВстрокуВнутр(СпрСклады.ТекущийЭлемент());
			СписокСкладов.Склад		= СокрЛП(СпрСклады.Наименование);
			СписокСкладов.Тип		= СпрСклады.РозничныйСклад;
	    КонецЕсли;
	КонецЦикла;
	
	Возврат СписокСкладов;
	
КонецФункции // ПолучитьСписокСкладов()

//******************************************************************************
// ПолучитьСообщение()
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Текстовая строка - описание ошибки.
//
// Описание:
//  Возвращает описание последней ошибки.
//
Функция ПолучитьСообщение()
	Врем = Сообщение;
	Сообщение = "";
	Возврат Врем;
КонецФункции

//******************************************************************************
// КоэффСкидки(Скидка)
//
// Параметры: 
//  Скидка - элемент справочника скидки
//
// Возвращаемое значение:
//  коэффициент расчета скидки.
//
// Описание:
//  Из элемента справочника скидки рассчитывается коэффициент, умножив на который
//  можно рассчитать сумму скидки.
//
Функция КоэффСкидки(Скидка)
	Возврат Скидка.Процент / 100;
КонецФункции // КоэффСкидки()

//******************************************************************************
// КоэффНП(СтавкаНДС, СуммаВклНДС, СтавкаНП, СуммаВклНП)
//
// Параметры:
//  СтавкаНДС	- ставка НДС, значение перечисления СтавкиНДС
//  СуммаВклНДС	- флаг включения НДС в сумму.
//  СтавкаНП    - ставка НП, элемент справочника.
//  СуммаВклНП  - флаг включения НП в сумму.
//
// Возвращаемое значение:
//  Число, коэффициент расчета суммы НП.
//
// Описание:
//  На основе варианта расчета налога возвращает коэффициент расчета НП.
//  Для расчета суммы НП нужно сумму умножить на этот коэффициент.
//
Функция КоэффНП(СтавкаНДС, СуммаВклНДС, СтавкаНП, СуммаВклНП)
	Если СуммаВклНП = 1 Тогда
	    Рез = СтавкаНП.Ставка / (100 + СтавкаНП.Ставка);
	Иначе
		Рез = СтавкаНП.Ставка / (100);
	КонецЕсли;
	
	Если ПустоеЗначение(СтавкаНДС) = 0 Тогда
		Если СуммаВклНДС = 0 Тогда
		    Рез = Рез * (1+глНачисляемыйНДС(СтавкаНДС));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // КоэффНП()

//******************************************************************************
// КоэффНДС(СтавкаНДС, СуммаВклНДС, СтавкаНП, СуммаВклНП)
//
// Параметры: 
//  СтавкаНДС   - ставка НДС, значение перечисления
//  СуммаВклНДС - флаг включения НДС в сумму.
//  СтавкаНП    - ставка НП, элемент справочника.
//  СуммаВклНП  - флаг включения НП в сумму.
//
// Возвращаемое значение:
//  Число, коэффициент расчета суммы НДС.
//
// Описание:
//  На основе варианта расчета налога возвращает коэффициент расчета НДС.
//  Для расчета суммы НДС нужно сумму умножить на этот коэффициент.
//
Функция КоэффНДС(СтавкаНДС, СуммаВклНДС, СтавкаНП, СуммаВклНП)
	
	Если СуммаВклНДС = 1 Тогда
		Коэфф = глВыделяемыйНДС(СтавкаНДС);
		Если СуммаВклНП = 1 Тогда
		    Коэфф = 100 / (100 + СтавкаНП.Ставка) * Коэфф;
		КонецЕсли;
	Иначе
		Если СуммаВклНП = 1 Тогда
			Коэфф = 0; // коэффициент при таком варианте расчета не рассчитываем
		Иначе
			Коэфф = глНачисляемыйНДС(СтавкаНДС);
		КонецЕсли;
	КонецЕсли;     
	Возврат Коэфф;
КонецФункции // КоэффНДС()

//******************************************************************************
// ПолучитьЦеныНоменклатуры(ТоварИД, ФирмаИД, СкладИд, Список)
//
// Параметры: 
//  ТоварИД	- идентификатор товара 
//  ФирмаИД	- идентификатор фирмы
//  СкладИд	- идентификатор склад
//  Список	- список значений с ценами товара
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  Получает список значений, содержащий розничные цены для товара с 
//  идентификатором ТоварИд на фирме с идентификатором ФирмаИд и складе с
//  идентификатором СкладИд.
//
Функция ПолучитьЦеныНоменклатуры(ТоварИД, ФирмаИД, СкладИд, Список)
	Перем ИспФирма, ИспСклад, ИспТовар;
	
	Если ПолучитьЭлемПоИд(ТоварИд, ИспТовар) = 0 Тогда
		Сообщение = "Не удалось идентифицировать номенклатуру";
		Возврат 0;
	КонецЕсли;
		
	Если ПолучитьЭлемПоИд(ФирмаИд, ИспФирма) = 0 Тогда
		Сообщение = "Не удалось идентифицировать фирму";
		Возврат 0;
	КонецЕсли;
		
	Если ПолучитьЭлемПоИд(СкладИд, ИспСклад) = 0 Тогда
		Сообщение = "Не удалось идентифицировать склад";
		Возврат 0;
	КонецЕсли;
		
	Список = СоздатьОбъект("СписокЗначений");
			
	РегОстаткиТМЦ = СоздатьОбъект("Регистр.ОстаткиТМЦ");
	РегОстаткиТМЦ.УстановитьФильтр(ИспФирма, ИспТовар, ИспСклад);
	РегОстаткиТМЦ.ВыбратьИтоги();
	Пока РегОстаткиТМЦ.ПолучитьИтог() = 1 Цикл
		Список.ДобавитьЗначение(РегОстаткиТМЦ.ЦенаПрод);
	КонецЦикла;
			
	Возврат 1;
КонецФункции // ПолучитьЦеныНоменклатуры()

//******************************************************************************
// ПредставлениеЭлемента(ЭлементИД)
//
// Парметры:
//  ЭлементИД - идентификатор элемента
//
// Возвращаемое значение:
//  строковое представление элемента
//
// Описание:
//  по идентификатору возвращает строковое представление элемента
//
Функция ПредставлениеЭлемента(ЭлементИД)
	Элем = ЗначениеИзСтрокиВнутр(ЭлементИД);
	
	Если ПустоеЗначение(Элем) = 0 Тогда
	    Рез = Строка(Элем);
	Иначе
		Рез = "";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПредставлениеЭлемента()

//******************************************************************************
// СтрокаОплаты()
//
// Параметры: 
//  ТипЦен	- элемент справочника ТипыЦен
//  Скидка	- элемент справочника Скидки
//  Валюта	- элемент справочника Валюты
//  УчетНДС - флаг учета НДС. Может иметь значения:
//            0 - не учитывается, 1 - учитывается, 2 - учет НДС отсутствует
//  СуммаВклНдс - флаг включения НДС в сумму. Может иметь значения:
//            0 - НДС не включен в сумму, 1 - НДС включен в сумму
//  УчетНП	- флаг учета НП. Может иметь значения:
//            0 - не учитывается, 1 - учитывается, 2 - учет НП отсутствует
//  СуммаВклНп - флаг включения НП в сумму. Может иметь значения:
//            0 - НП не включен в сумму, 1 - НП включен в сумму
//  УчетЕНВД	- флаг учета ЕНВД. Может иметь значения:
//            0 - не учитывается, 1 - учитывается, 2 - учет ЕНВД отсутствует
//
// Возвращаемое значение:
//  Информационная строка
//
// Описание:
//  Формирует текстовую строку с информацией о типе цен, скидке, валюте и учете 
//  налогов 
//
Функция СтрокаОплаты(ТипЦен="", Скидка="", Валюта="", Курс=0, 
	                 УчетНДС=2, СуммаВклНдс=0, УчетНП=2, СуммаВклНП=0, УчетЕНВД=0)
	Результат = "";

	Если ПустоеЗначение(ТипЦен) = 0 Тогда
		Результат = Результат + ТипЦен.Наименование;  
	КонецЕсли;
	
	Если ПустоеЗначение(Скидка) = 0 Тогда
		Результат = Результат + " (скидка: " + СокрП(Скидка.Наименование) + ", " + Скидка.Процент+"% )";  
	КонецЕсли;
	
	Результат = Результат + ?(ПустоеЗначение(Результат)=1,"",", "+ РазделительСтрок);
	
	Если ПустоеЗначение(Валюта) = 0 Тогда
		Результат = Результат + Валюта.Наименование;  
		Результат = Результат + " курс: " + 
		Строка(Курс) + " " + глРубли.Наименование;  
	КонецЕсли;     
	        
	Если УчетЕНВД = 1 Тогда
		Результат = Результат + "<ПРОДАЖА, ОБЛАГАЕМАЯ ЕНВД>";
	Иначе
		Если УчетНДС = 0 Тогда
			Результат = Результат + ", < БЕЗ НДС >";  
		ИначеЕсли УчетНДС = 1 Тогда
			Результат = Результат + ", НДС";  

			Если СуммаВклНДС = 1 Тогда
				Результат = Результат + " - в сумме";
			Иначе                                    
				Результат = Результат + " - сверху";
			КонецЕсли;
		КонецЕсли;
		
		Если УчетНП = 0 Тогда
			Результат = Результат + ",< БЕЗ НП >";
		ИначеЕсли УчетНП = 1 Тогда
			Результат = Результат + ", НП";  
			Если СуммаВклНП = 1 Тогда
				Результат = Результат + " - в сумме";
			Иначе                                    
				Результат = Результат + " - сверху";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // СтрокаОплаты()

//******************************************************************************
// НайтиЭлемент(ВидСправочника, СтрокаПоиска, ФлагПоиска, ФлагВозврата, ВидПоиска="по наименованию", Список) 
// Параметры: 
//  ВидСправочника - вид справочника
//  СтрокаПоиска   - строка, по которой ведется поиск 
//  ФлагПоиска     - если пусто, то поиск по первым символам наименования,
//                   иначе - по вхождению.
//  ФлагВозврата   - если пусто, то ищем первый попавшийся элемент/группу,
//                   иначе = все
//  ВидПоиска      - строка. Возможные значения: "по коду", "по наименованию". 
//                   Необязательный параметр, если задан, то по наименованию.
//  Список         - формируемая таблица значений со списком найденных элементов, 
//                   содержащая колонки:
//                   ИД - идентификатор (ЗначениеВСтрокуВнутр) документа
//                   КодЭлемента   - код элемента (если в справочнике есть поле "код")
//                   Наименование  - наименование элемента (если в справочнике есть поле 
//                                   "наименование")
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  находит элементы справочника по вхождению строки в наименование и помещает 
//  результат в формируемую таблицу значений "Список"
//
Процедура НайтиЭлемент(ВидСправочника, СтрокаПоиска, ФлагПоиска, ФлагВозврата, ВидПоиска="по наименованию", Список) 
	Перем ЕстьКод, ЕстьНаименование, ПоискПоКоду;
	                               
	Если ВидПоиска = "по коду" Тогда
	    ПоискПоКоду = 1;
	Иначе
	    ПоискПоКоду = 0;
	КонецЕсли;
	
	ЕстьКод          = 0;
	ЕстьНаименование = 0;
	    
	МДСправочник = Метаданные.Справочник(ВидСправочника);
	Если МДСправочник.ДлинаКода > 0 Тогда
		ЕстьКод = 1;
	КонецЕсли;	
	
	Если МДСправочник.ДлинаНаименования > 0 Тогда
		ЕстьНаименование = 1;
	КонецЕсли;	
	                                          
	// формируем выходную таблицу значений
	Список = СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("ИД"); 
	
	Если ЕстьКод = 1 Тогда
		Список.НоваяКолонка("КодЭлемента",,,,"Код"); 
	КонецЕсли;
	
	Если ЕстьНаименование = 1 Тогда
		Список.НоваяКолонка("Наименование",,,,"Наименование"); 
	КонецЕсли;	
	
	Список.НоваяКолонка("ЭтоГруппа",,,,"ЭтоГруппа"); 

	Если ВидСправочника = "Номенклатура" Тогда
		Список.НоваяКолонка("Единица");
		Список.НоваяКолонка("ЕдиницаИД");
	КонецЕсли;
	
	// если ищем по коду или наименованию, а его нет, то искать нечего
	Если ПоискПоКоду = 1 Тогда
	   Если ЕстьКод = 0  Тогда
			Возврат;
	   КонецЕсли; 
	Иначе // по наименованию
		Если ЕстьНаименование = 0 Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	        
	КолЭлементов = 0;
	
	Спр = СоздатьОбъект("Справочник."+ВидСправочника);
	Если (ПустоеЗначение(ФлагПоиска) > 0) И (ПустоеЗначение(ФлагВозврата) > 0) Тогда
		// ищем по первым буквам и только один элемент
		Если ПоискПоКоду = 1 Тогда
			Спр.НайтиПоКоду(СтрокаПоиска,0);
		Иначе
			Спр.НайтиПоНаименованию(СтрокаПоиска,0,0);
		КонецЕсли;	
		
		Если Спр.Выбран() > 0 Тогда
			КолЭлементов = КолЭлементов+1;
			Список.НоваяСтрока(КолЭлементов);
			Список.ПолучитьСтрокуПоНомеру(КолЭлементов);
			Список.ИД = ЗначениеВСтрокуВнутр(Спр.ТекущийЭлемент());
			Если ЕстьКод = 1 Тогда
				Список.КодЭлемента = Спр.Код;
			КонецЕсли;
			Если ЕстьНаименование = 1 Тогда
				Список.Наименование = Спр.Наименование;
			КонецЕсли;
		    
			Если Спр.ЭтоГруппа() = 1 Тогда
			    Список.ЭтоГруппа = 1;
			Иначе
				Если ВидСправочника = "Номенклатура" Тогда
					Список.ЕдиницаИД = ЗначениеВСтрокуВнутр(Спр.ОсновнаяЕдиница);
					Список.Единица   = Строка(Спр.ОсновнаяЕдиница);
				КонецЕсли;
				Список.ЭтоГруппа = 0;
			КонецЕсли;
			
		КонецЕсли;	
	    
		Возврат;
		
	Иначе	// будем перебирать все элементы вручную
		                   
		Спр.ВыбратьЭлементы();
		Пока Спр.ПолучитьЭлемент()>0 Цикл
			
			УдовлетворяетУсловию = 0;
			Если ПустоеЗначение(ФлагПоиска)=0 Тогда
				// по подстроке
				Если Найти(ВРег(?(ПоискПоКоду = 1, Спр.Код, Спр.Наименование)), ВРег(СтрокаПоиска)) > 0 Тогда 
					УдовлетворяетУсловию = 1;
				КонецЕсли;	                 
			Иначе	  
				// по первым символам
			    Если Найти(ВРег(?(ПоискПоКоду = 1, Спр.Код, Спр.Наименование)), ВРег(СтрокаПоиска)) = 1 Тогда 
					УдовлетворяетУсловию = 1;
				КонецЕсли;	                 
			КонецЕсли;         
			                              
			Если УдовлетворяетУсловию = 1 Тогда    
				// добавляем новый элемент в список
				КолЭлементов = КолЭлементов+1;
				Список.НоваяСтрока(КолЭлементов);
				Список.ПолучитьСтрокуПоНомеру(КолЭлементов);
				Список.ИД = ЗначениеВСтрокуВнутр(Спр.ТекущийЭлемент());
				
				Если ЕстьКод = 1 Тогда
					Список.КодЭлемента = Спр.Код;
				КонецЕсли;	
				
				Если ЕстьНаименование = 1 Тогда
					Список.Наименование = Спр.Наименование;
				КонецЕсли;
			    
				Список.ЭтоГруппа = ?(Спр.ЭтоГруппа() > 0, 1, 0);
			
				Если ПустоеЗначение(ФлагВозврата) > 0 Тогда	
					Прервать;
				КонецЕсли;	
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры 	// НайтиЭлемент()

//******************************************************************************
// СоздатьЖурнал(ВидДок, НомерДок, ДатаНачала, ДатаКонца, ПризнакПроведения, 
//               Контрагент, Фирма, ЮрЛицо, УпрАналитика, Проект, СписокДокументов)
// Параметры:
//  ВидДок            - вид документа (если пусто, то по всем видам складских 
//                      документов)
//  НомерДок          - номер документа
//  ДатаНачала        - дата начала периода выборки документов
//  ДатаКонца         - дата конца периода выборки документов
//  ПризнакПроведения - если пуст, то отбираются все документы вне зависимости 
//                      от их статуса,
//                      если = 1, то отбираются только проведенные документы	
//                      если = 0, то отбираются только непроведенные документы
//  КонтрагентИД      - идентификатор (ЗначениеВСтрокуВнутр) контрагента
//                      отбираемых документов 
//  ФирмаИД           - идентификатор фирмы
//  ЮрЛицоИД          - идентификатор юр. лица
//  УпрАналитикаИД    - идентификатор упр. аналитики
//  ПроектИД          - идентификатор проекта 
//  СписокДокументов  - формируемая таблица значений со списком отобранных 
//                      документов.
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Отбирает документы. удовлетворяющие всем перечисленным фильтрам и помещает их в "СписокДокументов"
//
Процедура СоздатьЖурнал(ВидДок, НомерДок, ДатаНачала, ДатаКонца, ПризнакПроведения, 
                        КонтрагентИД, ФирмаИД, ЮрЛицоИД, УпрАналитикаИД, ПроектИД, СписокДокументов)
	Перем Док, ВидДокумента, НомерДокумента;
	Перем СпрЮрЛицо;
	
	// создаем выходную таблицу
	СписокДокументов = СоздатьОбъект("ТаблицаЗначений");
	СписокДокументов.НоваяКолонка("ДокументИД"); 
	СписокДокументов.НоваяКолонка("Синоним"); 
	СписокДокументов.НоваяКолонка("Документ");  
	СписокДокументов.НоваяКолонка("Номер");
	СписокДокументов.НоваяКолонка("Дата");
	СписокДокументов.НоваяКолонка("Время");
	СписокДокументов.НоваяКолонка("Контрагент");
	СписокДокументов.НоваяКолонка("Фирма");
	СписокДокументов.НоваяКолонка("Проведен");
	                           
	// находим контрагента и фирму по их идентификаторам
	СпрКонтрагент = "";
	ПолучитьЭлемПоИД(КонтрагентИД, СпрКонтрагент);
	
	СпрФирма = "";
	СпрФирма = ПолучитьЭлемПоИД(ФирмаИД, СпрФирма);
	
	СпрЮрЛицо = "";
	Если ПустоеЗначение(ЮрЛицоИД) = 0 Тогда
		ПолучитьЭлемПоИд(ЮрЛицоИД, СпрЮрЛицо);
	КонецЕсли;
	
	СпрУпрАналитика = "";
	ПолучитьЭлемПоИД(УпрАналитикаИД, СпрУпрАналитика);
	СпрПроект       = "";

	ПолучитьЭлемПоИД(ПроектИД, СпрПроект);
	                               
	ВидДокумента   = ВРег(СокрЛП(ВидДок)); 
	НомерДокумента = ВРег(СокрЛП(НомерДок)); 
	                                                    
	Если ПустаяСтрока(ВидДокумента) = 1 Тогда
		Док = СоздатьОбъект("Документ");
		Док.ВыбратьДокументы(ДатаНачала, ДатаКонца);
	Иначе
		Док = СоздатьОбъект("Документ." + ВидДокумента);
		Док.ВыбратьДокументы(ДатаНачала, ДатаКонца);
	КонецЕсли;
               
	КолДокументов = 0;
	                                           
	// цикл по документам
	Пока Док.ПолучитьДокумент() > 0 Цикл
		
		// проверяем вид док-та
		ВидТекДок = ВРег(Док.Вид());
		
		Если ПустаяСтрока(ВидДокумента) = 1 Тогда
			Если ТипСклада = 1 Тогда
				// розничный
				Если Найти("=РЕАЛИЗАЦИЯРОЗНИЦА=ПЕРЕОЦЕНКАРОЗНИЦА=ОТЧЕТККМ=ИНВЕНТАРИЗАЦИЯТМЦ=СПИСАНИЕТМЦ=ПЕРЕМЕЩЕНИЕТМЦ=", ВидТекДок) = 0 Тогда
					// вид документа не совпал с допустимым
					Продолжить;
				КонецЕсли;
			Иначе
				Если Найти("=РЕАЛИЗАЦИЯ=ВОЗВРАТОТПОКУПАТЕЛЯ=ПОСТУПЛЕНИЕТМЦ=ВОЗВРАТПОСТАВЩИКУ=ИНВЕНТАРИЗАЦИЯТМЦ=СПИСАНИЕТМЦ=ОПРИХОДОВАНИЕТМЦ=ПЕРЕМЕЩЕНИЕТМЦ=", ВидТекДок) = 0 Тогда
					// вид документа не совпал с допустимым
					Продолжить;
				КонецЕсли;
			КонецЕсли;	           
		КонецЕсли;	           
		
		Если ПустаяСтрока(НомерДокумента) = 0 Тогда
			// проверяем номер док-та
			Если НомерДокумента <> ВРег(Док.НомерДок) Тогда
			    Продолжить;
			КонецЕсли;
		КонецЕсли;	           
		
		Если ПустоеЗначение(СпрФирма)=0 Тогда
			Если ВидТекДок = "ПЕРЕМЕЩЕНИЕТМЦ" Тогда
			    Если (Док.Фирма <> СпрФирма) И (Док.ФирмаПолучатель <> СпрФирма) Тогда
			        Продолжить;
				КонецЕсли;
			Иначе
			    Если Док.Фирма <> СпрФирма Тогда
			        Продолжить;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
		                       
		Если ПустоеЗначение(СпрУпрАналитика)=0 Тогда
			// проверяем УпрАналитику
			Если Док.Фирма.УпрАналитика <> СпрУпрАналитика Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		                       
		Если ПустоеЗначение(СпрЮрЛицо)=0 Тогда
			// проверяем ЮрЛицо
			Если Док.Фирма.ЮрЛицо <> СпрЮрЛицо Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;	
		                       
		// проверяем ЮрЛицо
		Если ПустоеЗначение(СпрПроект) = 0 Тогда
			Если Док.Проект <> СпрПроект Тогда
			    Продолжить;
			КонецЕсли;
		КонецЕсли;

		// проверяем проект
		Если ПустоеЗначение(СпрЮрЛицо) = 0 Тогда
			Если Док.ЮрЛицо <> СпрЮрЛицо Тогда
			    Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ВидТекДок = "ПЕРЕМЕЩЕНИЕТМЦ" Тогда
			Если (Док.Склад <> Склад) И (Док.СкладПолучатель <> Склад) Тогда
		        Продолжить;
			КонецЕсли;
		Иначе
		    Если Док.Склад <> Склад Тогда
		        Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// проверяем проведенность док-та
		Если ПустоеЗначение(ПризнакПроведения) = 0 Тогда
			Если ПризнакПроведения = 1 Тогда
				Если Док.Проведен() = 0 Тогда
					Продолжить;
				КонецЕсли;	
			Иначе           
				Если Док.Проведен() <> 0 Тогда
					Продолжить;
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;
		
		// проверяем Контрагента
		Если ПустоеЗначение(СпрКонтрагент) = 0 Тогда
			Если глЕстьРеквизитШапки("Контрагент", Док.Вид()) = 1 Тогда
				Если Док.Контрагент <> СпрКонтрагент Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		 
		// если все проверки выполнены успешно, значит, это тот документ, что нам нужен
		КолДокументов = КолДокументов + 1;
		СписокДокументов.НоваяСтрока(КолДокументов);
		СписокДокументов.ПолучитьСтрокуПоНомеру(КолДокументов);
		СписокДокументов.ДокументИД = ЗначениеВСтрокуВнутр(Док.ТекущийДокумент());
		СписокДокументов.Синоним    = глНазваниеДокументаВЖурнале(Док.ТекущийДокумент());  //  "Мазафака";
		СписокДокументов.Документ   = Док.Вид();
		СписокДокументов.Номер      = Док.НомерДок;
		СписокДокументов.Дата       = Док.ДатаДок;
		СписокДокументов.Время      = Док.ПолучитьВремя();
		СписокДокументов.Контрагент = Строка(глСтрокаКонтрагента(Док.ТекущийДокумент()));
		СписокДокументов.Фирма      = ?(Док.Фирма.Выбран()=0,"",Строка(Док.Фирма));
		СписокДокументов.Проведен   = Док.Проведен();
	КонецЦикла;	
	
КонецПроцедуры // СоздатьЖурнал()

//******************************************************************************
// СписокЭлементов(ТипСправочника, Элемент, Список, ТипВладельца="",ВладелецСправочника="")
//
// Параметры: 
//  ТипСправочника      - вид справочника
//  ЭлементИД           - идентификатор (ЗначениеВСтрокуВнутр) группы этого справочника
//                        если идентификатор пуст, то считаем, что это корень
//  Список              - формируемая таблица значений со списком отобранных элементов, 
//                        содержащая колонки:
//  ТипВладельца        - идентификатор (ЗначениеВСтрокуВнутр) документа
//  ВладелецСправочника - код элемента (если в справочнике есть поле "код")
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  отбирает элементы и группы справочника и помещает их в таблицу значений "Список"
//  выборка осуществляется в следующем порядке:
//  - сначала все родители группы "Элемент", начиная от корня
//  - затем все потомки первого уровня
//
Процедура СписокЭлементов(ТипСправочника, ЭлементИД, Список, ТипВладельца="",ВладелецСправочника="")
	Перем ЕстьКод, ЕстьНаименование;
	                               
	ЕстьКод          = 0;
	ЕстьНаименование = 0;
	МДСправочник     = Метаданные.Справочник(ТипСправочника);
	
	// создаем выходную таблицу
	Список = СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("ИД"); 
	
	Если МДСправочник.ДлинаКода > 0 Тогда
		ЕстьКод = 1;
		Список.НоваяКолонка("КодЭлемента"); 
	КонецЕсли;
	
	Если МДСправочник.ДлинаНаименования>0 Тогда
		ЕстьНаименование = 1;
		Список.НоваяКолонка("Наименование",,,,"Наименование"); 
	КонецЕсли;	
	                       
	Список.НоваяКолонка("ЭтоГруппа",,,,"Это группа?");
	
	Если ТипСправочника = "Номенклатура" Тогда
		Список.НоваяКолонка("ЕдиницаИд");
		Список.НоваяКолонка("Единица");
	КонецЕсли;
	                            
	// получаем группу справочника, для которой надо строить список элементов
	ГруппаСпр = "";
	ПолучитьЭлемПоИД(ЭлементИД, ГруппаСпр);
	
	Если ПустоеЗначение(ГруппаСпр) = 0 Тогда
		Если ГруппаСпр.ЭтоГруппа() = 0 Тогда // нашли, но это не группа
			ГруппаСпр = ГруппаСпр.Родитель;
		КонецЕсли;
		Если ГруппаСпр.Выбран() = 0 Тогда
			ГруппаСпр = ПолучитьПустоеЗначение("Справочник." + ТипСправочника);
		КонецЕсли;
	КонецЕсли;	
		    
	КолЭлементов = 0;                                                        
	
	// перебираем всех потомков первого уровня
	Спр = СоздатьОбъект("Справочник." + ТипСправочника);
	
	Если ПустоеЗначение(ВладелецСправочника) = 0 Тогда
		ВладелецСпр	= "";
		ПолучитьЭлемПоИД(ВладелецСправочника, ВладелецСпр);
	    Спр.ИспользоватьВладельца(ВладелецСпр);
	КонецЕсли;
	
	Спр.ИспользоватьРодителя(ГруппаСпр);
	Спр.ВыбратьЭлементы(1);
	Пока Спр.ПолучитьЭлемент()>0 Цикл
		
		Если Спр.Родитель = ГруппаСпр Тогда
			КолЭлементов = КолЭлементов + 1;
			Список.НоваяСтрока(КолЭлементов);
			Список.ПолучитьСтрокуПоНомеру(КолЭлементов);
			Список.ИД = ЗначениеВСтрокуВнутр(Спр.ТекущийЭлемент());
			
			Если ЕстьКод = 1 Тогда
				Список.КодЭлемента = Спр.Код;
			КонецЕсли;
			
			Если ЕстьНаименование = 1 Тогда
				Список.Наименование = СокрЛП(Спр.Наименование);
			КонецЕсли;
			
			Если Спр.ЭтоГруппа() = 0 Тогда
				Список.ЭтоГруппа = 0;
				Если ТипСправочника = "Номенклатура" Тогда
					Список.ЕдиницаИд = ЗначениеВСтрокуВнутр(Спр.ОсновнаяЕдиница);
					Список.Единица   = Строка(Спр.ОсновнаяЕдиница);
				КонецЕсли;
			Иначе
				Список.ЭтоГруппа = 1;
			КонецЕсли;
	    КонецЕсли;
	КонецЦикла;
	                                          
	// перебираем всех родителей
	Пока ГруппаСпр.Выбран() > 0 Цикл                      
		Список.НоваяСтрока(1);
		Список.ПолучитьСтрокуПоНомеру(1);
		Список.ИД = ЗначениеВСтрокуВнутр(ГруппаСпр.ТекущийЭлемент());
		
		Если ЕстьКод = 1 Тогда
			Список.КодЭлемента = ГруппаСпр.Код;
		КонецЕсли;
		
		Если ЕстьНаименование = 1 Тогда
			Список.Наименование = СокрЛП(ГруппаСпр.Наименование);
		КонецЕсли;
		
		Список.ЭтоГруппа = 1;
		ГруппаСпр = ГруппаСпр.Родитель;
	КонецЦикла;	
	
КонецПроцедуры // СписокЭлементов()

//******************************************************************************
// ПровестиДокумент(ДокИд)
//
// Параметры: 
//  ДокИД	- идентификатор документа
//
// Возвращаемое значение:
//  1 - документ проведен, 0 - нет
//
// Описание:
//  Выполняет проведение документа, заданного идентификатором ДокИд 
//
Функция ПровестиДокумент(ДокИд)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИд, Док);
	Если Рез = 0 Тогда
	    Сообщение = НетДокумента;
	Иначе
		ДокПров = СоздатьОбъект("Документ");
		Рез = ДокПров.НайтиДокумент(Док);
		Если Рез = 1 Тогда
			Рез = ДокПров.Провести(1);
			Если Рез = 0 Тогда
			    Сообщение = "Ну удалось провести документ ";
			КонецЕсли;
		Иначе
			Сообщение = "Ну удалось найти документ";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПровестиДокумент()

//******************************************************************************
// ДобавитьСтрокуОтчета(Расшифровка, Объект, ОписаниеОбъекта, ОстатокНаНачало, Приход, Расход, ОстатокНаКонец, Список)
//
// Парметры:
//  Расшифровка
//  Объект
//  ОписаниеОбъекта
//  ОстатокНаНачало
//  Приход
//  Расход
//  ОстатокНаКонец
//  Список
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу значений Список новую строку и заполняет колоки этой
//  строки значениями из параметров.
//
Процедура ДобавитьСтрокуОтчета(Расшифровка, Объект, ОписаниеОбъекта, ОстатокНаНачало, Приход, Расход, ОстатокНаКонец, ВидДок, Отчет)
	Отчет.НоваяСтрока();
	Отчет.Расшифровка     = Расшифровка;
	Отчет.ОбъектИД        = ЗначениеВстрокуВнутр(Объект);
	Отчет.ОписаниеОбъекта = ОписаниеОбъекта;
	Отчет.ОстатокНаНачало = ОстатокНаНачало;
	Отчет.Приход          = Приход;
	Отчет.Расход          = Расход;
	Отчет.ОстатокНаКонец  = ОстатокНаКонец;
	Отчет.ВидДокумента    = ВидДок;
КонецПроцедуры // ДобавитьСтрокуОтчета()

//******************************************************************************
// ОстаткиТоваров(Расшифровка, Объект, ОписаниеОбъекта, ОстатокНаНачало, Приход, Расход, ОстатокНаКонец, Список)
//
// Парметры:
//  ВидОтчета			1 - формируем отчет "ОстаткиТоваров", 2 - формируем отчет "ДвиженияТоваров"
//  ДатаНачала			дата начала отчета (только для "ДвиженияТоваров")
//  ДатаКонца			дата конца отчета
//  ТоварИД				идентификатор (ЗначениеВСтрокуВнутр) товара или группы товаров
//  ЗначениеСвойстваИД	идентификатор (ЗначениеВСтрокуВнутр) значения свойства
//  ФлагВНаличии		если не пуст, то показываем только имеющиеся в наличии товары (только для "ОстаткиТоваров")
//  ФлагПоДокументам	если не пуст, то детализируем по документам (только для "ДвиженияТоваров")
//  Список				формируемая таблица значений, 
//					    содержащая колонки:
//					    Расшифровка - = "группа", если данная строка таблицы является итогами по группе товаров 
//                      = "товар", если данная строка таблицы является итогами товару
//                      = "документ", если данная строка таблицы является итогами по документу	
//                      ОбъектИД    - идентификатор (ЗначениеВСтрокуВнутр) объекта (группы товаров, 
//                                    товара или документа), по которому в данной строке содержатся итоги
//                      ОписаниеОбъекта - описание этого объекта
//                      ОстатокНаНачало - остаток товара на начало периода (только для "ДвиженияТоваров") 
//                      Приход - приход товара за период (только для "ДвиженияТоваров") 
//                      Расход - расход товара за период (только для "ДвиженияТоваров")
//                      ОстатокНаКонец - остаток товара на конец периода
//
// Возвращаемое значение:
//  пустая строка, если успешное завершение. Иначе сообщение об ошибке
//
// Описание:
//  формирует таблицу значений с данными для отчета остатки товаров
//
Функция ОстаткиТоваров(ВидОтчета, ДатаНачала, ДатаКонца, ТоварИД, ЗначениеСвойстваИД, ФлагВНаличии, ФлагПоДокументам, Список)
	Перем ФильтрТоваров;
	
	Если ПустоеЗначение(ДатаКонца) = 1 Тогда
	    ДатаКонца = ПолучитьДатуТА();
	ИначеЕсли ДатаКонца > ПолучитьДатуТА() Тогда
		ДатаКонца = ПолучитьДатуТА();
	КонецЕсли;
	
	Если ПустоеЗначение(ДатаНачала) = 1 Тогда
	    ДатаНачала = ДатаКонца;
	ИначеЕсли ДатаНачала > ДатаКонца Тогда
		ДатаНачала = ДатаКонца;
	КонецЕсли;

	ТекстЗапроса = 
	"//{{ЗАПРОС(ОстаткиТоваров)
	|Период с ДатаНачала по ДатаКонца;
	|ВыбСклад = Регистр.ОстаткиТМЦ.Склад;
	|Товар    = Регистр.ОстаткиТМЦ.Номенклатура;
	|Количество    = Регистр.ОстаткиТМЦ.Количество;
	|ТекДок   = Регистр.ОстаткиТМЦ.ТекущийДокумент;
	|Функция КоличествоКон = КонОст(Количество);
	|Группировка Товар " + ?(ВидОтчета = 2, "", "Все") + ";
	|Условие(Склад = ВыбСклад);
	|"//}}ЗАПРОС
	;
	
	// условие на значение св-ва товаров
	Если ПустоеЗначение(ЗначениеСвойстваИД) = 0 Тогда
		ЗначениеСвойства = ЗначениеИзСтрокиВнутр(ЗначениеСвойстваИД);
		
		СвойстваТоваров = "
		|Товар          = Справочник.СвойстваНоменклатуры.Владелец;
		|ЗначСвойства   = Справочник.СвойстваНоменклатуры.ЗначениеСвойства;
		|ТекущийЭлемент = Справочник.СвойстваНоменклатуры.ТекущийЭлемент;
		|Функция ТоварВесовойСумма = Сумма(Товар.Весовой);
		|Группировка Товар без групп;
		|Условие(ЗначСвойства = ЗначениеСвойства);";
		
		ЗапросТов = СоздатьОбъект("Запрос");
		Если ЗапросТов.Выполнить(СвойстваТоваров) = 0 Тогда
			Возврат "Не выполнился запрос";
		КонецЕсли;
		
		ФильтрТоваров = СоздатьОбъект("СписокЗначений");
		
		Пока ЗапросТов.Группировка("Товар") = 1 Цикл
			ФильтрТоваров.ДобавитьЗначение(ЗапросТов.Товар);
		КонецЦикла;
		
		ТекстЗапроса = ТекстЗапроса + "Условие(Товар в ФильтрТоваров);";
	КонецЕсли;
	
	// условие на товар или группу товаров
	Если ПустоеЗначение(ТоварИД) = 0 Тогда
		Тов = ЗначениеИзСтрокиВнутр(ТоварИД);
		ТекстЗапроса = ТекстЗапроса + "Условие(Товар в Тов);";
	КонецЕсли;
	
	Если ВидОтчета = 1 Тогда // остатки товаров
		Если Число(ФлагВНаличии) = 1 Тогда
		    ТолькоИмеющиеся = 1;
		Иначе
			ТолькоИмеющиеся = 0;
		КонецЕсли;
	ИначеЕсли ВидОтчета = 2 Тогда // движения товаров
		ТекстЗапроса = ТекстЗапроса + "
						|Функция КоличествоНач    = НачОст(Количество);
						|Функция КоличествоПриход = Приход(Количество);
						|Функция КоличествоРасход = Расход(Количество);";
		Если Число(ФлагПоДокументам) = 1 Тогда
			ТекстЗапроса = ТекстЗапроса + "Группировка ТекДок;";
			ДеталПоДок = 1;
		Иначе
			ДеталПоДок = 0;
		КонецЕсли;
	КонецЕсли;
		
	Запрос = СоздатьОбъект("Запрос");
	
	Если Запрос.Выполнить(ТекстЗапроса) = 0 Тогда
	    Рез = "запрос Не выполнился";
	Иначе
		Рез = "";
		Список = СоздатьОбъект("ТаблицаЗначений");
		Список.НоваяКолонка("Расшифровка");
		Список.НоваяКолонка("ОбъектИД");
		Список.НоваяКолонка("ОписаниеОбъекта");
		Список.НоваяКолонка("ОстатокНаНачало");
		Список.НоваяКолонка("Приход");
		Список.НоваяКолонка("Расход");
		Список.НоваяКолонка("ОстатокНаКонец");
		Список.НоваяКолонка("ВидДокумента");
		
		Пока Запрос.Группировка("Товар") = 1 Цикл
			Если ТолькоИмеющиеся  = 1 Тогда
			    Если Запрос.КоличествоКон <= 0 Тогда
			        Продолжить;
			    КонецЕсли;
			КонецЕсли;
			
			ДобавитьСтрокуОтчета(
			     ?(Запрос.Товар.ЭтоГруппа() = 1, "группа", "товар"),
				 ЗначениеВстрокуВнутр(Запрос.Товар),
				 ?(Запрос.Товар.ЭтоГруппа() = 1, СокрЛП(Запрос.Товар.Наименование), СокрЛП(Запрос.Товар.ПолнНаименование)),
				 ?(ВидОтчета = 2, Запрос.КоличествоНач, 0),
				 ?(ВидОтчета = 2, Запрос.КоличествоПриход, 0),
				 ?(ВидОтчета = 2, Запрос.КоличествоРасход, 0),
				 Запрос.КоличествоКон,
				 "",
				 Список);
				 
			 Если ДеталПоДок = 1 Тогда
			 	Пока Запрос.Группировка("ТекДок") = 1 Цикл
			 		ТекДок = Запрос.ТекДок;
			 		ДобавитьСтрокуОтчета(
			 		"документ",
			 		ЗначениеВстрокуВнутр(ТекДок),
			 		глНазваниеДокументаВЖурнале(ТекДок) + " № " + ТекДок.НомерДок + " от " + ТекДок.ДатаДок,
			 		Запрос.КоличествоНач, 
			 		Запрос.КоличествоПриход,
			 		Запрос.КоличествоРасход,
			 		Запрос.КоличествоКон,
			 		Запрос.ТекДок.Вид(),
			 		Список);
			 	КонецЦикла;
			 КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ОстаткиТоваров()

//******************************************************************************
// ШапкаТОРГ12ДляПечати(ДокИД, Реквизиты)
//
// Парметры:
//  ДокИД		- идентификатор документа
//  Реквизиты	- список значений с реквизитами шапки документа
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  формирует список значений с реквизитами шапки документа для печатной 
//  формы ТОРГ-12
//
Функция ШапкаТОРГ12ДляПечати(ДокИД, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
	    Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.НомерДок), "Номер");
		Реквизиты.ДобавитьЗначение(Док.ДатаДок, "Дата");
	
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование), "Фирма");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ИНН), "ФирмаИНН");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ОКПО), "ФирмаОКПО");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ЮрАдрес), "ФирмаАдрес");
		
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ПолнНаименование), "Контрагент");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ЮрАдрес), "КонтрагентАдрес");
		
		Если ПустоеЗначение(Док.ДокОснование) = 0 Тогда
		    ТекстОснование = глНазваниеДокументаВЖурнале(Док.ДокОснование) + " № " + Док.ДокОснование.НомерДок + " от " + Док.ДокОснование.ДатаДок;
		Иначе
			ТекстОснование = "";
		КонецЕсли;
		Реквизиты.ДобавитьЗначение(ТекстОснование, "Основание");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП, "УчитыватьНП");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ШапкаТОРГ12ДляПечати()

//******************************************************************************
// СоставТОРГ12ДляПечати(ДокИД, Состав, Итоги)
//
// Парметры:
//  ДокИД	- идентификатор документа
//  Состав	- таблица значений с данными для табличной части
//  Итоги	- список значений с итогами по суммовым колонкам
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  формирует таблицу значений для табличной части и список значений с итогами
//  по суммовым колонкам табличной части для формирования печатной формы ТОРГ-12
//
Функция СоставТОРГ12ДляПечати(ДокИД, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
	    Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("КодЕд");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		Состав.НоваяКолонка("СуммаБезНДС");
		Состав.НоваяКолонка("СтавкаНДС");
		Состав.НоваяКолонка("СуммаНДС");
		
		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СуммаНП");
		КонецЕсли;
		
		ИтогСумма       = 0;
		ИтогСуммаБезНДС = 0;
		ИтогСуммаВсего  = 0;
		ИтогСуммаНДС    = 0;
		ИтогСуммаНП     = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= СокрЛП(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
			Состав.КодЕд		= Док.Единица.Код;
			СуммаСНДС			= Док.Сумма;
			ИтогСуммаВсего		= ИтогСуммаВсего + Док.Сумма;
			
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СуммаНП = Док.СуммаНП;
				Если Док.СуммаВклНП = 1 Тогда
					СуммаСНДС = СуммаСНДС - Док.СуммаНП;
				Иначе
					ИтогСуммаВсего = ИтогСуммаВсего + Док.СуммаНП;
				КонецЕсли;
				ИтогСуммаНП = ИтогСуммаНП + Док.СуммаНП
			КонецЕсли;
			
			Состав.СуммаНДС  = Док.СуммаНДС;
			Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
			ИтогСуммаНДС     = ИтогСуммаНДС + Док.СуммаНДС;
			Если Док.СуммаВклНДС = 1 Тогда
				СуммаБезНДС = СуммаСНДС - Док.СуммаНДС;
			Иначе
				СуммаБезНДС = СуммаСНДС;
				ИтогСуммаВсего = ИтогСуммаВсего + Док.СуммаНДС;
			КонецЕсли;
			
			Если Док.Количество <> 0 Тогда
				Состав.Цена = СуммаБезНДС / Док.Количество;
			КонецЕсли;
			
			Состав.Сумма		= СуммаСНДС;
			Состав.СуммаБезНДС	= СуммаБезНДС;
			ИтогСумма			= ИтогСумма + СуммаСНДС;
			ИтогСуммаБезНДС		= ИтогСуммаБезНДС + СуммаБезНДС;
			
		КонецЦикла;
		
		Итоги.ДобавитьЗначение(ИтогСуммаНДС, "СуммаНДС");
			
		Если Док.УчитыватьНП = 1 Тогда
			Итоги.ДобавитьЗначение(ИтогСуммаНП, "СуммаНП");
		КонецЕсли;
		
		Итоги.ДобавитьЗначение(ИтогСумма, "Сумма");
		Итоги.ДобавитьЗначение(ИтогСуммаБезНДС, "СуммаБезНДС");
		Итоги.ДобавитьЗначение(ИтогСуммаВсего, "СуммаВсего");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // СоставТОРГ12ДляПечати()

//******************************************************************************
// ДобавитьТоварВсписок(Товар, Список)
//
// Параметры: 
//  Товар	- элемент справочника Номенклатура
//  Список	- таблица значений
//
// Возвращаемое значение:
//  Нет
//
// Описание:
//  Добавляет в таблицу значений Список информацию о товаре Товар.
//
Процедура ДобавитьТоварВсписок(Товар, Список)
	Список.НоваяСтрока();
	Список.Ид            = ЗначениеВстрокуВнутр(Товар);
	Список.Код           = СокрЛП(Товар.Код);
	Список.Наименование  = СокрЛП(Товар.Наименование);
КонецПроцедуры // ДобавитьТоварВсписок()

//******************************************************************************
// ОтборНоменклатуры(ТипФильтра, ЗначениеФильтра, Список)
//
// Параметры: 
//  ТипФильтра      - 1 - фильтр по коду, 2 - по началу наименования, 3 - по 
//                    вхождению в наименование
//  ЗначениеФильтра - значение фильтра, код товара или наименование товара
//                    (его часть)
//  Список          - список значений, содержащий ссылки на товары
//
// Возвращаемое значение:
//  1- в списке есть хоть один товар, 0 - список пуст.
//
// Описание:
//  Формирует таблицу значений, состоящий из товаров, удовлетворяющих фильтру
//
Функция ОтборНоменклатуры(ТипФильтра, ЗначениеФильтра, Список)
	Перем Рез;
	
	Список = СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("Ид");
	Список.НоваяКолонка("Код");
	Список.НоваяКолонка("Наименование");
	
	ТипФильтра = Число(ТипФильтра);
	Врем = СокрЛП(ЗначениеФильтра);
	
	СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
	Если ТипФильтра = 3 Тогда // по вхождению в наименование
		Рез = 0;
		// искать будем методом перебора
		СпрНоменклатура.ВключатьПодчиненные(1);
		СпрНоменклатура.ВыбратьЭлементы();
		Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
			Пз = Найти(СпрНоменклатура.Наименование, Врем);
		    Если Пз > 0 Тогда
		        ДобавитьТоварВсписок(СпрНоменклатура.ТекущийЭлемент(), Список);
				Рез = 1;
		    КонецЕсли;
		КонецЦикла;
	Иначе
		Если ТипФильтра = 1 Тогда // по коду
			Рез = СпрНоменклатура.НайтиПоКоду(Врем, 0);
		ИначеЕсли ТипФильтра = 1 Тогда // по началу наименования
			Рез = Число(СпрНоменклатура.НайтиПоНаименованию(Врем, 0, 0));
		КонецЕсли;
		
		Если Рез = 1 Тогда
		    ДобавитьТоварВсписок(СпрНоменклатура.ТекущийЭлемент(), Список);
		КонецЕсли;
	КонецЕсли;
	
	Если Рез = 0 Тогда
		Сообщение = "Нет номенклатуры в выборке";
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ОтборНоменклатуры()

//******************************************************************************
// ПредставлениеДокумента(Идентификатор)
//
// Параметры: 
//  Вид           - вид документа
//  Представление - синоним документа
//
// Возвращаемое значение:
//  1 - операция выполнена успешно, 0 - произошла ошибка
//
// Описание:
//  По виду документа получет его представление (синоним)
//
Функция ПредставлениеДокумента(Вид)
	
	Док = Метаданные.Документ(Вид);
	
	Если Док.Выбран() = 0 Тогда
		Представление = "";
	Иначе
		Представление = Док.Представление();
	КонецЕсли;
	
	Возврат Представление;
КонецФункции // ПредставлениеДокумента()

//******************************************************************************
// СписокНоменклатурыРозн(ГруппаИД,ФирмаИД,Список,СуммаВклНДС,СуммаВклНП,Розн)
//
// Параметры: 
//  ГруппаИД        - идентификатор группы
//  Список          - таблица значений.
//
// Возвращаемое значение:
//  1- в таблице есть хоть одина строка, иначе 0.
//
// Описание:
//  Формирует таблицу значений, состоящий из товаров, удовлетворяющих фильтру.
//  В таблице значений кроме товаров содержатся их розничные цены
//
Функция СписокНоменклатуры(ГруппаИД, ФирмаИД, Список, СуммаВклНДС=1, СуммаВклНП=1, Розн=1, СкладИд="")
	Перем ОстаткиНоменклатуры, ИспФирма, ИспСклад;
	
	Если ПолучитьЭлемПоИд(ФирмаИД, ИспФирма) = 0 Тогда
		Сообщение = "Не удалось получить цены номенклатуры. Фирма не идентифицирована.";
		Возврат 0;
	КонецЕсли;
	
	Список = СоздатьОбъект("ТаблицаЗначений");
	Список.НоваяКолонка("НоменклатураИД");
	Список.НоваяКолонка("ЭтоГруппа");
	Список.НоваяКолонка("ВидТМЦ");
	Список.НоваяКолонка("Представление");
	Список.НоваяКолонка("Единица");
	Список.НоваяКолонка("Цена");
	Список.НоваяКолонка("СтавкаНДС");
	Список.НоваяКолонка("КоэффНДС");
	Список.НоваяКолонка("СтавкаНП");
	Список.НоваяКолонка("КоэффНП");

	СпрНоменклатура = СоздатьОбъект("Справочник.Номенклатура");
	СпрНоменклатура.ВключатьПодчиненные(0);

	Группа = ЗначениеИзСТрокиВнутр(ГруппаИД);
	Если ТипЗначенияСтр(Группа) = "Справочник" Тогда
		// Заносим в таблицу всех родителей
		Если Группа.ЭтоГруппа() = 0 Тогда
			НадГруппа = Группа.Родитель;
		Иначе
			НадГруппа = Группа;
		КонецЕсли;
		
		СпрНоменклатура.ИспользоватьРодителя(НадГруппа);
		ВремГруппа = НадГруппа;
		Пока ПустоеЗначение(ВремГруппа) = 0 Цикл
			Список.НоваяСтрока(1); // строку вставляем в начало таблицы
			Список.НоменклатураИД = ЗначениеВстрокуВнутр(ВремГруппа.ТекущийЭлемент());
			Список.ЭтоГруппа      = ВремГруппа.ЭтоГруппа();
			Список.Представление  = СокрЛП(ВремГруппа);
			
			ВремГруппа = ВремГруппа.Родитель;
		КонецЦикла;
	КонецЕсли;
	
	Если Розн = 1 Тогда
		Если ПолучитьЭлемПоИд(СкладИД, ИспСклад) = 0 Тогда
			Сообщение = "Не удалось получить цены номенклатуры. Фирма не идентифицирована.";
			Возврат 0;
		КонецЕсли;
		РегОстатки = СоздатьОбъект("Регистр.ОстаткиТМЦ");
		РегОстатки.УстановитьЗначениеФильтра("Фирма", ИспФирма, 1);
		РегОстатки.УстановитьЗначениеФильтра("Склад", ИспСклад, 1);
		
		РегОстатки.ВыгрузитьИтоги(ОстаткиНоменклатуры, 1);
		ОстаткиНоменклатуры.Сортировать("Номенклатура");
	КонецЕсли;
	
	СпрНоменклатура.ВыбратьЭлементы();
	Пока СпрНоменклатура.ПолучитьЭлемент() = 1 Цикл
		Товар = СпрНоменклатура.ТекущийЭлемент();
		Если Товар.ЭтоГруппа() = 1 Тогда
			Список.НоваяСтрока();
			Список.НоменклатураИД	= ЗначениеВстрокуВнутр(Товар);
			Список.Представление	= СокрЛП(Товар.Наименование);
			Список.ЭтоГруппа = 1;
		Иначе
			Если Розн = 1 Тогда
				Поз = 0;
				Если ОстаткиНоменклатуры.НайтиЗначение(Товар, Поз, "Номенклатура") = 1 Тогда
					Пока Товар = ОстаткиНоменклатуры.ПолучитьЗначение(Поз, "Номенклатура") Цикл
						Список.НоваяСтрока();
						Список.НоменклатураИД	= ЗначениеВстрокуВнутр(Товар);
						Список.ЭтоГруппа		= 0;
						Цена = ОстаткиНоменклатуры.ПолучитьЗначение(Поз, "ЦенаПрод");
						Список.Представление	= СокрЛП(Товар.Наименование);
						Список.Единица			= СокрЛП(Товар.БазоваяЕдиница);
						Список.Цена				= Цена;
						Список.СтавкаНДС		= СокрЛП(Товар.СтавкаНДС) + "%";
						Список.КоэффНДС			= КоэффНДС(Товар.СтавкаНДС, СуммаВклНДС, Товар.СтавкаНП, СуммаВклНП);
						Список.СтавкаНП			= СокрЛП(Товар.СтавкаНП) + "%";
						Список.КоэффНП			= КоэффНП(Товар.СтавкаНДС, СуммаВклНДС, Товар.СтавкаНП, СуммаВклНП);
						
						Поз = Поз + 1;
						
						Если Поз > ОстаткиНоменклатуры.КоличествоСтрок() Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			Иначе
				// оптовый склад. 
				Список.НоваяСтрока();
				Список.НоменклатураИД	= ЗначениеВстрокуВнутр(Товар);
				Список.ЭтоГруппа		= 0;
				Список.ВидТМЦ			= Строка(Перечисление.ВидыТМЦ.Товар);
				Список.Представление	= СокрЛП(Товар.Наименование);
				Список.Единица			= СокрЛП(Товар.ОсновнаяЕдиница);
				Список.СтавкаНДС		= СокрЛП(Товар.СтавкаНДС) + "%";
				Список.КоэффНДС			= КоэффНДС(Товар.СтавкаНДС, СуммаВклНДС, Товар.СтавкаНП, СуммаВклНП);
				Список.СтавкаНП			= СокрЛП(Товар.СтавкаНП) + "%";
				Список.КоэффНП			= КоэффНП(Товар.СтавкаНДС, СуммаВклНДС, Товар.СтавкаНП, СуммаВклНП);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
		
	Возврат 1;

КонецФункции // СписокНоменклатурыРозн()

// РЕАЛИЗАЦИЯ РОЗНИЦА

//******************************************************************************
// ЗаполнитьШапкуРеализацияРозн(ДокОснованиеИд, Реквизиты)
//
// Параметры: 
//  ДокОснованиеИд	- идентификатор документа основания
//  Реквизиты		- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки нового документа
//  Реализация (розница). Если параметр ДокОснованиеИд не пуст, то значения 
//  реквизитов формируются  с учетом документа основания.
//
Функция ЗаполнитьШапкуРеализацияРозн(ДокОснованиеИд, Реквизиты)
	Перем ДокОснование;
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("РеализацияРозница") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(""           , "НомерДок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 
	Реквизиты.ДобавитьЗначение("", "Контрагент");
	Реквизиты.ДобавитьЗначение("", "Договоры");
	Реквизиты.ДобавитьЗначение(0,  "КоэффСкидки");
	Реквизиты.ДобавитьЗначение(1 , "УчитыватьНДС");
	Реквизиты.ДобавитьЗначение(1 , "СуммаВклНДС");
	Реквизиты.ДобавитьЗначение(1 , "УчитыватьНП");
	Реквизиты.ДобавитьЗначение(1 , "СуммаВклНП");
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
		
	Если ПолучитьДокументПоИд(ДокОснованиеИд, ДокОснование) = 0 Тогда
		Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");
		Реквизиты.ДобавитьЗначение(СтрокаОплаты(, , глРубли, 1, 1, 1, 1, 1, 0), "СтрокаОплаты");
	Иначе
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОснование.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Фирма), "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Проект), "Проект");
		Реквизиты.ДобавитьЗначение(СтрокаОплаты(, , ДокОснование.Валюта, ДокОснование.Курс, 1, 1, 1, 1, 0), "СтрокаОплаты");
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЗаполнитьШапкуРеализацияРозн()

//******************************************************************************
// ПолучитьШапкуРеализацииРозн(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Реализация (розница).
//
Функция ПолучитьШапкуРеализацииРозн(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)				,"Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма)	, "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)				, "Проект");
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)			, "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)				, "Договор");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС					, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС					, "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП					, "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП					, "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(КоэффСкидки(Док.Скидка)			, "КоэффСкидки");
		Реквизиты.ДобавитьЗначение(Док.Проведен()					, "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий					, "Комментарий");
		
        СтрОплаты = СтрокаОплаты(, Док.Скидка, 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 Док.ОблагаетсяЕНВД);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуРеализацииРозн()

//******************************************************************************
// ПолучитьСоставРеализацииРозн(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе табличной части существующего 
//  документа Реализация (розница).
//
Функция ПолучитьСоставРеализацииРозн(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНДС" , "Число"  ,,,,,,);
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНП" , "Число"  ,,,,,,);
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставРеализацииРозн()

//******************************************************************************
// ПолучитьШапкуРеализацииРознДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Реализация (розница) в виде, удобном для формирования 
//  печатной формы.
//
Функция ПолучитьШапкуРеализацииРознДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Если ПолучитьДокументПоИд(ДокИД, Док) = 0 Тогда
	    Рез = 0;
	Иначе
		Рез = 1;
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)       , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)        , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)         , "Фирма");
		Реквизиты.ДобавитьЗначение(глСтрокаКонтрагента(Док)   , "Контрагент");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуРеализацииРознДляПечати()

//******************************************************************************
// ПолучитьСоставРеализацииРознДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм многострочной 
//           части документа
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений из табличной часть существующего
//  документа Реализация (розница).
//
Функция ПолучитьСоставРеализацииРознДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Если ПолучитьДокументПоИд(ДокИД, Док) = 0 Тогда
	    Рез = 0;
	Иначе
	    Рез    = 1;
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Итог    = 0;
		ИтогНДС = 0;
		ИтогНП  = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество = Строка(Док.Количество);
			Состав.Единица    = Строка(Док.Единица);
			Состав.Сумма = глФРМ(Док.Сумма);
			
			Если Док.Количество <> 0 Тогда
			    Цена = Док.Сумма / Док.Количество;
			Иначе
				Цена = 0;
			КонецЕсли;
			Состав.Цена  = глФРМ(Цена);
			
			Итог = Док.Сумма + Итог;
			
			Если Док.УчитыватьНДС = 1 Тогда
	    		ИтогНДС = Док.СуммаНДС + ИтогНДС;
			КонецЕсли;

			Если Док.УчитыватьНП = 1 Тогда
	    		ИтогНП = Док.СуммаНП + ИтогНП;
			КонецЕсли;
		КонецЦикла;
		
		Итоги.ДобавитьЗначение("Итого: " + глФРМ(Итог), "Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
		    Если Док.СуммаВклНдс = 1 Тогда
		        Стр = "В том числе НДС: ";
			Иначе
				Стр = "Сумма НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Стр + глФРМ(ИтогНДС), "СуммаНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
		    Если Док.СуммаВклНП = 1 Тогда
		        Стр = "В том числе НП: ";
			Иначе
				Стр = "Сумма НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Стр + глФРМ(ИтогНП), "СуммаНП");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставРеализацииРознДляПечати()

//******************************************************************************
// ЗаполнитьСоставРеализацииРознНаОсн(ДокОснИД, Состав)
//
// Параметры: 
//  ДокОснИД - идентификатор документа основания
//  Состав   - таблица значений, представляющая состав документа. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основании состава документа основания 
//  (ИнвентаризацияРозница).
//
Функция ЗаполнитьСоставРеализацииРознНаОсн(ДокОснИД, Состав)
	Перем ДокОснование;
	
	Рез = 1;
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("Единица");
	Состав.НоваяКолонка("Цена");
	Состав.НоваяКолонка("Сумма");
	Состав.НоваяКолонка("СтавкаНДС");
	Состав.НоваяКолонка("КоэффНДС");
	Состав.НоваяКолонка("СтавкаНП");
	Состав.НоваяКолонка("КоэффНП");

	Если ПустоеЗначение(ДокОснИД) = 0 Тогда
	    Рез = ПолучитьДокументПоИд(ДокОснИД, ДокОснование);
		
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
		Иначе
			ДокОснование.ВыбратьСтроки();
			Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			    Если ДокОснование.КоличествоУчет > ДокОснование.Количество Тогда
					// заполняем только проданной Номенклатурой
					Состав.НоваяСтрока();
					
					Товар = ДокОснование.Номенклатура;
					
					Состав.НоменклатураИд = ЗначениеВстрокуВнутр(Товар);
					Состав.Номенклатура   = Строка(Товар);
					Состав.Количество     = ДокОснование.КоличествоУчет - ДокОснование.Количество;
					Состав.Единица        = Строка(ДокОснование.Единица);
					Состав.Цена           = ДокОснование.Цена;
					Состав.Сумма          = ДокОснование.Сумма;
					Состав.СтавкаНДС      = Строка(Товар.СтавкаНДС);
					Состав.КоэффНДС       = КоэффНДС(Товар.СтавкаНДС, 1, Товар.СтавкаНП, 1);
					Состав.СтавкаНП       = Строка(Товар.СтавкаНП);
					Состав.КоэффНП        = КоэффНП(Товар.СтавкаНДС, 1, Товар.СтавкаНП, 1);
			    КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаполнитьСоставРеализацииРознНаОсн()

//******************************************************************************
// ЗаписатьРеализациюРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки со следудующими
//              представлениями: ДокОснованиеИд, Комментарий
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок. Состоит из следующих колонок:
//              Количество(число), Цена(число).
//  НовСостав - таблица значений, содержащая добавленные позиции.
//              Состоит из следующих колонок:
//              НоменклатураИд(строка), Количество(число), Цена(число)
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ РеализацияРозница. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьРеализациюРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем Док, Реквизиты, ДокОснование;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПолучитьДокументПоИд(ДокИД, Док) = 0 Тогда
	    // новый докумен
		Док = СоздатьОбъект("Документ.РеализацияРозница");
		Док.Новый();
		Док.КодОперации  = глКО.РозничнаяПродажа;
		Док.Склад        = Склад;
		
		Док.УчитыватьНДС = 1;
		Док.СуммаВклНДС  = 1;
		Док.УчитыватьНП  = 1;
		Док.СуммаВклНП   = 1;
			
		Если ПолучитьДокументПоИд(РеквШапки.Получить("ДокОснованиеИд"), ДокОснование) = 0 Тогда
			// есть док основани
			Док.Фирма  = Пользователь.ОсновнаяФирма;
			Док.Валюта = глРубли;
			Док.Курс   = 1;
		Иначе
			Док.Фирма  = ДокОснование.Фирма;
			Док.Валюта = ДокОснование.Валюта;
			Док.Курс   = ДокОснование.Курс;
			Док.ДокОснование = ДокОснование.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ЗначениеИзСтрокиВнутр(ДокИд));
		// обновим состав
		ТекСтр = 1;
		ИзмСостав.ВыбратьСтроки();
		Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
		    Док.ПолучитьСтрокуПоНомеру(ТекСтр);
			
			Если ИзмСостав.Количество = 0 Тогда
				// заносим строку в список удаляемых
				УдСтроки.ДобавитьЗначение(ТекСтр);
			Иначе
				Док.Количество = ИзмСостав.Количество;
				Док.Цена       = ИзмСостав.Цена;
			КонецЕсли;
			
			глПересчетТаблЧасти(Док, "Количество");
			ТекСтр = ТекСтр + 1;
		КонецЦикла;
		
		Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
			НомУдСтр = УдСтроки.ПолучитьЗначение(Сч);
			Док.ПолучитьСтрокуПоНомеру(НомУдСтр - Сч + 1);
			Док.УдалитьСтроку();
		КонецЦикла;
	КонецЕсли;
	
	// добавляем новый Номенклатура
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
			Док.Номенклатура = Номенклатура;
			Док.Количество   = НовСостав.Количество;
			Док.Единица      = Номенклатура.БазоваяЕдиница;
			Док.Коэффициент  = Номенклатура.БазоваяЕдиница.Коэффициент;
			Док.Цена         = НовСостав.Цена;
			Док.Сумма        = Док.Цена * Док.Количество;
				
			Док.СтавкаНДС    = Номенклатура.СтавкаНДС;
			Док.СтавкаНП     = Номенклатура.СтавкаНП;
				
			глПересчетТаблЧасти(Док, "Количество");
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьРеализациюРозн()

//ИНВЕНТАРИЗАЦИЯ РОЗНИЦЫ

//******************************************************************************
// ЗаполнитьШапкуИнвентаризацииРозн(ДатаДок, Реквизиты)
//
// Параметры: 
//  ДатаДок   - дата, на которую создется документ
//  Реквизиты - список значений. Реквизиты шапки документа
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки нового документа
//  Инвентаризация ТМЦ.
//
//Функция ЗаполнитьШапкуИнвентаризацииРозн(ФирмаИд, ДатаДок, Реквизиты)
Функция ЗаполнитьШапкуИнвентаризацииРозн(ДатаДок, Реквизиты)
	Реквизиты = СоздатьОбъект("СписокЗначений");
		
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("ИнвентаризацияТМЦ") +
	                           " № <новый> от " + ДатаДок, "Заголовок");
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
	Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");

    СтрОплаты = СтрокаОплаты(, , глРубли, 1);
	Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		
	Возврат 1;
КонецФункции // ЗаполнитьШапкуИнвентаризацииРозн()

//******************************************************************************
// ПолучитьШапкуИнвентаризацииРозн(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки документа существующего
//  документа Инвентаризация ТМЦ.
//
Функция ПолучитьШапкуИнвентаризацииРозн(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              ,"Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
		
        СтрОплаты = СтрокаОплаты(, , Док.Валюта, Док.Курс);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуИнвентаризацииРозн()

//******************************************************************************
// ПолучитьСоставИнвентаризацииРозн(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа 
//  Инвентаризация ТМЦ
//
Функция ПолучитьСоставИнвентаризацииРозн(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИд");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("КоличествоУчет");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		Состав.НоваяКолонка("СуммаУчет");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			КоличествоУчет = Док.КоличествоУчет;
			Состав.КоличествоУчет = КоличествоУчет;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
			Состав.СуммаУчет      = Док.СуммаУчет;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставИнвентаризацииРозн()

//******************************************************************************
// ПолучитьШапкуИнвентаризацииРознДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки документа 
//  существующего документа Инвентаризация ТМЦ в виде, удобном для формирования 
//  печатной формы.
//
Функция ПолучитьШапкуИнвентаризацииРознДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док), "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок) , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)  , "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)  , "Проект");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуИнвентаризацииРознДляПечати()

//******************************************************************************
// ПолучитьСоставИнвентаризацииРознДляПечати(ДокИд, Состав)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части документа Инвентаризация ТМЦ в печатной форме. 
//
Функция ПолучитьСоставИнвентаризацииРознДляПечати(ДокИд, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
	    Рез    = 1;
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("КоличествоУчет");
		Состав.НоваяКолонка("Разница");
		Если ТипСклада = 1 Тогда
		    Состав.НоваяКолонка("Цена");
		КонецЕсли;
		
		Итог    = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура   = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Единица        = Строка(Док.Единица);
			Состав.Количество     = Строка(Док.Количество);
			Состав.КоличествоУчет = Строка(Док.КоличествоУчет);
			Состав.Разница        = Строка(Док.Количество - Док.КоличествоУчет);
			Если ТипСклада = 1 Тогда
				Состав.Цена           = глФРМ(Док.Цена);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставИнвентаризацииРознДляПечати()

//******************************************************************************
// ЗаполнитьСоставИнвентаризацияРозн(Фирма, ДатаДок, Состав)
//
// Параметры:
//  ФирмаИд  - идентификатор фирмы
//  ДатаДок  - дата, на которую будут рассчитываться остатки
//  Состав   - таблица значений, представляющая состав документа. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, представлюющую собой состав нового документа 
//  Инвентаризация ТМЦ.
//
Функция ЗаполнитьСоставИнвентаризацияРозн(ФирмаИд, ДатаДок, Состав)
	Фирма = ЗначениеИзСТрокиВнутр(ФирмаИд);
	
	Если ТипЗначенияСтр(Фирма) <> "Справочник" Тогда
	    Сообщение = "Не выбрана фирма";
		Возврат 0;
	КонецЕсли;
	
	ВремРегистры = СоздатьОбъект("Регистры");
	ВремОстатки  = ВремРегистры.ОстаткиТМЦ;
	ВремОстатки.УстановитьЗначениеФильтра("Фирма", Фирма, 1);
	ВремОстатки.УстановитьЗначениеФильтра("Склад", Склад, 1);
	
	ДатаДок = Дата(ДатаДок);
	Если ДатаДок < ПолучитьДатуТА() Тогда
		// выписываемый задним числом
		ВремОстатки.ВременныйРасчет();
		ВремРегистры.РассчитатьРегистрыПо(ДатаДок);
	КонецЕсли;
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("КоличествоУчет");
	Состав.НоваяКолонка("Единица");
	Состав.НоваяКолонка("Цена");
	Состав.НоваяКолонка("Сумма");
	Состав.НоваяКолонка("СуммаУчет");
	
	ВремОстатки.ВыбратьИтоги();
	Пока ВремОстатки.ПолучитьИтог() = 1 Цикл
		ВремЦена  = ВремОстатки.ЦенаПрод;
		ВремCумма = ВремЦена * ВремОстатки.Количество;
		
		Состав.НоваяСтрока();
		Состав.НоменклатураИД   = ЗначениеВстрокуВнутр(ВремОстатки.Номенклатура);
		Состав.Номенклатура     = Строка(ВремОстатки.Номенклатура);
		Состав.Количество     = ?(ВремОстатки.Количество < 0, 0, ВремОстатки.Количество);
		Состав.КоличествоУчет = ВремОстатки.Количество;
		Состав.Единица        = Строка(ВремОстатки.Номенклатура.БазоваяЕдиница);
		Состав.Цена      = ВремЦена;    
		Состав.Сумма     = ?(ВремCумма < 0, 0, ВремCумма);
		Состав.СуммаУчет = ВремCумма;
	КонецЦикла;
		
	Возврат 1;
КонецФункции // ЗаполнитьСоставИнвентаризацияРозн()

//******************************************************************************
// ЗаписатьИнвентаризациюРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//  НовСостав - таблица значений, содержащая добавленные позиции.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Инвентаризация ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьИнвентаризациюРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем ДокТек;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(ДокИд) = 1 Тогда
	    // новый докумен
		Док = СоздатьОбъект("Документ.ИнвентаризацияТМЦ");
		Док.Новый();
		Док.Валюта      = глРубли;
		Док.Курс        = 1;
		Док.ВидОперации = ?(ТипСклада=1, Перечисление.ВидыИнвентаризаций.ПоРознице, Перечисление.ВидыИнвентаризаций.ПоСкладу);
		Док.Фирма       = ЗначениеИзСтрокиВнутр(РеквШапки.Получить("ФирмаИд"));
		Док.ДатаДок     = РеквШапки.Получить("ДатаДок");
		Док.Склад       = Склад;
	Иначе
		// обновим состав
		Рез = ПолучитьДокументПоИд(ДокИД, ДокТек);
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
			Возврат 0;
		Иначе
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(ДокТек);
			
			НомСтр = 1;
			ИзмСостав.ВыбратьСтроки();
			Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
			    Если Док.ПолучитьСтрокуПоНомеру(НомСтр) = 0 Тогда
			        Сообщение = "Состав документа отличается от состава документа, полученного из удаленного склада";
					Возврат 0;
				КонецЕсли;

				Док.Количество = ИзмСостав.Количество;
				Док.Цена       = ИзмСостав.Цена;
				Док.Сумма      = ИзмСостав.Цена * ИзмСостав.Количество;
				
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	// добавляем новый
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
	    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
		Если ПустоеЗначение(Номенклатура) = 1 Тогда
		    Сообщение = "Не удалось идентифицировать Номенклатуру";
			Возврат 0;
		КонецЕсли;
			
		Док.НоваяСтрока();
		Док.Номенклатура   = Номенклатура;
		Док.Количество     = НовСостав.Количество;
		Док.КоличествоУчет = НовСостав.КоличествоУчет;
		Док.Единица        = Номенклатура.БазоваяЕдиница;
		Док.Цена           = НовСостав.Цена;
		Док.Сумма          = НовСостав.Цена * НовСостав.Количество;
		Док.СуммаУчет      = НовСостав.Цена * НовСостав.КоличествоУчет;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьИнвентаризациюРозн()

// СПИСАНИЕ (розница)

//******************************************************************************
// ЗаполнитьШапкуСписанияРозн(ДокОснованиеИд, Реквизиты)
//
// Параметры: 
//  ДокОснованиеИд	- идентификатор документа основания.
//  Реквизиты		- список значений с реквизитами шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки для нового документа.
//  Списание (по рознице)
//
Функция ЗаполнитьШапкуСписанияРозн(ДокОснованиеИд, Реквизиты)
	Перем ДокОснование;
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
	
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("СписаниеТМЦ") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(""           , "НомерДок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
	Реквизиты.ДобавитьЗначение(Пользователь.ОсновнаяКасса, "Касса");
		
	Если ПолучитьДокументПоИд(ДокОснованиеИд, ДокОснование) = 0 Тогда
		// есть док основани
		Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");
		СтрОплаты = СтрокаОплаты(, , глРубли, 1);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	Иначе
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОснование.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Фирма), "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Проект), "Проект");

        СтрОплаты = СтрокаОплаты(, , ДокОснование.Валюта, ДокОснование.Курс);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции // ЗаполнитьШапкуСписанияРозн()

//******************************************************************************
// ПолучитьШапкуСписанияРозн(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего документа
//  Списание (по рознице).
//
Функция ПолучитьШапкуСписанияРозн(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              ,"Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");

        СтрОплаты = СтрокаОплаты(, , Док.Валюта, Док.Курс);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуСписанияРозн()		

//******************************************************************************
// ПолучитьСоставСписанияРозн(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа 
//  Списание (по рознице).
//
Функция ПолучитьСоставСписанияРозн(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСписанияРозн()

//******************************************************************************
// ПолучитьШапкуСписанияРознДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки документа 
//  Списание (по рознице) в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуСписанияРознДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)       , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)        , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)         , "Фирма");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуСписанияРознДляПечати()

//******************************************************************************
// ПолучитьСоставСписанияРознДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Списание (по рознице) в печатной форме. 
//
Функция ПолучитьСоставСписанияРознДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Итог    = 0;
		ИтогНДС = 0;
		ИтогНП  = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество = Строка(Док.Количество);
			Состав.Единица    = Строка(Док.Единица);
			Состав.Сумма = глФРМ(Док.Сумма);
			
			Если Док.Количество <> 0 Тогда
			    Цена = Док.Сумма / Док.Количество;
			Иначе
				Цена = 0;
			КонецЕсли;
			Состав.Цена  = глФРМ(Цена);
			Итог = Док.Сумма + Итог;
		КонецЦикла;
		
		Итоги.ДобавитьЗначение("Итого: " + глФРМ(Итог), "Итого");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСписанияРознДляПечати()

//******************************************************************************
// ЗаполнитьСоставСписанияРознНаОсн(ДокОснИД, Состав)
//
// Параметры: 
//  ДокОснИД - идентификатор документа основания
//  Состав   - таблица значений, представляющая состав документа. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, представлюющую собой состав документа 
//  Списание (по рознице), на основании состава документа основания 
//  Инвентаризация (по рознице).
//
Функция ЗаполнитьСоставСписанияРознНаОсн(ДокОснИД, Состав)
	Перем ДокОснование;
	
	Рез = 1;
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("Единица");
	Состав.НоваяКолонка("Цена");
	Состав.НоваяКолонка("Сумма");

	Если ПустоеЗначение(ДокОснИД) = 0 Тогда
		Рез = ПолучитьДокументПоИд(ДокОснИД, ДокОснование);
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
		Иначе
			ДокОснование.ВыбратьСтроки();
			Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			    Если ДокОснование.КоличествоУчет > ДокОснование.Количество Тогда
					// заполняем только проданной Номенклатурой
					Состав.НоваяСтрока();
					Товар 					= ДокОснование.Номенклатура;
					Состав.НоменклатураИд	= ЗначениеВстрокуВнутр(Товар);
					Состав.Номенклатура		= Строка(Товар);
					Состав.Количество		= ДокОснование.КоличествоУчет - ДокОснование.Количество;
					Состав.Единица			= Строка(ДокОснование.Единица);
					Состав.Цена				= ДокОснование.Цена;
					Состав.Сумма			= ДокОснование.Сумма;
			    КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаполнитьСоставСписанияРознНаОсн()

//******************************************************************************
// ЗаписатьСписаниеРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки.
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//  НовСостав - таблица значений, содержащая добавленные позиции.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Списание (по рознице). Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьСписаниеРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем ДокТек, ДокОснование;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(ДокИд) = 1 Тогда
	    // новый докумен
		Док      = СоздатьОбъект("Документ.СписаниеТМЦ");
		Док.Новый();
		Док.Склад        = Склад;
			
		Если ПолучитьДокументПоИд(РеквШапки.Получить("ДокОснованиеИд"), ДокОснование) = 0 Тогда
			// есть док основани
			Док.Фирма  = Пользователь.ОсновнаяФирма;
			Док.Валюта = глРубли;
			Док.Курс   = 1;
		Иначе
			Док.Фирма  = ДокОснование.Фирма;
			Док.Валюта = ДокОснование.Валюта;
			Док.Курс   = ДокОснование.Курс;
			Док.Докоснование = ДокОснование.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Рез = ПолучитьДокументПоИд(ДокИД, ДокТек);
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
			Возврат 0;
		Иначе
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(ДокТек);
            
			НомСтр = 1;
			
			ИзмСостав.ВыбратьСтроки();
			Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
			    Если Док.ПолучитьСтрокуПоНомеру(НомСтр) = 0 Тогда
			        Сообщение = "Состав документа отличается от состава документа, полученного из удаленного склада";
					Возврат 0;
				КонецЕсли;
				Если ИзмСостав.Количество = 0 Тогда
					// заносим строку в список удаляемых
					УдСтроки.ДобавитьЗначение(НомСтр);
				Иначе
					Док.Количество = ИзмСостав.Количество;
					Док.Цена       = ИзмСостав.Цена;
				КонецЕсли;
				глПересчетТаблЧасти(Док, "Количество");
				
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
			Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
				Док.ПолучитьСтрокуПоНомеру(УдСтроки.ПолучитьЗначение(Сч) - Сч + 1);
				Док.УдалитьСтроку();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем новый
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
			Док.Номенклатура = Номенклатура;
			Док.Количество   = НовСостав.Количество;
			Док.Единица      = Номенклатура.ОсновнаяЕдиница;
			Док.Цена         = НовСостав.Цена;
			Док.Сумма        = Док.Цена * Док.Количество;
			глПересчетТаблЧасти(Док, "Количество");
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьСписаниеРозн()

// ОТЧЕТ ККМ

//******************************************************************************
// ЗаполнитьШапкуОтчетаККМ(ДокОснованиеИд, Реквизиты)
//
// Параметры: 
//  ДокОснованиеИд	- идентификатор документа основания
//  Реквизиты		- список значений. Реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки для нового 
//  документа Отчет ККМ
//
Функция ЗаполнитьШапкуОтчетаККМ(ДокОснованиеИд, Реквизиты)
	Перем ДокОснование;
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
	
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("ОтчетККМ") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(""           , "НомерДок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 
	Реквизиты.ДобавитьЗначение("", "Контрагент");
	Реквизиты.ДобавитьЗначение("", "Договоры");
	Реквизиты.ДобавитьЗначение(0,  "КоэффСкидки");
	Реквизиты.ДобавитьЗначение(1 , "УчитыватьНДС");
	Реквизиты.ДобавитьЗначение(1 , "СуммаВклНДС");
	Реквизиты.ДобавитьЗначение(1 , "УчитыватьНП");
	Реквизиты.ДобавитьЗначение(1 , "СуммаВклНП");
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
	Реквизиты.ДобавитьЗначение(Пользователь.ОсновнаяКасса, "Касса");
		
	Если ПолучитьДокументПоИд(ДокОснованиеИд, ДокОснование) = 0 Тогда
		// есть док основани
		Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");
		СтрОплаты = СтрокаОплаты(, , глРубли, 1, 1, 1, 1, 1, 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	Иначе
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОснование.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Фирма), "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(ДокОснование.Проект), "Проект");

		СтрОплаты = СтрокаОплаты(, , ДокОснование.Валюта, ДокОснование.Курс, 1, 1, 1, 1, 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЗаполнитьШапкуОтчетаККМ()

//******************************************************************************
// ПолучитьШапкуОтчетаККМ(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего документа
//  Отчет ККМ
//
Функция ПолучитьШапкуОтчетаККМ(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе		
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              ,"Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)         , "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)            , "Договор");
		
        СтрОплаты = СтрокаОплаты(, Док.Скидка, 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 Док.ОблагаетсяЕНВД);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС , "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП , "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП  , "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(КоэффСкидки(Док.Скидка), "КоэффСкидки");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуОтчетаККМ()

//******************************************************************************
// ПолучитьСоставОтчетаККМ(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа Отчет ККМ.
//
Функция ПолучитьСоставОтчетаККМ(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНДС" , "Число"  ,,,,,,);
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНП" , "Число"  ,,,,,,);
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставОтчетаККМ()

//******************************************************************************
// ПолучитьШапкуОтчетаККМДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд		- идентификатор документа.
//  Реквизиты	- реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Отчет ККМ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуОтчетаККМДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)       , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)        , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)         , "Фирма");
		Реквизиты.ДобавитьЗначение(глСтрокаКонтрагента(Док)   , "Контрагент");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуОтчетаККМДляПечати()

//******************************************************************************
// ПолучитьСоставОтчетаККМДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части документа Отчет ККМ в печатной форме. 
//
Функция ПолучитьСоставОтчетаККМДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Итог    = 0;
		ИтогНДС = 0;
		ИтогНП  = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество = Строка(Док.Количество);
			Состав.Единица    = Строка(Док.Единица);
			Состав.Сумма = глФРМ(Док.Сумма);
			
			Если Док.Количество <> 0 Тогда
			    Цена = Док.Сумма / Док.Количество;
			Иначе
				Цена = 0;
			КонецЕсли;
			Состав.Цена  = глФРМ(Цена);
			
			Итог = Док.Сумма + Итог;
			
			Если Док.УчитыватьНДС = 1 Тогда
	    		ИтогНДС = Док.СуммаНДС + ИтогНДС;
			КонецЕсли;

			Если Док.УчитыватьНП = 1 Тогда
	    		ИтогНП = Док.СуммаНП + ИтогНП;
			КонецЕсли;
		КонецЦикла;
		
		Итоги.ДобавитьЗначение("Итого: " + глФРМ(Итог), "Итого");
		
		Если Док.УчитыватьНДС = 1 Тогда
		    Если Док.СуммаНклНдс = 1 Тогда
		        Стр = "В том числе НДС: ";
			Иначе
				Стр = "Сумма НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Стр + глФРМ(ИтогНДС), "ИтогНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
		    Если Док.СуммаНклНП = 1 Тогда
		        Стр = "В том числе НП: ";
			Иначе
				Стр = "Сумма НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Стр + глФРМ(ИтогНП), "ИтогНП");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставОтчетаККМДляПечати()

//******************************************************************************
// ЗаполнитьСоставОтчетаККМНаОсн(ДокОснИД, Состав)
//
// Параметры: 
//  ДокОснИД - идентификатор документа основания.
//  Состав   - таблица значений, представляющая состав документа. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, представлюющую собой состав нового документа 
//  Отчет ККМ, на основании состава документа основания 
//  (ИнвентаризацияРозница).
//
Функция ЗаполнитьСоставОтчетаККМНаОсн(ДокОснИД, Состав)
	Перем ДокОснование;
	
	Рез = 1;
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("Единица");
	Состав.НоваяКолонка("Цена");
	Состав.НоваяКолонка("Сумма");
	Состав.НоваяКолонка("СтавкаНДС");
	Состав.НоваяКолонка("КоэффНДС");
	Состав.НоваяКолонка("СтавкаНП");
	Состав.НоваяКолонка("КоэффНП");

	Если ПустоеЗначение(ДокОснИД) = 0 Тогда
		Рез = ПолучитьДокументПоИд(ДокОснИД, ДокОснование);
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
		Иначе
			ДокОснование.ВыбратьСтроки();
			Пока ДокОснование.ПолучитьСтроку() = 1 Цикл
			    Если ДокОснование.КоличествоУчет > ДокОснование.Количество Тогда
					// заполняем только проданной Номенклатурой
					Товар = ДокОснование.Номенклатура;
					Состав.НоваяСтрока();
					Состав.НоменклатураИд = ЗначениеВстрокуВнутр(Товар);
					Состав.Номенклатура   = Строка(Товар);
					Состав.Количество     = ДокОснование.КоличествоУчет - ДокОснование.Количество;
					Состав.Единица        = Строка(ДокОснование.Единица);
					Состав.Цена           = ДокОснование.Цена;
					Состав.Сумма          = ДокОснование.Сумма;
					Состав.СтавкаНДС      = Строка(Товар.СтавкаНДС);
					Состав.КоэффНДС       = КоэффНДС(Товар.СтавкаНДС, 1, Товар.СтавкаНП, 1);
					Состав.СтавкаНП       = Строка(Товар.СтавкаНП);
					Состав.КоэффНП        = КоэффНП(Товар.СтавкаНДС, 1, Товар.СтавкаНП, 1);
			    КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаполнитьСоставОтчетаККМНаОсн()

//******************************************************************************
// ЗаписатьОтчетККМ(ДокИд, РеквШапки, ИзмСостав, НовСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//  НовСостав - таблица значений, содержащая добавленные позиции.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Отчет ККМ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьОтчетККМ(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем ДокТек, ДокОснование;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(ДокИд) = 1 Тогда
	    // новый докумен
		Док      = СоздатьОбъект("Документ.ОтчетККМ");
		Док.Новый();
		Док.Склад        = Склад;
		Док.УчитыватьНДС = 1;
		Док.СуммаВклНДС  = 1;
		Док.УчитыватьНП  = 1;
		Док.СуммаВклНП   = 1;
			
		Если ПолучитьДокументПоИд(РеквШапки.Получить("ДокОснованиеИд"), ДокОснование) = 0 Тогда
			// есть док основани
			Док.Фирма  = Пользователь.ОсновнаяФирма;
			Док.Валюта = глРубли;
			Док.Курс   = 1;
		Иначе
			Док.Фирма  = ДокОснование.Фирма;
			Док.Валюта = ДокОснование.Валюта;
			Док.Курс   = ДокОснование.Курс;
			Док.ДокОснование = ДокОснование.ТекущийДокумент();
		КонецЕсли;
	Иначе
		Рез = ПолучитьДокументПоИд(ДокИД, ДокТек);
		Если Рез = 0 Тогда
			Сообщение = НетДокумента;
			Возврат 0;
		Иначе
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(ДокТек);
            
			НомСтр = 1;
			
			ИзмСостав.ВыбратьСтроки();
			Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
			    Если Док.ПолучитьСтрокуПоНомеру(НомСтр) = 0 Тогда
			        Сообщение = "Состав документа отличается от состава, переданного удаленного склада";
					Возврат 0;
				КонецЕсли;
				Если ИзмСостав.Количество = 0 Тогда
					// заносим строку в список удаляемых
					УдСтроки.ДобавитьЗначение(НомСтр);
				Иначе
					Док.Количество = ИзмСостав.Количество;
					Док.Цена       = ИзмСостав.Цена;
				КонецЕсли;
				глПересчетТаблЧасти(Док, "Количество");
				
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
			Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
				Док.ПолучитьСтрокуПоНомеру(УдСтроки.ПолучитьЗначение(Сч) - Сч +1);
				Док.УдалитьСтроку();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем новый
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать Номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
			Док.Номенклатура = Номенклатура;
			Док.Количество   = НовСостав.Количество;
			Док.Единица      = Номенклатура.ОсновнаяЕдиница;
			Док.Цена         = НовСостав.Цена;
			Док.Сумма        = Док.Цена * Док.Количество;
			Док.СтавкаНДС    = Номенклатура.СтавкаНДС;
			Док.СтавкаНП     = Номенклатура.СтавкаНП;
				
			глПересчетТаблЧасти(Док, "Количество");
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьОтчетККМ()

// ПЕРЕОЦЕНКА РОЗНИЦЫ

//******************************************************************************
// ПолучитьШапкуПереоценкиРозн(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд		- идентификатор документа.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Переоценка (розница)
//
Функция ПолучитьШапкуПереоценкиРозн(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)             , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
        СтрОплаты = СтрокаОплаты(, , Док.Валюта, Док.Курс);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуПереоценкиРозн()

//******************************************************************************
// ПолучитьСоставПереоценкиРозн(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа
//  Переоценка (розница).
//
Функция ПолучитьСоставПереоценкиРозн(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("ЦенаСтарая",,,,"Цена (старая)");
		Состав.НоваяКолонка("ЦенаНовая",,,,"Цена (новая)");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
			Состав.ЦенаСтарая		= глФРМ(Док.ЦенаСтарая);
			Состав.ЦенаНовая		= глФРМ(Док.ЦенаНовая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПереоценкиРозн()

//******************************************************************************
// ПолучитьШапкуПереоценкиРознДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД		- идентификатор документа.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Переоценка (розница) в виде, удобном для формирования 
//  печатной формы.
//
Функция ПолучитьШапкуПереоценкиРознДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), 
		                           "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)       , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)        , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)         , "Фирма");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуПереоценкиРознДляПечати()

//******************************************************************************
// ПолучитьСоставПереоценкиРознДляПечати(ДокИд, Состав)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Переоценка (розница) в печатной форме. 
//
Функция ПолучитьСоставПереоценкиРознДляПечати(ДокИд, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("ЦенаСтарая",,,,"Цена (старая)");
		Состав.НоваяКолонка("ЦенаНовая",,,,"Цена (новая)");
		
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= Строка(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
			Состав.ЦенаСтарая	= глФРМ(Док.ЦенаСтарая);
			Состав.ЦенаНовая	= глФРМ(Док.ЦенаНовая);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПереоценкиРознДляПечати()

// ПЕРЕМЕЩЕНИЕ ТМЦ

//******************************************************************************
// ЗаполнитьШапкупПеремещенияРозн(Реквизиты)
//
// Параметры: 
//  Реквизиты - список значений. Реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки нового 
//  документа Перемещение ТМЦ
//
Функция ЗаполнитьШапкуПеремещенияРозн(Реквизиты)
	Перем ДокОснование;
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
	
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("ПеремещениеТМЦ") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 

	Реквизиты.ДобавитьЗначение(1, "УчитыватьНДС");
	Реквизиты.ДобавитьЗначение(1, "СуммаВклНДС");
	Реквизиты.ДобавитьЗначение(1, "УчитыватьНП");
	Реквизиты.ДобавитьЗначение(1, "СуммаВклНП");
	
	Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");

    СтрОплаты = СтрокаОплаты(, , глРубли, 1, 1, 1, 1, 1);
	Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
	
	Возврат 1;
	
КонецФункции // ЗаполнитьШапкупПеремещенияРозн()

//******************************************************************************
// ПолучитьШапкуПеремещениРозн(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Перемещение ТМЦ.
//
Функция ПолучитьШапкуПеремещенияРозн(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Склад), "СкладОтправительИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Склад)              , "СкладОтправитель");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаОтправительИд");
		
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "ФирмаОтправитель");
		
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.СкладПолучатель), "СкладПолучательИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.СкладПолучатель)              , "СкладПолучатель");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.ФирмаПолучатель), "ФирмаПолучательИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.ФирмаПолучатель)              , "ФирмаПолучатель");
		
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС	, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС	, "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП	, "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП	, "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(Док.Проведен()	, "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий	, "Комментарий"); 
		
	    СтрОплаты = СтрокаОплаты(, , Док.Валюта, Док.Курс, Док.УчитыватьНДС, Док.СуммаВклНДС, Док.УчитыватьНП, Док.СуммаВклНП);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуПеремещениРозн()		

//******************************************************************************
// ПолучитьСоставПеремещенияРозн(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего 
//  документа Перемещение ТМЦ
//
Функция ПолучитьСоставПеремещенияРозн(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПеремещенияРозн()

//******************************************************************************
// ПолучитьШапкуПеремещенияРознДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД		- идентификатор документа.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Перемещение ТМЦ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуПеремещенияРознДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док), "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)       , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)        , "Дата");
		Реквизиты.ДобавитьЗначение(глСтрокаФирмы(Док)         , "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(Док.СкладПолучатель), "СкладПолучатель");
		Реквизиты.ДобавитьЗначение(Строка(Док.Склад)          , "Склад");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуПеремещенияРознДляПечати()

//******************************************************************************
// ПолучитьСоставПеремещенияРознДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения по колонкам сумм .
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Перемещение ТМЦ в виде, удобном
//  для формирования печатной формы.
//
Функция ПолучитьСоставПеремещенияРознДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Итог = 0;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= Строка(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
			Состав.Сумма		= глФРМ(Док.Сумма);
			
			Если Док.Количество <> 0 Тогда
			    Цена = Док.Сумма / Док.Количество;
			Иначе
				Цена = 0;
			КонецЕсли;
			Состав.Цена  = глФРМ(Цена);
			Итог = Док.Сумма + Итог;
		КонецЦикла;
		
		Итоги.ДобавитьЗначение("Итого: " + глФРМ(Итог), "Итого");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПеремещенияРознДляПечати()

//******************************************************************************
// ЗаписатьПеремещениеРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа 
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//  НовСостав - таблица значений, содержащая добавленные позиции.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Перемещение ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьПеремещениеРозн(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем ДокТек, ДокОснование;
	Перем СкладОтправитель, ФирмаОтправитель;
	Перем СкладПолучатель, ФирмаПолучатель;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПустоеЗначение(ДокИд) = 1 Тогда
	    // новый докумен
		Док      = СоздатьОбъект("Документ.ПеремещениеТМЦ");
		Док.Новый();
		Док.Валюта	= глРубли;
		Док.Курс	= 1;
		
		// фирмы и склады - изменяемые реквизиты
		Если ПолучитьЭлемПоИд(РеквШапки.Получить("СкладОтправительИд"), СкладОтправитель) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Док.Склад	= СкладОтправитель;
		
		Если ПолучитьЭлемПоИд(РеквШапки.Получить("ФирмаОтправительИд"), ФирмаОтправитель) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Док.Фирма	= ФирмаОтправитель;
		
		Если ПолучитьЭлемПоИд(РеквШапки.Получить("СкладПолучательИд"), СкладПолучатель) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Док.СкладПолучатель	= СкладПолучатель;
	
		Если ПолучитьЭлемПоИд(РеквШапки.Получить("ФирмаПолучательИд"), ФирмаПолучатель) = 0 Тогда
			Возврат 0;
		КонецЕсли;
		Док.ФирмаПолучатель	= ФирмаПолучатель;
		
		Док.УчитыватьНДС	= 1;
		Док.СуммаВклНДС		= 1;
		Док.УчитыватьНП		= 1;
		Док.СуммаВклНП		= 1;
	Иначе
		Если ПолучитьДокументПоИд(ДокИД, ДокТек) = 0 Тогда
			Сообщение = НетДокумента;
			Возврат 0;
		Иначе
			Док = СоздатьОбъект("Документ");
			Док.НайтиДокумент(ДокТек);
            
			НомСтр = 1;
			
			ИзмСостав.ВыбратьСтроки();
			Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
			    Если Док.ПолучитьСтрокуПоНомеру(НомСтр) = 0 Тогда
			        Сообщение = "Состав документа отличается от состава документа, полученного из удаленного склада";
					Возврат 0;
				КонецЕсли;
				Если ИзмСостав.Количество = 0 Тогда
					// заносим строку в список удаляемых
					УдСтроки.ДобавитьЗначение(НомСтр);
				Иначе
					Док.Количество = ИзмСостав.Количество;
					Док.Цена       = ИзмСостав.Цена;
				КонецЕсли;
				глПересчетТаблЧасти(Док, "Количество");
				НомСтр = НомСтр + 1;
			КонецЦикла;
			
			Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
				Док.ПолучитьСтрокуПоНомеру(УдСтроки.ПолучитьЗначение(Сч) - Сч + 1);
				Док.УдалитьСтроку();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// добавляем новый
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
			Док.Номенклатура = Номенклатура;
			Док.Количество   = НовСостав.Количество;
			Док.Единица      = Номенклатура.ОсновнаяЕдиница;
			Док.Цена         = НовСостав.Цена;
			Док.Сумма        = Док.Цена * Док.Количество;
			глПересчетТаблЧасти(Док, "Количество");
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
	Возврат 1;
КонецФункции // ЗаписатьПеремещениеРозн()

// ОПТОВЫЕ ДОКУМЕНТЫ ***********************************************************

// ОБЩИЕ ФУКНЦИИ

//******************************************************************************
// ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ.
//
Функция ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав)
	Перем Док, Реквизиты, ДокОснование;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		// обновим состав
		
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ЗначениеИзСтрокиВнутр(ДокИд));
		ТекСтр = 1;
		ИзмСостав.ВыбратьСтроки();
		Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
		    Док.ПолучитьСтрокуПоНомеру(ТекСтр);
			
			Если ИзмСостав.Количество = 0 Тогда
				// заносим строку в список удаляемых
				УдСтроки.ДобавитьЗначение(ТекСтр);
			Иначе
				Док.Количество = ИзмСостав.Количество;
			КонецЕсли;
			
			глПересчетТаблЧасти(Док, "Количество");
			ТекСтр = ТекСтр + 1;
		КонецЦикла;
		
		Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
			НомУдСтр = УдСтроки.ПолучитьЗначение(Сч);
			Док.ПолучитьСтрокуПоНомеру(НомУдСтр - Сч + 1);
			Док.УдалитьСтроку();
		КонецЦикла;
		
		Док.Комментарий = РеквШапки.Получить("Комментарий");
		
		Попытка
			Док.Записать();
			ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		Исключение
			Сообщение = ОписаниеОшибки();
			Рез = 0;
		КонецПопытки;
	КонецЕсли;
		
	Возврат Рез;
КонецФункции // ЗаписатьНакладную()

// СЧЕТ-ФАКТУРА

//******************************************************************************
// ПолучитьШапкуСчетаФактуры(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД		- идентификатор документа.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего документа
//  Счет-Фактура
//
Функция ПолучитьШапкуСчетаФактуры(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИд, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)				, "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма)	, "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)				, "Проект");
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)			, "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)				, "Договор");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП					, "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП					, "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(Док.ДокОснование.Вид()			, "ВидДокОснования");
	КонецЕсли;
	     
	Возврат Рез;
КонецФункции // ПолучитьШапкуСчетаФактуры()

//******************************************************************************
// ЗаполнитьШапкуСчетаФактуры(ДокОснИд, Рекизиты)
//
// Параметры: 
//  ДокОснИд	- идентификатор документа основания.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки нового документа
//  Счет-фактура выданный.
//
Функция ЗаполнитьШапкуСчетаФактуры(ДокОснИд, Реквизиты)
	Перем ДокОсн;
	
	Рез = ПолучитьДокументПоИд(ДокОснИд, ДокОсн);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("СчетФактураВыданный") + " № <новый> от " + ДокОсн.ДатаДок, "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Докосн.Фирма)					, "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОсн.Фирма)	, "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Проект)				, "Проект");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Контрагент)			, "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Договор)				, "Договор");
		Реквизиты.ДобавитьЗначение(ДокОсн.УчитыватьНП					, "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(ДокОсн.СуммаВклНП					, "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(ДокОсн.Вид()							, "ВидДокОснования");
	КонецЕсли;
	     
	Возврат Рез;
КонецФункции // ЗаполнитьШапкуСчетаФактуры()

//******************************************************************************
// ПолучитьШапкуСчетаФактурыДляПечати(Док, Реквизиты)
//
// Парметры:
//  ДокИД		- идентификатор документа.
//  Реквизиты	- список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Счет-фактура выданный в виде, удобном для печати.
//
Функция ПолучитьШапкуСчетаФактурыДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		ЮрЛицо    = Док.Фирма.ЮрЛицо;
		ЮрФизЛицо = Док.Контрагент.ЮрФизЛицо;
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(Шаблон("СЧЕТ-ФАКТУРА № [глНомерНаПечать(Док)] от [Док.ДатаДок]"), "Номер");
		Реквизиты.ДобавитьЗначение(Шаблон("Продавец: [ЮрЛицо.ПолнНаименование]"), "Поставщик");
		Реквизиты.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(ЮрЛицо.ЮрАдрес)]"), "ПоставщикаАдрес");
		Реквизиты.ДобавитьЗначение(Шаблон("Телефон: [ЮрЛицо.Телефоны]"), "ПоставщикТелефон");
		Реквизиты.ДобавитьЗначение(Шаблон("Идентификационный номер продавца (ИНН) [ЮрЛицо.ИНН]"), "ПоставщикИНН"); 
		
		//Реквизиты.ДобавитьЗначение("Грузоотправитель и его адрес: Он же", "Грузоотправитель"); 
		Реквизиты.ДобавитьЗначение("Грузоотправитель и его адрес: ООО 'Профи' 195197, Санкт-Петербург, Полюстровский пр.. д.87", "Грузоотправитель"); 
		
		Реквизиты.ДобавитьЗначение(Шаблон("Грузополучатель и его адрес: [ЮрФизЛицо.ПолнНаименование], Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ФактАдрес)]"), "Грузополучатель");
		Реквизиты.ДобавитьЗначение(Шаблон("К платежно-расчетному документу  [Док.НомерПлатРасчДок] от [Док.ДатаПлатРасчДок]"), "ПоДокументу");
		Реквизиты.ДобавитьЗначение(Шаблон("Покупатель:[СокрП(ЮрФизЛицо.ПолнНаименование)]"), "Покупатель");
		Реквизиты.ДобавитьЗначение(Шаблон("Адрес: [глПредставлениеАдреса(ЮрФизЛицо.ЮрАдрес)]"), "ПокупательАдрес");
		Реквизиты.ДобавитьЗначение(Шаблон("Телефон: [ЮрФизЛицо.Телефоны]"), "ПокупательТелефон");
		Реквизиты.ДобавитьЗначение(Шаблон("Идентификационный номер покупателя (ИНН) [ЮрФизЛицо.ИНН]"), "ПокупательИНН");
		Реквизиты.ДобавитьЗначение(Док.ДокОснование.УчитыватьНП, "УчитыватьНП");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуСчетаФактурыДляПечати()

//******************************************************************************
// СформироватьСоставСчетаФактуры(Док, Состав)
//
// Параметры: 
//  Док    - документ, для которого нужно сформировать спецификацию
//  Состав - таблица начений, содержащая спецификацию
//  Итоги    - список значений, итоги по колонкам
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую спецификацию нового 
//  документа Счет-фактура выданный, заполненного на основании накладной.
//
Функция СформироватьСоставСчетаФактуры(ДокОснование, Состав, Итоги)
	Перем ТаблицаОснования;
	
	// формируем таблицу значений спкецификации СФ
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("Номенклатура",,,, "Номенклатура");
	Состав.НоваяКолонка("Количество",,,, "Количество");
	Состав.НоваяКолонка("Единица",,,, "Единица");
	Состав.НоваяКолонка("Цена",,,, "Цена");
	Состав.НоваяКолонка("Сумма",,,, "Сумма");
	Состав.НоваяКолонка("ВсегоСНДС",,,, "Сумма всего");
    Состав.НоваяКолонка("СтавкаНДС",,,,"Ставка НДС");
	Состав.НоваяКолонка("СуммаНДС",,,,"Суммма НДС");
	Состав.НоваяКолонка("ГТД",,,,"Номер ГТД");
	Состав.НоваяКолонка("СтранаПроисхождения",,,,"Страна происхождения");
	
	// получаем остатки по ГТД
	ТаблицаГТД = СоздатьОбъект("ТаблицаЗначений");
	ТаблицаГТД.НоваяКолонка("Номенклатура");
	ТаблицаГТД.НоваяКолонка("СтранаПроисхождения");
	ТаблицаГТД.НоваяКолонка("ГТД");
	ТаблицаГТД.НоваяКолонка("Количество");  //в базовых единицах
	КоличествоГТДТов = СоздатьОбъект("СписокЗначений");
	
	// Переберем все партии, которые были списаны документом - основанием. 
	// Если в партии были выбраны страна и ГТД, их следует перенести в СФ
	РегПартии = СоздатьОбъект("Регистр.ПартииНаличие");		
	РегПартии.ВыбратьДвиженияДокумента(ДокОснование);
	
	Пока РегПартии.ПолучитьДвижение() = 1 Цикл
		Если (РегПартии.Расход = 1) 
		и    (РегПартии.Партия.Выбран()=1)
		Тогда
			ВремСтрана 	= РегПартии.Партия.СтранаПроисхождения;
			ВремГТД		= РегПартии.Партия.ГТД;
			
			Если (ПустоеЗначение(ВремСтрана) = 0)
			 или (ПустоеЗначение(ВремГТД   ) = 0)
			Тогда
				ТаблицаГТД.НоваяСтрока();
				ТаблицаГТД.Номенклатура        = РегПартии.Номенклатура;
				ТаблицаГТД.СтранаПроисхождения = ВремСтрана;
				ТаблицаГТД.ГТД                 = ВремГТД;
				ТаблицаГТД.Количество          = РегПартии.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// создадим таблицу документа основания
	ТаблицаОснования = СоздатьОбъект("ТаблицаЗначений");
	ДокОснование.ВыгрузитьТабличнуюЧасть(ТаблицаОснования);
	
	
	// теперь у нас есть таблица, в которой собраны строки документа - основания в нужной валюте
	// надо проставить ГТД
	
	ОснСуммаВклНП  = ДокОснование.СуммаВклНП;
	ОснСуммаВклНДС = ДокОснование.СуммаВклНДС;
	
	ИтогСумма    = 0;
	ВывелиСтроку = 0;
	
	РаспредГТД = СоздатьОбъект("ТаблицаЗначений");
	РаспредГТД.НоваяКолонка("Количество");
	РаспредГТД.НоваяКолонка("СтранаПроисхождения");
	РаспредГТД.НоваяКолонка("Номер");
	
	ИтогСумма		= 0;
	ИтогСуммаВсего	= 0;
	ИтогСуммаНДС    = 0;
	
	ТаблицаОснования . ВыбратьСтроки();
	Пока ТаблицаОснования.ПолучитьСтроку()=1 Цикл
		Если ОснСуммаВклНП = 1 Тогда
			ТаблицаОснования.Сумма = ТаблицаОснования.Сумма - ТаблицаОснования.СуммаНП;
		КонецЕсли;
			
		Если ОснСуммаВклНДС = 1 Тогда
			ТаблицаОснования.Сумма = ТаблицаОснования.Сумма - ТаблицаОснования.СуммаНДС;
		КонецЕсли;
		
		Состав.НоваяСтрока();
		
		Состав.СтранаПроисхождения	= " ----- ";
		Состав.ГТД					= " ----- ";
		Состав.СтавкаНДС			= Строка(ТаблицаОснования.СтавкаНДС);
		Состав.СуммаНДС				= глФРМ(ТаблицаОснования.СуммаНДС,,0,"");
		Состав.Сумма				= глФРМ(ТаблицаОснования.Сумма,,0,"");
		Состав.Номенклатура			= ТаблицаОснования.Номенклатура.ПолнНаименование;
		Состав.Количество			= ТаблицаОснования.Количество;
		
		ТекЕдиница			= ТаблицаОснования.Единица;
		Состав.Цена			= глФРМ(?(ТаблицаОснования.Количество = 0, 0, ТаблицаОснования.Сумма/ТаблицаОснования.Количество));
		Состав.Единица		= Строка(ТекЕдиница);
		Состав.ВсегоСНДС	= глФРМ(ТаблицаОснования.Сумма + ТаблицаОснования.СуммаНДС,,0,"");
		ВсегоКол			= ТаблицаОснования.Количество;
		ОстКоличество		= ВсегоКол;
		РаспредГТД.УдалитьСтроки();
		
		НомСтр = 0;
		
		ИтогСумма		= ИтогСумма + ТаблицаОснования.Сумма;
		ИтогСуммаВсего	= ИтогСуммаВсего + ТаблицаОснования.Сумма + ТаблицаОснования.СуммаНДС;
		ИтогСуммаНДС	= ИтогСуммаНДС + ТаблицаОснования.СуммаНДС;
		
		Пока (ОстКоличество > 0) 
		   и (ТаблицаГТД.НайтиЗначение(ТаблицаОснования.Номенклатура, НомСтр, "Номенклатура") <> 0)
		Цикл
			
			ТаблицаГТД.ПолучитьСтрокуПоНомеру(НомСтр);
			
			РаспредГТД.НоваяСтрока();
			РаспредГТД.Количество			= Мин(ОстКоличество, 
			                                      ?(ТаблицаОснования.Коэффициент <> 0, 
												    ТаблицаГТД.Количество / ТаблицаОснования.Коэффициент, 
													ТаблицаГТД.Количество));
			РаспредГТД.Номер				= ТаблицаГТД.ГТД;
			РаспредГТД.СтранаПроисхождения	= ТаблицаГТД.СтранаПроисхождения;
			ТаблицаГТД.Количество			= ТаблицаГТД.Количество - РаспредГТД.Количество * 
											  ?(ТаблицаОснования.Коэффициент = 0, 1, ТаблицаОснования.Коэффициент);
			Если ТаблицаГТД.Количество <= 0 Тогда
				// если по ГТД все списали, то удаляем строку
				ТаблицаГТД.УдалитьСтроку();
			КонецЕсли;
			
			ОстКоличество = ОстКоличество - РаспредГТД.Количество;
			НомСтр   = 0;
		КонецЦикла;
			
		Если (ОстКоличество > 0)
		   и (ОстКоличество < ВсегоКол)
		Тогда
			// только часть товара распределилась по ГТД
			РаспредГТД.НоваяСтрока();
			РаспредГТД.Количество  = ОстКоличество;
			РаспредГТД.Номер  = " ----- ";
			РаспредГТД.СтранаПроисхождения = " ----- ";
		КонецЕсли;
			
		Если РаспредГТД.КоличествоСтрок() = 1 Тогда
			// одна строка в таблице. Товара с номером ГТД и страной в одной строке
			Состав.ГТД                 = Строка(РаспредГТД.Номер);
			Состав.СтранаПроисхождения = Строка(РаспредГТД.СтранаПроисхождения);
		Иначе
			
			РаспредГТД.ВыбратьСтроки();
			Пока РаспредГТД.ПолучитьСтроку() = 1 Цикл
				Состав.НоваяСтрока();
				Состав.Номенклатура = "     в т.ч.";
				Состав.Цена	        = " ----- ";
				Состав.Сумма        = " ----- ";
				Состав.СтавкаНДС    = " -- ";
				Состав.СуммаНДС     = " -- ";
				
				Если ДокОснование.УчитыватьНП = 1 Тогда
				    Состав.СуммаНП    = " -- ";
				КонецЕсли;
				
				Состав.ВсегоСНДС	= " ----- ";
				Состав.Единица		= Строка(ТекЕдиница);
				Состав.Количество	= РаспредГТД.Количество;
				
				Состав.ГТД                 = Строка(РаспредГТД.Номер);
				Состав.СтранаПроисхождения = Строка(РаспредГТД.СтранаПроисхождения);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;// по строкам таблицы основания 
	
	Итоги = СоздатьОбъект("СписокЗначений");
	Итоги.ДобавитьЗначение(ИтогСумма, "Сумма");
	Итоги.ДобавитьЗначение(ИтогСуммаВсего, "СуммаВсего");
	Итоги.ДобавитьЗначение(ИтогСуммаНДС, "СуммаНДС");
	
	Возврат 1;
КонецФункции // СформироватьСоставСчетаФактуры()

//******************************************************************************
// ПолучитьСоставСчетаФактуры(ДокИд, Состав)
//
// Параметры: 
//  ДокИд   - идентификатор документа.
//  Состав  - таблица начений, содержащая спецификацию документа.
//  Итоги    - список значений, итоги по колонкам.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  Формирует таблицу значений, содержащую спецификацию для существующего 
//  документа  Счет-фактура выданный.
//
Функция ПолучитьСоставСчетаФактуры(ДокИд, Состав, Итоги)
    Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Рез = СформироватьСоставСчетаФактуры(Док.ДокОснование, Состав, Итоги);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСчетаФактуры()

//******************************************************************************
// ЗаполнитьСоставСчетаФактуры(ДокОснИд, Состав, Итоги)
//
// Параметры: 
//  ДокОснИд - идентификатор документа основания
//  Состав   - таблица начений, содержащая спецификацию документа
//  Итоги    - список значений, итоги по колонкам
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка
//
// Описание:
//  Формирует таблицу значений, содержащую спецификацию для нового 
//  документа  Счет-фактура выданный.
//
Функция ЗаполнитьСоставСчетаФактуры(ДокОснИд, Состав, Итоги)
	Перем ДокОсн;
	
	Рез = ПолучитьДокументПоИд(ДокОснИд, ДокОсн);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Рез = СформироватьСоставСчетаФактуры(ДокОсн, Состав, Итоги);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаполнитьСоставСчетаФактуры()

//******************************************************************************
// ЗаписатьСчетФактуру(ДокИд, ДокОснИд)
//
// Параметры: 
//  ДокИд		- идентификатор документа
//  ДокОснИд	- идентификатор документа основания.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Записывает документ Счет-фактура выданный.
//
Функция ЗаписатьСчетФактуру(ДокИд, ДокОснИд)
	Перем Док, ДокОсн;
	
	Рез = ПолучитьДокументПоИд(ДокОснИД, ДокОсн);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Док = СоздатьОбъект("Документ.СчетФактураВыданный");
		Док.Новый();
		Док.ДокОснование	= ДокОсн;
		Док.Фирма			= ДокОсн.Фирма;
		Док.Контрагент		= ДокОсн.Контрагент;
		Док.Договор			= ДокОсн.Договор;
		Док.Валюта			= ДокОсн.Валюта;
		Док.Курс			= ДокОсн.Курс;
		Док.УчитыватьНДС	= ДокОсн.УчитыватьНДС;
		Док.СуммаВклНДС		= ДокОсн.СуммаВклНДС;
		Док.УчитыватьНП		= ДокОсн.УчитыватьНП;
		Док.СуммаВклНП		= ДокОсн.СуммаВклНП;
		
		Попытка
			Док.Записать();
			ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		Исключение
			Сообщение = ОписаниеОшибки();
			Рез = 0;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ЗаписатьСчетФактуру()

// РЕАЛИЗАЦИЯ ТМЦ

//******************************************************************************
// ПолучитьШапкуРеализацииТмц(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Реализация ТМЦ
//
Функция ПолучитьШапкуРеализацииТмц(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)         , "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)            , "Договор");

        СтрОплаты = СтрокаОплаты(, Док.Скидка, 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС , "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП , "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП  , "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(КоэффСкидки(Док.Скидка), "КоэффСкидки");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
		
		СФ = глНайтиСчетФактуру(Док,"СчетФактураВыданный");
		Если ПустоеЗначение(СФ) = 0 Тогда
		    СчетФактура = глНазваниеДокументаВЖурнале(СФ) + " № " + СФ.НомерДок + " от " + СФ.ДатаДок;
			СчетФактураИд = ЗначениеВстрокуВнутр(СФ);
		Иначе
			СчетФактура = "";
			СчетФактураИд = "";
		КонецЕсли;
		
		Реквизиты.ДобавитьЗначение(СчетФактура , "СчетФактура");
		Реквизиты.ДобавитьЗначение(СчетФактураИд, "СчетФактураИд");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуРеализацииТмц()

//******************************************************************************
// ПолучитьСоставРеализацииТмц(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, содержащая состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего 
//  документа Реализация ТМЦ.
//
Функция ПолучитьСоставРеализацииТмц(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНДС" , "Число"  ,,,,,,);
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП", "Строка" ,,,,,,);
			Состав.НоваяКолонка("КоэффНП" , "Число"  ,,,,,,);
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД = ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура   = Строка(Док.Номенклатура);
			Состав.Количество     = Док.Количество;
			Состав.Единица        = Строка(Док.Единица);
			Состав.Цена           = Док.Цена;
			Состав.Сумма          = Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставРеализацииТмц()

//******************************************************************************
// ПолучитьШапкуРеализацииТмцДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Реализация ТМЦ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуРеализацииТмцДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док)                 , "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)                             , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)                              , "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование)        , "Фирма");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ЮрАдрес)                 , "АдресПоставщик");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ПолнНаименование), "Контрагент");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ЮрАдрес)         , "АдресПолучатель");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуРеализацииТмцДляПечати()

//******************************************************************************
// ПолучитьСоставРеализацииТмцДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Реализация ТМЦ в виде, удобном для 
//  формирования печатной формы.
//
Функция ПолучитьСоставРеализацииТмцДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
		
		Состав.НоваяКолонка("Номенклатура",,,,"Товар");
		Состав.НоваяКолонка("Количество",,,,"Кол-во");
		Состав.НоваяКолонка("Единица",,,,"Единица.");
		Состав.НоваяКолонка("Цена",,,,"Цена");
		Состав.НоваяКолонка("Сумма",,,,"Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество   = СокрЛП(Док.Количество);
			Состав.Единица           = Строка(Док.Единица);
			
			Если Док.Количество <> 0 Тогда
				Состав.Цена = глФРМ(Док.Сумма / Док.Количество);
			КонецЕсли;
			
			Состав.Сумма = глФРМ(Док.Сумма);
		КонецЦикла;
		
		ИтогСумма = Док.Итог("Сумма");
		ИтогСуммаВсего = ИтогСумма;
		
		Если Док.УчитыватьНДС = 1 Тогда
			ИтогСуммаНДС = Док.Итог("СуммаНДС");
			Если Док.СуммаВклНДС = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНДС;
				Текст = "Сумма НДС: ";
			Иначе
				Текст = "В том числе НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНДС), "СуммаНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
			ИтогСуммаНП = Док.Итог("СуммаНП");
			Если Док.СуммаВклНП = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНП;
				Текст = "Сумма НП: ";
			Иначе
				Текст = "В том числе НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНП), "СуммаНП");
		КонецЕсли;
		
		Итоги.ДобавитьЗначение("Итого: "+глФРМ(ИтогСумма), "Сумма");
		Итоги.ДобавитьЗначение("Всего наименований "+Док.КоличествоСтрок()+
		                       ", на сумму " +глФРМ(ИтогСуммаВсего, Док.Валюта),
							   "Строка1");
		Итоги.ДобавитьЗначение(глСуммаПрописью(ИтогСуммаВсего, Док.Валюта), 
		                       "Строка2");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставРеализацииТмцДляПечати()

//******************************************************************************
// ЗаписатьРеализациюТмц(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Реализация ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьРеализациюТмц(ДокИд, РеквШапки, ИзмСостав)
	Возврат ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав);
КонецФункции // ЗаписатьРеализациюТмц()

// ПОСТУПЛЕНИЕ ТМЦ

//******************************************************************************
// ПолучитьШапкуПоступленияТмц(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Поступление ТМЦ.
//
Функция ПолучитьШапкуПоступленияТмц(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)         , "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)            , "Договор");

        СтрОплаты = СтрокаОплаты(, , 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты		, "СтрокаОплаты");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС	, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС	, "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП	, "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП	, "СуммаВклНП");
		
		Реквизиты.ДобавитьЗначение(Док.НомерДокВходящий	, "НомерДокВход");
		Реквизиты.ДобавитьЗначение(Док.ДатаДокВходящий	, "ДатаДокВход");
		
		Реквизиты.ДобавитьЗначение(Док.Проведен()	, "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий	, "Комментарий");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуРеализацииТмц()

//******************************************************************************
// ПолучитьСоставПоступлениеТмц(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, содержащая состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа 
//  Поступление ТМЦ.
//
Функция ПолучитьСоставПоступлениеТмц(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
	    Состав.НоваяКолонка("ВидТМЦ",,,, "ВидТМЦ");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС",,,, "% НДС");
			Состав.НоваяКолонка("КоэффНДС");
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП",,,,"% НП");
			Состав.НоваяКолонка("КоэффНП");
		КонецЕсли;
		
		Состав.НоваяКолонка("ГТД",,,,"Номер ГТД");
		Состав.НоваяКолонка("СтранаПроисхождения",,,,"Страна происхождения");

		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
		    Состав.ВидТМЦ			= Строка(Док.ВидТМЦ);
			Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
			Состав.Цена				= Док.Цена;
			Состав.Сумма			= Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
		
		Состав.ГТД					= Строка(Док.Партия.ГТД);
		Состав.СтранаПроисхождения	= Строка(Док.Партия.СтранаПроисхождения);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПоступленияТмц()

//******************************************************************************
// ПолучитьШапкуПоступленияТмцДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки 
//  документа Поступление ТМЦ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуПоступленияТмцДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док)                 , "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)                             , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)                              , "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование)        , "Получатель");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ЮрАдрес)                 , "АдресПолучатель");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ПолнНаименование), "Поставщик");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ЮрАдрес)         , "АдресПоставщик");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуПоступленияТмцДляПечати()

//******************************************************************************
// ПолучитьСоставРеализацииТмцДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Поступление ТМЦ в виде, удобном для
//  формирования печатной формы.
//
Функция ПолучитьСоставПоступленияТмцДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
				
		Состав.НоваяКолонка("Номенклатура",,,,"Товар");
		Состав.НоваяКолонка("Количество",,,,"Кол-во");
		Состав.НоваяКолонка("Единица",,,,"Единица.");
		Состав.НоваяКолонка("Цена",,,,"Цена");
		Состав.НоваяКолонка("Сумма",,,,"Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество   = СокрЛП(Док.Количество);
			Состав.Единица           = Строка(Док.Единица);
			
			Если Док.Количество <> 0 Тогда
				Состав.Цена = глФРМ(Док.Сумма / Док.Количество);
			КонецЕсли;
			
			Состав.Сумма = глФРМ(Док.Сумма);
		КонецЦикла;
		
		ИтогСумма = Док.Итог("Сумма");
		ИтогСуммаВсего = ИтогСумма;
		
		Если Док.УчитыватьНДС = 1 Тогда
			ИтогСуммаНДС = Док.Итог("СуммаНДС");
			Если Док.СуммаВклНДС = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНДС;
				Текст = "Сумма НДС: ";
			Иначе
				Текст = "В том числе НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНДС), "СуммаНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
			ИтогСуммаНП = Док.Итог("СуммаНП");
			Если Док.СуммаВклНП = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНП;
				Текст = "Сумма НП: ";
			Иначе
				Текст = "В том числе НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНП), "СуммаНП");
		КонецЕсли;
		
		Итоги.ДобавитьЗначение("Итого: "+глФРМ(ИтогСумма), "Сумма");
		Итоги.ДобавитьЗначение("Всего наименований "+Док.КоличествоСтрок()+", на сумму " +глФРМ(ИтогСуммаВсего, Док.Валюта), "Строка1");
		Итоги.ДобавитьЗначение(глСуммаПрописью(ИтогСуммаВсего, Док.Валюта), "Строка2");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставПоступленияТмцДляПечати()

//******************************************************************************
// ЗаписатьПоступлениеТмц(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Поступление ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьПоступлениеТмц(ДокИд, РеквШапки, ИзмСостав)
	Возврат ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав);
КонецФункции // ЗаписатьПоступлениеТмц()

// ВОЗВРАТ ПОСТАВЩИКУ

//******************************************************************************
// ПолучитьШапкуВозвратаПоставщику(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Возврат поставщику.
//
Функция ПолучитьШапкуВозвратаПоставщику(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)         , "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)            , "Договор");

        СтрОплаты = СтрокаОплаты(, , 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС , "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП , "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП  , "СуммаВклНП");
		
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуВозвратаПоставщику()

//******************************************************************************
// ПолучитьСоставВозвратаПоставщику(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, содержащая состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего документа
//  Возврат поставщику.
//
Функция ПолучитьСоставВозвратаПоставщику(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС",,,, "% НДС");
			Состав.НоваяКолонка("КоэффНДС");
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП",,,,"% НП");
			Состав.НоваяКолонка("КоэффНП");
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
			Состав.Цена				= Док.Цена;
			Состав.Сумма			= Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставВозвратаПоставщику()

//******************************************************************************
// ПолучитьШапкуВозвратаПоставщикуДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Возврат поставщику в виде, удобном для формирования печатной формы
//
Функция ПолучитьШапкуВозвратаПоставщикуДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док)                 , "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)                             , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)                              , "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование)        , "Фирма");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ЮрАдрес)                 , "ФирмаАдрес");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ПолнНаименование), "Контрагент");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ЮрАдрес)         , "КонтрагентАдрес");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуВозвратаПоставщикуДляПечати()

//******************************************************************************
// ПолучитьСоставВозвратаПоставщикуДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм. 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Возврат поставщику в печатной форме.
//
Функция ПолучитьСоставВозвратаПоставщикуДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
				
		Состав.НоваяКолонка("Номенклатура",,,,"Товар");
		Состав.НоваяКолонка("Количество",,,,"Кол-во");
		Состав.НоваяКолонка("Единица",,,,"Единица.");
		Состав.НоваяКолонка("Цена",,,,"Цена");
		Состав.НоваяКолонка("Сумма",,,,"Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			
			Состав.Номенклатура = СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество   = СокрЛП(Док.Количество);
			Состав.Единица           = Строка(Док.Единица);
			
			Если Док.Количество <> 0 Тогда
				Состав.Цена = глФРМ(Док.Сумма / Док.Количество);
			КонецЕсли;
			
			Состав.Сумма = глФРМ(Док.Сумма);
		КонецЦикла;
		
		ИтогСумма = Док.Итог("Сумма");
		ИтогСуммаВсего = ИтогСумма;
		
		Если Док.УчитыватьНДС = 1 Тогда
			ИтогСуммаНДС = Док.Итог("СуммаНДС");
			Если Док.СуммаВклНДС = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНДС;
				Текст = "Сумма НДС: ";
			Иначе
				Текст = "В том числе НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНДС), "СуммаНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
			ИтогСуммаНП = Док.Итог("СуммаНП");
			Если Док.СуммаВклНП = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНП;
				Текст = "Сумма НП: ";
			Иначе
				Текст = "В том числе НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНП), "СуммаНП");
		КонецЕсли;
		
		Итоги.ДобавитьЗначение("Итого: "+глФРМ(ИтогСумма), "Сумма");
		Итоги.ДобавитьЗначение("Всего наименований "+Док.КоличествоСтрок()+", на сумму " +глФРМ(ИтогСуммаВсего, Док.Валюта), "Строка1");
		Итоги.ДобавитьЗначение(глСуммаПрописью(ИтогСуммаВсего, Док.Валюта), "Строка2");
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ПолучитьСоставВозвратаПоставщикуДляПечати()

//******************************************************************************
// ЗаписатьВозвратПоставщику(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Возврат поставщику. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьВозвратПоставщику(ДокИд, РеквШапки, ИзмСостав)
	Возврат ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав);
КонецФункции // ЗаписатьВозвратПоставщику()

// ВОЗВРАТ ОТ ПОКУПАТЕЛЯ

//******************************************************************************
// ПолучитьШапкуВозвратаОтПокупателя(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Возврат от покупателя.
//
Функция ПолучитьШапкуВозвратаОтПокупателя(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		
		Реквизиты.ДобавитьЗначение(Строка(Док.Контрагент)         , "Контрагент");
		Реквизиты.ДобавитьЗначение(Строка(Док.Договор)            , "Договор");

        СтрОплаты = СтрокаОплаты(, , 
		                         Док.Валюта, Док.Курс, 
								 Док.УчитыватьНДС, Док.СуммаВклНДС, 
								 Док.УчитыватьНП, Док.СуммаВклНП, 
								 0);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
		
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНДС, "УчитыватьНДС");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНДС , "СуммаВклНДС");
		Реквизиты.ДобавитьЗначение(Док.УчитыватьНП , "УчитыватьНП");
		Реквизиты.ДобавитьЗначение(Док.СуммаВклНП  , "СуммаВклНП");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуВозвратаОтПокупателя()

//******************************************************************************
// ПолучитьСоставВозвратаОтПокупателя(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, содержащая состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего 
//  документа Возврат от покупателя.
//
Функция ПолучитьСоставВозвратаОтПокупателя(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		Состав.НоваяКолонка("Сумма");
		
		Если Док.УчитыватьНДС = 1 Тогда
			Состав.НоваяКолонка("СтавкаНДС",,,, "% НДС");
			Состав.НоваяКолонка("КоэффНДС");
		КонецЕсли;

		Если Док.УчитыватьНП = 1 Тогда
			Состав.НоваяКолонка("СтавкаНП",,,,"% НП");
			Состав.НоваяКолонка("КоэффНП");
		КонецЕсли;
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
			Состав.Цена				= Док.Цена;
			Состав.Сумма			= Док.Сумма;
			
			Если Док.УчитыватьНДС = 1 Тогда
				Состав.СтавкаНДС = Строка(Док.СтавкаНДС);
				Состав.КоэффНДС  = КоэффНДС(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
	
			Если Док.УчитыватьНП = 1 Тогда
				Состав.СтавкаНП = Строка(Док.СтавкаНП);
				Состав.КоэффНП  = КоэффНП(Док.СтавкаНДС, Док.СуммаВклНДС, Док.СтавкаНП, Док.СуммаВклНП);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставВозвратаОтПокупателя()

//******************************************************************************
// ПолучитьШапкуВозвратаОтПокупателяДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Возврат от покупателя в виде, удобном для формирования 
//  печатной формы.
//
Функция ПолучитьШапкуВозвратаОтПокупателяДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док)                 , "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)                             , "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)                              , "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование)        , "Фирма");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ЮрАдрес)                 , "ФирмаАдрес");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ПолнНаименование), "Контрагент");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Контрагент.ЮрФизЛицо.ЮрАдрес)         , "КонтрагентАдрес");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуВозвратаПоставщикуДляПечати()

//******************************************************************************
// ПолучитьСоставВозвратаОтПокупателяДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//  Итоги  - список значений, содержащий итоговые значения сумм 
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Возврат от покупателя в 
//  печатной форме. 
//
Функция ПолучитьСоставВозвратаОтПокупателяДляПечати(ДокИд, Состав, Итоги)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Итоги  = СоздатьОбъект("СписокЗначений");
		Состав = СоздатьОбъект("ТаблицаЗначений");
				
		Состав.НоваяКолонка("Номенклатура",,,,"Товар");
		Состав.НоваяКолонка("Количество",,,,"Кол-во");
		Состав.НоваяКолонка("Единица",,,,"Единица.");
		Состав.НоваяКолонка("Цена",,,,"Цена");
		Состав.НоваяКолонка("Сумма",,,,"Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= СокрЛП(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
			
			Если Док.Количество <> 0 Тогда
				Состав.Цена = глФРМ(Док.Сумма / Док.Количество);
			КонецЕсли;
			
			Состав.Сумма = глФРМ(Док.Сумма);
		КонецЦикла;
		
		ИтогСумма = Док.Итог("Сумма");
		ИтогСуммаВсего = ИтогСумма;
		
		Если Док.УчитыватьНДС = 1 Тогда
			ИтогСуммаНДС = Док.Итог("СуммаНДС");
			Если Док.СуммаВклНДС = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНДС;
				Текст = "Сумма НДС: ";
			Иначе
				Текст = "В том числе НДС: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНДС), "СуммаНДС");
		КонецЕсли;
		
		Если Док.УчитыватьНП = 1 Тогда
			ИтогСуммаНП = Док.Итог("СуммаНП");
			Если Док.СуммаВклНП = 0 Тогда
				ИтогСуммаВсего = ИтогСуммаВсего + ИтогСуммаНП;
				Текст = "Сумма НП: ";
			Иначе
				Текст = "В том числе НП: ";
			КонецЕсли;
			Итоги.ДобавитьЗначение(Текст + глФРМ(ИтогСуммаНП), "СуммаНП");
		КонецЕсли;
		
		Итоги.ДобавитьЗначение("Итого: "+глФРМ(ИтогСумма), "Сумма");
		Итоги.ДобавитьЗначение("Всего наименований "+Док.КоличествоСтрок()+", на сумму " +глФРМ(ИтогСуммаВсего, Док.Валюта), "Строка1");
		Итоги.ДобавитьЗначение(глСуммаПрописью(ИтогСуммаВсего, Док.Валюта), "Строка2");
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ПолучитьСоставВозвратаОтПокупателяДляПечати()

//******************************************************************************
// ЗаписатьВозвратОтПокупателя(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  ИзмСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Возврат от покупателя. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьВозвратОтПокупателя(ДокИд, РеквШапки, ИзмСостав)
	Возврат ЗаписатьНакладную(ДокИд, РеквШапки, ИзмСостав);
КонецФункции // ЗаписатьВозвратОтПокупателя()

// СПИСАНИЕ ТМЦ

//******************************************************************************
// ЗаполнитьШапкуСписанияТмц(ДокОснИд, Реквизиты)
//
// Параметры:
//  ДокОснИд	- идентификатор документа основания.
//  Реквизиты	- список значений. Реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки нового 
//  документа Списание ТМЦ.
//
Функция ЗаполнитьШапкуСписанияТмц(ДокОснИд, Реквизиты)
	Перем ДокОсн; // документ основание
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
		
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("СписаниеТМЦ") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(""           , "НомерДок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
			
	Если ПолучитьДокументПоИд(ДокОснИд, ДокОсн) = 0 Тогда
		// есть док основани
		Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");
	Иначе
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОсн.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Фирма), "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Проект), "Проект");
		СтрокаОснование = глНазваниеДокументаВЖурнале(ДокОсн) + 
		                  " № " + ДокОсн.НомерДок + 
						  " от " + ДокОсн.ДатаДок;
		Реквизиты.ДобавитьЗначение(СтрокаОснование, "ДокОснование");
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЗаполнитьШапкуСписанияРозн()

//******************************************************************************
// ЗаполнитьСоставСписанияТмц()
//
// Параметры: 
//  ДокОснИд	- идентификатор документа основания.
//  Состав		- таблица значений, содержащая состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую состав нового документа Списание ТМЦ.
//
Функция ЗаполнитьСоставСписанияТмц(ДокОснИд, Состав)
	Перем ДокОсн; // документ основание
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("Единица");
		
	Если ПолучитьДокументПоИд(ДокОснИд, ДокОсн) = 1 Тогда
		ДокОсн.ВыбратьСтроки();
		Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
			Разница = ДокОсн.КоличествоУчет - ДокОсн.Количество;
			Если Разница > 0 Тогда
				Состав.НоваяСтрока();
				Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(ДокОсн.Номенклатура);
				Состав.Номенклатура		= Строка(ДокОсн.Номенклатура);
				Состав.Количество		= Разница;
				Состав.Единица			= Строка(ДокОсн.Единица);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЗаполнитьСоставСписанияТмц()

//******************************************************************************
// ПолучитьШапкуСписанияТмц(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Списание ТМЦ.
//
Функция ПолучитьШапкуСписанияТмц(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
		
		Если ПустоеЗначение(Док.ДокОснование) = 0 Тогда
		    СтрокаОснование = глНазваниеДокументаВЖурнале(Док.ДокОснование) + 
			                  " № " + Док.ДокОснование.НомерДок + 
							  " от " + Док.ДокОснование.ДатаДок;
		Иначе
			СтрокаОснование = "";
		КонецЕсли;
		Реквизиты.ДобавитьЗначение(СтрокаОснование, "ДокОснование");
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСписанияТмц()

//******************************************************************************
// ПолучитьСоставСписанияТмц(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава документа с идентификатором ДокИд.
//
Функция ПолучитьСоставСписанияТмц(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(Док.Номенклатура);
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСписанияТмц()

//******************************************************************************
// ПолучитьШапкуАктаСписанияДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Списание ТМЦ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуСписанияТмцДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док)				, "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док)							, "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок)							, "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование)	, "Фирма");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуСписанияТмцДляПечати()

//******************************************************************************
// ПолучитьСоставВозвратаОтПокупателяДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Списание ТМЦ в печатной форме. 
//
Функция ПолучитьСоставСписанияТмцДляПечати(ДокИд, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура",,,,"Товар");
		Состав.НоваяКолонка("Количество",,,,"Кол-во");
		Состав.НоваяКолонка("Единица",,,,"Единица.");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= СокрЛП(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставСписанияТмцДляПечати()

//******************************************************************************
// ЗаписатьСписаниеТмц(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  НовСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Списание ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьСписаниеТмц(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем Док, Реквизиты, ДокОсн;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПолучитьДокументПоИд(ДокИД, Док) = 0 Тогда
		// создадим документ
		Док = СоздатьОбъект("Документ.СписаниеТМЦ");
		Док.Новый();
		Если ПолучитьДокументПоИд(РеквШапки.Получить("ДокОснованиеИд"), ДокОсн) = 0 Тогда
			// основание отсутствует
			Док.Фирма			= ЗначениеИзСтрокиВнутр(РеквШапки.Получить("ФирмаИд"));
			Док.Проект			= Пользователь.ОсновнойПроект;
			Док.Склад			= Склад;
		Иначе
			Док.ДокОснование	= ДокОсн;
			Док.Фирма			= ДокОсн.Фирма;
			Док.Проект			= ДокОсн.Проект;
			Док.Склад			= Склад;
		КонецЕсли;
	Иначе
		// обновим состав
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ЗначениеИзСтрокиВнутр(ДокИд));
		ТекСтр = 1;
		ИзмСостав.ВыбратьСтроки();
		Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
		    Док.ПолучитьСтрокуПоНомеру(ТекСтр);
			
			Если ИзмСостав.Количество = 0 Тогда
				// заносим строку в список удаляемых
				УдСтроки.ДобавитьЗначение(ТекСтр);
			Иначе
				Док.Количество = ИзмСостав.Количество;
			КонецЕсли;
			
			глПересчетТаблЧасти(Док, "Количество");
			ТекСтр = ТекСтр + 1;
		КонецЦикла;
		
		Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
			НомУдСтр = УдСтроки.ПолучитьЗначение(Сч);
			Док.ПолучитьСтрокуПоНомеру(НомУдСтр - Сч + 1);
			Док.УдалитьСтроку();
		КонецЦикла;
		
		Док.Комментарий = РеквШапки.Получить("Комментарий");
	КонецЕсли;
		
	// добавляем новый
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать Номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
			Док.Номенклатура	= Номенклатура;
			Док.Количество		= НовСостав.Количество;
			Док.Единица			= Номенклатура.ОсновнаяЕдиница;
			Док.Коэффициент		= Номенклатура.ОсновнаяЕдиница.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьСписаниеТмц()

// ОПРИХОДОВАНИЕ ТМЦ

//******************************************************************************
// ЗаполнитьШапкуОприходованияТмц(Реквизиты)
//
// Параметры: 
//  Реквизиты - список значений. Реквизиты шапки документа
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Создает список, содержащий значения реквизитов шапки нового 
//  документа Оприходование ТМЦ.
//
Функция ЗаполнитьШапкуОприходованияТмц(ДокОснИд, Реквизиты)
	Перем ДокОсн; // документ основание
	
	Реквизиты = СоздатьОбъект("СписокЗначений");
		
	// заполняем реквизиты нового документа, не зависящие от основания
	Реквизиты.ДобавитьЗначение(ПредставлениеДокумента("ОприходованиеТМЦ") + " № <новый> от " + РабочаяДата(), "Заголовок");
	Реквизиты.ДобавитьЗначение(""           , "НомерДок");
	Реквизиты.ДобавитьЗначение(РабочаяДата(), "ДатаДок"); 
	Реквизиты.ДобавитьЗначение(0 , "Проведен");
	Реквизиты.ДобавитьЗначение("", "Комментарий");
			
	Если ПолучитьДокументПоИд(ДокОснИд, ДокОсн) = 0 Тогда
		// есть док основани
		Реквизиты.ДобавитьЗначение(Строка(Пользователь.ОсновнойПроект), "Проект");
        СтрОплаты = СтрокаОплаты(, , глРубли, 1);
	Иначе
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(ДокОсн.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Фирма), "Фирма");
		Реквизиты.ДобавитьЗначение(Строка(ДокОсн.Проект), "Проект");
		СтрокаОснование = глНазваниеДокументаВЖурнале(ДокОсн) + 
		                  " № " + ДокОсн.НомерДок + 
						  " от " + ДокОсн.ДатаДок;
		Реквизиты.ДобавитьЗначение(СтрокаОснование, "ДокОснование");
		СтрОплаты = СтрокаОплаты(, , ДокОсн.Валюта, ДокОсн.Курс);
	КонецЕсли;
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	
	Возврат 1;
КонецФункции // ЗаполнитьШапкуОприходованияТмц(ДокОснИд, Состав)

//******************************************************************************
// ЗаполнитьСоставОприходованияТмц()
//
// Параметры: 
//  ДокОснИд	- идентифкатор документа основания.
//  Состав		- таблица значений, содержащая состав нового документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую состав нового 
//  документа Оприходование ТМЦ.
//
Функция ЗаполнитьСоставОприходованияТмц(ДокОснИд, Состав)
	Перем ДокОсн; // документ основание
	
	Состав = СоздатьОбъект("ТаблицаЗначений");
	Состав.НоваяКолонка("НоменклатураИд");
	Состав.НоваяКолонка("ВидТМЦ");
	Состав.НоваяКолонка("Номенклатура");
	Состав.НоваяКолонка("Количество");
	Состав.НоваяКолонка("ЕдиницаИд");
	Состав.НоваяКолонка("Единица");
		
	Если ПолучитьДокументПоИд(ДокОснИд, ДокОсн) = 1 Тогда
		ВидТовар	= Строка(Перечисление.ВидыТМЦ.Товар);
		ДокОсн.ВыбратьСтроки();
		
		Пока ДокОсн.ПолучитьСтроку() = 1 Цикл
			Разница = ДокОсн.Количество - ДокОсн.КоличествоУчет;
			Если Разница > 0 Тогда
				Состав.НоваяСтрока();
				Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(ДокОсн.Номенклатура);
			    Состав.ВидТМЦ			= ВидТовар;
				Состав.Номенклатура		= Строка(ДокОсн.Номенклатура);
				Состав.Количество		= Разница;
				Состав.Единица			= Строка(ДокОсн.Единица);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат 1;
КонецФункции // ЗаполнитьСоставСписанияТмц()

//******************************************************************************
// ПолучитьШапкуОприходованияТмц(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИД     - идентификатор документа.
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего
//  документа Оприходование ТМЦ.
//
Функция ПолучитьШапкуОприходованияТмц(ДокИд, Реквизиты)
	Перем Рез, Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док) +
		                           " № " + СокрЛП(Док.НомерДок) + " от " + Док.ДатаДок + ?(Док.Проведен()=1, " (проведен)", " (не проведен)"),
								   "Заголовок");
		Реквизиты.ДобавитьЗначение(Строка(Док.Фирма)              , "Фирма");
		Реквизиты.ДобавитьЗначение(ЗначениеВстрокуВнутр(Док.Фирма), "ФирмаИд");
		Реквизиты.ДобавитьЗначение(Строка(Док.Проект)             , "Проект");
		Реквизиты.ДобавитьЗначение(Док.Проведен() , "Проведен");
		Реквизиты.ДобавитьЗначение(Док.Комментарий, "Комментарий");
		
		Если ПустоеЗначение(Док.ДокОснование) = 0 Тогда
		    СтрокаОснование = глНазваниеДокументаВЖурнале(Док.ДокОснование) + 
			                  " № " + Док.ДокОснование.НомерДок + 
							  " от " + Док.ДокОснование.ДатаДок;
		Иначе
			СтрокаОснование = "";
		КонецЕсли;
		Реквизиты.ДобавитьЗначение(СтрокаОснование, "ДокОснование");
		
		СтрОплаты = СтрокаОплаты(, , Док.Валюта, Док.Курс);
		Реквизиты.ДобавитьЗначение(СтрОплаты, "СтрокаОплаты");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуОприходованияТмц()

//******************************************************************************
// ПолучитьСоставОприходованияТмц(ДокИД, Состав)
//
// Параметры: 
//  ДокИД  - идентификатор документа.
//  Состав - таблица значений, состав документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений на основе состава существующего 
//  документа Оприходование ТМЦ.
//
Функция ПолучитьСоставОприходованияТмц(ДокИД, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("НоменклатураИД");
	    Состав.НоваяКолонка("ВидТМЦ",,,, "ВидТМЦ");
		Состав.НоваяКолонка("Номенклатура");
		Состав.НоваяКолонка("Количество");
		Состав.НоваяКолонка("Единица");
		Состав.НоваяКолонка("Цена");
		
		ВидТовар = Строка(Перечисление.ВидыТМЦ.Товар);
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
		    Состав.НоваяСтрока();
			Состав.НоменклатураИД	= ЗначениеВстрокуВнутр(Док.Номенклатура);
		    Состав.ВидТМЦ			= ВидТовар;
			Состав.Номенклатура		= Строка(Док.Номенклатура);
			Состав.Количество		= Док.Количество;
			Состав.Единица			= Строка(Док.Единица);
			Состав.Цена				= Док.Цена;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставОприходованияТмц()

//******************************************************************************
// ПолучитьШапкуОприходованияТмцДляПечати(ДокИд, Реквизиты)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  Реквизиты - список значений, содержащий реквизиты шапки документа.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует список значений, содержащий реквизиты шапки существующего 
//  документа Оприходование ТМЦ в виде, удобном для формирования печатной формы.
//
Функция ПолучитьШапкуОприходованияТмцДляПечати(ДокИд, Реквизиты)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Реквизиты = СоздатьОбъект("СписокЗначений");
		Реквизиты.ДобавитьЗначение(глНазваниеДокументаВЖурнале(Док),
		                           "НаименованиеДокумента");
		Реквизиты.ДобавитьЗначение(глНомерНаПечать(Док),
		                           "Номер");
		Реквизиты.ДобавитьЗначение(Строка(Док.ДатаДок),
		                           "Дата");
		Реквизиты.ДобавитьЗначение(СокрЛП(Док.Фирма.ЮрЛицо.ПолнНаименование),
		                           "Фирма");
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьШапкуОприходованияТмццДляПечати()

//******************************************************************************
// ПолучитьСоставОприходованияТмцДляПечати(ДокИд, Состав, Итоги)
//
// Параметры: 
//  ДокИд  - идентификатор документа.
//  Состав - таблица значений, содержащая данные для формирования табличной
//           части печатной формы.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Формирует таблицу значений, содержащую информацию, для формирования
//  табличной части существующего документа Оприходование ТМЦ в печатной форме. 
//
Функция ПолучитьСоставОприходованияТмцДляПечати(ДокИд, Состав)
	Перем Док;
	
	Рез = ПолучитьДокументПоИд(ДокИД, Док);
	Если Рез = 0 Тогда
		Сообщение = НетДокумента;
	Иначе
		Состав = СоздатьОбъект("ТаблицаЗначений");
		Состав.НоваяКолонка("Номенклатура"	,,,,"Товар");
		Состав.НоваяКолонка("Количество"	,,,,"Кол-во");
		Состав.НоваяКолонка("Единица"		,,,,"Единица");
		Состав.НоваяКолонка("Цена"			,,,,"Цена");
		Состав.НоваяКолонка("Сумма"			,,,,"Сумма");
		
		Док.ВыбратьСтроки();
		Пока Док.ПолучитьСтроку() = 1 Цикл
			Состав.НоваяСтрока();
			Состав.Номенклатура	= СокрЛП(Док.Номенклатура.ПолнНаименование);
			Состав.Количество	= СокрЛП(Док.Количество);
			Состав.Единица		= Строка(Док.Единица);
			Состав.Цена			= глФРМ(Док.Цена);
			Состав.Сумма		= глФРМ(Док.Сумма);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьСоставОприходованияТмцДляПечати()

//******************************************************************************
// ЗаписатьОприходованиеТмц(ДокИд, РеквШапки, ИзмСостав)
//
// Параметры: 
//  ДокИд     - идентификатор документа
//  РеквШапки - список значений, содержащий реквизиты шапки документа.
//  НовСостав - таблица значений, содержащая действительные значения изменяемых
//              колонок.
//
// Возвращаемое значение:
//  1 - успешное завершение, 0 - произошла ошибка.
//
// Описание:
//  Сохраняет документ Оприходование ТМЦ. Если параметр ДокИд пустой, то
//  создается новый документ.
//
Функция ЗаписатьОприходованиеТмц(ДокИд, РеквШапки, ИзмСостав, НовСостав)
	Перем Док, Реквизиты, ДокОсн;
	
	УдСтроки = СоздатьОбъект("СписокЗначений");
	
	Если ПолучитьДокументПоИд(ДокИД, Док) = 0 Тогда
		// создадим документ
		Док = СоздатьОбъект("Документ.ОприходованиеТМЦ");
		Док.Новый();
		Если ПолучитьДокументПоИд(РеквШапки.Получить("ДокОснованиеИд"), ДокОсн) = 0 Тогда
			// основание отсутствует
			Док.Фирма			= ЗначениеИзСтрокиВнутр(РеквШапки.Получить("ФирмаИд"));
			Док.Проект			= Пользователь.ОсновнойПроект;
			Док.Склад			= Склад;
		Иначе
			Док.ДокОснование	= ДокОсн;
			Док.Фирма			= ДокОсн.Фирма;
			Док.Проект			= ДокОсн.Проект;
			Док.Склад			= Склад;
		КонецЕсли;
	Иначе
		// обновим состав
		Док = СоздатьОбъект("Документ");
		Док.НайтиДокумент(ЗначениеИзСтрокиВнутр(ДокИд));
		ТекСтр = 1;
		ИзмСостав.ВыбратьСтроки();
		Пока ИзмСостав.ПолучитьСтроку() = 1 Цикл
		    Док.ПолучитьСтрокуПоНомеру(ТекСтр);
			
			Если ИзмСостав.Количество = 0 Тогда
				// заносим строку в список удаляемых
				УдСтроки.ДобавитьЗначение(ТекСтр);
			Иначе
				Док.Количество	= ИзмСостав.Количество;
				//Док.Цена 		= ИзмСостав.Цена;
				Док.Сумма		= ИзмСостав.Количество * Док.Цена;
			КонецЕсли;
			
			глПересчетТаблЧасти(Док, "Количество");
			ТекСтр = ТекСтр + 1;
		КонецЦикла;
		
		Для Сч = 1 По УдСтроки.РазмерСписка() Цикл
			НомУдСтр = УдСтроки.ПолучитьЗначение(Сч);
			Док.ПолучитьСтрокуПоНомеру(НомУдСтр - Сч + 1);
			Док.УдалитьСтроку();
		КонецЦикла;
		
		Док.Комментарий = РеквШапки.Получить("Комментарий");
	КонецЕсли;
		
	// добавляем новый
	ВидТовар = Перечисление.ВидыТМЦ.Товар;
	
	НовСостав.ВыбратьСтроки();
	Пока НовСостав.ПолучитьСтроку() = 1 Цикл
		Если НовСостав.Количество > 0 Тогда
		    Номенклатура = ЗначениеИзСтрокиВнутр(НовСостав.НоменклатураИд);
			Если ПустоеЗначение(Номенклатура) = 1 Тогда
			    Сообщение = "Не удалось идентифицировать Номенклатуру";
				Возврат 0;
			КонецЕсли;
			
			Док.НоваяСтрока();
		    Док.ВидТМЦ			= ВидТовар;
			Док.Номенклатура	= Номенклатура;
			Док.Количество		= НовСостав.Количество;
			Док.Единица			= Номенклатура.ОсновнаяЕдиница;
			Док.Коэффициент		= Номенклатура.ОсновнаяЕдиница.Коэффициент;
			Док.Сумма			= Док.Цена * НовСостав.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Док.Комментарий = РеквШапки.Получить("Комментарий");
	
	Попытка
		Док.Записать();
	Исключение
		Сообщение = ОписаниеОшибки();
		Возврат 0;
	КонецПопытки;
	
	ДокИд = ЗначениеВстрокуВнутр(Док.ТекущийДокумент());
		
	Возврат 1;
КонецФункции // ЗаписатьОприходованияТмц()

НетДокумента = "Не удалось идентифицировать документ по идентификатору";